1365933780
2 2
13 libpandaphysx 4 l5yH 10 pandaphysx 
1461
1501 11 ~PhysxEnums 0 4 2962 23 PhysxEnums::~PhysxEnums 0 0 0
30
PhysxEnums::~PhysxEnums(void);

1502 14 set_python_tag 0 4 2993 27 PhysxObject::set_python_tag 0 1 1 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::set_python_tag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
90
inline void PhysxObject::set_python_tag(basic_string< char > const &key, PyObject *value);

1503 14 get_python_tag 0 4 2993 27 PhysxObject::get_python_tag 0 1 2 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::get_python_tag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
84
inline PyObject *PhysxObject::get_python_tag(basic_string< char > const &key) const;

1504 14 has_python_tag 0 4 2993 27 PhysxObject::has_python_tag 0 1 3 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::has_python_tag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
79
inline bool PhysxObject::has_python_tag(basic_string< char > const &key) const;

1505 16 clear_python_tag 0 4 2993 29 PhysxObject::clear_python_tag 0 1 4 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::clear_python_tag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void PhysxObject::clear_python_tag(basic_string< char > const &key);

1506 15 has_python_tags 0 4 2993 28 PhysxObject::has_python_tags 0 1 5 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::has_python_tags
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline bool PhysxObject::has_python_tags(void) const;

1507 2 ls 0 4 2993 15 PhysxObject::ls 0 3 6 7 8 0
123
virtual void PhysxObject::ls(void) const = 0;
virtual void PhysxObject::ls(ostream &out, int indent_level = (0)) const = 0;

1508 14 get_class_type 0 4 2993 27 PhysxObject::get_class_type 0 1 9 83
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
52
static TypeHandle PhysxObject::get_class_type(void);

1509 21 upcast_to_PhysxObject 0 12 2995 33 PhysxActor::upcast_to_PhysxObject 0 1 122 37
upcast from PhysxActor to PhysxObject
53
PhysxObject *PhysxActor::upcast_to_PhysxObject(void);

1510 22 downcast_to_PhysxActor 0 12 2993 35 PhysxObject::downcast_to_PhysxActor 0 1 123 39
downcast from PhysxObject to PhysxActor
54
PhysxActor *PhysxObject::downcast_to_PhysxActor(void);

1511 20 upcast_to_PhysxEnums 0 12 2995 32 PhysxActor::upcast_to_PhysxEnums 0 1 124 36
upcast from PhysxActor to PhysxEnums
51
PhysxEnums *PhysxActor::upcast_to_PhysxEnums(void);

1512 22 downcast_to_PhysxActor 0 12 2962 34 PhysxEnums::downcast_to_PhysxActor 0 1 125 38
downcast from PhysxEnums to PhysxActor
53
PhysxActor *PhysxEnums::downcast_to_PhysxActor(void);

1513 10 PhysxActor 0 4 2995 22 PhysxActor::PhysxActor 0 1 10 708
// Filename: physxActor.I
// Created by:  enn0x (14Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
inline PhysxActor::PhysxActor(void);

1514 11 ~PhysxActor 0 4 2995 23 PhysxActor::~PhysxActor 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
virtual inline PhysxActor::~PhysxActor(void);

1515 17 save_body_to_desc 0 4 2995 29 PhysxActor::save_body_to_desc 0 1 11 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::save_body_to_desc
//       Access: Published
//  Description: Saves the body information of a dynamic actor to 
//               the passed body descriptor.
////////////////////////////////////////////////////////////////////
66
bool PhysxActor::save_body_to_desc(PhysxBodyDesc &bodyDesc) const;

1516 12 save_to_desc 0 4 2995 24 PhysxActor::save_to_desc 0 1 12 296
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::save_to_desc
//       Access: Published
//  Description: Saves the state of the actor to the passed 
//               descriptor.
////////////////////////////////////////////////////////////////////
63
void PhysxActor::save_to_desc(PhysxActorDesc &actorDesc) const;

1517 8 set_name 0 4 2995 20 PhysxActor::set_name 0 1 13 397
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
////////////////////////////////////////////////////////////////////
44
void PhysxActor::set_name(char const *name);

1518 14 set_global_pos 0 4 2995 26 PhysxActor::set_global_pos 0 1 14 363
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_pos
//       Access: Published
//  Description: Method for setting a dynamic actor's position in
//               the world. Please see set_global_mat for some
//               caveats.
////////////////////////////////////////////////////////////////////
53
void PhysxActor::set_global_pos(LPoint3f const &pos);

1519 14 set_global_mat 0 4 2995 26 PhysxActor::set_global_mat 0 1 15 1811
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_mat
//       Access: Published
//  Description: Method for setting a dynamic actor's transform
//               matrix in the world. 
//
//               This method instantaneously changes the actor space
//               to world space transformation.
//
//               One should exercise restraint in making use of
//               these methods.
//
//               Static actors should not be moved at all. There are
//               various internal data structures for static actors
//               which may need to be recomputed when one moves.
//               Also, moving static actors will not interact
//               correctly with dynamic actors or joints. If you
//               would like to directly control an actor's position
//               and would like to have it correctly interact with
//               dynamic bodies and joints, you should create a
//               dynamic body with the BF_kinematic flag, and then
//               use the move_global_*() commands to move it along
//               a path!
//
//               When briefly moving dynamic actors, one should not:
//               - Move actors into other actors, thus causing
//                 interpenetration (an invalid physical state).
//               - Move an actor that is connected by a joint to
//                 another away from the other (thus causing joint
//                 error).
//               - When moving jointed actors the joints' cached
//                 transform information is destroyed and recreated
//                 next frame; thus this call is expensive for
//                 jointed actors. 
////////////////////////////////////////////////////////////////////
54
void PhysxActor::set_global_mat(LMatrix4f const &mat);

1520 14 set_global_hpr 0 4 2995 26 PhysxActor::set_global_hpr 0 1 16 366
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_hpr
//       Access: Published
//  Description: Method for setting a dynamic actor's orientation in
//               the world. Please see set_global_mat for some
//               caveats.
////////////////////////////////////////////////////////////////////
59
void PhysxActor::set_global_hpr(float h, float p, float r);

1521 13 set_body_flag 0 4 2995 25 PhysxActor::set_body_flag 0 1 17 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_body_flag
//       Access: Published
//  Description: Raise or lower individual BodyFlag flags. 
////////////////////////////////////////////////////////////////////
75
void PhysxActor::set_body_flag(PhysxEnums::PhysxBodyFlag flag, bool value);

1522 14 set_actor_flag 0 4 2995 26 PhysxActor::set_actor_flag 0 1 18 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_actor_flag
//       Access: Published
//  Description: Raise or lower individual ActorFlag flags. 
////////////////////////////////////////////////////////////////////
77
void PhysxActor::set_actor_flag(PhysxEnums::PhysxActorFlag flag, bool value);

1523 23 set_contact_report_flag 0 4 2995 35 PhysxActor::set_contact_report_flag 0 1 19 855
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_contact_report_flag
//       Access: Published
//  Description: Sets the actor's contact report flags.
// 
//               These flags are used to determine the kind of
//               report that is generated for interactions with
//               other actors.
//
//               Please note: If the actor is part of an interacting
//               pair for which the contact report generation is
//               controlled already through any other mechanism
//               (for example by use of
//               PhysxScene::set_actor_pair_flags)
//               then the union of all the specified contact report
//               flags will be used to generate the report.
////////////////////////////////////////////////////////////////////
92
void PhysxActor::set_contact_report_flag(PhysxEnums::PhysxContactPairFlag flag, bool value);

1524 28 set_contact_report_threshold 0 4 2995 40 PhysxActor::set_contact_report_threshold 0 1 20 329
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_contact_report_threshold
//       Access: Published
//  Description: Sets the force threshold for contact reports.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
63
void PhysxActor::set_contact_report_threshold(float threshold);

1525 9 set_group 0 4 2995 21 PhysxActor::set_group 0 1 21 733
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_group
//       Access: Published
//  Description: Assigns the actor to a user defined group of
//               actors. The actor group must be an integer in
//               between 0 and 0x7fff (32767).
//
//               This is similar to NxShape groups, except those are
//               only five bits and serve a different purpose.
//
//               The PhysxScene::set_actor_group_pair_flags() lets
//               you set certain behaviors for pairs of actor
//               groups.
//
//               By default every actor is created in group 0.
////////////////////////////////////////////////////////////////////
47
void PhysxActor::set_group(unsigned int group);

1526 19 set_dominance_group 0 4 2995 31 PhysxActor::set_dominance_group 0 1 22 826
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_dominance_group
//       Access: Published
//  Description: Assigns dynamic actors a dominance group
//               identifier. Dominance groups are integere in the
//               range from 0 to 31.
//
//               This is similar to shape groups, except those serve
//               a different purpose.
//
//               The PhysxScene::set_dominance_group_pair() lets you
//               set certain behaviors for pairs of dominance
//               groups.
//
//               By default every actor is created in group 0.
//               Static actors must stay in group 0; thus you can
//               only call this on dynamic actors.
////////////////////////////////////////////////////////////////////
57
void PhysxActor::set_dominance_group(unsigned int group);

1527 15 set_shape_group 0 4 2995 27 PhysxActor::set_shape_group 0 1 23 325
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_shape_group
//       Access: Published
//  Description: Sets the collision group for all shapes of this
//               actor. See PhysxShape.setGroup().
////////////////////////////////////////////////////////////////////
53
void PhysxActor::set_shape_group(unsigned int group);

1528 8 get_name 0 4 2995 20 PhysxActor::get_name 0 1 24 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_name
//       Access: Published
//  Description: Retrieves the name string.
////////////////////////////////////////////////////////////////////
45
char const *PhysxActor::get_name(void) const;

1529 14 get_global_pos 0 4 2995 26 PhysxActor::get_global_pos 0 1 25 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_pos
//       Access: Published
//  Description: Retrieves the actors world space position.
////////////////////////////////////////////////////////////////////
48
LPoint3f PhysxActor::get_global_pos(void) const;

1530 14 get_global_mat 0 4 2995 26 PhysxActor::get_global_mat 0 1 26 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_mat
//       Access: Published
//  Description: Retrieves the actors world space transform.
////////////////////////////////////////////////////////////////////
49
LMatrix4f PhysxActor::get_global_mat(void) const;

1531 15 get_global_quat 0 4 2995 27 PhysxActor::get_global_quat 0 1 27 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_quat
//       Access: Published
//  Description: Retrieves the actors world space orientation.
////////////////////////////////////////////////////////////////////
53
LQuaternionf PhysxActor::get_global_quat(void) const;

1532 13 get_body_flag 0 4 2995 25 PhysxActor::get_body_flag 0 1 28 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_body_flag
//       Access: Published
//  Description: Return the specified BodyFlag flag.
////////////////////////////////////////////////////////////////////
69
bool PhysxActor::get_body_flag(PhysxEnums::PhysxBodyFlag flag) const;

1533 14 get_actor_flag 0 4 2995 26 PhysxActor::get_actor_flag 0 1 29 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_actor_flag
//       Access: Published
//  Description: Return the specified ActorFlag flag.
////////////////////////////////////////////////////////////////////
71
bool PhysxActor::get_actor_flag(PhysxEnums::PhysxActorFlag flag) const;

1534 9 get_group 0 4 2995 21 PhysxActor::get_group 0 1 30 290
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_group
//       Access: Published
//  Description: Retrieves the actor group this actor is assigned
//               to.
////////////////////////////////////////////////////////////////////
47
unsigned int PhysxActor::get_group(void) const;

1535 19 get_dominance_group 0 4 2995 31 PhysxActor::get_dominance_group 0 1 31 275
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_dominance_group
//       Access: Published
//  Description: Retrieves the dominance group of this actor.
////////////////////////////////////////////////////////////////////
57
unsigned int PhysxActor::get_dominance_group(void) const;

1536 10 is_dynamic 0 4 2995 22 PhysxActor::is_dynamic 0 1 32 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::is_dynamic
//       Access: Published
//  Description: Returns true if the actor is dynamic.
////////////////////////////////////////////////////////////////////
40
bool PhysxActor::is_dynamic(void) const;

1537 22 compute_kinetic_energy 0 4 2995 34 PhysxActor::compute_kinetic_energy 0 1 33 374
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::compute_kinetic_energy
//       Access: Published
//  Description: Computes the total kinetic (rotational and
//               translational) energy of the object.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
53
float PhysxActor::compute_kinetic_energy(void) const;

1538 23 update_mass_from_shapes 0 4 2995 35 PhysxActor::update_mass_from_shapes 0 1 34 1708
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::update_mass_from_shapes
//       Access: Published
//  Description: Recomputes a dynamic actor's mass properties from
//               its shapes. 
//
//               Given a constant density or total mass, the actors
//               mass properties can be recomputed using the shapes
//               attached to the actor. If the actor has no shapes,
//               then only the totalMass parameter can be used. If
//               all shapes in the actor are trigger shapes
//               (non-physical), the call will fail.
//
//               The mass of each shape is either the shape's local
//               density (as specified in the PhysxShapeDesc;
//               default 1.0) multiplied by the shape's volume or a
//               directly specified shape mass.
//
//               The inertia tensor, mass frame and center of mass
//               will always be recomputed. If there are no shapes
//               in the actor, the mass will be totalMass, and the
//               mass frame will be set to the center of the actor.
//
//               If you supply a non-zero total mass, the actor's
//               mass and inertia will first be computed as above
//               and then scaled to fit this total mass.
//
//               If you supply a non-zero density, the actor's mass
//               and inertia will first be computed as above and
//               then scaled by this factor.
//
//               Either totalMass or density must be non-zero.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
73
bool PhysxActor::update_mass_from_shapes(float density, float totalMass);

1539 9 get_scene 0 4 2995 21 PhysxActor::get_scene 0 1 35 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_scene
//       Access: Published
//  Description: Retrieves the scene which this actor belongs to.
////////////////////////////////////////////////////////////////////
46
PhysxScene *PhysxActor::get_scene(void) const;

1540 16 attach_node_path 0 4 2995 28 PhysxActor::attach_node_path 0 1 36 592
// NodePath

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::attach_node_path
//       Access: Published
//  Description: Attaches a node path to this actor. The node
//               path's transform will be updated automatically if
//               the actor's transform changes (and only then).
//
//               Note: any non-uniform scale or shear set on the
//               NodePath's transform will be overwritten at the
//               time of the first update.
////////////////////////////////////////////////////////////////////
54
void PhysxActor::attach_node_path(NodePath const &np);

1541 16 detach_node_path 0 4 2995 28 PhysxActor::detach_node_path 0 1 37 410
// NodePath

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::detach_node_path
//       Access: Published
//  Description: Detaches a previously assigned NodePath from this
//               actor. The NodePath's transform will no longer
//               be updated from the actor's transform.
////////////////////////////////////////////////////////////////////
40
void PhysxActor::detach_node_path(void);

1542 13 get_node_path 0 4 2995 25 PhysxActor::get_node_path 0 1 38 383
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_node_path
//       Access: Published
//  Description: Retrieves a previously attached NodePath. An empty
//               NodePath will be returned if no NodePath has been
//               attached to this actor.
////////////////////////////////////////////////////////////////////
47
NodePath PhysxActor::get_node_path(void) const;

1543 14 get_num_shapes 0 4 2995 26 PhysxActor::get_num_shapes 0 1 39 305
// Shapes

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_num_shapes
//       Access: Published
//  Description: Returns the number of shapes assigned to the
//               actor.
////////////////////////////////////////////////////////////////////
52
unsigned int PhysxActor::get_num_shapes(void) const;

1544 12 create_shape 0 4 2995 24 PhysxActor::create_shape 0 1 40 609
// Shapes

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::create_shape
//       Access: Published
//  Description: Creates a new shape and adds it to the list of
//               shapes of this actor. 
//
//               Mass properties of dynamic actors will not
//               automatically be recomputed to reflect the new mass
//               distribution implied by the shape. Follow this call
//               with a call to update_mass_from_shapes() to do
//               that.
////////////////////////////////////////////////////////////////////
59
PhysxShape *PhysxActor::create_shape(PhysxShapeDesc &desc);

1545 9 get_shape 0 4 2995 21 PhysxActor::get_shape 0 1 41 386
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_shape
//       Access: Published
//  Description: Retrieves an individual shape from the actor's
//               array of shapes. Index must be in the range from
//               zero to (number-of-shapes minus 1).
////////////////////////////////////////////////////////////////////
58
PhysxShape *PhysxActor::get_shape(unsigned int idx) const;

1546 17 get_shape_by_name 0 4 2995 29 PhysxActor::get_shape_by_name 0 1 42 467
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_shape_by_name
//       Access: Published
//  Description: Retrieves an individual shape from the actor's
//               array of shapes. The first shape for which the
//               shape's name matches the specified name is
//               returned, or NULL if no shape has a matching name.
////////////////////////////////////////////////////////////////////
66
PhysxShape *PhysxActor::get_shape_by_name(char const *name) const;

1547 9 add_force 0 4 2995 21 PhysxActor::add_force 0 3 43 44 45 653
// Forces

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame to the actor.
//
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
115
void PhysxActor::add_force(LVector3f const force, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1548 16 add_force_at_pos 0 4 2995 28 PhysxActor::add_force_at_pos 0 3 46 47 48 1036
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
143
void PhysxActor::add_force_at_pos(LVector3f const force, LPoint3f const &pos, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1549 22 add_force_at_local_pos 0 4 2995 34 PhysxActor::add_force_at_local_pos 0 3 49 50 51 1041
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
149
void PhysxActor::add_force_at_local_pos(LVector3f const force, LPoint3f const &pos, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1550 10 add_torque 0 4 2995 22 PhysxActor::add_torque 0 3 52 53 54 592
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the global
//               coordinate frame to the actor. 
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
117
void PhysxActor::add_torque(LVector3f const torque, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1551 15 add_local_force 0 4 2995 27 PhysxActor::add_local_force 0 3 55 56 57 651
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame to the actor. 
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
121
void PhysxActor::add_local_force(LVector3f const force, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1552 22 add_local_force_at_pos 0 4 2995 34 PhysxActor::add_local_force_at_pos 0 3 58 59 60 1047
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
149
void PhysxActor::add_local_force_at_pos(LVector3f const force, LPoint3f const &pos, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1553 28 add_local_force_at_local_pos 0 4 2995 40 PhysxActor::add_local_force_at_local_pos 0 3 61 62 63 1052
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
155
void PhysxActor::add_local_force_at_local_pos(LVector3f const force, LPoint3f const &pos, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1554 16 add_local_torque 0 4 2995 28 PhysxActor::add_local_torque 0 3 64 65 66 602
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the actor
//               local coordinate frame to the actor.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
////////////////////////////////////////////////////////////////////
123
void PhysxActor::add_local_torque(LVector3f const torque, PhysxEnums::PhysxForceMode mode = (FM_force), bool wakeup = (1));

1555 8 set_mass 0 4 2995 20 PhysxActor::set_mass 0 1 67 275
// Mass manipulation

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_mass
//       Access: Published
//  Description: Sets the mass of a dynamic actor.
////////////////////////////////////////////////////////////////////
38
void PhysxActor::set_mass(float mass);

1556 27 set_c_mass_offset_local_mat 0 4 2995 39 PhysxActor::set_c_mass_offset_local_mat 0 1 68 338
// Mass manipulation

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_mat
//       Access: Published
//  Description: Sets the matrix of the center of mass relative
//               to the actor.
////////////////////////////////////////////////////////////////////
67
void PhysxActor::set_c_mass_offset_local_mat(LMatrix4f const &mat);

1557 27 set_c_mass_offset_local_pos 0 4 2995 39 PhysxActor::set_c_mass_offset_local_pos 0 1 69 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_pos
//       Access: Published
//  Description: Sets the position of the center of mass relative
//               to the actor.
////////////////////////////////////////////////////////////////////
66
void PhysxActor::set_c_mass_offset_local_pos(LPoint3f const &pos);

1558 35 set_c_mass_offset_local_orientation 0 4 2995 47 PhysxActor::set_c_mass_offset_local_orientation 0 1 70 329
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_orientation
//       Access: Published
//  Description: Sets the orientation of the center of mass relative
//               to the actor.
////////////////////////////////////////////////////////////////////
75
void PhysxActor::set_c_mass_offset_local_orientation(LMatrix3f const &mat);

1559 28 set_c_mass_offset_global_mat 0 4 2995 40 PhysxActor::set_c_mass_offset_global_mat 0 1 71 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_mat
//       Access: Published
//  Description: Sets the matrix of the center of mass relative
//               to world space.
////////////////////////////////////////////////////////////////////
68
void PhysxActor::set_c_mass_offset_global_mat(LMatrix4f const &mat);

1560 28 set_c_mass_offset_global_pos 0 4 2995 40 PhysxActor::set_c_mass_offset_global_pos 0 1 72 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_pos
//       Access: Published
//  Description: Sets the position of the center of mass relative
//               to world space.
////////////////////////////////////////////////////////////////////
67
void PhysxActor::set_c_mass_offset_global_pos(LPoint3f const &pos);

1561 36 set_c_mass_offset_global_orientation 0 4 2995 48 PhysxActor::set_c_mass_offset_global_orientation 0 1 73 332
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_orientation
//       Access: Published
//  Description: Sets the orientation of the center of mass relative
//               to world space.
////////////////////////////////////////////////////////////////////
76
void PhysxActor::set_c_mass_offset_global_orientation(LMatrix3f const &mat);

1562 21 set_c_mass_global_mat 0 4 2995 33 PhysxActor::set_c_mass_global_mat 0 1 74 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_mat
//       Access: Published
//  Description: Moves the actor by setting the transform of the
//               center of mass.
////////////////////////////////////////////////////////////////////
61
void PhysxActor::set_c_mass_global_mat(LMatrix4f const &mat);

1563 21 set_c_mass_global_pos 0 4 2995 33 PhysxActor::set_c_mass_global_pos 0 1 75 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_pos
//       Access: Published
//  Description: Moves the actor by setting the position of the
//               center of mass.
////////////////////////////////////////////////////////////////////
60
void PhysxActor::set_c_mass_global_pos(LPoint3f const &pos);

1564 29 set_c_mass_global_orientation 0 4 2995 41 PhysxActor::set_c_mass_global_orientation 0 1 76 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_orientation
//       Access: Published
//  Description: Moves the actor by setting the orientation of the
//               center of mass.
////////////////////////////////////////////////////////////////////
69
void PhysxActor::set_c_mass_global_orientation(LMatrix3f const &mat);

1565 29 set_mass_space_inertia_tensor 0 4 2995 41 PhysxActor::set_mass_space_inertia_tensor 0 1 77 337
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_mass_space_inertia_tensor
//       Access: Published
//  Description: Sets the inertia tensor, using a parameter
//               specified in mass space coordinates.
////////////////////////////////////////////////////////////////////
67
void PhysxActor::set_mass_space_inertia_tensor(LVector3f const &m);

1566 8 get_mass 0 4 2995 20 PhysxActor::get_mass 0 1 78 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_mass
//       Access: Published
//  Description: Returns the mass of the actor.
////////////////////////////////////////////////////////////////////
39
float PhysxActor::get_mass(void) const;

1567 21 get_c_mass_global_mat 0 4 2995 33 PhysxActor::get_c_mass_global_mat 0 1 79 302
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_mat
//       Access: Published
//  Description: Returns the center of mass transform in world
//               space.
////////////////////////////////////////////////////////////////////
56
LMatrix4f PhysxActor::get_c_mass_global_mat(void) const;

1568 21 get_c_mass_global_pos 0 4 2995 33 PhysxActor::get_c_mass_global_pos 0 1 80 301
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_pos
//       Access: Published
//  Description: Returns the center of mass position in world
//               space.
////////////////////////////////////////////////////////////////////
55
LPoint3f PhysxActor::get_c_mass_global_pos(void) const;

1569 29 get_c_mass_global_orientation 0 4 2995 41 PhysxActor::get_c_mass_global_orientation 0 1 81 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_orientation
//       Access: Published
//  Description: Returns the center of mass orientation in world
//               space.
////////////////////////////////////////////////////////////////////
64
LMatrix3f PhysxActor::get_c_mass_global_orientation(void) const;

1570 20 get_c_mass_local_mat 0 4 2995 32 PhysxActor::get_c_mass_local_mat 0 1 82 308
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_mat
//       Access: Published
//  Description: Returns the center of mass transform relative
//               to the actor.
////////////////////////////////////////////////////////////////////
55
LMatrix4f PhysxActor::get_c_mass_local_mat(void) const;

1571 20 get_c_mass_local_pos 0 4 2995 32 PhysxActor::get_c_mass_local_pos 0 1 83 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_pos
//       Access: Published
//  Description: Returns the center of mass position relative to
//               the actor.
////////////////////////////////////////////////////////////////////
54
LPoint3f PhysxActor::get_c_mass_local_pos(void) const;

1572 28 get_c_mass_local_orientation 0 4 2995 40 PhysxActor::get_c_mass_local_orientation 0 1 84 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_orientation
//       Access: Published
//  Description: Returns the center of mass orientation relative to
//               the actor.
////////////////////////////////////////////////////////////////////
63
LMatrix3f PhysxActor::get_c_mass_local_orientation(void) const;

1573 29 get_mass_space_inertia_tensor 0 4 2995 41 PhysxActor::get_mass_space_inertia_tensor 0 1 85 345
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_mass_space_inertia_tensor
//       Access: Published
//  Description: Returns the diagonal inertia tensor of the actor
//               relative to the mass coordinate frame.
////////////////////////////////////////////////////////////////////
64
LVector3f PhysxActor::get_mass_space_inertia_tensor(void) const;

1574 25 get_global_inertia_tensor 0 4 2995 37 PhysxActor::get_global_inertia_tensor 0 1 86 333
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_inertia_tensor
//       Access: Published
//  Description: Returns the inertia tensor of the actor relative
//               to the world coordinate frame.
////////////////////////////////////////////////////////////////////
60
LMatrix3f PhysxActor::get_global_inertia_tensor(void) const;

1575 33 get_global_inertia_tensor_inverse 0 4 2995 45 PhysxActor::get_global_inertia_tensor_inverse 0 1 87 356
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_inertia_tensor_inverse
//       Access: Published
//  Description: Returns the inverse of the inertia tensor of the
//               actor relative to the world coordinate frame.
////////////////////////////////////////////////////////////////////
68
LMatrix3f PhysxActor::get_global_inertia_tensor_inverse(void) const;

1576 18 set_linear_damping 0 4 2995 30 PhysxActor::set_linear_damping 0 1 88 440
// Damping

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_damping
//       Access: Published
//  Description: Sets the linear damping coefficient. Zero
//               represents no damping. The damping coefficient must
//               be nonnegative. The actor must be dynamic.
//               Default: 0
////////////////////////////////////////////////////////////////////
51
void PhysxActor::set_linear_damping(float linDamp);

1577 19 set_angular_damping 0 4 2995 31 PhysxActor::set_angular_damping 0 1 89 470
// Damping

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_damping
//       Access: Published
//  Description: Sets the angular damping coefficient. Zero
//               represents no damping. The angular damping
//               coefficient must be nonnegative. The actor must be
//               dynamic.
//               Default: 0.05
////////////////////////////////////////////////////////////////////
52
void PhysxActor::set_angular_damping(float angDamp);

1578 18 get_linear_damping 0 4 2995 30 PhysxActor::get_linear_damping 0 1 90 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_damping
//       Access: Published
//  Description: Retrieves the linear damping coefficient. 
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
49
float PhysxActor::get_linear_damping(void) const;

1579 19 get_angular_damping 0 4 2995 31 PhysxActor::get_angular_damping 0 1 91 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_damping
//       Access: Published
//  Description: Returns the angular damping coefficient. 
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
50
float PhysxActor::get_angular_damping(void) const;

1580 19 set_linear_velocity 0 4 2995 31 PhysxActor::set_linear_velocity 0 1 92 637
// Velocity

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity of the actor. 
//
//               Note that if you continuously set the velocity of
//               an actor yourself, forces such as gravity or
//               friction will not be able to manifest themselves,
//               because forces directly influence only the
//               velocity/momentum of an actor.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
62
void PhysxActor::set_linear_velocity(LVector3f const &linVel);

1581 20 set_angular_velocity 0 4 2995 32 PhysxActor::set_angular_velocity 0 1 93 621
// Velocity

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_velocity
//       Access: Published
//  Description: Sets the angular velocity of the actor. 
//
//               Note that if you continuously set the angular
//               velocity of an actor yourself, forces such as
//               friction will not be able to rotate the actor,
//               because forces directly influence only the
//               velocity/momentum.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
63
void PhysxActor::set_angular_velocity(LVector3f const &angVel);

1582 24 set_max_angular_velocity 0 4 2995 36 PhysxActor::set_max_angular_velocity 0 1 94 1340
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_max_angular_velocity
//       Access: Published
//  Description: Lets you set the maximum angular velocity permitted
//               for this actor. 
//
//               Because for various internal computations, very
//               quickly rotating actors introduce error into the
//               simulation, which leads to undesired results.
//
//               With PhysxManager::set_parameter(PP_max_angular_velocity)
//               you can set the default maximum velocity for actors
//               created after the call. Bodies' high angular
//               velocities are clamped to this value.
//
//               However, because some actors, such as car wheels,
//               should be able to rotate quickly, you can override
//               the default setting on a per-actor basis with the
//               below call. Note that objects such as wheels which
//               are approximated with spherical or other smooth
//               collision primitives can be simulated with
//               stability at a much higher angular velocity than,
//               say, a box that has corners.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
59
void PhysxActor::set_max_angular_velocity(float maxAngVel);

1583 19 get_linear_velocity 0 4 2995 31 PhysxActor::get_linear_velocity 0 1 95 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity of an actor.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
54
LVector3f PhysxActor::get_linear_velocity(void) const;

1584 20 get_angular_velocity 0 4 2995 32 PhysxActor::get_angular_velocity 0 1 96 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_velocity
//       Access: Published
//  Description: Returns the angular velocity of the actor.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
55
LVector3f PhysxActor::get_angular_velocity(void) const;

1585 24 get_max_angular_velocity 0 4 2995 36 PhysxActor::get_max_angular_velocity 0 1 97 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_max_angular_velocity
//       Access: Published
//  Description: Returns the maximum angular velocity permitted
//               for this actor.
////////////////////////////////////////////////////////////////////
55
float PhysxActor::get_max_angular_velocity(void) const;

1586 18 get_point_velocity 0 4 2995 30 PhysxActor::get_point_velocity 0 1 98 442
// Point Velocity

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_point_velocity
//       Access: Published
//  Description: Computes the velocity of a point given in world
//               coordinates if it were attached to the actor and
//               moving with it.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
70
LVector3f PhysxActor::get_point_velocity(LPoint3f const &point) const;

1587 24 get_local_point_velocity 0 4 2995 36 PhysxActor::get_local_point_velocity 0 1 99 457
// Point Velocity

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_local_point_velocity
//       Access: Published
//  Description: Computes the velocity of a point given in body
//               local coordinates as if it were attached to the
//               actor and moving with it. 
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
76
LVector3f PhysxActor::get_local_point_velocity(LPoint3f const &point) const;

1588 19 set_linear_momentum 0 4 2995 31 PhysxActor::set_linear_momentum 0 1 100 637
// Momentum

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_momentum
//       Access: Published
//  Description: Sets the linear momentum of the actor. 
//               Note that if you continuously set the linear
//               momentum of an actor yourself, forces such as
//               gravity or friction will not be able to manifest
//               themselves, because forces directly influence only
//               the velocity/momentum of a actor.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
64
void PhysxActor::set_linear_momentum(LVector3f const &momentum);

1589 20 set_angular_momentum 0 4 2995 32 PhysxActor::set_angular_momentum 0 1 101 615
// Momentum

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_momentum
//       Access: Published
//  Description: Sets the angular momentum of the actor. 
//               Note that if you continuously set the angular
//               velocity of an actor yourself, forces such as
//               friction will not be able to rotate the actor,
//               because forces directly influence only the velocity
//               of actor.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
65
void PhysxActor::set_angular_momentum(LVector3f const &momentum);

1590 19 get_linear_momentum 0 4 2995 31 PhysxActor::get_linear_momentum 0 1 102 406
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_momentum
//       Access: Published
//  Description: Retrieves the linear momentum of an actor. 
//               The momentum is equal to the velocity times the
//               mass.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
54
LVector3f PhysxActor::get_linear_momentum(void) const;

1591 20 get_angular_momentum 0 4 2995 32 PhysxActor::get_angular_momentum 0 1 103 447
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_momentum
//       Access: Published
//  Description: Retrieves the angular momentum of an actor. 
//               The angular momentum is equal to the angular
//               velocity times the global space inertia tensor.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
55
LVector3f PhysxActor::get_angular_momentum(void) const;

1592 25 set_sleep_linear_velocity 0 4 2995 37 PhysxActor::set_sleep_linear_velocity 0 1 104 627
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an actor may
//               go to sleep. Actors whose linear velocity is above
//               this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
60
void PhysxActor::set_sleep_linear_velocity(float threshold);

1593 26 set_sleep_angular_velocity 0 4 2995 38 PhysxActor::set_sleep_angular_velocity 0 1 105 631
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_angular_velocity
//       Access: Published
//  Description: Sets the angular velocity below which an actor may
//               go to sleep.  Actors whose angular velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
61
void PhysxActor::set_sleep_angular_velocity(float threshold);

1594 26 set_sleep_energy_threshold 0 4 2995 38 PhysxActor::set_sleep_energy_threshold 0 1 106 755
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_energy_threshold
//       Access: Published
//  Description: Sets the energy threshold below which an actor may
//               go to sleep. Actors whose kinematic energy is above
//               this threshold will not be put to sleep.
//
//               Setting the sleep energy threshold only makes sense
//               when the BF_energy_sleep_test is set. There are
//               also other types of sleeping that uses the linear
//               and angular velocities directly instead of the
//               energy.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
61
void PhysxActor::set_sleep_energy_threshold(float threshold);

1595 25 get_sleep_linear_velocity 0 4 2995 37 PhysxActor::get_sleep_linear_velocity 0 1 107 459
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an actor
//               may go to sleep. Actors whose linear velocity is
//               above this threshold will not be put to sleep.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
56
float PhysxActor::get_sleep_linear_velocity(void) const;

1596 26 get_sleep_angular_velocity 0 4 2995 38 PhysxActor::get_sleep_angular_velocity 0 1 108 462
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_angular_velocity
//       Access: Published
//  Description: Returns the angular velocity below which an actor
//               may go to sleep. Actors whose angular velocity is
//               above this threshold will not be put to sleep.
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
57
float PhysxActor::get_sleep_angular_velocity(void) const;

1597 26 get_sleep_energy_threshold 0 4 2995 38 PhysxActor::get_sleep_energy_threshold 0 1 109 425
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_energy_threshold
//       Access: Published
//  Description: Returns the energy below which an actor may go to
//               sleep. Actors whose energy is above this threshold
//               will not be put to sleep. The actor must be dynamic.
////////////////////////////////////////////////////////////////////
57
float PhysxActor::get_sleep_energy_threshold(void) const;

1598 11 is_sleeping 0 4 2995 23 PhysxActor::is_sleeping 0 1 110 769
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::is_sleeping
//       Access: Published
//  Description: Returns true if this body is sleeping. 
//
//               When an actor does not move for a period of time,
//               it is no longer simulated in order to save time.
//               This state is called sleeping. However, because the
//               object automatically wakes up when it is either
//               touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
41
bool PhysxActor::is_sleeping(void) const;

1599 7 wake_up 0 4 2995 19 PhysxActor::wake_up 0 2 111 112 553
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::wake_up
//       Access: Published
//  Description: Wakes up the actor if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxActor::put_to_sleep().
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
71
void PhysxActor::wake_up(float wakeCounterValue = (NX_SLEEP_INTERVAL));

1600 12 put_to_sleep 0 4 2995 24 PhysxActor::put_to_sleep 0 1 113 603
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::put_to_sleep
//       Access: Published
//  Description: Forces the actor to sleep. 
//
//               The actor will stay asleep until the next call to
//               simulate, and will not wake up until then even when
//               otherwise it would (for example a force is applied
//               to it). It can however wake up during the next
//               do_physics call.
//
//               The actor must be dynamic.
////////////////////////////////////////////////////////////////////
36
void PhysxActor::put_to_sleep(void);

1601 15 move_global_pos 0 4 2995 27 PhysxActor::move_global_pos 0 1 114 489
// Kinematic

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_pos
//       Access: Published
//  Description: The move_global_* calls serve to move kinematically
//               controlled dynamic actors through the game world. 
//
//               See move_global_mat() for more information.
//
//               This call wakes the actor if it is sleeping.
////////////////////////////////////////////////////////////////////
54
void PhysxActor::move_global_pos(LPoint3f const &pos);

1602 15 move_global_mat 0 4 2995 27 PhysxActor::move_global_mat 0 1 115 1363
// Kinematic

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_mat
//       Access: Published
//  Description: The move_global_* calls serve to move
//               kinematically controlled dynamic actors through
//               the game world. 
//
//               You set a dynamic actor to be kinematic using the
//               BF_KINEMATIC body flag, used either in the
//               PhysBodyDesc or with set_body_flag().
//
//               The move command will result in a velocity that,
//               when successfully carried out (i.e. the motion is
//               not blocked due to joints or collisions) inside
//               run*(), will move the body into the desired pose.
//               After the move is carried out during a single time
//               step, the velocity is returned to zero. Thus, you
//               must continuously call this in every time step for
//               kinematic actors so that they move along a path.
//
//               These functions simply store the move destination
//               until run*() is called, so consecutive calls will
//               simply overwrite the stored target variable.
//
//               This call wakes the actor if it is sleeping.
////////////////////////////////////////////////////////////////////
55
void PhysxActor::move_global_mat(LMatrix4f const &mat);

1603 15 move_global_hpr 0 4 2995 27 PhysxActor::move_global_hpr 0 1 116 475
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_hpr
//       Access: Published
//  Description: The move_global_* calls serve to move kinematically
//               controlled dynamic actors through the game world. 
//
//               See move_global_mat() for more information.
//
//               This call wakes the actor if it is sleeping.
////////////////////////////////////////////////////////////////////
60
void PhysxActor::move_global_hpr(float h, float p, float r);

1604 2 ls 0 4 2995 14 PhysxActor::ls 0 3 117 118 119 430
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
127
virtual inline void PhysxActor::ls(void) const;
virtual inline void PhysxActor::ls(ostream &out, int indent_level = (0)) const;

1605 7 release 0 4 2995 19 PhysxActor::release 0 1 120 289
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
void PhysxActor::release(void);

1606 14 get_class_type 0 4 2995 26 PhysxActor::get_class_type 0 1 121 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxActor::get_class_type(void);

1607 21 upcast_to_PhysxObject 0 12 2996 38 PhysxController::upcast_to_PhysxObject 0 1 147 42
upcast from PhysxController to PhysxObject
58
PhysxObject *PhysxController::upcast_to_PhysxObject(void);

1608 27 downcast_to_PhysxController 0 12 2993 40 PhysxObject::downcast_to_PhysxController 0 1 148 44
downcast from PhysxObject to PhysxController
64
PhysxController *PhysxObject::downcast_to_PhysxController(void);

1609 20 upcast_to_PhysxEnums 0 12 2996 37 PhysxController::upcast_to_PhysxEnums 0 1 149 41
upcast from PhysxController to PhysxEnums
56
PhysxEnums *PhysxController::upcast_to_PhysxEnums(void);

1610 27 downcast_to_PhysxController 0 12 2962 39 PhysxEnums::downcast_to_PhysxController 0 1 150 43
downcast from PhysxEnums to PhysxController
63
PhysxController *PhysxEnums::downcast_to_PhysxController(void);

1611 7 release 0 4 2996 24 PhysxController::release 0 1 126 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
void PhysxController::release(void);

1612 9 get_actor 0 4 2996 26 PhysxController::get_actor 0 1 127 304
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_actor
//       Access: Published
//  Description: Retrieves the actor which this controller is
//               associated with.
////////////////////////////////////////////////////////////////////
51
PhysxActor *PhysxController::get_actor(void) const;

1613 7 set_pos 0 4 2996 24 PhysxController::set_pos 0 1 128 383
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_pos
//       Access: Published
//  Description: Sets the position of the controller is global
//               space. This can be used for initial placement or
//               for teleporting the character.
////////////////////////////////////////////////////////////////////
51
void PhysxController::set_pos(LPoint3f const &pos);

1614 13 set_sharpness 0 4 2996 30 PhysxController::set_sharpness 0 1 129 573
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_sharpness
//       Access: Published
//  Description: Sharpness is used to smooth motion with a feedback
//               filter, having a value between 0 (so smooth it
//               doesn't move) and 1 (no smoothing = unfiltered
//               motion). Sharpness can ease the motion curve when
//               the auto-step feature is used with boxes.
//               Default value is 1.0.
////////////////////////////////////////////////////////////////////
53
void PhysxController::set_sharpness(float sharpness);

1615 13 set_collision 0 4 2996 30 PhysxController::set_collision 0 1 130 303
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_collision
//       Access: Published
//  Description: Enable/Disable collisions for this controller and
//               actor.
////////////////////////////////////////////////////////////////////
49
void PhysxController::set_collision(bool enable);

1616 16 set_min_distance 0 4 2996 33 PhysxController::set_min_distance 0 1 131 585
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_min_distance
//       Access: Published
//  Description: Sets the the minimum travelled distance to consider
//               when moving the controller. If travelled distance
//               is smaller, the character doesn't move. This is
//               used to stop the recursive motion algorithm when
//               remaining distance to travel is small. 
//               The default value is 0.0001.
////////////////////////////////////////////////////////////////////
55
void PhysxController::set_min_distance(float min_dist);

1617 15 set_step_offset 0 4 2996 32 PhysxController::set_step_offset 0 1 132 279
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_step_offset
//       Access: Published
//  Description: Sets the step height/offset for the controller.
////////////////////////////////////////////////////////////////////
52
void PhysxController::set_step_offset(float offset);

1618 7 get_pos 0 4 2996 24 PhysxController::get_pos 0 1 133 296
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_pos
//       Access: Published
//  Description: Retruns the position of the controller is global
//               space.
////////////////////////////////////////////////////////////////////
46
LPoint3f PhysxController::get_pos(void) const;

1619 13 get_sharpness 0 4 2996 30 PhysxController::get_sharpness 0 1 134 373
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_sharpness
//       Access: Published
//  Description: Returns the sharpness used to ease the motion curve
//               when the auto-step feature is used.
//               Default value is 1.0.
////////////////////////////////////////////////////////////////////
49
float PhysxController::get_sharpness(void) const;

1620 16 set_global_speed 0 4 2996 33 PhysxController::set_global_speed 0 1 135 306
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_global_speed
//       Access: Published
//  Description: Sets the linear speed of the controller in global
//               space.
////////////////////////////////////////////////////////////////////
63
void PhysxController::set_global_speed(LVector3f const &speed);

1621 15 set_local_speed 0 4 2996 32 PhysxController::set_local_speed 0 1 136 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_local_speed
//       Access: Published
//  Description: Sets the linear speed of the controller in local
//               coordinates.
////////////////////////////////////////////////////////////////////
62
void PhysxController::set_local_speed(LVector3f const &speed);

1622 9 set_omega 0 4 2996 26 PhysxController::set_omega 0 1 137 428
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_omega
//       Access: Published
//  Description: Sets the angular velocity (degrees per second)
//               of the controller. The angular velocity is used to
//               compute the new heading when updating the
//               controller.
////////////////////////////////////////////////////////////////////
45
void PhysxController::set_omega(float omega);

1623 5 set_h 0 4 2996 22 PhysxController::set_h 0 1 138 445
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_h
//       Access: Published
//  Description: Sets the heading of the controller is global
//               space. Note: only heading is supported. Pitch and
//               roll are constrained by PhysX in order to alyways
//               keep the character upright.
////////////////////////////////////////////////////////////////////
43
void PhysxController::set_h(float heading);

1624 5 get_h 0 4 2996 22 PhysxController::get_h 0 1 139 293
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_h
//       Access: Published
//  Description: Returns the heading of the controller in global
//               space.
////////////////////////////////////////////////////////////////////
41
float PhysxController::get_h(void) const;

1625 20 report_scene_changed 0 4 2996 37 PhysxController::report_scene_changed 0 1 140 520
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::report_scene_changed
//       Access: Published
//  Description: The character controller uses caching in order to
//               speed up collision testing, this caching can not
//               detect when static objects have changed in the
//               scene. You need to call this method when such
//               changes have been made.
////////////////////////////////////////////////////////////////////
49
void PhysxController::report_scene_changed(void);

1626 10 start_jump 0 4 2996 27 PhysxController::start_jump 0 1 141 327
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::start_jump
//       Access: Published
//  Description: Enters the jump mode. The parameter is the intial
//               upward velocity of the character.
////////////////////////////////////////////////////////////////////
43
void PhysxController::start_jump(float v0);

1627 9 stop_jump 0 4 2996 26 PhysxController::stop_jump 0 1 142 393
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::stop_jump
//       Access: Published
//  Description: Leaves the jump mode. This method is automatically
//               called if a ground collision is detected. Usually
//               users need not call this method.
////////////////////////////////////////////////////////////////////
38
void PhysxController::stop_jump(void);

1628 2 ls 0 4 2996 19 PhysxController::ls 0 3 143 144 145 440
////////////////////////////////////////////////////////////////////
//     Function: PhysxController::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxController::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
137
virtual inline void PhysxController::ls(void) const;
virtual inline void PhysxController::ls(ostream &out, int indent_level = (0)) const;

1629 14 get_class_type 0 4 2996 31 PhysxController::get_class_type 0 1 146 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxController::get_class_type(void);

1630 16 ~PhysxController 0 4 2996 33 PhysxController::~PhysxController 0 0 0
40
PhysxController::~PhysxController(void);

1631 18 PhysxBoxController 0 4 2997 38 PhysxBoxController::PhysxBoxController 0 1 151 724
// Filename: physxBoxController.I
// Created by:  enn0x (24Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline PhysxBoxController::PhysxBoxController(void);

1632 11 set_extents 0 4 2997 31 PhysxBoxController::set_extents 0 1 152 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::set_extents
//       Access: Published
//  Description: Sets controller's extents.
////////////////////////////////////////////////////////////////////
63
void PhysxBoxController::set_extents(LVector3f const &extents);

1633 11 get_extents 0 4 2997 31 PhysxBoxController::get_extents 0 1 153 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::get_extents
//       Access: Published
//  Description: Returns controller's extents.
////////////////////////////////////////////////////////////////////
54
LVector3f PhysxBoxController::get_extents(void) const;

1634 14 get_class_type 0 4 2997 34 PhysxBoxController::get_class_type 0 1 154 68
////////////////////////////////////////////////////////////////////
59
static TypeHandle PhysxBoxController::get_class_type(void);

1635 21 upcast_to_PhysxObject 0 12 2998 43 PhysxForceFieldShape::upcast_to_PhysxObject 0 1 168 47
upcast from PhysxForceFieldShape to PhysxObject
63
PhysxObject *PhysxForceFieldShape::upcast_to_PhysxObject(void);

1636 32 downcast_to_PhysxForceFieldShape 0 12 2993 45 PhysxObject::downcast_to_PhysxForceFieldShape 0 1 169 49
downcast from PhysxObject to PhysxForceFieldShape
74
PhysxForceFieldShape *PhysxObject::downcast_to_PhysxForceFieldShape(void);

1637 20 upcast_to_PhysxEnums 0 12 2998 42 PhysxForceFieldShape::upcast_to_PhysxEnums 0 1 170 46
upcast from PhysxForceFieldShape to PhysxEnums
61
PhysxEnums *PhysxForceFieldShape::upcast_to_PhysxEnums(void);

1638 32 downcast_to_PhysxForceFieldShape 0 12 2962 44 PhysxEnums::downcast_to_PhysxForceFieldShape 0 1 171 48
downcast from PhysxEnums to PhysxForceFieldShape
73
PhysxForceFieldShape *PhysxEnums::downcast_to_PhysxForceFieldShape(void);

1639 7 release 0 4 2998 29 PhysxForceFieldShape::release 0 1 155 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
void PhysxForceFieldShape::release(void);

1640 15 get_force_field 0 4 2998 37 PhysxForceFieldShape::get_force_field 0 1 156 352
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_force_field
//       Access: Published
//  Description: Returns the owning force field if this is a shape
//               of an include group, else NULL will be returned.
////////////////////////////////////////////////////////////////////
67
PhysxForceField *PhysxForceFieldShape::get_force_field(void) const;

1641 15 get_shape_group 0 4 2998 37 PhysxForceFieldShape::get_shape_group 0 1 157 280
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_shape_group
//       Access: Published
//  Description: Returns the owning force field shape group.
////////////////////////////////////////////////////////////////////
77
PhysxForceFieldShapeGroup *PhysxForceFieldShape::get_shape_group(void) const;

1642 8 set_name 0 4 2998 30 PhysxForceFieldShape::set_name 0 1 158 331
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
////////////////////////////////////////////////////////////////////
54
void PhysxForceFieldShape::set_name(char const *name);

1643 7 set_mat 0 4 2998 29 PhysxForceFieldShape::set_mat 0 1 159 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_mat
//       Access: Published
//  Description: Sets the force field shape's transform.
////////////////////////////////////////////////////////////////////
57
void PhysxForceFieldShape::set_mat(LMatrix4f const &mat);

1644 7 set_pos 0 4 2998 29 PhysxForceFieldShape::set_pos 0 1 160 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_pos
//       Access: Published
//  Description: Sets the force field shape's translation.
////////////////////////////////////////////////////////////////////
56
void PhysxForceFieldShape::set_pos(LPoint3f const &pos);

1645 8 get_name 0 4 2998 30 PhysxForceFieldShape::get_name 0 1 161 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_name
//       Access: Published
//  Description: Returns the name string. 
////////////////////////////////////////////////////////////////////
55
char const *PhysxForceFieldShape::get_name(void) const;

1646 7 get_mat 0 4 2998 29 PhysxForceFieldShape::get_mat 0 1 162 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_mat
//       Access: Published
//  Description: Returns the force field shape's transform. 
////////////////////////////////////////////////////////////////////
52
LMatrix4f PhysxForceFieldShape::get_mat(void) const;

1647 7 get_pos 0 4 2998 29 PhysxForceFieldShape::get_pos 0 1 163 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_pos
//       Access: Published
//  Description: Returns the force field shape's translation.
////////////////////////////////////////////////////////////////////
51
LPoint3f PhysxForceFieldShape::get_pos(void) const;

1648 2 ls 0 4 2998 24 PhysxForceFieldShape::ls 0 3 164 165 166 450
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
147
virtual inline void PhysxForceFieldShape::ls(void) const;
virtual inline void PhysxForceFieldShape::ls(ostream &out, int indent_level = (0)) const;

1649 14 get_class_type 0 4 2998 36 PhysxForceFieldShape::get_class_type 0 1 167 68
////////////////////////////////////////////////////////////////////
61
static TypeHandle PhysxForceFieldShape::get_class_type(void);

1650 21 ~PhysxForceFieldShape 0 4 2998 43 PhysxForceFieldShape::~PhysxForceFieldShape 0 0 0
50
PhysxForceFieldShape::~PhysxForceFieldShape(void);

1651 23 PhysxBoxForceFieldShape 0 4 2999 48 PhysxBoxForceFieldShape::PhysxBoxForceFieldShape 0 1 172 734
// Filename: physxBoxForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline PhysxBoxForceFieldShape::PhysxBoxForceFieldShape(void);

1652 12 save_to_desc 0 4 2999 37 PhysxBoxForceFieldShape::save_to_desc 0 1 173 311
////////////////////////////////////////////////////////////////////
//     Function : PhysxBoxForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
89
void PhysxBoxForceFieldShape::save_to_desc(PhysxBoxForceFieldShapeDesc &shapeDesc) const;

1653 14 set_dimensions 0 4 2999 39 PhysxBoxForceFieldShape::set_dimensions 0 1 174 453
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::set_dimensions
//       Access: Published
//  Description: Sets the box dimensions. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
74
void PhysxBoxForceFieldShape::set_dimensions(LVector3f const &dimensions);

1654 14 get_dimensions 0 4 2999 39 PhysxBoxForceFieldShape::get_dimensions 0 1 175 465
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::get_dimensions
//       Access: Published
//  Description: Retrieves the dimensions of the box. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
62
LVector3f PhysxBoxForceFieldShape::get_dimensions(void) const;

1655 14 get_class_type 0 4 2999 39 PhysxBoxForceFieldShape::get_class_type 0 1 176 68
////////////////////////////////////////////////////////////////////
64
static TypeHandle PhysxBoxForceFieldShape::get_class_type(void);

1656 21 upcast_to_PhysxObject 0 12 3000 33 PhysxShape::upcast_to_PhysxObject 0 1 206 37
upcast from PhysxShape to PhysxObject
53
PhysxObject *PhysxShape::upcast_to_PhysxObject(void);

1657 22 downcast_to_PhysxShape 0 12 2993 35 PhysxObject::downcast_to_PhysxShape 0 1 207 39
downcast from PhysxObject to PhysxShape
54
PhysxShape *PhysxObject::downcast_to_PhysxShape(void);

1658 20 upcast_to_PhysxEnums 0 12 3000 32 PhysxShape::upcast_to_PhysxEnums 0 1 208 36
upcast from PhysxShape to PhysxEnums
51
PhysxEnums *PhysxShape::upcast_to_PhysxEnums(void);

1659 22 downcast_to_PhysxShape 0 12 2962 34 PhysxEnums::downcast_to_PhysxShape 0 1 209 38
downcast from PhysxEnums to PhysxShape
53
PhysxShape *PhysxEnums::downcast_to_PhysxShape(void);

1660 7 release 0 4 3000 19 PhysxShape::release 0 1 177 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
void PhysxShape::release(void);

1661 9 get_actor 0 4 3000 21 PhysxShape::get_actor 0 1 178 294
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_actor
//       Access: Published
//  Description: Retrieves the actor which this shape is associated
//               with.
////////////////////////////////////////////////////////////////////
46
PhysxActor *PhysxShape::get_actor(void) const;

1662 8 set_name 0 4 3000 20 PhysxShape::set_name 0 1 179 416
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
//               This is for debugging and is not used by the
//               physics engine.
////////////////////////////////////////////////////////////////////
44
void PhysxShape::set_name(char const *name);

1663 8 set_flag 0 4 3000 20 PhysxShape::set_flag 0 1 180 814
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_flag
//       Access: Published
//  Description: Sets the specified shape flag.
//
//                The shape may be turned into a trigger by setting
//                one or more of the TriggerFlags to true. A trigger
//                shape will not collide with other shapes. Instead,
//                if a shape enters the trigger's volume, a trigger
//                event will be sent. Trigger events can be listened
//                to by DirectObjects.
//                The following trigger events can be sent:
//                - physx-trigger-enter
//                - physx-trigger-stay
//                - physx-trigger-leave
////////////////////////////////////////////////////////////////////
77
void PhysxShape::set_flag(PhysxEnums::PhysxShapeFlag const flag, bool value);

1664 14 set_skin_width 0 4 3000 26 PhysxShape::set_skin_width 0 1 181 301
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_skin_width
//       Access: Published
//  Description: Sets the skin width. 
//               The skin width must be non-negative.
////////////////////////////////////////////////////////////////////
49
void PhysxShape::set_skin_width(float skinWidth);

1665 9 set_group 0 4 3000 21 PhysxShape::set_group 0 1 182 572
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_group
//       Access: Published
//  Description: Sets which collision group this shape is part of. 
//
//               Default group is 0. Maximum possible group is 31.
//               Collision groups are sets of shapes which may or
//               may not be set to collision detect with each other;
//               this can be set using
//               PhysxScene::set_group_collision_flag().
////////////////////////////////////////////////////////////////////
53
void PhysxShape::set_group(unsigned short int group);

1666 13 set_local_pos 0 4 3000 25 PhysxShape::set_local_pos 0 1 183 675
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_local_pos
//       Access: Published
//  Description: Set the position of the shape in actor space, i.e.
//               relative to the actor it is owned by.
//
//               Calling this method does NOT wake the associated
//               actor up automatically.
//
//               Calling this method does not automatically update
//               the inertia properties of the owning actor (if
//               applicable); use
//               PhysxActor::update_mass_from_shapes() to do this.
////////////////////////////////////////////////////////////////////
52
void PhysxShape::set_local_pos(LPoint3f const &pos);

1667 13 set_local_mat 0 4 3000 25 PhysxShape::set_local_mat 0 1 184 676
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_local_mat
//       Access: Published
//  Description: Set the transform of the shape in actor space,
//               i.e. relative to the actor it is owned by.
//
//               Calling this method does NOT wake the associated
//               actor up automatically.
//
//               Calling this method does not automatically update
//               the inertia properties of the owning actor (if
//               applicable); use
//               PhysxActor::update_mass_from_shapes() to do this.
////////////////////////////////////////////////////////////////////
53
void PhysxShape::set_local_mat(LMatrix4f const &mat);

1668 12 set_material 0 4 3000 24 PhysxShape::set_material 0 1 185 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_material
//       Access: Published
//  Description: Assigns a material to the shape.
////////////////////////////////////////////////////////////////////
61
void PhysxShape::set_material(PhysxMaterial const &material);

1669 18 set_material_index 0 4 3000 30 PhysxShape::set_material_index 0 1 186 581
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_material_index
//       Access: Published
//  Description: Assigns a material index to the shape. 
//
//               The material index can be retrieved by calling
//               PhysxMaterial::get_material_index(). If the material
//               index is invalid, it will still be recorded, but
//               the default material (at index 0) will effectively
//               be used for simulation.
////////////////////////////////////////////////////////////////////
60
void PhysxShape::set_material_index(unsigned short int idx);

1670 15 set_groups_mask 0 4 3000 27 PhysxShape::set_groups_mask 0 1 187 361
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
//               Does NOT wake the associated actor up
//               automatically.
////////////////////////////////////////////////////////////////////
62
void PhysxShape::set_groups_mask(PhysxGroupsMask const &mask);

1671 8 get_name 0 4 3000 20 PhysxShape::get_name 0 1 188 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_name
//       Access: Published
//  Description: Returns the name string. 
////////////////////////////////////////////////////////////////////
45
char const *PhysxShape::get_name(void) const;

1672 8 get_flag 0 4 3000 20 PhysxShape::get_flag 0 1 189 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_flag
//       Access: Published
//  Description: Returns the specified shape flag.
////////////////////////////////////////////////////////////////////
71
bool PhysxShape::get_flag(PhysxEnums::PhysxShapeFlag const flag) const;

1673 14 get_skin_width 0 4 3000 26 PhysxShape::get_skin_width 0 1 190 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_skin_width
//       Access: Published
//  Description: Returns the skin width.
////////////////////////////////////////////////////////////////////
45
float PhysxShape::get_skin_width(void) const;

1674 9 get_group 0 4 3000 21 PhysxShape::get_group 0 1 191 357
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_group
//       Access: Published
//  Description: Retrieves the collision group set for this shape. 
//               The collision group is an integer between 0 and
//               31.
////////////////////////////////////////////////////////////////////
53
unsigned short int PhysxShape::get_group(void) const;

1675 13 get_local_pos 0 4 3000 25 PhysxShape::get_local_pos 0 1 192 336
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_local_pos
//       Access: Published
//  Description: Retrieve the position of the shape in actor space,
//               i.e. relative to the actor it is owned by. 
////////////////////////////////////////////////////////////////////
47
LPoint3f PhysxShape::get_local_pos(void) const;

1676 13 get_local_mat 0 4 3000 25 PhysxShape::get_local_mat 0 1 193 337
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_local_mat
//       Access: Published
//  Description: Retrieve the transform of the shape in actor space,
//               i.e. relative to the actor it is owned by. 
////////////////////////////////////////////////////////////////////
48
LMatrix4f PhysxShape::get_local_mat(void) const;

1677 18 get_material_index 0 4 3000 30 PhysxShape::get_material_index 0 1 194 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_material_index
//       Access: Published
//  Description: Returns the material index currently assigned to
//               the shape. 
////////////////////////////////////////////////////////////////////
62
unsigned short int PhysxShape::get_material_index(void) const;

1678 15 get_groups_mask 0 4 3000 27 PhysxShape::get_groups_mask 0 1 195 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_groups_mask
//       Access: Published
//  Description: Gets 128-bit mask used for collision filtering.
////////////////////////////////////////////////////////////////////
56
PhysxGroupsMask PhysxShape::get_groups_mask(void) const;

1679 16 get_world_bounds 0 4 3000 28 PhysxShape::get_world_bounds 0 1 196 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_world_bounds
//       Access: Published
//  Description: Returns a world space AABB enclosing this shape.
////////////////////////////////////////////////////////////////////
54
PhysxBounds3 PhysxShape::get_world_bounds(void) const;

1680 18 check_overlap_aabb 0 4 3000 30 PhysxShape::check_overlap_aabb 0 1 197 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_aabb
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               AABB or not.
////////////////////////////////////////////////////////////////////
76
bool PhysxShape::check_overlap_aabb(PhysxBounds3 const &world_bounds) const;

1681 21 check_overlap_capsule 0 4 3000 33 PhysxShape::check_overlap_capsule 0 1 198 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_capsule
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               capsule or not.
////////////////////////////////////////////////////////////////////
80
bool PhysxShape::check_overlap_capsule(PhysxCapsule const &world_capsule) const;

1682 17 check_overlap_obb 0 4 3000 29 PhysxShape::check_overlap_obb 0 1 199 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_obb
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               OBB or not.
////////////////////////////////////////////////////////////////////
68
bool PhysxShape::check_overlap_obb(PhysxBox const &world_box) const;

1683 20 check_overlap_sphere 0 4 3000 32 PhysxShape::check_overlap_sphere 0 1 200 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_sphere
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               sphere or not.
////////////////////////////////////////////////////////////////////
77
bool PhysxShape::check_overlap_sphere(PhysxSphere const &world_sphere) const;

1684 7 raycast 0 4 3000 19 PhysxShape::raycast 0 1 201 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::raycast
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
102
PhysxRaycastHit PhysxShape::raycast(PhysxRay const &worldRay, bool firstHit, bool smoothNormal) const;

1685 2 ls 0 4 3000 14 PhysxShape::ls 0 3 202 203 204 430
////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
127
virtual inline void PhysxShape::ls(void) const;
virtual inline void PhysxShape::ls(ostream &out, int indent_level = (0)) const;

1686 14 get_class_type 0 4 3000 26 PhysxShape::get_class_type 0 1 205 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxShape::get_class_type(void);

1687 11 ~PhysxShape 0 4 3000 23 PhysxShape::~PhysxShape 0 0 0
30
PhysxShape::~PhysxShape(void);

1688 13 PhysxBoxShape 0 4 3001 28 PhysxBoxShape::PhysxBoxShape 0 1 210 714
// Filename: physxBoxShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline PhysxBoxShape::PhysxBoxShape(void);

1689 12 save_to_desc 0 4 3001 27 PhysxBoxShape::save_to_desc 0 1 211 301
////////////////////////////////////////////////////////////////////
//     Function : PhysxBoxShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
69
void PhysxBoxShape::save_to_desc(PhysxBoxShapeDesc &shapeDesc) const;

1690 14 set_dimensions 0 4 3001 29 PhysxBoxShape::set_dimensions 0 1 212 443
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::set_dimensions
//       Access: Published
//  Description: Sets the box dimensions. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
64
void PhysxBoxShape::set_dimensions(LVector3f const &dimensions);

1691 14 get_dimensions 0 4 3001 29 PhysxBoxShape::get_dimensions 0 1 213 455
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::get_dimensions
//       Access: Published
//  Description: Retrieves the dimensions of the box. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
52
LVector3f PhysxBoxShape::get_dimensions(void) const;

1692 14 get_class_type 0 4 3001 29 PhysxBoxShape::get_class_type 0 1 214 68
////////////////////////////////////////////////////////////////////
54
static TypeHandle PhysxBoxShape::get_class_type(void);

1693 22 PhysxCapsuleController 0 4 3002 46 PhysxCapsuleController::PhysxCapsuleController 0 1 215 732
// Filename: physxCapsuleController.I
// Created by:  enn0x (24Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxCapsuleController::PhysxCapsuleController(void);

1694 10 set_radius 0 4 3002 34 PhysxCapsuleController::set_radius 0 1 216 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::set_radius
//       Access: Published
//  Description: Resets the controller's radius.
////////////////////////////////////////////////////////////////////
54
void PhysxCapsuleController::set_radius(float radius);

1695 10 set_height 0 4 3002 34 PhysxCapsuleController::set_height 0 1 217 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::set_height
//       Access: Published
//  Description: Resets the controller's height.
////////////////////////////////////////////////////////////////////
54
void PhysxCapsuleController::set_height(float height);

1696 10 get_radius 0 4 3002 34 PhysxCapsuleController::get_radius 0 1 218 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::get_radius
//       Access: Published
//  Description: Returns the controller's radius.
////////////////////////////////////////////////////////////////////
53
float PhysxCapsuleController::get_radius(void) const;

1697 10 get_height 0 4 3002 34 PhysxCapsuleController::get_height 0 1 219 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::get_height
//       Access: Published
//  Description: Returns the controller's height.
////////////////////////////////////////////////////////////////////
53
float PhysxCapsuleController::get_height(void) const;

1698 14 get_class_type 0 4 3002 38 PhysxCapsuleController::get_class_type 0 1 220 68
////////////////////////////////////////////////////////////////////
63
static TypeHandle PhysxCapsuleController::get_class_type(void);

1699 27 PhysxCapsuleForceFieldShape 0 4 3003 56 PhysxCapsuleForceFieldShape::PhysxCapsuleForceFieldShape 0 1 221 742
// Filename: physxCapsuleForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline PhysxCapsuleForceFieldShape::PhysxCapsuleForceFieldShape(void);

1700 12 save_to_desc 0 4 3003 41 PhysxCapsuleForceFieldShape::save_to_desc 0 1 222 315
////////////////////////////////////////////////////////////////////
//     Function : PhysxCapsuleForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
97
void PhysxCapsuleForceFieldShape::save_to_desc(PhysxCapsuleForceFieldShapeDesc &shapeDesc) const;

1701 10 set_radius 0 4 3003 39 PhysxCapsuleForceFieldShape::set_radius 0 1 223 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::set_radius
//       Access: Published
//  Description: Alters the radius of the capsule.
////////////////////////////////////////////////////////////////////
59
void PhysxCapsuleForceFieldShape::set_radius(float radius);

1702 10 set_height 0 4 3003 39 PhysxCapsuleForceFieldShape::set_height 0 1 224 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::set_height
//       Access: Published
//  Description: Alters the height of the capsule.
////////////////////////////////////////////////////////////////////
59
void PhysxCapsuleForceFieldShape::set_height(float height);

1703 10 get_radius 0 4 3003 39 PhysxCapsuleForceFieldShape::get_radius 0 1 225 275
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::get_radius
//       Access: Published
//  Description: Retrieves the radius of the capsule.
////////////////////////////////////////////////////////////////////
58
float PhysxCapsuleForceFieldShape::get_radius(void) const;

1704 10 get_height 0 4 3003 39 PhysxCapsuleForceFieldShape::get_height 0 1 226 275
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::get_height
//       Access: Published
//  Description: Retrieves the height of the capsule.
////////////////////////////////////////////////////////////////////
58
float PhysxCapsuleForceFieldShape::get_height(void) const;

1705 14 get_class_type 0 4 3003 43 PhysxCapsuleForceFieldShape::get_class_type 0 1 227 68
////////////////////////////////////////////////////////////////////
68
static TypeHandle PhysxCapsuleForceFieldShape::get_class_type(void);

1706 17 PhysxCapsuleShape 0 4 3004 36 PhysxCapsuleShape::PhysxCapsuleShape 0 1 228 722
// Filename: physxCapsuleShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PhysxCapsuleShape::PhysxCapsuleShape(void);

1707 12 save_to_desc 0 4 3004 31 PhysxCapsuleShape::save_to_desc 0 1 229 305
////////////////////////////////////////////////////////////////////
//     Function : PhysxCapsuleShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
77
void PhysxCapsuleShape::save_to_desc(PhysxCapsuleShapeDesc &shapeDesc) const;

1708 10 set_radius 0 4 3004 29 PhysxCapsuleShape::set_radius 0 1 230 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::set_radius
//       Access: Published
//  Description: Alters the radius of the capsule.
////////////////////////////////////////////////////////////////////
49
void PhysxCapsuleShape::set_radius(float radius);

1709 10 set_height 0 4 3004 29 PhysxCapsuleShape::set_height 0 1 231 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::set_height
//       Access: Published
//  Description: Alters the height of the capsule.
////////////////////////////////////////////////////////////////////
49
void PhysxCapsuleShape::set_height(float height);

1710 10 get_radius 0 4 3004 29 PhysxCapsuleShape::get_radius 0 1 232 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::get_radius
//       Access: Published
//  Description: Retrieves the radius of the capsule.
////////////////////////////////////////////////////////////////////
48
float PhysxCapsuleShape::get_radius(void) const;

1711 10 get_height 0 4 3004 29 PhysxCapsuleShape::get_height 0 1 233 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::get_height
//       Access: Published
//  Description: Retrieves the height of the capsule.
////////////////////////////////////////////////////////////////////
48
float PhysxCapsuleShape::get_height(void) const;

1712 14 get_class_type 0 4 3004 33 PhysxCapsuleShape::get_class_type 0 1 234 68
////////////////////////////////////////////////////////////////////
58
static TypeHandle PhysxCapsuleShape::get_class_type(void);

1713 21 upcast_to_PhysxObject 0 12 3005 33 PhysxCloth::upcast_to_PhysxObject 0 1 282 37
upcast from PhysxCloth to PhysxObject
53
PhysxObject *PhysxCloth::upcast_to_PhysxObject(void);

1714 22 downcast_to_PhysxCloth 0 12 2993 35 PhysxObject::downcast_to_PhysxCloth 0 1 283 39
downcast from PhysxObject to PhysxCloth
54
PhysxCloth *PhysxObject::downcast_to_PhysxCloth(void);

1715 20 upcast_to_PhysxEnums 0 12 3005 32 PhysxCloth::upcast_to_PhysxEnums 0 1 284 36
upcast from PhysxCloth to PhysxEnums
51
PhysxEnums *PhysxCloth::upcast_to_PhysxEnums(void);

1716 22 downcast_to_PhysxCloth 0 12 2962 34 PhysxEnums::downcast_to_PhysxCloth 0 1 285 38
downcast from PhysxEnums to PhysxCloth
53
PhysxCloth *PhysxEnums::downcast_to_PhysxCloth(void);

1717 10 PhysxCloth 0 4 3005 22 PhysxCloth::PhysxCloth 0 1 235 708
// Filename: physxCloth.I
// Created by:  enn0x (30Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
inline PhysxCloth::PhysxCloth(void);

1718 11 ~PhysxCloth 0 4 3005 23 PhysxCloth::~PhysxCloth 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
virtual inline PhysxCloth::~PhysxCloth(void);

1719 9 get_scene 0 4 3005 21 PhysxCloth::get_scene 0 1 236 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_scene
//       Access: Published
//  Description: Returns the scene which this cloth belongs to.
////////////////////////////////////////////////////////////////////
46
PhysxScene *PhysxCloth::get_scene(void) const;

1720 14 get_cloth_node 0 4 3005 26 PhysxCloth::get_cloth_node 0 1 237 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_cloth_node
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PhysxClothNode *PhysxCloth::get_cloth_node(void) const;

1721 17 create_cloth_node 0 4 3005 29 PhysxCloth::create_cloth_node 0 1 238 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::create_cloth_node
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
PhysxClothNode *PhysxCloth::create_cloth_node(char const *name);

1722 8 set_name 0 4 3005 20 PhysxCloth::set_name 0 1 239 397
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
////////////////////////////////////////////////////////////////////
44
void PhysxCloth::set_name(char const *name);

1723 9 set_group 0 4 3005 21 PhysxCloth::set_group 0 1 240 329
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_group
//       Access: Published
//  Description: Sets which collision group this cloth is part of.
//               Collision group must be between 0 and 31.
////////////////////////////////////////////////////////////////////
47
void PhysxCloth::set_group(unsigned int group);

1724 15 set_groups_mask 0 4 3005 27 PhysxCloth::set_groups_mask 0 1 241 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
////////////////////////////////////////////////////////////////////
62
void PhysxCloth::set_groups_mask(PhysxGroupsMask const &mask);

1725 8 set_flag 0 4 3005 20 PhysxCloth::set_flag 0 1 242 252
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
////////////////////////////////////////////////////////////////////
71
void PhysxCloth::set_flag(PhysxEnums::PhysxClothFlag flag, bool value);

1726 13 set_thickness 0 4 3005 25 PhysxCloth::set_thickness 0 1 243 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_thickness
//       Access: Published
//  Description: Sets the cloth thickness (must be positive).
////////////////////////////////////////////////////////////////////
48
void PhysxCloth::set_thickness(float thickness);

1727 8 get_name 0 4 3005 20 PhysxCloth::get_name 0 1 244 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_name
//       Access: Published
//  Description: Retrieves the name string.
////////////////////////////////////////////////////////////////////
45
char const *PhysxCloth::get_name(void) const;

1728 17 get_num_particles 0 4 3005 29 PhysxCloth::get_num_particles 0 1 245 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_num_particles
//       Access: Published
//  Description: Gets the number of cloth particles.
////////////////////////////////////////////////////////////////////
49
unsigned int PhysxCloth::get_num_particles(void);

1729 9 get_group 0 4 3005 21 PhysxCloth::get_group 0 1 246 290
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_group
//       Access: Published
//  Description: Retrieves the collision group this cloth is part
//               of.
////////////////////////////////////////////////////////////////////
47
unsigned int PhysxCloth::get_group(void) const;

1730 15 get_groups_mask 0 4 3005 27 PhysxCloth::get_groups_mask 0 1 247 302
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_groups_mask
//       Access: Published
//  Description: Gets the 128-bit groups mask used for collision
//               filtering.
////////////////////////////////////////////////////////////////////
56
PhysxGroupsMask PhysxCloth::get_groups_mask(void) const;

1731 8 get_flag 0 4 3005 20 PhysxCloth::get_flag 0 1 248 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_flag
//       Access: Published
//  Description: Retrieves the value of a single flag.
////////////////////////////////////////////////////////////////////
65
bool PhysxCloth::get_flag(PhysxEnums::PhysxClothFlag flag) const;

1732 13 get_thickness 0 4 3005 25 PhysxCloth::get_thickness 0 1 249 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_thickness
//       Access: Published
//  Description: Gets the cloth thickness.
////////////////////////////////////////////////////////////////////
44
float PhysxCloth::get_thickness(void) const;

1733 11 get_density 0 4 3005 23 PhysxCloth::get_density 0 1 250 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_density
//       Access: Published
//  Description: Gets the cloth density.
////////////////////////////////////////////////////////////////////
42
float PhysxCloth::get_density(void) const;

1734 25 get_relative_grid_spacing 0 4 3005 37 PhysxCloth::get_relative_grid_spacing 0 1 251 596
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_relative_grid_spacing
//       Access: Published
//  Description: Gets the relative grid spacing for the broad
//               phase. The cloth is represented by a set of
//               world aligned cubical cells in broad phase. The
//               size of these cells is determined by multiplying
//               the length of the diagonal of the AABB of the
//               initial soft body size with this constant.
////////////////////////////////////////////////////////////////////
56
float PhysxCloth::get_relative_grid_spacing(void) const;

1735 27 attach_vertex_to_global_pos 0 4 3005 39 PhysxCloth::attach_vertex_to_global_pos 0 1 252 324
// Attachment

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_vertex_to_global_pos
//       Access: Published
//  Description: Attaches a cloth vertex to a position in world
//               space.
////////////////////////////////////////////////////////////////////
89
void PhysxCloth::attach_vertex_to_global_pos(unsigned int vertexId, LPoint3f const &pos);

1736 11 free_vertex 0 4 3005 23 PhysxCloth::free_vertex 0 1 253 278
// Attachment

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::free_vertex
//       Access: Published
//  Description: Frees a previously attached cloth point.
////////////////////////////////////////////////////////////////////
52
void PhysxCloth::free_vertex(unsigned int vertexId);

1737 15 attach_to_shape 0 4 3005 27 PhysxCloth::attach_to_shape 0 1 254 511
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_to_shape
//       Access: Published
//  Description: Attaches the cloth to a shape. All cloth points
//               currently inside the shape are attached.
//
//               This method only works with primitive and convex
//               shapes. Since the inside of a general triangle mesh
//               is not clearly defined.
////////////////////////////////////////////////////////////////////
52
void PhysxCloth::attach_to_shape(PhysxShape *shape);

1738 26 attach_to_colliding_shapes 0 4 3005 38 PhysxCloth::attach_to_colliding_shapes 0 1 255 489
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_to_colliding_shapes
//       Access: Published
//  Description: Attaches the cloth to all shapes, currently
//               colliding. 
//
//               This method only works with primitive and convex
//               shapes. Since the inside of a general triangle mesh
//               is not clearly defined.
////////////////////////////////////////////////////////////////////
50
void PhysxCloth::attach_to_colliding_shapes(void);

1739 17 detach_from_shape 0 4 3005 29 PhysxCloth::detach_from_shape 0 1 256 427
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::detach_from_shape
//       Access: Published
//  Description: Detaches the cloth from a shape it has been
//               attached to before. 
//
//               If the cloth has not been attached to the shape
//               before, the call has no effect.
////////////////////////////////////////////////////////////////////
54
void PhysxCloth::detach_from_shape(PhysxShape *shape);

1740 22 attach_vertex_to_shape 0 4 3005 34 PhysxCloth::attach_vertex_to_shape 0 1 257 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_vertex_to_shape
//       Access: Published
//  Description: Attaches a cloth vertex to a local position within
//               a shape.
////////////////////////////////////////////////////////////////////
108
void PhysxCloth::attach_vertex_to_shape(unsigned int vertexId, PhysxShape *shape, LPoint3f const &localPos);

1741 28 get_vertex_attachment_status 0 4 3005 40 PhysxCloth::get_vertex_attachment_status 0 1 258 289
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_status
//       Access: Published
//  Description: Return the attachment status of the given vertex.
////////////////////////////////////////////////////////////////////
110
PhysxEnums::PhysxVertexAttachmentStatus PhysxCloth::get_vertex_attachment_status(unsigned int vertexId) const;

1742 27 get_vertex_attachment_shape 0 4 3005 39 PhysxCloth::get_vertex_attachment_shape 0 1 259 424
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_shape
//       Access: Published
//  Description: Returns the pointer to an attached shape pointer
//               of the given vertex. If the vertex is not attached
//               or attached to a global position, NULL is returned.
////////////////////////////////////////////////////////////////////
81
PhysxShape *PhysxCloth::get_vertex_attachment_shape(unsigned int vertexId) const;

1743 25 get_vertex_attachment_pos 0 4 3005 37 PhysxCloth::get_vertex_attachment_pos 0 1 260 507
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_pos
//       Access: Published
//  Description: Returns the attachment position of the given
//               vertex. If the vertex is attached to shape, the
//               position local to the shape's pose is returned. If
//               the vertex is not attached, the return value is
//               undefined.
////////////////////////////////////////////////////////////////////
76
LPoint3f PhysxCloth::get_vertex_attachment_pos(unsigned int vertexId) const;

1744 11 is_sleeping 0 4 3005 23 PhysxCloth::is_sleeping 0 1 261 735
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::is_sleeping
//       Access: Published
//  Description: Returns true if this cloth is sleeping. 
//
//               When a cloth does not move for a period of time,
//               it is no longer simulated in order to save time.
//               This state is called sleeping. However, because the
//               object automatically wakes up when it is either
//               touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
////////////////////////////////////////////////////////////////////
41
bool PhysxCloth::is_sleeping(void) const;

1745 7 wake_up 0 4 3005 19 PhysxCloth::wake_up 0 2 262 263 519
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::wake_up
//       Access: Published
//  Description: Wakes up the cloth if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxCloth::put_to_sleep().
////////////////////////////////////////////////////////////////////
71
void PhysxCloth::wake_up(float wakeCounterValue = (NX_SLEEP_INTERVAL));

1746 12 put_to_sleep 0 4 3005 24 PhysxCloth::put_to_sleep 0 1 264 557
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::put_to_sleep
//       Access: Published
//  Description: Forces the cloth to sleep. 
//
//               The cloth  will stay asleep until the next
//               call to simulate, and will not wake up until then
//               even when otherwise it would (for example a force
//               is applied to it). It can however wake up during
//               the next do_physics call.
////////////////////////////////////////////////////////////////////
36
void PhysxCloth::put_to_sleep(void);

1747 25 set_sleep_linear_velocity 0 4 3005 37 PhysxCloth::set_sleep_linear_velocity 0 1 265 567
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an cloth
//               may go to sleep. Cloths whose linear velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
////////////////////////////////////////////////////////////////////
60
void PhysxCloth::set_sleep_linear_velocity(float threshold);

1748 25 get_sleep_linear_velocity 0 4 3005 37 PhysxCloth::get_sleep_linear_velocity 0 1 266 419
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an soft
//               body may go to sleep. cloths whose linear velocity
//               is above this threshold will not be put to sleep.
////////////////////////////////////////////////////////////////////
56
float PhysxCloth::get_sleep_linear_velocity(void) const;

1749 25 set_external_acceleration 0 4 3005 37 PhysxCloth::set_external_acceleration 0 1 267 349
// Forces

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_external_acceleration
//       Access: Published
//  Description: Sets an external acceleration which affects all non
//               attached particles of the cloth.
////////////////////////////////////////////////////////////////////
74
void PhysxCloth::set_external_acceleration(LVector3f const &acceleration);

1750 25 get_external_acceleration 0 4 3005 37 PhysxCloth::get_external_acceleration 0 1 268 355
// Forces

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_external_acceleration
//       Access: Published
//  Description: Retrieves the external acceleration which affects
//               all non attached particles of the cloth.
////////////////////////////////////////////////////////////////////
60
LVector3f PhysxCloth::get_external_acceleration(void) const;

1751 21 set_wind_acceleration 0 4 3005 33 PhysxCloth::set_wind_acceleration 0 1 269 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_wind_acceleration
//       Access: Published
//  Description: Sets an acceleration acting normal to the cloth
//               surface at each vertex.
////////////////////////////////////////////////////////////////////
70
void PhysxCloth::set_wind_acceleration(LVector3f const &acceleration);

1752 21 get_wind_acceleration 0 4 3005 33 PhysxCloth::get_wind_acceleration 0 1 270 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_wind_acceleration
//       Access: Published
//  Description: Retrieves the acceleration acting normal to the
//               cloth surface at each vertex
////////////////////////////////////////////////////////////////////
56
LVector3f PhysxCloth::get_wind_acceleration(void) const;

1753 19 add_force_at_vertex 0 4 3005 31 PhysxCloth::add_force_at_vertex 0 2 271 272 371
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_vertex
//       Access: Published
//  Description: Applies a force (or impulse) defined in the 
//               global coordinate frame, to a particular vertex
//               of the cloth.
////////////////////////////////////////////////////////////////////
121
void PhysxCloth::add_force_at_vertex(LVector3f const &force, int vertexId, PhysxEnums::PhysxForceMode mode = (FM_force));

1754 16 add_force_at_pos 0 4 3005 28 PhysxCloth::add_force_at_pos 0 2 273 274 395
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_pos
//       Access: Published
//  Description: Applies a radial force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off. 
////////////////////////////////////////////////////////////////////
132
void PhysxCloth::add_force_at_pos(LPoint3f const &pos, float magnitude, float radius, PhysxEnums::PhysxForceMode mode = (FM_force));

1755 25 add_directed_force_at_pos 0 4 3005 37 PhysxCloth::add_directed_force_at_pos 0 2 275 276 407
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_directed_force_at_pos
//       Access: Published
//  Description: Applies a directed force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off.  
////////////////////////////////////////////////////////////////////
148
void PhysxCloth::add_directed_force_at_pos(LPoint3f const &pos, LVector3f const &force, float radius, PhysxEnums::PhysxForceMode mode = (FM_force));

1756 2 ls 0 4 3005 14 PhysxCloth::ls 0 3 277 278 279 430
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
127
virtual inline void PhysxCloth::ls(void) const;
virtual inline void PhysxCloth::ls(ostream &out, int indent_level = (0)) const;

1757 7 release 0 4 3005 19 PhysxCloth::release 0 1 280 289
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
void PhysxCloth::release(void);

1758 14 get_class_type 0 4 3005 26 PhysxCloth::get_class_type 0 1 281 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxCloth::get_class_type(void);

1759 19 get_reference_count 0 4 3006 35 PhysxClothMesh::get_reference_count 0 1 286 281
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
////////////////////////////////////////////////////////////////////
61
unsigned int PhysxClothMesh::get_reference_count(void) const;

1760 7 release 0 4 3006 23 PhysxClothMesh::release 0 1 287 293
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMesh::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
void PhysxClothMesh::release(void);

1761 14 get_class_type 0 4 3006 30 PhysxClothMesh::get_class_type 0 1 288 68
////////////////////////////////////////////////////////////////////
55
static TypeHandle PhysxClothMesh::get_class_type(void);

1762 14 PhysxClothNode 0 4 3007 30 PhysxClothNode::PhysxClothNode 0 1 289 716
// Filename: physxClothNode.I
// Created by:  enn0x (05Apr10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PhysxClothNode::PhysxClothNode(char const *name);

1763 13 set_texcoords 0 4 3007 29 PhysxClothNode::set_texcoords 0 1 290 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothNode::set_texcoords
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
bool PhysxClothNode::set_texcoords(Filename const &filename);

1764 14 get_class_type 0 4 3007 30 PhysxClothNode::get_class_type 0 1 291 68
////////////////////////////////////////////////////////////////////
55
static TypeHandle PhysxClothNode::get_class_type(void);

1765 12 is_deleted_a 0 4 3009 30 PhysxContactPair::is_deleted_a 0 1 292 302
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::is_deleted_a
//       Access: Published
//  Description: Returns true if the first of the two actors is
//               deleted.
////////////////////////////////////////////////////////////////////
48
bool PhysxContactPair::is_deleted_a(void) const;

1766 12 is_deleted_b 0 4 3009 30 PhysxContactPair::is_deleted_b 0 1 293 303
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::is_deleted_b
//       Access: Published
//  Description: Returns true if the second of the two actors is
//               deleted.
////////////////////////////////////////////////////////////////////
48
bool PhysxContactPair::is_deleted_b(void) const;

1767 11 get_actor_a 0 4 3009 29 PhysxContactPair::get_actor_a 0 1 294 306
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_actor_a
//       Access: Published
//  Description: Returns the first of the two actors that makes up
//               this pair.
////////////////////////////////////////////////////////////////////
54
PhysxActor *PhysxContactPair::get_actor_a(void) const;

1768 11 get_actor_b 0 4 3009 29 PhysxContactPair::get_actor_b 0 1 295 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_actor_b
//       Access: Published
//  Description: Returns the second of the two actors that make up
//               his pair.
////////////////////////////////////////////////////////////////////
54
PhysxActor *PhysxContactPair::get_actor_b(void) const;

1769 20 get_sum_normal_force 0 4 3009 38 PhysxContactPair::get_sum_normal_force 0 1 296 622
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_sum_normal_force
//       Access: Published
//  Description: Returns the total contact normal force that was
//               applied for this pair, to maintain nonpenetration
//               constraints.
//
//               You should set the ContactPairFlag 
//               CPF_notify_forces in order to receive this value.
//
//               @see PhysxScene::set_actor_pair_flag
//               @see PhysxScene::set_actor_group_pair_flag
////////////////////////////////////////////////////////////////////
61
LVector3f PhysxContactPair::get_sum_normal_force(void) const;

1770 22 get_sum_friction_force 0 4 3009 40 PhysxContactPair::get_sum_friction_force 0 1 297 563
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_sum_friction_force
//       Access: Published
//  Description: Returns the total tangential force that was applied
//               for this pair.
//
//               You should set the ContactPairFlag 
//               CPF_notify_forces in order to receive this value.
//
//               @see PhysxScene::set_actor_pair_flag
//               @see PhysxScene::set_actor_group_pair_flag
////////////////////////////////////////////////////////////////////
63
LVector3f PhysxContactPair::get_sum_friction_force(void) const;

1771 22 get_num_contact_points 0 4 3009 40 PhysxContactPair::get_num_contact_points 0 1 298 446
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_num_contact_points
//       Access: Published
//  Description: Returns the total number of contact points reported
//               in this pair's contact stream.
//
//               This method is a helper for iterating over the
//               pair's contact stream.
////////////////////////////////////////////////////////////////////
60
unsigned int PhysxContactPair::get_num_contact_points(void);

1772 17 get_contact_point 0 4 3009 35 PhysxContactPair::get_contact_point 0 1 299 480
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_contact_point
//       Access: Published
//  Description: Returns an instance of PhysxContactPoint, which
//               represents a single entry of this pair's contact
//               stream.
//
//               This method is a helper for iterating over the
//               pair's contact stream.
////////////////////////////////////////////////////////////////////
78
PhysxContactPoint PhysxContactPair::get_contact_point(unsigned int idx) const;

1773 14 get_class_type 0 4 3009 32 PhysxContactPair::get_class_type 0 1 300 68
////////////////////////////////////////////////////////////////////
57
static TypeHandle PhysxContactPair::get_class_type(void);

1774 17 PhysxContactPoint 0 4 3010 36 PhysxContactPoint::PhysxContactPoint 0 1 301 722
// Filename: physxContactPoint.I
// Created by:  enn0x (20Dec09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PhysxContactPoint::PhysxContactPoint(void);

1775 9 get_point 0 4 3010 28 PhysxContactPoint::get_point 0 1 302 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_point
//       Access: Published
//  Description: Returns the contact point position.
////////////////////////////////////////////////////////////////////
50
LPoint3f PhysxContactPoint::get_point(void) const;

1776 10 get_normal 0 4 3010 29 PhysxContactPoint::get_normal 0 1 303 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_normal
//       Access: Published
//  Description: Retrieves the patch normal.
////////////////////////////////////////////////////////////////////
52
LVector3f PhysxContactPoint::get_normal(void) const;

1777 16 get_normal_force 0 4 3010 35 PhysxContactPoint::get_normal_force 0 1 304 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_normal_force
//       Access: Published
//  Description: Retrieves the point normal force.
////////////////////////////////////////////////////////////////////
54
float PhysxContactPoint::get_normal_force(void) const;

1778 14 get_separation 0 4 3010 33 PhysxContactPoint::get_separation 0 1 305 277
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_separation
//       Access: Published
//  Description: Return the separation for the contact point.
////////////////////////////////////////////////////////////////////
52
float PhysxContactPoint::get_separation(void) const;

1779 18 get_feature_index0 0 4 3010 37 PhysxContactPoint::get_feature_index0 0 1 306 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_feature_index0
//       Access: Published
//  Description: Retrieves the feature index.
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxContactPoint::get_feature_index0(void) const;

1780 18 get_feature_index1 0 4 3010 37 PhysxContactPoint::get_feature_index1 0 1 307 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_feature_index1
//       Access: Published
//  Description: Retrieves the feature index.
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxContactPoint::get_feature_index1(void) const;

1781 14 get_class_type 0 4 3010 33 PhysxContactPoint::get_class_type 0 1 308 68
////////////////////////////////////////////////////////////////////
58
static TypeHandle PhysxContactPoint::get_class_type(void);

1782 19 get_reference_count 0 4 3012 36 PhysxConvexMesh::get_reference_count 0 1 309 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
////////////////////////////////////////////////////////////////////
62
unsigned int PhysxConvexMesh::get_reference_count(void) const;

1783 7 release 0 4 3012 24 PhysxConvexMesh::release 0 1 310 294
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMesh::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
void PhysxConvexMesh::release(void);

1784 14 get_class_type 0 4 3012 31 PhysxConvexMesh::get_class_type 0 1 311 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxConvexMesh::get_class_type(void);

1785 26 PhysxConvexForceFieldShape 0 4 3013 54 PhysxConvexForceFieldShape::PhysxConvexForceFieldShape 0 1 312 740
// Filename: physxConvexForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PhysxConvexForceFieldShape::PhysxConvexForceFieldShape(void);

1786 12 save_to_desc 0 4 3013 40 PhysxConvexForceFieldShape::save_to_desc 0 1 313 314
////////////////////////////////////////////////////////////////////
//     Function : PhysxConvexForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
95
void PhysxConvexForceFieldShape::save_to_desc(PhysxConvexForceFieldShapeDesc &shapeDesc) const;

1787 14 get_class_type 0 4 3013 42 PhysxConvexForceFieldShape::get_class_type 0 1 314 68
////////////////////////////////////////////////////////////////////
67
static TypeHandle PhysxConvexForceFieldShape::get_class_type(void);

1788 16 PhysxConvexShape 0 4 3014 34 PhysxConvexShape::PhysxConvexShape 0 1 315 720
// Filename: physxConvexShape.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PhysxConvexShape::PhysxConvexShape(void);

1789 12 save_to_desc 0 4 3014 30 PhysxConvexShape::save_to_desc 0 1 316 304
////////////////////////////////////////////////////////////////////
//     Function : PhysxConvexShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
75
void PhysxConvexShape::save_to_desc(PhysxConvexShapeDesc &shapeDesc) const;

1790 14 get_class_type 0 4 3014 32 PhysxConvexShape::get_class_type 0 1 317 68
////////////////////////////////////////////////////////////////////
57
static TypeHandle PhysxConvexShape::get_class_type(void);

1791 21 upcast_to_PhysxObject 0 12 3015 33 PhysxJoint::upcast_to_PhysxObject 0 1 341 37
upcast from PhysxJoint to PhysxObject
53
PhysxObject *PhysxJoint::upcast_to_PhysxObject(void);

1792 22 downcast_to_PhysxJoint 0 12 2993 35 PhysxObject::downcast_to_PhysxJoint 0 1 342 39
downcast from PhysxObject to PhysxJoint
54
PhysxJoint *PhysxObject::downcast_to_PhysxJoint(void);

1793 20 upcast_to_PhysxEnums 0 12 3015 32 PhysxJoint::upcast_to_PhysxEnums 0 1 343 36
upcast from PhysxJoint to PhysxEnums
51
PhysxEnums *PhysxJoint::upcast_to_PhysxEnums(void);

1794 22 downcast_to_PhysxJoint 0 12 2962 34 PhysxEnums::downcast_to_PhysxJoint 0 1 344 38
downcast from PhysxEnums to PhysxJoint
53
PhysxJoint *PhysxEnums::downcast_to_PhysxJoint(void);

1795 7 release 0 4 3015 19 PhysxJoint::release 0 1 318 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
void PhysxJoint::release(void);

1796 9 get_actor 0 4 3015 21 PhysxJoint::get_actor 0 1 319 294
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_actor
//       Access: Published
//  Description: Retrieves the actor which this joint is associated
//               with.
////////////////////////////////////////////////////////////////////
58
PhysxActor *PhysxJoint::get_actor(unsigned int idx) const;

1797 9 get_scene 0 4 3015 21 PhysxJoint::get_scene 0 1 320 294
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_scene
//       Access: Published
//  Description: Retrieves the scene which this joint is associated
//               with.
////////////////////////////////////////////////////////////////////
46
PhysxScene *PhysxJoint::get_scene(void) const;

1798 18 purge_limit_planes 0 4 3015 30 PhysxJoint::purge_limit_planes 0 1 321 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::purge_limit_planes
//       Access: Published
//  Description: Deletes all limit planes added to the joint.
////////////////////////////////////////////////////////////////////
42
void PhysxJoint::purge_limit_planes(void);

1799 8 set_name 0 4 3015 20 PhysxJoint::set_name 0 1 322 416
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
//               This is for debugging and is not used by the
//               physics engine.
////////////////////////////////////////////////////////////////////
44
void PhysxJoint::set_name(char const *name);

1800 17 set_global_anchor 0 4 3015 29 PhysxJoint::set_global_anchor 0 1 323 328
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_global_anchor
//       Access: Published
//  Description: Sets the point where the two actors are attached,
//               specified in global coordinates.
////////////////////////////////////////////////////////////////////
59
void PhysxJoint::set_global_anchor(LPoint3f const &anchor);

1801 15 set_global_axis 0 4 3015 27 PhysxJoint::set_global_axis 0 1 324 324
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_global_axis
//       Access: Published
//  Description: Sets the direction of the joint's primary axis,
//               specified in global coordinates.
////////////////////////////////////////////////////////////////////
56
void PhysxJoint::set_global_axis(LVector3f const &axis);

1802 13 set_breakable 0 4 3015 25 PhysxJoint::set_breakable 0 1 325 1346
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_breakable
//       Access: Published
//  Description: Sets the maximum force magnitude that the joint
//               is able to withstand without breaking.
//
//               If the joint force rises above this threshold, the
//               joint breaks, and becomes disabled.
//
//               There are two values, one for linear forces, and
//               one for angular forces. Both values are used
//               directly as a value for the maximum impulse
//               tolerated by the joint constraints.
//
//               Both force values are NX_MAX_REAL by default.
//               This setting makes the joint unbreakable. The values
//               should always be nonnegative.
//
//               The distinction between maxForce and maxTorque is
//               dependent on how the joint is implemented
//               internally, which may not be obvious. For example
//               what appears to be an angular degree of freedom may
//               be constrained indirectly by a linear constraint.
//
//               So in most practical applications the user should
//               set both maxTorque and maxForce to low values.
////////////////////////////////////////////////////////////////////
64
void PhysxJoint::set_breakable(float maxForce, float maxTorque);

1803 31 set_solver_extrapolation_factor 0 4 3015 43 PhysxJoint::set_solver_extrapolation_factor 0 1 326 280
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_solver_extrapolation_factor
//       Access: Published
//  Description: Sets the solver extrapolation factor.
////////////////////////////////////////////////////////////////////
63
void PhysxJoint::set_solver_extrapolation_factor(float factor);

1804 27 set_use_acceleration_spring 0 4 3015 39 PhysxJoint::set_use_acceleration_spring 0 1 327 290
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_use_acceleration_spring
//       Access: Published
//  Description: Switch between acceleration and force based spring.
////////////////////////////////////////////////////////////////////
57
void PhysxJoint::set_use_acceleration_spring(bool value);

1805 15 set_limit_point 0 4 3015 27 PhysxJoint::set_limit_point 0 2 328 329 1140
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_limit_point
//       Access: Published
//  Description: Sets the limit point.
//               The point is specified in the global coordinate
//               frame.
//
//               All types of joints may be limited with the same
//               system: You may elect a point attached to one of
//               the two actors to act as the limit point. You may
//               also specify several planes attached to the other
//               actor.
//
//               The points and planes move together with the actor
//               they are attached to.
//
//               The simulation then makes certain that the pair
//               of actors only move relative to each other so that
//               the limit point stays on the positive side of all
//               limit planes.
//
//               The default limit point is (0,0,0) in the local
//               frame of actor2. Calling this deletes all existing
//               limit planes
////////////////////////////////////////////////////////////////////
77
void PhysxJoint::set_limit_point(LPoint3f const &pos, bool isOnActor2 = (1));

1806 15 add_limit_plane 0 4 3015 27 PhysxJoint::add_limit_plane 0 2 330 331 737
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::add_limit_plane
//       Access: Published
//  Description: Adds a limit plane. 
//               The parameters are given in global coordinates.
//               The plane is affixed to the actor that does not
//               have the limit point.
//
//               The normal of the plane points toward the positive
//               side of the plane, and thus toward the limit point.
//               If the normal points away from the limit point at
//               the time of this call, the method returns false
//               and the limit plane is ignored.
////////////////////////////////////////////////////////////////////
113
void PhysxJoint::add_limit_plane(LVector3f const &normal, LPoint3f const &pointInPlane, float restitution = (0));

1807 8 get_name 0 4 3015 20 PhysxJoint::get_name 0 1 332 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_name
//       Access: Published
//  Description: Returns the name string. 
////////////////////////////////////////////////////////////////////
45
char const *PhysxJoint::get_name(void) const;

1808 17 get_global_anchor 0 4 3015 29 PhysxJoint::get_global_anchor 0 1 333 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_global_anchor
//       Access: Published
//  Description: Retrieves the joint anchor.
////////////////////////////////////////////////////////////////////
51
LPoint3f PhysxJoint::get_global_anchor(void) const;

1809 15 get_global_axis 0 4 3015 27 PhysxJoint::get_global_axis 0 1 334 252
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_global_axis
//       Access: Published
//  Description: Retrieves the joint axis.
////////////////////////////////////////////////////////////////////
50
LVector3f PhysxJoint::get_global_axis(void) const;

1810 31 get_solver_extrapolation_factor 0 4 3015 43 PhysxJoint::get_solver_extrapolation_factor 0 1 335 285
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_solver_extrapolation_factor
//       Access: Published
//  Description: Retrieves the solver extrapolation factor.
////////////////////////////////////////////////////////////////////
62
float PhysxJoint::get_solver_extrapolation_factor(void) const;

1811 27 get_use_acceleration_spring 0 4 3015 39 PhysxJoint::get_use_acceleration_spring 0 1 336 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_use_acceleration_spring
//       Access: Published
//  Description: Checks whether acceleration spring is used.
////////////////////////////////////////////////////////////////////
57
bool PhysxJoint::get_use_acceleration_spring(void) const;

1812 2 ls 0 4 3015 14 PhysxJoint::ls 0 3 337 338 339 430
////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
127
virtual inline void PhysxJoint::ls(void) const;
virtual inline void PhysxJoint::ls(ostream &out, int indent_level = (0)) const;

1813 14 get_class_type 0 4 3015 26 PhysxJoint::get_class_type 0 1 340 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxJoint::get_class_type(void);

1814 11 ~PhysxJoint 0 4 3015 23 PhysxJoint::~PhysxJoint 0 0 0
30
PhysxJoint::~PhysxJoint(void);

1815 21 PhysxCylindricalJoint 0 4 3016 44 PhysxCylindricalJoint::PhysxCylindricalJoint 0 1 345 730
// Filename: physxCylindricalJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCylindricalJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxCylindricalJoint::PhysxCylindricalJoint(void);

1816 12 save_to_desc 0 4 3016 35 PhysxCylindricalJoint::save_to_desc 0 1 346 309
////////////////////////////////////////////////////////////////////
//     Function : PhysxCylindricalJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
85
void PhysxCylindricalJoint::save_to_desc(PhysxCylindricalJointDesc &jointDesc) const;

1817 14 load_from_desc 0 4 3016 37 PhysxCylindricalJoint::load_from_desc 0 1 347 332
////////////////////////////////////////////////////////////////////
//     Function : PhysxCylindricalJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
87
void PhysxCylindricalJoint::load_from_desc(PhysxCylindricalJointDesc const &jointDesc);

1818 14 get_class_type 0 4 3016 37 PhysxCylindricalJoint::get_class_type 0 1 348 68
////////////////////////////////////////////////////////////////////
62
static TypeHandle PhysxCylindricalJoint::get_class_type(void);

1819 12 PhysxD6Joint 0 4 3017 26 PhysxD6Joint::PhysxD6Joint 0 1 349 712
// Filename: physxD6Joint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline PhysxD6Joint::PhysxD6Joint(void);

1820 12 save_to_desc 0 4 3017 26 PhysxD6Joint::save_to_desc 0 1 350 300
////////////////////////////////////////////////////////////////////
//     Function : PhysxD6Joint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
67
void PhysxD6Joint::save_to_desc(PhysxD6JointDesc &jointDesc) const;

1821 14 load_from_desc 0 4 3017 28 PhysxD6Joint::load_from_desc 0 1 351 323
////////////////////////////////////////////////////////////////////
//     Function : PhysxD6Joint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
69
void PhysxD6Joint::load_from_desc(PhysxD6JointDesc const &jointDesc);

1822 26 set_drive_angular_velocity 0 4 3017 40 PhysxD6Joint::set_drive_angular_velocity 0 1 352 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_angular_velocity
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void PhysxD6Joint::set_drive_angular_velocity(LVector3f const &v);

1823 25 set_drive_linear_velocity 0 4 3017 39 PhysxD6Joint::set_drive_linear_velocity 0 1 353 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_linear_velocity
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
void PhysxD6Joint::set_drive_linear_velocity(LVector3f const &v);

1824 21 set_drive_orientation 0 4 3017 35 PhysxD6Joint::set_drive_orientation 0 1 354 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_orientation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void PhysxD6Joint::set_drive_orientation(LQuaternionf const &quat);

1825 18 set_drive_position 0 4 3017 32 PhysxD6Joint::set_drive_position 0 1 355 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_position
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
void PhysxD6Joint::set_drive_position(LPoint3f const &pos);

1826 14 get_class_type 0 4 3017 28 PhysxD6Joint::get_class_type 0 1 356 68
////////////////////////////////////////////////////////////////////
53
static TypeHandle PhysxD6Joint::get_class_type(void);

1827 18 PhysxDebugGeomNode 0 4 3018 38 PhysxDebugGeomNode::PhysxDebugGeomNode 0 1 357 724
// Filename: physxDebugGeomNode.I
// Created by:  enn0x (15Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline PhysxDebugGeomNode::PhysxDebugGeomNode(void);

1828 2 on 0 4 3018 22 PhysxDebugGeomNode::on 0 1 358 222
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
void PhysxDebugGeomNode::on(void);

1829 3 off 0 4 3018 23 PhysxDebugGeomNode::off 0 1 359 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::off
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
void PhysxDebugGeomNode::off(void);

1830 6 toggle 0 4 3018 26 PhysxDebugGeomNode::toggle 0 1 360 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::toggle
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
void PhysxDebugGeomNode::toggle(void);

1831 20 visualize_world_axes 0 4 3018 40 PhysxDebugGeomNode::visualize_world_axes 0 1 361 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_world_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void PhysxDebugGeomNode::visualize_world_axes(bool value);

1832 19 visualize_body_axes 0 4 3018 39 PhysxDebugGeomNode::visualize_body_axes 0 1 362 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline void PhysxDebugGeomNode::visualize_body_axes(bool value);

1833 24 visualize_body_mass_axes 0 4 3018 44 PhysxDebugGeomNode::visualize_body_mass_axes 0 1 363 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_mass_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline void PhysxDebugGeomNode::visualize_body_mass_axes(bool value);

1834 27 visualize_body_lin_velocity 0 4 3018 47 PhysxDebugGeomNode::visualize_body_lin_velocity 0 1 364 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_lin_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_body_lin_velocity(bool value);

1835 27 visualize_body_ang_velocity 0 4 3018 47 PhysxDebugGeomNode::visualize_body_ang_velocity 0 1 365 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_ang_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_body_ang_velocity(bool value);

1836 27 visualize_body_joint_groups 0 4 3018 47 PhysxDebugGeomNode::visualize_body_joint_groups 0 1 366 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_joint_groups
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_body_joint_groups(bool value);

1837 26 visualize_joint_local_axes 0 4 3018 46 PhysxDebugGeomNode::visualize_joint_local_axes 0 1 367 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_local_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void PhysxDebugGeomNode::visualize_joint_local_axes(bool value);

1838 26 visualize_joint_world_axes 0 4 3018 46 PhysxDebugGeomNode::visualize_joint_world_axes 0 1 368 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_world_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void PhysxDebugGeomNode::visualize_joint_world_axes(bool value);

1839 22 visualize_joint_limits 0 4 3018 42 PhysxDebugGeomNode::visualize_joint_limits 0 1 369 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_limits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void PhysxDebugGeomNode::visualize_joint_limits(bool value);

1840 23 visualize_contact_point 0 4 3018 43 PhysxDebugGeomNode::visualize_contact_point 0 1 370 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_point
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline void PhysxDebugGeomNode::visualize_contact_point(bool value);

1841 24 visualize_contact_normal 0 4 3018 44 PhysxDebugGeomNode::visualize_contact_normal 0 1 371 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_normal
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline void PhysxDebugGeomNode::visualize_contact_normal(bool value);

1842 23 visualize_contact_error 0 4 3018 43 PhysxDebugGeomNode::visualize_contact_error 0 1 372 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_error
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline void PhysxDebugGeomNode::visualize_contact_error(bool value);

1843 23 visualize_contact_force 0 4 3018 43 PhysxDebugGeomNode::visualize_contact_force 0 1 373 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_force
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline void PhysxDebugGeomNode::visualize_contact_force(bool value);

1844 20 visualize_actor_axes 0 4 3018 40 PhysxDebugGeomNode::visualize_actor_axes 0 1 374 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_actor_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void PhysxDebugGeomNode::visualize_actor_axes(bool value);

1845 25 visualize_collision_aabbs 0 4 3018 45 PhysxDebugGeomNode::visualize_collision_aabbs 0 1 375 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_aabbs
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline void PhysxDebugGeomNode::visualize_collision_aabbs(bool value);

1846 26 visualize_collision_shapes 0 4 3018 46 PhysxDebugGeomNode::visualize_collision_shapes 0 1 376 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_shapes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void PhysxDebugGeomNode::visualize_collision_shapes(bool value);

1847 24 visualize_collision_axes 0 4 3018 44 PhysxDebugGeomNode::visualize_collision_axes 0 1 377 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_axes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline void PhysxDebugGeomNode::visualize_collision_axes(bool value);

1848 29 visualize_collision_compounds 0 4 3018 49 PhysxDebugGeomNode::visualize_collision_compounds 0 1 378 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_compounds
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline void PhysxDebugGeomNode::visualize_collision_compounds(bool value);

1849 28 visualize_collision_vnormals 0 4 3018 48 PhysxDebugGeomNode::visualize_collision_vnormals 0 1 379 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_vnormals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
inline void PhysxDebugGeomNode::visualize_collision_vnormals(bool value);

1850 28 visualize_collision_fnormals 0 4 3018 48 PhysxDebugGeomNode::visualize_collision_fnormals 0 1 380 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_fnormals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
inline void PhysxDebugGeomNode::visualize_collision_fnormals(bool value);

1851 25 visualize_collision_edges 0 4 3018 45 PhysxDebugGeomNode::visualize_collision_edges 0 1 381 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_edges
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline void PhysxDebugGeomNode::visualize_collision_edges(bool value);

1852 27 visualize_collision_spheres 0 4 3018 47 PhysxDebugGeomNode::visualize_collision_spheres 0 1 382 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_spheres
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_collision_spheres(bool value);

1853 26 visualize_collision_static 0 4 3018 46 PhysxDebugGeomNode::visualize_collision_static 0 1 383 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_static
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void PhysxDebugGeomNode::visualize_collision_static(bool value);

1854 27 visualize_collision_dynamic 0 4 3018 47 PhysxDebugGeomNode::visualize_collision_dynamic 0 1 384 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_dynamic
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_collision_dynamic(bool value);

1855 24 visualize_collision_free 0 4 3018 44 PhysxDebugGeomNode::visualize_collision_free 0 1 385 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_free
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline void PhysxDebugGeomNode::visualize_collision_free(bool value);

1856 23 visualize_collision_ccd 0 4 3018 43 PhysxDebugGeomNode::visualize_collision_ccd 0 1 386 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_ccd
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline void PhysxDebugGeomNode::visualize_collision_ccd(bool value);

1857 29 visualize_collision_skeletons 0 4 3018 49 PhysxDebugGeomNode::visualize_collision_skeletons 0 1 387 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_skeletons
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline void PhysxDebugGeomNode::visualize_collision_skeletons(bool value);

1858 20 visualize_cloth_mesh 0 4 3018 40 PhysxDebugGeomNode::visualize_cloth_mesh 0 1 388 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_cloth_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void PhysxDebugGeomNode::visualize_cloth_mesh(bool value);

1859 27 visualize_cloth_validbounds 0 4 3018 47 PhysxDebugGeomNode::visualize_cloth_validbounds 0 1 389 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_cloth_validbounds
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline void PhysxDebugGeomNode::visualize_cloth_validbounds(bool value);

1860 23 visualize_softbody_mesh 0 4 3018 43 PhysxDebugGeomNode::visualize_softbody_mesh 0 1 390 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_softbody_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline void PhysxDebugGeomNode::visualize_softbody_mesh(bool value);

1861 30 visualize_softbody_validbounds 0 4 3018 50 PhysxDebugGeomNode::visualize_softbody_validbounds 0 1 391 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_softbody_validbounds
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void PhysxDebugGeomNode::visualize_softbody_validbounds(bool value);

1862 22 visualize_force_fields 0 4 3018 42 PhysxDebugGeomNode::visualize_force_fields 0 1 392 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_force_fields
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void PhysxDebugGeomNode::visualize_force_fields(bool value);

1863 14 get_class_type 0 4 3018 34 PhysxDebugGeomNode::get_class_type 0 1 393 68
////////////////////////////////////////////////////////////////////
59
static TypeHandle PhysxDebugGeomNode::get_class_type(void);

1864 18 PhysxDistanceJoint 0 4 3019 38 PhysxDistanceJoint::PhysxDistanceJoint 0 1 394 724
// Filename: physxDistanceJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline PhysxDistanceJoint::PhysxDistanceJoint(void);

1865 12 save_to_desc 0 4 3019 32 PhysxDistanceJoint::save_to_desc 0 1 395 306
////////////////////////////////////////////////////////////////////
//     Function : PhysxDistanceJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
79
void PhysxDistanceJoint::save_to_desc(PhysxDistanceJointDesc &jointDesc) const;

1866 14 load_from_desc 0 4 3019 34 PhysxDistanceJoint::load_from_desc 0 1 396 329
////////////////////////////////////////////////////////////////////
//     Function : PhysxDistanceJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
81
void PhysxDistanceJoint::load_from_desc(PhysxDistanceJointDesc const &jointDesc);

1867 14 get_class_type 0 4 3019 34 PhysxDistanceJoint::get_class_type 0 1 397 68
////////////////////////////////////////////////////////////////////
59
static TypeHandle PhysxDistanceJoint::get_class_type(void);

1868 15 PhysxFixedJoint 0 4 3020 32 PhysxFixedJoint::PhysxFixedJoint 0 1 398 718
// Filename: physxFixedJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxFixedJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline PhysxFixedJoint::PhysxFixedJoint(void);

1869 12 save_to_desc 0 4 3020 29 PhysxFixedJoint::save_to_desc 0 1 399 303
////////////////////////////////////////////////////////////////////
//     Function : PhysxFixedJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
73
void PhysxFixedJoint::save_to_desc(PhysxFixedJointDesc &jointDesc) const;

1870 14 load_from_desc 0 4 3020 31 PhysxFixedJoint::load_from_desc 0 1 400 326
////////////////////////////////////////////////////////////////////
//     Function : PhysxFixedJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
75
void PhysxFixedJoint::load_from_desc(PhysxFixedJointDesc const &jointDesc);

1871 14 get_class_type 0 4 3020 31 PhysxFixedJoint::get_class_type 0 1 401 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxFixedJoint::get_class_type(void);

1872 15 PhysxForceField 0 4 3021 32 PhysxForceField::PhysxForceField 0 1 402 718
// Filename: physxForceField.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline PhysxForceField::PhysxForceField(void);

1873 8 set_name 0 4 3021 25 PhysxForceField::set_name 0 1 403 352
//void load_from_desc(const PhysxForceFieldDesc &materialDesc);
//void save_to_desc(PhysxForceFieldDesc &materialDesc) const;

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
void PhysxForceField::set_name(char const *name);

1874 8 get_name 0 4 3021 25 PhysxForceField::get_name 0 1 404 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
char const *PhysxForceField::get_name(void) const;

1875 9 get_scene 0 4 3021 26 PhysxForceField::get_scene 0 1 405 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_scene
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
PhysxScene *PhysxForceField::get_scene(void) const;

1876 23 get_include_shape_group 0 4 3021 40 PhysxForceField::get_include_shape_group 0 1 406 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_include_shape_group
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
PhysxForceFieldShapeGroup *PhysxForceField::get_include_shape_group(void) const;

1877 20 get_num_shape_groups 0 4 3021 37 PhysxForceField::get_num_shape_groups 0 1 407 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_num_shape_groups
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxForceField::get_num_shape_groups(void) const;

1878 15 get_shape_group 0 4 3021 32 PhysxForceField::get_shape_group 0 1 408 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_shape_group
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
84
PhysxForceFieldShapeGroup *PhysxForceField::get_shape_group(unsigned int idx) const;

1879 7 release 0 4 3021 24 PhysxForceField::release 0 1 409 294
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
void PhysxForceField::release(void);

1880 14 get_class_type 0 4 3021 31 PhysxForceField::get_class_type 0 1 410 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxForceField::get_class_type(void);

1881 21 upcast_to_PhysxObject 0 12 3022 48 PhysxForceFieldShapeGroup::upcast_to_PhysxObject 0 1 425 52
upcast from PhysxForceFieldShapeGroup to PhysxObject
68
PhysxObject *PhysxForceFieldShapeGroup::upcast_to_PhysxObject(void);

1882 37 downcast_to_PhysxForceFieldShapeGroup 0 12 2993 50 PhysxObject::downcast_to_PhysxForceFieldShapeGroup 0 1 426 54
downcast from PhysxObject to PhysxForceFieldShapeGroup
84
PhysxForceFieldShapeGroup *PhysxObject::downcast_to_PhysxForceFieldShapeGroup(void);

1883 20 upcast_to_PhysxEnums 0 12 3022 47 PhysxForceFieldShapeGroup::upcast_to_PhysxEnums 0 1 427 51
upcast from PhysxForceFieldShapeGroup to PhysxEnums
66
PhysxEnums *PhysxForceFieldShapeGroup::upcast_to_PhysxEnums(void);

1884 37 downcast_to_PhysxForceFieldShapeGroup 0 12 2962 49 PhysxEnums::downcast_to_PhysxForceFieldShapeGroup 0 1 428 53
downcast from PhysxEnums to PhysxForceFieldShapeGroup
83
PhysxForceFieldShapeGroup *PhysxEnums::downcast_to_PhysxForceFieldShapeGroup(void);

1885 25 PhysxForceFieldShapeGroup 0 4 3022 52 PhysxForceFieldShapeGroup::PhysxForceFieldShapeGroup 0 1 411 738
// Filename: physxForceFieldShapeGroup.I
// Created by:  enn0x (11Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline PhysxForceFieldShapeGroup::PhysxForceFieldShapeGroup(void);

1886 26 ~PhysxForceFieldShapeGroup 0 4 3022 53 PhysxForceFieldShapeGroup::~PhysxForceFieldShapeGroup 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
virtual inline PhysxForceFieldShapeGroup::~PhysxForceFieldShapeGroup(void);

1887 12 save_to_desc 0 4 3022 39 PhysxForceFieldShapeGroup::save_to_desc 0 1 412 331
////////////////////////////////////////////////////////////////////
//     Function : PhysxForceFieldShapeGroup::save_to_desc
//       Access : Published
//  Description : Saves the state of the force field shape group
//                object to a  descriptor.
////////////////////////////////////////////////////////////////////
93
void PhysxForceFieldShapeGroup::save_to_desc(PhysxForceFieldShapeGroupDesc &groupDesc) const;

1888 9 get_scene 0 4 3022 36 PhysxForceFieldShapeGroup::get_scene 0 1 413 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_scene
//       Access: Published
//  Description: Returns the scene that owns this force field shape
//               group.
////////////////////////////////////////////////////////////////////
61
PhysxScene *PhysxForceFieldShapeGroup::get_scene(void) const;

1889 15 get_force_field 0 4 3022 42 PhysxForceFieldShapeGroup::get_force_field 0 1 414 355
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_force_field
//       Access: Published
//  Description: Returns the force field of this group if this is
//               an include group. If not NULL will be returned.
////////////////////////////////////////////////////////////////////
72
PhysxForceField *PhysxForceFieldShapeGroup::get_force_field(void) const;

1890 8 get_name 0 4 3022 35 PhysxForceFieldShapeGroup::get_name 0 1 415 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_name
//       Access: Published
//  Description: Returns the name string.
////////////////////////////////////////////////////////////////////
60
char const *PhysxForceFieldShapeGroup::get_name(void) const;

1891 8 set_name 0 4 3022 35 PhysxForceFieldShapeGroup::set_name 0 1 416 412
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
////////////////////////////////////////////////////////////////////
59
void PhysxForceFieldShapeGroup::set_name(char const *name);

1892 14 get_num_shapes 0 4 3022 41 PhysxForceFieldShapeGroup::get_num_shapes 0 1 417 338
// Shapes

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_num_shapes
//       Access: Published
//  Description: Returns the number of shapes assigned to the
//               force field shape group.
////////////////////////////////////////////////////////////////////
67
unsigned int PhysxForceFieldShapeGroup::get_num_shapes(void) const;

1893 12 create_shape 0 4 3022 39 PhysxForceFieldShapeGroup::create_shape 0 1 418 320
// Shapes

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::create_shape
//       Access: Published
//  Description: Creates a force field shape and adds it to the
//               group.
////////////////////////////////////////////////////////////////////
94
PhysxForceFieldShape *PhysxForceFieldShapeGroup::create_shape(PhysxForceFieldShapeDesc &desc);

1894 9 get_shape 0 4 3022 36 PhysxForceFieldShapeGroup::get_shape 0 1 419 284
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_shape
//       Access: Published
//  Description: Returns the i-th shape in the force field group.
////////////////////////////////////////////////////////////////////
83
PhysxForceFieldShape *PhysxForceFieldShapeGroup::get_shape(unsigned int idx) const;

1895 7 release 0 4 3022 34 PhysxForceFieldShapeGroup::release 0 1 420 335
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::release
//       Access: Published
//  Description: Releases the force field shape.
////////////////////////////////////////////////////////////////////
46
void PhysxForceFieldShapeGroup::release(void);

1896 2 ls 0 4 3022 29 PhysxForceFieldShapeGroup::ls 0 3 421 422 423 460
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
157
virtual inline void PhysxForceFieldShapeGroup::ls(void) const;
virtual inline void PhysxForceFieldShapeGroup::ls(ostream &out, int indent_level = (0)) const;

1897 14 get_class_type 0 4 3022 41 PhysxForceFieldShapeGroup::get_class_type 0 1 424 68
////////////////////////////////////////////////////////////////////
66
static TypeHandle PhysxForceFieldShapeGroup::get_class_type(void);

1898 7 release 0 4 3023 25 PhysxHeightField::release 0 1 429 222
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::release
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
37
void PhysxHeightField::release(void);

1899 19 get_reference_count 0 4 3023 37 PhysxHeightField::get_reference_count 0 1 430 283
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxHeightField::get_reference_count(void) const;

1900 10 get_height 0 4 3023 28 PhysxHeightField::get_height 0 1 431 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::get_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
float PhysxHeightField::get_height(float x, float y) const;

1901 14 get_class_type 0 4 3023 32 PhysxHeightField::get_class_type 0 1 432 68
////////////////////////////////////////////////////////////////////
57
static TypeHandle PhysxHeightField::get_class_type(void);

1902 21 PhysxHeightFieldShape 0 4 3024 44 PhysxHeightFieldShape::PhysxHeightFieldShape 0 1 433 730
// Filename: physxHeightFieldShape.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxHeightFieldShape::PhysxHeightFieldShape(void);

1903 12 save_to_desc 0 4 3024 35 PhysxHeightFieldShape::save_to_desc 0 1 434 309
////////////////////////////////////////////////////////////////////
//     Function : PhysxHeightFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
85
void PhysxHeightFieldShape::save_to_desc(PhysxHeightFieldShapeDesc &shapeDesc) const;

1904 14 get_class_type 0 4 3024 37 PhysxHeightFieldShape::get_class_type 0 1 435 68
////////////////////////////////////////////////////////////////////
62
static TypeHandle PhysxHeightFieldShape::get_class_type(void);

1905 21 upcast_to_PhysxObject 0 12 3025 36 PhysxMaterial::upcast_to_PhysxObject 0 1 464 40
upcast from PhysxMaterial to PhysxObject
56
PhysxObject *PhysxMaterial::upcast_to_PhysxObject(void);

1906 25 downcast_to_PhysxMaterial 0 12 2993 38 PhysxObject::downcast_to_PhysxMaterial 0 1 465 42
downcast from PhysxObject to PhysxMaterial
60
PhysxMaterial *PhysxObject::downcast_to_PhysxMaterial(void);

1907 20 upcast_to_PhysxEnums 0 12 3025 35 PhysxMaterial::upcast_to_PhysxEnums 0 1 466 39
upcast from PhysxMaterial to PhysxEnums
54
PhysxEnums *PhysxMaterial::upcast_to_PhysxEnums(void);

1908 25 downcast_to_PhysxMaterial 0 12 2962 37 PhysxEnums::downcast_to_PhysxMaterial 0 1 467 41
downcast from PhysxEnums to PhysxMaterial
59
PhysxMaterial *PhysxEnums::downcast_to_PhysxMaterial(void);

1909 13 PhysxMaterial 0 4 3025 28 PhysxMaterial::PhysxMaterial 0 1 436 714
// Filename: physxMaterial.I
// Created by:  enn0x (21Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline PhysxMaterial::PhysxMaterial(void);

1910 14 ~PhysxMaterial 0 4 3025 29 PhysxMaterial::~PhysxMaterial 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual inline PhysxMaterial::~PhysxMaterial(void);

1911 9 get_scene 0 4 3025 24 PhysxMaterial::get_scene 0 1 437 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_scene
//       Access: Published
//  Description: Returns the scene that owns this material.
////////////////////////////////////////////////////////////////////
49
PhysxScene *PhysxMaterial::get_scene(void) const;

1912 18 get_material_index 0 4 3025 33 PhysxMaterial::get_material_index 0 1 438 651
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_material_index
//       Access: Published
//  Description: Returns the material index for this material.
//
//               Materials are associated with mesh faces and shapes
//               using material index identifiers.
//
//               If you release a material while its material index
//               is still in use by shapes or meshes, the material
//               usage of these objects becomes undefined as the
//               material index gets recycled.
////////////////////////////////////////////////////////////////////
65
unsigned short int PhysxMaterial::get_material_index(void) const;

1913 14 load_from_desc 0 4 3025 29 PhysxMaterial::load_from_desc 0 1 439 327
////////////////////////////////////////////////////////////////////
//     Function : PhysxMaterial::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the material from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
74
void PhysxMaterial::load_from_desc(PhysxMaterialDesc const &materialDesc);

1914 12 save_to_desc 0 4 3025 27 PhysxMaterial::save_to_desc 0 1 440 304
////////////////////////////////////////////////////////////////////
//     Function : PhysxMaterial::save_to_desc
//       Access : Published
//  Description : Saves the state of the material object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
72
void PhysxMaterial::save_to_desc(PhysxMaterialDesc &materialDesc) const;

1915 20 set_dynamic_friction 0 4 3025 35 PhysxMaterial::set_dynamic_friction 0 1 441 670
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dynamic_friction
//       Access: Published
//  Description: Sets the coefficient of dynamic friction. 
//               The coefficient of dynamic friction should be in
//               [0, +inf]. If set to greater than staticFriction,
//               the effective value of staticFriction will be
//               increased to match.
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
////////////////////////////////////////////////////////////////////
53
void PhysxMaterial::set_dynamic_friction(float coef);

1916 19 set_static_friction 0 4 3025 34 PhysxMaterial::set_static_friction 0 1 442 538
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_static_friction
//       Access: Published
//  Description: Sets the coefficient of static friction. 
//               The coefficient of static friction should be in the
//               range [0, +inf].
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
////////////////////////////////////////////////////////////////////
52
void PhysxMaterial::set_static_friction(float coef);

1917 15 set_restitution 0 4 3025 30 PhysxMaterial::set_restitution 0 1 443 431
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_restitution
//       Access: Published
//  Description: Sets the coefficient of restitution. 
//               A coefficient of 0 makes the object bounce as
//               little as possible, higher values up to 1.0 result
//               in more bounce.
////////////////////////////////////////////////////////////////////
48
void PhysxMaterial::set_restitution(float rest);

1918 22 set_dynamic_friction_v 0 4 3025 37 PhysxMaterial::set_dynamic_friction_v 0 1 444 449
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dynamic_friction_v
//       Access: Published
//  Description: Sets the dynamic friction coefficient along the
//               secondary (V) axis. This is used when anisotropic
//               friction is being applied. I.e. the flag
//               MF_anisotropic is set.
////////////////////////////////////////////////////////////////////
55
void PhysxMaterial::set_dynamic_friction_v(float coef);

1919 21 set_static_friction_v 0 4 3025 36 PhysxMaterial::set_static_friction_v 0 1 445 447
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_static_friction_v
//       Access: Published
//  Description: Sets the static friction coefficient along the
//               secondary (V) axis. This is used when anisotropic
//               friction is being applied. I.e. the flag
//               MF_anisotropic is set.
////////////////////////////////////////////////////////////////////
54
void PhysxMaterial::set_static_friction_v(float coef);

1920 21 set_dir_of_anisotropy 0 4 3025 36 PhysxMaterial::set_dir_of_anisotropy 0 1 446 383
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dir_of_anisotropy
//       Access: Published
//  Description: Sets the shape space direction (unit vector) of
//               anisotropy. This is only used if the flag 
//               MF_anisotropic is set.
////////////////////////////////////////////////////////////////////
63
void PhysxMaterial::set_dir_of_anisotropy(LVector3f const dir);

1921 8 set_flag 0 4 3025 23 PhysxMaterial::set_flag 0 1 447 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
////////////////////////////////////////////////////////////////////
77
void PhysxMaterial::set_flag(PhysxEnums::PhysxMaterialFlag flag, bool value);

1922 25 set_friction_combine_mode 0 4 3025 40 PhysxMaterial::set_friction_combine_mode 0 1 448 465
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_friction_combine_mode
//       Access: Published
//  Description: Sets the friction combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
////////////////////////////////////////////////////////////////////
81
void PhysxMaterial::set_friction_combine_mode(PhysxEnums::PhysxCombineMode mode);

1923 28 set_restitution_combine_mode 0 4 3025 43 PhysxMaterial::set_restitution_combine_mode 0 1 449 471
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_restitution_combine_mode
//       Access: Published
//  Description: Sets the restitution combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
////////////////////////////////////////////////////////////////////
84
void PhysxMaterial::set_restitution_combine_mode(PhysxEnums::PhysxCombineMode mode);

1924 20 get_dynamic_friction 0 4 3025 35 PhysxMaterial::get_dynamic_friction 0 1 450 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dynamic_friction
//       Access: Published
//  Description: Returns the DynamicFriction value.
////////////////////////////////////////////////////////////////////
54
float PhysxMaterial::get_dynamic_friction(void) const;

1925 19 get_static_friction 0 4 3025 34 PhysxMaterial::get_static_friction 0 1 451 277
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_static_friction
//       Access: Published
//  Description: Returns the coefficient of static friction.
////////////////////////////////////////////////////////////////////
53
float PhysxMaterial::get_static_friction(void) const;

1926 15 get_restitution 0 4 3025 30 PhysxMaterial::get_restitution 0 1 452 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_restitution
//       Access: Published
//  Description: Returns the coefficient of restitution.
////////////////////////////////////////////////////////////////////
49
float PhysxMaterial::get_restitution(void) const;

1927 22 get_dynamic_friction_v 0 4 3025 37 PhysxMaterial::get_dynamic_friction_v 0 1 453 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dynamic_friction_v
//       Access: Published
//  Description: Returns the dynamic friction coefficient for the
//               V direction.
////////////////////////////////////////////////////////////////////
56
float PhysxMaterial::get_dynamic_friction_v(void) const;

1928 21 get_static_friction_v 0 4 3025 36 PhysxMaterial::get_static_friction_v 0 1 454 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_static_friction_v
//       Access: Published
//  Description: Returns the static friction coefficient for the
//               V direction.
////////////////////////////////////////////////////////////////////
55
float PhysxMaterial::get_static_friction_v(void) const;

1929 21 get_dir_of_anisotropy 0 4 3025 36 PhysxMaterial::get_dir_of_anisotropy 0 1 455 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dir_of_anisotropy
//       Access: Published
//  Description: Returns the direction of anisotropy value.
////////////////////////////////////////////////////////////////////
59
LVector3f PhysxMaterial::get_dir_of_anisotropy(void) const;

1930 8 get_flag 0 4 3025 23 PhysxMaterial::get_flag 0 1 456 258
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_flag
//       Access: Published
//  Description: Returns the value of a single flag.
////////////////////////////////////////////////////////////////////
71
bool PhysxMaterial::get_flag(PhysxEnums::PhysxMaterialFlag flag) const;

1931 25 get_friction_combine_mode 0 4 3025 40 PhysxMaterial::get_friction_combine_mode 0 1 457 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_friction_combine_mode
//       Access: Published
//  Description: Returns the friction combine mode.
////////////////////////////////////////////////////////////////////
82
PhysxEnums::PhysxCombineMode PhysxMaterial::get_friction_combine_mode(void) const;

1932 28 get_restitution_combine_mode 0 4 3025 43 PhysxMaterial::get_restitution_combine_mode 0 1 458 280
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_restitution_combine_mode
//       Access: Published
//  Description: Returns the restitution combine mode.
////////////////////////////////////////////////////////////////////
85
PhysxEnums::PhysxCombineMode PhysxMaterial::get_restitution_combine_mode(void) const;

1933 2 ls 0 4 3025 17 PhysxMaterial::ls 0 3 459 460 461 436
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
133
virtual inline void PhysxMaterial::ls(void) const;
virtual inline void PhysxMaterial::ls(ostream &out, int indent_level = (0)) const;

1934 7 release 0 4 3025 22 PhysxMaterial::release 0 1 462 292
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
void PhysxMaterial::release(void);

1935 14 get_class_type 0 4 3025 29 PhysxMaterial::get_class_type 0 1 463 68
////////////////////////////////////////////////////////////////////
54
static TypeHandle PhysxMaterial::get_class_type(void);

1936 15 PhysxPlaneShape 0 4 3026 32 PhysxPlaneShape::PhysxPlaneShape 0 1 468 718
// Filename: physxPlaneShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline PhysxPlaneShape::PhysxPlaneShape(void);

1937 12 save_to_desc 0 4 3026 29 PhysxPlaneShape::save_to_desc 0 1 469 303
////////////////////////////////////////////////////////////////////
//     Function : PhysxPlaneShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
73
void PhysxPlaneShape::save_to_desc(PhysxPlaneShapeDesc &shapeDesc) const;

1938 9 set_plane 0 4 3026 26 PhysxPlaneShape::set_plane 0 1 470 483
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShape::set_plane
//       Access: Published
//  Description: Sets the plane equation. 
//               - normal:  Normal for the plane, in the global
//                          frame. Range: direction vector  
//               - d: Distance coefficient of the plane equation.
//                    Range: (-inf,inf) 
////////////////////////////////////////////////////////////////////
66
void PhysxPlaneShape::set_plane(LVector3f const &normal, float d);

1939 14 get_class_type 0 4 3026 31 PhysxPlaneShape::get_class_type 0 1 471 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxPlaneShape::get_class_type(void);

1940 22 PhysxPointInPlaneJoint 0 4 3027 46 PhysxPointInPlaneJoint::PhysxPointInPlaneJoint 0 1 472 732
// Filename: physxPointInPlaneJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointInPlaneJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxPointInPlaneJoint::PhysxPointInPlaneJoint(void);

1941 12 save_to_desc 0 4 3027 36 PhysxPointInPlaneJoint::save_to_desc 0 1 473 310
////////////////////////////////////////////////////////////////////
//     Function : PhysxPointInPlaneJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
87
void PhysxPointInPlaneJoint::save_to_desc(PhysxPointInPlaneJointDesc &jointDesc) const;

1942 14 load_from_desc 0 4 3027 38 PhysxPointInPlaneJoint::load_from_desc 0 1 474 333
////////////////////////////////////////////////////////////////////
//     Function : PhysxPointInPlaneJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
89
void PhysxPointInPlaneJoint::load_from_desc(PhysxPointInPlaneJointDesc const &jointDesc);

1943 14 get_class_type 0 4 3027 38 PhysxPointInPlaneJoint::get_class_type 0 1 475 68
////////////////////////////////////////////////////////////////////
63
static TypeHandle PhysxPointInPlaneJoint::get_class_type(void);

1944 21 PhysxPointOnLineJoint 0 4 3028 44 PhysxPointOnLineJoint::PhysxPointOnLineJoint 0 1 476 730
// Filename: physxPointOnLineJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointOnLineJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxPointOnLineJoint::PhysxPointOnLineJoint(void);

1945 12 save_to_desc 0 4 3028 35 PhysxPointOnLineJoint::save_to_desc 0 1 477 309
////////////////////////////////////////////////////////////////////
//     Function : PhysxPointOnLineJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
85
void PhysxPointOnLineJoint::save_to_desc(PhysxPointOnLineJointDesc &jointDesc) const;

1946 14 load_from_desc 0 4 3028 37 PhysxPointOnLineJoint::load_from_desc 0 1 478 332
////////////////////////////////////////////////////////////////////
//     Function : PhysxPointOnLineJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
87
void PhysxPointOnLineJoint::load_from_desc(PhysxPointOnLineJointDesc const &jointDesc);

1947 14 get_class_type 0 4 3028 37 PhysxPointOnLineJoint::get_class_type 0 1 479 68
////////////////////////////////////////////////////////////////////
62
static TypeHandle PhysxPointOnLineJoint::get_class_type(void);

1948 19 PhysxPrismaticJoint 0 4 3029 40 PhysxPrismaticJoint::PhysxPrismaticJoint 0 1 480 726
// Filename: physxPrismaticJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPrismaticJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxPrismaticJoint::PhysxPrismaticJoint(void);

1949 12 save_to_desc 0 4 3029 33 PhysxPrismaticJoint::save_to_desc 0 1 481 307
////////////////////////////////////////////////////////////////////
//     Function : PhysxPrismaticJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
81
void PhysxPrismaticJoint::save_to_desc(PhysxPrismaticJointDesc &jointDesc) const;

1950 14 load_from_desc 0 4 3029 35 PhysxPrismaticJoint::load_from_desc 0 1 482 330
////////////////////////////////////////////////////////////////////
//     Function : PhysxPrismaticJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
83
void PhysxPrismaticJoint::load_from_desc(PhysxPrismaticJointDesc const &jointDesc);

1951 14 get_class_type 0 4 3029 35 PhysxPrismaticJoint::get_class_type 0 1 483 68
////////////////////////////////////////////////////////////////////
60
static TypeHandle PhysxPrismaticJoint::get_class_type(void);

1952 16 PhysxPulleyJoint 0 4 3030 34 PhysxPulleyJoint::PhysxPulleyJoint 0 1 484 720
// Filename: physxPulleyJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PhysxPulleyJoint::PhysxPulleyJoint(void);

1953 12 save_to_desc 0 4 3030 30 PhysxPulleyJoint::save_to_desc 0 1 485 304
////////////////////////////////////////////////////////////////////
//     Function : PhysxPulleyJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
75
void PhysxPulleyJoint::save_to_desc(PhysxPulleyJointDesc &jointDesc) const;

1954 14 load_from_desc 0 4 3030 32 PhysxPulleyJoint::load_from_desc 0 1 486 327
////////////////////////////////////////////////////////////////////
//     Function : PhysxPulleyJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
77
void PhysxPulleyJoint::load_from_desc(PhysxPulleyJointDesc const &jointDesc);

1955 9 set_motor 0 4 3030 27 PhysxPulleyJoint::set_motor 0 1 487 1562
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::set_motor
//       Access: Published
//  Description: Sets motor parameters for the joint. 
//
//               For a positive velTarget, the motor pulls the first
//               body towards its pulley, for a negative velTarget,
//               the motor pulls the second body towards its pulley.
//
//               velTarget - the relative velocity the motor is
//               trying to achieve. The motor will only be able to
//               reach this velocity if the maxForce is sufficiently
//               large. If the joint is moving faster than this
//               velocity, the motor will actually try to brake. If
//               you set this to infinity then the motor will keep
//               speeding up, unless there is some sort of
//               resistance on the attached bodies. 
//
//               maxForce - the maximum force the motor can exert.
//               Zero disables the motor. Default is 0, should
//               be >= 0. Setting this to a very large value if
//               velTarget is also very large may not be a good
//               idea. 
//
//               freeSpin - if this flag is set, and if the joint
//               is moving faster than velTarget, then neither
//               braking nor additional acceleration will result.
//               default: false. 
//
//               This automatically enables the motor.
////////////////////////////////////////////////////////////////////
62
void PhysxPulleyJoint::set_motor(PhysxMotorDesc const &motor);

1956 8 set_flag 0 4 3030 26 PhysxPulleyJoint::set_flag 0 1 488 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::set_flag
//       Access: Published
//  Description: Sets or clear a single pulley joint flag.
////////////////////////////////////////////////////////////////////
83
void PhysxPulleyJoint::set_flag(PhysxEnums::PhysxPulleyJointFlag flag, bool value);

1957 8 get_flag 0 4 3030 26 PhysxPulleyJoint::get_flag 0 1 489 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::get_flag
//       Access: Published
//  Description: Retrieves the value of a single PulleyJointFlag.
////////////////////////////////////////////////////////////////////
77
bool PhysxPulleyJoint::get_flag(PhysxEnums::PhysxPulleyJointFlag flag) const;

1958 9 get_motor 0 4 3030 27 PhysxPulleyJoint::get_motor 0 1 490 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::get_motor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PhysxMotorDesc PhysxPulleyJoint::get_motor(void) const;

1959 14 get_class_type 0 4 3030 32 PhysxPulleyJoint::get_class_type 0 1 491 68
////////////////////////////////////////////////////////////////////
57
static TypeHandle PhysxPulleyJoint::get_class_type(void);

1960 18 PhysxRevoluteJoint 0 4 3031 38 PhysxRevoluteJoint::PhysxRevoluteJoint 0 1 492 724
// Filename: physxRevoluteJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline PhysxRevoluteJoint::PhysxRevoluteJoint(void);

1961 12 save_to_desc 0 4 3031 32 PhysxRevoluteJoint::save_to_desc 0 1 493 306
////////////////////////////////////////////////////////////////////
//     Function : PhysxRevoluteJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
79
void PhysxRevoluteJoint::save_to_desc(PhysxRevoluteJointDesc &jointDesc) const;

1962 14 load_from_desc 0 4 3031 34 PhysxRevoluteJoint::load_from_desc 0 1 494 329
////////////////////////////////////////////////////////////////////
//     Function : PhysxRevoluteJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
81
void PhysxRevoluteJoint::load_from_desc(PhysxRevoluteJointDesc const &jointDesc);

1963 10 set_spring 0 4 3031 30 PhysxRevoluteJoint::set_spring 0 1 495 1383
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_spring
//       Access: Published
//  Description: Sets spring parameters. 
//
//               The spring is implicitly integrated so no
//               instability should result for arbitrary spring and
//               damping constants. Using these settings together
//               with a motor is not possible -- the motor will have
//               priority and the spring settings are ignored. If
//               you would like to simulate your motor's internal
//               friction, do this by altering the motor parameters
//               directly.
//
//               spring - The rotational spring acts along the hinge
//               axis and tries to force the joint angle to zero. A
//               setting of zero disables the spring. Default is 0,
//               should be >= 0.
//
//               damper - Damping coefficient; acts against the
//               hinge's angular velocity. A setting of zero
//               disables the damping. The default is 0, should
//               be >= 0.
//
//               targetValue - The angle at which the spring is
//               relaxed. In [-Pi,Pi]. Default is 0.
//
//               This automatically enables the spring
////////////////////////////////////////////////////////////////////
67
void PhysxRevoluteJoint::set_spring(PhysxSpringDesc const &spring);

1964 9 set_motor 0 4 3031 29 PhysxRevoluteJoint::set_motor 0 1 496 1564
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_motor
//       Access: Published
//  Description: Sets motor parameters for the joint. 
//
//               For a positive velTarget, the motor pulls the first
//               body towards its pulley, for a negative velTarget,
//               the motor pulls the second body towards its pulley.
//
//               velTarget - the relative velocity the motor is
//               trying to achieve. The motor will only be able to
//               reach this velocity if the maxForce is sufficiently
//               large. If the joint is moving faster than this
//               velocity, the motor will actually try to brake. If
//               you set this to infinity then the motor will keep
//               speeding up, unless there is some sort of
//               resistance on the attached bodies. 
//
//               maxForce - the maximum force the motor can exert.
//               Zero disables the motor. Default is 0, should
//               be >= 0. Setting this to a very large value if
//               velTarget is also very large may not be a good
//               idea. 
//
//               freeSpin - if this flag is set, and if the joint
//               is moving faster than velTarget, then neither
//               braking nor additional acceleration will result.
//               default: false. 
//
//               This automatically enables the motor.
////////////////////////////////////////////////////////////////////
64
void PhysxRevoluteJoint::set_motor(PhysxMotorDesc const &motor);

1965 10 set_limits 0 4 3031 30 PhysxRevoluteJoint::set_limits 0 1 497 1431
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_limits
//       Access: Published
//  Description: Sets angular joint limits. 
//
//               If either of these limits are set, any planar
//               limits in PhysxJoint are ignored. The limits are
//               angles defined the same way as the values
//               that get_angle() returns.
//
//               The following has to hold:
//
//               Pi < lowAngle < highAngle < Pi Both limits are
//               disabled by default.
//               Also sets coefficients of restitutions for the low
//               and high angular limits. These settings are only
//               used if valid limits are set using set_limits().
//               These restitution coefficients work the same way as
//               for contacts.
//
//               The coefficient of restitution determines whether a
//               collision with the joint limit is completely
//               elastic (like pool balls, restitution = 1, no
//               energy is lost in the collision), completely
//               inelastic (like putty, restitution = 0, no rebound
//               after collision) or somewhere in between. The
//               default is 0 for both.
//
//               This automatically enables the limit.
////////////////////////////////////////////////////////////////////
101
void PhysxRevoluteJoint::set_limits(PhysxJointLimitDesc const &low, PhysxJointLimitDesc const &high);

1966 8 set_flag 0 4 3031 28 PhysxRevoluteJoint::set_flag 0 1 498 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_flag
//       Access: Published
//  Description: Sets or clears a single RevoluteJointFlag.
////////////////////////////////////////////////////////////////////
87
void PhysxRevoluteJoint::set_flag(PhysxEnums::PhysxRevoluteJointFlag flag, bool value);

1967 19 set_projection_mode 0 4 3031 39 PhysxRevoluteJoint::set_projection_mode 0 1 499 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_projection_mode
//       Access: Published
//  Description: Sets the joint projection mode.
////////////////////////////////////////////////////////////////////
83
void PhysxRevoluteJoint::set_projection_mode(PhysxEnums::PhysxProjectionMode mode);

1968 9 get_angle 0 4 3031 29 PhysxRevoluteJoint::get_angle 0 1 500 732
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_angle
//       Access: Published
//  Description: Retrieves the current revolute joint angle. 
//
//               The relative orientation of the bodies is stored
//               when the joint is created, or when set_axis() or
//               set_anchor() is called. This initial orientation
//               returns an angle of zero, and joint angles are
//               measured relative to this pose. The angle is in
//               the range [-180, 180], with positive angles CCW
//               around the axis, measured from body2 to body1.
////////////////////////////////////////////////////////////////////
48
float PhysxRevoluteJoint::get_angle(void) const;

1969 12 get_velocity 0 4 3031 32 PhysxRevoluteJoint::get_velocity 0 1 501 411
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_velocity
//       Access: Published
//  Description: Retrieves the revolute joint angle's rate of change
//               (angular velocity). It is the angular velocity of
//               body1 minus body2 projected along the axis.
////////////////////////////////////////////////////////////////////
51
float PhysxRevoluteJoint::get_velocity(void) const;

1970 8 get_flag 0 4 3031 28 PhysxRevoluteJoint::get_flag 0 1 502 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_flag
//       Access: Published
//  Description: Returns the value of a single RevoluteJointFlag.
////////////////////////////////////////////////////////////////////
81
bool PhysxRevoluteJoint::get_flag(PhysxEnums::PhysxRevoluteJointFlag flag) const;

1971 19 get_projection_mode 0 4 3031 39 PhysxRevoluteJoint::get_projection_mode 0 1 503 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_projection_mode
//       Access: Published
//  Description: Retrieves the joints projection mode.
////////////////////////////////////////////////////////////////////
84
PhysxEnums::PhysxProjectionMode PhysxRevoluteJoint::get_projection_mode(void) const;

1972 9 get_motor 0 4 3031 29 PhysxRevoluteJoint::get_motor 0 1 504 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_motor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
PhysxMotorDesc PhysxRevoluteJoint::get_motor(void) const;

1973 10 get_spring 0 4 3031 30 PhysxRevoluteJoint::get_spring 0 1 505 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
PhysxSpringDesc PhysxRevoluteJoint::get_spring(void) const;

1974 14 get_class_type 0 4 3031 34 PhysxRevoluteJoint::get_class_type 0 1 506 68
////////////////////////////////////////////////////////////////////
59
static TypeHandle PhysxRevoluteJoint::get_class_type(void);

1975 31 upcast_to_PhysxUserEntityReport 0 12 3032 51 PhysxOverlapReport::upcast_to_PhysxUserEntityReport 0 0 55
upcast from PhysxOverlapReport to PhysxUserEntityReport
81
PhysxUserEntityReport *PhysxOverlapReport::upcast_to_PhysxUserEntityReport(void);

1976 30 downcast_to_PhysxOverlapReport 0 12 3033 53 PhysxUserEntityReport::downcast_to_PhysxOverlapReport 0 0 57
downcast from PhysxUserEntityReport to PhysxOverlapReport
80
PhysxOverlapReport *PhysxUserEntityReport::downcast_to_PhysxOverlapReport(void);

1977 16 get_num_overlaps 0 4 3032 36 PhysxOverlapReport::get_num_overlaps 0 1 507 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_num_overlaps
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned int PhysxOverlapReport::get_num_overlaps(void) const;

1978 17 get_first_overlap 0 4 3032 37 PhysxOverlapReport::get_first_overlap 0 1 508 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_first_overlap
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
PhysxShape *PhysxOverlapReport::get_first_overlap(void);

1979 16 get_next_overlap 0 4 3032 36 PhysxOverlapReport::get_next_overlap 0 1 509 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_next_overlap
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PhysxShape *PhysxOverlapReport::get_next_overlap(void);

1980 11 get_overlap 0 4 3032 31 PhysxOverlapReport::get_overlap 0 1 510 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_overlap
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxShape *PhysxOverlapReport::get_overlap(unsigned int idx);

1981 19 ~PhysxOverlapReport 0 4 3032 39 PhysxOverlapReport::~PhysxOverlapReport 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline PhysxOverlapReport::~PhysxOverlapReport(void);

1982 9 PhysxMask 0 4 3034 20 PhysxMask::PhysxMask 0 1 511 710
// Filename: physxMask32.cxx
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
inline PhysxMask::PhysxMask(void);

1983 10 ~PhysxMask 0 4 3034 21 PhysxMask::~PhysxMask 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
35
inline PhysxMask::~PhysxMask(void);

1984 7 set_bit 0 4 3034 18 PhysxMask::set_bit 0 1 512 291
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::set_bit
//       Access: Published
//  Description: Sets the nth bit on.
//               Index must be in the range [0, 31].
////////////////////////////////////////////////////////////////////
42
void PhysxMask::set_bit(unsigned int idx);

1985 9 clear_bit 0 4 3034 20 PhysxMask::clear_bit 0 1 513 294
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.
//               Index must be in the range [0, 31].
////////////////////////////////////////////////////////////////////
44
void PhysxMask::clear_bit(unsigned int idx);

1986 7 get_bit 0 4 3034 18 PhysxMask::get_bit 0 1 514 347
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.
//               Index must be in the range [0, 31].
////////////////////////////////////////////////////////////////////
48
bool PhysxMask::get_bit(unsigned int idx) const;

1987 6 output 0 4 3034 17 PhysxMask::output 0 1 515 287
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::output
//       Access: Published
//  Description: Writes the PhysxMask out as a list of ones and
//               zeros.
////////////////////////////////////////////////////////////////////
43
void PhysxMask::output(ostream &out) const;

1988 6 all_on 0 4 3034 17 PhysxMask::all_on 0 1 516 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::all_on
//       Access: Published
//  Description: Returns a PhysxMask whose bits are all on.
////////////////////////////////////////////////////////////////////
41
static PhysxMask PhysxMask::all_on(void);

1989 7 all_off 0 4 3034 18 PhysxMask::all_off 0 1 517 261
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::all_off
//       Access: Published
//  Description: Returns a PhysxMask whose bits are all off.
////////////////////////////////////////////////////////////////////
42
static PhysxMask PhysxMask::all_off(void);

1990 15 PhysxGroupsMask 0 4 3035 32 PhysxGroupsMask::PhysxGroupsMask 0 2 518 519 946
// Filename: physxGroupsMask.cxx
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
106
inline PhysxGroupsMask::PhysxGroupsMask(void);
inline PhysxGroupsMask::PhysxGroupsMask(NxGroupsMask mask);

1991 16 ~PhysxGroupsMask 0 4 3035 33 PhysxGroupsMask::~PhysxGroupsMask 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline PhysxGroupsMask::~PhysxGroupsMask(void);

1992 7 set_bit 0 4 3035 24 PhysxGroupsMask::set_bit 0 1 520 298
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bit
//       Access: Published
//  Description: Sets the nth bit on.
//               Index must be in the range [0, 127].
////////////////////////////////////////////////////////////////////
48
void PhysxGroupsMask::set_bit(unsigned int idx);

1993 9 clear_bit 0 4 3035 26 PhysxGroupsMask::clear_bit 0 1 521 301
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.
//               Index must be in the range [0, 127].
////////////////////////////////////////////////////////////////////
50
void PhysxGroupsMask::clear_bit(unsigned int idx);

1994 7 get_bit 0 4 3035 24 PhysxGroupsMask::get_bit 0 1 522 354
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.
//               Index must be in the range [0, 127].
////////////////////////////////////////////////////////////////////
54
bool PhysxGroupsMask::get_bit(unsigned int idx) const;

1995 6 output 0 4 3035 23 PhysxGroupsMask::output 0 1 523 299
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::output
//       Access: Published
//  Description: Writes the PhysxGroupsMask out as a list of ones and
//               zeros.
////////////////////////////////////////////////////////////////////
49
void PhysxGroupsMask::output(ostream &out) const;

1996 6 all_on 0 4 3035 23 PhysxGroupsMask::all_on 0 1 524 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::all_on
//       Access: Published
//  Description: Returns a PhysxGroupsMask whose bits are all on.
////////////////////////////////////////////////////////////////////
53
static PhysxGroupsMask PhysxGroupsMask::all_on(void);

1997 7 all_off 0 4 3035 24 PhysxGroupsMask::all_off 0 1 525 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::all_off
//       Access: Published
//  Description: Returns a PhysxGroupsMask whose bits are all off.
////////////////////////////////////////////////////////////////////
54
static PhysxGroupsMask PhysxGroupsMask::all_off(void);

1998 9 get_bits0 0 4 3035 26 PhysxGroupsMask::get_bits0 0 1 526 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits0
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline unsigned int PhysxGroupsMask::get_bits0(void) const;

1999 9 get_bits1 0 4 3035 26 PhysxGroupsMask::get_bits1 0 1 527 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits1
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline unsigned int PhysxGroupsMask::get_bits1(void) const;

2000 9 get_bits2 0 4 3035 26 PhysxGroupsMask::get_bits2 0 1 528 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits2
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline unsigned int PhysxGroupsMask::get_bits2(void) const;

2001 9 get_bits3 0 4 3035 26 PhysxGroupsMask::get_bits3 0 1 529 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits3
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline unsigned int PhysxGroupsMask::get_bits3(void) const;

2002 9 set_bits0 0 4 3035 26 PhysxGroupsMask::set_bits0 0 1 530 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits0
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void PhysxGroupsMask::set_bits0(unsigned int bits);

2003 9 set_bits1 0 4 3035 26 PhysxGroupsMask::set_bits1 0 1 531 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits1
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void PhysxGroupsMask::set_bits1(unsigned int bits);

2004 9 set_bits2 0 4 3035 26 PhysxGroupsMask::set_bits2 0 1 532 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits2
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void PhysxGroupsMask::set_bits2(unsigned int bits);

2005 9 set_bits3 0 4 3035 26 PhysxGroupsMask::set_bits3 0 1 533 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits3
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void PhysxGroupsMask::set_bits3(unsigned int bits);

2006 21 upcast_to_PhysxObject 0 12 3036 33 PhysxScene::upcast_to_PhysxObject 0 1 644 37
upcast from PhysxScene to PhysxObject
53
PhysxObject *PhysxScene::upcast_to_PhysxObject(void);

2007 22 downcast_to_PhysxScene 0 12 2993 35 PhysxObject::downcast_to_PhysxScene 0 1 645 39
downcast from PhysxObject to PhysxScene
54
PhysxScene *PhysxObject::downcast_to_PhysxScene(void);

2008 20 upcast_to_PhysxEnums 0 12 3036 32 PhysxScene::upcast_to_PhysxEnums 0 1 646 36
upcast from PhysxScene to PhysxEnums
51
PhysxEnums *PhysxScene::upcast_to_PhysxEnums(void);

2009 22 downcast_to_PhysxScene 0 12 2962 34 PhysxEnums::downcast_to_PhysxScene 0 1 647 38
downcast from PhysxEnums to PhysxScene
53
PhysxScene *PhysxEnums::downcast_to_PhysxScene(void);

2010 10 PhysxScene 0 4 3036 22 PhysxScene::PhysxScene 0 1 534 708
// Filename: physxScene.I
// Created by:  enn0x (14Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
inline PhysxScene::PhysxScene(void);

2011 11 ~PhysxScene 0 4 3036 23 PhysxScene::~PhysxScene 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
virtual inline PhysxScene::~PhysxScene(void);

2012 8 simulate 0 4 3036 20 PhysxScene::simulate 0 1 535 633
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::simulate
//       Access: Published
//  Description: Advances the simulation by an elapsedTime time.
//               The elapsed time has to be in the range (0, inf).
//
//               It is not allowed to modify the physics scene in
//               between the simulate(dt) and the fetch_results
//               calls!  But it is allowed to read from the scene
//               and do additional computations, e. g. AI, in
//               between these calls.
////////////////////////////////////////////////////////////////////
36
void PhysxScene::simulate(float dt);

2013 13 fetch_results 0 4 3036 25 PhysxScene::fetch_results 0 1 536 661
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::fetch_results
//       Access: Published
//  Description: Waits until the simulation has finished, and then
//               updates the scene graph with with simulation
//               results.
//
//               It is not allowed to modify the physics scene in
//               between the simulate(dt) and the fetch_results
//               calls!  But it is allowed to read from the scene
//               and do additional computations, e. g. AI, in
//               between these calls.
////////////////////////////////////////////////////////////////////
37
void PhysxScene::fetch_results(void);

2014 19 set_timing_variable 0 4 3036 31 PhysxScene::set_timing_variable 0 1 537 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_variable
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
////////////////////////////////////////////////////////////////////
43
void PhysxScene::set_timing_variable(void);

2015 16 set_timing_fixed 0 4 3036 28 PhysxScene::set_timing_fixed 0 3 538 539 540 988
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_fixed
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
//               The elapsed time (parameter "dt" in simulate()) is
//               internally subdivided into up to maxIter substeps
//               no larger than maxTimestep. If the elapsed time is
//               not a multiple of maxTimestep then any remaining
//               time is accumulated to be added onto the elapsed
//               time for the next time step. If more sub steps than
//               maxIter are needed to advance the simulation by
//               elapsed time, then the remaining time is also
//               accumulated for the next call to simulate().
//
//               This timing method is strongly preferred for
//               stable, reproducible simulation.
////////////////////////////////////////////////////////////////////
94
void PhysxScene::set_timing_fixed(float maxTimestep = ((1 / 60)), unsigned int maxIter = (8));

2016 19 get_debug_geom_node 0 4 3036 31 PhysxScene::get_debug_geom_node 0 1 541 741
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_debug_node
//       Access: Published
//  Description: Retrieves the debug geom node for this scene. The
//               debug geom node is used to visualize information
//               about the physical scene which can be useful for
//               debugging an application.
//
//               The debug geom node geometry is generated in global
//               coordinates. In order to see correct information
//               it is important not to dislocate the debug node.
//               Reparent it to render and leave position at
//               (0,0,0).
////////////////////////////////////////////////////////////////////
58
PhysxDebugGeomNode *PhysxScene::get_debug_geom_node(void);

2017 24 enable_contact_reporting 0 4 3036 36 PhysxScene::enable_contact_reporting 0 1 542 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_contact_reporting
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void PhysxScene::enable_contact_reporting(bool enabled);

2018 28 is_contact_reporting_enabled 0 4 3036 40 PhysxScene::is_contact_reporting_enabled 0 1 543 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_contact_reporting_enabled
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
bool PhysxScene::is_contact_reporting_enabled(void) const;

2019 24 enable_trigger_reporting 0 4 3036 36 PhysxScene::enable_trigger_reporting 0 1 544 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_trigger_reporting
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void PhysxScene::enable_trigger_reporting(bool enabled);

2020 28 is_trigger_reporting_enabled 0 4 3036 40 PhysxScene::is_trigger_reporting_enabled 0 1 545 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_trigger_reporting_enabled
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
bool PhysxScene::is_trigger_reporting_enabled(void) const;

2021 27 enable_controller_reporting 0 4 3036 39 PhysxScene::enable_controller_reporting 0 1 546 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_controller_reporting
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
void PhysxScene::enable_controller_reporting(bool enabled);

2022 31 is_controller_reporting_enabled 0 4 3036 43 PhysxScene::is_controller_reporting_enabled 0 1 547 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_controller_reporting_enabled
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
bool PhysxScene::is_controller_reporting_enabled(void) const;

2023 11 set_gravity 0 4 3036 23 PhysxScene::set_gravity 0 1 548 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_gravity
//       Access: Published
//  Description: Sets a constant gravity for the entire scene.
////////////////////////////////////////////////////////////////////
55
void PhysxScene::set_gravity(LVector3f const &gravity);

2024 11 get_gravity 0 4 3036 23 PhysxScene::get_gravity 0 1 549 261
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_gravity
//       Access: Published
//  Description: Retrieves the current gravity setting.
////////////////////////////////////////////////////////////////////
46
LVector3f PhysxScene::get_gravity(void) const;

2025 10 get_stats2 0 4 3036 22 PhysxScene::get_stats2 0 1 550 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_stats2
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
PhysxSceneStats2 PhysxScene::get_stats2(void) const;

2026 8 get_flag 0 4 3036 20 PhysxScene::get_flag 0 1 551 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_flag
//       Access: Published
//  Description: Return the specified scene flag flag.
////////////////////////////////////////////////////////////////////
65
bool PhysxScene::get_flag(PhysxEnums::PhysxSceneFlag flag) const;

2027 17 is_hardware_scene 0 4 3036 29 PhysxScene::is_hardware_scene 0 1 552 363
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_hardware_scene
//       Access: Published
//  Description: Returns TRUE if the the scene is simulated in
//               hardware. FALSE if the scene is simulated in
//               software.
////////////////////////////////////////////////////////////////////
47
bool PhysxScene::is_hardware_scene(void) const;

2028 14 get_num_actors 0 4 3036 26 PhysxScene::get_num_actors 0 1 553 237
// Actors

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_actors
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
unsigned int PhysxScene::get_num_actors(void) const;

2029 12 create_actor 0 4 3036 24 PhysxScene::create_actor 0 1 554 234
// Actors

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_actor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
PhysxActor *PhysxScene::create_actor(PhysxActorDesc &desc);

2030 9 get_actor 0 4 3036 21 PhysxScene::get_actor 0 1 555 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
PhysxActor *PhysxScene::get_actor(unsigned int idx) const;

2031 14 get_num_joints 0 4 3036 26 PhysxScene::get_num_joints 0 1 556 377
// Joints

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_joints
//       Access: Published
//  Description: Returns the number of joints in the scene
//               (excluding "dead" joints). Note that this includes
//               compartments.
////////////////////////////////////////////////////////////////////
52
unsigned int PhysxScene::get_num_joints(void) const;

2032 12 create_joint 0 4 3036 24 PhysxScene::create_joint 0 1 557 265
// Joints

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_joint
//       Access: Published
//  Description: Creates a joint in this scene.
////////////////////////////////////////////////////////////////////
59
PhysxJoint *PhysxScene::create_joint(PhysxJointDesc &desc);

2033 9 get_joint 0 4 3036 21 PhysxScene::get_joint 0 1 558 308
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_joint
//       Access: Published
//  Description: Retrieve the n-th joint from the array of all the
//               joints in the scene.
////////////////////////////////////////////////////////////////////
58
PhysxJoint *PhysxScene::get_joint(unsigned int idx) const;

2034 17 get_num_materials 0 4 3036 29 PhysxScene::get_num_materials 0 1 559 641
// Materials

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_materials
//       Access: Published
//  Description: Return the number of materials in the scene. 
//
//               Note that the returned value is not related to
//               material indices. Those may not be allocated
//               continuously, and its values may be higher than
//               get_num_materials(). This will also include the
//               default material which exists without having to
//               be created.
////////////////////////////////////////////////////////////////////
55
unsigned int PhysxScene::get_num_materials(void) const;

2035 27 get_hightest_material_index 0 4 3036 39 PhysxScene::get_hightest_material_index 0 1 560 454
// Materials

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_hightest_material_index
//       Access: Published
//  Description: Returns current highest valid material index.
//
//               Note that not all indices below this are valid if
//               some of them belong to meshes that have beed
//               freed.
////////////////////////////////////////////////////////////////////
65
unsigned int PhysxScene::get_hightest_material_index(void) const;

2036 15 create_material 0 4 3036 27 PhysxScene::create_material 0 2 561 562 898
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_material
//       Access: Published
//  Description: Creates a new PhysxMaterial.
//
//               The material library consists of an array of
//               material objects. Each material has a well defined
//               index that can be used to refer to it. If an object
//               references an undefined material, the default
//               material with index 0 is used instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_material
//       Access: Published
//  Description: Creates a new PhysxMaterial using the default
//               settings of PhysxMaterialDesc.
////////////////////////////////////////////////////////////////////
118
PhysxMaterial *PhysxScene::create_material(PhysxMaterialDesc &desc);
PhysxMaterial *PhysxScene::create_material(void);

2037 12 get_material 0 4 3036 24 PhysxScene::get_material 0 1 563 399
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_material
//       Access: Published
//  Description: Retrieves the n-th material from the array of
//               materials. See also get_material_from_index,
//               which retrieves a material by it's material index.
////////////////////////////////////////////////////////////////////
64
PhysxMaterial *PhysxScene::get_material(unsigned int idx) const;

2038 23 get_material_from_index 0 4 3036 35 PhysxScene::get_material_from_index 0 1 564 699
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_material_from_index
//       Access: Published
//  Description: Retrieves the material with the given material
//               index. 
//
//               There is always at least one material in the Scene,
//               the default material (index 0). If the specified
//               material index is out of range (larger than
//               get_hightest_material_index) or belongs to a
//               material that has been released, then the default
//               material is returned, but no error is reported.
////////////////////////////////////////////////////////////////////
75
PhysxMaterial *PhysxScene::get_material_from_index(unsigned int idx) const;

2039 19 get_num_controllers 0 4 3036 31 PhysxScene::get_num_controllers 0 1 565 294
// Controllers

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_controllers
//       Access: Published
//  Description: Return the number of controllers in the scene. 
////////////////////////////////////////////////////////////////////
57
unsigned int PhysxScene::get_num_controllers(void) const;

2040 17 create_controller 0 4 3036 29 PhysxScene::create_controller 0 1 566 280
// Controllers

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_controller
//       Access: Published
//  Description: Creates a new character controller.
////////////////////////////////////////////////////////////////////
84
PhysxController *PhysxScene::create_controller(PhysxControllerDesc &controllerDesc);

2041 14 get_controller 0 4 3036 26 PhysxScene::get_controller 0 1 567 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_controller
//       Access: Published
//  Description: Retrieves the n-th controller within the scene.
////////////////////////////////////////////////////////////////////
68
PhysxController *PhysxScene::get_controller(unsigned int idx) const;

2042 20 get_num_force_fields 0 4 3036 32 PhysxScene::get_num_force_fields 0 1 568 294
// Force fields

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_force_fields
//       Access: Published
//  Description: Gets the number of force fields in the scene.
////////////////////////////////////////////////////////////////////
58
unsigned int PhysxScene::get_num_force_fields(void) const;

2043 18 create_force_field 0 4 3036 30 PhysxScene::create_force_field 0 1 569 283
// Force fields

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_force_field
//       Access: Published
//  Description: Creates a force field in this scene.
////////////////////////////////////////////////////////////////////
75
PhysxForceField *PhysxScene::create_force_field(PhysxForceFieldDesc &desc);

2044 15 get_force_field 0 4 3036 27 PhysxScene::get_force_field 0 1 570 325
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_force_field
//       Access: Published
//  Description: Returns the n-th force field from the array of
//               all the force fields in the scene.
////////////////////////////////////////////////////////////////////
69
PhysxForceField *PhysxScene::get_force_field(unsigned int idx) const;

2045 32 get_num_force_field_shape_groups 0 4 3036 44 PhysxScene::get_num_force_field_shape_groups 0 1 571 347
// Force field shape groups

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_force_field_shape_groups
//       Access: Published
//  Description: Gets the number of force field shape groups in
//               the scene.
////////////////////////////////////////////////////////////////////
70
unsigned int PhysxScene::get_num_force_field_shape_groups(void) const;

2046 30 create_force_field_shape_group 0 4 3036 42 PhysxScene::create_force_field_shape_group 0 1 572 340
// Force field shape groups

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_force_field_shape_group
//       Access: Published
//  Description: Creates a new force field shape group in this
//               scene.
////////////////////////////////////////////////////////////////////
107
PhysxForceFieldShapeGroup *PhysxScene::create_force_field_shape_group(PhysxForceFieldShapeGroupDesc &desc);

2047 27 get_force_field_shape_group 0 4 3036 39 PhysxScene::get_force_field_shape_group 0 1 573 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_force_field_shape_group
//       Access: Published
//  Description: Returns the n-th force field shape group in this
//               scene
////////////////////////////////////////////////////////////////////
91
PhysxForceFieldShapeGroup *PhysxScene::get_force_field_shape_group(unsigned int idx) const;

2048 14 get_num_cloths 0 4 3036 26 PhysxScene::get_num_cloths 0 1 574 276
// Cloths

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_cloths
//       Access: Published
//  Description: Gets the number of cloths in the scene.
////////////////////////////////////////////////////////////////////
52
unsigned int PhysxScene::get_num_cloths(void) const;

2049 12 create_cloth 0 4 3036 24 PhysxScene::create_cloth 0 1 575 265
// Cloths

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_cloth
//       Access: Published
//  Description: Creates a cloth in this scene.
////////////////////////////////////////////////////////////////////
59
PhysxCloth *PhysxScene::create_cloth(PhysxClothDesc &desc);

2050 9 get_cloth 0 4 3036 21 PhysxScene::get_cloth 0 1 576 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_cloth
//       Access: Published
//  Description: Returns the n-th cloth from the array of
//               all the cloths in the scene.
////////////////////////////////////////////////////////////////////
58
PhysxCloth *PhysxScene::get_cloth(unsigned int idx) const;

2051 19 get_num_soft_bodies 0 4 3036 31 PhysxScene::get_num_soft_bodies 0 1 577 291
// Soft bodies

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_soft_bodies
//       Access: Published
//  Description: Gets the number of soft bodies in the scene.
////////////////////////////////////////////////////////////////////
57
unsigned int PhysxScene::get_num_soft_bodies(void) const;

2052 16 create_soft_body 0 4 3036 28 PhysxScene::create_soft_body 0 1 578 278
// Soft bodies

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_soft_body
//       Access: Published
//  Description: Creates a soft body in this scene.
////////////////////////////////////////////////////////////////////
69
PhysxSoftBody *PhysxScene::create_soft_body(PhysxSoftBodyDesc &desc);

2053 13 get_soft_body 0 4 3036 25 PhysxScene::get_soft_body 0 1 579 320
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_soft_body
//       Access: Published
//  Description: Returns the n-th soft body from the array of
//               all the soft bodies in the scene.
////////////////////////////////////////////////////////////////////
65
PhysxSoftBody *PhysxScene::get_soft_body(unsigned int idx) const;

2054 16 get_num_vehicles 0 4 3036 28 PhysxScene::get_num_vehicles 0 1 580 285
// Vehicles

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_vehicles
//       Access: Published
//  Description: Returns the number of vehicles in the scene.
////////////////////////////////////////////////////////////////////
54
unsigned int PhysxScene::get_num_vehicles(void) const;

2055 14 create_vehicle 0 4 3036 26 PhysxScene::create_vehicle 0 1 581 271
// Vehicles

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_vehicle
//       Access: Published
//  Description: Creates a vehicle in this scene.
////////////////////////////////////////////////////////////////////
65
PhysxVehicle *PhysxScene::create_vehicle(PhysxVehicleDesc &desc);

2056 11 get_vehicle 0 4 3036 23 PhysxScene::get_vehicle 0 1 582 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_vehicle
//       Access: Published
//  Description: Returns the n-th vehicle from the array of all
//               the vehicles in the scene.
////////////////////////////////////////////////////////////////////
62
PhysxVehicle *PhysxScene::get_vehicle(unsigned int idx) const;

2057 17 raycast_any_shape 0 4 3036 29 PhysxScene::raycast_any_shape 0 4 583 584 585 586 318
// Raycast queries

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_shape
//       Access: Published
//  Description: Returns true if any shape is intersected by the
//               ray.
////////////////////////////////////////////////////////////////////
185
bool PhysxScene::raycast_any_shape(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0))) const;

2058 21 raycast_closest_shape 0 4 3036 33 PhysxScene::raycast_closest_shape 0 5 587 588 589 590 591 397
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
////////////////////////////////////////////////////////////////////
225
PhysxRaycastHit PhysxScene::raycast_closest_shape(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0)), bool smoothNormal = (1)) const;

2059 18 raycast_all_shapes 0 4 3036 30 PhysxScene::raycast_all_shapes 0 5 592 593 594 595 596 375
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
////////////////////////////////////////////////////////////////////
225
PhysxRaycastReport PhysxScene::raycast_all_shapes(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0)), bool smoothNormal = (1)) const;

2060 18 raycast_any_bounds 0 4 3036 30 PhysxScene::raycast_any_bounds 0 4 597 598 599 600 337
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_bounds
//       Access: Published
//  Description: Returns true if any axis aligned bounding box
//               enclosing a shape is intersected by the ray.
////////////////////////////////////////////////////////////////////
186
bool PhysxScene::raycast_any_bounds(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0))) const;

2061 22 raycast_closest_bounds 0 4 3036 34 PhysxScene::raycast_closest_bounds 0 5 601 602 603 604 605 453
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
////////////////////////////////////////////////////////////////////
226
PhysxRaycastHit PhysxScene::raycast_closest_bounds(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0)), bool smoothNormal = (1)) const;

2062 18 raycast_all_bounds 0 4 3036 30 PhysxScene::raycast_all_bounds 0 5 606 607 608 609 610 432
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
////////////////////////////////////////////////////////////////////
225
PhysxRaycastReport PhysxScene::raycast_all_bounds(PhysxRay const &ray, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), PhysxGroupsMask *groups = ((void *)(0)), bool smoothNormal = (1)) const;

2063 21 overlap_sphere_shapes 0 4 3036 33 PhysxScene::overlap_sphere_shapes 0 4 611 612 613 614 445
// Overlap queries

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_sphere_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space sphere. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
////////////////////////////////////////////////////////////////////
209
PhysxOverlapReport PhysxScene::overlap_sphere_shapes(LPoint3f const &center, float radius, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), bool accurateCollision = (1)) const;

2064 22 overlap_capsule_shapes 0 4 3036 34 PhysxScene::overlap_capsule_shapes 0 4 615 616 617 618 427
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_capsule_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space capsule. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
////////////////////////////////////////////////////////////////////
226
PhysxOverlapReport PhysxScene::overlap_capsule_shapes(LPoint3f const &p0, LPoint3f const &p1, float radius, PhysxEnums::PhysxShapesType shapesType = (ST_all), PhysxMask mask = ((all_on())), bool accurateCollision = (1)) const;

2065 19 set_actor_pair_flag 0 4 3036 31 PhysxScene::set_actor_pair_flag 0 1 619 768
// Filters

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_actor_pair_flag
//       Access: Published
//  Description: Sets the pair flags for the given pair of actors. 
//
//               Calling this on an actor that has no shape(s) has
//               no effect. The two actor references must not
//               reference the same actor.
//
//               It is important to note that the engine stores
//               pair flags per shape, even for actor pair flags.
//               This means that shapes should be created before
//               actor pair flags are set, otherwise the pair flags
//               will be ignored.
////////////////////////////////////////////////////////////////////
128
void PhysxScene::set_actor_pair_flag(PhysxActor &actorA, PhysxActor &actorB, PhysxEnums::PhysxContactPairFlag flag, bool value);

2066 19 set_shape_pair_flag 0 4 3036 31 PhysxScene::set_shape_pair_flag 0 1 620 417
// Filters

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_shape_pair_flag
//       Access: Published
//  Description: Disables or enables contact generation for a pair
//               of shapes.
//
//               The two shape references must not reference the
//               same shape.
////////////////////////////////////////////////////////////////////
89
void PhysxScene::set_shape_pair_flag(PhysxShape &shapeA, PhysxShape &shapeB, bool value);

2067 25 set_actor_group_pair_flag 0 4 3036 37 PhysxScene::set_actor_group_pair_flag 0 1 621 1229
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_actor_group_pair_flag
//       Access: Published
//  Description: With this method one can set contact reporting
//               flags between actors belonging to a pair of groups. 
//
//               It is possible to assign each actor to a group
//               using PhysxActor::set_group(). This is a different
//               set of groups from the shape groups despite the
//               similar name. Here up to 0xffff different groups
//               are permitted, With this method one can set
//               contact reporting flags between actors belonging
//               to a pair of groups.
//
//               The following flags are permitted:
//               - CPF_start_touch
//               - CPF_end_touch
//               - CPF_touch
//               - CPF_start_touch_treshold
//               - CPF_end_touch_treshold
//               - CPF_touch_treshold
//
//               Note that finer grain control of pairwise flags is
//               possible using the function
//               PhysxScene::set_actor_pair_flags().
////////////////////////////////////////////////////////////////////
128
void PhysxScene::set_actor_group_pair_flag(unsigned int g1, unsigned int g2, PhysxEnums::PhysxContactPairFlag flag, bool value);

2068 24 set_group_collision_flag 0 4 3036 36 PhysxScene::set_group_collision_flag 0 1 622 792
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_group_collision_flag
//       Access: Published
//  Description: Specifies if collision should be performed by a
//               pair of shape groups. 
//
//               It is possible to assign each shape to a collision
//               groups using PhysxShape::set_group(). With this
//               method one can set whether collisions should be
//               detected between shapes belonging to a given pair
//               of groups. Initially all pairs are enabled.
//
//               Fluids can be assigned to collision groups as well.
//
//               Collision groups are integers between 0 and 31.
////////////////////////////////////////////////////////////////////
89
void PhysxScene::set_group_collision_flag(unsigned int g1, unsigned int g2, bool enable);

2069 14 set_filter_ops 0 4 3036 26 PhysxScene::set_filter_ops 0 1 623 254
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_ops
//       Access: Published
//  Description: Setups filtering operations.
////////////////////////////////////////////////////////////////////
125
void PhysxScene::set_filter_ops(PhysxEnums::PhysxFilterOp op0, PhysxEnums::PhysxFilterOp op1, PhysxEnums::PhysxFilterOp op2);

2070 15 set_filter_bool 0 4 3036 27 PhysxScene::set_filter_bool 0 1 624 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_bool
//       Access: Published
//  Description: Setups filtering's boolean value.
////////////////////////////////////////////////////////////////////
44
void PhysxScene::set_filter_bool(bool flag);

2071 20 set_filter_constant0 0 4 3036 32 PhysxScene::set_filter_constant0 0 1 625 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_constant0
//       Access: Published
//  Description: Setups filtering's K0 value.
////////////////////////////////////////////////////////////////////
67
void PhysxScene::set_filter_constant0(PhysxGroupsMask const &mask);

2072 20 set_filter_constant1 0 4 3036 32 PhysxScene::set_filter_constant1 0 1 626 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_constant1
//       Access: Published
//  Description: Setups filtering's K1 value.
////////////////////////////////////////////////////////////////////
67
void PhysxScene::set_filter_constant1(PhysxGroupsMask const &mask);

2073 24 set_dominance_group_pair 0 4 3036 36 PhysxScene::set_dominance_group_pair 0 1 627 2752
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_dominance_group_pair
//       Access: Published
//  Description: Specifies the dominance behavior of constraints 
//               between two actors with two certain dominance
//               groups. 
//
//               It is possible to assign each actor to a dominance
//               groups using PhysxActor::set_dominance_group().
//
//               With dominance groups one can have all constraints
//               (contacts and joints) created between actors act in
//               one direction only. This is useful if you want to
//               make sure that the movement of the rider of a
//               vehicle or the pony tail of a character doesn't
//               influence the object it is attached to, while
//               keeping the motion of both inherently physical.
//
//               Whenever a constraint (i.e. joint or contact)
//               between two actors (a0, a1) needs to be solved, the
//               groups (g0, g1) of both actors are retrieved. Then
//               the constraint dominance setting for this group
//               pair is retrieved.
//
//               In the constraint, PhysxConstraintDominance::get_0()
//               becomes the dominance setting for a0, and
//               PhysxConstraintDominance::get_1() becomes the
//               dominance setting for a1. A dominance setting of
//               1.0f, the default, will permit the actor to be
//               pushed or pulled by the other actor. A dominance
//               setting of 0.0f will however prevent the actor to
//               be pushed or pulled by the other actor. Thus, a
//               PhysxConstraintDominance of (1.0f, 0.0f) makes the
//               interaction one-way.
//
//               The dominance matrix is initialised by default such
//               that:
//               - if g1 == g2, then (1.0f, 1.0f) is returned
//               - if g1 < g2, then (0.0f, 1.0f) is returned
//               - if g1 > g2, then (1.0f, 0.0f) is returned
//
//               In other words, actors in higher groups can be
//               pushed around by actors in lower groups by default.
//
//               These settings should cover most applications, and
//               in fact not overriding these settings may likely
//               result in higher performance.
//
//               Dominance settings are currently specified as
//               floats 0.0f or 1.0f because in the future PhysX may
//               permit arbitrary fractional settings to express
//               'partly-one-way' interactions.
////////////////////////////////////////////////////////////////////
112
void PhysxScene::set_dominance_group_pair(unsigned int g1, unsigned int g2, PhysxConstraintDominance dominance);

2074 19 get_actor_pair_flag 0 4 3036 31 PhysxScene::get_actor_pair_flag 0 1 628 399
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor_pair_flag
//       Access: Published
//  Description: Retrieves a single flag for the given pair of
//               actors.
// 
//               The two actor references must not reference the
//               same actor.
////////////////////////////////////////////////////////////////////
116
bool PhysxScene::get_actor_pair_flag(PhysxActor &actorA, PhysxActor &actorB, PhysxEnums::PhysxContactPairFlag flag);

2075 19 get_shape_pair_flag 0 4 3036 31 PhysxScene::get_shape_pair_flag 0 1 629 482
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_shape_pair_flag
//       Access: Published
//  Description: Returns /true/ if contact generation between a pair
//               of shapes is enabled, and /false/ if contact
//               generation is disables.
//
//               The two shape references must not reference the
//               same shape.
////////////////////////////////////////////////////////////////////
77
bool PhysxScene::get_shape_pair_flag(PhysxShape &shapeA, PhysxShape &shapeB);

2076 25 get_actor_group_pair_flag 0 4 3036 37 PhysxScene::get_actor_group_pair_flag 0 1 630 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor_group_pair_flag
//       Access: Published
//  Description: Retrieves a single flag set with
//               PhysxScene::set_actor_group_pair_flag()
////////////////////////////////////////////////////////////////////
116
bool PhysxScene::get_actor_group_pair_flag(unsigned int g1, unsigned int g2, PhysxEnums::PhysxContactPairFlag flag);

2077 24 get_group_collision_flag 0 4 3036 36 PhysxScene::get_group_collision_flag 0 1 631 390
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_group_collision_flag
//       Access: Published
//  Description: Determines if collision detection is performed
//               between a pair of groups. Collision groups are
//               integers between 0 and 31.
////////////////////////////////////////////////////////////////////
76
bool PhysxScene::get_group_collision_flag(unsigned int g1, unsigned int g2);

2078 15 get_filter_bool 0 4 3036 27 PhysxScene::get_filter_bool 0 1 632 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_bool
//       Access: Published
//  Description: Retrieves filtering's boolean value.
////////////////////////////////////////////////////////////////////
45
bool PhysxScene::get_filter_bool(void) const;

2079 20 get_filter_constant0 0 4 3036 32 PhysxScene::get_filter_constant0 0 1 633 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_constant0
//       Access: Published
//  Description: Gets filtering constant K0.
////////////////////////////////////////////////////////////////////
61
PhysxGroupsMask PhysxScene::get_filter_constant0(void) const;

2080 20 get_filter_constant1 0 4 3036 32 PhysxScene::get_filter_constant1 0 1 634 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_constant1
//       Access: Published
//  Description: Gets filtering constant K1.
////////////////////////////////////////////////////////////////////
61
PhysxGroupsMask PhysxScene::get_filter_constant1(void) const;

2081 14 get_filter_op0 0 4 3036 26 PhysxScene::get_filter_op0 0 1 635 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op0
//       Access: Published
//  Description: Retrieves the op0 filtering operation.
////////////////////////////////////////////////////////////////////
65
PhysxEnums::PhysxFilterOp PhysxScene::get_filter_op0(void) const;

2082 14 get_filter_op1 0 4 3036 26 PhysxScene::get_filter_op1 0 1 636 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op1
//       Access: Published
//  Description: Retrieves the op1 filtering operation.
////////////////////////////////////////////////////////////////////
65
PhysxEnums::PhysxFilterOp PhysxScene::get_filter_op1(void) const;

2083 14 get_filter_op2 0 4 3036 26 PhysxScene::get_filter_op2 0 1 637 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op2
//       Access: Published
//  Description: Retrieves the op2 filtering operation.
////////////////////////////////////////////////////////////////////
65
PhysxEnums::PhysxFilterOp PhysxScene::get_filter_op2(void) const;

2084 24 get_dominance_group_pair 0 4 3036 36 PhysxScene::get_dominance_group_pair 0 1 638 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_dominance_group_pair
//       Access: Published
//  Description: Samples the dominance matrix.
////////////////////////////////////////////////////////////////////
96
PhysxConstraintDominance PhysxScene::get_dominance_group_pair(unsigned int g1, unsigned int g2);

2085 7 release 0 4 3036 19 PhysxScene::release 0 1 639 289
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
void PhysxScene::release(void);

2086 2 ls 0 4 3036 14 PhysxScene::ls 0 3 640 641 642 430
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
127
virtual inline void PhysxScene::ls(void) const;
virtual inline void PhysxScene::ls(ostream &out, int indent_level = (0)) const;

2087 14 get_class_type 0 4 3036 26 PhysxScene::get_class_type 0 1 643 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxScene::get_class_type(void);

2088 21 upcast_to_PhysxObject 0 12 3037 36 PhysxSoftBody::upcast_to_PhysxObject 0 1 694 40
upcast from PhysxSoftBody to PhysxObject
56
PhysxObject *PhysxSoftBody::upcast_to_PhysxObject(void);

2089 25 downcast_to_PhysxSoftBody 0 12 2993 38 PhysxObject::downcast_to_PhysxSoftBody 0 1 695 42
downcast from PhysxObject to PhysxSoftBody
60
PhysxSoftBody *PhysxObject::downcast_to_PhysxSoftBody(void);

2090 20 upcast_to_PhysxEnums 0 12 3037 35 PhysxSoftBody::upcast_to_PhysxEnums 0 1 696 39
upcast from PhysxSoftBody to PhysxEnums
54
PhysxEnums *PhysxSoftBody::upcast_to_PhysxEnums(void);

2091 25 downcast_to_PhysxSoftBody 0 12 2962 37 PhysxEnums::downcast_to_PhysxSoftBody 0 1 697 41
downcast from PhysxEnums to PhysxSoftBody
59
PhysxSoftBody *PhysxEnums::downcast_to_PhysxSoftBody(void);

2092 13 PhysxSoftBody 0 4 3037 28 PhysxSoftBody::PhysxSoftBody 0 1 648 714
// Filename: physxSoftBody.I
// Created by:  enn0x (13Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline PhysxSoftBody::PhysxSoftBody(void);

2093 14 ~PhysxSoftBody 0 4 3037 29 PhysxSoftBody::~PhysxSoftBody 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual inline PhysxSoftBody::~PhysxSoftBody(void);

2094 9 get_scene 0 4 3037 24 PhysxSoftBody::get_scene 0 1 649 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_scene
//       Access: Published
//  Description: Returns the scene which this soft body belongs to.
////////////////////////////////////////////////////////////////////
49
PhysxScene *PhysxSoftBody::get_scene(void) const;

2095 18 get_soft_body_node 0 4 3037 33 PhysxSoftBody::get_soft_body_node 0 1 650 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_soft_body_node
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
PhysxSoftBodyNode *PhysxSoftBody::get_soft_body_node(void) const;

2096 21 create_soft_body_node 0 4 3037 36 PhysxSoftBody::create_soft_body_node 0 1 651 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::create_soft_body_node
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
PhysxSoftBodyNode *PhysxSoftBody::create_soft_body_node(char const *name);

2097 8 set_name 0 4 3037 23 PhysxSoftBody::set_name 0 1 652 400
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
////////////////////////////////////////////////////////////////////
47
void PhysxSoftBody::set_name(char const *name);

2098 8 set_flag 0 4 3037 23 PhysxSoftBody::set_flag 0 1 653 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
////////////////////////////////////////////////////////////////////
77
void PhysxSoftBody::set_flag(PhysxEnums::PhysxSoftBodyFlag flag, bool value);

2099 15 set_groups_mask 0 4 3037 30 PhysxSoftBody::set_groups_mask 0 1 654 277
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
////////////////////////////////////////////////////////////////////
65
void PhysxSoftBody::set_groups_mask(PhysxGroupsMask const &mask);

2100 9 set_group 0 4 3037 24 PhysxSoftBody::set_group 0 1 655 336
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_group
//       Access: Published
//  Description: Sets which collision group this soft body is part
//               of. Collision group must be between 0 and 31.
////////////////////////////////////////////////////////////////////
50
void PhysxSoftBody::set_group(unsigned int group);

2101 21 set_solver_iterations 0 4 3037 36 PhysxSoftBody::set_solver_iterations 0 1 656 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_solver_iterations
//       Access: Published
//  Description: Sets the soft body solver iterations.
////////////////////////////////////////////////////////////////////
67
void PhysxSoftBody::set_solver_iterations(unsigned int iterations);

2102 19 set_particle_radius 0 4 3037 34 PhysxSoftBody::set_particle_radius 0 1 657 306
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_particle_radius
//       Access: Published
//  Description: Sets the soft body particle radius (must be 
//               positive).
////////////////////////////////////////////////////////////////////
54
void PhysxSoftBody::set_particle_radius(float radius);

2103 28 set_self_collision_thickness 0 4 3037 43 PhysxSoftBody::set_self_collision_thickness 0 1 658 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_self_collision_thickness
//       Access: Published
//  Description: Sets the soft body self collision thickness (must
//               be positive).
////////////////////////////////////////////////////////////////////
66
void PhysxSoftBody::set_self_collision_thickness(float thickness);

2104 34 set_hard_stretch_limitation_factor 0 4 3037 49 PhysxSoftBody::set_hard_stretch_limitation_factor 0 1 659 298
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_hard_stretch_limitation_factor
//       Access: Published
//  Description: Sets the soft body hard stretch elongation limit.
////////////////////////////////////////////////////////////////////
69
void PhysxSoftBody::set_hard_stretch_limitation_factor(float factor);

2105 20 set_volume_stiffness 0 4 3037 35 PhysxSoftBody::set_volume_stiffness 0 1 660 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_volume_stiffness
//       Access: Published
//  Description: Sets the soft body volume stiffness in the range
//               from 0 to 1.
////////////////////////////////////////////////////////////////////
58
void PhysxSoftBody::set_volume_stiffness(float stiffness);

2106 24 set_stretching_stiffness 0 4 3037 39 PhysxSoftBody::set_stretching_stiffness 0 1 661 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_stretching_stiffness
//       Access: Published
//  Description: Sets the soft body stretching stiffness in the
//               range from 0 to 1.
////////////////////////////////////////////////////////////////////
62
void PhysxSoftBody::set_stretching_stiffness(float stiffness);

2107 23 set_damping_coefficient 0 4 3037 38 PhysxSoftBody::set_damping_coefficient 0 1 662 309
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_damping_coefficient
//       Access: Published
//  Description: Sets the damping coefficient in the range from 0
//               to 1.
////////////////////////////////////////////////////////////////////
56
void PhysxSoftBody::set_damping_coefficient(float coef);

2108 12 set_friction 0 4 3037 27 PhysxSoftBody::set_friction 0 1 663 309
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_friction
//       Access: Published
//  Description: Sets the soft body friction coefficient in the
//               range from 0 to 1.
////////////////////////////////////////////////////////////////////
49
void PhysxSoftBody::set_friction(float friction);

2109 15 set_tear_factor 0 4 3037 30 PhysxSoftBody::set_tear_factor 0 1 664 304
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_tear_factor
//       Access: Published
//  Description: Sets the soft body tear factor (must be larger
//               than one).
////////////////////////////////////////////////////////////////////
50
void PhysxSoftBody::set_tear_factor(float factor);

2110 26 set_attachment_tear_factor 0 4 3037 41 PhysxSoftBody::set_attachment_tear_factor 0 1 665 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_attachment_tear_factor
//       Access: Published
//  Description: Sets the soft body attachment tear factor (must be
//               larger than one).
////////////////////////////////////////////////////////////////////
61
void PhysxSoftBody::set_attachment_tear_factor(float factor);

2111 8 get_name 0 4 3037 23 PhysxSoftBody::get_name 0 1 666 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_name
//       Access: Published
//  Description: Retrieves the name string.
////////////////////////////////////////////////////////////////////
48
char const *PhysxSoftBody::get_name(void) const;

2112 8 get_flag 0 4 3037 23 PhysxSoftBody::get_flag 0 1 667 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_flag
//       Access: Published
//  Description: Retrieves the value of a single flag.
////////////////////////////////////////////////////////////////////
71
bool PhysxSoftBody::get_flag(PhysxEnums::PhysxSoftBodyFlag flag) const;

2113 15 get_groups_mask 0 4 3037 30 PhysxSoftBody::get_groups_mask 0 1 668 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_groups_mask
//       Access: Published
//  Description: Gets the 128-bit groups mask used for collision
//               filtering.
////////////////////////////////////////////////////////////////////
59
PhysxGroupsMask PhysxSoftBody::get_groups_mask(void) const;

2114 9 get_group 0 4 3037 24 PhysxSoftBody::get_group 0 1 669 297
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_group
//       Access: Published
//  Description: Retrieves the collision group this soft body is
//               part of.
////////////////////////////////////////////////////////////////////
50
unsigned int PhysxSoftBody::get_group(void) const;

2115 17 get_num_particles 0 4 3037 32 PhysxSoftBody::get_num_particles 0 1 670 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_num_particles
//       Access: Published
//  Description: Gets the number of cloth particles.
////////////////////////////////////////////////////////////////////
52
unsigned int PhysxSoftBody::get_num_particles(void);

2116 21 get_solver_iterations 0 4 3037 36 PhysxSoftBody::get_solver_iterations 0 1 671 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_solver_iterations
//       Access: Published
//  Description: Retrieves the soft body solver iterations.
////////////////////////////////////////////////////////////////////
62
unsigned int PhysxSoftBody::get_solver_iterations(void) const;

2117 19 get_particle_radius 0 4 3037 34 PhysxSoftBody::get_particle_radius 0 1 672 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_particle_radius
//       Access: Published
//  Description: Gets the soft body particle radius.
////////////////////////////////////////////////////////////////////
53
float PhysxSoftBody::get_particle_radius(void) const;

2118 11 get_density 0 4 3037 26 PhysxSoftBody::get_density 0 1 673 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_density
//       Access: Published
//  Description: Gets the soft body density.
////////////////////////////////////////////////////////////////////
45
float PhysxSoftBody::get_density(void) const;

2119 25 get_relative_grid_spacing 0 4 3037 40 PhysxSoftBody::get_relative_grid_spacing 0 1 674 599
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_relative_grid_spacing
//       Access: Published
//  Description: Gets the relative grid spacing for the broad
//               phase. The cloth is represented by a set of
//               world aligned cubical cells in broad phase. The
//               size of these cells is determined by multiplying
//               the length of the diagonal of the AABB of the
//               initial soft body size with this constant.
////////////////////////////////////////////////////////////////////
59
float PhysxSoftBody::get_relative_grid_spacing(void) const;

2120 28 get_self_collision_thickness 0 4 3037 43 PhysxSoftBody::get_self_collision_thickness 0 1 675 287
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_self_collision_thickness
//       Access: Published
//  Description: Gets the soft body self collision thickness.
////////////////////////////////////////////////////////////////////
62
float PhysxSoftBody::get_self_collision_thickness(void) const;

2121 34 get_hard_stretch_limitation_factor 0 4 3037 49 PhysxSoftBody::get_hard_stretch_limitation_factor 0 1 676 320
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_hard_stretch_limitation_factor
//       Access: Published
//  Description: Retrieves the soft body hard stretch elongation
//               limit.
////////////////////////////////////////////////////////////////////
68
float PhysxSoftBody::get_hard_stretch_limitation_factor(void) const;

2122 20 get_volume_stiffness 0 4 3037 35 PhysxSoftBody::get_volume_stiffness 0 1 677 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_volume_stiffness
//       Access: Published
//  Description: Retrieves the soft body volume stiffness.
////////////////////////////////////////////////////////////////////
54
float PhysxSoftBody::get_volume_stiffness(void) const;

2123 24 get_stretching_stiffness 0 4 3037 39 PhysxSoftBody::get_stretching_stiffness 0 1 678 284
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_stretching_stiffness
//       Access: Published
//  Description: Retrieves the soft body stretching stiffness.
////////////////////////////////////////////////////////////////////
58
float PhysxSoftBody::get_stretching_stiffness(void) const;

2124 23 get_damping_coefficient 0 4 3037 38 PhysxSoftBody::get_damping_coefficient 0 1 679 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_damping_coefficient
//       Access: Published
//  Description: Retrieves the damping coefficient.
////////////////////////////////////////////////////////////////////
57
float PhysxSoftBody::get_damping_coefficient(void) const;

2125 12 get_friction 0 4 3037 27 PhysxSoftBody::get_friction 0 1 680 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_friction
//       Access: Published
//  Description: Retrieves the soft body friction coefficient.
////////////////////////////////////////////////////////////////////
46
float PhysxSoftBody::get_friction(void) const;

2126 15 get_tear_factor 0 4 3037 30 PhysxSoftBody::get_tear_factor 0 1 681 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_tear_factor
//       Access: Published
//  Description: Retrieves the soft body tear factor.
////////////////////////////////////////////////////////////////////
49
float PhysxSoftBody::get_tear_factor(void) const;

2127 26 get_attachment_tear_factor 0 4 3037 41 PhysxSoftBody::get_attachment_tear_factor 0 1 682 288
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_attachment_tear_factor
//       Access: Published
//  Description: Retrieves the attachment soft body tear factor.
////////////////////////////////////////////////////////////////////
60
float PhysxSoftBody::get_attachment_tear_factor(void) const;

2128 11 is_sleeping 0 4 3037 26 PhysxSoftBody::is_sleeping 0 1 683 746
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::is_sleeping
//       Access: Published
//  Description: Returns true if this soft body is sleeping. 
//
//               When a soft body does not move for a period of
//               time, it is no longer simulated in order to save
//               time. This state is called sleeping. However,
//               because the object automatically wakes up when it
//               is either touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
////////////////////////////////////////////////////////////////////
44
bool PhysxSoftBody::is_sleeping(void) const;

2129 7 wake_up 0 4 3037 22 PhysxSoftBody::wake_up 0 2 684 685 529
// Sleeping

////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::wake_up
//       Access: Published
//  Description: Wakes up the soft body if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxSoftBody::put_to_sleep().
////////////////////////////////////////////////////////////////////
74
void PhysxSoftBody::wake_up(float wakeCounterValue = (NX_SLEEP_INTERVAL));

2130 12 put_to_sleep 0 4 3037 27 PhysxSoftBody::put_to_sleep 0 1 686 568
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::put_to_sleep
//       Access: Published
//  Description: Forces the soft body to sleep. 
//
//               The soft body  will stay asleep until the next
//               call to simulate, and will not wake up until then
//               even when otherwise it would (for example a force
//               is applied to it). It can however wake up during
//               the next do_physics call.
////////////////////////////////////////////////////////////////////
39
void PhysxSoftBody::put_to_sleep(void);

2131 25 set_sleep_linear_velocity 0 4 3037 40 PhysxSoftBody::set_sleep_linear_velocity 0 1 687 577
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an soft body
//               may go to sleep. SoftBodys whose linear velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
////////////////////////////////////////////////////////////////////
63
void PhysxSoftBody::set_sleep_linear_velocity(float threshold);

2132 25 get_sleep_linear_velocity 0 4 3037 40 PhysxSoftBody::get_sleep_linear_velocity 0 1 688 444
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an soft
//               body may go to sleep. Soft bodies whose linear
//               velocity is above this threshold will not be put
//               to sleep.
////////////////////////////////////////////////////////////////////
59
float PhysxSoftBody::get_sleep_linear_velocity(void) const;

2133 2 ls 0 4 3037 17 PhysxSoftBody::ls 0 3 689 690 691 436
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
133
virtual inline void PhysxSoftBody::ls(void) const;
virtual inline void PhysxSoftBody::ls(ostream &out, int indent_level = (0)) const;

2134 7 release 0 4 3037 22 PhysxSoftBody::release 0 1 692 292
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
void PhysxSoftBody::release(void);

2135 14 get_class_type 0 4 3037 29 PhysxSoftBody::get_class_type 0 1 693 68
////////////////////////////////////////////////////////////////////
54
static TypeHandle PhysxSoftBody::get_class_type(void);

2136 19 get_reference_count 0 4 3038 38 PhysxSoftBodyMesh::get_reference_count 0 1 698 284
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
////////////////////////////////////////////////////////////////////
64
unsigned int PhysxSoftBodyMesh::get_reference_count(void) const;

2137 7 release 0 4 3038 26 PhysxSoftBodyMesh::release 0 1 699 296
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMesh::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
void PhysxSoftBodyMesh::release(void);

2138 14 get_class_type 0 4 3038 33 PhysxSoftBodyMesh::get_class_type 0 1 700 68
////////////////////////////////////////////////////////////////////
58
static TypeHandle PhysxSoftBodyMesh::get_class_type(void);

2139 17 PhysxSoftBodyNode 0 4 3039 36 PhysxSoftBodyNode::PhysxSoftBodyNode 0 1 701 722
// Filename: physxSoftBodyNode.I
// Created by:  enn0x (13Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline PhysxSoftBodyNode::PhysxSoftBodyNode(char const *name);

2140 13 set_from_geom 0 4 3039 32 PhysxSoftBodyNode::set_from_geom 0 1 702 522
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyNode::set_from_geom
//       Access: Published
//  Description: Reads the vertices and indices from an existing
//               Geom and makes a decomposed copy of the data.
//               Then computes links between the owning soft body
//               tetrahedron mesh in order to render an updated
//               geometry every simulation frame.
////////////////////////////////////////////////////////////////////
56
void PhysxSoftBodyNode::set_from_geom(Geom const *geom);

2141 14 get_class_type 0 4 3039 33 PhysxSoftBodyNode::get_class_type 0 1 703 68
////////////////////////////////////////////////////////////////////
58
static TypeHandle PhysxSoftBodyNode::get_class_type(void);

2142 26 PhysxSphereForceFieldShape 0 4 3040 54 PhysxSphereForceFieldShape::PhysxSphereForceFieldShape 0 1 704 740
// Filename: physxSphereForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PhysxSphereForceFieldShape::PhysxSphereForceFieldShape(void);

2143 12 save_to_desc 0 4 3040 40 PhysxSphereForceFieldShape::save_to_desc 0 1 705 314
////////////////////////////////////////////////////////////////////
//     Function : PhysxSphereForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
95
void PhysxSphereForceFieldShape::save_to_desc(PhysxSphereForceFieldShapeDesc &shapeDesc) const;

2144 10 set_radius 0 4 3040 38 PhysxSphereForceFieldShape::set_radius 0 1 706 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
////////////////////////////////////////////////////////////////////
58
void PhysxSphereForceFieldShape::set_radius(float radius);

2145 10 get_radius 0 4 3040 38 PhysxSphereForceFieldShape::get_radius 0 1 707 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
////////////////////////////////////////////////////////////////////
57
float PhysxSphereForceFieldShape::get_radius(void) const;

2146 14 get_class_type 0 4 3040 42 PhysxSphereForceFieldShape::get_class_type 0 1 708 68
////////////////////////////////////////////////////////////////////
67
static TypeHandle PhysxSphereForceFieldShape::get_class_type(void);

2147 16 PhysxSphereShape 0 4 3041 34 PhysxSphereShape::PhysxSphereShape 0 1 709 720
// Filename: physxSphereShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PhysxSphereShape::PhysxSphereShape(void);

2148 12 save_to_desc 0 4 3041 30 PhysxSphereShape::save_to_desc 0 1 710 304
////////////////////////////////////////////////////////////////////
//     Function : PhysxSphereShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
75
void PhysxSphereShape::save_to_desc(PhysxSphereShapeDesc &shapeDesc) const;

2149 10 set_radius 0 4 3041 28 PhysxSphereShape::set_radius 0 1 711 252
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
////////////////////////////////////////////////////////////////////
48
void PhysxSphereShape::set_radius(float radius);

2150 10 get_radius 0 4 3041 28 PhysxSphereShape::get_radius 0 1 712 261
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
////////////////////////////////////////////////////////////////////
47
float PhysxSphereShape::get_radius(void) const;

2151 14 get_class_type 0 4 3041 32 PhysxSphereShape::get_class_type 0 1 713 68
////////////////////////////////////////////////////////////////////
57
static TypeHandle PhysxSphereShape::get_class_type(void);

2152 19 PhysxSphericalJoint 0 4 3042 40 PhysxSphericalJoint::PhysxSphericalJoint 0 1 714 726
// Filename: physxSphericalJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxSphericalJoint::PhysxSphericalJoint(void);

2153 12 save_to_desc 0 4 3042 33 PhysxSphericalJoint::save_to_desc 0 1 715 307
////////////////////////////////////////////////////////////////////
//     Function : PhysxSphericalJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
81
void PhysxSphericalJoint::save_to_desc(PhysxSphericalJointDesc &jointDesc) const;

2154 14 load_from_desc 0 4 3042 35 PhysxSphericalJoint::load_from_desc 0 1 716 330
////////////////////////////////////////////////////////////////////
//     Function : PhysxSphericalJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
////////////////////////////////////////////////////////////////////
83
void PhysxSphericalJoint::load_from_desc(PhysxSphericalJointDesc const &jointDesc);

2155 8 set_flag 0 4 3042 29 PhysxSphericalJoint::set_flag 0 1 717 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::set_flag
//       Access: Published
//  Description: Sets or clears a single SphericalJointFlag.
////////////////////////////////////////////////////////////////////
89
void PhysxSphericalJoint::set_flag(PhysxEnums::PhysxSphericalJointFlag flag, bool value);

2156 19 set_projection_mode 0 4 3042 40 PhysxSphericalJoint::set_projection_mode 0 1 718 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::set_projection_mode
//       Access: Published
//  Description: Sets the joint projection mode.
////////////////////////////////////////////////////////////////////
84
void PhysxSphericalJoint::set_projection_mode(PhysxEnums::PhysxProjectionMode mode);

2157 8 get_flag 0 4 3042 29 PhysxSphericalJoint::get_flag 0 1 719 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::get_flag
//       Access: Published
//  Description: Returns the value of a single SphericalJointFlag.
////////////////////////////////////////////////////////////////////
83
bool PhysxSphericalJoint::get_flag(PhysxEnums::PhysxSphericalJointFlag flag) const;

2158 19 get_projection_mode 0 4 3042 40 PhysxSphericalJoint::get_projection_mode 0 1 720 285
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::get_projection_mode
//       Access: Published
//  Description: Returns the current projection mode settings.
////////////////////////////////////////////////////////////////////
85
PhysxEnums::PhysxProjectionMode PhysxSphericalJoint::get_projection_mode(void) const;

2159 14 get_class_type 0 4 3042 35 PhysxSphericalJoint::get_class_type 0 1 721 68
////////////////////////////////////////////////////////////////////
60
static TypeHandle PhysxSphericalJoint::get_class_type(void);

2160 19 get_reference_count 0 4 3043 38 PhysxTriangleMesh::get_reference_count 0 1 722 284
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
////////////////////////////////////////////////////////////////////
64
unsigned int PhysxTriangleMesh::get_reference_count(void) const;

2161 7 release 0 4 3043 26 PhysxTriangleMesh::release 0 1 723 296
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMesh::release
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
void PhysxTriangleMesh::release(void);

2162 14 get_class_type 0 4 3043 33 PhysxTriangleMesh::get_class_type 0 1 724 68
////////////////////////////////////////////////////////////////////
58
static TypeHandle PhysxTriangleMesh::get_class_type(void);

2163 22 PhysxTriangleMeshShape 0 4 3044 46 PhysxTriangleMeshShape::PhysxTriangleMeshShape 0 1 725 732
// Filename: physxTriangleMeshShape.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxTriangleMeshShape::PhysxTriangleMeshShape(void);

2164 12 save_to_desc 0 4 3044 36 PhysxTriangleMeshShape::save_to_desc 0 1 726 310
////////////////////////////////////////////////////////////////////
//     Function : PhysxTriangleMeshShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
87
void PhysxTriangleMeshShape::save_to_desc(PhysxTriangleMeshShapeDesc &shapeDesc) const;

2165 14 get_class_type 0 4 3044 38 PhysxTriangleMeshShape::get_class_type 0 1 727 68
////////////////////////////////////////////////////////////////////
63
static TypeHandle PhysxTriangleMeshShape::get_class_type(void);

2166 12 PhysxVehicle 0 4 3045 26 PhysxVehicle::PhysxVehicle 0 1 728 712
// Filename: physxVehicle.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicle::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline PhysxVehicle::PhysxVehicle(void);

2167 7 release 0 4 3045 21 PhysxVehicle::release 0 1 729 313
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicle::release
//       Access: Published
//  Description: Destroys this vehicle.
////////////////////////////////////////////////////////////////////
33
void PhysxVehicle::release(void);

2168 14 get_class_type 0 4 3045 28 PhysxVehicle::get_class_type 0 1 730 68
////////////////////////////////////////////////////////////////////
53
static TypeHandle PhysxVehicle::get_class_type(void);

2169 10 PhysxWheel 0 4 3046 22 PhysxWheel::PhysxWheel 0 1 731 705
// Filename: physxWheel.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheel::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline PhysxWheel::PhysxWheel(void);

2170 14 get_class_type 0 4 3046 26 PhysxWheel::get_class_type 0 1 732 68
////////////////////////////////////////////////////////////////////
51
static TypeHandle PhysxWheel::get_class_type(void);

2171 15 PhysxWheelShape 0 4 3047 32 PhysxWheelShape::PhysxWheelShape 0 1 733 718
// Filename: physxWheelShape.I
// Created by:  enn0x (09Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline PhysxWheelShape::PhysxWheelShape(void);

2172 12 save_to_desc 0 4 3047 29 PhysxWheelShape::save_to_desc 0 1 734 303
////////////////////////////////////////////////////////////////////
//     Function : PhysxWheelShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
////////////////////////////////////////////////////////////////////
73
void PhysxWheelShape::save_to_desc(PhysxWheelShapeDesc &shapeDesc) const;

2173 10 set_radius 0 4 3047 27 PhysxWheelShape::set_radius 0 1 735 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
////////////////////////////////////////////////////////////////////
47
void PhysxWheelShape::set_radius(float radius);

2174 21 set_suspension_travel 0 4 3047 38 PhysxWheelShape::set_suspension_travel 0 1 736 378
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_suspension_travel
//       Access: Published
//  Description: Set the maximum extension distance of suspension
//               along shape's -Y axis. The minimum extension is
//               always 0.
////////////////////////////////////////////////////////////////////
58
void PhysxWheelShape::set_suspension_travel(float travel);

2175 22 set_inverse_wheel_mass 0 4 3047 39 PhysxWheelShape::set_inverse_wheel_mass 0 1 737 352
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_inverse_wheel_mass
//       Access: Published
//  Description: Set the inverse mass of the wheel. Determines the
//               wheel velocity that wheel torques can achieve.
////////////////////////////////////////////////////////////////////
60
void PhysxWheelShape::set_inverse_wheel_mass(float invMass);

2176 16 set_motor_torque 0 4 3047 33 PhysxWheelShape::set_motor_torque 0 1 738 339
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_motor_torque
//       Access: Published
//  Description: Set the sum engine torque on the wheel axle.
//               Positive or negative depending on direction 
////////////////////////////////////////////////////////////////////
53
void PhysxWheelShape::set_motor_torque(float torque);

2177 16 set_brake_torque 0 4 3047 33 PhysxWheelShape::set_brake_torque 0 1 739 328
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_brake_torque
//       Access: Published
//  Description: Must be nonnegative. Very large values should lock
//               wheel but should be stable.
////////////////////////////////////////////////////////////////////
53
void PhysxWheelShape::set_brake_torque(float torque);

2178 15 set_steer_angle 0 4 3047 32 PhysxWheelShape::set_steer_angle 0 1 740 336
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_steer_angle
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
////////////////////////////////////////////////////////////////////
51
void PhysxWheelShape::set_steer_angle(float angle);

2179 19 set_steer_angle_rad 0 4 3047 36 PhysxWheelShape::set_steer_angle_rad 0 1 741 340
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_steer_angle_rad
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in radians.
////////////////////////////////////////////////////////////////////
55
void PhysxWheelShape::set_steer_angle_rad(float angle);

2180 14 set_axle_speed 0 4 3047 31 PhysxWheelShape::set_axle_speed 0 1 742 377
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_axle_speed
//       Access: Published
//  Description: Set the current axle rotation speed.
//               Note: WSF_axle_speed_override flag must be raised
//               for this to have effect! 
////////////////////////////////////////////////////////////////////
50
void PhysxWheelShape::set_axle_speed(float speed);

2181 14 set_wheel_flag 0 4 3047 31 PhysxWheelShape::set_wheel_flag 0 1 743 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_wheel_flag
//       Access: Published
//  Description: Turns the specified wheel shape flag on or off.
////////////////////////////////////////////////////////////////////
87
void PhysxWheelShape::set_wheel_flag(PhysxEnums::PhysxWheelShapeFlag flag, bool value);

2182 14 set_suspension 0 4 3047 31 PhysxWheelShape::set_suspension 0 1 744 303
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_suspension
//       Access: Published
//  Description: Set the data intended for car wheel suspension
//               effects.
////////////////////////////////////////////////////////////////////
68
void PhysxWheelShape::set_suspension(PhysxSpringDesc const &spring);

2183 10 get_radius 0 4 3047 27 PhysxWheelShape::get_radius 0 1 745 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
////////////////////////////////////////////////////////////////////
46
float PhysxWheelShape::get_radius(void) const;

2184 21 get_suspension_travel 0 4 3047 38 PhysxWheelShape::get_suspension_travel 0 1 746 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_suspension_travel
//       Access: Published
//  Description: Returns the suspension travel
////////////////////////////////////////////////////////////////////
57
float PhysxWheelShape::get_suspension_travel(void) const;

2185 22 get_inverse_wheel_mass 0 4 3047 39 PhysxWheelShape::get_inverse_wheel_mass 0 1 747 356
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_inverse_wheel_mass
//       Access: Published
//  Description: Returns the inverse mass of the wheel. Determines
//               the wheel velocity that wheel torques can achieve.
////////////////////////////////////////////////////////////////////
58
float PhysxWheelShape::get_inverse_wheel_mass(void) const;

2186 16 get_motor_torque 0 4 3047 33 PhysxWheelShape::get_motor_torque 0 1 748 344
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_motor_torque
//       Access: Published
//  Description: Retrieves the sum engine torque on the wheel axle.
//               Positive or negative depending on direction
////////////////////////////////////////////////////////////////////
52
float PhysxWheelShape::get_motor_torque(void) const;

2187 16 get_brake_torque 0 4 3047 33 PhysxWheelShape::get_brake_torque 0 1 749 328
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_brake_torque
//       Access: Published
//  Description: Must be nonnegative. Very large values should lock
//               wheel but should be stable.
////////////////////////////////////////////////////////////////////
52
float PhysxWheelShape::get_brake_torque(void) const;

2188 15 get_steer_angle 0 4 3047 32 PhysxWheelShape::get_steer_angle 0 1 750 342
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_steer_angle
//       Access: Published
//  Description: Retrieves the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
////////////////////////////////////////////////////////////////////
51
float PhysxWheelShape::get_steer_angle(void) const;

2189 19 get_steer_angle_rad 0 4 3047 36 PhysxWheelShape::get_steer_angle_rad 0 1 751 346
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_steer_angle_rad
//       Access: Published
//  Description: Retrieves the steering angle, around shape Y axis.
//               The steering angle is measured in radians.
////////////////////////////////////////////////////////////////////
55
float PhysxWheelShape::get_steer_angle_rad(void) const;

2190 14 get_axle_speed 0 4 3047 31 PhysxWheelShape::get_axle_speed 0 1 752 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_axle_speed
//       Access: Published
//  Description: Retrieves the current axle rotation speed.
////////////////////////////////////////////////////////////////////
50
float PhysxWheelShape::get_axle_speed(void) const;

2191 14 get_wheel_flag 0 4 3047 31 PhysxWheelShape::get_wheel_flag 0 1 753 300
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_wheel_flag
//       Access: Published
//  Description: Returns the value of the specified wheel shape
//               flag.
////////////////////////////////////////////////////////////////////
81
bool PhysxWheelShape::get_wheel_flag(PhysxEnums::PhysxWheelShapeFlag flag) const;

2192 14 get_class_type 0 4 3047 31 PhysxWheelShape::get_class_type 0 1 754 68
////////////////////////////////////////////////////////////////////
56
static TypeHandle PhysxWheelShape::get_class_type(void);

2193 14 PhysxActorDesc 0 4 3048 30 PhysxActorDesc::PhysxActorDesc 0 1 755 716
// Filename: physxActorDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline PhysxActorDesc::PhysxActorDesc(void);

2194 15 ~PhysxActorDesc 0 4 3048 31 PhysxActorDesc::~PhysxActorDesc 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PhysxActorDesc::~PhysxActorDesc(void);

2195 14 set_to_default 0 4 3048 30 PhysxActorDesc::set_to_default 0 1 756 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
49
inline void PhysxActorDesc::set_to_default(void);

2196 8 is_valid 0 4 3048 24 PhysxActorDesc::is_valid 0 1 757 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
49
inline bool PhysxActorDesc::is_valid(void) const;

2197 9 add_shape 0 4 3048 25 PhysxActorDesc::add_shape 0 1 758 308
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::add_shape
//       Access: Published
//  Description: Adds a shape to the list of collision shapes
//               composing this actor.
////////////////////////////////////////////////////////////////////
53
void PhysxActorDesc::add_shape(PhysxShapeDesc &desc);

2198 8 set_name 0 4 3048 24 PhysxActorDesc::set_name 0 1 759 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_name
//       Access: Published
//  Description: Sets the optional debug name for the actor.
////////////////////////////////////////////////////////////////////
48
void PhysxActorDesc::set_name(char const *name);

2199 11 set_density 0 4 3048 27 PhysxActorDesc::set_density 0 1 760 384
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_density
//       Access: Published
//  Description: Set the density used during mass/intertia
//               computation. This value is used if the actor's
//               shapes do not have a mass asigned.
////////////////////////////////////////////////////////////////////
48
void PhysxActorDesc::set_density(float density);

2200 14 set_global_pos 0 4 3048 30 PhysxActorDesc::set_global_pos 0 1 761 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_pos
//       Access: Published
//  Description: Set the position of the actor in global space.
////////////////////////////////////////////////////////////////////
57
void PhysxActorDesc::set_global_pos(LPoint3f const &pos);

2201 14 set_global_mat 0 4 3048 30 PhysxActorDesc::set_global_mat 0 1 762 425
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_mat
//       Access: Published
//  Description: Set the position and orientation of the actor
//               in global space. Scaling and shear arenot
//               supported, even if the matrix contains a scale or
//               shear.
////////////////////////////////////////////////////////////////////
58
void PhysxActorDesc::set_global_mat(LMatrix4f const &mat);

2202 14 set_global_hpr 0 4 3048 30 PhysxActorDesc::set_global_hpr 0 1 763 345
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_hpr
//       Access: Published
//  Description: Sets the orientation of the actor in global space
//               by providing angles for heading, pitch and roll.
////////////////////////////////////////////////////////////////////
63
void PhysxActorDesc::set_global_hpr(float h, float p, float r);

2203 8 set_body 0 4 3048 24 PhysxActorDesc::set_body 0 1 764 394
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_body
//       Access: Published
//  Description: Sets the body descriptor for this actor. The actor
//               will be dynmaic if a body descriptor is set, and
//               static if no body descriptor is set.
////////////////////////////////////////////////////////////////////
51
void PhysxActorDesc::set_body(PhysxBodyDesc &desc);

2204 8 get_name 0 4 3048 24 PhysxActorDesc::get_name 0 1 765 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_name
//       Access: Published
//  Description: Returns the optional debug name for this actor.
////////////////////////////////////////////////////////////////////
49
char const *PhysxActorDesc::get_name(void) const;

2205 11 get_density 0 4 3048 27 PhysxActorDesc::get_density 0 1 766 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_density
//       Access: Published
//  Description: Returns the actor's density.
////////////////////////////////////////////////////////////////////
46
float PhysxActorDesc::get_density(void) const;

2206 14 get_global_pos 0 4 3048 30 PhysxActorDesc::get_global_pos 0 1 767 275
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_global_pos
//       Access: Published
//  Description: Returns the actor's position in global space.
////////////////////////////////////////////////////////////////////
52
LPoint3f PhysxActorDesc::get_global_pos(void) const;

2207 14 get_global_mat 0 4 3048 30 PhysxActorDesc::get_global_mat 0 1 768 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_global_mat
//       Access: Published
//  Description: Returns the actor's transform in global space.
////////////////////////////////////////////////////////////////////
53
LMatrix4f PhysxActorDesc::get_global_mat(void) const;

2208 8 get_body 0 4 3048 24 PhysxActorDesc::get_body 0 1 769 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_body
//       Access: Published
//  Description: Gets the body descriptor for this actor.
////////////////////////////////////////////////////////////////////
51
PhysxBodyDesc PhysxActorDesc::get_body(void) const;

2209 13 PhysxBodyDesc 0 4 3049 28 PhysxBodyDesc::PhysxBodyDesc 0 1 770 714
// Filename: physxBodyDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline PhysxBodyDesc::PhysxBodyDesc(void);

2210 14 ~PhysxBodyDesc 0 4 3049 29 PhysxBodyDesc::~PhysxBodyDesc 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline PhysxBodyDesc::~PhysxBodyDesc(void);

2211 14 set_to_default 0 4 3049 29 PhysxBodyDesc::set_to_default 0 1 771 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
48
inline void PhysxBodyDesc::set_to_default(void);

2212 8 is_valid 0 4 3049 23 PhysxBodyDesc::is_valid 0 1 772 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
48
inline bool PhysxBodyDesc::is_valid(void) const;

2213 8 set_mass 0 4 3049 23 PhysxBodyDesc::set_mass 0 1 773 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass
//       Access: Published
//  Description: Set the mass of body. 
////////////////////////////////////////////////////////////////////
41
void PhysxBodyDesc::set_mass(float mass);

2214 18 set_linear_damping 0 4 3049 33 PhysxBodyDesc::set_linear_damping 0 1 774 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_linear_damping
//       Access: Published
//  Description: Set the linear damping applied to the body.
////////////////////////////////////////////////////////////////////
54
void PhysxBodyDesc::set_linear_damping(float damping);

2215 19 set_angular_damping 0 4 3049 34 PhysxBodyDesc::set_angular_damping 0 1 775 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_angular_damping
//       Access: Published
//  Description: Set the angular damping applied to the body.
////////////////////////////////////////////////////////////////////
55
void PhysxBodyDesc::set_angular_damping(float damping);

2216 19 set_linear_velocity 0 4 3049 34 PhysxBodyDesc::set_linear_velocity 0 1 776 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_linear_velocity
//       Access: Published
//  Description: Set the linear Velocity of the body.
////////////////////////////////////////////////////////////////////
67
void PhysxBodyDesc::set_linear_velocity(LVector3f const &velocity);

2217 20 set_angular_velocity 0 4 3049 35 PhysxBodyDesc::set_angular_velocity 0 1 777 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_angular_velocity
//       Access: Published
//  Description: Set the angular velocity of the body.
////////////////////////////////////////////////////////////////////
68
void PhysxBodyDesc::set_angular_velocity(LVector3f const &velocity);

2218 24 set_max_angular_velocity 0 4 3049 39 PhysxBodyDesc::set_max_angular_velocity 0 1 778 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_max_angular_velocity
//       Access: Published
//  Description: Set the maximum allowed angular velocity for this
//               body.
////////////////////////////////////////////////////////////////////
60
void PhysxBodyDesc::set_max_angular_velocity(float maximum);

2219 25 set_sleep_linear_velocity 0 4 3049 40 PhysxBodyDesc::set_sleep_linear_velocity 0 1 779 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_linear_velocity
//       Access: Published
//  Description: Set the maximum linear velocity at which the body
//               can go to sleep.
////////////////////////////////////////////////////////////////////
62
void PhysxBodyDesc::set_sleep_linear_velocity(float velocity);

2220 26 set_sleep_angular_velocity 0 4 3049 41 PhysxBodyDesc::set_sleep_angular_velocity 0 1 780 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_angular_velocity
//       Access: Published
//  Description: Set the maximum angular velocity at which body
//               can go to sleep.
////////////////////////////////////////////////////////////////////
63
void PhysxBodyDesc::set_sleep_angular_velocity(float velocity);

2221 26 set_solver_iteration_count 0 4 3049 41 PhysxBodyDesc::set_solver_iteration_count 0 1 781 375
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_solver_iteration_count
//       Access: Published
//  Description: Set the number of solver iterations performed
//               when processing joint/contacts connected to this
//               body.
////////////////////////////////////////////////////////////////////
67
void PhysxBodyDesc::set_solver_iteration_count(unsigned int count);

2222 26 set_sleep_energy_threshold 0 4 3049 41 PhysxBodyDesc::set_sleep_energy_threshold 0 1 782 386
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_energy_threshold
//       Access: Published
//  Description: Set the threshold for the energy-based sleeping
//               algorithm. Only used when the BF_energy_sleep_test
//               flag is set.
////////////////////////////////////////////////////////////////////
64
void PhysxBodyDesc::set_sleep_energy_threshold(float threshold);

2223 17 set_sleep_damping 0 4 3049 32 PhysxBodyDesc::set_sleep_damping 0 1 783 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_damping
//       Access: Published
//  Description: Set the damping factor for bodies that are about
//               to sleep.
////////////////////////////////////////////////////////////////////
53
void PhysxBodyDesc::set_sleep_damping(float damping);

2224 18 set_mass_local_mat 0 4 3049 33 PhysxBodyDesc::set_mass_local_mat 0 1 784 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass_local_mat
//       Access: Published
//  Description: Set the position and orientation of the center
//               of mass.
////////////////////////////////////////////////////////////////////
60
void PhysxBodyDesc::set_mass_local_mat(LMatrix4f const mat);

2225 22 set_mass_space_inertia 0 4 3049 37 PhysxBodyDesc::set_mass_space_inertia 0 1 785 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass_space_inertia
//       Access: Published
//  Description: Set the diagonal mass space inertia tensor in
//               bodies mass frame.
////////////////////////////////////////////////////////////////////
68
void PhysxBodyDesc::set_mass_space_inertia(LVector3f const inertia);

2226 8 set_flag 0 4 3049 23 PhysxBodyDesc::set_flag 0 1 786 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual body flags.
////////////////////////////////////////////////////////////////////
73
void PhysxBodyDesc::set_flag(PhysxEnums::PhysxBodyFlag flag, bool value);

2227 24 set_ccd_motion_threshold 0 4 3049 39 PhysxBodyDesc::set_ccd_motion_threshold 0 1 787 403
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_ccd_motion_threshold
//       Access: Published
//  Description: When CCD is globally enabled, it is still not
//               performed if the motion distance of all points on
//               the body is below this threshold. 
////////////////////////////////////////////////////////////////////
62
void PhysxBodyDesc::set_ccd_motion_threshold(float threshold);

2228 19 set_wake_up_counter 0 4 3049 34 PhysxBodyDesc::set_wake_up_counter 0 1 788 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_wake_up_counter
//       Access: Published
//  Description: Set the body's initial wake up counter.
////////////////////////////////////////////////////////////////////
53
void PhysxBodyDesc::set_wake_up_counter(float value);

2229 28 set_contact_report_threshold 0 4 3049 43 PhysxBodyDesc::set_contact_report_threshold 0 1 789 287
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_contact_report_threshold
//       Access: Published
//  Description: Set The force threshold for contact reports.
////////////////////////////////////////////////////////////////////
66
void PhysxBodyDesc::set_contact_report_threshold(float threshold);

2230 8 get_mass 0 4 3049 23 PhysxBodyDesc::get_mass 0 1 790 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass
//       Access: Published
//  Description: Get the mass of body. 
////////////////////////////////////////////////////////////////////
42
float PhysxBodyDesc::get_mass(void) const;

2231 18 get_linear_damping 0 4 3049 33 PhysxBodyDesc::get_linear_damping 0 1 791 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_linear_damping
//       Access: Published
//  Description: Get the linear damping applied to the body.
////////////////////////////////////////////////////////////////////
52
float PhysxBodyDesc::get_linear_damping(void) const;

2232 19 get_angular_damping 0 4 3049 34 PhysxBodyDesc::get_angular_damping 0 1 792 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_angular_damping
//       Access: Published
//  Description: Get the angular damping applied to the body.
////////////////////////////////////////////////////////////////////
53
float PhysxBodyDesc::get_angular_damping(void) const;

2233 19 get_linear_velocity 0 4 3049 34 PhysxBodyDesc::get_linear_velocity 0 1 793 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_linear_velocity
//       Access: Published
//  Description: Get the linear Velocity of the body.
////////////////////////////////////////////////////////////////////
57
LVector3f PhysxBodyDesc::get_linear_velocity(void) const;

2234 20 get_angular_velocity 0 4 3049 35 PhysxBodyDesc::get_angular_velocity 0 1 794 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_angular_velocity
//       Access: Published
//  Description: Get the angular velocity of the body.
////////////////////////////////////////////////////////////////////
58
LVector3f PhysxBodyDesc::get_angular_velocity(void) const;

2235 24 get_max_angular_velocity 0 4 3049 39 PhysxBodyDesc::get_max_angular_velocity 0 1 795 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_max_angular_velocity
//       Access: Published
//  Description: Get the maximum allowed angular velocity for this
//               body.
////////////////////////////////////////////////////////////////////
58
float PhysxBodyDesc::get_max_angular_velocity(void) const;

2236 25 get_sleep_linear_velocity 0 4 3049 40 PhysxBodyDesc::get_sleep_linear_velocity 0 1 796 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_linear_velocity
//       Access: Published
//  Description: Get the maximum linear velocity at which the body
//               can go to sleep.
////////////////////////////////////////////////////////////////////
59
float PhysxBodyDesc::get_sleep_linear_velocity(void) const;

2237 26 get_sleep_angular_velocity 0 4 3049 41 PhysxBodyDesc::get_sleep_angular_velocity 0 1 797 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_angular_velocity
//       Access: Published
//  Description: Get the maximum angular velocity at which body
//               can go to sleep.
////////////////////////////////////////////////////////////////////
60
float PhysxBodyDesc::get_sleep_angular_velocity(void) const;

2238 26 get_solver_iteration_count 0 4 3049 41 PhysxBodyDesc::get_solver_iteration_count 0 1 798 375
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_solver_iteration_count
//       Access: Published
//  Description: Get the number of solver iterations performed
//               when processing joint/contacts connected to this
//               body.
////////////////////////////////////////////////////////////////////
67
unsigned int PhysxBodyDesc::get_solver_iteration_count(void) const;

2239 26 get_sleep_energy_threshold 0 4 3049 41 PhysxBodyDesc::get_sleep_energy_threshold 0 1 799 386
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_energy_threshold
//       Access: Published
//  Description: Get the threshold for the energy-based sleeping
//               algorithm. Only used when the BF_energy_sleep_test
//               flag is set.
////////////////////////////////////////////////////////////////////
60
float PhysxBodyDesc::get_sleep_energy_threshold(void) const;

2240 17 get_sleep_damping 0 4 3049 32 PhysxBodyDesc::get_sleep_damping 0 1 800 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_damping
//       Access: Published
//  Description: Get the damping factor for bodies that are about
//               to sleep.
////////////////////////////////////////////////////////////////////
51
float PhysxBodyDesc::get_sleep_damping(void) const;

2241 18 get_mass_local_mat 0 4 3049 33 PhysxBodyDesc::get_mass_local_mat 0 1 801 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass_local_mat
//       Access: Published
//  Description: Get the position and orientation of the center
//               of mass.
////////////////////////////////////////////////////////////////////
56
LMatrix4f PhysxBodyDesc::get_mass_local_mat(void) const;

2242 22 get_mass_space_inertia 0 4 3049 37 PhysxBodyDesc::get_mass_space_inertia 0 1 802 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass_space_inertia
//       Access: Published
//  Description: Get the diagonal mass space inertia tensor in
//               bodies mass frame.
////////////////////////////////////////////////////////////////////
60
LVector3f PhysxBodyDesc::get_mass_space_inertia(void) const;

2243 8 get_flag 0 4 3049 23 PhysxBodyDesc::get_flag 0 1 803 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_flag
//       Access: Published
//  Description: Returns the specified body flag.
////////////////////////////////////////////////////////////////////
67
bool PhysxBodyDesc::get_flag(PhysxEnums::PhysxBodyFlag flag) const;

2244 24 get_ccd_motion_threshold 0 4 3049 39 PhysxBodyDesc::get_ccd_motion_threshold 0 1 804 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_ccd_motion_threshold
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
float PhysxBodyDesc::get_ccd_motion_threshold(void) const;

2245 19 get_wake_up_counter 0 4 3049 34 PhysxBodyDesc::get_wake_up_counter 0 1 805 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_wake_up_counter
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
float PhysxBodyDesc::get_wake_up_counter(void) const;

2246 28 get_contact_report_threshold 0 4 3049 43 PhysxBodyDesc::get_contact_report_threshold 0 1 806 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_contact_report_threshold
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
float PhysxBodyDesc::get_contact_report_threshold(void) const;

2247 20 upcast_to_PhysxEnums 0 12 3050 36 PhysxShapeDesc::upcast_to_PhysxEnums 0 1 830 40
upcast from PhysxShapeDesc to PhysxEnums
55
PhysxEnums *PhysxShapeDesc::upcast_to_PhysxEnums(void);

2248 26 downcast_to_PhysxShapeDesc 0 12 2962 38 PhysxEnums::downcast_to_PhysxShapeDesc 0 1 831 42
downcast from PhysxEnums to PhysxShapeDesc
61
PhysxShapeDesc *PhysxEnums::downcast_to_PhysxShapeDesc(void);

2249 24 upcast_to_ReferenceCount 0 12 3050 40 PhysxShapeDesc::upcast_to_ReferenceCount 0 1 832 44
upcast from PhysxShapeDesc to ReferenceCount
63
ReferenceCount *PhysxShapeDesc::upcast_to_ReferenceCount(void);

2250 26 downcast_to_PhysxShapeDesc 0 12 3051 42 ReferenceCount::downcast_to_PhysxShapeDesc 0 1 833 46
downcast from ReferenceCount to PhysxShapeDesc
65
PhysxShapeDesc *ReferenceCount::downcast_to_PhysxShapeDesc(void);

2251 14 set_to_default 0 4 3050 30 PhysxShapeDesc::set_to_default 0 1 807 0
54
virtual void PhysxShapeDesc::set_to_default(void) = 0;

2252 8 is_valid 0 4 3050 24 PhysxShapeDesc::is_valid 0 1 808 0
54
virtual bool PhysxShapeDesc::is_valid(void) const = 0;

2253 8 set_name 0 4 3050 24 PhysxShapeDesc::set_name 0 1 809 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
////////////////////////////////////////////////////////////////////
48
void PhysxShapeDesc::set_name(char const *name);

2254 11 set_trigger 0 4 3050 27 PhysxShapeDesc::set_trigger 0 1 810 442
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_trigger
//       Access: Published
//  Description: This shape will become a trigger shape if this
//               parameter is set to TRUE. It won't take part in
//               collisions, but trigger events if some other
//               shape passes through it.
////////////////////////////////////////////////////////////////////
45
void PhysxShapeDesc::set_trigger(bool value);

2255 13 set_local_pos 0 4 3050 29 PhysxShapeDesc::set_local_pos 0 1 811 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
void PhysxShapeDesc::set_local_pos(LPoint3f const &pos);

2256 13 set_local_mat 0 4 3050 29 PhysxShapeDesc::set_local_mat 0 1 812 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PhysxShapeDesc::set_local_mat(LMatrix4f const &mat);

2257 13 set_local_hpr 0 4 3050 29 PhysxShapeDesc::set_local_hpr 0 1 813 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_hpr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
void PhysxShapeDesc::set_local_hpr(float h, float p, float r);

2258 14 set_skin_width 0 4 3050 30 PhysxShapeDesc::set_skin_width 0 1 814 1032
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_skin_width
//       Access: Published
//  Description: Specifies by how much shapes can interpenetrate. 
//
//               Two shapes will interpenetrate by the sum of their
//               skin widths. This means that their graphical
//               representations should be adjusted so that they
//               just touch when the shapes are interpenetrating.
//
//               The default skin width is the 'physx-skin-width'
//               parameter.
//
//               A skin width sum of zero for two bodies is not
//               permitted because it will lead to an unstable
//               simulation.
//
//               If your simulation jitters because resting bodies
//               occasionally lose contact, increasing the size of
//               your collision volumes and the skin width may
//               improve things.
////////////////////////////////////////////////////////////////////
53
void PhysxShapeDesc::set_skin_width(float skinWidth);

2259 14 set_shape_flag 0 4 3050 30 PhysxShapeDesc::set_shape_flag 0 1 815 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_shape_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
87
void PhysxShapeDesc::set_shape_flag(PhysxEnums::PhysxShapeFlag const flag, bool value);

2260 8 set_mass 0 4 3050 24 PhysxShapeDesc::set_mass 0 1 816 598
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_mass
//       Access: Published
//  Description: Sets the mass of this individual shape when
//               computing mass inertial properties for a rigidbody.
//               When mass<=0.0 then density and volume determine
//               the mass. Note that this will only be used if the
//               body has a zero inertia tensor, or if you call
//               PhysxActor::update_mass_from_shapes explicitly.
////////////////////////////////////////////////////////////////////
42
void PhysxShapeDesc::set_mass(float mass);

2261 11 set_density 0 4 3050 27 PhysxShapeDesc::set_density 0 1 817 585
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_density
//       Access: Published
//  Description: Sets the density of this individual shape when 
//               computing mass inertial properties for a rigidbody
//               (unless a valid mass >0.0 is provided). Note that
//               this will only be used if the body has a zero
//               inertia tensor, or if you call
//               PhysxActor::update_mass_from_shapes explicitly.
////////////////////////////////////////////////////////////////////
48
void PhysxShapeDesc::set_density(float density);

2262 9 set_group 0 4 3050 25 PhysxShapeDesc::set_group 0 1 818 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_group
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PhysxShapeDesc::set_group(unsigned short int group);

2263 12 set_material 0 4 3050 28 PhysxShapeDesc::set_material 0 1 819 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_material
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void PhysxShapeDesc::set_material(PhysxMaterial const &material);

2264 18 set_material_index 0 4 3050 34 PhysxShapeDesc::set_material_index 0 1 820 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_material_index
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void PhysxShapeDesc::set_material_index(unsigned short int index);

2265 8 get_name 0 4 3050 24 PhysxShapeDesc::get_name 0 1 821 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
char const *PhysxShapeDesc::get_name(void) const;

2266 13 get_local_pos 0 4 3050 29 PhysxShapeDesc::get_local_pos 0 1 822 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_local_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
LPoint3f PhysxShapeDesc::get_local_pos(void) const;

2267 13 get_local_mat 0 4 3050 29 PhysxShapeDesc::get_local_mat 0 1 823 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_local_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
LMatrix4f PhysxShapeDesc::get_local_mat(void) const;

2268 14 get_skin_width 0 4 3050 30 PhysxShapeDesc::get_skin_width 0 1 824 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_skin_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
float PhysxShapeDesc::get_skin_width(void) const;

2269 14 get_shape_flag 0 4 3050 30 PhysxShapeDesc::get_shape_flag 0 1 825 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_shape_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
bool PhysxShapeDesc::get_shape_flag(PhysxEnums::PhysxShapeFlag const flag) const;

2270 8 get_mass 0 4 3050 24 PhysxShapeDesc::get_mass 0 1 826 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_mass
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
float PhysxShapeDesc::get_mass(void) const;

2271 11 get_density 0 4 3050 27 PhysxShapeDesc::get_density 0 1 827 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_density
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
float PhysxShapeDesc::get_density(void) const;

2272 9 get_group 0 4 3050 25 PhysxShapeDesc::get_group 0 1 828 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_group
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
unsigned short int PhysxShapeDesc::get_group(void) const;

2273 18 get_material_index 0 4 3050 34 PhysxShapeDesc::get_material_index 0 1 829 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_material_index
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
unsigned short int PhysxShapeDesc::get_material_index(void) const;

2274 13 ~PhysxManager 0 4 3052 27 PhysxManager::~PhysxManager 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
34
PhysxManager::~PhysxManager(void);

2275 14 get_global_ptr 0 4 3052 28 PhysxManager::get_global_ptr 0 1 834 297
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global PhysxManager
//               object.
////////////////////////////////////////////////////////////////////
56
static PhysxManager *PhysxManager::get_global_ptr(void);

2276 13 set_parameter 0 4 3052 27 PhysxManager::set_parameter 0 1 835 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::set_parameter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
void PhysxManager::set_parameter(PhysxEnums::PhysxParameter param, float value);

2277 13 get_parameter 0 4 3052 27 PhysxManager::get_parameter 0 1 836 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_parameter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
float PhysxManager::get_parameter(PhysxEnums::PhysxParameter param);

2278 21 is_hardware_available 0 4 3052 35 PhysxManager::is_hardware_available 0 1 837 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::is_hardware_available
//       Access: Published
//  Description: Returns TRUE if a physcis hardware is available
//               on the host system.
////////////////////////////////////////////////////////////////////
47
bool PhysxManager::is_hardware_available(void);

2279 12 get_num_ppus 0 4 3052 26 PhysxManager::get_num_ppus 0 1 838 299
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_ppus
//       Access: Published
//  Description: Reports the number of PPUs installed in the host
//               system.
////////////////////////////////////////////////////////////////////
46
unsigned int PhysxManager::get_num_ppus(void);

2280 14 get_hw_version 0 4 3052 28 PhysxManager::get_hw_version 0 1 839 432
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_hw_version
//       Access: Published
//  Description: Reports the available revision of the PhysX
//               Hardware. Returns 0 if there is no hardware present
//               in the machine, 1 for the PhysX Athena revision
//               1.0 card.
////////////////////////////////////////////////////////////////////
48
unsigned int PhysxManager::get_hw_version(void);

2281 20 get_internal_version 0 4 3052 34 PhysxManager::get_internal_version 0 1 840 285
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_internal_version
//       Access: Published
//  Description: Reports the internal API version number of the SDK.
////////////////////////////////////////////////////////////////////
53
char const *PhysxManager::get_internal_version(void);

2282 14 get_num_scenes 0 4 3052 28 PhysxManager::get_num_scenes 0 1 841 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_scenes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
unsigned int PhysxManager::get_num_scenes(void) const;

2283 12 create_scene 0 4 3052 26 PhysxManager::create_scene 0 1 842 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::create_scene
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
PhysxScene *PhysxManager::create_scene(PhysxSceneDesc &desc);

2284 9 get_scene 0 4 3052 23 PhysxManager::get_scene 0 1 843 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_scene
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
PhysxScene *PhysxManager::get_scene(unsigned int idx) const;

2285 21 get_num_height_fields 0 4 3052 35 PhysxManager::get_num_height_fields 0 1 844 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_height_fields
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
unsigned int PhysxManager::get_num_height_fields(void);

2286 19 create_height_field 0 4 3052 33 PhysxManager::create_height_field 0 1 845 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::create_height_field
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
PhysxHeightField *PhysxManager::create_height_field(PhysxHeightFieldDesc &desc);

2287 16 get_height_field 0 4 3052 30 PhysxManager::get_height_field 0 1 846 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_height_field
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
67
PhysxHeightField *PhysxManager::get_height_field(unsigned int idx);

2288 21 get_num_convex_meshes 0 4 3052 35 PhysxManager::get_num_convex_meshes 0 1 847 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_convex_meshes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
unsigned int PhysxManager::get_num_convex_meshes(void);

2289 15 get_convex_mesh 0 4 3052 29 PhysxManager::get_convex_mesh 0 1 848 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_convex_mesh
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
65
PhysxConvexMesh *PhysxManager::get_convex_mesh(unsigned int idx);

2290 23 get_num_triangle_meshes 0 4 3052 37 PhysxManager::get_num_triangle_meshes 0 1 849 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_triangle_meshes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
unsigned int PhysxManager::get_num_triangle_meshes(void);

2291 17 get_triangle_mesh 0 4 3052 31 PhysxManager::get_triangle_mesh 0 1 850 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_triangle_mesh
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
69
PhysxTriangleMesh *PhysxManager::get_triangle_mesh(unsigned int idx);

2292 20 get_num_cloth_meshes 0 4 3052 34 PhysxManager::get_num_cloth_meshes 0 1 851 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_cloth_meshes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
unsigned int PhysxManager::get_num_cloth_meshes(void);

2293 14 get_cloth_mesh 0 4 3052 28 PhysxManager::get_cloth_mesh 0 1 852 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_cloth_mesh
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
63
PhysxClothMesh *PhysxManager::get_cloth_mesh(unsigned int idx);

2294 24 get_num_soft_body_meshes 0 4 3052 38 PhysxManager::get_num_soft_body_meshes 0 1 853 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_soft_body_meshes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
unsigned int PhysxManager::get_num_soft_body_meshes(void);

2295 18 get_soft_body_mesh 0 4 3052 32 PhysxManager::get_soft_body_mesh 0 1 854 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_soft_body_mesh
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
70
PhysxSoftBodyMesh *PhysxManager::get_soft_body_mesh(unsigned int idx);

2296 2 ls 0 4 3052 16 PhysxManager::ls 0 3 855 856 857 434
////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::ls
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
115
inline void PhysxManager::ls(void) const;
inline void PhysxManager::ls(ostream &out, int indent_level = (0)) const;

2297 12 PhysxBounds3 0 4 3053 26 PhysxBounds3::PhysxBounds3 0 1 858 712
// Filename: physxBounds3.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline PhysxBounds3::PhysxBounds3(void);

2298 13 ~PhysxBounds3 0 4 3053 27 PhysxBounds3::~PhysxBounds3 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline PhysxBounds3::~PhysxBounds3(void);

2299 13 bounds_of_obb 0 4 3053 27 PhysxBounds3::bounds_of_obb 0 1 859 432
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::bounds_of_obb
//       Access: Published
//  Description: Sets this to the AABB (axis ligned bounding box)
//               of the OBB (oriented bounding box). The OBB is
//               described by orientation, translation and half
//               dimensions.
////////////////////////////////////////////////////////////////////
120
void PhysxBounds3::bounds_of_obb(LMatrix3f const &orientation, LPoint3f const &translation, LVector3f const &half_dims);

2300 7 combine 0 4 3053 21 PhysxBounds3::combine 0 1 860 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::combine
//       Access: Published
//  Description: Sets this to the union of this and b2. 
////////////////////////////////////////////////////////////////////
51
void PhysxBounds3::combine(PhysxBounds3 const &b2);

2301 7 contain 0 4 3053 21 PhysxBounds3::contain 0 1 861 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::contain
//       Access: Published
//  Description: Returns TRUE if these bounds contain the point v.
////////////////////////////////////////////////////////////////////
52
bool PhysxBounds3::contain(LPoint3f const &p) const;

2302 6 fatten 0 4 3053 20 PhysxBounds3::fatten 0 1 862 300
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::fatten
//       Access: Published
//  Description: Fattens the AABB in all three dimensions by the
//               given distance.
////////////////////////////////////////////////////////////////////
42
void PhysxBounds3::fatten(float distance);

2303 7 include 0 4 3053 21 PhysxBounds3::include 0 1 863 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::include
//       Access: Published
//  Description: Expands the volume to include the point v.
////////////////////////////////////////////////////////////////////
46
void PhysxBounds3::include(LPoint3f const &v);

2304 10 intersects 0 4 3053 24 PhysxBounds3::intersects 0 1 864 304
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::intersects
//       Access: Published
//  Description: Returns TRUE if the intersection of this and b is
//               is not empty.
////////////////////////////////////////////////////////////////////
59
bool PhysxBounds3::intersects(PhysxBounds3 const &b) const;

2305 12 intersects2d 0 4 3053 26 PhysxBounds3::intersects2d 0 1 865 393
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::intersects2d
//       Access: Published
//  Description: Indicates whether the intersection of this and b
//               is empty or not in the plane orthogonal to the
//               axis passed (X = 0, Y = 1 or Z = 2). 
////////////////////////////////////////////////////////////////////
90
bool PhysxBounds3::intersects2d(PhysxBounds3 const &b, unsigned int axis_to_ignore) const;

2306 8 is_empty 0 4 3053 22 PhysxBounds3::is_empty 0 1 866 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::is_empty
//       Access: Published
//  Description: Returns TRUE if the bounding box is empty.
////////////////////////////////////////////////////////////////////
40
bool PhysxBounds3::is_empty(void) const;

2307 5 scale 0 4 3053 19 PhysxBounds3::scale 0 1 867 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::scale
//       Access: Published
//  Description: Scales the AABB by the given factor.
////////////////////////////////////////////////////////////////////
38
void PhysxBounds3::scale(float scale);

2308 3 set 0 4 3053 17 PhysxBounds3::set 0 1 868 289
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set
//       Access: Published
//  Description: Setup this AABB from minimum corner and maximum
//               corner.
////////////////////////////////////////////////////////////////////
65
void PhysxBounds3::set(LPoint3f const &min, LPoint3f const &max);

2309 18 set_center_extents 0 4 3053 32 PhysxBounds3::set_center_extents 0 1 869 302
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_center_extents
//       Access: Published
//  Description: Setup this AABB from center point and extents
//               vector.
////////////////////////////////////////////////////////////////////
88
void PhysxBounds3::set_center_extents(LPoint3f const &center, LVector3f const &extents);

2310 9 set_empty 0 4 3053 23 PhysxBounds3::set_empty 0 1 870 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_empty
//       Access: Published
//  Description: Sets empty to TRUE.
////////////////////////////////////////////////////////////////////
35
void PhysxBounds3::set_empty(void);

2311 12 set_infinite 0 4 3053 26 PhysxBounds3::set_infinite 0 1 871 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_infinite
//       Access: Published
//  Description: Sets infinite bounds.
////////////////////////////////////////////////////////////////////
38
void PhysxBounds3::set_infinite(void);

2312 9 transform 0 4 3053 23 PhysxBounds3::transform 0 1 872 441
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::transform
//       Access: Published
//  Description: Transforms this volume as if it was an axis aligned
//               bounding box, and then assigns the results' bounds
//               to this. The orientation is applied first, then the
//               translation.
////////////////////////////////////////////////////////////////////
88
void PhysxBounds3::transform(LMatrix3f const &orientation, LPoint3f const &translation);

2313 7 get_max 0 4 3053 21 PhysxBounds3::get_max 0 1 873 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_max
//       Access: Published
//  Description: Returns the minimum corner of the bounding box.
////////////////////////////////////////////////////////////////////
43
LPoint3f PhysxBounds3::get_max(void) const;

2314 7 get_min 0 4 3053 21 PhysxBounds3::get_min 0 1 874 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_min
//       Access: Published
//  Description: Returns the maximum corner of the bounding box.
////////////////////////////////////////////////////////////////////
43
LPoint3f PhysxBounds3::get_min(void) const;

2315 10 get_center 0 4 3053 24 PhysxBounds3::get_center 0 1 875 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_center
//       Access: Published
//  Description: Returns the center of the bounding box.
////////////////////////////////////////////////////////////////////
46
LPoint3f PhysxBounds3::get_center(void) const;

2316 14 get_dimensions 0 4 3053 28 PhysxBounds3::get_dimensions 0 1 876 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_dimensions
//       Access: Published
//  Description: Returns the extents of the bounding box.
////////////////////////////////////////////////////////////////////
51
LVector3f PhysxBounds3::get_dimensions(void) const;

2317 7 set_max 0 4 3053 21 PhysxBounds3::set_max 0 1 877 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_max
//       Access: Published
//  Description: Sets the maximum corner of the bounding box.
////////////////////////////////////////////////////////////////////
43
void PhysxBounds3::set_max(LPoint3f value);

2318 7 set_min 0 4 3053 21 PhysxBounds3::set_min 0 1 878 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_min
//       Access: Published
//  Description: Sets the minimum corner of the bounding box.
////////////////////////////////////////////////////////////////////
43
void PhysxBounds3::set_min(LPoint3f value);

2319 8 PhysxBox 0 4 3054 18 PhysxBox::PhysxBox 0 2 879 880 926
// Filename: physxBox.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline PhysxBox::PhysxBox(void);
PhysxBox::PhysxBox(LPoint3f const &center, LVector3f const &extents, LMatrix3f const &rot);

2320 9 ~PhysxBox 0 4 3054 19 PhysxBox::~PhysxBox 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PhysxBox::~PhysxBox(void);

2321 8 is_valid 0 4 3054 18 PhysxBox::is_valid 0 1 881 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::is_valid
//       Access: Published
//  Description: Returns TRUE if the box is valid.
////////////////////////////////////////////////////////////////////
36
bool PhysxBox::is_valid(void) const;

2322 6 rotate 0 4 3054 16 PhysxBox::rotate 0 1 882 297
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::rotate
//       Access: Published
//  Description: Recomputes the box after an arbitrary transform by
//               a 4x4 matrix.
////////////////////////////////////////////////////////////////////
63
void PhysxBox::rotate(LMatrix4f const &m, PhysxBox &obb) const;

2323 9 set_empty 0 4 3054 19 PhysxBox::set_empty 0 1 883 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_empty
//       Access: Published
//  Description: Setups an empty box.
////////////////////////////////////////////////////////////////////
31
void PhysxBox::set_empty(void);

2324 10 get_center 0 4 3054 20 PhysxBox::get_center 0 1 884 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_center
//       Access: Published
//  Description: Return center of the box.
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxBox::get_center(void) const;

2325 11 get_extents 0 4 3054 21 PhysxBox::get_extents 0 1 885 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_extents
//       Access: Published
//  Description: Returns the extents (radii) of the box.
////////////////////////////////////////////////////////////////////
44
LVector3f PhysxBox::get_extents(void) const;

2326 7 get_rot 0 4 3054 17 PhysxBox::get_rot 0 1 886 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_rot
//       Access: Published
//  Description: Return the rotation of the box.
////////////////////////////////////////////////////////////////////
40
LMatrix3f PhysxBox::get_rot(void) const;

2327 10 set_center 0 4 3054 20 PhysxBox::set_center 0 1 887 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_center
//       Access: Published
//  Description: Sets the center of the box.
////////////////////////////////////////////////////////////////////
43
void PhysxBox::set_center(LPoint3f center);

2328 11 set_extents 0 4 3054 21 PhysxBox::set_extents 0 1 888 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_extents
//       Access: Published
//  Description: Sets the extents of the box.
////////////////////////////////////////////////////////////////////
46
void PhysxBox::set_extents(LVector3f extents);

2329 7 set_rot 0 4 3054 17 PhysxBox::set_rot 0 1 889 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_rot
//       Access: Published
//  Description: Sets the rotation of the box.
////////////////////////////////////////////////////////////////////
38
void PhysxBox::set_rot(LMatrix3f rot);

2330 14 set_to_default 0 4 3055 35 PhysxControllerDesc::set_to_default 0 1 890 0
59
virtual void PhysxControllerDesc::set_to_default(void) = 0;

2331 8 is_valid 0 4 3055 29 PhysxControllerDesc::is_valid 0 1 891 0
59
virtual bool PhysxControllerDesc::is_valid(void) const = 0;

2332 7 set_pos 0 4 3055 28 PhysxControllerDesc::set_pos 0 1 892 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_pos
//       Access: Published
//  Description: Set the position of the character.
////////////////////////////////////////////////////////////////////
55
void PhysxControllerDesc::set_pos(LPoint3f const &pos);

2333 15 set_slope_limit 0 4 3055 36 PhysxControllerDesc::set_slope_limit 0 1 893 604
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_slope_limit
//       Access: Published
//  Description: Sets the maximum slope which the character can walk
//               up. In general it is desirable to limit where the
//               character can walk, in particular it is unrealistic
//               for the character to be able to climb arbitary
//               slopes.
//               The value is expressed in degrees.
//               Default: 45.0 degrees.
////////////////////////////////////////////////////////////////////
60
void PhysxControllerDesc::set_slope_limit(float slopeLimit);

2334 14 set_skin_width 0 4 3055 35 PhysxControllerDesc::set_skin_width 0 1 894 558
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_skin_width
//       Access: Published
//  Description: Sets the skin width used by the controller. 
//               A "skin" around the controller is necessary to
//               avoid numerical precision issues.
//               This is dependant on the scale of the users world,
//               but should be a small, positive non zero value.
//               Default: 0.1 
////////////////////////////////////////////////////////////////////
58
void PhysxControllerDesc::set_skin_width(float skinWidth);

2335 15 set_step_offset 0 4 3055 36 PhysxControllerDesc::set_step_offset 0 1 895 612
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_step_offset
//       Access: Published
//  Description: Defines the maximum height of an obstacle which the
//               character can climb. 
//               A small value will mean that the character gets
//               stuck and cannot walk up stairs etc, a value which
//               is too large will mean that the character can climb
//               over unrealistically high obstacles.
//               Default: 0.5
////////////////////////////////////////////////////////////////////
60
void PhysxControllerDesc::set_step_offset(float setpOffset);

2336 20 set_interaction_flag 0 4 3055 41 PhysxControllerDesc::set_interaction_flag 0 1 896 413
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_interaction_flag
//       Access: Published
//  Description: The interaction flag controls if a character
//               controller collides with other controllers.
//               The default is to collide with other controllers.
////////////////////////////////////////////////////////////////////
69
void PhysxControllerDesc::set_interaction_flag(bool interactionFlag);

2337 7 get_pos 0 4 3055 28 PhysxControllerDesc::get_pos 0 1 897 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_pos
//       Access: Published
//  Description: Returns the position of the character.
////////////////////////////////////////////////////////////////////
50
LPoint3f PhysxControllerDesc::get_pos(void) const;

2338 15 get_slope_limit 0 4 3055 36 PhysxControllerDesc::get_slope_limit 0 1 898 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_slope_limit
//       Access: Published
//  Description: Returns the maximum slope which the character can
//               walk up.
////////////////////////////////////////////////////////////////////
55
float PhysxControllerDesc::get_slope_limit(void) const;

2339 14 get_skin_width 0 4 3055 35 PhysxControllerDesc::get_skin_width 0 1 899 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_skin_width
//       Access: Published
//  Description: Returns the skin width used by the controller. 
////////////////////////////////////////////////////////////////////
54
float PhysxControllerDesc::get_skin_width(void) const;

2340 15 get_step_offset 0 4 3055 36 PhysxControllerDesc::get_step_offset 0 1 900 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_step_offset
//       Access: Published
//  Description: Returns the maximum height of an obstacle which the
//               character can climb. 
////////////////////////////////////////////////////////////////////
55
float PhysxControllerDesc::get_step_offset(void) const;

2341 20 get_interaction_flag 0 4 3055 41 PhysxControllerDesc::get_interaction_flag 0 1 901 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_interaction_flag
//       Access: Published
//  Description: Returns the interaction flag.
////////////////////////////////////////////////////////////////////
59
bool PhysxControllerDesc::get_interaction_flag(void) const;

2342 20 ~PhysxControllerDesc 0 4 3055 41 PhysxControllerDesc::~PhysxControllerDesc 0 0 0
48
PhysxControllerDesc::~PhysxControllerDesc(void);

2343 22 PhysxBoxControllerDesc 0 4 3056 46 PhysxBoxControllerDesc::PhysxBoxControllerDesc 0 1 902 732
// Filename: physxBoxControllerDesc.I
// Created by:  enn0x (22Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxBoxControllerDesc::PhysxBoxControllerDesc(void);

2344 23 ~PhysxBoxControllerDesc 0 4 3056 47 PhysxBoxControllerDesc::~PhysxBoxControllerDesc 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline PhysxBoxControllerDesc::~PhysxBoxControllerDesc(void);

2345 11 set_extents 0 4 3056 35 PhysxBoxControllerDesc::set_extents 0 1 903 455
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::set_extents
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
67
void PhysxBoxControllerDesc::set_extents(LVector3f const &extents);

2346 11 get_extents 0 4 3056 35 PhysxBoxControllerDesc::get_extents 0 1 904 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::get_extents
//       Access: Published
//  Description: Returns the dimensions of the box.
////////////////////////////////////////////////////////////////////
58
LVector3f PhysxBoxControllerDesc::get_extents(void) const;

2347 14 set_to_default 0 4 3057 40 PhysxForceFieldShapeDesc::set_to_default 0 1 905 0
64
virtual void PhysxForceFieldShapeDesc::set_to_default(void) = 0;

2348 8 is_valid 0 4 3057 34 PhysxForceFieldShapeDesc::is_valid 0 1 906 0
64
virtual bool PhysxForceFieldShapeDesc::is_valid(void) const = 0;

2349 8 set_name 0 4 3057 34 PhysxForceFieldShapeDesc::set_name 0 1 907 261
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
////////////////////////////////////////////////////////////////////
58
void PhysxForceFieldShapeDesc::set_name(char const *name);

2350 7 set_pos 0 4 3057 33 PhysxForceFieldShapeDesc::set_pos 0 1 908 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void PhysxForceFieldShapeDesc::set_pos(LPoint3f const &pos);

2351 7 set_mat 0 4 3057 33 PhysxForceFieldShapeDesc::set_mat 0 1 909 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
void PhysxForceFieldShapeDesc::set_mat(LMatrix4f const &mat);

2352 7 set_hpr 0 4 3057 33 PhysxForceFieldShapeDesc::set_hpr 0 1 910 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_hpr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void PhysxForceFieldShapeDesc::set_hpr(float h, float p, float r);

2353 8 get_name 0 4 3057 34 PhysxForceFieldShapeDesc::get_name 0 1 911 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
char const *PhysxForceFieldShapeDesc::get_name(void) const;

2354 7 get_pos 0 4 3057 33 PhysxForceFieldShapeDesc::get_pos 0 1 912 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
LPoint3f PhysxForceFieldShapeDesc::get_pos(void) const;

2355 7 get_mat 0 4 3057 33 PhysxForceFieldShapeDesc::get_mat 0 1 913 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
LMatrix4f PhysxForceFieldShapeDesc::get_mat(void) const;

2356 27 PhysxBoxForceFieldShapeDesc 0 4 3058 56 PhysxBoxForceFieldShapeDesc::PhysxBoxForceFieldShapeDesc 0 1 914 742
// Filename: physxBoxForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline PhysxBoxForceFieldShapeDesc::PhysxBoxForceFieldShapeDesc(void);

2357 28 ~PhysxBoxForceFieldShapeDesc 0 4 3058 57 PhysxBoxForceFieldShapeDesc::~PhysxBoxForceFieldShapeDesc 0 0 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline PhysxBoxForceFieldShapeDesc::~PhysxBoxForceFieldShapeDesc(void);

2358 14 set_dimensions 0 4 3058 43 PhysxBoxForceFieldShapeDesc::set_dimensions 0 1 915 463
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::set_dimensions
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
78
void PhysxBoxForceFieldShapeDesc::set_dimensions(LVector3f const &dimensions);

2359 14 get_dimensions 0 4 3058 43 PhysxBoxForceFieldShapeDesc::get_dimensions 0 1 916 277
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::get_dimensions
//       Access: Published
//  Description: Returns the dimensions of the box.
////////////////////////////////////////////////////////////////////
66
LVector3f PhysxBoxForceFieldShapeDesc::get_dimensions(void) const;

2360 17 PhysxBoxShapeDesc 0 4 3059 36 PhysxBoxShapeDesc::PhysxBoxShapeDesc 0 1 917 722
// Filename: physxBoxShapeDesc.I
// Created by:  enn0x (08Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PhysxBoxShapeDesc::PhysxBoxShapeDesc(void);

2361 14 set_dimensions 0 4 3059 33 PhysxBoxShapeDesc::set_dimensions 0 1 918 453
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::set_dimensions
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
////////////////////////////////////////////////////////////////////
68
void PhysxBoxShapeDesc::set_dimensions(LVector3f const &dimensions);

2362 14 get_dimensions 0 4 3059 33 PhysxBoxShapeDesc::get_dimensions 0 1 919 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::get_dimensions
//       Access: Published
//  Description: Returns the dimensions of the box.
////////////////////////////////////////////////////////////////////
56
LVector3f PhysxBoxShapeDesc::get_dimensions(void) const;

2363 12 PhysxSegment 0 4 3060 26 PhysxSegment::PhysxSegment 0 3 920 921 922 1164
// Filename: physxSegment.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
172
inline PhysxSegment::PhysxSegment(void);
inline PhysxSegment::PhysxSegment(PhysxSegment const &segment);
PhysxSegment::PhysxSegment(LPoint3f const &p0, LPoint3f const &p1);

2364 13 ~PhysxSegment 0 4 3060 27 PhysxSegment::~PhysxSegment 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline PhysxSegment::~PhysxSegment(void);

2365 17 compute_direction 0 4 3060 31 PhysxSegment::compute_direction 0 1 923 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_direction
//       Access: Published
//  Description: Returns the direction vector from the segment's
//               start point to it's end point.
////////////////////////////////////////////////////////////////////
58
void PhysxSegment::compute_direction(LPoint3f &dir) const;

2366 14 compute_length 0 4 3060 28 PhysxSegment::compute_length 0 1 924 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_length
//       Access: Published
//  Description: Returns the distance from the segment's start point
//               to it's end point.
////////////////////////////////////////////////////////////////////
47
float PhysxSegment::compute_length(void) const;

2367 13 compute_point 0 4 3060 27 PhysxSegment::compute_point 0 1 925 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_point
//       Access: Published
//  Description: Computes a point on the segment.
////////////////////////////////////////////////////////////////////
61
void PhysxSegment::compute_point(LPoint3f &p, float t) const;

2368 21 compute_square_length 0 4 3060 35 PhysxSegment::compute_square_length 0 1 926 329
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_square_length
//       Access: Published
//  Description: Returns the square distance from the segment's
//               start point to it's end point.
////////////////////////////////////////////////////////////////////
54
float PhysxSegment::compute_square_length(void) const;

2369 10 get_origin 0 4 3060 24 PhysxSegment::get_origin 0 1 927 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_origin
//       Access: Published
//  Description: Returns the start point of the segment.
////////////////////////////////////////////////////////////////////
46
LPoint3f PhysxSegment::get_origin(void) const;

2370 20 set_origin_direction 0 4 3060 34 PhysxSegment::set_origin_direction 0 1 928 317
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_origin_direction
//       Access: Published
//  Description: Setup this segment from origin (start point) and
//               direction vector.
////////////////////////////////////////////////////////////////////
92
void PhysxSegment::set_origin_direction(LPoint3f const &origin, LVector3f const &direction);

2371 6 get_p0 0 4 3060 20 PhysxSegment::get_p0 0 1 929 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_p0
//       Access: Published
//  Description: Returns the start point of the segment.
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxSegment::get_p0(void) const;

2372 6 get_p1 0 4 3060 20 PhysxSegment::get_p1 0 1 930 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_p1
//       Access: Published
//  Description: Returns the end point of the segment.
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxSegment::get_p1(void) const;

2373 6 set_p0 0 4 3060 20 PhysxSegment::set_p0 0 1 931 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_p0
//       Access: Published
//  Description: Sets the start point of the segment.
////////////////////////////////////////////////////////////////////
38
void PhysxSegment::set_p0(LPoint3f p);

2374 6 set_p1 0 4 3060 20 PhysxSegment::set_p1 0 1 932 254
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_p1
//       Access: Published
//  Description: Sets the end point of the segment.
////////////////////////////////////////////////////////////////////
38
void PhysxSegment::set_p1(LPoint3f p);

2375 12 PhysxCapsule 0 4 3061 26 PhysxCapsule::PhysxCapsule 0 2 933 934 938
// Filename: physxCapsule.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline PhysxCapsule::PhysxCapsule(void);
inline PhysxCapsule::PhysxCapsule(PhysxSegment const &segment, float radius);

2376 13 ~PhysxCapsule 0 4 3061 27 PhysxCapsule::~PhysxCapsule 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline PhysxCapsule::~PhysxCapsule(void);

2377 17 compute_direction 0 4 3061 31 PhysxCapsule::compute_direction 0 1 935 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_direction
//       Access: Published
//  Description: Returns the direction vector from the segment's
//               start point to it's end point.
////////////////////////////////////////////////////////////////////
58
void PhysxCapsule::compute_direction(LPoint3f &dir) const;

2378 14 compute_length 0 4 3061 28 PhysxCapsule::compute_length 0 1 936 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_length
//       Access: Published
//  Description: Returns the distance from the segment's start point
//               to it's end point.
////////////////////////////////////////////////////////////////////
47
float PhysxCapsule::compute_length(void) const;

2379 13 compute_point 0 4 3061 27 PhysxCapsule::compute_point 0 1 937 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_point
//       Access: Published
//  Description: Computes a point on the segment. 
////////////////////////////////////////////////////////////////////
61
void PhysxCapsule::compute_point(LPoint3f &p, float t) const;

2380 21 compute_square_length 0 4 3061 35 PhysxCapsule::compute_square_length 0 1 938 329
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_square_length
//       Access: Published
//  Description: Returns the square distance from the segment's
//               start point to it's end point.
////////////////////////////////////////////////////////////////////
54
float PhysxCapsule::compute_square_length(void) const;

2381 10 get_origin 0 4 3061 24 PhysxCapsule::get_origin 0 1 939 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_origin
//       Access: Published
//  Description: Returns the start point of the segment.
////////////////////////////////////////////////////////////////////
46
LPoint3f PhysxCapsule::get_origin(void) const;

2382 20 set_origin_direction 0 4 3061 34 PhysxCapsule::set_origin_direction 0 1 940 317
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_origin_direction
//       Access: Published
//  Description: Setup this capsule from origin (start point) and
//               direction vector.
////////////////////////////////////////////////////////////////////
92
void PhysxCapsule::set_origin_direction(LPoint3f const &origin, LVector3f const &direction);

2383 10 get_radius 0 4 3061 24 PhysxCapsule::get_radius 0 1 941 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_radius
//       Access: Published
//  Description: Returns the capsule's radius.
////////////////////////////////////////////////////////////////////
43
float PhysxCapsule::get_radius(void) const;

2384 6 get_p0 0 4 3061 20 PhysxCapsule::get_p0 0 1 942 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_p0
//       Access: Published
//  Description: Returns the start point of the segment.
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxCapsule::get_p0(void) const;

2385 6 get_p1 0 4 3061 20 PhysxCapsule::get_p1 0 1 943 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_p1
//       Access: Published
//  Description: Returns the end point of the segment.
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxCapsule::get_p1(void) const;

2386 10 set_radius 0 4 3061 24 PhysxCapsule::set_radius 0 1 944 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_radius
//       Access: Published
//  Description: Sets the capsule's radius.
////////////////////////////////////////////////////////////////////
43
void PhysxCapsule::set_radius(float value);

2387 6 set_p0 0 4 3061 20 PhysxCapsule::set_p0 0 1 945 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_p0
//       Access: Published
//  Description: Sets the start point of the segment.
////////////////////////////////////////////////////////////////////
38
void PhysxCapsule::set_p0(LPoint3f p);

2388 6 set_p1 0 4 3061 20 PhysxCapsule::set_p1 0 1 946 254
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_p1
//       Access: Published
//  Description: Sets the end point of the segment.
////////////////////////////////////////////////////////////////////
38
void PhysxCapsule::set_p1(LPoint3f p);

2389 26 PhysxCapsuleControllerDesc 0 4 3062 54 PhysxCapsuleControllerDesc::PhysxCapsuleControllerDesc 0 1 947 740
// Filename: physxCapsuleControllerDesc.I
// Created by:  enn0x (22Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PhysxCapsuleControllerDesc::PhysxCapsuleControllerDesc(void);

2390 27 ~PhysxCapsuleControllerDesc 0 4 3062 55 PhysxCapsuleControllerDesc::~PhysxCapsuleControllerDesc 0 0 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline PhysxCapsuleControllerDesc::~PhysxCapsuleControllerDesc(void);

2391 10 set_radius 0 4 3062 38 PhysxCapsuleControllerDesc::set_radius 0 1 948 0
58
void PhysxCapsuleControllerDesc::set_radius(float radius);

2392 10 set_height 0 4 3062 38 PhysxCapsuleControllerDesc::set_height 0 1 949 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
////////////////////////////////////////////////////////////////////
58
void PhysxCapsuleControllerDesc::set_height(float height);

2393 10 get_radius 0 4 3062 38 PhysxCapsuleControllerDesc::get_radius 0 1 950 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
////////////////////////////////////////////////////////////////////
57
float PhysxCapsuleControllerDesc::get_radius(void) const;

2394 10 get_height 0 4 3062 38 PhysxCapsuleControllerDesc::get_height 0 1 951 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
////////////////////////////////////////////////////////////////////
57
float PhysxCapsuleControllerDesc::get_height(void) const;

2395 31 PhysxCapsuleForceFieldShapeDesc 0 4 3063 64 PhysxCapsuleForceFieldShapeDesc::PhysxCapsuleForceFieldShapeDesc 0 1 952 750
// Filename: physxCapsuleForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline PhysxCapsuleForceFieldShapeDesc::PhysxCapsuleForceFieldShapeDesc(void);

2396 32 ~PhysxCapsuleForceFieldShapeDesc 0 4 3063 65 PhysxCapsuleForceFieldShapeDesc::~PhysxCapsuleForceFieldShapeDesc 0 0 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline PhysxCapsuleForceFieldShapeDesc::~PhysxCapsuleForceFieldShapeDesc(void);

2397 10 set_radius 0 4 3063 43 PhysxCapsuleForceFieldShapeDesc::set_radius 0 1 953 326
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::set_radius
//       Access: Published
//  Description: Sets the radius of the capsule's hemispherical
//               ends and its trunk.
////////////////////////////////////////////////////////////////////
63
void PhysxCapsuleForceFieldShapeDesc::set_radius(float radius);

2398 10 set_height 0 4 3063 43 PhysxCapsuleForceFieldShapeDesc::set_height 0 1 954 328
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
////////////////////////////////////////////////////////////////////
63
void PhysxCapsuleForceFieldShapeDesc::set_height(float height);

2399 10 get_radius 0 4 3063 43 PhysxCapsuleForceFieldShapeDesc::get_radius 0 1 955 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
////////////////////////////////////////////////////////////////////
62
float PhysxCapsuleForceFieldShapeDesc::get_radius(void) const;

2400 10 get_height 0 4 3063 43 PhysxCapsuleForceFieldShapeDesc::get_height 0 1 956 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
////////////////////////////////////////////////////////////////////
62
float PhysxCapsuleForceFieldShapeDesc::get_height(void) const;

2401 21 PhysxCapsuleShapeDesc 0 4 3064 44 PhysxCapsuleShapeDesc::PhysxCapsuleShapeDesc 0 1 957 730
// Filename: physxCapsuleShapeDesc.I
// Created by:  enn0x (11Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxCapsuleShapeDesc::PhysxCapsuleShapeDesc(void);

2402 10 set_radius 0 4 3064 33 PhysxCapsuleShapeDesc::set_radius 0 1 958 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::set_radius
//       Access: Published
//  Description: Sets the radius of the capsule's hemispherical
//               ends and its trunk.
////////////////////////////////////////////////////////////////////
53
void PhysxCapsuleShapeDesc::set_radius(float radius);

2403 10 set_height 0 4 3064 33 PhysxCapsuleShapeDesc::set_height 0 1 959 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
////////////////////////////////////////////////////////////////////
53
void PhysxCapsuleShapeDesc::set_height(float height);

2404 10 get_radius 0 4 3064 33 PhysxCapsuleShapeDesc::get_radius 0 1 960 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
////////////////////////////////////////////////////////////////////
52
float PhysxCapsuleShapeDesc::get_radius(void) const;

2405 10 get_height 0 4 3064 33 PhysxCapsuleShapeDesc::get_height 0 1 961 313
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
////////////////////////////////////////////////////////////////////
52
float PhysxCapsuleShapeDesc::get_height(void) const;

2406 14 PhysxClothDesc 0 4 3065 30 PhysxClothDesc::PhysxClothDesc 0 1 962 716
// Filename: physxClothDesc.I
// Created by:  enn0x (30Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline PhysxClothDesc::PhysxClothDesc(void);

2407 15 ~PhysxClothDesc 0 4 3065 31 PhysxClothDesc::~PhysxClothDesc 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PhysxClothDesc::~PhysxClothDesc(void);

2408 14 set_to_default 0 4 3065 30 PhysxClothDesc::set_to_default 0 1 963 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
49
inline void PhysxClothDesc::set_to_default(void);

2409 8 is_valid 0 4 3065 24 PhysxClothDesc::is_valid 0 1 964 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
49
inline bool PhysxClothDesc::is_valid(void) const;

2410 14 set_cloth_mesh 0 4 3065 30 PhysxClothDesc::set_cloth_mesh 0 1 965 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_cloth_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PhysxClothDesc::set_cloth_mesh(PhysxClothMesh *mesh);

2411 8 set_name 0 4 3065 24 PhysxClothDesc::set_name 0 1 966 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void PhysxClothDesc::set_name(char const *name);

2412 14 set_global_pos 0 4 3065 30 PhysxClothDesc::set_global_pos 0 1 967 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PhysxClothDesc::set_global_pos(LPoint3f const &pos);

2413 14 set_global_mat 0 4 3065 30 PhysxClothDesc::set_global_mat 0 1 968 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PhysxClothDesc::set_global_mat(LMatrix4f const &mat);

2414 14 set_global_hpr 0 4 3065 30 PhysxClothDesc::set_global_hpr 0 1 969 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_hpr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
void PhysxClothDesc::set_global_hpr(float h, float p, float r);

2415 13 set_thickness 0 4 3065 29 PhysxClothDesc::set_thickness 0 1 970 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_thickness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void PhysxClothDesc::set_thickness(float thickness);

2416 11 set_density 0 4 3065 27 PhysxClothDesc::set_density 0 1 971 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_density
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void PhysxClothDesc::set_density(float density);

2417 21 set_bending_stiffness 0 4 3065 37 PhysxClothDesc::set_bending_stiffness 0 1 972 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_bending_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void PhysxClothDesc::set_bending_stiffness(float stiffness);

2418 24 set_stretching_stiffness 0 4 3065 40 PhysxClothDesc::set_stretching_stiffness 0 1 973 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_stretching_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
void PhysxClothDesc::set_stretching_stiffness(float stiffness);

2419 23 set_damping_coefficient 0 4 3065 39 PhysxClothDesc::set_damping_coefficient 0 1 974 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_damping_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void PhysxClothDesc::set_damping_coefficient(float damping);

2420 12 set_friction 0 4 3065 28 PhysxClothDesc::set_friction 0 1 975 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_friction
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void PhysxClothDesc::set_friction(float friction);

2421 12 set_pressure 0 4 3065 28 PhysxClothDesc::set_pressure 0 1 976 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_pressure
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void PhysxClothDesc::set_pressure(float pressure);

2422 15 set_tear_factor 0 4 3065 31 PhysxClothDesc::set_tear_factor 0 1 977 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_tear_factor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxClothDesc::set_tear_factor(float tearFactor);

2423 21 set_solver_iterations 0 4 3065 37 PhysxClothDesc::set_solver_iterations 0 1 978 374
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_solver_iterations
//       Access: Published
//  Description: Number of solver iterations.
//               Small numbers make the simulation faster while 
//               the cloth gets less stiff.
////////////////////////////////////////////////////////////////////
69
void PhysxClothDesc::set_solver_iterations(unsigned int interations);

2424 8 set_flag 0 4 3065 24 PhysxClothDesc::set_flag 0 1 979 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual ClothFlag flags.
////////////////////////////////////////////////////////////////////
75
void PhysxClothDesc::set_flag(PhysxEnums::PhysxClothFlag flag, bool value);

2425 8 get_name 0 4 3065 24 PhysxClothDesc::get_name 0 1 980 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
char const *PhysxClothDesc::get_name(void) const;

2426 14 get_global_pos 0 4 3065 30 PhysxClothDesc::get_global_pos 0 1 981 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_global_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
LPoint3f PhysxClothDesc::get_global_pos(void) const;

2427 14 get_global_mat 0 4 3065 30 PhysxClothDesc::get_global_mat 0 1 982 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_global_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
LMatrix4f PhysxClothDesc::get_global_mat(void) const;

2428 13 get_thickness 0 4 3065 29 PhysxClothDesc::get_thickness 0 1 983 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_thickness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
float PhysxClothDesc::get_thickness(void) const;

2429 11 get_density 0 4 3065 27 PhysxClothDesc::get_density 0 1 984 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_density
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
float PhysxClothDesc::get_density(void) const;

2430 21 get_bending_stiffness 0 4 3065 37 PhysxClothDesc::get_bending_stiffness 0 1 985 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_bending_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
float PhysxClothDesc::get_bending_stiffness(void) const;

2431 24 get_stretching_stiffness 0 4 3065 40 PhysxClothDesc::get_stretching_stiffness 0 1 986 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_stretching_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
float PhysxClothDesc::get_stretching_stiffness(void) const;

2432 23 get_damping_coefficient 0 4 3065 39 PhysxClothDesc::get_damping_coefficient 0 1 987 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_damping_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
float PhysxClothDesc::get_damping_coefficient(void) const;

2433 12 get_friction 0 4 3065 28 PhysxClothDesc::get_friction 0 1 988 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_friction
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
float PhysxClothDesc::get_friction(void) const;

2434 12 get_pressure 0 4 3065 28 PhysxClothDesc::get_pressure 0 1 989 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_pressure
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
float PhysxClothDesc::get_pressure(void) const;

2435 15 get_tear_factor 0 4 3065 31 PhysxClothDesc::get_tear_factor 0 1 990 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_tear_factor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
float PhysxClothDesc::get_tear_factor(void) const;

2436 21 get_solver_iterations 0 4 3065 37 PhysxClothDesc::get_solver_iterations 0 1 991 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_solver_iterations
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxClothDesc::get_solver_iterations(void) const;

2437 8 get_flag 0 4 3065 24 PhysxClothDesc::get_flag 0 1 992 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
bool PhysxClothDesc::get_flag(PhysxEnums::PhysxClothFlag flag) const;

2438 13 PhysxMeshPool 0 4 3066 28 PhysxMeshPool::PhysxMeshPool 0 1 993 715
// Filename: physxMeshPool.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
42
inline PhysxMeshPool::PhysxMeshPool(void);

2439 14 ~PhysxMeshPool 0 4 3066 29 PhysxMeshPool::~PhysxMeshPool 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
inline PhysxMeshPool::~PhysxMeshPool(void);

2440 16 load_convex_mesh 0 4 3066 31 PhysxMeshPool::load_convex_mesh 0 1 994 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_convex_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
static PhysxConvexMesh *PhysxMeshPool::load_convex_mesh(Filename const &filename);

2441 18 load_triangle_mesh 0 4 3066 33 PhysxMeshPool::load_triangle_mesh 0 1 995 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_triangle_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
static PhysxTriangleMesh *PhysxMeshPool::load_triangle_mesh(Filename const &filename);

2442 15 load_cloth_mesh 0 4 3066 30 PhysxMeshPool::load_cloth_mesh 0 1 996 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_cloth_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
static PhysxClothMesh *PhysxMeshPool::load_cloth_mesh(Filename const &filename);

2443 19 load_soft_body_mesh 0 4 3066 34 PhysxMeshPool::load_soft_body_mesh 0 1 997 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_soft_body_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
87
static PhysxSoftBodyMesh *PhysxMeshPool::load_soft_body_mesh(Filename const &filename);

2444 19 release_convex_mesh 0 4 3066 34 PhysxMeshPool::release_convex_mesh 0 1 998 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_convex_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
static bool PhysxMeshPool::release_convex_mesh(PhysxConvexMesh *mesh);

2445 21 release_triangle_mesh 0 4 3066 36 PhysxMeshPool::release_triangle_mesh 0 1 999 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_triangle_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
static bool PhysxMeshPool::release_triangle_mesh(PhysxTriangleMesh *mesh);

2446 18 release_cloth_mesh 0 4 3066 33 PhysxMeshPool::release_cloth_mesh 0 1 1000 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_cloth_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
static bool PhysxMeshPool::release_cloth_mesh(PhysxClothMesh *mesh);

2447 22 release_soft_body_mesh 0 4 3066 37 PhysxMeshPool::release_soft_body_mesh 0 1 1001 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_soft_body_mesh
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
static bool PhysxMeshPool::release_soft_body_mesh(PhysxSoftBodyMesh *mesh);

2448 13 list_contents 0 4 3066 28 PhysxMeshPool::list_contents 0 2 1002 1003 456
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::list_content
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::list_content
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
103
static void PhysxMeshPool::list_contents(void);
static void PhysxMeshPool::list_contents(ostream &out);

2449 18 PhysxClothMeshDesc 0 4 3067 38 PhysxClothMeshDesc::PhysxClothMeshDesc 0 1 1004 721
// Filename: physxClothMeshDesc.I
// Created by:  enn0x (28Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline PhysxClothMeshDesc::PhysxClothMeshDesc(void);

2450 19 ~PhysxClothMeshDesc 0 4 3067 39 PhysxClothMeshDesc::~PhysxClothMeshDesc 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline PhysxClothMeshDesc::~PhysxClothMeshDesc(void);

2451 8 is_valid 0 4 3067 28 PhysxClothMeshDesc::is_valid 0 1 1005 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
53
inline bool PhysxClothMeshDesc::is_valid(void) const;

2452 16 set_num_vertices 0 4 3067 36 PhysxClothMeshDesc::set_num_vertices 0 1 1006 524
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this triangle mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
////////////////////////////////////////////////////////////////////
58
void PhysxClothMeshDesc::set_num_vertices(unsigned int n);

2453 10 set_vertex 0 4 3067 30 PhysxClothMeshDesc::set_vertex 0 1 1007 350
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
////////////////////////////////////////////////////////////////////
102
void PhysxClothMeshDesc::set_vertex(unsigned int idx, LPoint3f const &vert, LPoint2f const &texcoord);

2454 17 set_num_triangles 0 4 3067 37 PhysxClothMeshDesc::set_num_triangles 0 1 1008 425
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_num_triangles
//       Access: Published
//  Description: Sets the number of triangles to be stored in this
//               triangle mesh.
//
//               This method must be called before any calls to
//               set_triangle are done!
////////////////////////////////////////////////////////////////////
59
void PhysxClothMeshDesc::set_num_triangles(unsigned int n);

2455 12 set_triangle 0 4 3067 32 PhysxClothMeshDesc::set_triangle 0 1 1009 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_triangles
//       Access: Published
//  Description: Sets a single triangle, by providing the three
//               indices i1, i2, i3.
////////////////////////////////////////////////////////////////////
107
void PhysxClothMeshDesc::set_triangle(unsigned int idx, unsigned int i1, unsigned int i2, unsigned int i3);

2456 18 set_from_node_path 0 4 3067 38 PhysxClothMeshDesc::set_from_node_path 0 1 1010 676
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the triangle mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
//               - set_num_triangles
//               - set_triangle
////////////////////////////////////////////////////////////////////
64
void PhysxClothMeshDesc::set_from_node_path(NodePath const &np);

2457 24 PhysxConstraintDominance 0 4 3068 50 PhysxConstraintDominance::PhysxConstraintDominance 0 1 1011 736
// Filename: physxConstraintDominance.I
// Created by:  enn0x (22Dec09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline PhysxConstraintDominance::PhysxConstraintDominance(float d0, float d1);

2458 25 ~PhysxConstraintDominance 0 4 3068 51 PhysxConstraintDominance::~PhysxConstraintDominance 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline PhysxConstraintDominance::~PhysxConstraintDominance(void);

2459 5 get_0 0 4 3068 31 PhysxConstraintDominance::get_0 0 1 1012 0
50
float PhysxConstraintDominance::get_0(void) const;

2460 5 get_1 0 4 3068 31 PhysxConstraintDominance::get_1 0 1 1013 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::get_1
//       Access: Published
//  Description: Returns the second dominance factor.
////////////////////////////////////////////////////////////////////
50
float PhysxConstraintDominance::get_1(void) const;

2461 5 set_0 0 4 3068 31 PhysxConstraintDominance::set_0 0 1 1014 263
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::set_0
//       Access: Published
//  Description: Sets the first dominance factor.
////////////////////////////////////////////////////////////////////
47
void PhysxConstraintDominance::set_0(float d0);

2462 5 set_1 0 4 3068 31 PhysxConstraintDominance::set_1 0 1 1015 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::set_1
//       Access: Published
//  Description: Sets the second dominance factor.
////////////////////////////////////////////////////////////////////
47
void PhysxConstraintDominance::set_1(float d1);

2463 30 PhysxConvexForceFieldShapeDesc 0 4 3069 62 PhysxConvexForceFieldShapeDesc::PhysxConvexForceFieldShapeDesc 0 1 1016 748
// Filename: physxConvexForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline PhysxConvexForceFieldShapeDesc::PhysxConvexForceFieldShapeDesc(void);

2464 31 ~PhysxConvexForceFieldShapeDesc 0 4 3069 63 PhysxConvexForceFieldShapeDesc::~PhysxConvexForceFieldShapeDesc 0 0 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShapeDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline PhysxConvexForceFieldShapeDesc::~PhysxConvexForceFieldShapeDesc(void);

2465 8 set_mesh 0 4 3069 40 PhysxConvexForceFieldShapeDesc::set_mesh 0 1 1017 288
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShapeDesc::set_mesh
//       Access: Published
//  Description: Sets the convex mesh for this force field shape.
////////////////////////////////////////////////////////////////////
69
void PhysxConvexForceFieldShapeDesc::set_mesh(PhysxConvexMesh *mesh);

2466 19 PhysxConvexMeshDesc 0 4 3070 40 PhysxConvexMeshDesc::PhysxConvexMeshDesc 0 1 1018 723
// Filename: physxConvexMeshDesc.I
// Created by:  enn0x (11Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxConvexMeshDesc::PhysxConvexMeshDesc(void);

2467 20 ~PhysxConvexMeshDesc 0 4 3070 41 PhysxConvexMeshDesc::~PhysxConvexMeshDesc 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline PhysxConvexMeshDesc::~PhysxConvexMeshDesc(void);

2468 8 is_valid 0 4 3070 29 PhysxConvexMeshDesc::is_valid 0 1 1019 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
54
inline bool PhysxConvexMeshDesc::is_valid(void) const;

2469 16 set_num_vertices 0 4 3070 37 PhysxConvexMeshDesc::set_num_vertices 0 1 1020 635
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this convex mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
//
//               The number of vertices in a single convex mesh has
//               to be smaller than 256.
////////////////////////////////////////////////////////////////////
59
void PhysxConvexMeshDesc::set_num_vertices(unsigned int n);

2470 10 set_vertex 0 4 3070 31 PhysxConvexMeshDesc::set_vertex 0 1 1021 351
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
////////////////////////////////////////////////////////////////////
77
void PhysxConvexMeshDesc::set_vertex(unsigned int idx, LPoint3f const &vert);

2471 18 set_from_node_path 0 4 3070 39 PhysxConvexMeshDesc::set_from_node_path 0 1 1022 606
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the convex mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
////////////////////////////////////////////////////////////////////
65
void PhysxConvexMeshDesc::set_from_node_path(NodePath const &np);

2472 20 PhysxConvexShapeDesc 0 4 3071 42 PhysxConvexShapeDesc::PhysxConvexShapeDesc 0 1 1023 728
// Filename: physxConvexShapeDesc.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PhysxConvexShapeDesc::PhysxConvexShapeDesc(void);

2473 8 set_mesh 0 4 3071 30 PhysxConvexShapeDesc::set_mesh 0 1 1024 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShapeDesc::set_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
void PhysxConvexShapeDesc::set_mesh(PhysxConvexMesh *mesh);

2474 20 upcast_to_PhysxEnums 0 12 3072 36 PhysxJointDesc::upcast_to_PhysxEnums 0 1 1047 40
upcast from PhysxJointDesc to PhysxEnums
55
PhysxEnums *PhysxJointDesc::upcast_to_PhysxEnums(void);

2475 26 downcast_to_PhysxJointDesc 0 12 2962 38 PhysxEnums::downcast_to_PhysxJointDesc 0 1 1048 42
downcast from PhysxEnums to PhysxJointDesc
61
PhysxJointDesc *PhysxEnums::downcast_to_PhysxJointDesc(void);

2476 14 set_to_default 0 4 3072 30 PhysxJointDesc::set_to_default 0 1 1025 0
54
virtual void PhysxJointDesc::set_to_default(void) = 0;

2477 8 is_valid 0 4 3072 24 PhysxJointDesc::is_valid 0 1 1026 0
54
virtual bool PhysxJointDesc::is_valid(void) const = 0;

2478 8 set_name 0 4 3072 24 PhysxJointDesc::set_name 0 1 1027 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
////////////////////////////////////////////////////////////////////
48
void PhysxJointDesc::set_name(char const *name);

2479 14 set_joint_flag 0 4 3072 30 PhysxJointDesc::set_joint_flag 0 1 1028 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_joint_flag
//       Access: Published
//  Description: Set or clear a single JointFlag.
////////////////////////////////////////////////////////////////////
81
void PhysxJointDesc::set_joint_flag(PhysxEnums::PhysxJointFlag flag, bool value);

2480 13 set_max_force 0 4 3072 29 PhysxJointDesc::set_max_force 0 1 1029 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_max_force
//       Access: Published
//  Description: Set a possible debug name.
////////////////////////////////////////////////////////////////////
48
void PhysxJointDesc::set_max_force(float force);

2481 14 set_max_torque 0 4 3072 30 PhysxJointDesc::set_max_torque 0 1 1030 366
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_max_torque
//       Access: Published
//  Description: Set the maximum angular force (torque) that the
//               joint can withstand before breaking, must be
//               positive.
////////////////////////////////////////////////////////////////////
50
void PhysxJointDesc::set_max_torque(float torque);

2482 31 set_solver_extrapolation_factor 0 4 3072 47 PhysxJointDesc::set_solver_extrapolation_factor 0 1 1031 323
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_solver_extrapolation_factor
//       Access: Published
//  Description: Set the extrapolation factor for solving joint
//               constraints.
////////////////////////////////////////////////////////////////////
67
void PhysxJointDesc::set_solver_extrapolation_factor(float factor);

2483 15 set_global_axis 0 4 3072 31 PhysxJointDesc::set_global_axis 0 1 1032 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_global_axis
//       Access: Published
//  Description: Set the local axis/normal using a world space axis.
////////////////////////////////////////////////////////////////////
60
void PhysxJointDesc::set_global_axis(LVector3f const &axis);

2484 17 set_global_anchor 0 4 3072 33 PhysxJointDesc::set_global_anchor 0 1 1033 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_global_anchor
//       Access: Published
//  Description: Set the anchor using a world space point.
////////////////////////////////////////////////////////////////////
63
void PhysxJointDesc::set_global_anchor(LPoint3f const &anchor);

2485 16 set_local_normal 0 4 3072 32 PhysxJointDesc::set_local_normal 0 1 1034 372
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_normal
//       Access: Published
//  Description: Set the X axis of joint space, in actor[i]'s space,
//               orthogonal to localAxis[i].
//               idx must be either 0 or 1.
////////////////////////////////////////////////////////////////////
81
void PhysxJointDesc::set_local_normal(unsigned int idx, LVector3f const &normal);

2486 14 set_local_axis 0 4 3072 30 PhysxJointDesc::set_local_axis 0 1 1035 382
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_axis
//       Access: Published
//  Description: Set the Z axis of joint space, in actor[i]'s space.
//               This is the primary axis of the joint. 
//               idx must be either 0 or 1.
////////////////////////////////////////////////////////////////////
77
void PhysxJointDesc::set_local_axis(unsigned int idx, LVector3f const &axis);

2487 16 set_local_anchor 0 4 3072 32 PhysxJointDesc::set_local_anchor 0 1 1036 330
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_anchor
//       Access: Published
//  Description: Set the attachment point of joint in actor[i]'s
//               space. idx must be either 0 or 1.
////////////////////////////////////////////////////////////////////
80
void PhysxJointDesc::set_local_anchor(unsigned int idx, LPoint3f const &anchor);

2488 9 set_actor 0 4 3072 25 PhysxJointDesc::set_actor 0 1 1037 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_actor
//       Access: Published
//  Description: Set the two actors connected by the joint.
//               idx must be either 0 or 1.
////////////////////////////////////////////////////////////////////
74
void PhysxJointDesc::set_actor(unsigned int idx, PhysxActor const &actor);

2489 8 get_name 0 4 3072 24 PhysxJointDesc::get_name 0 1 1038 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
char const *PhysxJointDesc::get_name(void) const;

2490 14 get_joint_flag 0 4 3072 30 PhysxJointDesc::get_joint_flag 0 1 1039 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_joint_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
bool PhysxJointDesc::get_joint_flag(PhysxEnums::PhysxJointFlag flag) const;

2491 13 get_max_force 0 4 3072 29 PhysxJointDesc::get_max_force 0 1 1040 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_max_force
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
float PhysxJointDesc::get_max_force(void) const;

2492 14 get_max_torque 0 4 3072 30 PhysxJointDesc::get_max_torque 0 1 1041 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_max_torque
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
float PhysxJointDesc::get_max_torque(void) const;

2493 31 get_solver_extrapolation_factor 0 4 3072 47 PhysxJointDesc::get_solver_extrapolation_factor 0 1 1042 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_solver_extrapolation_factor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
float PhysxJointDesc::get_solver_extrapolation_factor(void) const;

2494 16 get_local_normal 0 4 3072 32 PhysxJointDesc::get_local_normal 0 1 1043 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_normal
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
LVector3f PhysxJointDesc::get_local_normal(unsigned int idx) const;

2495 14 get_local_axis 0 4 3072 30 PhysxJointDesc::get_local_axis 0 1 1044 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_axis
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
LVector3f PhysxJointDesc::get_local_axis(unsigned int idx) const;

2496 16 get_local_anchor 0 4 3072 32 PhysxJointDesc::get_local_anchor 0 1 1045 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_anchor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
LPoint3f PhysxJointDesc::get_local_anchor(unsigned int idx) const;

2497 9 get_actor 0 4 3072 25 PhysxJointDesc::get_actor 0 1 1046 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_actor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxActor *PhysxJointDesc::get_actor(unsigned int idx) const;

2498 25 PhysxCylindricalJointDesc 0 4 3073 52 PhysxCylindricalJointDesc::PhysxCylindricalJointDesc 0 1 1049 738
// Filename: physxCylindricalJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCylindricalJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline PhysxCylindricalJointDesc::PhysxCylindricalJointDesc(void);

2499 26 ~PhysxCylindricalJointDesc 0 4 3073 53 PhysxCylindricalJointDesc::~PhysxCylindricalJointDesc 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxCylindricalJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline PhysxCylindricalJointDesc::~PhysxCylindricalJointDesc(void);

2500 16 PhysxD6JointDesc 0 4 3074 34 PhysxD6JointDesc::PhysxD6JointDesc 0 1 1050 720
// Filename: physxD6JointDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PhysxD6JointDesc::PhysxD6JointDesc(void);

2501 17 ~PhysxD6JointDesc 0 4 3074 35 PhysxD6JointDesc::~PhysxD6JointDesc 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline PhysxD6JointDesc::~PhysxD6JointDesc(void);

2502 8 set_flag 0 4 3074 26 PhysxD6JointDesc::set_flag 0 1 1051 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single D6JointFlag flag.
////////////////////////////////////////////////////////////////////
79
void PhysxD6JointDesc::set_flag(PhysxEnums::PhysxD6JointFlag flag, bool value);

2503 23 set_projection_distance 0 4 3074 41 PhysxD6JointDesc::set_projection_distance 0 1 1052 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
void PhysxD6JointDesc::set_projection_distance(float distance);

2504 20 set_projection_angle 0 4 3074 38 PhysxD6JointDesc::set_projection_angle 0 1 1053 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_angle
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PhysxD6JointDesc::set_projection_angle(float angle);

2505 14 set_gear_ratio 0 4 3074 32 PhysxD6JointDesc::set_gear_ratio 0 1 1054 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_gear_ratio
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void PhysxD6JointDesc::set_gear_ratio(float ratio);

2506 18 set_drive_position 0 4 3074 36 PhysxD6JointDesc::set_drive_position 0 1 1055 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_position
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
void PhysxD6JointDesc::set_drive_position(LPoint3f const &pos);

2507 25 set_drive_linear_velocity 0 4 3074 43 PhysxD6JointDesc::set_drive_linear_velocity 0 1 1056 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_linear_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void PhysxD6JointDesc::set_drive_linear_velocity(LVector3f const &v);

2508 26 set_drive_angular_velocity 0 4 3074 44 PhysxD6JointDesc::set_drive_angular_velocity 0 1 1057 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_angular_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
void PhysxD6JointDesc::set_drive_angular_velocity(LVector3f const &v);

2509 21 set_drive_orientation 0 4 3074 39 PhysxD6JointDesc::set_drive_orientation 0 1 1058 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_orientation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void PhysxD6JointDesc::set_drive_orientation(LQuaternionf const &quat);

2510 19 set_projection_mode 0 4 3074 37 PhysxD6JointDesc::set_projection_mode 0 1 1059 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
////////////////////////////////////////////////////////////////////
81
void PhysxD6JointDesc::set_projection_mode(PhysxEnums::PhysxProjectionMode mode);

2511 12 set_x_motion 0 4 3074 30 PhysxD6JointDesc::set_x_motion 0 1 1060 0
76
void PhysxD6JointDesc::set_x_motion(PhysxEnums::PhysxD6JointMotion xMotion);

2512 12 set_y_motion 0 4 3074 30 PhysxD6JointDesc::set_y_motion 0 1 1061 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_y_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void PhysxD6JointDesc::set_y_motion(PhysxEnums::PhysxD6JointMotion yMotion);

2513 12 set_z_motion 0 4 3074 30 PhysxD6JointDesc::set_z_motion 0 1 1062 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_z_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void PhysxD6JointDesc::set_z_motion(PhysxEnums::PhysxD6JointMotion zMotion);

2514 17 set_swing1_motion 0 4 3074 35 PhysxD6JointDesc::set_swing1_motion 0 1 1063 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing1_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
void PhysxD6JointDesc::set_swing1_motion(PhysxEnums::PhysxD6JointMotion xMotion);

2515 17 set_swing2_motion 0 4 3074 35 PhysxD6JointDesc::set_swing2_motion 0 1 1064 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing2_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
void PhysxD6JointDesc::set_swing2_motion(PhysxEnums::PhysxD6JointMotion yMotion);

2516 16 set_twist_motion 0 4 3074 34 PhysxD6JointDesc::set_twist_motion 0 1 1065 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
void PhysxD6JointDesc::set_twist_motion(PhysxEnums::PhysxD6JointMotion zMotion);

2517 11 set_x_drive 0 4 3074 29 PhysxD6JointDesc::set_x_drive 0 1 1066 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_x_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void PhysxD6JointDesc::set_x_drive(PhysxJointDriveDesc const &drive);

2518 11 set_y_drive 0 4 3074 29 PhysxD6JointDesc::set_y_drive 0 1 1067 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_y_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void PhysxD6JointDesc::set_y_drive(PhysxJointDriveDesc const &drive);

2519 11 set_z_drive 0 4 3074 29 PhysxD6JointDesc::set_z_drive 0 1 1068 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_z_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void PhysxD6JointDesc::set_z_drive(PhysxJointDriveDesc const &drive);

2520 15 set_swing_drive 0 4 3074 33 PhysxD6JointDesc::set_swing_drive 0 1 1069 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void PhysxD6JointDesc::set_swing_drive(PhysxJointDriveDesc const &drive);

2521 15 set_twist_drive 0 4 3074 33 PhysxD6JointDesc::set_twist_drive 0 1 1070 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void PhysxD6JointDesc::set_twist_drive(PhysxJointDriveDesc const &drive);

2522 15 set_slerp_drive 0 4 3074 33 PhysxD6JointDesc::set_slerp_drive 0 1 1071 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_slerp_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void PhysxD6JointDesc::set_slerp_drive(PhysxJointDriveDesc const &drive);

2523 16 set_linear_limit 0 4 3074 34 PhysxD6JointDesc::set_linear_limit 0 1 1072 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_linear_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void PhysxD6JointDesc::set_linear_limit(PhysxJointLimitSoftDesc const &limit);

2524 16 set_swing1_limit 0 4 3074 34 PhysxD6JointDesc::set_swing1_limit 0 1 1073 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing1_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void PhysxD6JointDesc::set_swing1_limit(PhysxJointLimitSoftDesc const &limit);

2525 16 set_swing2_limit 0 4 3074 34 PhysxD6JointDesc::set_swing2_limit 0 1 1074 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing2_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void PhysxD6JointDesc::set_swing2_limit(PhysxJointLimitSoftDesc const &limit);

2526 19 set_twist_limit_low 0 4 3074 37 PhysxD6JointDesc::set_twist_limit_low 0 1 1075 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_limit_low
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
void PhysxD6JointDesc::set_twist_limit_low(PhysxJointLimitSoftDesc const &limit);

2527 20 set_twist_limit_high 0 4 3074 38 PhysxD6JointDesc::set_twist_limit_high 0 1 1076 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_limit_high
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
void PhysxD6JointDesc::set_twist_limit_high(PhysxJointLimitSoftDesc const &limit);

2528 8 get_flag 0 4 3074 26 PhysxD6JointDesc::get_flag 0 1 1077 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
bool PhysxD6JointDesc::get_flag(PhysxEnums::PhysxD6JointFlag flag) const;

2529 23 get_projection_distance 0 4 3074 41 PhysxD6JointDesc::get_projection_distance 0 1 1078 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
float PhysxD6JointDesc::get_projection_distance(void) const;

2530 20 get_projection_angle 0 4 3074 38 PhysxD6JointDesc::get_projection_angle 0 1 1079 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_angle
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
float PhysxD6JointDesc::get_projection_angle(void) const;

2531 14 get_gear_ratio 0 4 3074 32 PhysxD6JointDesc::get_gear_ratio 0 1 1080 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_gear_ratio
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
float PhysxD6JointDesc::get_gear_ratio(void) const;

2532 18 get_drive_position 0 4 3074 36 PhysxD6JointDesc::get_drive_position 0 1 1081 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_position
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
LPoint3f PhysxD6JointDesc::get_drive_position(void) const;

2533 25 get_drive_linear_velocity 0 4 3074 43 PhysxD6JointDesc::get_drive_linear_velocity 0 1 1082 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_linear_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
LVector3f PhysxD6JointDesc::get_drive_linear_velocity(void) const;

2534 26 get_drive_angular_velocity 0 4 3074 44 PhysxD6JointDesc::get_drive_angular_velocity 0 1 1083 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_angular_velocity
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
LVector3f PhysxD6JointDesc::get_drive_angular_velocity(void) const;

2535 21 get_drive_orientation 0 4 3074 39 PhysxD6JointDesc::get_drive_orientation 0 1 1084 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_orientation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
LQuaternionf PhysxD6JointDesc::get_drive_orientation(void) const;

2536 19 get_projection_mode 0 4 3074 37 PhysxD6JointDesc::get_projection_mode 0 1 1085 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
PhysxEnums::PhysxProjectionMode PhysxD6JointDesc::get_projection_mode(void) const;

2537 12 get_x_motion 0 4 3074 30 PhysxD6JointDesc::get_x_motion 0 1 1086 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_x_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_x_motion(void) const;

2538 12 get_y_motion 0 4 3074 30 PhysxD6JointDesc::get_y_motion 0 1 1087 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_y_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_y_motion(void) const;

2539 12 get_z_motion 0 4 3074 30 PhysxD6JointDesc::get_z_motion 0 1 1088 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_z_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_z_motion(void) const;

2540 17 get_swing1_motion 0 4 3074 35 PhysxD6JointDesc::get_swing1_motion 0 1 1089 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing1_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
79
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_swing1_motion(void) const;

2541 17 get_swing2_motion 0 4 3074 35 PhysxD6JointDesc::get_swing2_motion 0 1 1090 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing2_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
79
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_swing2_motion(void) const;

2542 16 get_twist_motion 0 4 3074 34 PhysxD6JointDesc::get_twist_motion 0 1 1091 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_motion
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
PhysxEnums::PhysxD6JointMotion PhysxD6JointDesc::get_twist_motion(void) const;

2543 11 get_x_drive 0 4 3074 29 PhysxD6JointDesc::get_x_drive 0 1 1092 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_x_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxJointDriveDesc PhysxD6JointDesc::get_x_drive(void) const;

2544 11 get_y_drive 0 4 3074 29 PhysxD6JointDesc::get_y_drive 0 1 1093 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_y_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxJointDriveDesc PhysxD6JointDesc::get_y_drive(void) const;

2545 11 get_z_drive 0 4 3074 29 PhysxD6JointDesc::get_z_drive 0 1 1094 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_z_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxJointDriveDesc PhysxD6JointDesc::get_z_drive(void) const;

2546 15 get_swing_drive 0 4 3074 33 PhysxD6JointDesc::get_swing_drive 0 1 1095 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
PhysxJointDriveDesc PhysxD6JointDesc::get_swing_drive(void) const;

2547 15 get_twist_drive 0 4 3074 33 PhysxD6JointDesc::get_twist_drive 0 1 1096 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
PhysxJointDriveDesc PhysxD6JointDesc::get_twist_drive(void) const;

2548 15 get_slerp_drive 0 4 3074 33 PhysxD6JointDesc::get_slerp_drive 0 1 1097 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_slerp_drive
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
PhysxJointDriveDesc PhysxD6JointDesc::get_slerp_drive(void) const;

2549 16 get_linear_limit 0 4 3074 34 PhysxD6JointDesc::get_linear_limit 0 1 1098 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_linear_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
PhysxJointLimitSoftDesc PhysxD6JointDesc::get_linear_limit(void) const;

2550 16 get_swing1_limit 0 4 3074 34 PhysxD6JointDesc::get_swing1_limit 0 1 1099 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing1_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
PhysxJointLimitSoftDesc PhysxD6JointDesc::get_swing1_limit(void) const;

2551 16 get_swing2_limit 0 4 3074 34 PhysxD6JointDesc::get_swing2_limit 0 1 1100 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing2_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
PhysxJointLimitSoftDesc PhysxD6JointDesc::get_swing2_limit(void) const;

2552 19 get_twist_limit_low 0 4 3074 37 PhysxD6JointDesc::get_twist_limit_low 0 1 1101 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_limit_low
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
PhysxJointLimitSoftDesc PhysxD6JointDesc::get_twist_limit_low(void) const;

2553 20 get_twist_limit_high 0 4 3074 38 PhysxD6JointDesc::get_twist_limit_high 0 1 1102 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_limit_high
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
PhysxJointLimitSoftDesc PhysxD6JointDesc::get_twist_limit_high(void) const;

2554 19 PhysxJointDriveDesc 0 4 3075 40 PhysxJointDriveDesc::PhysxJointDriveDesc 0 2 1103 1104 959
// Filename: physxJointDriveDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
149
inline PhysxJointDriveDesc::PhysxJointDriveDesc(void);
inline PhysxJointDriveDesc::PhysxJointDriveDesc(float sping, float damping, float forceLimit);

2555 20 ~PhysxJointDriveDesc 0 4 3075 41 PhysxJointDriveDesc::~PhysxJointDriveDesc 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline PhysxJointDriveDesc::~PhysxJointDriveDesc(void);

2556 14 set_drive_type 0 4 3075 35 PhysxJointDriveDesc::set_drive_type 0 1 1105 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_drive_type
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
void PhysxJointDriveDesc::set_drive_type(PhysxEnums::PhysxD6JointDriveType type);

2557 10 set_spring 0 4 3075 31 PhysxJointDriveDesc::set_spring 0 1 1106 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void PhysxJointDriveDesc::set_spring(float spring);

2558 11 set_damping 0 4 3075 32 PhysxJointDriveDesc::set_damping 0 1 1107 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_damping
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void PhysxJointDriveDesc::set_damping(float damping);

2559 15 set_force_limit 0 4 3075 36 PhysxJointDriveDesc::set_force_limit 0 1 1108 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_force_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxJointDriveDesc::set_force_limit(float limit);

2560 14 get_drive_type 0 4 3075 35 PhysxJointDriveDesc::get_drive_type 0 1 1109 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_drive_type
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
PhysxEnums::PhysxD6JointDriveType PhysxJointDriveDesc::get_drive_type(void) const;

2561 10 get_spring 0 4 3075 31 PhysxJointDriveDesc::get_spring 0 1 1110 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
float PhysxJointDriveDesc::get_spring(void) const;

2562 11 get_damping 0 4 3075 32 PhysxJointDriveDesc::get_damping 0 1 1111 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_damping
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
float PhysxJointDriveDesc::get_damping(void) const;

2563 15 get_force_limit 0 4 3075 36 PhysxJointDriveDesc::get_force_limit 0 1 1112 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_force_limit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
float PhysxJointDriveDesc::get_force_limit(void) const;

2564 23 PhysxJointLimitSoftDesc 0 4 3076 48 PhysxJointLimitSoftDesc::PhysxJointLimitSoftDesc 0 2 1113 1114 971
// Filename: physxJointLimitSoftDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
180
inline PhysxJointLimitSoftDesc::PhysxJointLimitSoftDesc(void);
inline PhysxJointLimitSoftDesc::PhysxJointLimitSoftDesc(float value, float restitution, float spring, float damping);

2565 24 ~PhysxJointLimitSoftDesc 0 4 3076 49 PhysxJointLimitSoftDesc::~PhysxJointLimitSoftDesc 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline PhysxJointLimitSoftDesc::~PhysxJointLimitSoftDesc(void);

2566 9 set_value 0 4 3076 34 PhysxJointLimitSoftDesc::set_value 0 1 1115 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void PhysxJointLimitSoftDesc::set_value(float value);

2567 15 set_restitution 0 4 3076 40 PhysxJointLimitSoftDesc::set_restitution 0 1 1116 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_restitution
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void PhysxJointLimitSoftDesc::set_restitution(float restitution);

2568 10 set_spring 0 4 3076 35 PhysxJointLimitSoftDesc::set_spring 0 1 1117 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxJointLimitSoftDesc::set_spring(float spring);

2569 11 set_damping 0 4 3076 36 PhysxJointLimitSoftDesc::set_damping 0 1 1118 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_damping
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PhysxJointLimitSoftDesc::set_damping(float damping);

2570 9 get_value 0 4 3076 34 PhysxJointLimitSoftDesc::get_value 0 1 1119 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
float PhysxJointLimitSoftDesc::get_value(void) const;

2571 15 get_restitution 0 4 3076 40 PhysxJointLimitSoftDesc::get_restitution 0 1 1120 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_restitution
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
float PhysxJointLimitSoftDesc::get_restitution(void) const;

2572 10 get_spring 0 4 3076 35 PhysxJointLimitSoftDesc::get_spring 0 1 1121 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
float PhysxJointLimitSoftDesc::get_spring(void) const;

2573 11 get_damping 0 4 3076 36 PhysxJointLimitSoftDesc::get_damping 0 1 1122 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_damping
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
float PhysxJointLimitSoftDesc::get_damping(void) const;

2574 22 PhysxDistanceJointDesc 0 4 3077 46 PhysxDistanceJointDesc::PhysxDistanceJointDesc 0 1 1123 732
// Filename: physxDistanceJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxDistanceJointDesc::PhysxDistanceJointDesc(void);

2575 23 ~PhysxDistanceJointDesc 0 4 3077 47 PhysxDistanceJointDesc::~PhysxDistanceJointDesc 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline PhysxDistanceJointDesc::~PhysxDistanceJointDesc(void);

2576 16 set_max_distance 0 4 3077 40 PhysxDistanceJointDesc::set_max_distance 0 1 1124 0
62
void PhysxDistanceJointDesc::set_max_distance(float distance);

2577 16 set_min_distance 0 4 3077 40 PhysxDistanceJointDesc::set_min_distance 0 1 1125 334
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_min_distance
//       Access: Published
//  Description: Sets the minimum rest length of the rope or rod
//               between the two anchor points
////////////////////////////////////////////////////////////////////
62
void PhysxDistanceJointDesc::set_min_distance(float distance);

2578 10 set_spring 0 4 3077 34 PhysxDistanceJointDesc::set_spring 0 1 1126 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_spring
//       Access: Published
//  Description: Makes the joint springy. The spring.targetValue
//               is not used. 
////////////////////////////////////////////////////////////////////
71
void PhysxDistanceJointDesc::set_spring(PhysxSpringDesc const &spring);

2579 8 set_flag 0 4 3077 32 PhysxDistanceJointDesc::set_flag 0 1 1127 279
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single DistanceJointFlag flag.
////////////////////////////////////////////////////////////////////
91
void PhysxDistanceJointDesc::set_flag(PhysxEnums::PhysxDistanceJointFlag flag, bool value);

2580 16 get_max_distance 0 4 3077 40 PhysxDistanceJointDesc::get_max_distance 0 1 1128 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_max_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
float PhysxDistanceJointDesc::get_max_distance(void) const;

2581 16 get_min_distance 0 4 3077 40 PhysxDistanceJointDesc::get_min_distance 0 1 1129 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_min_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
float PhysxDistanceJointDesc::get_min_distance(void) const;

2582 8 get_flag 0 4 3077 32 PhysxDistanceJointDesc::get_flag 0 1 1130 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_flag
//       Access: Published
//  Description: Return a single DistanceJointFlag flag.
////////////////////////////////////////////////////////////////////
85
bool PhysxDistanceJointDesc::get_flag(PhysxEnums::PhysxDistanceJointFlag flag) const;

2583 10 get_spring 0 4 3077 34 PhysxDistanceJointDesc::get_spring 0 1 1131 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
PhysxSpringDesc PhysxDistanceJointDesc::get_spring(void) const;

2584 15 PhysxSpringDesc 0 4 3078 32 PhysxSpringDesc::PhysxSpringDesc 0 4 1132 1133 1134 1135 947
// Filename: physxSpringDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
146
inline PhysxSpringDesc::PhysxSpringDesc(void);
inline PhysxSpringDesc::PhysxSpringDesc(float spring, float damper = (0), float targetValue = (0));

2585 16 ~PhysxSpringDesc 0 4 3078 33 PhysxSpringDesc::~PhysxSpringDesc 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline PhysxSpringDesc::~PhysxSpringDesc(void);

2586 10 set_spring 0 4 3078 27 PhysxSpringDesc::set_spring 0 1 1136 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void PhysxSpringDesc::set_spring(float spring);

2587 10 set_damper 0 4 3078 27 PhysxSpringDesc::set_damper 0 1 1137 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_damper
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void PhysxSpringDesc::set_damper(float damper);

2588 16 set_target_value 0 4 3078 33 PhysxSpringDesc::set_target_value 0 1 1138 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_target_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void PhysxSpringDesc::set_target_value(float target);

2589 10 get_spring 0 4 3078 27 PhysxSpringDesc::get_spring 0 1 1139 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
float PhysxSpringDesc::get_spring(void) const;

2590 10 get_damper 0 4 3078 27 PhysxSpringDesc::get_damper 0 1 1140 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_damper
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
float PhysxSpringDesc::get_damper(void) const;

2591 16 get_target_value 0 4 3078 33 PhysxSpringDesc::get_target_value 0 1 1141 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_target_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
float PhysxSpringDesc::get_target_value(void) const;

2592 19 PhysxFixedJointDesc 0 4 3079 40 PhysxFixedJointDesc::PhysxFixedJointDesc 0 1 1142 726
// Filename: physxFixedJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxFixedJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxFixedJointDesc::PhysxFixedJointDesc(void);

2593 20 ~PhysxFixedJointDesc 0 4 3079 41 PhysxFixedJointDesc::~PhysxFixedJointDesc 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxFixedJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline PhysxFixedJointDesc::~PhysxFixedJointDesc(void);

2594 19 PhysxForceFieldDesc 0 4 3080 40 PhysxForceFieldDesc::PhysxForceFieldDesc 0 1 1143 726
// Filename: physxForceFieldDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxForceFieldDesc::PhysxForceFieldDesc(void);

2595 20 ~PhysxForceFieldDesc 0 4 3080 41 PhysxForceFieldDesc::~PhysxForceFieldDesc 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline PhysxForceFieldDesc::~PhysxForceFieldDesc(void);

2596 14 set_to_default 0 4 3080 35 PhysxForceFieldDesc::set_to_default 0 1 1144 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
54
inline void PhysxForceFieldDesc::set_to_default(void);

2597 8 is_valid 0 4 3080 29 PhysxForceFieldDesc::is_valid 0 1 1145 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
54
inline bool PhysxForceFieldDesc::is_valid(void) const;

2598 8 set_name 0 4 3080 29 PhysxForceFieldDesc::set_name 0 1 1146 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void PhysxForceFieldDesc::set_name(char const *name);

2599 7 set_pos 0 4 3080 28 PhysxForceFieldDesc::set_pos 0 1 1147 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxForceFieldDesc::set_pos(LPoint3f const &pos);

2600 7 set_mat 0 4 3080 28 PhysxForceFieldDesc::set_mat 0 1 1148 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
void PhysxForceFieldDesc::set_mat(LMatrix4f const &mat);

2601 7 set_hpr 0 4 3080 28 PhysxForceFieldDesc::set_hpr 0 1 1149 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_hpr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
void PhysxForceFieldDesc::set_hpr(float h, float p, float r);

2602 15 set_coordinates 0 4 3080 36 PhysxForceFieldDesc::set_coordinates 0 1 1150 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_coordinates
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
94
void PhysxForceFieldDesc::set_coordinates(PhysxEnums::PhysxForceFieldCoordinates coordinates);

2603 9 set_actor 0 4 3080 30 PhysxForceFieldDesc::set_actor 0 1 1151 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_actor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxForceFieldDesc::set_actor(PhysxActor *actor);

2604 19 set_kernel_constant 0 4 3080 40 PhysxForceFieldDesc::set_kernel_constant 0 1 1152 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_constant
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void PhysxForceFieldDesc::set_kernel_constant(LVector3f const &constant);

2605 26 set_kernel_position_target 0 4 3080 47 PhysxForceFieldDesc::set_kernel_position_target 0 1 1153 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_position_target
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
77
void PhysxForceFieldDesc::set_kernel_position_target(LPoint3f const &target);

2606 30 set_kernel_position_multiplier 0 4 3080 51 PhysxForceFieldDesc::set_kernel_position_multiplier 0 1 1154 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_position_multiplier
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
void PhysxForceFieldDesc::set_kernel_position_multiplier(LMatrix3f const &multiplier);

2607 26 set_kernel_velocity_target 0 4 3080 47 PhysxForceFieldDesc::set_kernel_velocity_target 0 1 1155 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_velocity_target
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void PhysxForceFieldDesc::set_kernel_velocity_target(LVector3f const &target);

2608 30 set_kernel_velocity_multiplier 0 4 3080 51 PhysxForceFieldDesc::set_kernel_velocity_multiplier 0 1 1156 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_velocity_multiplier
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
void PhysxForceFieldDesc::set_kernel_velocity_multiplier(LMatrix3f const &multiplier);

2609 23 set_kernel_torus_radius 0 4 3080 44 PhysxForceFieldDesc::set_kernel_torus_radius 0 1 1157 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_torus_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
void PhysxForceFieldDesc::set_kernel_torus_radius(float radius);

2610 25 set_kernel_falloff_linear 0 4 3080 46 PhysxForceFieldDesc::set_kernel_falloff_linear 0 1 1158 246
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_falloff_linear
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void PhysxForceFieldDesc::set_kernel_falloff_linear(LVector3f const &falloff);

2611 28 set_kernel_falloff_quadratic 0 4 3080 49 PhysxForceFieldDesc::set_kernel_falloff_quadratic 0 1 1159 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_falloff_quadratic
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
void PhysxForceFieldDesc::set_kernel_falloff_quadratic(LVector3f const &falloff);

2612 16 set_kernel_noise 0 4 3080 37 PhysxForceFieldDesc::set_kernel_noise 0 1 1160 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_noise
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void PhysxForceFieldDesc::set_kernel_noise(LVector3f const &noise);

2613 23 add_include_group_shape 0 4 3080 44 PhysxForceFieldDesc::add_include_group_shape 0 1 1161 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::add_include_group_shape
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
87
void PhysxForceFieldDesc::add_include_group_shape(PhysxForceFieldShapeDesc &shapeDesc);

2614 15 add_shape_group 0 4 3080 36 PhysxForceFieldDesc::add_shape_group 0 1 1162 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::add_shape_group
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void PhysxForceFieldDesc::add_shape_group(PhysxForceFieldShapeGroup *group);

2615 29 PhysxForceFieldShapeGroupDesc 0 4 3081 60 PhysxForceFieldShapeGroupDesc::PhysxForceFieldShapeGroupDesc 0 1 1163 746
// Filename: physxForceFieldShapeGroupDesc.I
// Created by:  enn0x (11Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline PhysxForceFieldShapeGroupDesc::PhysxForceFieldShapeGroupDesc(void);

2616 30 ~PhysxForceFieldShapeGroupDesc 0 4 3081 61 PhysxForceFieldShapeGroupDesc::~PhysxForceFieldShapeGroupDesc 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline PhysxForceFieldShapeGroupDesc::~PhysxForceFieldShapeGroupDesc(void);

2617 14 set_to_default 0 4 3081 45 PhysxForceFieldShapeGroupDesc::set_to_default 0 1 1164 283
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
64
inline void PhysxForceFieldShapeGroupDesc::set_to_default(void);

2618 8 is_valid 0 4 3081 39 PhysxForceFieldShapeGroupDesc::is_valid 0 1 1165 279
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
64
inline bool PhysxForceFieldShapeGroupDesc::is_valid(void) const;

2619 9 add_shape 0 4 3081 40 PhysxForceFieldShapeGroupDesc::add_shape 0 1 1166 331
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::add_shape
//       Access: Published
//  Description: Adds a shape to the list of force field shapes
//               composing this shape group.
////////////////////////////////////////////////////////////////////
78
void PhysxForceFieldShapeGroupDesc::add_shape(PhysxForceFieldShapeDesc &desc);

2620 8 set_name 0 4 3081 39 PhysxForceFieldShapeGroupDesc::set_name 0 1 1167 317
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::set_name
//       Access: Published
//  Description: Sets the optional debug name for the force field
//               shape group.
////////////////////////////////////////////////////////////////////
63
void PhysxForceFieldShapeGroupDesc::set_name(char const *name);

2621 8 set_flag 0 4 3081 39 PhysxForceFieldShapeGroupDesc::set_flag 0 1 1168 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual force field shape group
//               flags.
////////////////////////////////////////////////////////////////////
105
void PhysxForceFieldShapeGroupDesc::set_flag(PhysxEnums::PhysxForceFieldShapeGroupFlag flag, bool value);

2622 8 get_name 0 4 3081 39 PhysxForceFieldShapeGroupDesc::get_name 0 1 1169 321
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::get_name
//       Access: Published
//  Description: Returns the optional debug name for this force
//               field shape group.
////////////////////////////////////////////////////////////////////
64
char const *PhysxForceFieldShapeGroupDesc::get_name(void) const;

2623 8 get_flag 0 4 3081 39 PhysxForceFieldShapeGroupDesc::get_flag 0 1 1170 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::get_flag
//       Access: Published
//  Description: Returns the specified force field shape group
//               flag.
////////////////////////////////////////////////////////////////////
99
bool PhysxForceFieldShapeGroupDesc::get_flag(PhysxEnums::PhysxForceFieldShapeGroupFlag flag) const;

2624 20 PhysxHeightFieldDesc 0 4 3082 42 PhysxHeightFieldDesc::PhysxHeightFieldDesc 0 1 1171 728
// Filename: physxHeightFieldDesc.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PhysxHeightFieldDesc::PhysxHeightFieldDesc(void);

2625 21 ~PhysxHeightFieldDesc 0 4 3082 43 PhysxHeightFieldDesc::~PhysxHeightFieldDesc 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PhysxHeightFieldDesc::~PhysxHeightFieldDesc(void);

2626 14 set_to_default 0 4 3082 36 PhysxHeightFieldDesc::set_to_default 0 1 1172 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
55
inline void PhysxHeightFieldDesc::set_to_default(void);

2627 8 is_valid 0 4 3082 30 PhysxHeightFieldDesc::is_valid 0 1 1173 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
55
inline bool PhysxHeightFieldDesc::is_valid(void) const;

2628 8 set_size 0 4 3082 30 PhysxHeightFieldDesc::set_size 0 1 1174 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_size
//       Access: Private
//  Description:
////////////////////////////////////////////////////////////////////
92
inline void PhysxHeightFieldDesc::set_size(unsigned int num_rows, unsigned int num_columns);

2629 9 set_image 0 4 3082 31 PhysxHeightFieldDesc::set_image 0 2 1175 1176 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_image
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
100
void PhysxHeightFieldDesc::set_image(PNMImage const &image, unsigned short int materialIndex = (0));

2630 13 set_thickness 0 4 3082 35 PhysxHeightFieldDesc::set_thickness 0 1 1177 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_thickness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PhysxHeightFieldDesc::set_thickness(float thickness);

2631 25 set_convex_edge_threshold 0 4 3082 47 PhysxHeightFieldDesc::set_convex_edge_threshold 0 1 1178 0
70
void PhysxHeightFieldDesc::set_convex_edge_threshold(float threshold);

2632 10 set_height 0 4 3082 32 PhysxHeightFieldDesc::set_height 0 1 1179 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
void PhysxHeightFieldDesc::set_height(unsigned int row, unsigned int column, short int height);

2633 13 set_tess_flag 0 4 3082 35 PhysxHeightFieldDesc::set_tess_flag 0 1 1180 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_tess_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
void PhysxHeightFieldDesc::set_tess_flag(unsigned int row, unsigned int column, unsigned short int value);

2634 18 set_material_index 0 4 3082 40 PhysxHeightFieldDesc::set_material_index 0 1 1181 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_material_index
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
155
void PhysxHeightFieldDesc::set_material_index(unsigned int row, unsigned int column, unsigned short int materialIndex0, unsigned short int materialIndex1);

2635 25 PhysxHeightFieldShapeDesc 0 4 3083 52 PhysxHeightFieldShapeDesc::PhysxHeightFieldShapeDesc 0 1 1182 738
// Filename: physxHeightFieldShapeDesc.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline PhysxHeightFieldShapeDesc::PhysxHeightFieldShapeDesc(void);

2636 16 set_height_field 0 4 3083 43 PhysxHeightFieldShapeDesc::set_height_field 0 1 1183 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_height_field
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
77
void PhysxHeightFieldShapeDesc::set_height_field(PhysxHeightField const &hf);

2637 14 set_dimensions 0 4 3083 41 PhysxHeightFieldShapeDesc::set_dimensions 0 1 1184 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_dimensions
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void PhysxHeightFieldShapeDesc::set_dimensions(LVector3f const &dimensions);

2638 17 set_hole_material 0 4 3083 44 PhysxHeightFieldShapeDesc::set_hole_material 0 1 1185 499
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_hole_material
//       Access: Published
//  Description: Sets the the material index that designates holes
//               in the height field. This number is compared
//               directly to sample materials. Consequently the
//               high 9 bits must be zero.
//               Default value is 0.
////////////////////////////////////////////////////////////////////
76
void PhysxHeightFieldShapeDesc::set_hole_material(unsigned short int index);

2639 28 set_material_index_high_bits 0 4 3083 55 PhysxHeightFieldShapeDesc::set_material_index_high_bits 0 1 1186 458
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_material_index_high_bits
//       Access: Published
//  Description: Sets the high 9 bits of this number are used to
//               complete the material indices in the samples. The
//               remaining low 7 bits must be zero.
//               Default value is 0.
////////////////////////////////////////////////////////////////////
87
void PhysxHeightFieldShapeDesc::set_material_index_high_bits(unsigned short int index);

2640 17 get_hole_material 0 4 3083 44 PhysxHeightFieldShapeDesc::get_hole_material 0 1 1187 334
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::get_hole_material
//       Access: Published
//  Description: Returns the the material index that designates
//               holes in the height field.
////////////////////////////////////////////////////////////////////
76
unsigned short int PhysxHeightFieldShapeDesc::get_hole_material(void) const;

2641 29 get_material_index_hight_bits 0 4 3083 56 PhysxHeightFieldShapeDesc::get_material_index_hight_bits 0 1 1188 369
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::get_material_index_hight_bits
//       Access: Published
//  Description: Returns the high 9 bits of this number are used to
//               complete the material indices in the samples.
////////////////////////////////////////////////////////////////////
88
unsigned short int PhysxHeightFieldShapeDesc::get_material_index_hight_bits(void) const;

2642 19 PhysxJointLimitDesc 0 4 3084 40 PhysxJointLimitDesc::PhysxJointLimitDesc 0 2 1189 1190 959
// Filename: physxJointLimitDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
151
inline PhysxJointLimitDesc::PhysxJointLimitDesc(void);
inline PhysxJointLimitDesc::PhysxJointLimitDesc(float value, float restitution, float hardness);

2643 20 ~PhysxJointLimitDesc 0 4 3084 41 PhysxJointLimitDesc::~PhysxJointLimitDesc 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline PhysxJointLimitDesc::~PhysxJointLimitDesc(void);

2644 9 set_value 0 4 3084 30 PhysxJointLimitDesc::set_value 0 1 1191 0
49
void PhysxJointLimitDesc::set_value(float value);

2645 15 set_restitution 0 4 3084 36 PhysxJointLimitDesc::set_restitution 0 1 1192 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::set_restitution
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
void PhysxJointLimitDesc::set_restitution(float restitution);

2646 12 set_hardness 0 4 3084 33 PhysxJointLimitDesc::set_hardness 0 1 1193 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::set_hardness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void PhysxJointLimitDesc::set_hardness(float hardness);

2647 9 get_value 0 4 3084 30 PhysxJointLimitDesc::get_value 0 1 1194 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
float PhysxJointLimitDesc::get_value(void) const;

2648 15 get_restitution 0 4 3084 36 PhysxJointLimitDesc::get_restitution 0 1 1195 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_restitution
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
float PhysxJointLimitDesc::get_restitution(void) const;

2649 12 get_hardness 0 4 3084 33 PhysxJointLimitDesc::get_hardness 0 1 1196 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_hardness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
float PhysxJointLimitDesc::get_hardness(void) const;

2650 12 PhysxKitchen 0 4 3085 26 PhysxKitchen::PhysxKitchen 0 1 1197 713
// Filename: physxKitchen.I
// Created by:  enn0x (12Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline PhysxKitchen::PhysxKitchen(void);

2651 13 ~PhysxKitchen 0 4 3085 27 PhysxKitchen::~PhysxKitchen 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
inline PhysxKitchen::~PhysxKitchen(void);

2652 18 set_cooking_params 0 4 3085 32 PhysxKitchen::set_cooking_params 0 1 1198 0
80
void PhysxKitchen::set_cooking_params(float skinWidth, bool hintCollisionSpeed);

2653 16 cook_convex_mesh 0 4 3085 30 PhysxKitchen::cook_convex_mesh 0 2 1199 1200 462
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_convex_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_convex_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
bool PhysxKitchen::cook_convex_mesh(PhysxConvexMeshDesc const &meshDesc, Filename const &filename);
PhysxConvexMesh *PhysxKitchen::cook_convex_mesh(PhysxConvexMeshDesc const &meshDesc);

2654 18 cook_triangle_mesh 0 4 3085 32 PhysxKitchen::cook_triangle_mesh 0 2 1201 1202 466
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_triangle_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_triangle_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
195
bool PhysxKitchen::cook_triangle_mesh(PhysxTriangleMeshDesc const &meshDesc, Filename const &filename);
PhysxTriangleMesh *PhysxKitchen::cook_triangle_mesh(PhysxTriangleMeshDesc const &meshDesc);

2655 15 cook_cloth_mesh 0 4 3085 29 PhysxKitchen::cook_cloth_mesh 0 2 1203 1204 460
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_cloth_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_cloth_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
180
bool PhysxKitchen::cook_cloth_mesh(PhysxClothMeshDesc const &meshDesc, Filename const &filename);
PhysxClothMesh *PhysxKitchen::cook_cloth_mesh(PhysxClothMeshDesc const &meshDesc);

2656 19 cook_soft_body_mesh 0 4 3085 33 PhysxKitchen::cook_soft_body_mesh 0 2 1205 1206 468
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_soft_body_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_soft_body_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
197
bool PhysxKitchen::cook_soft_body_mesh(PhysxSoftBodyMeshDesc const &meshDesc, Filename const &filename);
PhysxSoftBodyMesh *PhysxKitchen::cook_soft_body_mesh(PhysxSoftBodyMeshDesc const &meshDesc);

2657 14 cook_texcoords 0 4 3085 28 PhysxKitchen::cook_texcoords 0 1 1207 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_texcoords
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
96
bool PhysxKitchen::cook_texcoords(PhysxClothMeshDesc const &meshDesc, Filename const &filename);

2658 21 PhysxTriangleMeshDesc 0 4 3086 44 PhysxTriangleMeshDesc::PhysxTriangleMeshDesc 0 1 1208 727
// Filename: physxTriangleMeshDesc.I
// Created by:  enn0x (11Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxTriangleMeshDesc::PhysxTriangleMeshDesc(void);

2659 22 ~PhysxTriangleMeshDesc 0 4 3086 45 PhysxTriangleMeshDesc::~PhysxTriangleMeshDesc 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline PhysxTriangleMeshDesc::~PhysxTriangleMeshDesc(void);

2660 8 is_valid 0 4 3086 31 PhysxTriangleMeshDesc::is_valid 0 1 1209 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
56
inline bool PhysxTriangleMeshDesc::is_valid(void) const;

2661 16 set_num_vertices 0 4 3086 39 PhysxTriangleMeshDesc::set_num_vertices 0 1 1210 527
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this triangle mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
////////////////////////////////////////////////////////////////////
61
void PhysxTriangleMeshDesc::set_num_vertices(unsigned int n);

2662 10 set_vertex 0 4 3086 33 PhysxTriangleMeshDesc::set_vertex 0 1 1211 353
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
////////////////////////////////////////////////////////////////////
79
void PhysxTriangleMeshDesc::set_vertex(unsigned int idx, LPoint3f const &vert);

2663 17 set_num_triangles 0 4 3086 40 PhysxTriangleMeshDesc::set_num_triangles 0 2 1212 1213 428
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_num_triangles
//       Access: Published
//  Description: Sets the number of triangles to be stored in this
//               triangle mesh.
//
//               This method must be called before any calls to
//               set_triangle are done!
////////////////////////////////////////////////////////////////////
95
void PhysxTriangleMeshDesc::set_num_triangles(unsigned int n, bool use_material_indices = (0));

2664 12 set_triangle 0 4 3086 35 PhysxTriangleMeshDesc::set_triangle 0 2 1214 1215 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_triangles
//       Access: Published
//  Description: Sets a single triangle, by providing the three
//               indices i1, i2, i3.
////////////////////////////////////////////////////////////////////
145
void PhysxTriangleMeshDesc::set_triangle(unsigned int idx, unsigned int i1, unsigned int i2, unsigned int i3, unsigned int material_index = (1));

2665 18 set_from_node_path 0 4 3086 41 PhysxTriangleMeshDesc::set_from_node_path 0 1 1216 679
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the triangle mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
//               - set_num_triangles
//               - set_triangle
////////////////////////////////////////////////////////////////////
67
void PhysxTriangleMeshDesc::set_from_node_path(NodePath const &np);

2666 21 PhysxSoftBodyMeshDesc 0 4 3087 44 PhysxSoftBodyMeshDesc::PhysxSoftBodyMeshDesc 0 1 1217 727
// Filename: physxSoftBodyMeshDesc.I
// Created by:  enn0x (12Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PhysxSoftBodyMeshDesc::PhysxSoftBodyMeshDesc(void);

2667 22 ~PhysxSoftBodyMeshDesc 0 4 3087 45 PhysxSoftBodyMeshDesc::~PhysxSoftBodyMeshDesc 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline PhysxSoftBodyMeshDesc::~PhysxSoftBodyMeshDesc(void);

2668 8 is_valid 0 4 3087 31 PhysxSoftBodyMeshDesc::is_valid 0 1 1218 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
56
inline bool PhysxSoftBodyMeshDesc::is_valid(void) const;

2669 16 set_num_vertices 0 4 3087 39 PhysxSoftBodyMeshDesc::set_num_vertices 0 1 1219 528
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this soft body mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
////////////////////////////////////////////////////////////////////
61
void PhysxSoftBodyMeshDesc::set_num_vertices(unsigned int n);

2670 10 set_vertex 0 4 3087 33 PhysxSoftBodyMeshDesc::set_vertex 0 1 1220 353
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
////////////////////////////////////////////////////////////////////
79
void PhysxSoftBodyMeshDesc::set_vertex(unsigned int idx, LPoint3f const &vert);

2671 18 set_num_tetrahedra 0 4 3087 41 PhysxSoftBodyMeshDesc::set_num_tetrahedra 0 1 1221 434
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_num_tetrahedra
//       Access: Published
//  Description: Sets the number of tetrahedra to be stored in this
//               soft body mesh.
//
//               This method must be called before any calls to
//               set_tetrahedron are done!
////////////////////////////////////////////////////////////////////
63
void PhysxSoftBodyMeshDesc::set_num_tetrahedra(unsigned int n);

2672 15 set_tetrahedron 0 4 3087 38 PhysxSoftBodyMeshDesc::set_tetrahedron 0 1 1222 328
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_tetrahedron
//       Access: Published
//  Description: Sets a single tetrahedron, by providing the three
//               indices i1, i2, i3, i4.
////////////////////////////////////////////////////////////////////
130
void PhysxSoftBodyMeshDesc::set_tetrahedron(unsigned int idx, unsigned int i1, unsigned int i2, unsigned int i3, unsigned int i4);

2673 14 PhysxSceneDesc 0 4 3088 30 PhysxSceneDesc::PhysxSceneDesc 0 1 1223 716
// Filename: physxSceneDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline PhysxSceneDesc::PhysxSceneDesc(void);

2674 15 ~PhysxSceneDesc 0 4 3088 31 PhysxSceneDesc::~PhysxSceneDesc 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PhysxSceneDesc::~PhysxSceneDesc(void);

2675 14 set_to_default 0 4 3088 30 PhysxSceneDesc::set_to_default 0 1 1224 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
49
inline void PhysxSceneDesc::set_to_default(void);

2676 8 is_valid 0 4 3088 24 PhysxSceneDesc::is_valid 0 1 1225 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
49
inline bool PhysxSceneDesc::is_valid(void) const;

2677 8 set_flag 0 4 3088 24 PhysxSceneDesc::set_flag 0 1 1226 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual scene flags.
////////////////////////////////////////////////////////////////////
75
void PhysxSceneDesc::set_flag(PhysxEnums::PhysxSceneFlag flag, bool value);

2678 11 set_gravity 0 4 3088 27 PhysxSceneDesc::set_gravity 0 1 1227 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_gravity
//       Access: Published
//  Description: Sets the gravity vector.
////////////////////////////////////////////////////////////////////
59
void PhysxSceneDesc::set_gravity(LVector3f const &gravity);

2679 14 set_max_bounds 0 4 3088 30 PhysxSceneDesc::set_max_bounds 0 1 1228 1021
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_max_bounds
//       Access: Published
//  Description: Set the max scene bounds. 
//
//               If scene bounds are provided (maxBounds in the
//               descriptor), the SDK takes advantage of this
//               information to accelerate scene-level collision
//               queries (e.g. raycasting). When using maxBounds,
//               you have to make sure created objects stay within
//               the scene bounds. In particular, the position of
//               dynamic shapes should stay within the provided
//               bounds. Otherwise the shapes outside the bounds
//               will not be taken into account by all scene queries
//               (raycasting, sweep tests, overlap tests, etc). They
//               will nonetheless still work correctly for the main
//               physics simulation.
////////////////////////////////////////////////////////////////////
58
void PhysxSceneDesc::set_max_bounds(PhysxBounds3 &bounds);

2680 20 set_static_structure 0 4 3088 36 PhysxSceneDesc::set_static_structure 0 1 1229 304
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_static_structure
//       Access: Published
//  Description: Defines the structure used to store static
//               objects.
////////////////////////////////////////////////////////////////////
83
void PhysxSceneDesc::set_static_structure(PhysxEnums::PhysxPruningStructure value);

2681 21 set_dynamic_structure 0 4 3088 37 PhysxSceneDesc::set_dynamic_structure 0 1 1230 398
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_dynamic_structure
//       Access: Published
//  Description: Defines the subdivision level for acceleration
//               structures used for scene queries.
//               This is only used when maxBounds are defined!
////////////////////////////////////////////////////////////////////
84
void PhysxSceneDesc::set_dynamic_structure(PhysxEnums::PhysxPruningStructure value);

2682 11 set_bp_type 0 4 3088 27 PhysxSceneDesc::set_bp_type 0 1 1231 1413
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_bp_type
//       Access: Published
//  Description: Defines which type of broadphase to use.
//
//               (1) BPT_sap_single: A sweep-and-prune (SAP)
//               algorithm to find pairs of potentially colliding
//               shapes.
//
//               (2) BPT_sap_multi: A multi sweep-and-prune
//               algorithm to find pairs of potentially colliding
//               shapes. Uses a configurable 2D grid to divide the
//               scene space into cells. The potentially overlapping
//               shape pairs are detected in each cell and the
//               information is merged together. This approach is
//               usually faster than BPT_sap_single in scenarios
//               with many shapes and a high creation/deletion rate
//               of shapes. However, the amount of memory required
//               is considerably higher depending on the number of
//               grid cells used.
//               The following extra parameters need to be defined: 
//               - PhysxSceneDesc.set_max_bounds
//               - PhysxSceneDesc.set_num_grid_cells_x
//               - PhysxSceneDesc.set_num_grid_cells_y
//               (the scene up direction is set via config options)
////////////////////////////////////////////////////////////////////
72
void PhysxSceneDesc::set_bp_type(PhysxEnums::PhysxBroadPhaseType value);

2683 21 set_subdivision_level 0 4 3088 37 PhysxSceneDesc::set_subdivision_level 0 1 1232 399
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_subdivision_level
//       Access: Published
//  Description: Defines the subdivision level for acceleration
//               structures used for scene queries. 
//               This is only used when maxBounds are defined!
////////////////////////////////////////////////////////////////////
63
void PhysxSceneDesc::set_subdivision_level(unsigned int value);

2684 20 set_num_grid_cells_x 0 4 3088 36 PhysxSceneDesc::set_num_grid_cells_x 0 1 1233 498
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_num_grid_cells_x
//       Access: Published
//  Description: Defines the number of broadphase cells along the
//               grid x-axis. Must be power of two. Max is 8 at the
//               moment. The broadphase type must be set to
//               BPT_sap_multi for this parameter to have
//               an effect.
////////////////////////////////////////////////////////////////////
62
void PhysxSceneDesc::set_num_grid_cells_x(unsigned int value);

2685 20 set_num_grid_cells_y 0 4 3088 36 PhysxSceneDesc::set_num_grid_cells_y 0 1 1234 498
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_num_grid_cells_y
//       Access: Published
//  Description: Defines the number of broadphase cells along the
//               grid y-axis. Must be power of two. Max is 8 at the
//               moment. The broadphase type must be set to
//               BPT_sap_multi for this parameter to have
//               an effect.
////////////////////////////////////////////////////////////////////
62
void PhysxSceneDesc::set_num_grid_cells_y(unsigned int value);

2686 8 get_flag 0 4 3088 24 PhysxSceneDesc::get_flag 0 1 1235 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_flag
//       Access: Published
//  Description: Returns the specified scene flag.
////////////////////////////////////////////////////////////////////
69
bool PhysxSceneDesc::get_flag(PhysxEnums::PhysxSceneFlag flag) const;

2687 11 get_gravity 0 4 3088 27 PhysxSceneDesc::get_gravity 0 1 1236 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_gravity
//       Access: Published
//  Description: Get the gravity vector.
////////////////////////////////////////////////////////////////////
50
LVector3f PhysxSceneDesc::get_gravity(void) const;

2688 14 get_max_bounds 0 4 3088 30 PhysxSceneDesc::get_max_bounds 0 1 1237 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_max_bounds
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
PhysxBounds3 PhysxSceneDesc::get_max_bounds(void) const;

2689 20 get_static_structure 0 4 3088 36 PhysxSceneDesc::get_static_structure 0 1 1238 304
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_static_structure
//       Access: Published
//  Description: Returns the structure used to store static
//               objects.
////////////////////////////////////////////////////////////////////
83
PhysxEnums::PhysxPruningStructure PhysxSceneDesc::get_static_structure(void) const;

2690 21 get_dynamic_structure 0 4 3088 37 PhysxSceneDesc::get_dynamic_structure 0 1 1239 335
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_dynamic_structure
//       Access: Published
//  Description: Returns the subdivision level for acceleration
//               structures used for scene queries.
////////////////////////////////////////////////////////////////////
84
PhysxEnums::PhysxPruningStructure PhysxSceneDesc::get_dynamic_structure(void) const;

2691 11 get_bp_type 0 4 3088 27 PhysxSceneDesc::get_bp_type 0 1 1240 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_bp_type
//       Access: Published
//  Description: Returns the type of broadphase to use.
////////////////////////////////////////////////////////////////////
72
PhysxEnums::PhysxBroadPhaseType PhysxSceneDesc::get_bp_type(void) const;

2692 21 get_subdivision_level 0 4 3088 37 PhysxSceneDesc::get_subdivision_level 0 1 1241 336
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_subdivision_level
//       Access: Published
//  Description: Returns the subdivision level for acceleration
//               structures used for scene queries. 
////////////////////////////////////////////////////////////////////
63
unsigned int PhysxSceneDesc::get_subdivision_level(void) const;

2693 20 get_num_grid_cells_x 0 4 3088 36 PhysxSceneDesc::get_num_grid_cells_x 0 1 1242 314
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_num_grid_cells_x
//       Access: Published
//  Description: Returns the number of broadphase cells along the
//               grid x-axis.
////////////////////////////////////////////////////////////////////
62
unsigned int PhysxSceneDesc::get_num_grid_cells_x(void) const;

2694 20 get_num_grid_cells_y 0 4 3088 36 PhysxSceneDesc::get_num_grid_cells_y 0 1 1243 314
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_num_grid_cells_y
//       Access: Published
//  Description: Returns the number of broadphase cells along the
//               grid y-axis.
////////////////////////////////////////////////////////////////////
62
unsigned int PhysxSceneDesc::get_num_grid_cells_y(void) const;

2695 17 PhysxMaterialDesc 0 4 3089 36 PhysxMaterialDesc::PhysxMaterialDesc 0 1 1244 722
// Filename: physxMaterialDesc.I
// Created by:  enn0x (21Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PhysxMaterialDesc::PhysxMaterialDesc(void);

2696 18 ~PhysxMaterialDesc 0 4 3089 37 PhysxMaterialDesc::~PhysxMaterialDesc 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline PhysxMaterialDesc::~PhysxMaterialDesc(void);

2697 14 set_to_default 0 4 3089 33 PhysxMaterialDesc::set_to_default 0 1 1245 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
52
inline void PhysxMaterialDesc::set_to_default(void);

2698 8 is_valid 0 4 3089 27 PhysxMaterialDesc::is_valid 0 1 1246 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
52
inline bool PhysxMaterialDesc::is_valid(void) const;

2699 20 set_dynamic_friction 0 4 3089 39 PhysxMaterialDesc::set_dynamic_friction 0 1 1247 622
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dynamic_friction
//       Access: Published
//  Description: Sets the coefficient of dynamic friction -- should
//               be in [0, +inf]. If set to greater than
//               staticFriction, the effective value of staticFriction
//               will be increased to match.
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
////////////////////////////////////////////////////////////////////
57
void PhysxMaterialDesc::set_dynamic_friction(float coef);

2700 19 set_static_friction 0 4 3089 38 PhysxMaterialDesc::set_static_friction 0 1 1248 481
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_static_friction
//       Access: Published
//  Description: Sets the coefficient of static friction -- should
//               be in [0, +inf].
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
////////////////////////////////////////////////////////////////////
56
void PhysxMaterialDesc::set_static_friction(float coef);

2701 15 set_restitution 0 4 3089 34 PhysxMaterialDesc::set_restitution 0 1 1249 571
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_restitution
//       Access: Published
//  Description: Sets the coefficient of restitution -- 0 makes the
//               object bounce as little as possible, higher values
//               up to 1.0 result in more bounce. Note that values
//               close to or above 1 may cause stability problems
//               and/or increasing energy. Range: [0,1]
//               Default: 0.0
////////////////////////////////////////////////////////////////////
52
void PhysxMaterialDesc::set_restitution(float rest);

2702 22 set_dynamic_friction_v 0 4 3089 41 PhysxMaterialDesc::set_dynamic_friction_v 0 1 1250 442
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dynamic_friction_v
//       Access: Published
//  Description: Sets the anisotropic dynamic friction coefficient
//               for along the secondary (V) axis of anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
////////////////////////////////////////////////////////////////////
59
void PhysxMaterialDesc::set_dynamic_friction_v(float coef);

2703 21 set_static_friction_v 0 4 3089 40 PhysxMaterialDesc::set_static_friction_v 0 1 1251 440
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_static_friction_v
//       Access: Published
//  Description: Sets the anisotropic static friction coefficient
//               for along the secondary (V) axis of anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
////////////////////////////////////////////////////////////////////
58
void PhysxMaterialDesc::set_static_friction_v(float coef);

2704 21 set_dir_of_anisotropy 0 4 3089 40 PhysxMaterialDesc::set_dir_of_anisotropy 0 1 1252 403
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dir_of_anisotropy
//       Access: Published
//  Description: Sets the shape space direction (unit vector) of
//               anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
////////////////////////////////////////////////////////////////////
67
void PhysxMaterialDesc::set_dir_of_anisotropy(LVector3f const dir);

2705 8 set_flag 0 4 3089 27 PhysxMaterialDesc::set_flag 0 1 1253 296
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_flag
//       Access: Published
//  Description: Sets flags which control the behavior of a
//               material.
////////////////////////////////////////////////////////////////////
81
void PhysxMaterialDesc::set_flag(PhysxEnums::PhysxMaterialFlag flag, bool value);

2706 25 set_friction_combine_mode 0 4 3089 44 PhysxMaterialDesc::set_friction_combine_mode 0 1 1254 469
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_friction_combine_mode
//       Access: Published
//  Description: Sets the friction combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
////////////////////////////////////////////////////////////////////
85
void PhysxMaterialDesc::set_friction_combine_mode(PhysxEnums::PhysxCombineMode mode);

2707 28 set_restitution_combine_mode 0 4 3089 47 PhysxMaterialDesc::set_restitution_combine_mode 0 1 1255 475
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_restitution_combine_mode
//       Access: Published
//  Description: Sets the restitution combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
////////////////////////////////////////////////////////////////////
88
void PhysxMaterialDesc::set_restitution_combine_mode(PhysxEnums::PhysxCombineMode mode);

2708 20 get_dynamic_friction 0 4 3089 39 PhysxMaterialDesc::get_dynamic_friction 0 1 1256 283
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dynamic_friction
//       Access: Published
//  Description: Returns the coefficient of dynamic friction.
////////////////////////////////////////////////////////////////////
58
float PhysxMaterialDesc::get_dynamic_friction(void) const;

2709 19 get_static_friction 0 4 3089 38 PhysxMaterialDesc::get_static_friction 0 1 1257 281
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_static_friction
//       Access: Published
//  Description: Retruns the coefficient of static friction.
////////////////////////////////////////////////////////////////////
57
float PhysxMaterialDesc::get_static_friction(void) const;

2710 15 get_restitution 0 4 3089 34 PhysxMaterialDesc::get_restitution 0 1 1258 273
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_restitution
//       Access: Published
//  Description: Returns the coefficient of restitution.
////////////////////////////////////////////////////////////////////
53
float PhysxMaterialDesc::get_restitution(void) const;

2711 22 get_dynamic_friction_v 0 4 3089 41 PhysxMaterialDesc::get_dynamic_friction_v 0 1 1259 375
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dynamic_friction_v
//       Access: Published
//  Description: Returns the anisotropic dynamic friction
//               coefficient for along the secondary (V) axis of
//               anisotropy.
////////////////////////////////////////////////////////////////////
60
float PhysxMaterialDesc::get_dynamic_friction_v(void) const;

2712 21 get_static_friction_v 0 4 3089 40 PhysxMaterialDesc::get_static_friction_v 0 1 1260 356
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_static_friction_v
//       Access: Published
//  Description: Returns the anisotropic static friction coefficient
//               for along the secondary (V) axis of anisotropy.
////////////////////////////////////////////////////////////////////
59
float PhysxMaterialDesc::get_static_friction_v(void) const;

2713 21 get_dir_of_anisotropy 0 4 3089 40 PhysxMaterialDesc::get_dir_of_anisotropy 0 1 1261 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dir_of_anisotropy
//       Access: Published
//  Description: Returns the shape space direction (unit vector) of
//               anisotropy.
////////////////////////////////////////////////////////////////////
63
LVector3f PhysxMaterialDesc::get_dir_of_anisotropy(void) const;

2714 8 get_flag 0 4 3089 27 PhysxMaterialDesc::get_flag 0 1 1262 299
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_flag
//       Access: Published
//  Description: Returns flags which control the behavior of a
//               material.
////////////////////////////////////////////////////////////////////
75
bool PhysxMaterialDesc::get_flag(PhysxEnums::PhysxMaterialFlag flag) const;

2715 25 get_friction_combine_mode 0 4 3089 44 PhysxMaterialDesc::get_friction_combine_mode 0 1 1263 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_friction_combine_mode
//       Access: Published
//  Description: Returns the friction combine mode.
////////////////////////////////////////////////////////////////////
86
PhysxEnums::PhysxCombineMode PhysxMaterialDesc::get_friction_combine_mode(void) const;

2716 28 get_restitution_combine_mode 0 4 3089 47 PhysxMaterialDesc::get_restitution_combine_mode 0 1 1264 284
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_restitution_combine_mode
//       Access: Published
//  Description: Returns the restitution combine mode.
////////////////////////////////////////////////////////////////////
89
PhysxEnums::PhysxCombineMode PhysxMaterialDesc::get_restitution_combine_mode(void) const;

2717 14 PhysxMotorDesc 0 4 3090 30 PhysxMotorDesc::PhysxMotorDesc 0 4 1265 1266 1267 1268 944
// Filename: physxMotorDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
143
inline PhysxMotorDesc::PhysxMotorDesc(void);
inline PhysxMotorDesc::PhysxMotorDesc(float velTarget, float maxForce = (0), bool freeSpin = (0));

2718 15 ~PhysxMotorDesc 0 4 3090 31 PhysxMotorDesc::~PhysxMotorDesc 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PhysxMotorDesc::~PhysxMotorDesc(void);

2719 14 set_vel_target 0 4 3090 30 PhysxMotorDesc::set_vel_target 0 1 1269 0
53
void PhysxMotorDesc::set_vel_target(float velTarget);

2720 13 set_max_force 0 4 3090 29 PhysxMotorDesc::set_max_force 0 1 1270 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::set_max_force
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void PhysxMotorDesc::set_max_force(float maxForce);

2721 13 set_free_spin 0 4 3090 29 PhysxMotorDesc::set_free_spin 0 1 1271 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::set_free_spin
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void PhysxMotorDesc::set_free_spin(bool freeSpin);

2722 14 get_vel_target 0 4 3090 30 PhysxMotorDesc::get_vel_target 0 1 1272 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_vel_target
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
float PhysxMotorDesc::get_vel_target(void) const;

2723 13 get_max_force 0 4 3090 29 PhysxMotorDesc::get_max_force 0 1 1273 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_max_force
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
float PhysxMotorDesc::get_max_force(void) const;

2724 13 get_free_spin 0 4 3090 29 PhysxMotorDesc::get_free_spin 0 1 1274 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_free_spin
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
bool PhysxMotorDesc::get_free_spin(void) const;

2725 10 PhysxPlane 0 4 3091 22 PhysxPlane::PhysxPlane 0 2 1275 1276 932
// Filename: physxPlane.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline PhysxPlane::PhysxPlane(void);
inline PhysxPlane::PhysxPlane(PhysxPlane const &plane);

2726 11 ~PhysxPlane 0 4 3091 23 PhysxPlane::~PhysxPlane 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline PhysxPlane::~PhysxPlane(void);

2727 8 distance 0 4 3091 20 PhysxPlane::distance 0 1 1277 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::distance
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
float PhysxPlane::distance(LPoint3f const &p) const;

2728 7 belongs 0 4 3091 19 PhysxPlane::belongs 0 1 1278 218
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::belongs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
bool PhysxPlane::belongs(LPoint3f const &p) const;

2729 9 normalize 0 4 3091 21 PhysxPlane::normalize 0 1 1279 220
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::normalize
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
void PhysxPlane::normalize(void);

2730 14 point_in_plane 0 4 3091 26 PhysxPlane::point_in_plane 0 1 1280 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::point_in_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
LPoint3f PhysxPlane::point_in_plane(void) const;

2731 7 project 0 4 3091 19 PhysxPlane::project 0 1 1281 218
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::project
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
LPoint3f PhysxPlane::project(LPoint3f const &p) const;

2732 9 transform 0 4 3091 21 PhysxPlane::transform 0 1 1282 220
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
void PhysxPlane::transform(LMatrix4f const &transform, PhysxPlane &transformed) const;

2733 17 inverse_transform 0 4 3091 29 PhysxPlane::inverse_transform 0 1 1283 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::inverse_transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
void PhysxPlane::inverse_transform(LMatrix4f const &transform, PhysxPlane &transformed) const;

2734 3 set 0 4 3091 15 PhysxPlane::set 0 1 1284 214
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
87
PhysxPlane PhysxPlane::set(LPoint3f const &p0, LPoint3f const &p1, LPoint3f const &p2);

2735 4 zero 0 4 3091 16 PhysxPlane::zero 0 1 1285 215
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::zero
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
PhysxPlane PhysxPlane::zero(void);

2736 5 get_d 0 4 3091 17 PhysxPlane::get_d 0 1 1286 216
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::get_d
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
float PhysxPlane::get_d(void) const;

2737 10 get_normal 0 4 3091 22 PhysxPlane::get_normal 0 1 1287 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
LVector3f PhysxPlane::get_normal(void) const;

2738 5 set_d 0 4 3091 17 PhysxPlane::set_d 0 1 1288 216
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set_d
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
32
void PhysxPlane::set_d(float d);

2739 10 set_normal 0 4 3091 22 PhysxPlane::set_normal 0 1 1289 221
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
void PhysxPlane::set_normal(LVector3f normal);

2740 19 PhysxPlaneShapeDesc 0 4 3092 40 PhysxPlaneShapeDesc::PhysxPlaneShapeDesc 0 1 1290 726
// Filename: physxPlaneShapeDesc.I
// Created by:  enn0x (08Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxPlaneShapeDesc::PhysxPlaneShapeDesc(void);

2741 9 set_plane 0 4 3092 30 PhysxPlaneShapeDesc::set_plane 0 1 1291 362
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShapeDesc::set_plane
//       Access: Published
//  Description: Sets the parameters of the plane equation.
//               normal: Plane normal.
//               d: The distance from the origin. 
////////////////////////////////////////////////////////////////////
70
void PhysxPlaneShapeDesc::set_plane(LVector3f const &normal, float d);

2742 26 PhysxPointInPlaneJointDesc 0 4 3093 54 PhysxPointInPlaneJointDesc::PhysxPointInPlaneJointDesc 0 1 1292 740
// Filename: physxPointInPlaneJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointInPlaneJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PhysxPointInPlaneJointDesc::PhysxPointInPlaneJointDesc(void);

2743 27 ~PhysxPointInPlaneJointDesc 0 4 3093 55 PhysxPointInPlaneJointDesc::~PhysxPointInPlaneJointDesc 0 0 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointInPlaneJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline PhysxPointInPlaneJointDesc::~PhysxPointInPlaneJointDesc(void);

2744 25 PhysxPointOnLineJointDesc 0 4 3094 52 PhysxPointOnLineJointDesc::PhysxPointOnLineJointDesc 0 1 1293 738
// Filename: physxPointOnLineJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointOnLineJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline PhysxPointOnLineJointDesc::PhysxPointOnLineJointDesc(void);

2745 26 ~PhysxPointOnLineJointDesc 0 4 3094 53 PhysxPointOnLineJointDesc::~PhysxPointOnLineJointDesc 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointOnLineJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline PhysxPointOnLineJointDesc::~PhysxPointOnLineJointDesc(void);

2746 23 PhysxPrismaticJointDesc 0 4 3095 48 PhysxPrismaticJointDesc::PhysxPrismaticJointDesc 0 1 1294 734
// Filename: physxPrismaticJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPrismaticJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline PhysxPrismaticJointDesc::PhysxPrismaticJointDesc(void);

2747 24 ~PhysxPrismaticJointDesc 0 4 3095 49 PhysxPrismaticJointDesc::~PhysxPrismaticJointDesc 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxPrismaticJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline PhysxPrismaticJointDesc::~PhysxPrismaticJointDesc(void);

2748 20 PhysxPulleyJointDesc 0 4 3096 42 PhysxPulleyJointDesc::PhysxPulleyJointDesc 0 1 1295 728
// Filename: physxPulleyJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PhysxPulleyJointDesc::PhysxPulleyJointDesc(void);

2749 21 ~PhysxPulleyJointDesc 0 4 3096 43 PhysxPulleyJointDesc::~PhysxPulleyJointDesc 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PhysxPulleyJointDesc::~PhysxPulleyJointDesc(void);

2750 12 set_distance 0 4 3096 34 PhysxPulleyJointDesc::set_distance 0 1 1296 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_distance
//       Access: Published
//  Description: Sets the rest length of the rope connecting the
//               two objects. 
////////////////////////////////////////////////////////////////////
56
void PhysxPulleyJointDesc::set_distance(float distance);

2751 13 set_stiffness 0 4 3096 35 PhysxPulleyJointDesc::set_stiffness 0 1 1297 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_stiffness
//       Access: Published
//  Description: Sets how stiff the constraint is, between 0 and 1
//               (stiffest)
////////////////////////////////////////////////////////////////////
58
void PhysxPulleyJointDesc::set_stiffness(float stiffness);

2752 9 set_ratio 0 4 3096 31 PhysxPulleyJointDesc::set_ratio 0 1 1298 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_ratio
//       Access: Published
//  Description: Sets the transmission ratio.
////////////////////////////////////////////////////////////////////
51
void PhysxPulleyJointDesc::set_ratio(float ration);

2753 10 set_pulley 0 4 3096 32 PhysxPulleyJointDesc::set_pulley 0 1 1299 305
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_pulley
//       Access: Published
//  Description: Sets the suspension points of two bodies in world
//               space.
////////////////////////////////////////////////////////////////////
76
void PhysxPulleyJointDesc::set_pulley(unsigned int idx, LPoint3f const pos);

2754 9 set_motor 0 4 3096 31 PhysxPulleyJointDesc::set_motor 0 1 1300 260
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_motor
//       Access: Published
//  Description: Sets an optional joint motor.
////////////////////////////////////////////////////////////////////
66
void PhysxPulleyJointDesc::set_motor(PhysxMotorDesc const &motor);

2755 8 set_flag 0 4 3096 30 PhysxPulleyJointDesc::set_flag 0 1 1301 275
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single PulleyJointFlag flag.
////////////////////////////////////////////////////////////////////
87
void PhysxPulleyJointDesc::set_flag(PhysxEnums::PhysxPulleyJointFlag flag, bool value);

2756 12 get_distance 0 4 3096 34 PhysxPulleyJointDesc::get_distance 0 1 1302 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
float PhysxPulleyJointDesc::get_distance(void) const;

2757 13 get_stiffness 0 4 3096 35 PhysxPulleyJointDesc::get_stiffness 0 1 1303 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
float PhysxPulleyJointDesc::get_stiffness(void) const;

2758 9 get_ratio 0 4 3096 31 PhysxPulleyJointDesc::get_ratio 0 1 1304 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_ratio
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
float PhysxPulleyJointDesc::get_ratio(void) const;

2759 8 get_flag 0 4 3096 30 PhysxPulleyJointDesc::get_flag 0 1 1305 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
81
bool PhysxPulleyJointDesc::get_flag(PhysxEnums::PhysxPulleyJointFlag flag) const;

2760 10 get_pulley 0 4 3096 32 PhysxPulleyJointDesc::get_pulley 0 1 1306 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_pulley
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
LPoint3f PhysxPulleyJointDesc::get_pulley(unsigned int idx) const;

2761 9 get_motor 0 4 3096 31 PhysxPulleyJointDesc::get_motor 0 1 1307 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_motor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
PhysxMotorDesc PhysxPulleyJointDesc::get_motor(void) const;

2762 8 PhysxRay 0 4 3097 18 PhysxRay::PhysxRay 0 1 1308 704
// Filename: physxRay.I
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
32
inline PhysxRay::PhysxRay(void);

2763 9 ~PhysxRay 0 4 3097 19 PhysxRay::~PhysxRay 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PhysxRay::~PhysxRay(void);

2764 10 set_length 0 4 3097 20 PhysxRay::set_length 0 1 1309 426
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_length
//       Access: Published
//  Description: Sets the ray length. If no length is set then the
//               ray will be virtually infinite (the maximum
//               floating point number will be used, e.g.
//               3.40282346639e+038).
////////////////////////////////////////////////////////////////////
40
void PhysxRay::set_length(float length);

2765 10 set_origin 0 4 3097 20 PhysxRay::set_origin 0 1 1310 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_origin
//       Access: Published
//  Description: Sets the ray origin.
////////////////////////////////////////////////////////////////////
50
void PhysxRay::set_origin(LPoint3f const &origin);

2766 13 set_direction 0 4 3097 23 PhysxRay::set_direction 0 1 1311 310
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_direction
//       Access: Published
//  Description: Set the ray direction. It is not required to pass
//               a normalized vector.
////////////////////////////////////////////////////////////////////
57
void PhysxRay::set_direction(LVector3f const &direction);

2767 10 get_length 0 4 3097 20 PhysxRay::get_length 0 1 1312 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_length
//       Access: Published
//  Description: Returns the ray length.
////////////////////////////////////////////////////////////////////
39
float PhysxRay::get_length(void) const;

2768 10 get_origin 0 4 3097 20 PhysxRay::get_origin 0 1 1313 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_origin
//       Access: Published
//  Description: Returns the ray origin
////////////////////////////////////////////////////////////////////
42
LPoint3f PhysxRay::get_origin(void) const;

2769 13 get_direction 0 4 3097 23 PhysxRay::get_direction 0 1 1314 249
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_direction
//       Access: Published
//  Description: Returns the ray direction.
////////////////////////////////////////////////////////////////////
46
LVector3f PhysxRay::get_direction(void) const;

2770 15 PhysxRaycastHit 0 4 3098 32 PhysxRaycastHit::PhysxRaycastHit 0 1 1315 718
// Filename: physxRaycastHit.I
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline PhysxRaycastHit::PhysxRaycastHit(NxRaycastHit const hit);

2771 16 ~PhysxRaycastHit 0 4 3098 33 PhysxRaycastHit::~PhysxRaycastHit 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline PhysxRaycastHit::~PhysxRaycastHit(void);

2772 8 is_empty 0 4 3098 25 PhysxRaycastHit::is_empty 0 1 1316 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::is_empty
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
bool PhysxRaycastHit::is_empty(void) const;

2773 9 get_shape 0 4 3098 26 PhysxRaycastHit::get_shape 0 1 1317 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_shape
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
PhysxShape *PhysxRaycastHit::get_shape(void) const;

2774 14 get_impact_pos 0 4 3098 31 PhysxRaycastHit::get_impact_pos 0 1 1318 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_impact_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
LPoint3f PhysxRaycastHit::get_impact_pos(void) const;

2775 17 get_impact_normal 0 4 3098 34 PhysxRaycastHit::get_impact_normal 0 1 1319 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_impact_normal
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
LVector3f PhysxRaycastHit::get_impact_normal(void) const;

2776 12 get_distance 0 4 3098 29 PhysxRaycastHit::get_distance 0 1 1320 229
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
float PhysxRaycastHit::get_distance(void) const;

2777 29 upcast_to_NxUserRaycastReport 0 12 3099 49 PhysxRaycastReport::upcast_to_NxUserRaycastReport 0 1 1325 53
upcast from PhysxRaycastReport to NxUserRaycastReport
77
NxUserRaycastReport *PhysxRaycastReport::upcast_to_NxUserRaycastReport(void);

2778 50 downcast_NxUserRaycastReport_to_PhysxRaycastReport 0 8 0 50 downcast_NxUserRaycastReport_to_PhysxRaycastReport 0 1 1326 55
downcast from NxUserRaycastReport to PhysxRaycastReport
98
PhysxRaycastReport *downcast_NxUserRaycastReport_to_PhysxRaycastReport(NxUserRaycastReport *this);

2779 12 get_num_hits 0 4 3099 32 PhysxRaycastReport::get_num_hits 0 1 1321 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_num_hits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
unsigned int PhysxRaycastReport::get_num_hits(void) const;

2780 13 get_first_hit 0 4 3099 33 PhysxRaycastReport::get_first_hit 0 1 1322 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_first_hit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
PhysxRaycastHit PhysxRaycastReport::get_first_hit(void);

2781 12 get_next_hit 0 4 3099 32 PhysxRaycastReport::get_next_hit 0 1 1323 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_next_hit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PhysxRaycastHit PhysxRaycastReport::get_next_hit(void);

2782 7 get_hit 0 4 3099 27 PhysxRaycastReport::get_hit 0 1 1324 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_hit
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PhysxRaycastHit PhysxRaycastReport::get_hit(unsigned int idx);

2783 19 ~PhysxRaycastReport 0 4 3099 39 PhysxRaycastReport::~PhysxRaycastReport 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline PhysxRaycastReport::~PhysxRaycastReport(void);

2784 22 PhysxRevoluteJointDesc 0 4 3101 46 PhysxRevoluteJointDesc::PhysxRevoluteJointDesc 0 1 1327 732
// Filename: physxRevoluteJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PhysxRevoluteJointDesc::PhysxRevoluteJointDesc(void);

2785 23 ~PhysxRevoluteJointDesc 0 4 3101 47 PhysxRevoluteJointDesc::~PhysxRevoluteJointDesc 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline PhysxRevoluteJointDesc::~PhysxRevoluteJointDesc(void);

2786 23 set_projection_distance 0 4 3101 47 PhysxRevoluteJointDesc::set_projection_distance 0 1 1328 318
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_distance
//       Access: Published
//  Description: Sets the distance beyond which the joint is
//               projected.
////////////////////////////////////////////////////////////////////
69
void PhysxRevoluteJointDesc::set_projection_distance(float distance);

2787 20 set_projection_angle 0 4 3101 44 PhysxRevoluteJointDesc::set_projection_angle 0 1 1329 295
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_angle
//       Access: Published
//  Description: Sets the angle beyond which the joint is projected.
////////////////////////////////////////////////////////////////////
63
void PhysxRevoluteJointDesc::set_projection_angle(float angle);

2788 10 set_spring 0 4 3101 34 PhysxRevoluteJointDesc::set_spring 0 1 1330 259
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_spring
//       Access: Published
//  Description: Sets an aptional spring. 
////////////////////////////////////////////////////////////////////
71
void PhysxRevoluteJointDesc::set_spring(PhysxSpringDesc const &spring);

2789 8 set_flag 0 4 3101 32 PhysxRevoluteJointDesc::set_flag 0 1 1331 279
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single RevoluteJointFlag flag.
////////////////////////////////////////////////////////////////////
91
void PhysxRevoluteJointDesc::set_flag(PhysxEnums::PhysxRevoluteJointFlag flag, bool value);

2790 9 set_motor 0 4 3101 33 PhysxRevoluteJointDesc::set_motor 0 1 1332 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_motor
//       Access: Published
//  Description: Sets an optional joint motor.
////////////////////////////////////////////////////////////////////
68
void PhysxRevoluteJointDesc::set_motor(PhysxMotorDesc const &motor);

2791 13 set_limit_low 0 4 3101 37 PhysxRevoluteJointDesc::set_limit_low 0 1 1333 311
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_limit_low
//       Access: Published
//  Description: Sets optional limits for the angular motion of the
//               joint.
////////////////////////////////////////////////////////////////////
75
void PhysxRevoluteJointDesc::set_limit_low(PhysxJointLimitDesc const &low);

2792 14 set_limit_high 0 4 3101 38 PhysxRevoluteJointDesc::set_limit_high 0 1 1334 312
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_limit_high
//       Access: Published
//  Description: Sets optional limits for the angular motion of the
//               joint.
////////////////////////////////////////////////////////////////////
77
void PhysxRevoluteJointDesc::set_limit_high(PhysxJointLimitDesc const &high);

2793 19 set_projection_mode 0 4 3101 43 PhysxRevoluteJointDesc::set_projection_mode 0 1 1335 316
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
////////////////////////////////////////////////////////////////////
87
void PhysxRevoluteJointDesc::set_projection_mode(PhysxEnums::PhysxProjectionMode mode);

2794 23 get_projection_distance 0 4 3101 47 PhysxRevoluteJointDesc::get_projection_distance 0 1 1336 320
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_distance
//       Access: Published
//  Description: Return the distance beyond which the joint is
//               projected.
////////////////////////////////////////////////////////////////////
66
float PhysxRevoluteJointDesc::get_projection_distance(void) const;

2795 20 get_projection_angle 0 4 3101 44 PhysxRevoluteJointDesc::get_projection_angle 0 1 1337 314
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_angle
//       Access: Published
//  Description: Return the angle beyond which the joint is
//               projected.
////////////////////////////////////////////////////////////////////
63
float PhysxRevoluteJointDesc::get_projection_angle(void) const;

2796 8 get_flag 0 4 3101 32 PhysxRevoluteJointDesc::get_flag 0 1 1338 232
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
bool PhysxRevoluteJointDesc::get_flag(PhysxEnums::PhysxRevoluteJointFlag flag) const;

2797 10 get_spring 0 4 3101 34 PhysxRevoluteJointDesc::get_spring 0 1 1339 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
PhysxSpringDesc PhysxRevoluteJointDesc::get_spring(void) const;

2798 9 get_motor 0 4 3101 33 PhysxRevoluteJointDesc::get_motor 0 1 1340 262
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_motor
//       Access: Published
//  Description: Sets an optional joint motor.
////////////////////////////////////////////////////////////////////
61
PhysxMotorDesc PhysxRevoluteJointDesc::get_motor(void) const;

2799 13 get_limit_low 0 4 3101 37 PhysxRevoluteJointDesc::get_limit_low 0 1 1341 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_limit_low
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
PhysxJointLimitDesc PhysxRevoluteJointDesc::get_limit_low(void) const;

2800 14 get_limit_high 0 4 3101 38 PhysxRevoluteJointDesc::get_limit_high 0 1 1342 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_limit_high
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
PhysxJointLimitDesc PhysxRevoluteJointDesc::get_limit_high(void) const;

2801 19 get_projection_mode 0 4 3101 43 PhysxRevoluteJointDesc::get_projection_mode 0 1 1343 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
88
PhysxEnums::PhysxProjectionMode PhysxRevoluteJointDesc::get_projection_mode(void) const;

2802 16 PhysxSceneStats2 0 4 3102 34 PhysxSceneStats2::PhysxSceneStats2 0 1 1344 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
PhysxSceneStats2::PhysxSceneStats2(NxSceneStats2 const *ptr);

2803 17 ~PhysxSceneStats2 0 4 3102 35 PhysxSceneStats2::~PhysxSceneStats2 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
PhysxSceneStats2::~PhysxSceneStats2(void);

2804 13 get_num_stats 0 4 3102 31 PhysxSceneStats2::get_num_stats 0 1 1345 724
// Filename: physxSceneStats2.cxx
// Created by:  enn0x (20Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_num_stats
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline unsigned int PhysxSceneStats2::get_num_stats(void) const;

2805 13 get_cur_value 0 4 3102 31 PhysxSceneStats2::get_cur_value 0 1 1346 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_cur_value
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline int PhysxSceneStats2::get_cur_value(unsigned int index) const;

2806 13 get_max_value 0 4 3102 31 PhysxSceneStats2::get_max_value 0 1 1347 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_max_value
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline int PhysxSceneStats2::get_max_value(unsigned int index) const;

2807 8 get_name 0 4 3102 26 PhysxSceneStats2::get_name 0 1 1348 225
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline char const *PhysxSceneStats2::get_name(unsigned int index) const;

2808 10 get_parent 0 4 3102 28 PhysxSceneStats2::get_parent 0 1 1349 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_parent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline unsigned int PhysxSceneStats2::get_parent(unsigned int index) const;

2809 16 PhysxVehicleDesc 0 4 3103 34 PhysxVehicleDesc::PhysxVehicleDesc 0 1 1350 720
// Filename: physxVehicleDesc.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PhysxVehicleDesc::PhysxVehicleDesc(void);

2810 14 set_to_default 0 4 3103 32 PhysxVehicleDesc::set_to_default 0 1 1351 270
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
51
inline void PhysxVehicleDesc::set_to_default(void);

2811 8 is_valid 0 4 3103 26 PhysxVehicleDesc::is_valid 0 1 1352 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
51
inline bool PhysxVehicleDesc::is_valid(void) const;

2812 17 PhysxSoftBodyDesc 0 4 3104 36 PhysxSoftBodyDesc::PhysxSoftBodyDesc 0 1 1353 722
// Filename: physxSoftBodyDesc.I
// Created by:  enn0x (12Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PhysxSoftBodyDesc::PhysxSoftBodyDesc(void);

2813 18 ~PhysxSoftBodyDesc 0 4 3104 37 PhysxSoftBodyDesc::~PhysxSoftBodyDesc 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline PhysxSoftBodyDesc::~PhysxSoftBodyDesc(void);

2814 14 set_to_default 0 4 3104 33 PhysxSoftBodyDesc::set_to_default 0 1 1354 271
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
52
inline void PhysxSoftBodyDesc::set_to_default(void);

2815 8 is_valid 0 4 3104 27 PhysxSoftBodyDesc::is_valid 0 1 1355 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
52
inline bool PhysxSoftBodyDesc::is_valid(void) const;

2816 18 set_soft_body_mesh 0 4 3104 37 PhysxSoftBodyDesc::set_soft_body_mesh 0 1 1356 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_soft_body_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
void PhysxSoftBodyDesc::set_soft_body_mesh(PhysxSoftBodyMesh *mesh);

2817 8 set_name 0 4 3104 27 PhysxSoftBodyDesc::set_name 0 1 1357 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void PhysxSoftBodyDesc::set_name(char const *name);

2818 14 set_global_pos 0 4 3104 33 PhysxSoftBodyDesc::set_global_pos 0 1 1358 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void PhysxSoftBodyDesc::set_global_pos(LPoint3f const &pos);

2819 14 set_global_mat 0 4 3104 33 PhysxSoftBodyDesc::set_global_mat 0 1 1359 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
void PhysxSoftBodyDesc::set_global_mat(LMatrix4f const &mat);

2820 14 set_global_hpr 0 4 3104 33 PhysxSoftBodyDesc::set_global_hpr 0 1 1360 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_hpr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void PhysxSoftBodyDesc::set_global_hpr(float h, float p, float r);

2821 11 set_density 0 4 3104 30 PhysxSoftBodyDesc::set_density 0 1 1361 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_density
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void PhysxSoftBodyDesc::set_density(float density);

2822 20 set_volume_stiffness 0 4 3104 39 PhysxSoftBodyDesc::set_volume_stiffness 0 1 1362 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_volume_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
void PhysxSoftBodyDesc::set_volume_stiffness(float stiffness);

2823 24 set_stretching_stiffness 0 4 3104 43 PhysxSoftBodyDesc::set_stretching_stiffness 0 1 1363 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_stretching_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void PhysxSoftBodyDesc::set_stretching_stiffness(float stiffness);

2824 23 set_damping_coefficient 0 4 3104 42 PhysxSoftBodyDesc::set_damping_coefficient 0 1 1364 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_damping_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
void PhysxSoftBodyDesc::set_damping_coefficient(float damping);

2825 12 set_friction 0 4 3104 31 PhysxSoftBodyDesc::set_friction 0 1 1365 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_friction
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void PhysxSoftBodyDesc::set_friction(float friction);

2826 15 set_tear_factor 0 4 3104 34 PhysxSoftBodyDesc::set_tear_factor 0 1 1366 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_tear_factor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PhysxSoftBodyDesc::set_tear_factor(float tearFactor);

2827 19 set_particle_radius 0 4 3104 38 PhysxSoftBodyDesc::set_particle_radius 0 1 1367 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_particle_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PhysxSoftBodyDesc::set_particle_radius(float radius);

2828 25 set_relative_grid_spacing 0 4 3104 44 PhysxSoftBodyDesc::set_relative_grid_spacing 0 1 1368 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_relative_grid_spacing
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void PhysxSoftBodyDesc::set_relative_grid_spacing(float spacing);

2829 34 set_collision_response_coefficient 0 4 3104 53 PhysxSoftBodyDesc::set_collision_response_coefficient 0 1 1369 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_collision_response_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void PhysxSoftBodyDesc::set_collision_response_coefficient(float coef);

2830 35 set_attachment_response_coefficient 0 4 3104 54 PhysxSoftBodyDesc::set_attachment_response_coefficient 0 1 1370 254
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_attachment_response_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
void PhysxSoftBodyDesc::set_attachment_response_coefficient(float coef);

2831 21 set_solver_iterations 0 4 3104 40 PhysxSoftBodyDesc::set_solver_iterations 0 1 1371 381
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_solver_iterations
//       Access: Published
//  Description: Number of solver iterations.
//               Small numbers make the simulation faster while 
//               the soft body gets less stiff.
////////////////////////////////////////////////////////////////////
72
void PhysxSoftBodyDesc::set_solver_iterations(unsigned int interations);

2832 8 set_flag 0 4 3104 27 PhysxSoftBodyDesc::set_flag 0 1 1372 272
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual SoftBodyFlag flags.
////////////////////////////////////////////////////////////////////
81
void PhysxSoftBodyDesc::set_flag(PhysxEnums::PhysxSoftBodyFlag flag, bool value);

2833 8 get_name 0 4 3104 27 PhysxSoftBodyDesc::get_name 0 1 1373 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
char const *PhysxSoftBodyDesc::get_name(void) const;

2834 14 get_global_pos 0 4 3104 33 PhysxSoftBodyDesc::get_global_pos 0 1 1374 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_global_pos
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
LPoint3f PhysxSoftBodyDesc::get_global_pos(void) const;

2835 14 get_global_mat 0 4 3104 33 PhysxSoftBodyDesc::get_global_mat 0 1 1375 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_global_mat
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
LMatrix4f PhysxSoftBodyDesc::get_global_mat(void) const;

2836 11 get_density 0 4 3104 30 PhysxSoftBodyDesc::get_density 0 1 1376 230
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_density
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
float PhysxSoftBodyDesc::get_density(void) const;

2837 20 get_volume_stiffness 0 4 3104 39 PhysxSoftBodyDesc::get_volume_stiffness 0 1 1377 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_volume_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
float PhysxSoftBodyDesc::get_volume_stiffness(void) const;

2838 24 get_stretching_stiffness 0 4 3104 43 PhysxSoftBodyDesc::get_stretching_stiffness 0 1 1378 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_stretching_stiffness
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
float PhysxSoftBodyDesc::get_stretching_stiffness(void) const;

2839 23 get_damping_coefficient 0 4 3104 42 PhysxSoftBodyDesc::get_damping_coefficient 0 1 1379 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_damping_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
float PhysxSoftBodyDesc::get_damping_coefficient(void) const;

2840 12 get_friction 0 4 3104 31 PhysxSoftBodyDesc::get_friction 0 1 1380 231
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_friction
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
float PhysxSoftBodyDesc::get_friction(void) const;

2841 15 get_tear_factor 0 4 3104 34 PhysxSoftBodyDesc::get_tear_factor 0 1 1381 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_tear_factor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
float PhysxSoftBodyDesc::get_tear_factor(void) const;

2842 19 get_particle_radius 0 4 3104 38 PhysxSoftBodyDesc::get_particle_radius 0 1 1382 238
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_particle_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
float PhysxSoftBodyDesc::get_particle_radius(void) const;

2843 25 get_relative_grid_spacing 0 4 3104 44 PhysxSoftBodyDesc::get_relative_grid_spacing 0 1 1383 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_relative_grid_spacing
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
float PhysxSoftBodyDesc::get_relative_grid_spacing(void) const;

2844 34 get_collision_response_coefficient 0 4 3104 53 PhysxSoftBodyDesc::get_collision_response_coefficient 0 1 1384 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_collision_response_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
float PhysxSoftBodyDesc::get_collision_response_coefficient(void) const;

2845 35 get_attachment_response_coefficient 0 4 3104 54 PhysxSoftBodyDesc::get_attachment_response_coefficient 0 1 1385 254
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_attachment_response_coefficient
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
float PhysxSoftBodyDesc::get_attachment_response_coefficient(void) const;

2846 21 get_solver_iterations 0 4 3104 40 PhysxSoftBodyDesc::get_solver_iterations 0 1 1386 240
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_solver_iterations
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
unsigned int PhysxSoftBodyDesc::get_solver_iterations(void) const;

2847 8 get_flag 0 4 3104 27 PhysxSoftBodyDesc::get_flag 0 1 1387 227
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
bool PhysxSoftBodyDesc::get_flag(PhysxEnums::PhysxSoftBodyFlag flag) const;

2848 11 PhysxSphere 0 4 3105 24 PhysxSphere::PhysxSphere 0 2 1388 1389 935
// Filename: physxSphere.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline PhysxSphere::PhysxSphere(void);
inline PhysxSphere::PhysxSphere(PhysxSphere const &sphere);

2849 12 ~PhysxSphere 0 4 3105 25 PhysxSphere::~PhysxSphere 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline PhysxSphere::~PhysxSphere(void);

2850 8 contains 0 4 3105 21 PhysxSphere::contains 0 3 1390 1391 1392 936
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if a point is contained within the sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if a sphere is contained within the sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if an axis aligned box is contained within
//               the sphere. The axis aligned box is defined by the
//               minimum corner and the maximum corner.
////////////////////////////////////////////////////////////////////
189
bool PhysxSphere::contains(LPoint3f const &p) const;
bool PhysxSphere::contains(PhysxSphere const &sphere) const;
bool PhysxSphere::contains(LPoint3f const &min, LPoint3f const &max) const;

2851 9 intersect 0 4 3105 22 PhysxSphere::intersect 0 1 1393 322
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::intersect
//       Access: Published
//  Description: Tests if the sphere intersects another sphere.
//               Returns TRUE if the spheres overlap.
////////////////////////////////////////////////////////////////////
61
bool PhysxSphere::intersect(PhysxSphere const &sphere) const;

2852 8 is_valid 0 4 3105 21 PhysxSphere::is_valid 0 1 1394 258
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::is_valid
//       Access: Published
//  Description: Returns TRUE if this sphere is valid.
////////////////////////////////////////////////////////////////////
39
bool PhysxSphere::is_valid(void) const;

2853 10 get_center 0 4 3105 23 PhysxSphere::get_center 0 1 1395 256
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::get_center
//       Access: Published
//  Description: Returns the center of the sphere.
////////////////////////////////////////////////////////////////////
45
LPoint3f PhysxSphere::get_center(void) const;

2854 10 get_radius 0 4 3105 23 PhysxSphere::get_radius 0 1 1396 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::get_radius
//       Access: Published
//  Description: Returns the sphere's radius.
////////////////////////////////////////////////////////////////////
42
float PhysxSphere::get_radius(void) const;

2855 10 set_center 0 4 3105 23 PhysxSphere::set_center 0 1 1397 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::set_center
//       Access: Published
//  Description: Sets the center of the sphere.
////////////////////////////////////////////////////////////////////
45
void PhysxSphere::set_center(LPoint3f value);

2856 10 set_radius 0 4 3105 23 PhysxSphere::set_radius 0 1 1398 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::set_radius
//       Access: Published
//  Description: Sets the sphere's radius.
////////////////////////////////////////////////////////////////////
42
void PhysxSphere::set_radius(float value);

2857 30 PhysxSphereForceFieldShapeDesc 0 4 3106 62 PhysxSphereForceFieldShapeDesc::PhysxSphereForceFieldShapeDesc 0 1 1399 748
// Filename: physxSphereForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline PhysxSphereForceFieldShapeDesc::PhysxSphereForceFieldShapeDesc(void);

2858 31 ~PhysxSphereForceFieldShapeDesc 0 4 3106 63 PhysxSphereForceFieldShapeDesc::~PhysxSphereForceFieldShapeDesc 0 0 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline PhysxSphereForceFieldShapeDesc::~PhysxSphereForceFieldShapeDesc(void);

2859 10 set_radius 0 4 3106 42 PhysxSphereForceFieldShapeDesc::set_radius 0 1 1400 276
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
////////////////////////////////////////////////////////////////////
62
void PhysxSphereForceFieldShapeDesc::set_radius(float radius);

2860 10 get_radius 0 4 3106 42 PhysxSphereForceFieldShapeDesc::get_radius 0 1 1401 258
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
////////////////////////////////////////////////////////////////////
61
float PhysxSphereForceFieldShapeDesc::get_radius(void) const;

2861 20 PhysxSphereShapeDesc 0 4 3107 42 PhysxSphereShapeDesc::PhysxSphereShapeDesc 0 1 1402 728
// Filename: physxSphereShapeDesc.I
// Created by:  enn0x (11Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PhysxSphereShapeDesc::PhysxSphereShapeDesc(void);

2862 10 set_radius 0 4 3107 32 PhysxSphereShapeDesc::set_radius 0 1 1403 266
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
////////////////////////////////////////////////////////////////////
52
void PhysxSphereShapeDesc::set_radius(float radius);

2863 10 get_radius 0 4 3107 32 PhysxSphereShapeDesc::get_radius 0 1 1404 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
////////////////////////////////////////////////////////////////////
51
float PhysxSphereShapeDesc::get_radius(void) const;

2864 23 PhysxSphericalJointDesc 0 4 3108 48 PhysxSphericalJointDesc::PhysxSphericalJointDesc 0 1 1405 734
// Filename: physxSphericalJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline PhysxSphericalJointDesc::PhysxSphericalJointDesc(void);

2865 24 ~PhysxSphericalJointDesc 0 4 3108 49 PhysxSphericalJointDesc::~PhysxSphericalJointDesc 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline PhysxSphericalJointDesc::~PhysxSphericalJointDesc(void);

2866 23 set_projection_distance 0 4 3108 48 PhysxSphericalJointDesc::set_projection_distance 0 1 1406 294
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_projection_distance
//       Access: Published
//  Description: Set the distance above which to project joint.
////////////////////////////////////////////////////////////////////
70
void PhysxSphericalJointDesc::set_projection_distance(float distance);

2867 8 set_flag 0 4 3108 33 PhysxSphericalJointDesc::set_flag 0 1 1407 281
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single SphericalJointFlag flag.
////////////////////////////////////////////////////////////////////
93
void PhysxSphericalJointDesc::set_flag(PhysxEnums::PhysxSphericalJointFlag flag, bool value);

2868 14 set_swing_axis 0 4 3108 39 PhysxSphericalJointDesc::set_swing_axis 0 1 1408 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_axis
//       Access: Published
//  Description: Set the swing limit axis defined in the joint
//               space of actor 0.
////////////////////////////////////////////////////////////////////
68
void PhysxSphericalJointDesc::set_swing_axis(LVector3f const &axis);

2869 16 set_twist_spring 0 4 3108 41 PhysxSphericalJointDesc::set_twist_spring 0 1 1409 283
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_spring
//       Access: Published
//  Description: Sets a spring that works against twisting.
////////////////////////////////////////////////////////////////////
78
void PhysxSphericalJointDesc::set_twist_spring(PhysxSpringDesc const &spring);

2870 16 set_swing_spring 0 4 3108 41 PhysxSphericalJointDesc::set_swing_spring 0 1 1410 283
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_spring
//       Access: Published
//  Description: Sets a spring that works against swinging.
////////////////////////////////////////////////////////////////////
78
void PhysxSphericalJointDesc::set_swing_spring(PhysxSpringDesc const &spring);

2871 16 set_joint_spring 0 4 3108 41 PhysxSphericalJointDesc::set_joint_spring 0 1 1411 292
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_joint_spring
//       Access: Published
//  Description: Sets a spring that lets the joint get pulled apart.
////////////////////////////////////////////////////////////////////
78
void PhysxSphericalJointDesc::set_joint_spring(PhysxSpringDesc const &spring);

2872 19 set_twist_limit_low 0 4 3108 44 PhysxSphericalJointDesc::set_twist_limit_low 0 1 1412 278
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_limit_low
//       Access: Published
//  Description: Limits rotation around twist axis.
////////////////////////////////////////////////////////////////////
82
void PhysxSphericalJointDesc::set_twist_limit_low(PhysxJointLimitDesc const &low);

2873 20 set_twist_limit_high 0 4 3108 45 PhysxSphericalJointDesc::set_twist_limit_high 0 1 1413 279
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_limit_high
//       Access: Published
//  Description: Limits rotation around twist axis.
////////////////////////////////////////////////////////////////////
84
void PhysxSphericalJointDesc::set_twist_limit_high(PhysxJointLimitDesc const &high);

2874 15 set_swing_limit 0 4 3108 40 PhysxSphericalJointDesc::set_swing_limit 0 1 1414 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_limit
//       Access: Published
//  Description: Limits swing of twist axis.
////////////////////////////////////////////////////////////////////
80
void PhysxSphericalJointDesc::set_swing_limit(PhysxJointLimitDesc const &limit);

2875 19 set_projection_mode 0 4 3108 44 PhysxSphericalJointDesc::set_projection_mode 0 1 1415 317
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
////////////////////////////////////////////////////////////////////
88
void PhysxSphericalJointDesc::set_projection_mode(PhysxEnums::PhysxProjectionMode mode);

2876 23 get_projection_distance 0 4 3108 48 PhysxSphericalJointDesc::get_projection_distance 0 1 1416 248
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_projection_distance
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
float PhysxSphericalJointDesc::get_projection_distance(void) const;

2877 8 get_flag 0 4 3108 33 PhysxSphericalJointDesc::get_flag 0 1 1417 233
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
87
bool PhysxSphericalJointDesc::get_flag(PhysxEnums::PhysxSphericalJointFlag flag) const;

2878 14 get_swing_axis 0 4 3108 39 PhysxSphericalJointDesc::get_swing_axis 0 1 1418 239
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_axis
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
LVector3f PhysxSphericalJointDesc::get_swing_axis(void) const;

2879 16 get_twist_spring 0 4 3108 41 PhysxSphericalJointDesc::get_twist_spring 0 1 1419 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
PhysxSpringDesc PhysxSphericalJointDesc::get_twist_spring(void) const;

2880 16 get_swing_spring 0 4 3108 41 PhysxSphericalJointDesc::get_swing_spring 0 1 1420 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
PhysxSpringDesc PhysxSphericalJointDesc::get_swing_spring(void) const;

2881 16 get_joint_spring 0 4 3108 41 PhysxSphericalJointDesc::get_joint_spring 0 1 1421 241
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_joint_spring
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
PhysxSpringDesc PhysxSphericalJointDesc::get_joint_spring(void) const;

2882 19 get_twist_limit_low 0 4 3108 44 PhysxSphericalJointDesc::get_twist_limit_low 0 1 1422 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_limit_low
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
77
PhysxJointLimitDesc PhysxSphericalJointDesc::get_twist_limit_low(void) const;

2883 20 get_twist_limit_high 0 4 3108 45 PhysxSphericalJointDesc::get_twist_limit_high 0 1 1423 245
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_limit_high
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
PhysxJointLimitDesc PhysxSphericalJointDesc::get_twist_limit_high(void) const;

2884 15 get_swing_limit 0 4 3108 40 PhysxSphericalJointDesc::get_swing_limit 0 1 1424 267
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_limit
//       Access: Published
//  Description: Limits swing of twist axis.
////////////////////////////////////////////////////////////////////
73
PhysxJointLimitDesc PhysxSphericalJointDesc::get_swing_limit(void) const;

2885 19 get_projection_mode 0 4 3108 44 PhysxSphericalJointDesc::get_projection_mode 0 1 1425 244
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_projection_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
89
PhysxEnums::PhysxProjectionMode PhysxSphericalJointDesc::get_projection_mode(void) const;

2886 26 PhysxTriangleMeshShapeDesc 0 4 3109 54 PhysxTriangleMeshShapeDesc::PhysxTriangleMeshShapeDesc 0 1 1426 740
// Filename: physxTriangleMeshShapeDesc.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PhysxTriangleMeshShapeDesc::PhysxTriangleMeshShapeDesc(void);

2887 8 set_mesh 0 4 3109 36 PhysxTriangleMeshShapeDesc::set_mesh 0 1 1427 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShapeDesc::set_mesh
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void PhysxTriangleMeshShapeDesc::set_mesh(PhysxTriangleMesh *mesh);

2888 12 PhysxUtilLib 0 4 3110 26 PhysxUtilLib::PhysxUtilLib 0 1 1428 712
// Filename: physxUtilLib.I
// Created by:  enn0x (01Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline PhysxUtilLib::PhysxUtilLib(void);

2889 13 ~PhysxUtilLib 0 4 3110 27 PhysxUtilLib::~PhysxUtilLib 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline PhysxUtilLib::~PhysxUtilLib(void);

2890 18 box_contains_point 0 4 3110 32 PhysxUtilLib::box_contains_point 0 1 1429 340
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::box_contains_point
//       Access: Published
//  Description: Test if an oriented box contains a point.
//
//               \param [in] box
//               \param [in] p
////////////////////////////////////////////////////////////////////
78
bool PhysxUtilLib::box_contains_point(PhysxBox const &box, LPoint3f const &p);

2891 10 create_box 0 4 3110 24 PhysxUtilLib::create_box 0 1 1430 381
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::create_box
//       Access: Published
//  Description: Create an oriented box from an axis aligned box
//               and a transformation. 
//
//               \param [in] aabb
//               \param [in] mat
////////////////////////////////////////////////////////////////////
82
PhysxBox PhysxUtilLib::create_box(PhysxBounds3 const &aabb, LMatrix4f const &mat);

2892 29 compute_box_world_edge_normal 0 4 3110 43 PhysxUtilLib::compute_box_world_edge_normal 0 1 1431 546
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_world_edge_normal
//       Access: Published
//  Description: Compute and edge normals for an oriented box. This
//               is an averaged normal, from the two faces sharing
//               the edge. The edge index should be from 0 to 11 
//               (i.e. a box has 12 edges).
//
//               \param [in] box
//               \param [in] edge_index
////////////////////////////////////////////////////////////////////
100
LVector3f PhysxUtilLib::compute_box_world_edge_normal(PhysxBox const &box, unsigned int edge_index);

2893 26 compute_capsule_around_box 0 4 3110 40 PhysxUtilLib::compute_capsule_around_box 0 1 1432 315
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_capsule_around_box
//       Access: Published
//  Description: Compute a capsule which encloses a box.
//
//               \param [in] box
////////////////////////////////////////////////////////////////////
75
PhysxCapsule PhysxUtilLib::compute_capsule_around_box(PhysxBox const &box);

2894 21 is_box_a_inside_box_b 0 4 3110 35 PhysxUtilLib::is_box_a_inside_box_b 0 1 1433 394
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::is_box_a_inside_box_b
//       Access: Published
//  Description: Test if box A is inside another box B. Returns
//               TRUE if box A is inside box B.
//
//               \param [in] a
//               \param [in] b
////////////////////////////////////////////////////////////////////
79
bool PhysxUtilLib::is_box_a_inside_box_b(PhysxBox const &a, PhysxBox const &b);

2895 26 compute_box_around_capsule 0 4 3110 40 PhysxUtilLib::compute_box_around_capsule 0 1 1434 319
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_around_capsule
//       Access: Published
//  Description: Compute a box which encloses a capsule.
//
//               \param [in] capsule
////////////////////////////////////////////////////////////////////
79
PhysxBox PhysxUtilLib::compute_box_around_capsule(PhysxCapsule const &capsule);

2896 18 set_fpu_exceptions 0 4 3110 32 PhysxUtilLib::set_fpu_exceptions 0 1 1435 250
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_exceptions
//       Access: Published
//  Description: Set FPU precision.
////////////////////////////////////////////////////////////////////
46
void PhysxUtilLib::set_fpu_exceptions(bool b);

2897 19 set_fpu_precision24 0 4 3110 33 PhysxUtilLib::set_fpu_precision24 0 1 1436 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision24
//       Access: Published
//  Description: Set FPU precision.
////////////////////////////////////////////////////////////////////
45
void PhysxUtilLib::set_fpu_precision24(void);

2898 19 set_fpu_precision53 0 4 3110 33 PhysxUtilLib::set_fpu_precision53 0 1 1437 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision53
//       Access: Published
//  Description: Set FPU precision.
////////////////////////////////////////////////////////////////////
45
void PhysxUtilLib::set_fpu_precision53(void);

2899 19 set_fpu_precision64 0 4 3110 33 PhysxUtilLib::set_fpu_precision64 0 1 1438 251
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision64
//       Access: Published
//  Description: Set FPU precision.
////////////////////////////////////////////////////////////////////
45
void PhysxUtilLib::set_fpu_precision64(void);

2900 21 set_fpu_rounding_chop 0 4 3110 35 PhysxUtilLib::set_fpu_rounding_chop 0 1 1439 253
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_chop
//       Access: Published
//  Description: Set FPU precision.
////////////////////////////////////////////////////////////////////
47
void PhysxUtilLib::set_fpu_rounding_chop(void);

2901 21 set_fpu_rounding_down 0 4 3110 35 PhysxUtilLib::set_fpu_rounding_down 0 1 1440 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_down
//       Access: Published
//  Description: Set FPU rounding mode.
////////////////////////////////////////////////////////////////////
47
void PhysxUtilLib::set_fpu_rounding_down(void);

2902 21 set_fpu_rounding_near 0 4 3110 35 PhysxUtilLib::set_fpu_rounding_near 0 1 1441 257
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_near
//       Access: Published
//  Description: Set FPU rounding mode.
////////////////////////////////////////////////////////////////////
47
void PhysxUtilLib::set_fpu_rounding_near(void);

2903 19 set_fpu_rounding_up 0 4 3110 33 PhysxUtilLib::set_fpu_rounding_up 0 1 1442 255
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_up
//       Access: Published
//  Description: Set FPU rounding mode.
////////////////////////////////////////////////////////////////////
45
void PhysxUtilLib::set_fpu_rounding_up(void);

2904 8 int_ceil 0 4 3110 22 PhysxUtilLib::int_ceil 0 1 1443 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_ceil
//       Access: Published
//  Description: Convert a floating point number to an integer.
////////////////////////////////////////////////////////////////////
43
int PhysxUtilLib::int_ceil(float const &f);

2905 8 int_chop 0 4 3110 22 PhysxUtilLib::int_chop 0 1 1444 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_chop
//       Access: Published
//  Description: Convert a floating point number to an integer.
////////////////////////////////////////////////////////////////////
43
int PhysxUtilLib::int_chop(float const &f);

2906 9 int_floor 0 4 3110 23 PhysxUtilLib::int_floor 0 1 1445 269
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_floor
//       Access: Published
//  Description: Convert a floating point number to an integer.
////////////////////////////////////////////////////////////////////
44
int PhysxUtilLib::int_floor(float const &f);

2907 24 compute_distance_squared 0 4 3110 38 PhysxUtilLib::compute_distance_squared 0 1 1446 377
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_distance_squared
//       Access: Published
//  Description: Compute the distance squared from a point to a
//               ray.
//
//               \param [in] ray
//               \param [in] point
////////////////////////////////////////////////////////////////////
89
float PhysxUtilLib::compute_distance_squared(PhysxRay const &ray, LPoint3f const &point);

2908 23 compute_square_distance 0 4 3110 37 PhysxUtilLib::compute_square_distance 0 1 1447 385
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_square_distance
//       Access: Published
//  Description: Compute the distance squared from a point to a
//               line segment.
//
//               \param [in] seg
//               \param [in] point
////////////////////////////////////////////////////////////////////
92
float PhysxUtilLib::compute_square_distance(PhysxSegment const &seg, LPoint3f const &point);

2909 13 merge_spheres 0 4 3110 27 PhysxUtilLib::merge_spheres 0 1 1448 378
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::merge_spheres
//       Access: Published
//  Description: Compute an overall bounding sphere for a pair of
//               spheres.
//
//               \param [in] sphere0
//               \param [in] sphere1
////////////////////////////////////////////////////////////////////
96
PhysxSphere PhysxUtilLib::merge_spheres(PhysxSphere const &sphere0, PhysxSphere const &sphere1);

2910 18 normal_to_tangents 0 4 3110 32 PhysxUtilLib::normal_to_tangents 0 1 1449 381
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::normal_to_tangents
//       Access: Published
//  Description: Get the tangent vectors associated with a normal.
//
//               \param [in] n
//               \param [out] t1
//               \param [out] t2
////////////////////////////////////////////////////////////////////
88
void PhysxUtilLib::normal_to_tangents(LVector3f const &n, LVector3f &t1, LVector3f &t2);

2911 20 find_rotation_matrix 0 4 3110 34 PhysxUtilLib::find_rotation_matrix 0 1 1450 391
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::find_rotation_matrix
//       Access: Published
//  Description: Computes a rotation matrix M so that: M * x = b
//               (x and b are unit vectors).
//
//               \param [in] x
//               \param [in] b
////////////////////////////////////////////////////////////////////
85
LMatrix3f PhysxUtilLib::find_rotation_matrix(LVector3f const &x, LVector3f const &b);

2912 19 compute_sphere_mass 0 4 3110 33 PhysxUtilLib::compute_sphere_mass 0 1 1451 393
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_mass
//       Access: Published
//  Description: Computes mass of a homogeneous sphere according
//               to sphere density. 
//
//               \param [in] radius
//               \param [in] density
////////////////////////////////////////////////////////////////////
69
float PhysxUtilLib::compute_sphere_mass(float radius, float density);

2913 22 compute_sphere_density 0 4 3110 36 PhysxUtilLib::compute_sphere_density 0 1 1452 391
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_density
//       Access: Published
//  Description: Computes density of a homogeneous sphere according
//               to sphere mass
//
//               \param [in] radius
//               \param [in] mass
////////////////////////////////////////////////////////////////////
69
float PhysxUtilLib::compute_sphere_density(float radius, float mass);

2914 16 compute_box_mass 0 4 3110 30 PhysxUtilLib::compute_box_mass 0 1 1453 383
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_mass
//       Access: Published
//  Description: Computes mass of a homogeneous box according to
//               box density.
//
//               \param [in] radius
//               \param [in] density
////////////////////////////////////////////////////////////////////
78
float PhysxUtilLib::compute_box_mass(LVector3f const &extents, float density);

2915 19 compute_box_density 0 4 3110 33 PhysxUtilLib::compute_box_density 0 1 1454 383
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_density
//       Access: Published
//  Description: Computes density of a homogeneous box according to
//               box mass.
//
//               \param [in] radius
//               \param [in] mass
////////////////////////////////////////////////////////////////////
78
float PhysxUtilLib::compute_box_density(LVector3f const &extents, float mass);

2916 22 compute_ellipsoid_mass 0 4 3110 36 PhysxUtilLib::compute_ellipsoid_mass 0 1 1455 401
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_ellipsoid_mass
//       Access: Published
//  Description: Computes mass of a homogeneous ellipsoid according
//               to ellipsoid density.
//
//               \param [in] radius
//               \param [in] density
////////////////////////////////////////////////////////////////////
84
float PhysxUtilLib::compute_ellipsoid_mass(LVector3f const &extents, float density);

2917 25 compute_ellipsoid_density 0 4 3110 39 PhysxUtilLib::compute_ellipsoid_density 0 1 1456 401
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_ellipsoid_density
//       Access: Published
//  Description: Computes density of a homogeneous ellipsoid
//               according to ellipsoid mass.
//
//               \param [in] radius
//               \param [in] mass
////////////////////////////////////////////////////////////////////
84
float PhysxUtilLib::compute_ellipsoid_density(LVector3f const &extents, float mass);

2918 21 compute_cylinder_mass 0 4 3110 35 PhysxUtilLib::compute_cylinder_mass 0 1 1457 398
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cylinder_mass
//       Access: Published
//  Description: Computes mass of a homogeneous cylinder according
//               to cylinder density.
//
//               \param [in] radius
//               \param [in] density
////////////////////////////////////////////////////////////////////
85
float PhysxUtilLib::compute_cylinder_mass(float radius, float length, float density);

2919 24 compute_cylinder_density 0 4 3110 38 PhysxUtilLib::compute_cylinder_density 0 1 1458 398
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cylinder_density
//       Access: Published
//  Description: Computes density of a homogeneous cylinder
//               according to cylinder mass.
//
//               \param [in] radius
//               \param [in] mass
////////////////////////////////////////////////////////////////////
85
float PhysxUtilLib::compute_cylinder_density(float radius, float length, float mass);

2920 17 compute_cone_mass 0 4 3110 31 PhysxUtilLib::compute_cone_mass 0 1 1459 386
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cone_mass
//       Access: Published
//  Description: Computes mass of a homogeneous cone according to
//               cone density.
//
//               \param [in] radius
//               \param [in] density
////////////////////////////////////////////////////////////////////
81
float PhysxUtilLib::compute_cone_mass(float radius, float length, float density);

2921 20 compute_cone_density 0 4 3110 34 PhysxUtilLib::compute_cone_density 0 1 1460 386
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cone_density
//       Access: Published
//  Description: Computes density of a homogeneous cone according
//               to cone mass.
//
//               \param [in] radius
//               \param [in] mass
////////////////////////////////////////////////////////////////////
81
float PhysxUtilLib::compute_cone_density(float radius, float length, float mass);

2922 26 compute_box_inertia_tensor 0 4 3110 40 PhysxUtilLib::compute_box_inertia_tensor 0 1 1461 435
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_inertia_tensor
//       Access: Published
//  Description: Computes diagonalized inertia tensor for a box.
//
//               \param [in] mass
//               \param [in] xlength
//               \param [in] ylength
//               \param [in] zlength
////////////////////////////////////////////////////////////////////
108
LVector3f PhysxUtilLib::compute_box_inertia_tensor(float mass, float xlength, float ylength, float zlength);

2923 29 compute_sphere_inertia_tensor 0 4 3110 43 PhysxUtilLib::compute_sphere_inertia_tensor 0 1 1462 402
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_inertia_tensor
//       Access: Published
//  Description: Computes diagonalized inertia tensor for a sphere.
//
//               \param [in] mass
//               \param [in] radius
//               \param [in] hollow
////////////////////////////////////////////////////////////////////
93
LVector3f PhysxUtilLib::compute_sphere_inertia_tensor(float mass, float radius, bool hollow);

2924 17 box_box_intersect 0 4 3110 31 PhysxUtilLib::box_box_intersect 0 1 1463 672
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::box_box_intersect
//       Access: Published
//  Description: Boolean intersection test between two OBBs. Uses
//               the separating axis theorem. Disabling 'full_test'
//               only performs 6 axis tests out of 15.
//
//               \param [in] extents0
//               \param [in] center0
//               \param [in] rotation0
//               \param [in] extents1
//               \param [in] center1
//               \param [in] rotation1
//               \param [in] full_test
////////////////////////////////////////////////////////////////////
213
bool PhysxUtilLib::box_box_intersect(LVector3f const &extents0, LPoint3f const &center0, LMatrix3f const &rotation0, LVector3f const &extents1, LPoint3f const &center1, LMatrix3f const &rotation1, bool full_test);

2925 17 tri_box_intersect 0 4 3110 31 PhysxUtilLib::tri_box_intersect 0 1 1464 490
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::tri_box_intersect
//       Access: Published
//  Description: Boolean intersection test between a triangle and
//               a box.
//
//               \param [in] vertex0
//               \param [in] vertex1
//               \param [in] vertex2
//               \param [in] center
//               \param [in] extents
////////////////////////////////////////////////////////////////////
162
bool PhysxUtilLib::tri_box_intersect(LPoint3f const &vertex0, LPoint3f const &vertex1, LPoint3f const &vertex2, LPoint3f const &center, LVector3f const &extents);

2926 19 ray_plane_intersect 0 4 3110 33 PhysxUtilLib::ray_plane_intersect 0 1 1465 378
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_plane_intersect
//       Access: Published
//  Description: Ray-plane intersection test. 
//
//               \param [in] ray
//               \param [in] plane
//               \param [out] point_on_plane
////////////////////////////////////////////////////////////////////
111
bool PhysxUtilLib::ray_plane_intersect(PhysxRay const &ray, PhysxPlane const &plane, LPoint3f &point_on_plane);

2927 20 ray_sphere_intersect 0 4 3110 34 PhysxUtilLib::ray_sphere_intersect 0 1 1466 594
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_sphere_intersect
//       Access: Published
//  Description: Ray-sphere intersection test. Returns true if the
//               ray intersects the sphere, and the impact point if
//               needed.
//
//               \param [in] origin
//               \param [in] dir
//               \param [in] length
//               \param [in] center
//               \param [in] radius
//               \param [out] hit_pos
////////////////////////////////////////////////////////////////////
157
bool PhysxUtilLib::ray_sphere_intersect(LPoint3f const &origin, LVector3f const &dir, float length, LPoint3f const &center, float radius, LPoint3f &hit_pos);

2928 21 segment_box_intersect 0 4 3110 35 PhysxUtilLib::segment_box_intersect 0 1 1467 500
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_box_intersect
//       Access: Published
//  Description: Segment-AABB intersection test. Also computes
//               intersection point.
//
//               \param [in] p1
//               \param [in] p2
//               \param [in] bbox_min
//               \param [in] bbox_max
//               \param [out] intercept
////////////////////////////////////////////////////////////////////
154
bool PhysxUtilLib::segment_box_intersect(LPoint3f const &p1, LPoint3f const &p2, LPoint3f const &bbox_min, LPoint3f const &bbox_max, LPoint3f &intercept);

2929 18 ray_aabb_intersect 0 4 3110 32 PhysxUtilLib::ray_aabb_intersect 0 1 1468 484
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_aabb_intersect
//       Access: Published
//  Description: Ray-AABB intersection test. Also computes
//               intersection point.
//
//               \param [in] min
//               \param [in] max
//               \param [in] origin
//               \param [in] dir
//               \param [out] coord
////////////////////////////////////////////////////////////////////
143
bool PhysxUtilLib::ray_aabb_intersect(LPoint3f const &min, LPoint3f const &max, LPoint3f const &origin, LVector3f const &dir, LPoint3f &coord);

2930 21 segment_obb_intersect 0 4 3110 35 PhysxUtilLib::segment_obb_intersect 0 1 1469 497
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_obb_intersect
//       Access: Published
//  Description: Boolean segment-OBB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] p0
//               \param [in] p1
//               \param [in] center
//               \param [in] extents
//               \param [in] rot
////////////////////////////////////////////////////////////////////
153
bool PhysxUtilLib::segment_obb_intersect(LPoint3f const &p0, LPoint3f const &p1, LPoint3f const &center, LVector3f const &extents, LMatrix3f const &rot);

2931 22 segment_aabb_intersect 0 4 3110 36 PhysxUtilLib::segment_aabb_intersect 0 1 1470 459
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_aabb_intersect
//       Access: Published
//  Description: Boolean segment-AABB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] p0
//               \param [in] p1
//               \param [in] min
//               \param [in] max
////////////////////////////////////////////////////////////////////
124
bool PhysxUtilLib::segment_aabb_intersect(LPoint3f const &p0, LPoint3f const &p1, LPoint3f const &min, LPoint3f const &max);

2932 17 ray_obb_intersect 0 4 3110 31 PhysxUtilLib::ray_obb_intersect 0 1 1471 458
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_obb_intersect
//       Access: Published
//  Description: Boolean ray-OBB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] ray
//               \param [in] center
//               \param [in] extents
//               \param [in] rot
////////////////////////////////////////////////////////////////////
130
bool PhysxUtilLib::ray_obb_intersect(PhysxRay const &ray, LPoint3f const &center, LVector3f const &extents, LMatrix3f const &rot);

2933 21 ray_capsule_intersect 0 4 3110 35 PhysxUtilLib::ray_capsule_intersect 0 1 1472 455
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_capsule_intersect
//       Access: Published
//  Description: Ray-capsule intersection test. Returns number of
//               intersection points (0,1 or 2) along the ray.
//
//               \param [in] origin
//               \param [in] dir
//               \param [in] capsule
////////////////////////////////////////////////////////////////////
124
unsigned int PhysxUtilLib::ray_capsule_intersect(LPoint3f const &origin, LVector3f const &dir, PhysxCapsule const &capsule);

2934 23 swept_spheres_intersect 0 4 3110 37 PhysxUtilLib::swept_spheres_intersect 0 1 1473 545
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::swept_spheres_intersect
//       Access: Published
//  Description: Sphere-sphere sweep test. Returns true if spheres
//               intersect during their linear motion along
//               provided velocity vectors.
//
//               \param [in] sphere0
//               \param [in] velocity0
//               \param [in] sphere1
//               \param [in] velocity1
////////////////////////////////////////////////////////////////////
155
bool PhysxUtilLib::swept_spheres_intersect(PhysxSphere const &sphere0, LVector3f const &velocity0, PhysxSphere const &sphere1, LVector3f const &velocity1);

2935 17 ray_tri_intersect 0 4 3110 31 PhysxUtilLib::ray_tri_intersect 0 1 1474 733
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_tri_intersect
//       Access: Published
//  Description: Ray-triangle intersection test. Returns impact 
//               distance (t) as well as barycentric coordinates
//               (u,v) of impact point. The test performs back face
//               culling or not according to 'cull'.
//
//               \param [in] orig
//               \param [in] dir
//               \param [in] vert0
//               \param [in] vert1
//               \param [in] vert2
//               \param [out] hit, with coordinates (t,u,v)
//               \param [in] cull
////////////////////////////////////////////////////////////////////
177
bool PhysxUtilLib::ray_tri_intersect(LPoint3f const &orig, LVector3f const &dir, LPoint3f const &vert0, LPoint3f const &vert1, LPoint3f const &vert2, LVector3f &hit, bool cull);

2936 17 sweep_box_capsule 0 4 3110 31 PhysxUtilLib::sweep_box_capsule 0 1 1475 648
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_capsule
//       Access: Published
//  Description: Box-vs-capsule sweep test. Sweeps a box against a
//               capsule, returns true if box hit the capsule. Also
//               returns contact information.
//
//               \param [in] box Box
//               \param [in] lss Capsule
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] normal Normal at impact point
////////////////////////////////////////////////////////////////////
138
bool PhysxUtilLib::sweep_box_capsule(PhysxBox const &box, PhysxCapsule const &lss, LVector3f const &dir, float length, LVector3f &normal);

2937 16 sweep_box_sphere 0 4 3110 30 PhysxUtilLib::sweep_box_sphere 0 1 1476 646
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_sphere
//       Access: Published
//  Description: Box-vs-sphere sweep test. Sweeps a box against a
//               sphere, returns true if box hit the sphere. Also
//               returns contact information.
//
//               \param [in] box Box
//               \param [in] sphere Sphere
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] normal Normal at impact point
////////////////////////////////////////////////////////////////////
139
bool PhysxUtilLib::sweep_box_sphere(PhysxBox const &box, PhysxSphere const &sphere, LVector3f const &dir, float length, LVector3f &normal);

2938 21 sweep_capsule_capsule 0 4 3110 35 PhysxUtilLib::sweep_capsule_capsule 0 1 1477 706
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_capsule_capsule
//       Access: Published
//  Description: Capsule-vs-capsule sweep test. Sweeps a capsule
//               against a capsule, returns true if capsule hit the
//               other capsule. Also returns contact information.
//
//               \param [in] lss0
//               \param [in] lss1
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
////////////////////////////////////////////////////////////////////
162
bool PhysxUtilLib::sweep_capsule_capsule(PhysxCapsule const &lss0, PhysxCapsule const &lss1, LVector3f const &dir, float length, LPoint3f &ip, LVector3f &normal);

2939 20 sweep_sphere_capsule 0 4 3110 34 PhysxUtilLib::sweep_sphere_capsule 0 1 1478 697
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_sphere_capsule
//       Access: Published
//  Description: Sphere-vs-capsule sweep test. Sweeps a sphere
//               against a capsule, returns true if sphere hit the
//               capsule. Also returns contact information.
//
//               \param [in] sphere
//               \param [in] lss
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
////////////////////////////////////////////////////////////////////
161
bool PhysxUtilLib::sweep_sphere_capsule(PhysxSphere const &sphere, PhysxCapsule const &lss, LVector3f const &dir, float length, LPoint3f &ip, LVector3f &normal);

2940 13 sweep_box_box 0 4 3110 27 PhysxUtilLib::sweep_box_box 0 1 1479 674
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_box
//       Access: Published
//  Description: Box-vs-box sweep test. Sweeps a box against a box,
//               returns true if box hit the other box. Also returns
//               contact information.
//
//               \param [in] box0
//               \param [in] box1
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
////////////////////////////////////////////////////////////////////
146
bool PhysxUtilLib::sweep_box_box(PhysxBox const &box0, PhysxBox const &box1, LVector3f const &dir, float length, LPoint3f &ip, LVector3f &normal);

2941 18 point_obb_sqr_dist 0 4 3110 32 PhysxUtilLib::point_obb_sqr_dist 0 1 1480 594
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::point_obb_sqr_dist
//       Access: Published
//  Description: Point-vs-OBB distance computation. Returns distance
//               between a point and an OBB.
//
//               \param [in] point The point
//               \param [in] center OBB center
//               \param [in] extents OBB extents
//               \param [in] rot OBB rotation
//               \param [out] params Closest point on the box, in box space
////////////////////////////////////////////////////////////////////
152
float PhysxUtilLib::point_obb_sqr_dist(LPoint3f const &point, LPoint3f const &center, LVector3f const &extents, LMatrix3f const &rot, LPoint3f &params);

2942 14 PhysxWheelDesc 0 4 3111 30 PhysxWheelDesc::PhysxWheelDesc 0 1 1481 716
// Filename: physxWheelDesc.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline PhysxWheelDesc::PhysxWheelDesc(void);

2943 14 set_to_default 0 4 3111 30 PhysxWheelDesc::set_to_default 0 1 1482 268
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
////////////////////////////////////////////////////////////////////
49
inline void PhysxWheelDesc::set_to_default(void);

2944 8 is_valid 0 4 3111 24 PhysxWheelDesc::is_valid 0 1 1483 264
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
////////////////////////////////////////////////////////////////////
49
inline bool PhysxWheelDesc::is_valid(void) const;

2945 19 PhysxWheelShapeDesc 0 4 3112 40 PhysxWheelShapeDesc::PhysxWheelShapeDesc 0 1 1484 726
// Filename: physxWheelShapeDesc.I
// Created by:  enn0x (09Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline PhysxWheelShapeDesc::PhysxWheelShapeDesc(void);

2946 10 set_radius 0 4 3112 31 PhysxWheelShapeDesc::set_radius 0 1 1485 265
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
////////////////////////////////////////////////////////////////////
51
void PhysxWheelShapeDesc::set_radius(float radius);

2947 21 set_suspension_travel 0 4 3112 42 PhysxWheelShapeDesc::set_suspension_travel 0 1 1486 330
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_suspension_travel
//       Access: Published
//  Description: Set the maximum extension distance of suspension
//               along shape's -Y axis.
////////////////////////////////////////////////////////////////////
72
void PhysxWheelShapeDesc::set_suspension_travel(float suspensionTravel);

2948 22 set_inverse_wheel_mass 0 4 3112 43 PhysxWheelShapeDesc::set_inverse_wheel_mass 0 1 1487 277
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_inverse_wheel_mass
//       Access: Published
//  Description: Set the inverse mass of the wheel.
////////////////////////////////////////////////////////////////////
73
void PhysxWheelShapeDesc::set_inverse_wheel_mass(float inverseWheelMass);

2949 16 set_motor_torque 0 4 3112 37 PhysxWheelShapeDesc::set_motor_torque 0 1 1488 281
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_motor_torque
//       Access: Published
//  Description: Set the sum engine torque on the wheel axle.
////////////////////////////////////////////////////////////////////
62
void PhysxWheelShapeDesc::set_motor_torque(float motorTorque);

2950 16 set_brake_torque 0 4 3112 37 PhysxWheelShapeDesc::set_brake_torque 0 1 1489 282
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_brake_torque
//       Access: Published
//  Description: Set the amount of torque applied for braking.
////////////////////////////////////////////////////////////////////
62
void PhysxWheelShapeDesc::set_brake_torque(float brakeTorque);

2951 15 set_steer_angle 0 4 3112 36 PhysxWheelShapeDesc::set_steer_angle 0 1 1490 340
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_steer_angle
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
////////////////////////////////////////////////////////////////////
60
void PhysxWheelShapeDesc::set_steer_angle(float steerAngle);

2952 14 set_wheel_flag 0 4 3112 35 PhysxWheelShapeDesc::set_wheel_flag 0 1 1491 281
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_wheel_flag
//       Access: Published
//  Description: Turn the specified wheel shape flag on or off.
////////////////////////////////////////////////////////////////////
91
void PhysxWheelShapeDesc::set_wheel_flag(PhysxEnums::PhysxWheelShapeFlag flag, bool value);

2953 14 set_suspension 0 4 3112 35 PhysxWheelShapeDesc::set_suspension 0 1 1492 307
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_suspension
//       Access: Published
//  Description: Set the data intended for car wheel suspension
//               effects.
////////////////////////////////////////////////////////////////////
72
void PhysxWheelShapeDesc::set_suspension(PhysxSpringDesc const &spring);

2954 10 get_radius 0 4 3112 31 PhysxWheelShapeDesc::get_radius 0 1 1493 247
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
////////////////////////////////////////////////////////////////////
50
float PhysxWheelShapeDesc::get_radius(void) const;

2955 21 get_suspension_travel 0 4 3112 42 PhysxWheelShapeDesc::get_suspension_travel 0 1 1494 242
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_suspension_travel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
float PhysxWheelShapeDesc::get_suspension_travel(void) const;

2956 22 get_inverse_wheel_mass 0 4 3112 43 PhysxWheelShapeDesc::get_inverse_wheel_mass 0 1 1495 243
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_inverse_wheel_mass
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
float PhysxWheelShapeDesc::get_inverse_wheel_mass(void) const;

2957 16 get_motor_torque 0 4 3112 37 PhysxWheelShapeDesc::get_motor_torque 0 1 1496 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_motor_torque
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
float PhysxWheelShapeDesc::get_motor_torque(void) const;

2958 16 get_brake_torque 0 4 3112 37 PhysxWheelShapeDesc::get_brake_torque 0 1 1497 237
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_brake_torque
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
float PhysxWheelShapeDesc::get_brake_torque(void) const;

2959 15 get_steer_angle 0 4 3112 36 PhysxWheelShapeDesc::get_steer_angle 0 1 1498 236
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_steer_angle
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
float PhysxWheelShapeDesc::get_steer_angle(void) const;

2960 14 get_wheel_flag 0 4 3112 35 PhysxWheelShapeDesc::get_wheel_flag 0 1 1499 274
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_wheel_flag
//       Access: Published
//  Description: Returns the specified wheel shape flag.
////////////////////////////////////////////////////////////////////
85
bool PhysxWheelShapeDesc::get_wheel_flag(PhysxEnums::PhysxWheelShapeFlag flag) const;

2961 14 get_suspension 0 4 3112 35 PhysxWheelShapeDesc::get_suspension 0 1 1500 235
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_suspension
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
PhysxSpringDesc PhysxWheelShapeDesc::get_suspension(void) const;

1500
1 14 Dtool_l5yH_HW7 0 4 35 3117 0 14 Dtool_l5yH_HW7 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::set_python_tag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3113  3 key 1 3114  5 value 1 3115  
2 14 Dtool_l5yHR19K 0 6 36 3115 0 14 Dtool_l5yHR19K 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::get_python_tag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3118  3 key 1 3114  
3 14 Dtool_l5yHpySO 0 6 37 3120 0 14 Dtool_l5yHpySO 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::has_python_tag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3118  3 key 1 3114  
4 14 Dtool_l5yHOnhd 0 4 38 3117 0 14 Dtool_l5yHOnhd 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::clear_python_tag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3113  3 key 1 3114  
5 14 Dtool_l5yHShnz 0 6 39 3120 0 14 Dtool_l5yHShnz 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxObject::has_python_tags
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3118  
6 14 Dtool_l5yHOMtF 0 4 40 3117 0 14 Dtool_l5yHOMtF 0 1 4 this 3 3118  
7 14 Dtool_l5yHWbBv 0 4 40 3117 0 14 Dtool_l5yHWbBv 0 3 4 this 3 3118  3 out 1 3121  12 indent_level 1 3123  
8 14 Dtool_l5yHFcWz 0 4 40 3117 0 14 Dtool_l5yHFcWz 0 2 4 this 3 3118  3 out 1 3121  
9 14 Dtool_l5yHpFPb 0 7 41 3125 0 14 Dtool_l5yHpFPb 83 // HAVE_PYTHON
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_l5yHy_Mu 0 7 47 3126 1514 14 Dtool_l5yHy_Mu 708 // Filename: physxActor.I
// Created by:  enn0x (14Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_l5yHGjJb 0 6 49 3120 0 14 Dtool_l5yHGjJb 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::save_body_to_desc
//       Access: Published
//  Description: Saves the body information of a dynamic actor to 
//               the passed body descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  8 bodyDesc 1 3129  
12 14 Dtool_l5yHJHD6 0 4 50 3117 0 14 Dtool_l5yHJHD6 296 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::save_to_desc
//       Access: Published
//  Description: Saves the state of the actor to the passed 
//               descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  9 actorDesc 1 3130  
13 14 Dtool_l5yHjo2v 0 4 51 3117 0 14 Dtool_l5yHjo2v 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  4 name 1 3114  
14 14 Dtool_l5yH1JSj 0 4 52 3117 0 14 Dtool_l5yH1JSj 363 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_pos
//       Access: Published
//  Description: Method for setting a dynamic actor's position in
//               the world. Please see set_global_mat for some
//               caveats.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 pos 1 3131  
15 14 Dtool_l5yHYzMH 0 4 53 3117 0 14 Dtool_l5yHYzMH 1811 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_mat
//       Access: Published
//  Description: Method for setting a dynamic actor's transform
//               matrix in the world. 
//
//               This method instantaneously changes the actor space
//               to world space transformation.
//
//               One should exercise restraint in making use of
//               these methods.
//
//               Static actors should not be moved at all. There are
//               various internal data structures for static actors
//               which may need to be recomputed when one moves.
//               Also, moving static actors will not interact
//               correctly with dynamic actors or joints. If you
//               would like to directly control an actor's position
//               and would like to have it correctly interact with
//               dynamic bodies and joints, you should create a
//               dynamic body with the BF_kinematic flag, and then
//               use the move_global_*() commands to move it along
//               a path!
//
//               When briefly moving dynamic actors, one should not:
//               - Move actors into other actors, thus causing
//                 interpenetration (an invalid physical state).
//               - Move an actor that is connected by a joint to
//                 another away from the other (thus causing joint
//                 error).
//               - When moving jointed actors the joints' cached
//                 transform information is destroyed and recreated
//                 next frame; thus this call is expensive for
//                 jointed actors. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3134  
16 14 Dtool_l5yHvKKU 0 4 54 3117 0 14 Dtool_l5yHvKKU 366 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_global_hpr
//       Access: Published
//  Description: Method for setting a dynamic actor's orientation in
//               the world. Please see set_global_mat for some
//               caveats.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  1 h 1 3137  1 p 1 3137  1 r 1 3137  
17 14 Dtool_l5yHiNxW 0 4 55 3117 0 14 Dtool_l5yHiNxW 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_body_flag
//       Access: Published
//  Description: Raise or lower individual BodyFlag flags. 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  4 flag 1 2965  5 value 1 3120  
18 14 Dtool_l5yH486b 0 4 56 3117 0 14 Dtool_l5yH486b 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_actor_flag
//       Access: Published
//  Description: Raise or lower individual ActorFlag flags. 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  4 flag 1 2964  5 value 1 3120  
19 14 Dtool_l5yHReKM 0 4 57 3117 0 14 Dtool_l5yHReKM 855 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_contact_report_flag
//       Access: Published
//  Description: Sets the actor's contact report flags.
// 
//               These flags are used to determine the kind of
//               report that is generated for interactions with
//               other actors.
//
//               Please note: If the actor is part of an interacting
//               pair for which the contact report generation is
//               controlled already through any other mechanism
//               (for example by use of
//               PhysxScene::set_actor_pair_flags)
//               then the union of all the specified contact report
//               flags will be used to generate the report.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  4 flag 1 2968  5 value 1 3120  
20 14 Dtool_l5yHGAeV 0 4 58 3117 0 14 Dtool_l5yHGAeV 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_contact_report_threshold
//       Access: Published
//  Description: Sets the force threshold for contact reports.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  9 threshold 1 3137  
21 14 Dtool_l5yHucJR 0 4 59 3117 0 14 Dtool_l5yHucJR 733 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_group
//       Access: Published
//  Description: Assigns the actor to a user defined group of
//               actors. The actor group must be an integer in
//               between 0 and 0x7fff (32767).
//
//               This is similar to NxShape groups, except those are
//               only five bits and serve a different purpose.
//
//               The PhysxScene::set_actor_group_pair_flags() lets
//               you set certain behaviors for pairs of actor
//               groups.
//
//               By default every actor is created in group 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  5 group 1 3138  
22 14 Dtool_l5yHRpdC 0 4 60 3117 0 14 Dtool_l5yHRpdC 826 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_dominance_group
//       Access: Published
//  Description: Assigns dynamic actors a dominance group
//               identifier. Dominance groups are integere in the
//               range from 0 to 31.
//
//               This is similar to shape groups, except those serve
//               a different purpose.
//
//               The PhysxScene::set_dominance_group_pair() lets you
//               set certain behaviors for pairs of dominance
//               groups.
//
//               By default every actor is created in group 0.
//               Static actors must stay in group 0; thus you can
//               only call this on dynamic actors.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  5 group 1 3138  
23 14 Dtool_l5yHhXPQ 0 4 61 3117 0 14 Dtool_l5yHhXPQ 325 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_shape_group
//       Access: Published
//  Description: Sets the collision group for all shapes of this
//               actor. See PhysxShape.setGroup().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  5 group 1 3138  
24 14 Dtool_l5yHCuqr 0 6 62 3114 0 14 Dtool_l5yHCuqr 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_name
//       Access: Published
//  Description: Retrieves the name string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
25 14 Dtool_l5yHTot8 0 7 63 3139 0 14 Dtool_l5yHTot8 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_pos
//       Access: Published
//  Description: Retrieves the actors world space position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
26 14 Dtool_l5yH93DT 0 7 64 3140 0 14 Dtool_l5yH93DT 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_mat
//       Access: Published
//  Description: Retrieves the actors world space transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
27 14 Dtool_l5yHsn_U 0 7 65 3142 0 14 Dtool_l5yHsn_U 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_quat
//       Access: Published
//  Description: Retrieves the actors world space orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
28 14 Dtool_l5yHJxPI 0 6 66 3120 0 14 Dtool_l5yHJxPI 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_body_flag
//       Access: Published
//  Description: Return the specified BodyFlag flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  4 flag 1 2965  
29 14 Dtool_l5yHeiJZ 0 6 67 3120 0 14 Dtool_l5yHeiJZ 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_actor_flag
//       Access: Published
//  Description: Return the specified ActorFlag flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  4 flag 1 2964  
30 14 Dtool_l5yHPUfz 0 6 68 3138 0 14 Dtool_l5yHPUfz 290 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_group
//       Access: Published
//  Description: Retrieves the actor group this actor is assigned
//               to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
31 14 Dtool_l5yHNgoH 0 6 69 3138 0 14 Dtool_l5yHNgoH 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_dominance_group
//       Access: Published
//  Description: Retrieves the dominance group of this actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
32 14 Dtool_l5yHUPuY 0 6 70 3120 0 14 Dtool_l5yHUPuY 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::is_dynamic
//       Access: Published
//  Description: Returns true if the actor is dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
33 14 Dtool_l5yHawT_ 0 6 71 3137 0 14 Dtool_l5yHawT_ 374 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::compute_kinetic_energy
//       Access: Published
//  Description: Computes the total kinetic (rotational and
//               translational) energy of the object.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
34 14 Dtool_l5yH0WHW 0 6 72 3120 0 14 Dtool_l5yH0WHW 1708 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::update_mass_from_shapes
//       Access: Published
//  Description: Recomputes a dynamic actor's mass properties from
//               its shapes. 
//
//               Given a constant density or total mass, the actors
//               mass properties can be recomputed using the shapes
//               attached to the actor. If the actor has no shapes,
//               then only the totalMass parameter can be used. If
//               all shapes in the actor are trigger shapes
//               (non-physical), the call will fail.
//
//               The mass of each shape is either the shape's local
//               density (as specified in the PhysxShapeDesc;
//               default 1.0) multiplied by the shape's volume or a
//               directly specified shape mass.
//
//               The inertia tensor, mass frame and center of mass
//               will always be recomputed. If there are no shapes
//               in the actor, the mass will be totalMass, and the
//               mass frame will be set to the center of the actor.
//
//               If you supply a non-zero total mass, the actor's
//               mass and inertia will first be computed as above
//               and then scaled to fit this total mass.
//
//               If you supply a non-zero density, the actor's mass
//               and inertia will first be computed as above and
//               then scaled by this factor.
//
//               Either totalMass or density must be non-zero.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  7 density 1 3137  9 totalMass 1 3137  
35 14 Dtool_l5yH9dYd 0 7 73 3143 2011 14 Dtool_l5yH9dYd 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_scene
//       Access: Published
//  Description: Retrieves the scene which this actor belongs to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
36 14 Dtool_l5yHGMEZ 0 4 74 3117 0 14 Dtool_l5yHGMEZ 579 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::attach_node_path
//       Access: Published
//  Description: Attaches a node path to this actor. The node
//               path's transform will be updated automatically if
//               the actor's transform changes (and only then).
//
//               Note: any non-uniform scale or shear set on the
//               NodePath's transform will be overwritten at the
//               time of the first update.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  2 np 1 3144  
37 14 Dtool_l5yH3iMG 0 4 75 3117 0 14 Dtool_l5yH3iMG 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::detach_node_path
//       Access: Published
//  Description: Detaches a previously assigned NodePath from this
//               actor. The NodePath's transform will no longer
//               be updated from the actor's transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3126  
38 14 Dtool_l5yHbPsb 0 7 76 3147 0 14 Dtool_l5yHbPsb 383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_node_path
//       Access: Published
//  Description: Retrieves a previously attached NodePath. An empty
//               NodePath will be returned if no NodePath has been
//               attached to this actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
39 14 Dtool_l5yHf979 0 6 77 3138 0 14 Dtool_l5yHf979 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_num_shapes
//       Access: Published
//  Description: Returns the number of shapes assigned to the
//               actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
40 14 Dtool_l5yHLIPH 0 7 78 3149 1687 14 Dtool_l5yHLIPH 598 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::create_shape
//       Access: Published
//  Description: Creates a new shape and adds it to the list of
//               shapes of this actor. 
//
//               Mass properties of dynamic actors will not
//               automatically be recomputed to reflect the new mass
//               distribution implied by the shape. Follow this call
//               with a call to update_mass_from_shapes() to do
//               that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  4 desc 1 3148  
41 14 Dtool_l5yHmAoy 0 7 79 3149 1687 14 Dtool_l5yHmAoy 386 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_shape
//       Access: Published
//  Description: Retrieves an individual shape from the actor's
//               array of shapes. Index must be in the range from
//               zero to (number-of-shapes minus 1).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  3 idx 1 3138  
42 14 Dtool_l5yH0ORZ 0 7 80 3149 1687 14 Dtool_l5yH0ORZ 467 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_shape_by_name
//       Access: Published
//  Description: Retrieves an individual shape from the actor's
//               array of shapes. The first shape for which the
//               shape's name matches the specified name is
//               returned, or NULL if no shape has a matching name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  4 name 1 3114  
43 14 Dtool_l5yHODH5 0 4 81 3117 0 14 Dtool_l5yHODH5 642 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame to the actor.
//
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  4 mode 1 2977  6 wakeup 1 3120  
44 14 Dtool_l5yHeZpY 0 4 81 3117 0 14 Dtool_l5yHeZpY 642 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame to the actor.
//
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  4 mode 1 2977  
45 14 Dtool_l5yHgD37 0 4 81 3117 0 14 Dtool_l5yHgD37 642 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame to the actor.
//
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  5 force 1 3150  
46 14 Dtool_l5yHUSqT 0 4 82 3117 0 14 Dtool_l5yHUSqT 1036 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  6 wakeup 1 3120  
47 14 Dtool_l5yHts9w 0 4 82 3117 0 14 Dtool_l5yHts9w 1036 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  
48 14 Dtool_l5yHb8Em 0 4 82 3117 0 14 Dtool_l5yHb8Em 1036 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  3 pos 1 3131  
49 14 Dtool_l5yHNo5x 0 4 83 3117 0 14 Dtool_l5yHNo5x 1041 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  6 wakeup 1 3120  
50 14 Dtool_l5yHo35C 0 4 83 3117 0 14 Dtool_l5yHo35C 1041 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  
51 14 Dtool_l5yHzyEE 0 4 83 3117 0 14 Dtool_l5yHzyEE 1041 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the global
//               coordinate frame, acting at a particular point in
//               local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  3 pos 1 3131  
52 14 Dtool_l5yHyuI3 0 4 84 3117 0 14 Dtool_l5yHyuI3 592 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the global
//               coordinate frame to the actor. 
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  6 torque 1 3150  4 mode 1 2977  6 wakeup 1 3120  
53 14 Dtool_l5yHRDxm 0 4 84 3117 0 14 Dtool_l5yHRDxm 592 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the global
//               coordinate frame to the actor. 
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  6 torque 1 3150  4 mode 1 2977  
54 14 Dtool_l5yHIkiL 0 4 84 3117 0 14 Dtool_l5yHIkiL 592 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the global
//               coordinate frame to the actor. 
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  6 torque 1 3150  
55 14 Dtool_l5yHNtnK 0 4 85 3117 0 14 Dtool_l5yHNtnK 651 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame to the actor. 
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  4 mode 1 2977  6 wakeup 1 3120  
56 14 Dtool_l5yHL63p 0 4 85 3117 0 14 Dtool_l5yHL63p 651 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame to the actor. 
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  4 mode 1 2977  
57 14 Dtool_l5yHSdWz 0 4 85 3117 0 14 Dtool_l5yHSdWz 651 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame to the actor. 
//               This will not induce a torque.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  5 force 1 3150  
58 14 Dtool_l5yH184w 0 4 86 3117 0 14 Dtool_l5yH184w 1047 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  6 wakeup 1 3120  
59 14 Dtool_l5yHYK4B 0 4 86 3117 0 14 Dtool_l5yHYK4B 1047 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  
60 14 Dtool_l5yHoWED 0 4 86 3117 0 14 Dtool_l5yHoWED 1047 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in global coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add
//               the corresponding torque. Because forces are reset
//               at the end of every timestep, you can maintain a
//               total external force on an object by calling this
//               once every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  3 pos 1 3131  
61 14 Dtool_l5yHtcKA 0 4 87 3117 0 14 Dtool_l5yHtcKA 1052 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  6 wakeup 1 3120  
62 14 Dtool_l5yHA1K_ 0 4 87 3117 0 14 Dtool_l5yHA1K_ 1052 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  5 force 1 3150  3 pos 1 3131  4 mode 1 2977  
63 14 Dtool_l5yH4niF 0 4 87 3117 0 14 Dtool_l5yH4niF 1052 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_force_at_local_pos
//       Access: Published
//  Description: Applies a force (or impulse) defined in the actor
//               local coordinate frame, acting at a particular
//               point in local coordinates, to the actor. 
//
//               Note that if the force does not act along the
//               center of mass of the actor, this will also add the
//               corresponding torque. Because forces are reset at
//               the end of every timestep, you can maintain a total
//               external force on an object by calling this once
//               every frame.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  5 force 1 3150  3 pos 1 3131  
64 14 Dtool_l5yHC3rL 0 4 88 3117 0 14 Dtool_l5yHC3rL 602 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the actor
//               local coordinate frame to the actor.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  6 torque 1 3150  4 mode 1 2977  6 wakeup 1 3120  
65 14 Dtool_l5yHGkAz 0 4 88 3117 0 14 Dtool_l5yHGkAz 602 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the actor
//               local coordinate frame to the actor.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3126  6 torque 1 3150  4 mode 1 2977  
66 14 Dtool_l5yHFeWg 0 4 88 3117 0 14 Dtool_l5yHFeWg 602 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::add_local_torque
//       Access: Published
//  Description: Applies an impulsive torque defined in the actor
//               local coordinate frame to the actor.
//
//               Mode determines if the torque is to be conventional
//               or impulsive.
//
//               The actor must be dynamic.
//               This call wakes the actor if it is sleeping and the
//               wakeup parameter is true (default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  6 torque 1 3150  
67 14 Dtool_l5yHr28v 0 4 89 3117 0 14 Dtool_l5yHr28v 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_mass
//       Access: Published
//  Description: Sets the mass of a dynamic actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  4 mass 1 3137  
68 14 Dtool_l5yHFyWV 0 4 90 3117 0 14 Dtool_l5yHFyWV 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_mat
//       Access: Published
//  Description: Sets the matrix of the center of mass relative
//               to the actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3134  
69 14 Dtool_l5yHV2Dt 0 4 91 3117 0 14 Dtool_l5yHV2Dt 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_pos
//       Access: Published
//  Description: Sets the position of the center of mass relative
//               to the actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 pos 1 3131  
70 14 Dtool_l5yHAsZW 0 4 92 3117 0 14 Dtool_l5yHAsZW 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_local_orientation
//       Access: Published
//  Description: Sets the orientation of the center of mass relative
//               to the actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3153  
71 14 Dtool_l5yHVRo0 0 4 93 3117 0 14 Dtool_l5yHVRo0 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_mat
//       Access: Published
//  Description: Sets the matrix of the center of mass relative
//               to world space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3134  
72 14 Dtool_l5yH0dqr 0 4 94 3117 0 14 Dtool_l5yH0dqr 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_pos
//       Access: Published
//  Description: Sets the position of the center of mass relative
//               to world space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 pos 1 3131  
73 14 Dtool_l5yHklkW 0 4 95 3117 0 14 Dtool_l5yHklkW 332 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_offset_global_orientation
//       Access: Published
//  Description: Sets the orientation of the center of mass relative
//               to world space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3153  
74 14 Dtool_l5yHBiaA 0 4 96 3117 0 14 Dtool_l5yHBiaA 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_mat
//       Access: Published
//  Description: Moves the actor by setting the transform of the
//               center of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3134  
75 14 Dtool_l5yHngyT 0 4 97 3117 0 14 Dtool_l5yHngyT 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_pos
//       Access: Published
//  Description: Moves the actor by setting the position of the
//               center of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 pos 1 3131  
76 14 Dtool_l5yHLNbg 0 4 98 3117 0 14 Dtool_l5yHLNbg 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_c_mass_global_orientation
//       Access: Published
//  Description: Moves the actor by setting the orientation of the
//               center of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3153  
77 14 Dtool_l5yHqETf 0 4 99 3117 0 14 Dtool_l5yHqETf 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_mass_space_inertia_tensor
//       Access: Published
//  Description: Sets the inertia tensor, using a parameter
//               specified in mass space coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  1 m 1 3150  
78 14 Dtool_l5yHi56Q 0 6 100 3137 0 14 Dtool_l5yHi56Q 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_mass
//       Access: Published
//  Description: Returns the mass of the actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
79 14 Dtool_l5yHpDg5 0 7 101 3140 0 14 Dtool_l5yHpDg5 302 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_mat
//       Access: Published
//  Description: Returns the center of mass transform in world
//               space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
80 14 Dtool_l5yHWnM_ 0 7 102 3139 0 14 Dtool_l5yHWnM_ 301 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_pos
//       Access: Published
//  Description: Returns the center of mass position in world
//               space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
81 14 Dtool_l5yHrE2g 0 7 103 3156 0 14 Dtool_l5yHrE2g 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_global_orientation
//       Access: Published
//  Description: Returns the center of mass orientation in world
//               space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
82 14 Dtool_l5yHSOzf 0 7 104 3140 0 14 Dtool_l5yHSOzf 308 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_mat
//       Access: Published
//  Description: Returns the center of mass transform relative
//               to the actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
83 14 Dtool_l5yH4k8J 0 7 105 3139 0 14 Dtool_l5yH4k8J 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_pos
//       Access: Published
//  Description: Returns the center of mass position relative to
//               the actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
84 14 Dtool_l5yHod_u 0 7 106 3156 0 14 Dtool_l5yHod_u 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_c_mass_local_orientation
//       Access: Published
//  Description: Returns the center of mass orientation relative to
//               the actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
85 14 Dtool_l5yHHAnf 0 7 107 3157 0 14 Dtool_l5yHHAnf 345 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_mass_space_inertia_tensor
//       Access: Published
//  Description: Returns the diagonal inertia tensor of the actor
//               relative to the mass coordinate frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
86 14 Dtool_l5yHM0a6 0 7 108 3156 0 14 Dtool_l5yHM0a6 333 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_inertia_tensor
//       Access: Published
//  Description: Returns the inertia tensor of the actor relative
//               to the world coordinate frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
87 14 Dtool_l5yH8CAA 0 7 109 3156 0 14 Dtool_l5yH8CAA 356 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_global_inertia_tensor_inverse
//       Access: Published
//  Description: Returns the inverse of the inertia tensor of the
//               actor relative to the world coordinate frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
88 14 Dtool_l5yHWbUh 0 4 110 3117 0 14 Dtool_l5yHWbUh 428 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_damping
//       Access: Published
//  Description: Sets the linear damping coefficient. Zero
//               represents no damping. The damping coefficient must
//               be nonnegative. The actor must be dynamic.
//               Default: 0
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  7 linDamp 1 3137  
89 14 Dtool_l5yHMcdB 0 4 111 3117 0 14 Dtool_l5yHMcdB 458 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_damping
//       Access: Published
//  Description: Sets the angular damping coefficient. Zero
//               represents no damping. The angular damping
//               coefficient must be nonnegative. The actor must be
//               dynamic.
//               Default: 0.05
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  7 angDamp 1 3137  
90 14 Dtool_l5yHewKh 0 6 112 3137 0 14 Dtool_l5yHewKh 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_damping
//       Access: Published
//  Description: Retrieves the linear damping coefficient. 
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
91 14 Dtool_l5yHpzY9 0 6 113 3137 0 14 Dtool_l5yHpzY9 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_damping
//       Access: Published
//  Description: Returns the angular damping coefficient. 
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
92 14 Dtool_l5yHQdpy 0 4 114 3117 0 14 Dtool_l5yHQdpy 624 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity of the actor. 
//
//               Note that if you continuously set the velocity of
//               an actor yourself, forces such as gravity or
//               friction will not be able to manifest themselves,
//               because forces directly influence only the
//               velocity/momentum of an actor.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  6 linVel 1 3150  
93 14 Dtool_l5yHtaFt 0 4 115 3117 0 14 Dtool_l5yHtaFt 608 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_velocity
//       Access: Published
//  Description: Sets the angular velocity of the actor. 
//
//               Note that if you continuously set the angular
//               velocity of an actor yourself, forces such as
//               friction will not be able to rotate the actor,
//               because forces directly influence only the
//               velocity/momentum.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  6 angVel 1 3150  
94 14 Dtool_l5yHMHnW 0 4 116 3117 0 14 Dtool_l5yHMHnW 1340 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_max_angular_velocity
//       Access: Published
//  Description: Lets you set the maximum angular velocity permitted
//               for this actor. 
//
//               Because for various internal computations, very
//               quickly rotating actors introduce error into the
//               simulation, which leads to undesired results.
//
//               With PhysxManager::set_parameter(PP_max_angular_velocity)
//               you can set the default maximum velocity for actors
//               created after the call. Bodies' high angular
//               velocities are clamped to this value.
//
//               However, because some actors, such as car wheels,
//               should be able to rotate quickly, you can override
//               the default setting on a per-actor basis with the
//               below call. Note that objects such as wheels which
//               are approximated with spherical or other smooth
//               collision primitives can be simulated with
//               stability at a much higher angular velocity than,
//               say, a box that has corners.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  9 maxAngVel 1 3137  
95 14 Dtool_l5yHhMyT 0 7 117 3157 0 14 Dtool_l5yHhMyT 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity of an actor.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
96 14 Dtool_l5yHrxAR 0 7 118 3157 0 14 Dtool_l5yHrxAR 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_velocity
//       Access: Published
//  Description: Returns the angular velocity of the actor.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
97 14 Dtool_l5yHtAw3 0 6 119 3137 0 14 Dtool_l5yHtAw3 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_max_angular_velocity
//       Access: Published
//  Description: Returns the maximum angular velocity permitted
//               for this actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
98 14 Dtool_l5yHtNKv 0 7 120 3157 0 14 Dtool_l5yHtNKv 423 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_point_velocity
//       Access: Published
//  Description: Computes the velocity of a point given in world
//               coordinates if it were attached to the actor and
//               moving with it.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  5 point 1 3131  
99 14 Dtool_l5yH_tPQ 0 7 121 3157 0 14 Dtool_l5yH_tPQ 438 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_local_point_velocity
//       Access: Published
//  Description: Computes the velocity of a point given in body
//               local coordinates as if it were attached to the
//               actor and moving with it. 
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  5 point 1 3131  
100 14 Dtool_l5yH0wMx 0 4 122 3117 0 14 Dtool_l5yH0wMx 624 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_linear_momentum
//       Access: Published
//  Description: Sets the linear momentum of the actor. 
//               Note that if you continuously set the linear
//               momentum of an actor yourself, forces such as
//               gravity or friction will not be able to manifest
//               themselves, because forces directly influence only
//               the velocity/momentum of a actor.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  8 momentum 1 3150  
101 14 Dtool_l5yHVSw_ 0 4 123 3117 0 14 Dtool_l5yHVSw_ 602 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_angular_momentum
//       Access: Published
//  Description: Sets the angular momentum of the actor. 
//               Note that if you continuously set the angular
//               velocity of an actor yourself, forces such as
//               friction will not be able to rotate the actor,
//               because forces directly influence only the velocity
//               of actor.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  8 momentum 1 3150  
102 14 Dtool_l5yH_qWS 0 7 124 3157 0 14 Dtool_l5yH_qWS 406 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_linear_momentum
//       Access: Published
//  Description: Retrieves the linear momentum of an actor. 
//               The momentum is equal to the velocity times the
//               mass.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
103 14 Dtool_l5yHTlui 0 7 125 3157 0 14 Dtool_l5yHTlui 447 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_angular_momentum
//       Access: Published
//  Description: Retrieves the angular momentum of an actor. 
//               The angular momentum is equal to the angular
//               velocity times the global space inertia tensor.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
104 14 Dtool_l5yHu8nu 0 4 126 3117 0 14 Dtool_l5yHu8nu 614 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an actor may
//               go to sleep. Actors whose linear velocity is above
//               this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  9 threshold 1 3137  
105 14 Dtool_l5yHTcv3 0 4 127 3117 0 14 Dtool_l5yHTcv3 618 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_angular_velocity
//       Access: Published
//  Description: Sets the angular velocity below which an actor may
//               go to sleep.  Actors whose angular velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  9 threshold 1 3137  
106 14 Dtool_l5yH_nyq 0 4 128 3117 0 14 Dtool_l5yH_nyq 755 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::set_sleep_energy_threshold
//       Access: Published
//  Description: Sets the energy threshold below which an actor may
//               go to sleep. Actors whose kinematic energy is above
//               this threshold will not be put to sleep.
//
//               Setting the sleep energy threshold only makes sense
//               when the BF_energy_sleep_test is set. There are
//               also other types of sleeping that uses the linear
//               and angular velocities directly instead of the
//               energy.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  9 threshold 1 3137  
107 14 Dtool_l5yH3W_T 0 6 129 3137 0 14 Dtool_l5yH3W_T 459 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an actor
//               may go to sleep. Actors whose linear velocity is
//               above this threshold will not be put to sleep.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
108 14 Dtool_l5yH6Klk 0 6 130 3137 0 14 Dtool_l5yH6Klk 462 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_angular_velocity
//       Access: Published
//  Description: Returns the angular velocity below which an actor
//               may go to sleep. Actors whose angular velocity is
//               above this threshold will not be put to sleep.
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
109 14 Dtool_l5yHBQoX 0 6 131 3137 0 14 Dtool_l5yHBQoX 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::get_sleep_energy_threshold
//       Access: Published
//  Description: Returns the energy below which an actor may go to
//               sleep. Actors whose energy is above this threshold
//               will not be put to sleep. The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
110 14 Dtool_l5yHob85 0 6 132 3120 0 14 Dtool_l5yHob85 769 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::is_sleeping
//       Access: Published
//  Description: Returns true if this body is sleeping. 
//
//               When an actor does not move for a period of time,
//               it is no longer simulated in order to save time.
//               This state is called sleeping. However, because the
//               object automatically wakes up when it is either
//               touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
111 14 Dtool_l5yH_xXK 0 4 133 3117 0 14 Dtool_l5yH_xXK 553 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::wake_up
//       Access: Published
//  Description: Wakes up the actor if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxActor::put_to_sleep().
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  16 wakeCounterValue 1 3137  
112 14 Dtool_l5yHSQa3 0 4 133 3117 0 14 Dtool_l5yHSQa3 553 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::wake_up
//       Access: Published
//  Description: Wakes up the actor if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxActor::put_to_sleep().
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3126  
113 14 Dtool_l5yHXiTd 0 4 134 3117 0 14 Dtool_l5yHXiTd 603 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::put_to_sleep
//       Access: Published
//  Description: Forces the actor to sleep. 
//
//               The actor will stay asleep until the next call to
//               simulate, and will not wake up until then even when
//               otherwise it would (for example a force is applied
//               to it). It can however wake up during the next
//               do_physics call.
//
//               The actor must be dynamic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3126  
114 14 Dtool_l5yHOgsY 0 4 135 3117 0 14 Dtool_l5yHOgsY 475 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_pos
//       Access: Published
//  Description: The move_global_* calls serve to move kinematically
//               controlled dynamic actors through the game world. 
//
//               See move_global_mat() for more information.
//
//               This call wakes the actor if it is sleeping.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 pos 1 3131  
115 14 Dtool_l5yHcUbW 0 4 136 3117 0 14 Dtool_l5yHcUbW 1349 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_mat
//       Access: Published
//  Description: The move_global_* calls serve to move
//               kinematically controlled dynamic actors through
//               the game world. 
//
//               You set a dynamic actor to be kinematic using the
//               BF_KINEMATIC body flag, used either in the
//               PhysBodyDesc or with set_body_flag().
//
//               The move command will result in a velocity that,
//               when successfully carried out (i.e. the motion is
//               not blocked due to joints or collisions) inside
//               run*(), will move the body into the desired pose.
//               After the move is carried out during a single time
//               step, the velocity is returned to zero. Thus, you
//               must continuously call this in every time step for
//               kinematic actors so that they move along a path.
//
//               These functions simply store the move destination
//               until run*() is called, so consecutive calls will
//               simply overwrite the stored target variable.
//
//               This call wakes the actor if it is sleeping.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3126  3 mat 1 3134  
116 14 Dtool_l5yHm_v1 0 4 137 3117 0 14 Dtool_l5yHm_v1 475 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::move_global_hpr
//       Access: Published
//  Description: The move_global_* calls serve to move kinematically
//               controlled dynamic actors through the game world. 
//
//               See move_global_mat() for more information.
//
//               This call wakes the actor if it is sleeping.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3126  1 h 1 3137  1 p 1 3137  1 r 1 3137  
117 14 Dtool_l5yH3KGP 0 4 138 3117 0 14 Dtool_l5yH3KGP 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3127  
118 14 Dtool_l5yHLcV8 0 4 138 3117 0 14 Dtool_l5yHLcV8 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3127  3 out 1 3121  12 indent_level 1 3123  
119 14 Dtool_l5yHpCfI 0 4 138 3117 0 14 Dtool_l5yHpCfI 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3127  3 out 1 3121  
120 14 Dtool_l5yHB2Mz 0 4 139 3117 0 14 Dtool_l5yHB2Mz 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActor::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3126  
121 14 Dtool_l5yHk6vn 0 7 140 3125 0 14 Dtool_l5yHk6vn 68 //////////////////////////////////////////////////////////////////// 0 
122 14 Dtool_l5yHuAGL 0 6 43 3113 0 14 Dtool_l5yHuAGL 0 1 4 this 3 3126  
123 14 Dtool_l5yHLnxp 0 7 44 3126 1514 14 Dtool_l5yHLnxp 0 1 4 this 3 3113  
124 14 Dtool_l5yHhOSd 0 6 45 3158 0 14 Dtool_l5yHhOSd 0 1 4 this 3 3126  
125 14 Dtool_l5yHGBSb 0 7 46 3126 1514 14 Dtool_l5yHGBSb 0 1 4 this 3 3158  
126 14 Dtool_l5yHda0o 0 4 146 3117 0 14 Dtool_l5yHda0o 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3159  
127 14 Dtool_l5yHQVWn 0 7 147 3126 1514 14 Dtool_l5yHQVWn 304 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_actor
//       Access: Published
//  Description: Retrieves the actor which this controller is
//               associated with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3160  
128 14 Dtool_l5yHHF7Y 0 4 148 3117 0 14 Dtool_l5yHHF7Y 383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_pos
//       Access: Published
//  Description: Sets the position of the controller is global
//               space. This can be used for initial placement or
//               for teleporting the character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  3 pos 1 3131  
129 14 Dtool_l5yHKBiq 0 4 149 3117 0 14 Dtool_l5yHKBiq 573 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_sharpness
//       Access: Published
//  Description: Sharpness is used to smooth motion with a feedback
//               filter, having a value between 0 (so smooth it
//               doesn't move) and 1 (no smoothing = unfiltered
//               motion). Sharpness can ease the motion curve when
//               the auto-step feature is used with boxes.
//               Default value is 1.0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  9 sharpness 1 3137  
130 14 Dtool_l5yHJXP0 0 4 150 3117 0 14 Dtool_l5yHJXP0 303 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_collision
//       Access: Published
//  Description: Enable/Disable collisions for this controller and
//               actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  6 enable 1 3120  
131 14 Dtool_l5yH_gUL 0 4 151 3117 0 14 Dtool_l5yH_gUL 585 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_min_distance
//       Access: Published
//  Description: Sets the the minimum travelled distance to consider
//               when moving the controller. If travelled distance
//               is smaller, the character doesn't move. This is
//               used to stop the recursive motion algorithm when
//               remaining distance to travel is small. 
//               The default value is 0.0001.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  8 min_dist 1 3137  
132 14 Dtool_l5yHj25k 0 4 152 3117 0 14 Dtool_l5yHj25k 279 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_step_offset
//       Access: Published
//  Description: Sets the step height/offset for the controller.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  6 offset 1 3137  
133 14 Dtool_l5yH6u3j 0 7 153 3139 0 14 Dtool_l5yH6u3j 296 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_pos
//       Access: Published
//  Description: Retruns the position of the controller is global
//               space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3160  
134 14 Dtool_l5yHA6EB 0 6 154 3137 0 14 Dtool_l5yHA6EB 373 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_sharpness
//       Access: Published
//  Description: Returns the sharpness used to ease the motion curve
//               when the auto-step feature is used.
//               Default value is 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3160  
135 14 Dtool_l5yH2TS4 0 4 155 3117 0 14 Dtool_l5yH2TS4 306 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_global_speed
//       Access: Published
//  Description: Sets the linear speed of the controller in global
//               space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  5 speed 1 3150  
136 14 Dtool_l5yHc9p1 0 4 156 3117 0 14 Dtool_l5yHc9p1 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_local_speed
//       Access: Published
//  Description: Sets the linear speed of the controller in local
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  5 speed 1 3150  
137 14 Dtool_l5yHKd5H 0 4 157 3117 0 14 Dtool_l5yHKd5H 428 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_omega
//       Access: Published
//  Description: Sets the angular velocity (degrees per second)
//               of the controller. The angular velocity is used to
//               compute the new heading when updating the
//               controller.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  5 omega 1 3137  
138 14 Dtool_l5yH5FhA 0 4 158 3117 0 14 Dtool_l5yH5FhA 445 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::set_h
//       Access: Published
//  Description: Sets the heading of the controller is global
//               space. Note: only heading is supported. Pitch and
//               roll are constrained by PhysX in order to alyways
//               keep the character upright.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  7 heading 1 3137  
139 14 Dtool_l5yH8XvX 0 6 159 3137 0 14 Dtool_l5yH8XvX 293 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::get_h
//       Access: Published
//  Description: Returns the heading of the controller in global
//               space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3160  
140 14 Dtool_l5yHZeaN 0 4 160 3117 0 14 Dtool_l5yHZeaN 520 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::report_scene_changed
//       Access: Published
//  Description: The character controller uses caching in order to
//               speed up collision testing, this caching can not
//               detect when static objects have changed in the
//               scene. You need to call this method when such
//               changes have been made.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3159  
141 14 Dtool_l5yHF_yE 0 4 161 3117 0 14 Dtool_l5yHF_yE 327 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::start_jump
//       Access: Published
//  Description: Enters the jump mode. The parameter is the intial
//               upward velocity of the character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3159  2 v0 1 3137  
142 14 Dtool_l5yH4Jlv 0 4 162 3117 0 14 Dtool_l5yH4Jlv 393 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::stop_jump
//       Access: Published
//  Description: Leaves the jump mode. This method is automatically
//               called if a ground collision is detected. Usually
//               users need not call this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3159  
143 14 Dtool_l5yHLFlg 0 4 163 3117 0 14 Dtool_l5yHLFlg 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3160  
144 14 Dtool_l5yHjCH7 0 4 163 3117 0 14 Dtool_l5yHjCH7 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3160  3 out 1 3121  12 indent_level 1 3123  
145 14 Dtool_l5yHSiYT 0 4 163 3117 0 14 Dtool_l5yHSiYT 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxController::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3160  3 out 1 3121  
146 14 Dtool_l5yH2Z6R 0 7 164 3125 0 14 Dtool_l5yH2Z6R 68 //////////////////////////////////////////////////////////////////// 0 
147 14 Dtool_l5yHAvmY 0 6 142 3113 0 14 Dtool_l5yHAvmY 0 1 4 this 3 3159  
148 14 Dtool_l5yHVSIx 0 7 143 3159 1630 14 Dtool_l5yHVSIx 0 1 4 this 3 3113  
149 14 Dtool_l5yHev_8 0 6 144 3158 0 14 Dtool_l5yHev_8 0 1 4 this 3 3159  
150 14 Dtool_l5yH33eV 0 7 145 3159 1630 14 Dtool_l5yH33eV 0 1 4 this 3 3158  
151 14 Dtool_l5yHIdlF 0 7 167 3162 1630 14 Dtool_l5yHIdlF 724 // Filename: physxBoxController.I
// Created by:  enn0x (24Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
152 14 Dtool_l5yHKaaV 0 4 168 3117 0 14 Dtool_l5yHKaaV 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::set_extents
//       Access: Published
//  Description: Sets controller's extents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3162  7 extents 1 3150  
153 14 Dtool_l5yHgwKc 0 7 169 3157 0 14 Dtool_l5yHgwKc 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxController::get_extents
//       Access: Published
//  Description: Returns controller's extents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
154 14 Dtool_l5yHqX4X 0 7 170 3125 0 14 Dtool_l5yHqX4X 68 //////////////////////////////////////////////////////////////////// 0 
155 14 Dtool_l5yH_xNq 0 4 176 3117 0 14 Dtool_l5yH_xNq 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3165  
156 14 Dtool_l5yHiN5x 0 7 177 3168 0 14 Dtool_l5yHiN5x 352 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_force_field
//       Access: Published
//  Description: Returns the owning force field if this is a shape
//               of an include group, else NULL will be returned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
157 14 Dtool_l5yHTb4X 0 7 178 3169 1886 14 Dtool_l5yHTb4X 280 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_shape_group
//       Access: Published
//  Description: Returns the owning force field shape group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
158 14 Dtool_l5yH_12c 0 4 179 3117 0 14 Dtool_l5yH_12c 331 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3165  4 name 1 3114  
159 14 Dtool_l5yH0FhU 0 4 180 3117 0 14 Dtool_l5yH0FhU 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_mat
//       Access: Published
//  Description: Sets the force field shape's transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3165  3 mat 1 3134  
160 14 Dtool_l5yHZBdK 0 4 181 3117 0 14 Dtool_l5yHZBdK 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::set_pos
//       Access: Published
//  Description: Sets the force field shape's translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3165  3 pos 1 3131  
161 14 Dtool_l5yH19HM 0 6 182 3114 0 14 Dtool_l5yH19HM 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_name
//       Access: Published
//  Description: Returns the name string. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
162 14 Dtool_l5yHl7hV 0 7 183 3140 0 14 Dtool_l5yHl7hV 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_mat
//       Access: Published
//  Description: Returns the force field shape's transform. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
163 14 Dtool_l5yHaGXg 0 7 184 3139 0 14 Dtool_l5yHaGXg 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::get_pos
//       Access: Published
//  Description: Returns the force field shape's translation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
164 14 Dtool_l5yHq4uZ 0 4 185 3117 0 14 Dtool_l5yHq4uZ 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3166  
165 14 Dtool_l5yH3Z2O 0 4 185 3117 0 14 Dtool_l5yH3Z2O 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3166  3 out 1 3121  12 indent_level 1 3123  
166 14 Dtool_l5yHzLZ_ 0 4 185 3117 0 14 Dtool_l5yHzLZ_ 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3166  3 out 1 3121  
167 14 Dtool_l5yHDna8 0 7 186 3125 0 14 Dtool_l5yHDna8 68 //////////////////////////////////////////////////////////////////// 0 
168 14 Dtool_l5yHVS2J 0 6 172 3113 0 14 Dtool_l5yHVS2J 0 1 4 this 3 3165  
169 14 Dtool_l5yHvm1E 0 7 173 3165 1650 14 Dtool_l5yHvm1E 0 1 4 this 3 3113  
170 14 Dtool_l5yHGpmS 0 6 174 3158 0 14 Dtool_l5yHGpmS 0 1 4 this 3 3165  
171 14 Dtool_l5yH43Fg 0 7 175 3165 1650 14 Dtool_l5yH43Fg 0 1 4 this 3 3158  
172 14 Dtool_l5yHsuRK 0 7 189 3170 1650 14 Dtool_l5yHsuRK 734 // Filename: physxBoxForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
173 14 Dtool_l5yHBjr5 0 4 190 3117 0 14 Dtool_l5yHBjr5 311 ////////////////////////////////////////////////////////////////////
//     Function : PhysxBoxForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3171  9 shapeDesc 1 3173  
174 14 Dtool_l5yH8YUc 0 4 191 3117 0 14 Dtool_l5yH8YUc 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::set_dimensions
//       Access: Published
//  Description: Sets the box dimensions. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3170  10 dimensions 1 3150  
175 14 Dtool_l5yHCajZ 0 7 192 3157 0 14 Dtool_l5yHCajZ 465 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShape::get_dimensions
//       Access: Published
//  Description: Retrieves the dimensions of the box. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3171  
176 14 Dtool_l5yHLoMS 0 7 193 3125 0 14 Dtool_l5yHLoMS 68 //////////////////////////////////////////////////////////////////// 0 
177 14 Dtool_l5yH7Brd 0 4 199 3117 0 14 Dtool_l5yH7Brd 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3149  
178 14 Dtool_l5yH6D78 0 7 200 3126 1514 14 Dtool_l5yH6D78 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_actor
//       Access: Published
//  Description: Retrieves the actor which this shape is associated
//               with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
179 14 Dtool_l5yH6SUa 0 4 201 3117 0 14 Dtool_l5yH6SUa 416 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
//               This is for debugging and is not used by the
//               physics engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  4 name 1 3114  
180 14 Dtool_l5yHAfhP 0 4 202 3117 0 14 Dtool_l5yHAfhP 0 3 4 this 3 3149  4 flag 1 2985  5 value 1 3120  
181 14 Dtool_l5yHH_5i 0 4 203 3117 0 14 Dtool_l5yHH_5i 301 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_skin_width
//       Access: Published
//  Description: Sets the skin width. 
//               The skin width must be non-negative.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  9 skinWidth 1 3137  
182 14 Dtool_l5yH3iut 0 4 204 3117 0 14 Dtool_l5yH3iut 572 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_group
//       Access: Published
//  Description: Sets which collision group this shape is part of. 
//
//               Default group is 0. Maximum possible group is 31.
//               Collision groups are sets of shapes which may or
//               may not be set to collision detect with each other;
//               this can be set using
//               PhysxScene::set_group_collision_flag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  5 group 1 3176  
183 14 Dtool_l5yHOOUT 0 4 205 3117 0 14 Dtool_l5yHOOUT 675 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_local_pos
//       Access: Published
//  Description: Set the position of the shape in actor space, i.e.
//               relative to the actor it is owned by.
//
//               Calling this method does NOT wake the associated
//               actor up automatically.
//
//               Calling this method does not automatically update
//               the inertia properties of the owning actor (if
//               applicable); use
//               PhysxActor::update_mass_from_shapes() to do this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  3 pos 1 3131  
184 14 Dtool_l5yHFqd0 0 4 206 3117 0 14 Dtool_l5yHFqd0 676 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_local_mat
//       Access: Published
//  Description: Set the transform of the shape in actor space,
//               i.e. relative to the actor it is owned by.
//
//               Calling this method does NOT wake the associated
//               actor up automatically.
//
//               Calling this method does not automatically update
//               the inertia properties of the owning actor (if
//               applicable); use
//               PhysxActor::update_mass_from_shapes() to do this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  3 mat 1 3134  
185 14 Dtool_l5yHFHZB 0 4 207 3117 0 14 Dtool_l5yHFHZB 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_material
//       Access: Published
//  Description: Assigns a material to the shape.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  8 material 1 3177  
186 14 Dtool_l5yHrbzj 0 4 208 3117 0 14 Dtool_l5yHrbzj 581 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_material_index
//       Access: Published
//  Description: Assigns a material index to the shape. 
//
//               The material index can be retrieved by calling
//               PhysxMaterial::get_material_index(). If the material
//               index is invalid, it will still be recorded, but
//               the default material (at index 0) will effectively
//               be used for simulation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  3 idx 1 3176  
187 14 Dtool_l5yHEwQH 0 4 209 3117 0 14 Dtool_l5yHEwQH 361 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
//               Does NOT wake the associated actor up
//               automatically.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  4 mask 1 3179  
188 14 Dtool_l5yH8dJW 0 6 210 3114 0 14 Dtool_l5yH8dJW 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_name
//       Access: Published
//  Description: Returns the name string. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
189 14 Dtool_l5yHWFwM 0 6 211 3120 0 14 Dtool_l5yHWFwM 0 2 4 this 3 3174  4 flag 1 2985  
190 14 Dtool_l5yHLGMM 0 6 212 3137 0 14 Dtool_l5yHLGMM 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_skin_width
//       Access: Published
//  Description: Returns the skin width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
191 14 Dtool_l5yHQR8d 0 6 213 3176 0 14 Dtool_l5yHQR8d 357 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_group
//       Access: Published
//  Description: Retrieves the collision group set for this shape. 
//               The collision group is an integer between 0 and
//               31.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
192 14 Dtool_l5yH3aHc 0 7 214 3139 0 14 Dtool_l5yH3aHc 336 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_local_pos
//       Access: Published
//  Description: Retrieve the position of the shape in actor space,
//               i.e. relative to the actor it is owned by. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
193 14 Dtool_l5yHTL0u 0 7 215 3140 0 14 Dtool_l5yHTL0u 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_local_mat
//       Access: Published
//  Description: Retrieve the transform of the shape in actor space,
//               i.e. relative to the actor it is owned by. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
194 14 Dtool_l5yHnerN 0 6 216 3176 0 14 Dtool_l5yHnerN 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_material_index
//       Access: Published
//  Description: Returns the material index currently assigned to
//               the shape. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
195 14 Dtool_l5yH7Dv0 0 7 217 3181 1991 14 Dtool_l5yH7Dv0 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_groups_mask
//       Access: Published
//  Description: Gets 128-bit mask used for collision filtering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
196 14 Dtool_l5yHPGcK 0 7 218 3182 2298 14 Dtool_l5yHPGcK 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::get_world_bounds
//       Access: Published
//  Description: Returns a world space AABB enclosing this shape.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
197 14 Dtool_l5yHVj8N 0 6 219 3120 0 14 Dtool_l5yHVj8N 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_aabb
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               AABB or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3174  12 world_bounds 1 3183  
198 14 Dtool_l5yH59YU 0 6 220 3120 0 14 Dtool_l5yH59YU 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_capsule
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               capsule or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3174  13 world_capsule 1 3185  
199 14 Dtool_l5yHr5_V 0 6 221 3120 0 14 Dtool_l5yHr5_V 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_obb
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               OBB or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3174  9 world_box 1 3187  
200 14 Dtool_l5yHyVfF 0 6 222 3120 0 14 Dtool_l5yHyVfF 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::check_overlap_sphere
//       Access: Published
//  Description: Checks whether the shape overlaps a world-space
//               sphere or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3174  12 world_sphere 1 3189  
201 14 Dtool_l5yHLEkr 0 7 223 3193 2771 14 Dtool_l5yHLEkr 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::raycast
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3174  8 worldRay 1 3191  8 firstHit 1 3120  12 smoothNormal 1 3120  
202 14 Dtool_l5yHPMj5 0 4 224 3117 0 14 Dtool_l5yHPMj5 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3174  
203 14 Dtool_l5yHafym 0 4 224 3117 0 14 Dtool_l5yHafym 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3174  3 out 1 3121  12 indent_level 1 3123  
204 14 Dtool_l5yH948y 0 4 224 3117 0 14 Dtool_l5yH948y 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShape::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3174  3 out 1 3121  
205 14 Dtool_l5yHLkNS 0 7 225 3125 0 14 Dtool_l5yHLkNS 68 //////////////////////////////////////////////////////////////////// 0 
206 14 Dtool_l5yHJfk1 0 6 195 3113 0 14 Dtool_l5yHJfk1 0 1 4 this 3 3149  
207 14 Dtool_l5yHPly4 0 7 196 3149 1687 14 Dtool_l5yHPly4 0 1 4 this 3 3113  
208 14 Dtool_l5yH8MvH 0 6 197 3158 0 14 Dtool_l5yH8MvH 0 1 4 this 3 3149  
209 14 Dtool_l5yHfGxF 0 7 198 3149 1687 14 Dtool_l5yHfGxF 0 1 4 this 3 3158  
210 14 Dtool_l5yHsZ60 0 7 228 3194 1687 14 Dtool_l5yHsZ60 714 // Filename: physxBoxShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
211 14 Dtool_l5yHlgen 0 4 229 3117 0 14 Dtool_l5yHlgen 301 ////////////////////////////////////////////////////////////////////
//     Function : PhysxBoxShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3195  9 shapeDesc 1 3197  
212 14 Dtool_l5yHkL0f 0 4 230 3117 0 14 Dtool_l5yHkL0f 443 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::set_dimensions
//       Access: Published
//  Description: Sets the box dimensions. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3194  10 dimensions 1 3150  
213 14 Dtool_l5yHHZJf 0 7 231 3157 0 14 Dtool_l5yHHZJf 455 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShape::get_dimensions
//       Access: Published
//  Description: Retrieves the dimensions of the box. 
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3195  
214 14 Dtool_l5yHs2SN 0 7 232 3125 0 14 Dtool_l5yHs2SN 68 //////////////////////////////////////////////////////////////////// 0 
215 14 Dtool_l5yH29RA 0 7 234 3198 1630 14 Dtool_l5yH29RA 732 // Filename: physxCapsuleController.I
// Created by:  enn0x (24Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
216 14 Dtool_l5yHlOfd 0 4 235 3117 0 14 Dtool_l5yHlOfd 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::set_radius
//       Access: Published
//  Description: Resets the controller's radius.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3198  6 radius 1 3137  
217 14 Dtool_l5yHYn3_ 0 4 236 3117 0 14 Dtool_l5yHYn3_ 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::set_height
//       Access: Published
//  Description: Resets the controller's height.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3198  6 height 1 3137  
218 14 Dtool_l5yHkO0_ 0 6 237 3137 0 14 Dtool_l5yHkO0_ 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::get_radius
//       Access: Published
//  Description: Returns the controller's radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3199  
219 14 Dtool_l5yHxpMh 0 6 238 3137 0 14 Dtool_l5yHxpMh 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleController::get_height
//       Access: Published
//  Description: Returns the controller's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3199  
220 14 Dtool_l5yHqnue 0 7 239 3125 0 14 Dtool_l5yHqnue 68 //////////////////////////////////////////////////////////////////// 0 
221 14 Dtool_l5yHnXnd 0 7 241 3201 1650 14 Dtool_l5yHnXnd 742 // Filename: physxCapsuleForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
222 14 Dtool_l5yHchoP 0 4 242 3117 0 14 Dtool_l5yHchoP 315 ////////////////////////////////////////////////////////////////////
//     Function : PhysxCapsuleForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  9 shapeDesc 1 3204  
223 14 Dtool_l5yHC_17 0 4 243 3117 0 14 Dtool_l5yHC_17 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::set_radius
//       Access: Published
//  Description: Alters the radius of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3201  6 radius 1 3137  
224 14 Dtool_l5yH7Tp_ 0 4 244 3117 0 14 Dtool_l5yH7Tp_ 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::set_height
//       Access: Published
//  Description: Alters the height of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3201  6 height 1 3137  
225 14 Dtool_l5yHJKjA 0 6 245 3137 0 14 Dtool_l5yHJKjA 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::get_radius
//       Access: Published
//  Description: Retrieves the radius of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3202  
226 14 Dtool_l5yH_qVD 0 6 246 3137 0 14 Dtool_l5yH_qVD 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShape::get_height
//       Access: Published
//  Description: Retrieves the height of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3202  
227 14 Dtool_l5yHDcW_ 0 7 247 3125 0 14 Dtool_l5yHDcW_ 68 //////////////////////////////////////////////////////////////////// 0 
228 14 Dtool_l5yHTi8S 0 7 249 3205 1687 14 Dtool_l5yHTi8S 722 // Filename: physxCapsuleShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
229 14 Dtool_l5yHDp_u 0 4 250 3117 0 14 Dtool_l5yHDp_u 305 ////////////////////////////////////////////////////////////////////
//     Function : PhysxCapsuleShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3206  9 shapeDesc 1 3208  
230 14 Dtool_l5yHvPfN 0 4 251 3117 0 14 Dtool_l5yHvPfN 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::set_radius
//       Access: Published
//  Description: Alters the radius of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  6 radius 1 3137  
231 14 Dtool_l5yHJUK_ 0 4 252 3117 0 14 Dtool_l5yHJUK_ 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::set_height
//       Access: Published
//  Description: Alters the height of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  6 height 1 3137  
232 14 Dtool_l5yHE_o_ 0 6 253 3137 0 14 Dtool_l5yHE_o_ 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::get_radius
//       Access: Published
//  Description: Retrieves the radius of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3206  
233 14 Dtool_l5yHrRUv 0 6 254 3137 0 14 Dtool_l5yHrRUv 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShape::get_height
//       Access: Published
//  Description: Retrieves the height of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3206  
234 14 Dtool_l5yHg1Fu 0 7 255 3125 0 14 Dtool_l5yHg1Fu 68 //////////////////////////////////////////////////////////////////// 0 
235 14 Dtool_l5yHv2_l 0 7 261 3209 1718 14 Dtool_l5yHv2_l 708 // Filename: physxCloth.I
// Created by:  enn0x (30Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_l5yHvA5d 0 7 263 3143 2011 14 Dtool_l5yHvA5d 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_scene
//       Access: Published
//  Description: Returns the scene which this cloth belongs to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
237 14 Dtool_l5yHgd4k 0 7 264 3212 0 14 Dtool_l5yHgd4k 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_cloth_node
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
238 14 Dtool_l5yHJuNc 0 7 265 3212 0 14 Dtool_l5yHJuNc 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::create_cloth_node
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  4 name 1 3114  
239 14 Dtool_l5yHMKXw 0 4 266 3117 0 14 Dtool_l5yHMKXw 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  4 name 1 3114  
240 14 Dtool_l5yHSgqR 0 4 267 3117 0 14 Dtool_l5yHSgqR 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_group
//       Access: Published
//  Description: Sets which collision group this cloth is part of.
//               Collision group must be between 0 and 31.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  5 group 1 3138  
241 14 Dtool_l5yHP6Td 0 4 268 3117 0 14 Dtool_l5yHP6Td 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  4 mask 1 3179  
242 14 Dtool_l5yHYdyN 0 4 269 3117 0 14 Dtool_l5yHYdyN 252 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3209  4 flag 1 2967  5 value 1 3120  
243 14 Dtool_l5yH7nxv 0 4 270 3117 0 14 Dtool_l5yH7nxv 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_thickness
//       Access: Published
//  Description: Sets the cloth thickness (must be positive).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  9 thickness 1 3137  
244 14 Dtool_l5yHuGMs 0 6 271 3114 0 14 Dtool_l5yHuGMs 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_name
//       Access: Published
//  Description: Retrieves the name string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
245 14 Dtool_l5yHk2L2 0 6 272 3138 0 14 Dtool_l5yHk2L2 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_num_particles
//       Access: Published
//  Description: Gets the number of cloth particles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3209  
246 14 Dtool_l5yHWZB0 0 6 273 3138 0 14 Dtool_l5yHWZB0 290 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_group
//       Access: Published
//  Description: Retrieves the collision group this cloth is part
//               of.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
247 14 Dtool_l5yHx4xK 0 7 274 3181 1991 14 Dtool_l5yHx4xK 302 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_groups_mask
//       Access: Published
//  Description: Gets the 128-bit groups mask used for collision
//               filtering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
248 14 Dtool_l5yHFBHR 0 6 275 3120 0 14 Dtool_l5yHFBHR 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_flag
//       Access: Published
//  Description: Retrieves the value of a single flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3210  4 flag 1 2967  
249 14 Dtool_l5yHejDb 0 6 276 3137 0 14 Dtool_l5yHejDb 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_thickness
//       Access: Published
//  Description: Gets the cloth thickness.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
250 14 Dtool_l5yHJluE 0 6 277 3137 0 14 Dtool_l5yHJluE 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_density
//       Access: Published
//  Description: Gets the cloth density.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
251 14 Dtool_l5yHhUpC 0 6 278 3137 0 14 Dtool_l5yHhUpC 596 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_relative_grid_spacing
//       Access: Published
//  Description: Gets the relative grid spacing for the broad
//               phase. The cloth is represented by a set of
//               world aligned cubical cells in broad phase. The
//               size of these cells is determined by multiplying
//               the length of the diagonal of the AABB of the
//               initial soft body size with this constant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
252 14 Dtool_l5yH14Fh 0 4 279 3117 0 14 Dtool_l5yH14Fh 309 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_vertex_to_global_pos
//       Access: Published
//  Description: Attaches a cloth vertex to a position in world
//               space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3209  8 vertexId 1 3138  3 pos 1 3131  
253 14 Dtool_l5yHuRN7 0 4 280 3117 0 14 Dtool_l5yHuRN7 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::free_vertex
//       Access: Published
//  Description: Frees a previously attached cloth point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  8 vertexId 1 3138  
254 14 Dtool_l5yHz0At 0 4 281 3117 0 14 Dtool_l5yHz0At 511 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_to_shape
//       Access: Published
//  Description: Attaches the cloth to a shape. All cloth points
//               currently inside the shape are attached.
//
//               This method only works with primitive and convex
//               shapes. Since the inside of a general triangle mesh
//               is not clearly defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  5 shape 1 3149  
255 14 Dtool_l5yHYueC 0 4 282 3117 0 14 Dtool_l5yHYueC 489 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_to_colliding_shapes
//       Access: Published
//  Description: Attaches the cloth to all shapes, currently
//               colliding. 
//
//               This method only works with primitive and convex
//               shapes. Since the inside of a general triangle mesh
//               is not clearly defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3209  
256 14 Dtool_l5yHAZGl 0 4 283 3117 0 14 Dtool_l5yHAZGl 427 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::detach_from_shape
//       Access: Published
//  Description: Detaches the cloth from a shape it has been
//               attached to before. 
//
//               If the cloth has not been attached to the shape
//               before, the call has no effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  5 shape 1 3149  
257 14 Dtool_l5yH8yFj 0 4 284 3117 0 14 Dtool_l5yH8yFj 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::attach_vertex_to_shape
//       Access: Published
//  Description: Attaches a cloth vertex to a local position within
//               a shape.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3209  8 vertexId 1 3138  5 shape 1 3149  8 localPos 1 3131  
258 14 Dtool_l5yH_CDb 0 6 285 2990 0 14 Dtool_l5yH_CDb 289 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_status
//       Access: Published
//  Description: Return the attachment status of the given vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3210  8 vertexId 1 3138  
259 14 Dtool_l5yHEYpy 0 7 286 3149 1687 14 Dtool_l5yHEYpy 424 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_shape
//       Access: Published
//  Description: Returns the pointer to an attached shape pointer
//               of the given vertex. If the vertex is not attached
//               or attached to a global position, NULL is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3210  8 vertexId 1 3138  
260 14 Dtool_l5yHFhaM 0 7 287 3139 0 14 Dtool_l5yHFhaM 507 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_vertex_attachment_pos
//       Access: Published
//  Description: Returns the attachment position of the given
//               vertex. If the vertex is attached to shape, the
//               position local to the shape's pose is returned. If
//               the vertex is not attached, the return value is
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3210  8 vertexId 1 3138  
261 14 Dtool_l5yHHUc6 0 6 288 3120 0 14 Dtool_l5yHHUc6 722 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::is_sleeping
//       Access: Published
//  Description: Returns true if this cloth is sleeping. 
//
//               When a cloth does not move for a period of time,
//               it is no longer simulated in order to save time.
//               This state is called sleeping. However, because the
//               object automatically wakes up when it is either
//               touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
262 14 Dtool_l5yHRK3K 0 4 289 3117 0 14 Dtool_l5yHRK3K 506 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::wake_up
//       Access: Published
//  Description: Wakes up the cloth if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxCloth::put_to_sleep().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  16 wakeCounterValue 1 3137  
263 14 Dtool_l5yHqc73 0 4 289 3117 0 14 Dtool_l5yHqc73 506 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::wake_up
//       Access: Published
//  Description: Wakes up the cloth if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxCloth::put_to_sleep().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3209  
264 14 Dtool_l5yH4R0d 0 4 290 3117 0 14 Dtool_l5yH4R0d 557 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::put_to_sleep
//       Access: Published
//  Description: Forces the cloth to sleep. 
//
//               The cloth  will stay asleep until the next
//               call to simulate, and will not wake up until then
//               even when otherwise it would (for example a force
//               is applied to it). It can however wake up during
//               the next do_physics call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3209  
265 14 Dtool_l5yH65Iv 0 4 291 3117 0 14 Dtool_l5yH65Iv 567 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an cloth
//               may go to sleep. Cloths whose linear velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  9 threshold 1 3137  
266 14 Dtool_l5yHZxgU 0 6 292 3137 0 14 Dtool_l5yHZxgU 419 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an soft
//               body may go to sleep. cloths whose linear velocity
//               is above this threshold will not be put to sleep.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
267 14 Dtool_l5yH9DJ8 0 4 293 3117 0 14 Dtool_l5yH9DJ8 338 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_external_acceleration
//       Access: Published
//  Description: Sets an external acceleration which affects all non
//               attached particles of the cloth.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  12 acceleration 1 3150  
268 14 Dtool_l5yH5xVt 0 7 294 3157 0 14 Dtool_l5yH5xVt 344 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_external_acceleration
//       Access: Published
//  Description: Retrieves the external acceleration which affects
//               all non attached particles of the cloth.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
269 14 Dtool_l5yHXwtp 0 4 295 3117 0 14 Dtool_l5yHXwtp 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::set_wind_acceleration
//       Access: Published
//  Description: Sets an acceleration acting normal to the cloth
//               surface at each vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3209  12 acceleration 1 3150  
270 14 Dtool_l5yH_Feo 0 7 296 3157 0 14 Dtool_l5yH_Feo 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::get_wind_acceleration
//       Access: Published
//  Description: Retrieves the acceleration acting normal to the
//               cloth surface at each vertex
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
271 14 Dtool_l5yHX6ix 0 4 297 3117 0 14 Dtool_l5yHX6ix 371 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_vertex
//       Access: Published
//  Description: Applies a force (or impulse) defined in the 
//               global coordinate frame, to a particular vertex
//               of the cloth.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3209  5 force 1 3150  8 vertexId 1 3123  4 mode 1 2977  
272 14 Dtool_l5yHX_A2 0 4 297 3117 0 14 Dtool_l5yHX_A2 371 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_vertex
//       Access: Published
//  Description: Applies a force (or impulse) defined in the 
//               global coordinate frame, to a particular vertex
//               of the cloth.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3209  5 force 1 3150  8 vertexId 1 3123  
273 14 Dtool_l5yHxjrq 0 4 298 3117 0 14 Dtool_l5yHxjrq 395 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_pos
//       Access: Published
//  Description: Applies a radial force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off. 
//////////////////////////////////////////////////////////////////// 5 4 this 3 3209  3 pos 1 3131  9 magnitude 1 3137  6 radius 1 3137  4 mode 1 2977  
274 14 Dtool_l5yHqwkz 0 4 298 3117 0 14 Dtool_l5yHqwkz 395 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_force_at_pos
//       Access: Published
//  Description: Applies a radial force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off. 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3209  3 pos 1 3131  9 magnitude 1 3137  6 radius 1 3137  
275 14 Dtool_l5yHrUpG 0 4 299 3117 0 14 Dtool_l5yHrUpG 407 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_directed_force_at_pos
//       Access: Published
//  Description: Applies a directed force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off.  
//////////////////////////////////////////////////////////////////// 5 4 this 3 3209  3 pos 1 3131  5 force 1 3150  6 radius 1 3137  4 mode 1 2977  
276 14 Dtool_l5yHg2ya 0 4 299 3117 0 14 Dtool_l5yHg2ya 407 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::add_directed_force_at_pos
//       Access: Published
//  Description: Applies a directed force (or impulse) at a
//               particular position. All vertices within radius
//               will be affected with a quadratic drop-off.  
//////////////////////////////////////////////////////////////////// 4 4 this 3 3209  3 pos 1 3131  5 force 1 3150  6 radius 1 3137  
277 14 Dtool_l5yHYMmP 0 4 300 3117 0 14 Dtool_l5yHYMmP 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3210  
278 14 Dtool_l5yHRh28 0 4 300 3117 0 14 Dtool_l5yHRh28 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3210  3 out 1 3121  12 indent_level 1 3123  
279 14 Dtool_l5yHoxAJ 0 4 300 3117 0 14 Dtool_l5yHoxAJ 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3210  3 out 1 3121  
280 14 Dtool_l5yHrOuz 0 4 301 3117 0 14 Dtool_l5yHrOuz 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCloth::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3209  
281 14 Dtool_l5yH8zQo 0 7 302 3125 0 14 Dtool_l5yH8zQo 68 //////////////////////////////////////////////////////////////////// 0 
282 14 Dtool_l5yH6loL 0 6 257 3113 0 14 Dtool_l5yH6loL 0 1 4 this 3 3209  
283 14 Dtool_l5yHzON6 0 7 258 3209 1718 14 Dtool_l5yHzON6 0 1 4 this 3 3113  
284 14 Dtool_l5yHLmzd 0 6 259 3158 0 14 Dtool_l5yHLmzd 0 1 4 this 3 3209  
285 14 Dtool_l5yHWszb 0 7 260 3209 1718 14 Dtool_l5yHWszb 0 1 4 this 3 3158  
286 14 Dtool_l5yHqdYO 0 6 304 3138 0 14 Dtool_l5yHqdYO 281 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3213  
287 14 Dtool_l5yHO9VS 0 4 305 3117 0 14 Dtool_l5yHO9VS 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMesh::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3215  
288 14 Dtool_l5yHrPmt 0 7 306 3125 0 14 Dtool_l5yHrPmt 68 //////////////////////////////////////////////////////////////////// 0 
289 14 Dtool_l5yHynZO 0 7 309 3212 0 14 Dtool_l5yHynZO 716 // Filename: physxClothNode.I
// Created by:  enn0x (05Apr10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3114  
290 14 Dtool_l5yHP6fN 0 6 310 3120 0 14 Dtool_l5yHP6fN 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothNode::set_texcoords
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3212  8 filename 1 3216  
291 14 Dtool_l5yHGt9n 0 7 311 3125 0 14 Dtool_l5yHGt9n 68 //////////////////////////////////////////////////////////////////// 0 
292 14 Dtool_l5yHMPTw 0 6 313 3120 0 14 Dtool_l5yHMPTw 302 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::is_deleted_a
//       Access: Published
//  Description: Returns true if the first of the two actors is
//               deleted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
293 14 Dtool_l5yHCTVw 0 6 314 3120 0 14 Dtool_l5yHCTVw 303 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::is_deleted_b
//       Access: Published
//  Description: Returns true if the second of the two actors is
//               deleted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
294 14 Dtool_l5yHX0zv 0 7 315 3126 1514 14 Dtool_l5yHX0zv 306 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_actor_a
//       Access: Published
//  Description: Returns the first of the two actors that makes up
//               this pair.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
295 14 Dtool_l5yHYxzL 0 7 316 3126 1514 14 Dtool_l5yHYxzL 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_actor_b
//       Access: Published
//  Description: Returns the second of the two actors that make up
//               his pair.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
296 14 Dtool_l5yHlCJr 0 7 317 3157 0 14 Dtool_l5yHlCJr 622 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_sum_normal_force
//       Access: Published
//  Description: Returns the total contact normal force that was
//               applied for this pair, to maintain nonpenetration
//               constraints.
//
//               You should set the ContactPairFlag 
//               CPF_notify_forces in order to receive this value.
//
//               @see PhysxScene::set_actor_pair_flag
//               @see PhysxScene::set_actor_group_pair_flag
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
297 14 Dtool_l5yHxKtk 0 7 318 3157 0 14 Dtool_l5yHxKtk 563 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_sum_friction_force
//       Access: Published
//  Description: Returns the total tangential force that was applied
//               for this pair.
//
//               You should set the ContactPairFlag 
//               CPF_notify_forces in order to receive this value.
//
//               @see PhysxScene::set_actor_pair_flag
//               @see PhysxScene::set_actor_group_pair_flag
//////////////////////////////////////////////////////////////////// 1 4 this 3 3219  
298 14 Dtool_l5yH2h1I 0 6 319 3138 0 14 Dtool_l5yH2h1I 446 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_num_contact_points
//       Access: Published
//  Description: Returns the total number of contact points reported
//               in this pair's contact stream.
//
//               This method is a helper for iterating over the
//               pair's contact stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3221  
299 14 Dtool_l5yHrtgz 0 7 320 3222 0 14 Dtool_l5yHrtgz 480 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPair::get_contact_point
//       Access: Published
//  Description: Returns an instance of PhysxContactPoint, which
//               represents a single entry of this pair's contact
//               stream.
//
//               This method is a helper for iterating over the
//               pair's contact stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3219  3 idx 1 3138  
300 14 Dtool_l5yH0coL 0 7 321 3125 0 14 Dtool_l5yH0coL 68 //////////////////////////////////////////////////////////////////// 0 
301 14 Dtool_l5yHuAkC 0 7 324 3222 0 14 Dtool_l5yHuAkC 722 // Filename: physxContactPoint.I
// Created by:  enn0x (20Dec09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
302 14 Dtool_l5yHMLNr 0 7 325 3139 0 14 Dtool_l5yHMLNr 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_point
//       Access: Published
//  Description: Returns the contact point position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
303 14 Dtool_l5yHPYxn 0 7 326 3157 0 14 Dtool_l5yHPYxn 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_normal
//       Access: Published
//  Description: Retrieves the patch normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
304 14 Dtool_l5yHM6eF 0 6 327 3137 0 14 Dtool_l5yHM6eF 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_normal_force
//       Access: Published
//  Description: Retrieves the point normal force.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
305 14 Dtool_l5yHT_eD 0 6 328 3137 0 14 Dtool_l5yHT_eD 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_separation
//       Access: Published
//  Description: Return the separation for the contact point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
306 14 Dtool_l5yH0RHV 0 6 329 3138 0 14 Dtool_l5yH0RHV 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_feature_index0
//       Access: Published
//  Description: Retrieves the feature index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
307 14 Dtool_l5yH3ROj 0 6 330 3138 0 14 Dtool_l5yH3ROj 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxContactPoint::get_feature_index1
//       Access: Published
//  Description: Retrieves the feature index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3223  
308 14 Dtool_l5yHSM1N 0 7 331 3125 0 14 Dtool_l5yHSM1N 68 //////////////////////////////////////////////////////////////////// 0 
309 14 Dtool_l5yHZh_6 0 6 333 3138 0 14 Dtool_l5yHZh_6 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3225  
310 14 Dtool_l5yHOMf3 0 4 334 3117 0 14 Dtool_l5yHOMf3 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMesh::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3227  
311 14 Dtool_l5yHH1mg 0 7 335 3125 0 14 Dtool_l5yHH1mg 68 //////////////////////////////////////////////////////////////////// 0 
312 14 Dtool_l5yH3RWA 0 7 337 3228 1650 14 Dtool_l5yH3RWA 740 // Filename: physxConvexForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
313 14 Dtool_l5yH7brv 0 4 338 3117 0 14 Dtool_l5yH7brv 314 ////////////////////////////////////////////////////////////////////
//     Function : PhysxConvexForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3229  9 shapeDesc 1 3231  
314 14 Dtool_l5yH_GUP 0 7 339 3125 0 14 Dtool_l5yH_GUP 68 //////////////////////////////////////////////////////////////////// 0 
315 14 Dtool_l5yHaGxS 0 7 341 3232 1687 14 Dtool_l5yHaGxS 720 // Filename: physxConvexShape.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
316 14 Dtool_l5yH5Xgv 0 4 342 3117 0 14 Dtool_l5yH5Xgv 304 ////////////////////////////////////////////////////////////////////
//     Function : PhysxConvexShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3233  9 shapeDesc 1 3235  
317 14 Dtool_l5yHTV2A 0 7 343 3125 0 14 Dtool_l5yHTV2A 68 //////////////////////////////////////////////////////////////////// 0 
318 14 Dtool_l5yH_u2i 0 4 349 3117 0 14 Dtool_l5yH_u2i 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3236  
319 14 Dtool_l5yH_gPm 0 7 350 3126 1514 14 Dtool_l5yH_gPm 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_actor
//       Access: Published
//  Description: Retrieves the actor which this joint is associated
//               with.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3237  3 idx 1 3138  
320 14 Dtool_l5yH7GAN 0 7 351 3143 2011 14 Dtool_l5yH7GAN 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_scene
//       Access: Published
//  Description: Retrieves the scene which this joint is associated
//               with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
321 14 Dtool_l5yH5vdX 0 4 352 3117 0 14 Dtool_l5yH5vdX 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::purge_limit_planes
//       Access: Published
//  Description: Deletes all limit planes added to the joint.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3236  
322 14 Dtool_l5yH5Jff 0 4 353 3117 0 14 Dtool_l5yH5Jff 416 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_name
//       Access: Published
//  Description: Sets a name string for this object. The name can
//               be retrieved again with get_name().
//               This is for debugging and is not used by the
//               physics engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  4 name 1 3114  
323 14 Dtool_l5yHDupJ 0 4 354 3117 0 14 Dtool_l5yHDupJ 328 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_global_anchor
//       Access: Published
//  Description: Sets the point where the two actors are attached,
//               specified in global coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  6 anchor 1 3131  
324 14 Dtool_l5yHDXsY 0 4 355 3117 0 14 Dtool_l5yHDXsY 324 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_global_axis
//       Access: Published
//  Description: Sets the direction of the joint's primary axis,
//               specified in global coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  4 axis 1 3150  
325 14 Dtool_l5yHtHDu 0 4 356 3117 0 14 Dtool_l5yHtHDu 1346 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_breakable
//       Access: Published
//  Description: Sets the maximum force magnitude that the joint
//               is able to withstand without breaking.
//
//               If the joint force rises above this threshold, the
//               joint breaks, and becomes disabled.
//
//               There are two values, one for linear forces, and
//               one for angular forces. Both values are used
//               directly as a value for the maximum impulse
//               tolerated by the joint constraints.
//
//               Both force values are NX_MAX_REAL by default.
//               This setting makes the joint unbreakable. The values
//               should always be nonnegative.
//
//               The distinction between maxForce and maxTorque is
//               dependent on how the joint is implemented
//               internally, which may not be obvious. For example
//               what appears to be an angular degree of freedom may
//               be constrained indirectly by a linear constraint.
//
//               So in most practical applications the user should
//               set both maxTorque and maxForce to low values.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3236  8 maxForce 1 3137  9 maxTorque 1 3137  
326 14 Dtool_l5yHyj8p 0 4 357 3117 0 14 Dtool_l5yHyj8p 280 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_solver_extrapolation_factor
//       Access: Published
//  Description: Sets the solver extrapolation factor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  6 factor 1 3137  
327 14 Dtool_l5yHOnQ9 0 4 358 3117 0 14 Dtool_l5yHOnQ9 290 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_use_acceleration_spring
//       Access: Published
//  Description: Switch between acceleration and force based spring.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  5 value 1 3120  
328 14 Dtool_l5yHLKrO 0 4 359 3117 0 14 Dtool_l5yHLKrO 1140 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_limit_point
//       Access: Published
//  Description: Sets the limit point.
//               The point is specified in the global coordinate
//               frame.
//
//               All types of joints may be limited with the same
//               system: You may elect a point attached to one of
//               the two actors to act as the limit point. You may
//               also specify several planes attached to the other
//               actor.
//
//               The points and planes move together with the actor
//               they are attached to.
//
//               The simulation then makes certain that the pair
//               of actors only move relative to each other so that
//               the limit point stays on the positive side of all
//               limit planes.
//
//               The default limit point is (0,0,0) in the local
//               frame of actor2. Calling this deletes all existing
//               limit planes
//////////////////////////////////////////////////////////////////// 3 4 this 3 3236  3 pos 1 3131  10 isOnActor2 1 3120  
329 14 Dtool_l5yHA3ce 0 4 359 3117 0 14 Dtool_l5yHA3ce 1140 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::set_limit_point
//       Access: Published
//  Description: Sets the limit point.
//               The point is specified in the global coordinate
//               frame.
//
//               All types of joints may be limited with the same
//               system: You may elect a point attached to one of
//               the two actors to act as the limit point. You may
//               also specify several planes attached to the other
//               actor.
//
//               The points and planes move together with the actor
//               they are attached to.
//
//               The simulation then makes certain that the pair
//               of actors only move relative to each other so that
//               the limit point stays on the positive side of all
//               limit planes.
//
//               The default limit point is (0,0,0) in the local
//               frame of actor2. Calling this deletes all existing
//               limit planes
//////////////////////////////////////////////////////////////////// 2 4 this 3 3236  3 pos 1 3131  
330 14 Dtool_l5yHUyJx 0 4 360 3117 0 14 Dtool_l5yHUyJx 737 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::add_limit_plane
//       Access: Published
//  Description: Adds a limit plane. 
//               The parameters are given in global coordinates.
//               The plane is affixed to the actor that does not
//               have the limit point.
//
//               The normal of the plane points toward the positive
//               side of the plane, and thus toward the limit point.
//               If the normal points away from the limit point at
//               the time of this call, the method returns false
//               and the limit plane is ignored.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3236  6 normal 1 3150  12 pointInPlane 1 3131  11 restitution 1 3137  
331 14 Dtool_l5yHe8pH 0 4 360 3117 0 14 Dtool_l5yHe8pH 737 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::add_limit_plane
//       Access: Published
//  Description: Adds a limit plane. 
//               The parameters are given in global coordinates.
//               The plane is affixed to the actor that does not
//               have the limit point.
//
//               The normal of the plane points toward the positive
//               side of the plane, and thus toward the limit point.
//               If the normal points away from the limit point at
//               the time of this call, the method returns false
//               and the limit plane is ignored.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3236  6 normal 1 3150  12 pointInPlane 1 3131  
332 14 Dtool_l5yHDZUb 0 6 361 3114 0 14 Dtool_l5yHDZUb 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_name
//       Access: Published
//  Description: Returns the name string. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
333 14 Dtool_l5yH1jeb 0 7 362 3139 0 14 Dtool_l5yH1jeb 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_global_anchor
//       Access: Published
//  Description: Retrieves the joint anchor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
334 14 Dtool_l5yHsyDW 0 7 363 3157 0 14 Dtool_l5yHsyDW 252 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_global_axis
//       Access: Published
//  Description: Retrieves the joint axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
335 14 Dtool_l5yHKH8s 0 6 364 3137 0 14 Dtool_l5yHKH8s 285 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_solver_extrapolation_factor
//       Access: Published
//  Description: Retrieves the solver extrapolation factor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
336 14 Dtool_l5yHikDf 0 6 365 3120 0 14 Dtool_l5yHikDf 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::get_use_acceleration_spring
//       Access: Published
//  Description: Checks whether acceleration spring is used.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
337 14 Dtool_l5yHytu_ 0 4 366 3117 0 14 Dtool_l5yHytu_ 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3237  
338 14 Dtool_l5yHVj_r 0 4 366 3117 0 14 Dtool_l5yHVj_r 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3237  3 out 1 3121  12 indent_level 1 3123  
339 14 Dtool_l5yHyhH4 0 4 366 3117 0 14 Dtool_l5yHyhH4 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJoint::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3237  3 out 1 3121  
340 14 Dtool_l5yHu1YX 0 7 367 3125 0 14 Dtool_l5yHu1YX 68 //////////////////////////////////////////////////////////////////// 0 
341 14 Dtool_l5yHlju6 0 6 345 3113 0 14 Dtool_l5yHlju6 0 1 4 this 3 3236  
342 14 Dtool_l5yHToTe 0 7 346 3236 1814 14 Dtool_l5yHToTe 0 1 4 this 3 3113  
343 14 Dtool_l5yH_l7M 0 6 347 3158 0 14 Dtool_l5yH_l7M 0 1 4 this 3 3236  
344 14 Dtool_l5yHQg7K 0 7 348 3236 1814 14 Dtool_l5yHQg7K 0 1 4 this 3 3158  
345 14 Dtool_l5yHPnQ_ 0 7 370 3239 1814 14 Dtool_l5yHPnQ_ 730 // Filename: physxCylindricalJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCylindricalJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
346 14 Dtool_l5yH4eq2 0 4 371 3117 0 14 Dtool_l5yH4eq2 309 ////////////////////////////////////////////////////////////////////
//     Function : PhysxCylindricalJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3240  9 jointDesc 1 3242  
347 14 Dtool_l5yHk7VH 0 4 372 3117 0 14 Dtool_l5yHk7VH 332 ////////////////////////////////////////////////////////////////////
//     Function : PhysxCylindricalJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3239  9 jointDesc 1 3243  
348 14 Dtool_l5yH6le_ 0 7 373 3125 0 14 Dtool_l5yH6le_ 68 //////////////////////////////////////////////////////////////////// 0 
349 14 Dtool_l5yHbgty 0 7 375 3245 1814 14 Dtool_l5yHbgty 712 // Filename: physxD6Joint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
350 14 Dtool_l5yH0brf 0 4 376 3117 0 14 Dtool_l5yH0brf 300 ////////////////////////////////////////////////////////////////////
//     Function : PhysxD6Joint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3246  9 jointDesc 1 3248  
351 14 Dtool_l5yHlHPV 0 4 377 3117 0 14 Dtool_l5yHlHPV 323 ////////////////////////////////////////////////////////////////////
//     Function : PhysxD6Joint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3245  9 jointDesc 1 3249  
352 14 Dtool_l5yHK1KE 0 4 378 3117 0 14 Dtool_l5yHK1KE 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_angular_velocity
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3245  1 v 1 3150  
353 14 Dtool_l5yHQvb5 0 4 379 3117 0 14 Dtool_l5yHQvb5 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_linear_velocity
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3245  1 v 1 3150  
354 14 Dtool_l5yHmLFC 0 4 380 3117 0 14 Dtool_l5yHmLFC 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_orientation
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3245  4 quat 1 3251  
355 14 Dtool_l5yHSI8c 0 4 381 3117 0 14 Dtool_l5yHSI8c 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6Joint::set_drive_position
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3245  3 pos 1 3131  
356 14 Dtool_l5yHEKXt 0 7 382 3125 0 14 Dtool_l5yHEKXt 68 //////////////////////////////////////////////////////////////////// 0 
357 14 Dtool_l5yHmKmG 0 7 384 3253 0 14 Dtool_l5yHmKmG 724 // Filename: physxDebugGeomNode.I
// Created by:  enn0x (15Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
358 14 Dtool_l5yHE_3D 0 4 385 3117 0 14 Dtool_l5yHE_3D 222 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3253  
359 14 Dtool_l5yHKzqT 0 4 386 3117 0 14 Dtool_l5yHKzqT 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::off
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3253  
360 14 Dtool_l5yHOna3 0 4 387 3117 0 14 Dtool_l5yHOna3 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::toggle
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3253  
361 14 Dtool_l5yH2S4o 0 4 388 3117 0 14 Dtool_l5yH2S4o 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_world_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
362 14 Dtool_l5yHQPIv 0 4 389 3117 0 14 Dtool_l5yHQPIv 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
363 14 Dtool_l5yHtDr2 0 4 390 3117 0 14 Dtool_l5yHtDr2 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_mass_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
364 14 Dtool_l5yH_jSw 0 4 391 3117 0 14 Dtool_l5yH_jSw 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_lin_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
365 14 Dtool_l5yH0JfD 0 4 392 3117 0 14 Dtool_l5yH0JfD 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_ang_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
366 14 Dtool_l5yH3SDz 0 4 393 3117 0 14 Dtool_l5yH3SDz 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_body_joint_groups
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
367 14 Dtool_l5yHrLc9 0 4 394 3117 0 14 Dtool_l5yHrLc9 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_local_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
368 14 Dtool_l5yHTAWD 0 4 395 3117 0 14 Dtool_l5yHTAWD 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_world_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
369 14 Dtool_l5yHcr86 0 4 396 3117 0 14 Dtool_l5yHcr86 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_joint_limits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
370 14 Dtool_l5yHpRIz 0 4 397 3117 0 14 Dtool_l5yHpRIz 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_point
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
371 14 Dtool_l5yHz3JS 0 4 398 3117 0 14 Dtool_l5yHz3JS 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_normal
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
372 14 Dtool_l5yHYRsd 0 4 399 3117 0 14 Dtool_l5yHYRsd 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_error
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
373 14 Dtool_l5yH3Fnf 0 4 400 3117 0 14 Dtool_l5yH3Fnf 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_contact_force
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
374 14 Dtool_l5yH808l 0 4 401 3117 0 14 Dtool_l5yH808l 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_actor_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
375 14 Dtool_l5yHnNa_ 0 4 402 3117 0 14 Dtool_l5yHnNa_ 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_aabbs
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
376 14 Dtool_l5yHagmf 0 4 403 3117 0 14 Dtool_l5yHagmf 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_shapes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
377 14 Dtool_l5yHzoIw 0 4 404 3117 0 14 Dtool_l5yHzoIw 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_axes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
378 14 Dtool_l5yH5PPV 0 4 405 3117 0 14 Dtool_l5yH5PPV 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_compounds
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
379 14 Dtool_l5yH5ZQY 0 4 406 3117 0 14 Dtool_l5yH5ZQY 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_vnormals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
380 14 Dtool_l5yH4ZJK 0 4 407 3117 0 14 Dtool_l5yH4ZJK 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_fnormals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
381 14 Dtool_l5yHQknp 0 4 408 3117 0 14 Dtool_l5yHQknp 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_edges
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
382 14 Dtool_l5yHJTTr 0 4 409 3117 0 14 Dtool_l5yHJTTr 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_spheres
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
383 14 Dtool_l5yHzFTX 0 4 410 3117 0 14 Dtool_l5yHzFTX 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_static
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
384 14 Dtool_l5yHvmio 0 4 411 3117 0 14 Dtool_l5yHvmio 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_dynamic
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
385 14 Dtool_l5yHKDFf 0 4 412 3117 0 14 Dtool_l5yHKDFf 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_free
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
386 14 Dtool_l5yHcN7N 0 4 413 3117 0 14 Dtool_l5yHcN7N 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_ccd
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
387 14 Dtool_l5yHMYDy 0 4 414 3117 0 14 Dtool_l5yHMYDy 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_collision_skeletons
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
388 14 Dtool_l5yHDYk7 0 4 415 3117 0 14 Dtool_l5yHDYk7 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_cloth_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
389 14 Dtool_l5yHsmUk 0 4 416 3117 0 14 Dtool_l5yHsmUk 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_cloth_validbounds
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
390 14 Dtool_l5yHeMcE 0 4 417 3117 0 14 Dtool_l5yHeMcE 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_softbody_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
391 14 Dtool_l5yHa2ga 0 4 418 3117 0 14 Dtool_l5yHa2ga 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_softbody_validbounds
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
392 14 Dtool_l5yHRRTa 0 4 419 3117 0 14 Dtool_l5yHRRTa 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDebugGeomNode::visualize_force_fields
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3253  5 value 1 3120  
393 14 Dtool_l5yHfAtb 0 7 420 3125 0 14 Dtool_l5yHfAtb 68 //////////////////////////////////////////////////////////////////// 0 
394 14 Dtool_l5yHUBo9 0 7 422 3254 1814 14 Dtool_l5yHUBo9 724 // Filename: physxDistanceJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
395 14 Dtool_l5yHWGLa 0 4 423 3117 0 14 Dtool_l5yHWGLa 306 ////////////////////////////////////////////////////////////////////
//     Function : PhysxDistanceJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3255  9 jointDesc 1 3257  
396 14 Dtool_l5yHP4II 0 4 424 3117 0 14 Dtool_l5yHP4II 329 ////////////////////////////////////////////////////////////////////
//     Function : PhysxDistanceJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3254  9 jointDesc 1 3258  
397 14 Dtool_l5yH97lE 0 7 425 3125 0 14 Dtool_l5yH97lE 68 //////////////////////////////////////////////////////////////////// 0 
398 14 Dtool_l5yH5N0k 0 7 427 3260 1814 14 Dtool_l5yH5N0k 718 // Filename: physxFixedJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxFixedJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
399 14 Dtool_l5yHKWQE 0 4 428 3117 0 14 Dtool_l5yHKWQE 303 ////////////////////////////////////////////////////////////////////
//     Function : PhysxFixedJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3261  9 jointDesc 1 3263  
400 14 Dtool_l5yH8ptA 0 4 429 3117 0 14 Dtool_l5yH8ptA 326 ////////////////////////////////////////////////////////////////////
//     Function : PhysxFixedJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3260  9 jointDesc 1 3264  
401 14 Dtool_l5yHyJqg 0 7 430 3125 0 14 Dtool_l5yHyJqg 68 //////////////////////////////////////////////////////////////////// 0 
402 14 Dtool_l5yHOkEv 0 7 432 3168 0 14 Dtool_l5yHOkEv 718 // Filename: physxForceField.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
403 14 Dtool_l5yH6T7z 0 4 433 3117 0 14 Dtool_l5yH6T7z 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::set_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3168  4 name 1 3114  
404 14 Dtool_l5yH3vjr 0 6 434 3114 0 14 Dtool_l5yH3vjr 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3266  
405 14 Dtool_l5yHlD6O 0 7 435 3143 2011 14 Dtool_l5yHlD6O 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_scene
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3266  
406 14 Dtool_l5yH7_xj 0 7 436 3169 1886 14 Dtool_l5yH7_xj 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_include_shape_group
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3266  
407 14 Dtool_l5yH15ga 0 6 437 3138 0 14 Dtool_l5yH15ga 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_num_shape_groups
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3266  
408 14 Dtool_l5yHXKjK 0 7 438 3169 1886 14 Dtool_l5yHXKjK 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::get_shape_group
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3266  3 idx 1 3138  
409 14 Dtool_l5yHihm6 0 4 439 3117 0 14 Dtool_l5yHihm6 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceField::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3168  
410 14 Dtool_l5yHRCsj 0 7 440 3125 0 14 Dtool_l5yHRCsj 68 //////////////////////////////////////////////////////////////////// 0 
411 14 Dtool_l5yHfG9i 0 7 446 3169 1886 14 Dtool_l5yHfG9i 738 // Filename: physxForceFieldShapeGroup.I
// Created by:  enn0x (11Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
412 14 Dtool_l5yHdYCw 0 4 448 3117 0 14 Dtool_l5yHdYCw 331 ////////////////////////////////////////////////////////////////////
//     Function : PhysxForceFieldShapeGroup::save_to_desc
//       Access : Published
//  Description : Saves the state of the force field shape group
//                object to a  descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3268  9 groupDesc 1 3270  
413 14 Dtool_l5yHHWFV 0 7 449 3143 2011 14 Dtool_l5yHHWFV 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_scene
//       Access: Published
//  Description: Returns the scene that owns this force field shape
//               group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3268  
414 14 Dtool_l5yHRUIT 0 7 450 3168 0 14 Dtool_l5yHRUIT 355 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_force_field
//       Access: Published
//  Description: Returns the force field of this group if this is
//               an include group. If not NULL will be returned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3268  
415 14 Dtool_l5yHq5mH 0 6 451 3114 0 14 Dtool_l5yHq5mH 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_name
//       Access: Published
//  Description: Returns the name string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3268  
416 14 Dtool_l5yHQ5Jp 0 4 452 3117 0 14 Dtool_l5yHQ5Jp 412 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3169  4 name 1 3114  
417 14 Dtool_l5yH0v0Z 0 6 453 3138 0 14 Dtool_l5yH0v0Z 327 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_num_shapes
//       Access: Published
//  Description: Returns the number of shapes assigned to the
//               force field shape group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3268  
418 14 Dtool_l5yH_qUj 0 7 454 3165 1650 14 Dtool_l5yH_qUj 309 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::create_shape
//       Access: Published
//  Description: Creates a force field shape and adds it to the
//               group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3169  4 desc 1 3271  
419 14 Dtool_l5yHSbg_ 0 7 455 3165 1650 14 Dtool_l5yHSbg_ 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::get_shape
//       Access: Published
//  Description: Returns the i-th shape in the force field group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3268  3 idx 1 3138  
420 14 Dtool_l5yHpVwD 0 4 456 3117 0 14 Dtool_l5yHpVwD 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::release
//       Access: Published
//  Description: Releases the force field shape.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3169  
421 14 Dtool_l5yHA_0i 0 4 457 3117 0 14 Dtool_l5yHA_0i 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3268  
422 14 Dtool_l5yHTSJN 0 4 457 3117 0 14 Dtool_l5yHTSJN 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3268  3 out 1 3121  12 indent_level 1 3123  
423 14 Dtool_l5yHkuNu 0 4 457 3117 0 14 Dtool_l5yHkuNu 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroup::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3268  3 out 1 3121  
424 14 Dtool_l5yHkBLo 0 7 458 3125 0 14 Dtool_l5yHkBLo 68 //////////////////////////////////////////////////////////////////// 0 
425 14 Dtool_l5yHhsJD 0 6 442 3113 0 14 Dtool_l5yHhsJD 0 1 4 this 3 3169  
426 14 Dtool_l5yH8mDF 0 7 443 3169 1886 14 Dtool_l5yH8mDF 0 1 4 this 3 3113  
427 14 Dtool_l5yHHxrU 0 6 444 3158 0 14 Dtool_l5yHHxrU 0 1 4 this 3 3169  
428 14 Dtool_l5yH6qFM 0 7 445 3169 1886 14 Dtool_l5yH6qFM 0 1 4 this 3 3158  
429 14 Dtool_l5yHTrm3 0 4 460 3117 0 14 Dtool_l5yHTrm3 222 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::release
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3272  
430 14 Dtool_l5yH56Jp 0 6 461 3138 0 14 Dtool_l5yH56Jp 283 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3273  
431 14 Dtool_l5yHOw_g 0 6 462 3137 0 14 Dtool_l5yHOw_g 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightField::get_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3273  1 x 1 3137  1 y 1 3137  
432 14 Dtool_l5yHxkPb 0 7 463 3125 0 14 Dtool_l5yHxkPb 68 //////////////////////////////////////////////////////////////////// 0 
433 14 Dtool_l5yHTghM 0 7 465 3275 1687 14 Dtool_l5yHTghM 730 // Filename: physxHeightFieldShape.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
434 14 Dtool_l5yHezAH 0 4 466 3117 0 14 Dtool_l5yHezAH 309 ////////////////////////////////////////////////////////////////////
//     Function : PhysxHeightFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3276  9 shapeDesc 1 3278  
435 14 Dtool_l5yHujGz 0 7 467 3125 0 14 Dtool_l5yHujGz 68 //////////////////////////////////////////////////////////////////// 0 
436 14 Dtool_l5yHUOhh 0 7 473 3279 1910 14 Dtool_l5yHUOhh 714 // Filename: physxMaterial.I
// Created by:  enn0x (21Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
437 14 Dtool_l5yHtgLo 0 7 475 3143 2011 14 Dtool_l5yHtgLo 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_scene
//       Access: Published
//  Description: Returns the scene that owns this material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
438 14 Dtool_l5yHAL4g 0 6 476 3176 0 14 Dtool_l5yHAL4g 651 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_material_index
//       Access: Published
//  Description: Returns the material index for this material.
//
//               Materials are associated with mesh faces and shapes
//               using material index identifiers.
//
//               If you release a material while its material index
//               is still in use by shapes or meshes, the material
//               usage of these objects becomes undefined as the
//               material index gets recycled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
439 14 Dtool_l5yHyWH8 0 4 477 3117 0 14 Dtool_l5yHyWH8 327 ////////////////////////////////////////////////////////////////////
//     Function : PhysxMaterial::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the material from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  12 materialDesc 1 3280  
440 14 Dtool_l5yH1K8m 0 4 478 3117 0 14 Dtool_l5yH1K8m 304 ////////////////////////////////////////////////////////////////////
//     Function : PhysxMaterial::save_to_desc
//       Access : Published
//  Description : Saves the state of the material object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  12 materialDesc 1 3282  
441 14 Dtool_l5yHa1T_ 0 4 479 3117 0 14 Dtool_l5yHa1T_ 670 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dynamic_friction
//       Access: Published
//  Description: Sets the coefficient of dynamic friction. 
//               The coefficient of dynamic friction should be in
//               [0, +inf]. If set to greater than staticFriction,
//               the effective value of staticFriction will be
//               increased to match.
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 coef 1 3137  
442 14 Dtool_l5yHjuMF 0 4 480 3117 0 14 Dtool_l5yHjuMF 538 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_static_friction
//       Access: Published
//  Description: Sets the coefficient of static friction. 
//               The coefficient of static friction should be in the
//               range [0, +inf].
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 coef 1 3137  
443 14 Dtool_l5yHDgRH 0 4 481 3117 0 14 Dtool_l5yHDgRH 431 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_restitution
//       Access: Published
//  Description: Sets the coefficient of restitution. 
//               A coefficient of 0 makes the object bounce as
//               little as possible, higher values up to 1.0 result
//               in more bounce.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 rest 1 3137  
444 14 Dtool_l5yHwPLq 0 4 482 3117 0 14 Dtool_l5yHwPLq 449 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dynamic_friction_v
//       Access: Published
//  Description: Sets the dynamic friction coefficient along the
//               secondary (V) axis. This is used when anisotropic
//               friction is being applied. I.e. the flag
//               MF_anisotropic is set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 coef 1 3137  
445 14 Dtool_l5yHrqka 0 4 483 3117 0 14 Dtool_l5yHrqka 447 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_static_friction_v
//       Access: Published
//  Description: Sets the static friction coefficient along the
//               secondary (V) axis. This is used when anisotropic
//               friction is being applied. I.e. the flag
//               MF_anisotropic is set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 coef 1 3137  
446 14 Dtool_l5yHwP8I 0 4 484 3117 0 14 Dtool_l5yHwP8I 383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_dir_of_anisotropy
//       Access: Published
//  Description: Sets the shape space direction (unit vector) of
//               anisotropy. This is only used if the flag 
//               MF_anisotropic is set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  3 dir 1 3150  
447 14 Dtool_l5yHFELP 0 4 485 3117 0 14 Dtool_l5yHFELP 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3279  4 flag 1 2979  5 value 1 3120  
448 14 Dtool_l5yHZYa0 0 4 486 3117 0 14 Dtool_l5yHZYa0 465 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_friction_combine_mode
//       Access: Published
//  Description: Sets the friction combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 mode 1 2969  
449 14 Dtool_l5yHKlN2 0 4 487 3117 0 14 Dtool_l5yHKlN2 471 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::set_restitution_combine_mode
//       Access: Published
//  Description: Sets the restitution combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3279  4 mode 1 2969  
450 14 Dtool_l5yH0WzO 0 6 488 3137 0 14 Dtool_l5yH0WzO 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dynamic_friction
//       Access: Published
//  Description: Returns the DynamicFriction value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
451 14 Dtool_l5yHl98l 0 6 489 3137 0 14 Dtool_l5yHl98l 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_static_friction
//       Access: Published
//  Description: Returns the coefficient of static friction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
452 14 Dtool_l5yHzgnu 0 6 490 3137 0 14 Dtool_l5yHzgnu 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_restitution
//       Access: Published
//  Description: Returns the coefficient of restitution.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
453 14 Dtool_l5yHoHC3 0 6 491 3137 0 14 Dtool_l5yHoHC3 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dynamic_friction_v
//       Access: Published
//  Description: Returns the dynamic friction coefficient for the
//               V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
454 14 Dtool_l5yHboMj 0 6 492 3137 0 14 Dtool_l5yHboMj 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_static_friction_v
//       Access: Published
//  Description: Returns the static friction coefficient for the
//               V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
455 14 Dtool_l5yH_XaB 0 7 493 3157 0 14 Dtool_l5yH_XaB 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_dir_of_anisotropy
//       Access: Published
//  Description: Returns the direction of anisotropy value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
456 14 Dtool_l5yHt05z 0 6 494 3120 0 14 Dtool_l5yHt05z 258 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_flag
//       Access: Published
//  Description: Returns the value of a single flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  4 flag 1 2979  
457 14 Dtool_l5yHoKhb 0 6 495 2969 0 14 Dtool_l5yHoKhb 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_friction_combine_mode
//       Access: Published
//  Description: Returns the friction combine mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
458 14 Dtool_l5yHdx6w 0 6 496 2969 0 14 Dtool_l5yHdx6w 280 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::get_restitution_combine_mode
//       Access: Published
//  Description: Returns the restitution combine mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
459 14 Dtool_l5yHS7aB 0 4 497 3117 0 14 Dtool_l5yHS7aB 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
460 14 Dtool_l5yHoEv0 0 4 497 3117 0 14 Dtool_l5yHoEv0 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3177  3 out 1 3121  12 indent_level 1 3123  
461 14 Dtool_l5yHJE3g 0 4 497 3117 0 14 Dtool_l5yHJE3g 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  3 out 1 3121  
462 14 Dtool_l5yHdc3n 0 4 498 3117 0 14 Dtool_l5yHdc3n 222 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterial::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3279  
463 14 Dtool_l5yHrzsu 0 7 499 3125 0 14 Dtool_l5yHrzsu 68 //////////////////////////////////////////////////////////////////// 0 
464 14 Dtool_l5yHR_X_ 0 6 469 3113 0 14 Dtool_l5yHR_X_ 0 1 4 this 3 3279  
465 14 Dtool_l5yH9xgv 0 7 470 3279 1910 14 Dtool_l5yH9xgv 0 1 4 this 3 3113  
466 14 Dtool_l5yHKNZB 0 6 471 3158 0 14 Dtool_l5yHKNZB 0 1 4 this 3 3279  
467 14 Dtool_l5yHUmdF 0 7 472 3279 1910 14 Dtool_l5yHUmdF 0 1 4 this 3 3158  
468 14 Dtool_l5yHydJn 0 7 501 3283 1687 14 Dtool_l5yHydJn 718 // Filename: physxPlaneShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
469 14 Dtool_l5yHHfvv 0 4 502 3117 0 14 Dtool_l5yHHfvv 303 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPlaneShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3284  9 shapeDesc 1 3286  
470 14 Dtool_l5yHIk6F 0 4 503 3117 0 14 Dtool_l5yHIk6F 483 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShape::set_plane
//       Access: Published
//  Description: Sets the plane equation. 
//               - normal:  Normal for the plane, in the global
//                          frame. Range: direction vector  
//               - d: Distance coefficient of the plane equation.
//                    Range: (-inf,inf) 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3283  6 normal 1 3150  1 d 1 3137  
471 14 Dtool_l5yHe62_ 0 7 504 3125 0 14 Dtool_l5yHe62_ 68 //////////////////////////////////////////////////////////////////// 0 
472 14 Dtool_l5yHfhBN 0 7 506 3287 1814 14 Dtool_l5yHfhBN 732 // Filename: physxPointInPlaneJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointInPlaneJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
473 14 Dtool_l5yHqgoN 0 4 507 3117 0 14 Dtool_l5yHqgoN 310 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPointInPlaneJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3288  9 jointDesc 1 3290  
474 14 Dtool_l5yH0xyu 0 4 508 3117 0 14 Dtool_l5yH0xyu 333 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPointInPlaneJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3287  9 jointDesc 1 3291  
475 14 Dtool_l5yHffGF 0 7 509 3125 0 14 Dtool_l5yHffGF 68 //////////////////////////////////////////////////////////////////// 0 
476 14 Dtool_l5yH97Ve 0 7 511 3293 1814 14 Dtool_l5yH97Ve 730 // Filename: physxPointOnLineJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointOnLineJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
477 14 Dtool_l5yH5Mkk 0 4 512 3117 0 14 Dtool_l5yH5Mkk 309 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPointOnLineJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3294  9 jointDesc 1 3296  
478 14 Dtool_l5yHOWfk 0 4 513 3117 0 14 Dtool_l5yHOWfk 332 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPointOnLineJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3293  9 jointDesc 1 3297  
479 14 Dtool_l5yHfw1V 0 7 514 3125 0 14 Dtool_l5yHfw1V 68 //////////////////////////////////////////////////////////////////// 0 
480 14 Dtool_l5yHMLEX 0 7 516 3299 1814 14 Dtool_l5yHMLEX 726 // Filename: physxPrismaticJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPrismaticJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
481 14 Dtool_l5yH0FqU 0 4 517 3117 0 14 Dtool_l5yH0FqU 307 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPrismaticJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3300  9 jointDesc 1 3302  
482 14 Dtool_l5yHrf8F 0 4 518 3117 0 14 Dtool_l5yHrf8F 330 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPrismaticJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3299  9 jointDesc 1 3303  
483 14 Dtool_l5yHGiUk 0 7 519 3125 0 14 Dtool_l5yHGiUk 68 //////////////////////////////////////////////////////////////////// 0 
484 14 Dtool_l5yH5Y5Y 0 7 521 3305 1814 14 Dtool_l5yH5Y5Y 720 // Filename: physxPulleyJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
485 14 Dtool_l5yH4qgI 0 4 522 3117 0 14 Dtool_l5yH4qgI 304 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPulleyJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3306  9 jointDesc 1 3308  
486 14 Dtool_l5yH6p5P 0 4 523 3117 0 14 Dtool_l5yH6p5P 327 ////////////////////////////////////////////////////////////////////
//     Function : PhysxPulleyJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3305  9 jointDesc 1 3309  
487 14 Dtool_l5yH2kiU 0 4 524 3117 0 14 Dtool_l5yH2kiU 1562 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::set_motor
//       Access: Published
//  Description: Sets motor parameters for the joint. 
//
//               For a positive velTarget, the motor pulls the first
//               body towards its pulley, for a negative velTarget,
//               the motor pulls the second body towards its pulley.
//
//               velTarget - the relative velocity the motor is
//               trying to achieve. The motor will only be able to
//               reach this velocity if the maxForce is sufficiently
//               large. If the joint is moving faster than this
//               velocity, the motor will actually try to brake. If
//               you set this to infinity then the motor will keep
//               speeding up, unless there is some sort of
//               resistance on the attached bodies. 
//
//               maxForce - the maximum force the motor can exert.
//               Zero disables the motor. Default is 0, should
//               be >= 0. Setting this to a very large value if
//               velTarget is also very large may not be a good
//               idea. 
//
//               freeSpin - if this flag is set, and if the joint
//               is moving faster than velTarget, then neither
//               braking nor additional acceleration will result.
//               default: false. 
//
//               This automatically enables the motor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3305  5 motor 1 3311  
488 14 Dtool_l5yHlx1O 0 4 525 3117 0 14 Dtool_l5yHlx1O 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::set_flag
//       Access: Published
//  Description: Sets or clear a single pulley joint flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3305  4 flag 1 2982  5 value 1 3120  
489 14 Dtool_l5yH2rbd 0 6 526 3120 0 14 Dtool_l5yH2rbd 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::get_flag
//       Access: Published
//  Description: Retrieves the value of a single PulleyJointFlag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3306  4 flag 1 2982  
490 14 Dtool_l5yHH2kv 0 7 527 3313 2718 14 Dtool_l5yHH2kv 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJoint::get_motor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3306  
491 14 Dtool_l5yH0mO0 0 7 528 3125 0 14 Dtool_l5yH0mO0 68 //////////////////////////////////////////////////////////////////// 0 
492 14 Dtool_l5yHyEr5 0 7 530 3314 1814 14 Dtool_l5yHyEr5 724 // Filename: physxRevoluteJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
493 14 Dtool_l5yHtjhH 0 4 531 3117 0 14 Dtool_l5yHtjhH 306 ////////////////////////////////////////////////////////////////////
//     Function : PhysxRevoluteJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3315  9 jointDesc 1 3317  
494 14 Dtool_l5yH8mzx 0 4 532 3117 0 14 Dtool_l5yH8mzx 329 ////////////////////////////////////////////////////////////////////
//     Function : PhysxRevoluteJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3314  9 jointDesc 1 3318  
495 14 Dtool_l5yH2h_m 0 4 533 3117 0 14 Dtool_l5yH2h_m 1383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_spring
//       Access: Published
//  Description: Sets spring parameters. 
//
//               The spring is implicitly integrated so no
//               instability should result for arbitrary spring and
//               damping constants. Using these settings together
//               with a motor is not possible -- the motor will have
//               priority and the spring settings are ignored. If
//               you would like to simulate your motor's internal
//               friction, do this by altering the motor parameters
//               directly.
//
//               spring - The rotational spring acts along the hinge
//               axis and tries to force the joint angle to zero. A
//               setting of zero disables the spring. Default is 0,
//               should be >= 0.
//
//               damper - Damping coefficient; acts against the
//               hinge's angular velocity. A setting of zero
//               disables the damping. The default is 0, should
//               be >= 0.
//
//               targetValue - The angle at which the spring is
//               relaxed. In [-Pi,Pi]. Default is 0.
//
//               This automatically enables the spring
//////////////////////////////////////////////////////////////////// 2 4 this 3 3314  6 spring 1 3320  
496 14 Dtool_l5yHC7Rm 0 4 534 3117 0 14 Dtool_l5yHC7Rm 1564 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_motor
//       Access: Published
//  Description: Sets motor parameters for the joint. 
//
//               For a positive velTarget, the motor pulls the first
//               body towards its pulley, for a negative velTarget,
//               the motor pulls the second body towards its pulley.
//
//               velTarget - the relative velocity the motor is
//               trying to achieve. The motor will only be able to
//               reach this velocity if the maxForce is sufficiently
//               large. If the joint is moving faster than this
//               velocity, the motor will actually try to brake. If
//               you set this to infinity then the motor will keep
//               speeding up, unless there is some sort of
//               resistance on the attached bodies. 
//
//               maxForce - the maximum force the motor can exert.
//               Zero disables the motor. Default is 0, should
//               be >= 0. Setting this to a very large value if
//               velTarget is also very large may not be a good
//               idea. 
//
//               freeSpin - if this flag is set, and if the joint
//               is moving faster than velTarget, then neither
//               braking nor additional acceleration will result.
//               default: false. 
//
//               This automatically enables the motor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3314  5 motor 1 3311  
497 14 Dtool_l5yH9L17 0 4 535 3117 0 14 Dtool_l5yH9L17 1431 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_limits
//       Access: Published
//  Description: Sets angular joint limits. 
//
//               If either of these limits are set, any planar
//               limits in PhysxJoint are ignored. The limits are
//               angles defined the same way as the values
//               that get_angle() returns.
//
//               The following has to hold:
//
//               Pi < lowAngle < highAngle < Pi Both limits are
//               disabled by default.
//               Also sets coefficients of restitutions for the low
//               and high angular limits. These settings are only
//               used if valid limits are set using set_limits().
//               These restitution coefficients work the same way as
//               for contacts.
//
//               The coefficient of restitution determines whether a
//               collision with the joint limit is completely
//               elastic (like pool balls, restitution = 1, no
//               energy is lost in the collision), completely
//               inelastic (like putty, restitution = 0, no rebound
//               after collision) or somewhere in between. The
//               default is 0 for both.
//
//               This automatically enables the limit.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3314  3 low 1 3322  4 high 1 3322  
498 14 Dtool_l5yHPmli 0 4 536 3117 0 14 Dtool_l5yHPmli 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_flag
//       Access: Published
//  Description: Sets or clears a single RevoluteJointFlag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3314  4 flag 1 2983  5 value 1 3120  
499 14 Dtool_l5yH1n3X 0 4 537 3117 0 14 Dtool_l5yH1n3X 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::set_projection_mode
//       Access: Published
//  Description: Sets the joint projection mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3314  4 mode 1 2980  
500 14 Dtool_l5yHGOUd 0 6 538 3137 0 14 Dtool_l5yHGOUd 732 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_angle
//       Access: Published
//  Description: Retrieves the current revolute joint angle. 
//
//               The relative orientation of the bodies is stored
//               when the joint is created, or when set_axis() or
//               set_anchor() is called. This initial orientation
//               returns an angle of zero, and joint angles are
//               measured relative to this pose. The angle is in
//               the range [-180, 180], with positive angles CCW
//               around the axis, measured from body2 to body1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3315  
501 14 Dtool_l5yHLnqe 0 6 539 3137 0 14 Dtool_l5yHLnqe 411 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_velocity
//       Access: Published
//  Description: Retrieves the revolute joint angle's rate of change
//               (angular velocity). It is the angular velocity of
//               body1 minus body2 projected along the axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3315  
502 14 Dtool_l5yH9TG5 0 6 540 3120 0 14 Dtool_l5yH9TG5 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_flag
//       Access: Published
//  Description: Returns the value of a single RevoluteJointFlag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3315  4 flag 1 2983  
503 14 Dtool_l5yH135y 0 6 541 2980 0 14 Dtool_l5yH135y 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_projection_mode
//       Access: Published
//  Description: Retrieves the joints projection mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3315  
504 14 Dtool_l5yH5Mqa 0 7 542 3313 2718 14 Dtool_l5yH5Mqa 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_motor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3315  
505 14 Dtool_l5yH5iPG 0 7 543 3324 2585 14 Dtool_l5yH5iPG 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJoint::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3315  
506 14 Dtool_l5yH7tte 0 7 544 3125 0 14 Dtool_l5yH7tte 68 //////////////////////////////////////////////////////////////////// 0 
507 14 Dtool_l5yH64Ri 0 6 549 3138 0 14 Dtool_l5yH64Ri 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_num_overlaps
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3325  
508 14 Dtool_l5yHlfSS 0 7 550 3149 1687 14 Dtool_l5yHlfSS 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_first_overlap
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3327  
509 14 Dtool_l5yHbOKB 0 7 551 3149 1687 14 Dtool_l5yHbOKB 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_next_overlap
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3327  
510 14 Dtool_l5yHPFF7 0 7 552 3149 1687 14 Dtool_l5yHPFF7 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxOverlapReport::get_overlap
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3327  3 idx 1 3138  
511 14 Dtool_l5yHyqo5 0 7 555 3328 1983 14 Dtool_l5yHyqo5 710 // Filename: physxMask32.cxx
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
512 14 Dtool_l5yH6dKf 0 4 557 3117 0 14 Dtool_l5yH6dKf 291 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::set_bit
//       Access: Published
//  Description: Sets the nth bit on.
//               Index must be in the range [0, 31].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3328  3 idx 1 3138  
513 14 Dtool_l5yHJQth 0 4 558 3117 0 14 Dtool_l5yHJQth 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.
//               Index must be in the range [0, 31].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3328  3 idx 1 3138  
514 14 Dtool_l5yHx5pj 0 6 559 3120 0 14 Dtool_l5yHx5pj 347 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.
//               Index must be in the range [0, 31].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3329  3 idx 1 3138  
515 14 Dtool_l5yHoFRT 0 4 560 3117 0 14 Dtool_l5yHoFRT 287 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::output
//       Access: Published
//  Description: Writes the PhysxMask out as a list of ones and
//               zeros.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3329  3 out 1 3121  
516 14 Dtool_l5yHXVrB 0 7 561 3328 1983 14 Dtool_l5yHXVrB 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::all_on
//       Access: Published
//  Description: Returns a PhysxMask whose bits are all on.
//////////////////////////////////////////////////////////////////// 0 
517 14 Dtool_l5yH2NkJ 0 7 562 3328 1983 14 Dtool_l5yH2NkJ 261 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMask::all_off
//       Access: Published
//  Description: Returns a PhysxMask whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
518 14 Dtool_l5yHoEmZ 0 7 564 3181 1991 14 Dtool_l5yHoEmZ 720 // Filename: physxGroupsMask.cxx
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
519 14 Dtool_l5yHhoCe 0 7 564 3181 1991 14 Dtool_l5yHhoCe 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 mask 1 3331  
520 14 Dtool_l5yHbXSv 0 4 566 3117 0 14 Dtool_l5yHbXSv 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bit
//       Access: Published
//  Description: Sets the nth bit on.
//               Index must be in the range [0, 127].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  3 idx 1 3138  
521 14 Dtool_l5yHWHAR 0 4 567 3117 0 14 Dtool_l5yHWHAR 301 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.
//               Index must be in the range [0, 127].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  3 idx 1 3138  
522 14 Dtool_l5yHdX_P 0 6 568 3120 0 14 Dtool_l5yHdX_P 354 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.
//               Index must be in the range [0, 127].
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  3 idx 1 3138  
523 14 Dtool_l5yHOeX2 0 4 569 3117 0 14 Dtool_l5yHOeX2 299 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::output
//       Access: Published
//  Description: Writes the PhysxGroupsMask out as a list of ones and
//               zeros.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  3 out 1 3121  
524 14 Dtool_l5yHoExO 0 7 570 3181 1991 14 Dtool_l5yHoExO 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::all_on
//       Access: Published
//  Description: Returns a PhysxGroupsMask whose bits are all on.
//////////////////////////////////////////////////////////////////// 0 
525 14 Dtool_l5yHiqTI 0 7 571 3181 1991 14 Dtool_l5yHiqTI 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::all_off
//       Access: Published
//  Description: Returns a PhysxGroupsMask whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
526 14 Dtool_l5yHfJjy 0 6 572 3138 0 14 Dtool_l5yHfJjy 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits0
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
527 14 Dtool_l5yH_1Kz 0 6 573 3138 0 14 Dtool_l5yH_1Kz 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits1
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
528 14 Dtool_l5yHf2xz 0 6 574 3138 0 14 Dtool_l5yHf2xz 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits2
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
529 14 Dtool_l5yH_yY0 0 6 575 3138 0 14 Dtool_l5yH_yY0 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::get_bits3
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
530 14 Dtool_l5yHe85t 0 4 576 3117 0 14 Dtool_l5yHe85t 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits0
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  4 bits 1 3138  
531 14 Dtool_l5yH_5gu 0 4 577 3117 0 14 Dtool_l5yH_5gu 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits1
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  4 bits 1 3138  
532 14 Dtool_l5yHelHv 0 4 578 3117 0 14 Dtool_l5yHelHv 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits2
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  4 bits 1 3138  
533 14 Dtool_l5yH_iuv 0 4 579 3117 0 14 Dtool_l5yH_iuv 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxGroupsMask::set_bits3
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3181  4 bits 1 3138  
534 14 Dtool_l5yHfk0H 0 7 585 3143 2011 14 Dtool_l5yHfk0H 708 // Filename: physxScene.I
// Created by:  enn0x (14Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
535 14 Dtool_l5yHqSUw 0 4 587 3117 0 14 Dtool_l5yHqSUw 633 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::simulate
//       Access: Published
//  Description: Advances the simulation by an elapsedTime time.
//               The elapsed time has to be in the range (0, inf).
//
//               It is not allowed to modify the physics scene in
//               between the simulate(dt) and the fetch_results
//               calls!  But it is allowed to read from the scene
//               and do additional computations, e. g. AI, in
//               between these calls.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  2 dt 1 3137  
536 14 Dtool_l5yH_bif 0 4 588 3117 0 14 Dtool_l5yH_bif 661 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::fetch_results
//       Access: Published
//  Description: Waits until the simulation has finished, and then
//               updates the scene graph with with simulation
//               results.
//
//               It is not allowed to modify the physics scene in
//               between the simulate(dt) and the fetch_results
//               calls!  But it is allowed to read from the scene
//               and do additional computations, e. g. AI, in
//               between these calls.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
537 14 Dtool_l5yHGoIJ 0 4 589 3117 0 14 Dtool_l5yHGoIJ 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_variable
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
538 14 Dtool_l5yHLjcd 0 4 590 3117 0 14 Dtool_l5yHLjcd 988 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_fixed
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
//               The elapsed time (parameter "dt" in simulate()) is
//               internally subdivided into up to maxIter substeps
//               no larger than maxTimestep. If the elapsed time is
//               not a multiple of maxTimestep then any remaining
//               time is accumulated to be added onto the elapsed
//               time for the next time step. If more sub steps than
//               maxIter are needed to advance the simulation by
//               elapsed time, then the remaining time is also
//               accumulated for the next call to simulate().
//
//               This timing method is strongly preferred for
//               stable, reproducible simulation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3143  11 maxTimestep 1 3137  7 maxIter 1 3138  
539 14 Dtool_l5yHdd_7 0 4 590 3117 0 14 Dtool_l5yHdd_7 988 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_fixed
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
//               The elapsed time (parameter "dt" in simulate()) is
//               internally subdivided into up to maxIter substeps
//               no larger than maxTimestep. If the elapsed time is
//               not a multiple of maxTimestep then any remaining
//               time is accumulated to be added onto the elapsed
//               time for the next time step. If more sub steps than
//               maxIter are needed to advance the simulation by
//               elapsed time, then the remaining time is also
//               accumulated for the next call to simulate().
//
//               This timing method is strongly preferred for
//               stable, reproducible simulation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  11 maxTimestep 1 3137  
540 14 Dtool_l5yH5JpZ 0 4 590 3117 0 14 Dtool_l5yH5JpZ 988 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_timing_fixed
//       Access: Published
//  Description: Sets simulation timing parameters used in simulate.
//               The elapsed time (parameter "dt" in simulate()) is
//               internally subdivided into up to maxIter substeps
//               no larger than maxTimestep. If the elapsed time is
//               not a multiple of maxTimestep then any remaining
//               time is accumulated to be added onto the elapsed
//               time for the next time step. If more sub steps than
//               maxIter are needed to advance the simulation by
//               elapsed time, then the remaining time is also
//               accumulated for the next call to simulate().
//
//               This timing method is strongly preferred for
//               stable, reproducible simulation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
541 14 Dtool_l5yHAoN6 0 7 591 3253 0 14 Dtool_l5yHAoN6 741 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_debug_node
//       Access: Published
//  Description: Retrieves the debug geom node for this scene. The
//               debug geom node is used to visualize information
//               about the physical scene which can be useful for
//               debugging an application.
//
//               The debug geom node geometry is generated in global
//               coordinates. In order to see correct information
//               it is important not to dislocate the debug node.
//               Reparent it to render and leave position at
//               (0,0,0).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
542 14 Dtool_l5yHDe6g 0 4 592 3117 0 14 Dtool_l5yHDe6g 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_contact_reporting
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  7 enabled 1 3120  
543 14 Dtool_l5yHO4tU 0 6 593 3120 0 14 Dtool_l5yHO4tU 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_contact_reporting_enabled
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
544 14 Dtool_l5yH2kUG 0 4 594 3117 0 14 Dtool_l5yH2kUG 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_trigger_reporting
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  7 enabled 1 3120  
545 14 Dtool_l5yHV__q 0 6 595 3120 0 14 Dtool_l5yHV__q 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_trigger_reporting_enabled
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
546 14 Dtool_l5yHt_Z6 0 4 596 3117 0 14 Dtool_l5yHt_Z6 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::enable_controller_reporting
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  7 enabled 1 3120  
547 14 Dtool_l5yHItM3 0 6 597 3120 0 14 Dtool_l5yHItM3 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_controller_reporting_enabled
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
548 14 Dtool_l5yHrsHD 0 4 598 3117 0 14 Dtool_l5yHrsHD 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_gravity
//       Access: Published
//  Description: Sets a constant gravity for the entire scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  7 gravity 1 3150  
549 14 Dtool_l5yHO10D 0 7 599 3157 0 14 Dtool_l5yHO10D 261 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_gravity
//       Access: Published
//  Description: Retrieves the current gravity setting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
550 14 Dtool_l5yHSUqI 0 7 600 3335 2803 14 Dtool_l5yHSUqI 221 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_stats2
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
551 14 Dtool_l5yHANOd 0 6 601 3120 0 14 Dtool_l5yHANOd 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_flag
//       Access: Published
//  Description: Return the specified scene flag flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  4 flag 1 2984  
552 14 Dtool_l5yH_GaA 0 6 602 3120 0 14 Dtool_l5yH_GaA 363 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::is_hardware_scene
//       Access: Published
//  Description: Returns TRUE if the the scene is simulated in
//               hardware. FALSE if the scene is simulated in
//               software.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
553 14 Dtool_l5yHwRQn 0 6 603 3138 0 14 Dtool_l5yHwRQn 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_actors
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
554 14 Dtool_l5yH1Qrq 0 7 604 3126 1514 14 Dtool_l5yH1Qrq 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_actor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3130  
555 14 Dtool_l5yHccsz 0 7 605 3126 1514 14 Dtool_l5yHccsz 221 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
556 14 Dtool_l5yHCGZk 0 6 606 3138 0 14 Dtool_l5yHCGZk 366 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_joints
//       Access: Published
//  Description: Returns the number of joints in the scene
//               (excluding "dead" joints). Note that this includes
//               compartments.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
557 14 Dtool_l5yHZUI7 0 7 607 3236 1814 14 Dtool_l5yHZUI7 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_joint
//       Access: Published
//  Description: Creates a joint in this scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3336  
558 14 Dtool_l5yHl73F 0 7 608 3236 1814 14 Dtool_l5yHl73F 308 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_joint
//       Access: Published
//  Description: Retrieve the n-th joint from the array of all the
//               joints in the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
559 14 Dtool_l5yHQC4Q 0 6 609 3138 0 14 Dtool_l5yHQC4Q 627 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_materials
//       Access: Published
//  Description: Return the number of materials in the scene. 
//
//               Note that the returned value is not related to
//               material indices. Those may not be allocated
//               continuously, and its values may be higher than
//               get_num_materials(). This will also include the
//               default material which exists without having to
//               be created.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
560 14 Dtool_l5yHzsQ8 0 6 610 3138 0 14 Dtool_l5yHzsQ8 440 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_hightest_material_index
//       Access: Published
//  Description: Returns current highest valid material index.
//
//               Note that not all indices below this are valid if
//               some of them belong to meshes that have beed
//               freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
561 14 Dtool_l5yHL08Y 0 7 611 3279 1910 14 Dtool_l5yHL08Y 320 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_material
//       Access: Published
//  Description: Creates a new PhysxMaterial using the default
//               settings of PhysxMaterialDesc.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
562 14 Dtool_l5yHgkgT 0 7 611 3279 1910 14 Dtool_l5yHgkgT 576 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_material
//       Access: Published
//  Description: Creates a new PhysxMaterial.
//
//               The material library consists of an array of
//               material objects. Each material has a well defined
//               index that can be used to refer to it. If an object
//               references an undefined material, the default
//               material with index 0 is used instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3282  
563 14 Dtool_l5yHSCH5 0 7 612 3279 1910 14 Dtool_l5yHSCH5 399 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_material
//       Access: Published
//  Description: Retrieves the n-th material from the array of
//               materials. See also get_material_from_index,
//               which retrieves a material by it's material index.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
564 14 Dtool_l5yHojqK 0 7 613 3279 1910 14 Dtool_l5yHojqK 699 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_material_from_index
//       Access: Published
//  Description: Retrieves the material with the given material
//               index. 
//
//               There is always at least one material in the Scene,
//               the default material (index 0). If the specified
//               material index is out of range (larger than
//               get_hightest_material_index) or belongs to a
//               material that has been released, then the default
//               material is returned, but no error is reported.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
565 14 Dtool_l5yHsqCE 0 6 614 3138 0 14 Dtool_l5yHsqCE 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_controllers
//       Access: Published
//  Description: Return the number of controllers in the scene. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
566 14 Dtool_l5yHTv0G 0 7 615 3159 1630 14 Dtool_l5yHTv0G 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_controller
//       Access: Published
//  Description: Creates a new character controller.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  14 controllerDesc 1 3337  
567 14 Dtool_l5yHbWyD 0 7 616 3159 1630 14 Dtool_l5yHbWyD 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_controller
//       Access: Published
//  Description: Retrieves the n-th controller within the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
568 14 Dtool_l5yH__oX 0 6 617 3138 0 14 Dtool_l5yH__oX 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_force_fields
//       Access: Published
//  Description: Gets the number of force fields in the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
569 14 Dtool_l5yH_hgf 0 7 618 3168 0 14 Dtool_l5yH_hgf 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_force_field
//       Access: Published
//  Description: Creates a force field in this scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3338  
570 14 Dtool_l5yHASsO 0 7 619 3168 0 14 Dtool_l5yHASsO 325 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_force_field
//       Access: Published
//  Description: Returns the n-th force field from the array of
//               all the force fields in the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
571 14 Dtool_l5yHtlNS 0 6 620 3138 0 14 Dtool_l5yHtlNS 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_force_field_shape_groups
//       Access: Published
//  Description: Gets the number of force field shape groups in
//               the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
572 14 Dtool_l5yHd5S6 0 7 621 3169 1886 14 Dtool_l5yHd5S6 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_force_field_shape_group
//       Access: Published
//  Description: Creates a new force field shape group in this
//               scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3270  
573 14 Dtool_l5yHhTYV 0 7 622 3169 1886 14 Dtool_l5yHhTYV 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_force_field_shape_group
//       Access: Published
//  Description: Returns the n-th force field shape group in this
//               scene
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
574 14 Dtool_l5yHsXXr 0 6 623 3138 0 14 Dtool_l5yHsXXr 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_cloths
//       Access: Published
//  Description: Gets the number of cloths in the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
575 14 Dtool_l5yHllQb 0 7 624 3209 1718 14 Dtool_l5yHllQb 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_cloth
//       Access: Published
//  Description: Creates a cloth in this scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3339  
576 14 Dtool_l5yHmUa1 0 7 625 3209 1718 14 Dtool_l5yHmUa1 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_cloth
//       Access: Published
//  Description: Returns the n-th cloth from the array of
//               all the cloths in the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
577 14 Dtool_l5yHcfNg 0 6 626 3138 0 14 Dtool_l5yHcfNg 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_soft_bodies
//       Access: Published
//  Description: Gets the number of soft bodies in the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
578 14 Dtool_l5yHeiHF 0 7 627 3341 2093 14 Dtool_l5yHeiHF 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_soft_body
//       Access: Published
//  Description: Creates a soft body in this scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3340  
579 14 Dtool_l5yHyFTb 0 7 628 3341 2093 14 Dtool_l5yHyFTb 320 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_soft_body
//       Access: Published
//  Description: Returns the n-th soft body from the array of
//               all the soft bodies in the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
580 14 Dtool_l5yHqr_n 0 6 629 3138 0 14 Dtool_l5yHqr_n 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_num_vehicles
//       Access: Published
//  Description: Returns the number of vehicles in the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
581 14 Dtool_l5yH0pLa 0 7 630 3343 0 14 Dtool_l5yH0pLa 258 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::create_vehicle
//       Access: Published
//  Description: Creates a vehicle in this scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 desc 1 3342  
582 14 Dtool_l5yHo4b_ 0 7 631 3343 0 14 Dtool_l5yHo4b_ 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_vehicle
//       Access: Published
//  Description: Returns the n-th vehicle from the array of all
//               the vehicles in the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 idx 1 3138  
583 14 Dtool_l5yHxHUQ 0 6 632 3120 0 14 Dtool_l5yHxHUQ 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_shape
//       Access: Published
//  Description: Returns true if any shape is intersected by the
//               ray.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
584 14 Dtool_l5yHrbqp 0 6 632 3120 0 14 Dtool_l5yHrbqp 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_shape
//       Access: Published
//  Description: Returns true if any shape is intersected by the
//               ray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
585 14 Dtool_l5yHz0_F 0 6 632 3120 0 14 Dtool_l5yHz0_F 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_shape
//       Access: Published
//  Description: Returns true if any shape is intersected by the
//               ray.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
586 14 Dtool_l5yHSY_c 0 6 632 3120 0 14 Dtool_l5yHSY_c 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_shape
//       Access: Published
//  Description: Returns true if any shape is intersected by the
//               ray.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
587 14 Dtool_l5yHyFPX 0 7 633 3193 2771 14 Dtool_l5yHyFPX 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  12 smoothNormal 1 3120  
588 14 Dtool_l5yHZbsD 0 7 633 3193 2771 14 Dtool_l5yHZbsD 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
589 14 Dtool_l5yH9BW5 0 7 633 3193 2771 14 Dtool_l5yH9BW5 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
590 14 Dtool_l5yH6wKb 0 7 633 3193 2771 14 Dtool_l5yH6wKb 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
591 14 Dtool_l5yHfUqM 0 7 633 3193 2771 14 Dtool_l5yHfUqM 397 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_shape
//       Access: Published
//  Description: Returns the first shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
592 14 Dtool_l5yHfgkr 0 7 634 3344 2783 14 Dtool_l5yHfgkr 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  12 smoothNormal 1 3120  
593 14 Dtool_l5yHiwwG 0 7 634 3344 2783 14 Dtool_l5yHiwwG 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
594 14 Dtool_l5yHLZUw 0 7 634 3344 2783 14 Dtool_l5yHLZUw 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
595 14 Dtool_l5yHe065 0 7 634 3344 2783 14 Dtool_l5yHe065 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
596 14 Dtool_l5yHv2yW 0 7 634 3344 2783 14 Dtool_l5yHv2yW 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_shapes
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               hit by the ray.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
597 14 Dtool_l5yHN1tE 0 6 635 3120 0 14 Dtool_l5yHN1tE 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_bounds
//       Access: Published
//  Description: Returns true if any axis aligned bounding box
//               enclosing a shape is intersected by the ray.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
598 14 Dtool_l5yHMORu 0 6 635 3120 0 14 Dtool_l5yHMORu 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_bounds
//       Access: Published
//  Description: Returns true if any axis aligned bounding box
//               enclosing a shape is intersected by the ray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
599 14 Dtool_l5yHzW43 0 6 635 3120 0 14 Dtool_l5yHzW43 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_bounds
//       Access: Published
//  Description: Returns true if any axis aligned bounding box
//               enclosing a shape is intersected by the ray.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
600 14 Dtool_l5yHydwU 0 6 635 3120 0 14 Dtool_l5yHydwU 337 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_any_bounds
//       Access: Published
//  Description: Returns true if any axis aligned bounding box
//               enclosing a shape is intersected by the ray.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
601 14 Dtool_l5yH_yPp 0 7 636 3193 2771 14 Dtool_l5yH_yPp 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  12 smoothNormal 1 3120  
602 14 Dtool_l5yHDg82 0 7 636 3193 2771 14 Dtool_l5yHDg82 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
603 14 Dtool_l5yHVNlp 0 7 636 3193 2771 14 Dtool_l5yHVNlp 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
604 14 Dtool_l5yHa7Oi 0 7 636 3193 2771 14 Dtool_l5yHa7Oi 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
605 14 Dtool_l5yHwpHQ 0 7 636 3193 2771 14 Dtool_l5yHwpHQ 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_closest_bounds
//       Access: Published
//  Description: Returns the first axis aligned bounding box
//               enclosing a shape that is hit along the ray.
//               If not shape is hit then an empty raycast hit
//               is returned (is_empty() == true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
606 14 Dtool_l5yHyeU4 0 7 637 3344 2783 14 Dtool_l5yHyeU4 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  12 smoothNormal 1 3120  
607 14 Dtool_l5yHNCfT 0 7 637 3344 2783 14 Dtool_l5yHNCfT 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  6 groups 1 3181  
608 14 Dtool_l5yHM5E9 0 7 637 3344 2783 14 Dtool_l5yHM5E9 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  4 mask 1 3328  
609 14 Dtool_l5yH0HqG 0 7 637 3344 2783 14 Dtool_l5yH0HqG 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 ray 1 3191  10 shapesType 1 2987  
610 14 Dtool_l5yHysij 0 7 637 3344 2783 14 Dtool_l5yHysij 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::raycast_all_bounds
//       Access: Published
//  Description: Returns a PhysxRaycastReport object which can be
//               used to iterate over all shapes that have been
//               enclosed by axis aligned bounding boxes hit by
//               the ray.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 ray 1 3191  
611 14 Dtool_l5yHIW47 0 7 638 3327 1981 14 Dtool_l5yHIW47 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_sphere_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space sphere. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  6 center 1 3131  6 radius 1 3137  10 shapesType 1 2987  4 mask 1 3328  17 accurateCollision 1 3120  
612 14 Dtool_l5yHDENV 0 7 638 3327 1981 14 Dtool_l5yHDENV 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_sphere_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space sphere. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  6 center 1 3131  6 radius 1 3137  10 shapesType 1 2987  4 mask 1 3328  
613 14 Dtool_l5yHJ9h7 0 7 638 3327 1981 14 Dtool_l5yHJ9h7 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_sphere_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space sphere. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  6 center 1 3131  6 radius 1 3137  10 shapesType 1 2987  
614 14 Dtool_l5yHTjuu 0 7 638 3327 1981 14 Dtool_l5yHTjuu 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_sphere_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space sphere. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  6 center 1 3131  6 radius 1 3137  
615 14 Dtool_l5yHkI3P 0 7 639 3327 1981 14 Dtool_l5yHkI3P 427 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_capsule_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space capsule. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3333  2 p0 1 3131  2 p1 1 3131  6 radius 1 3137  10 shapesType 1 2987  4 mask 1 3328  17 accurateCollision 1 3120  
616 14 Dtool_l5yHQlT5 0 7 639 3327 1981 14 Dtool_l5yHQlT5 427 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_capsule_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space capsule. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3333  2 p0 1 3131  2 p1 1 3131  6 radius 1 3137  10 shapesType 1 2987  4 mask 1 3328  
617 14 Dtool_l5yHkA1c 0 7 639 3327 1981 14 Dtool_l5yHkA1c 427 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_capsule_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space capsule. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3333  2 p0 1 3131  2 p1 1 3131  6 radius 1 3137  10 shapesType 1 2987  
618 14 Dtool_l5yHC6ss 0 7 639 3327 1981 14 Dtool_l5yHC6ss 427 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::overlap_capsule_shapes
//       Access: Published
//  Description: Returns the set of shapes overlapped by the
//               world-space capsule. 
//               You can test against static and/or dynamic objects
//               by adjusting 'shapeType'.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3333  2 p0 1 3131  2 p1 1 3131  6 radius 1 3137  
619 14 Dtool_l5yHu0hP 0 4 640 3117 0 14 Dtool_l5yHu0hP 756 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_actor_pair_flag
//       Access: Published
//  Description: Sets the pair flags for the given pair of actors. 
//
//               Calling this on an actor that has no shape(s) has
//               no effect. The two actor references must not
//               reference the same actor.
//
//               It is important to note that the engine stores
//               pair flags per shape, even for actor pair flags.
//               This means that shapes should be created before
//               actor pair flags are set, otherwise the pair flags
//               will be ignored.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3143  6 actorA 1 3126  6 actorB 1 3126  4 flag 1 2968  5 value 1 3120  
620 14 Dtool_l5yHtIym 0 4 641 3117 0 14 Dtool_l5yHtIym 405 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_shape_pair_flag
//       Access: Published
//  Description: Disables or enables contact generation for a pair
//               of shapes.
//
//               The two shape references must not reference the
//               same shape.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  6 shapeA 1 3149  6 shapeB 1 3149  5 value 1 3120  
621 14 Dtool_l5yHPumk 0 4 642 3117 0 14 Dtool_l5yHPumk 1229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_actor_group_pair_flag
//       Access: Published
//  Description: With this method one can set contact reporting
//               flags between actors belonging to a pair of groups. 
//
//               It is possible to assign each actor to a group
//               using PhysxActor::set_group(). This is a different
//               set of groups from the shape groups despite the
//               similar name. Here up to 0xffff different groups
//               are permitted, With this method one can set
//               contact reporting flags between actors belonging
//               to a pair of groups.
//
//               The following flags are permitted:
//               - CPF_start_touch
//               - CPF_end_touch
//               - CPF_touch
//               - CPF_start_touch_treshold
//               - CPF_end_touch_treshold
//               - CPF_touch_treshold
//
//               Note that finer grain control of pairwise flags is
//               possible using the function
//               PhysxScene::set_actor_pair_flags().
//////////////////////////////////////////////////////////////////// 5 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  4 flag 1 2968  5 value 1 3120  
622 14 Dtool_l5yHjh_A 0 4 643 3117 0 14 Dtool_l5yHjh_A 792 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_group_collision_flag
//       Access: Published
//  Description: Specifies if collision should be performed by a
//               pair of shape groups. 
//
//               It is possible to assign each shape to a collision
//               groups using PhysxShape::set_group(). With this
//               method one can set whether collisions should be
//               detected between shapes belonging to a given pair
//               of groups. Initially all pairs are enabled.
//
//               Fluids can be assigned to collision groups as well.
//
//               Collision groups are integers between 0 and 31.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  6 enable 1 3120  
623 14 Dtool_l5yHzXdU 0 4 644 3117 0 14 Dtool_l5yHzXdU 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_ops
//       Access: Published
//  Description: Setups filtering operations.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  3 op0 1 2974  3 op1 1 2974  3 op2 1 2974  
624 14 Dtool_l5yHiLux 0 4 645 3117 0 14 Dtool_l5yHiLux 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_bool
//       Access: Published
//  Description: Setups filtering's boolean value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 flag 1 3120  
625 14 Dtool_l5yHcpbr 0 4 646 3117 0 14 Dtool_l5yHcpbr 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_constant0
//       Access: Published
//  Description: Setups filtering's K0 value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 mask 1 3179  
626 14 Dtool_l5yHdJeS 0 4 647 3117 0 14 Dtool_l5yHdJeS 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_filter_constant1
//       Access: Published
//  Description: Setups filtering's K1 value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3143  4 mask 1 3179  
627 14 Dtool_l5yH9_3x 0 4 648 3117 0 14 Dtool_l5yH9_3x 2752 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::set_dominance_group_pair
//       Access: Published
//  Description: Specifies the dominance behavior of constraints 
//               between two actors with two certain dominance
//               groups. 
//
//               It is possible to assign each actor to a dominance
//               groups using PhysxActor::set_dominance_group().
//
//               With dominance groups one can have all constraints
//               (contacts and joints) created between actors act in
//               one direction only. This is useful if you want to
//               make sure that the movement of the rider of a
//               vehicle or the pony tail of a character doesn't
//               influence the object it is attached to, while
//               keeping the motion of both inherently physical.
//
//               Whenever a constraint (i.e. joint or contact)
//               between two actors (a0, a1) needs to be solved, the
//               groups (g0, g1) of both actors are retrieved. Then
//               the constraint dominance setting for this group
//               pair is retrieved.
//
//               In the constraint, PhysxConstraintDominance::get_0()
//               becomes the dominance setting for a0, and
//               PhysxConstraintDominance::get_1() becomes the
//               dominance setting for a1. A dominance setting of
//               1.0f, the default, will permit the actor to be
//               pushed or pulled by the other actor. A dominance
//               setting of 0.0f will however prevent the actor to
//               be pushed or pulled by the other actor. Thus, a
//               PhysxConstraintDominance of (1.0f, 0.0f) makes the
//               interaction one-way.
//
//               The dominance matrix is initialised by default such
//               that:
//               - if g1 == g2, then (1.0f, 1.0f) is returned
//               - if g1 < g2, then (0.0f, 1.0f) is returned
//               - if g1 > g2, then (1.0f, 0.0f) is returned
//
//               In other words, actors in higher groups can be
//               pushed around by actors in lower groups by default.
//
//               These settings should cover most applications, and
//               in fact not overriding these settings may likely
//               result in higher performance.
//
//               Dominance settings are currently specified as
//               floats 0.0f or 1.0f because in the future PhysX may
//               permit arbitrary fractional settings to express
//               'partly-one-way' interactions.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  9 dominance 1 3345  
628 14 Dtool_l5yHTARb 0 6 649 3120 0 14 Dtool_l5yHTARb 399 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor_pair_flag
//       Access: Published
//  Description: Retrieves a single flag for the given pair of
//               actors.
// 
//               The two actor references must not reference the
//               same actor.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  6 actorA 1 3126  6 actorB 1 3126  4 flag 1 2968  
629 14 Dtool_l5yHLkxa 0 6 650 3120 0 14 Dtool_l5yHLkxa 482 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_shape_pair_flag
//       Access: Published
//  Description: Returns /true/ if contact generation between a pair
//               of shapes is enabled, and /false/ if contact
//               generation is disables.
//
//               The two shape references must not reference the
//               same shape.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3143  6 shapeA 1 3149  6 shapeB 1 3149  
630 14 Dtool_l5yH4JO_ 0 6 651 3120 0 14 Dtool_l5yH4JO_ 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_actor_group_pair_flag
//       Access: Published
//  Description: Retrieves a single flag set with
//               PhysxScene::set_actor_group_pair_flag()
//////////////////////////////////////////////////////////////////// 4 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  4 flag 1 2968  
631 14 Dtool_l5yH2ZOS 0 6 652 3120 0 14 Dtool_l5yH2ZOS 390 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_group_collision_flag
//       Access: Published
//  Description: Determines if collision detection is performed
//               between a pair of groups. Collision groups are
//               integers between 0 and 31.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  
632 14 Dtool_l5yH1Iv5 0 6 653 3120 0 14 Dtool_l5yH1Iv5 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_bool
//       Access: Published
//  Description: Retrieves filtering's boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
633 14 Dtool_l5yH_rmv 0 7 654 3181 1991 14 Dtool_l5yH_rmv 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_constant0
//       Access: Published
//  Description: Gets filtering constant K0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
634 14 Dtool_l5yH_LpW 0 7 655 3181 1991 14 Dtool_l5yH_LpW 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_constant1
//       Access: Published
//  Description: Gets filtering constant K1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
635 14 Dtool_l5yHsyXQ 0 6 656 2974 0 14 Dtool_l5yHsyXQ 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op0
//       Access: Published
//  Description: Retrieves the op0 filtering operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
636 14 Dtool_l5yHM28Q 0 6 657 2974 0 14 Dtool_l5yHM28Q 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op1
//       Access: Published
//  Description: Retrieves the op1 filtering operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
637 14 Dtool_l5yHsLkR 0 6 658 2974 0 14 Dtool_l5yHsLkR 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_filter_op2
//       Access: Published
//  Description: Retrieves the op2 filtering operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
638 14 Dtool_l5yHjfKI 0 7 659 3345 2458 14 Dtool_l5yHjfKI 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::get_dominance_group_pair
//       Access: Published
//  Description: Samples the dominance matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3143  2 g1 1 3138  2 g2 1 3138  
639 14 Dtool_l5yHAhSw 0 4 660 3117 0 14 Dtool_l5yHAhSw 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3143  
640 14 Dtool_l5yHTmLM 0 4 661 3117 0 14 Dtool_l5yHTmLM 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3333  
641 14 Dtool_l5yH37b5 0 4 661 3117 0 14 Dtool_l5yH37b5 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3333  3 out 1 3121  12 indent_level 1 3123  
642 14 Dtool_l5yHRdkF 0 4 661 3117 0 14 Dtool_l5yHRdkF 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxScene::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3333  3 out 1 3121  
643 14 Dtool_l5yHse0k 0 7 662 3125 0 14 Dtool_l5yHse0k 68 //////////////////////////////////////////////////////////////////// 0 
644 14 Dtool_l5yHtwLI 0 6 581 3113 0 14 Dtool_l5yHtwLI 0 1 4 this 3 3143  
645 14 Dtool_l5yHi5fM 0 7 582 3143 2011 14 Dtool_l5yHi5fM 0 1 4 this 3 3113  
646 14 Dtool_l5yHZpXa 0 6 583 3158 0 14 Dtool_l5yHZpXa 0 1 4 this 3 3143  
647 14 Dtool_l5yHysWY 0 7 584 3143 2011 14 Dtool_l5yHysWY 0 1 4 this 3 3158  
648 14 Dtool_l5yHkXgI 0 7 668 3341 2093 14 Dtool_l5yHkXgI 714 // Filename: physxSoftBody.I
// Created by:  enn0x (13Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
649 14 Dtool_l5yHIWCQ 0 7 670 3143 2011 14 Dtool_l5yHIWCQ 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_scene
//       Access: Published
//  Description: Returns the scene which this soft body belongs to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
650 14 Dtool_l5yHSrA5 0 7 671 3348 0 14 Dtool_l5yHSrA5 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_soft_body_node
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
651 14 Dtool_l5yHJenA 0 7 672 3348 0 14 Dtool_l5yHJenA 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::create_soft_body_node
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  4 name 1 3114  
652 14 Dtool_l5yHNqmI 0 4 673 3117 0 14 Dtool_l5yHNqmI 400 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_name
//       Access: Published
//  Description: Sets a name string for the object that can be
//               retrieved with get_name(). 
//               This is for debugging and is not used by the
//               engine.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  4 name 1 3114  
653 14 Dtool_l5yH84Dv 0 4 674 3117 0 14 Dtool_l5yH84Dv 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_flag
//       Access: Published
//  Description: Sets the value of a single flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3341  4 flag 1 2986  5 value 1 3120  
654 14 Dtool_l5yHahYY 0 4 675 3117 0 14 Dtool_l5yHahYY 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_groups_mask
//       Access: Published
//  Description: Sets 128-bit mask used for collision filtering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  4 mask 1 3179  
655 14 Dtool_l5yH0GIM 0 4 676 3117 0 14 Dtool_l5yH0GIM 336 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_group
//       Access: Published
//  Description: Sets which collision group this soft body is part
//               of. Collision group must be between 0 and 31.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  5 group 1 3138  
656 14 Dtool_l5yHE6n9 0 4 677 3117 0 14 Dtool_l5yHE6n9 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_solver_iterations
//       Access: Published
//  Description: Sets the soft body solver iterations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  10 iterations 1 3138  
657 14 Dtool_l5yHmB_L 0 4 678 3117 0 14 Dtool_l5yHmB_L 306 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_particle_radius
//       Access: Published
//  Description: Sets the soft body particle radius (must be 
//               positive).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  6 radius 1 3137  
658 14 Dtool_l5yHHlkr 0 4 679 3117 0 14 Dtool_l5yHHlkr 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_self_collision_thickness
//       Access: Published
//  Description: Sets the soft body self collision thickness (must
//               be positive).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  9 thickness 1 3137  
659 14 Dtool_l5yHbd_i 0 4 680 3117 0 14 Dtool_l5yHbd_i 298 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_hard_stretch_limitation_factor
//       Access: Published
//  Description: Sets the soft body hard stretch elongation limit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  6 factor 1 3137  
660 14 Dtool_l5yHu9af 0 4 681 3117 0 14 Dtool_l5yHu9af 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_volume_stiffness
//       Access: Published
//  Description: Sets the soft body volume stiffness in the range
//               from 0 to 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  9 stiffness 1 3137  
661 14 Dtool_l5yHnB0L 0 4 682 3117 0 14 Dtool_l5yHnB0L 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_stretching_stiffness
//       Access: Published
//  Description: Sets the soft body stretching stiffness in the
//               range from 0 to 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  9 stiffness 1 3137  
662 14 Dtool_l5yHKI_e 0 4 683 3117 0 14 Dtool_l5yHKI_e 309 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_damping_coefficient
//       Access: Published
//  Description: Sets the damping coefficient in the range from 0
//               to 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  4 coef 1 3137  
663 14 Dtool_l5yHFlJ6 0 4 684 3117 0 14 Dtool_l5yHFlJ6 309 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_friction
//       Access: Published
//  Description: Sets the soft body friction coefficient in the
//               range from 0 to 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  8 friction 1 3137  
664 14 Dtool_l5yHH_4D 0 4 685 3117 0 14 Dtool_l5yHH_4D 304 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_tear_factor
//       Access: Published
//  Description: Sets the soft body tear factor (must be larger
//               than one).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  6 factor 1 3137  
665 14 Dtool_l5yHN7H_ 0 4 686 3117 0 14 Dtool_l5yHN7H_ 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_attachment_tear_factor
//       Access: Published
//  Description: Sets the soft body attachment tear factor (must be
//               larger than one).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  6 factor 1 3137  
666 14 Dtool_l5yHJL9_ 0 6 687 3114 0 14 Dtool_l5yHJL9_ 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_name
//       Access: Published
//  Description: Retrieves the name string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
667 14 Dtool_l5yHFowT 0 6 688 3120 0 14 Dtool_l5yHFowT 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_flag
//       Access: Published
//  Description: Retrieves the value of a single flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3346  4 flag 1 2986  
668 14 Dtool_l5yH_teA 0 7 689 3181 1991 14 Dtool_l5yH_teA 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_groups_mask
//       Access: Published
//  Description: Gets the 128-bit groups mask used for collision
//               filtering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
669 14 Dtool_l5yHV6Nb 0 6 690 3138 0 14 Dtool_l5yHV6Nb 297 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_group
//       Access: Published
//  Description: Retrieves the collision group this soft body is
//               part of.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
670 14 Dtool_l5yHoSHA 0 6 691 3138 0 14 Dtool_l5yHoSHA 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_num_particles
//       Access: Published
//  Description: Gets the number of cloth particles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3341  
671 14 Dtool_l5yHAdxY 0 6 692 3138 0 14 Dtool_l5yHAdxY 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_solver_iterations
//       Access: Published
//  Description: Retrieves the soft body solver iterations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
672 14 Dtool_l5yHm4ts 0 6 693 3137 0 14 Dtool_l5yHm4ts 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_particle_radius
//       Access: Published
//  Description: Gets the soft body particle radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
673 14 Dtool_l5yHkPIM 0 6 694 3137 0 14 Dtool_l5yHkPIM 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_density
//       Access: Published
//  Description: Gets the soft body density.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
674 14 Dtool_l5yH14TE 0 6 695 3137 0 14 Dtool_l5yH14TE 599 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_relative_grid_spacing
//       Access: Published
//  Description: Gets the relative grid spacing for the broad
//               phase. The cloth is represented by a set of
//               world aligned cubical cells in broad phase. The
//               size of these cells is determined by multiplying
//               the length of the diagonal of the AABB of the
//               initial soft body size with this constant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
675 14 Dtool_l5yHgTDW 0 6 696 3137 0 14 Dtool_l5yHgTDW 287 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_self_collision_thickness
//       Access: Published
//  Description: Gets the soft body self collision thickness.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
676 14 Dtool_l5yHAIv1 0 6 697 3137 0 14 Dtool_l5yHAIv1 320 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_hard_stretch_limitation_factor
//       Access: Published
//  Description: Retrieves the soft body hard stretch elongation
//               limit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
677 14 Dtool_l5yH_p4v 0 6 698 3137 0 14 Dtool_l5yH_p4v 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_volume_stiffness
//       Access: Published
//  Description: Retrieves the soft body volume stiffness.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
678 14 Dtool_l5yHIkIP 0 6 699 3137 0 14 Dtool_l5yHIkIP 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_stretching_stiffness
//       Access: Published
//  Description: Retrieves the soft body stretching stiffness.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
679 14 Dtool_l5yHkvUz 0 6 700 3137 0 14 Dtool_l5yHkvUz 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_damping_coefficient
//       Access: Published
//  Description: Retrieves the damping coefficient.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
680 14 Dtool_l5yHK1_L 0 6 701 3137 0 14 Dtool_l5yHK1_L 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_friction
//       Access: Published
//  Description: Retrieves the soft body friction coefficient.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
681 14 Dtool_l5yHfrNr 0 6 702 3137 0 14 Dtool_l5yHfrNr 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_tear_factor
//       Access: Published
//  Description: Retrieves the soft body tear factor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
682 14 Dtool_l5yH8pNS 0 6 703 3137 0 14 Dtool_l5yH8pNS 288 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_attachment_tear_factor
//       Access: Published
//  Description: Retrieves the attachment soft body tear factor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
683 14 Dtool_l5yHfy__ 0 6 704 3120 0 14 Dtool_l5yHfy__ 733 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::is_sleeping
//       Access: Published
//  Description: Returns true if this soft body is sleeping. 
//
//               When a soft body does not move for a period of
//               time, it is no longer simulated in order to save
//               time. This state is called sleeping. However,
//               because the object automatically wakes up when it
//               is either touched by an awake object, or one of its
//               properties is changed by the user, the entire sleep
//               mechanism should be transparent to the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
684 14 Dtool_l5yHX_Rw 0 4 705 3117 0 14 Dtool_l5yHX_Rw 516 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::wake_up
//       Access: Published
//  Description: Wakes up the soft body if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxSoftBody::put_to_sleep().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  16 wakeCounterValue 1 3137  
685 14 Dtool_l5yHs0uM 0 4 705 3117 0 14 Dtool_l5yHs0uM 516 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::wake_up
//       Access: Published
//  Description: Wakes up the soft body if it is sleeping. 
//
//               The wakeCounterValue determines how long until the
//               body is put to sleep, a value of zero means that
//               the body is sleeping. wake_up(0) is equivalent to
//               PhysxSoftBody::put_to_sleep().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3341  
686 14 Dtool_l5yHuHMW 0 4 706 3117 0 14 Dtool_l5yHuHMW 568 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::put_to_sleep
//       Access: Published
//  Description: Forces the soft body to sleep. 
//
//               The soft body  will stay asleep until the next
//               call to simulate, and will not wake up until then
//               even when otherwise it would (for example a force
//               is applied to it). It can however wake up during
//               the next do_physics call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3341  
687 14 Dtool_l5yHi24Z 0 4 707 3117 0 14 Dtool_l5yHi24Z 577 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::set_sleep_linear_velocity
//       Access: Published
//  Description: Sets the linear velocity below which an soft body
//               may go to sleep. SoftBodys whose linear velocity is
//               above this threshold will not be put to sleep.
//
//               Setting the sleep angular/linear velocity only
//               makes sense when the BF_energy_sleep_test is not
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3341  9 threshold 1 3137  
688 14 Dtool_l5yH1lt8 0 6 708 3137 0 14 Dtool_l5yH1lt8 444 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::get_sleep_linear_velocity
//       Access: Published
//  Description: Returns the linear velocity below which an soft
//               body may go to sleep. Soft bodies whose linear
//               velocity is above this threshold will not be put
//               to sleep.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
689 14 Dtool_l5yHcISp 0 4 709 3117 0 14 Dtool_l5yHcISp 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3346  
690 14 Dtool_l5yHEBnc 0 4 709 3117 0 14 Dtool_l5yHEBnc 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3346  3 out 1 3121  12 indent_level 1 3123  
691 14 Dtool_l5yHitxI 0 4 709 3117 0 14 Dtool_l5yHitxI 217 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3346  3 out 1 3121  
692 14 Dtool_l5yHSVuP 0 4 710 3117 0 14 Dtool_l5yHSVuP 222 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBody::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3341  
693 14 Dtool_l5yHMLkW 0 7 711 3125 0 14 Dtool_l5yHMLkW 68 //////////////////////////////////////////////////////////////////// 0 
694 14 Dtool_l5yHU3On 0 6 664 3113 0 14 Dtool_l5yHU3On 0 1 4 this 3 3341  
695 14 Dtool_l5yHl68r 0 7 665 3341 2093 14 Dtool_l5yHl68r 0 1 4 this 3 3113  
696 14 Dtool_l5yHgpSp 0 6 666 3158 0 14 Dtool_l5yHgpSp 0 1 4 this 3 3341  
697 14 Dtool_l5yHWZWt 0 7 667 3341 2093 14 Dtool_l5yHWZWt 0 1 4 this 3 3158  
698 14 Dtool_l5yHwyG4 0 6 713 3138 0 14 Dtool_l5yHwyG4 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3349  
699 14 Dtool_l5yHcBDF 0 4 714 3117 0 14 Dtool_l5yHcBDF 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMesh::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3351  
700 14 Dtool_l5yHZ3c5 0 7 715 3125 0 14 Dtool_l5yHZ3c5 68 //////////////////////////////////////////////////////////////////// 0 
701 14 Dtool_l5yHFDvU 0 7 717 3348 0 14 Dtool_l5yHFDvU 722 // Filename: physxSoftBodyNode.I
// Created by:  enn0x (13Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3114  
702 14 Dtool_l5yHly_J 0 4 718 3117 0 14 Dtool_l5yHly_J 522 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyNode::set_from_geom
//       Access: Published
//  Description: Reads the vertices and indices from an existing
//               Geom and makes a decomposed copy of the data.
//               Then computes links between the owning soft body
//               tetrahedron mesh in order to render an updated
//               geometry every simulation frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3348  4 geom 1 3352  
703 14 Dtool_l5yHvKDM 0 7 719 3125 0 14 Dtool_l5yHvKDM 68 //////////////////////////////////////////////////////////////////// 0 
704 14 Dtool_l5yH_6uP 0 7 721 3355 1650 14 Dtool_l5yH_6uP 740 // Filename: physxSphereForceFieldShape.I
// Created by:  enn0x (15Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
705 14 Dtool_l5yHeOvH 0 4 722 3117 0 14 Dtool_l5yHeOvH 314 ////////////////////////////////////////////////////////////////////
//     Function : PhysxSphereForceFieldShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3356  9 shapeDesc 1 3358  
706 14 Dtool_l5yHmnmr 0 4 723 3117 0 14 Dtool_l5yHmnmr 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3355  6 radius 1 3137  
707 14 Dtool_l5yHYfvx 0 6 724 3137 0 14 Dtool_l5yHYfvx 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3356  
708 14 Dtool_l5yH34q_ 0 7 725 3125 0 14 Dtool_l5yH34q_ 68 //////////////////////////////////////////////////////////////////// 0 
709 14 Dtool_l5yHRJ16 0 7 727 3359 1687 14 Dtool_l5yHRJ16 720 // Filename: physxSphereShape.I
// Created by:  enn0x (16Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
710 14 Dtool_l5yHz5yJ 0 4 728 3117 0 14 Dtool_l5yHz5yJ 304 ////////////////////////////////////////////////////////////////////
//     Function : PhysxSphereShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3360  9 shapeDesc 1 3362  
711 14 Dtool_l5yHMfLM 0 4 729 3117 0 14 Dtool_l5yHMfLM 252 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3359  6 radius 1 3137  
712 14 Dtool_l5yHKJtt 0 6 730 3137 0 14 Dtool_l5yHKJtt 261 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3360  
713 14 Dtool_l5yHS8Nx 0 7 731 3125 0 14 Dtool_l5yHS8Nx 68 //////////////////////////////////////////////////////////////////// 0 
714 14 Dtool_l5yHoRtw 0 7 733 3363 1814 14 Dtool_l5yHoRtw 726 // Filename: physxSphericalJoint.I
// Created by:  enn0x (02Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
715 14 Dtool_l5yHGRBg 0 4 734 3117 0 14 Dtool_l5yHGRBg 307 ////////////////////////////////////////////////////////////////////
//     Function : PhysxSphericalJoint::save_to_desc
//       Access : Published
//  Description : Saves the state of the joint object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3364  9 jointDesc 1 3366  
716 14 Dtool_l5yHrH3P 0 4 735 3117 0 14 Dtool_l5yHrH3P 330 ////////////////////////////////////////////////////////////////////
//     Function : PhysxSphericalJoint::load_from_desc
//       Access : Published
//  Description : Loads the entire state of the joint from a 
//                descriptor with a single call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3363  9 jointDesc 1 3367  
717 14 Dtool_l5yHnfJb 0 4 736 3117 0 14 Dtool_l5yHnfJb 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::set_flag
//       Access: Published
//  Description: Sets or clears a single SphericalJointFlag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3363  4 flag 1 2988  5 value 1 3120  
718 14 Dtool_l5yHlhSp 0 4 737 3117 0 14 Dtool_l5yHlhSp 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::set_projection_mode
//       Access: Published
//  Description: Sets the joint projection mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3363  4 mode 1 2980  
719 14 Dtool_l5yHpkqM 0 6 738 3120 0 14 Dtool_l5yHpkqM 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::get_flag
//       Access: Published
//  Description: Returns the value of a single SphericalJointFlag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3364  4 flag 1 2988  
720 14 Dtool_l5yHW8BI 0 6 739 2980 0 14 Dtool_l5yHW8BI 285 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJoint::get_projection_mode
//       Access: Published
//  Description: Returns the current projection mode settings.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3364  
721 14 Dtool_l5yHqEMA 0 7 740 3125 0 14 Dtool_l5yHqEMA 68 //////////////////////////////////////////////////////////////////// 0 
722 14 Dtool_l5yHqXjI 0 6 742 3138 0 14 Dtool_l5yHqXjI 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMesh::get_reference_count
//       Access: Published
//  Description: Returns the reference count for shared meshes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3369  
723 14 Dtool_l5yHtveV 0 4 743 3117 0 14 Dtool_l5yHtveV 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMesh::release
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3371  
724 14 Dtool_l5yHtp5J 0 7 744 3125 0 14 Dtool_l5yHtp5J 68 //////////////////////////////////////////////////////////////////// 0 
725 14 Dtool_l5yH_ceO 0 7 746 3372 1687 14 Dtool_l5yH_ceO 732 // Filename: physxTriangleMeshShape.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
726 14 Dtool_l5yHL9Z2 0 4 747 3117 0 14 Dtool_l5yHL9Z2 310 ////////////////////////////////////////////////////////////////////
//     Function : PhysxTriangleMeshShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3373  9 shapeDesc 1 3375  
727 14 Dtool_l5yHvX1F 0 7 748 3125 0 14 Dtool_l5yHvX1F 68 //////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_l5yH_CuE 0 7 750 3343 0 14 Dtool_l5yH_CuE 712 // Filename: physxVehicle.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicle::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
729 14 Dtool_l5yHDlkB 0 4 751 3117 0 14 Dtool_l5yHDlkB 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicle::release
//       Access: Published
//  Description: Destroys this vehicle.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3343  
730 14 Dtool_l5yHBKw7 0 7 752 3125 0 14 Dtool_l5yHBKw7 68 //////////////////////////////////////////////////////////////////// 0 
731 14 Dtool_l5yHe907 0 7 754 3376 0 14 Dtool_l5yHe907 705 // Filename: physxWheel.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheel::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
732 14 Dtool_l5yHNoWD 0 7 755 3125 0 14 Dtool_l5yHNoWD 68 //////////////////////////////////////////////////////////////////// 0 
733 14 Dtool_l5yHCHXt 0 7 757 3377 1687 14 Dtool_l5yHCHXt 718 // Filename: physxWheelShape.I
// Created by:  enn0x (09Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
734 14 Dtool_l5yHwJRX 0 4 758 3117 0 14 Dtool_l5yHwJRX 303 ////////////////////////////////////////////////////////////////////
//     Function : PhysxWheelShape::save_to_desc
//       Access : Published
//  Description : Saves the state of the shape object to a 
//                descriptor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3378  9 shapeDesc 1 3380  
735 14 Dtool_l5yHFDjc 0 4 759 3117 0 14 Dtool_l5yHFDjc 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_radius
//       Access: Published
//  Description: Sets the sphere radius. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  6 radius 1 3137  
736 14 Dtool_l5yHtMxG 0 4 760 3117 0 14 Dtool_l5yHtMxG 378 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_suspension_travel
//       Access: Published
//  Description: Set the maximum extension distance of suspension
//               along shape's -Y axis. The minimum extension is
//               always 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  6 travel 1 3137  
737 14 Dtool_l5yHgEFK 0 4 761 3117 0 14 Dtool_l5yHgEFK 352 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_inverse_wheel_mass
//       Access: Published
//  Description: Set the inverse mass of the wheel. Determines the
//               wheel velocity that wheel torques can achieve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  7 invMass 1 3137  
738 14 Dtool_l5yH1Zd9 0 4 762 3117 0 14 Dtool_l5yH1Zd9 339 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_motor_torque
//       Access: Published
//  Description: Set the sum engine torque on the wheel axle.
//               Positive or negative depending on direction 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  6 torque 1 3137  
739 14 Dtool_l5yH1rWp 0 4 763 3117 0 14 Dtool_l5yH1rWp 328 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_brake_torque
//       Access: Published
//  Description: Must be nonnegative. Very large values should lock
//               wheel but should be stable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  6 torque 1 3137  
740 14 Dtool_l5yHcaj_ 0 4 764 3117 0 14 Dtool_l5yHcaj_ 336 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_steer_angle
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  5 angle 1 3137  
741 14 Dtool_l5yH_qFS 0 4 765 3117 0 14 Dtool_l5yH_qFS 340 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_steer_angle_rad
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  5 angle 1 3137  
742 14 Dtool_l5yHnKZH 0 4 766 3117 0 14 Dtool_l5yHnKZH 377 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_axle_speed
//       Access: Published
//  Description: Set the current axle rotation speed.
//               Note: WSF_axle_speed_override flag must be raised
//               for this to have effect! 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  5 speed 1 3137  
743 14 Dtool_l5yHC95I 0 4 767 3117 0 14 Dtool_l5yHC95I 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_wheel_flag
//       Access: Published
//  Description: Turns the specified wheel shape flag on or off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3377  4 flag 1 2992  5 value 1 3120  
744 14 Dtool_l5yHr2Jq 0 4 768 3117 0 14 Dtool_l5yHr2Jq 303 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::set_suspension
//       Access: Published
//  Description: Set the data intended for car wheel suspension
//               effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3377  6 spring 1 3320  
745 14 Dtool_l5yHOSmd 0 6 769 3137 0 14 Dtool_l5yHOSmd 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_radius
//       Access: Published
//  Description: Returns the radius of the sphere.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
746 14 Dtool_l5yH3cTK 0 6 770 3137 0 14 Dtool_l5yH3cTK 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_suspension_travel
//       Access: Published
//  Description: Returns the suspension travel
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
747 14 Dtool_l5yHX6m8 0 6 771 3137 0 14 Dtool_l5yHX6m8 356 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_inverse_wheel_mass
//       Access: Published
//  Description: Returns the inverse mass of the wheel. Determines
//               the wheel velocity that wheel torques can achieve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
748 14 Dtool_l5yHZD6V 0 6 772 3137 0 14 Dtool_l5yHZD6V 344 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_motor_torque
//       Access: Published
//  Description: Retrieves the sum engine torque on the wheel axle.
//               Positive or negative depending on direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
749 14 Dtool_l5yHRVzB 0 6 773 3137 0 14 Dtool_l5yHRVzB 328 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_brake_torque
//       Access: Published
//  Description: Must be nonnegative. Very large values should lock
//               wheel but should be stable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
750 14 Dtool_l5yHAHQU 0 6 774 3137 0 14 Dtool_l5yHAHQU 342 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_steer_angle
//       Access: Published
//  Description: Retrieves the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
751 14 Dtool_l5yHzw6J 0 6 775 3137 0 14 Dtool_l5yHzw6J 346 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_steer_angle_rad
//       Access: Published
//  Description: Retrieves the steering angle, around shape Y axis.
//               The steering angle is measured in radians.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
752 14 Dtool_l5yHccAa 0 6 776 3137 0 14 Dtool_l5yHccAa 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_axle_speed
//       Access: Published
//  Description: Retrieves the current axle rotation speed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3378  
753 14 Dtool_l5yHOWdQ 0 6 777 3120 0 14 Dtool_l5yHOWdQ 300 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShape::get_wheel_flag
//       Access: Published
//  Description: Returns the value of the specified wheel shape
//               flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3378  4 flag 1 2992  
754 14 Dtool_l5yHpuuv 0 7 778 3125 0 14 Dtool_l5yHpuuv 68 //////////////////////////////////////////////////////////////////// 0 
755 14 Dtool_l5yHYWjo 0 7 780 3130 2194 14 Dtool_l5yHYWjo 716 // Filename: physxActorDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
756 14 Dtool_l5yH9CIT 0 4 782 3117 0 14 Dtool_l5yH9CIT 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3130  
757 14 Dtool_l5yHjX4g 0 6 783 3120 0 14 Dtool_l5yHjX4g 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
758 14 Dtool_l5yH9vbl 0 4 784 3117 0 14 Dtool_l5yH9vbl 308 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::add_shape
//       Access: Published
//  Description: Adds a shape to the list of collision shapes
//               composing this actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  4 desc 1 3148  
759 14 Dtool_l5yHSrYb 0 4 785 3117 0 14 Dtool_l5yHSrYb 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_name
//       Access: Published
//  Description: Sets the optional debug name for the actor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  4 name 1 3114  
760 14 Dtool_l5yHtMkz 0 4 786 3117 0 14 Dtool_l5yHtMkz 384 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_density
//       Access: Published
//  Description: Set the density used during mass/intertia
//               computation. This value is used if the actor's
//               shapes do not have a mass asigned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  7 density 1 3137  
761 14 Dtool_l5yHD5lW 0 4 787 3117 0 14 Dtool_l5yHD5lW 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_pos
//       Access: Published
//  Description: Set the position of the actor in global space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  3 pos 1 3131  
762 14 Dtool_l5yH233Y 0 4 788 3117 0 14 Dtool_l5yH233Y 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_mat
//       Access: Published
//  Description: Set the position and orientation of the actor
//               in global space. Scaling and shear arenot
//               supported, even if the matrix contains a scale or
//               shear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  3 mat 1 3134  
763 14 Dtool_l5yHeVpl 0 4 789 3117 0 14 Dtool_l5yHeVpl 345 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_global_hpr
//       Access: Published
//  Description: Sets the orientation of the actor in global space
//               by providing angles for heading, pitch and roll.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3130  1 h 1 3137  1 p 1 3137  1 r 1 3137  
764 14 Dtool_l5yHrlW_ 0 4 790 3117 0 14 Dtool_l5yHrlW_ 394 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::set_body
//       Access: Published
//  Description: Sets the body descriptor for this actor. The actor
//               will be dynmaic if a body descriptor is set, and
//               static if no body descriptor is set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3130  4 desc 1 3129  
765 14 Dtool_l5yHM2JH 0 6 791 3114 0 14 Dtool_l5yHM2JH 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_name
//       Access: Published
//  Description: Returns the optional debug name for this actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
766 14 Dtool_l5yHP2qM 0 6 792 3137 0 14 Dtool_l5yHP2qM 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_density
//       Access: Published
//  Description: Returns the actor's density.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
767 14 Dtool_l5yHX2KA 0 7 793 3139 0 14 Dtool_l5yHX2KA 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_global_pos
//       Access: Published
//  Description: Returns the actor's position in global space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
768 14 Dtool_l5yH2Dnl 0 7 794 3140 0 14 Dtool_l5yH2Dnl 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_global_mat
//       Access: Published
//  Description: Returns the actor's transform in global space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
769 14 Dtool_l5yHLFPo 0 7 795 3129 2210 14 Dtool_l5yHLFPo 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxActorDesc::get_body
//       Access: Published
//  Description: Gets the body descriptor for this actor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3381  
770 14 Dtool_l5yHj8e7 0 7 797 3129 2210 14 Dtool_l5yHj8e7 714 // Filename: physxBodyDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
771 14 Dtool_l5yHJVzR 0 4 799 3117 0 14 Dtool_l5yHJVzR 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3129  
772 14 Dtool_l5yHwrMQ 0 6 800 3120 0 14 Dtool_l5yHwrMQ 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
773 14 Dtool_l5yH8_Kv 0 4 801 3117 0 14 Dtool_l5yH8_Kv 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass
//       Access: Published
//  Description: Set the mass of body. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  4 mass 1 3137  
774 14 Dtool_l5yH7iPt 0 4 802 3117 0 14 Dtool_l5yH7iPt 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_linear_damping
//       Access: Published
//  Description: Set the linear damping applied to the body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  7 damping 1 3137  
775 14 Dtool_l5yHpv4H 0 4 803 3117 0 14 Dtool_l5yHpv4H 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_angular_damping
//       Access: Published
//  Description: Set the angular damping applied to the body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  7 damping 1 3137  
776 14 Dtool_l5yHPInv 0 4 804 3117 0 14 Dtool_l5yHPInv 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_linear_velocity
//       Access: Published
//  Description: Set the linear Velocity of the body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  8 velocity 1 3150  
777 14 Dtool_l5yH3_8U 0 4 805 3117 0 14 Dtool_l5yH3_8U 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_angular_velocity
//       Access: Published
//  Description: Set the angular velocity of the body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  8 velocity 1 3150  
778 14 Dtool_l5yHSLz8 0 4 806 3117 0 14 Dtool_l5yHSLz8 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_max_angular_velocity
//       Access: Published
//  Description: Set the maximum allowed angular velocity for this
//               body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  7 maximum 1 3137  
779 14 Dtool_l5yHJyVR 0 4 807 3117 0 14 Dtool_l5yHJyVR 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_linear_velocity
//       Access: Published
//  Description: Set the maximum linear velocity at which the body
//               can go to sleep.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  8 velocity 1 3137  
780 14 Dtool_l5yHJFvQ 0 4 808 3117 0 14 Dtool_l5yHJFvQ 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_angular_velocity
//       Access: Published
//  Description: Set the maximum angular velocity at which body
//               can go to sleep.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  8 velocity 1 3137  
781 14 Dtool_l5yHbIdP 0 4 809 3117 0 14 Dtool_l5yHbIdP 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_solver_iteration_count
//       Access: Published
//  Description: Set the number of solver iterations performed
//               when processing joint/contacts connected to this
//               body.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  5 count 1 3138  
782 14 Dtool_l5yHgKV7 0 4 810 3117 0 14 Dtool_l5yHgKV7 386 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_energy_threshold
//       Access: Published
//  Description: Set the threshold for the energy-based sleeping
//               algorithm. Only used when the BF_energy_sleep_test
//               flag is set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  9 threshold 1 3137  
783 14 Dtool_l5yH3UbT 0 4 811 3117 0 14 Dtool_l5yH3UbT 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_sleep_damping
//       Access: Published
//  Description: Set the damping factor for bodies that are about
//               to sleep.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  7 damping 1 3137  
784 14 Dtool_l5yHHWE3 0 4 812 3117 0 14 Dtool_l5yHHWE3 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass_local_mat
//       Access: Published
//  Description: Set the position and orientation of the center
//               of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  3 mat 1 3134  
785 14 Dtool_l5yHEuzr 0 4 813 3117 0 14 Dtool_l5yHEuzr 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_mass_space_inertia
//       Access: Published
//  Description: Set the diagonal mass space inertia tensor in
//               bodies mass frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  7 inertia 1 3150  
786 14 Dtool_l5yHh2_m 0 4 814 3117 0 14 Dtool_l5yHh2_m 0 3 4 this 3 3129  4 flag 1 2965  5 value 1 3120  
787 14 Dtool_l5yHGlP4 0 4 815 3117 0 14 Dtool_l5yHGlP4 403 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_ccd_motion_threshold
//       Access: Published
//  Description: When CCD is globally enabled, it is still not
//               performed if the motion distance of all points on
//               the body is below this threshold. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  9 threshold 1 3137  
788 14 Dtool_l5yHfENo 0 4 816 3117 0 14 Dtool_l5yHfENo 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_wake_up_counter
//       Access: Published
//  Description: Set the body's initial wake up counter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  5 value 1 3137  
789 14 Dtool_l5yHKrS0 0 4 817 3117 0 14 Dtool_l5yHKrS0 287 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::set_contact_report_threshold
//       Access: Published
//  Description: Set The force threshold for contact reports.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3129  9 threshold 1 3137  
790 14 Dtool_l5yHCmFo 0 6 818 3137 0 14 Dtool_l5yHCmFo 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass
//       Access: Published
//  Description: Get the mass of body. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
791 14 Dtool_l5yHOQeW 0 6 819 3137 0 14 Dtool_l5yHOQeW 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_linear_damping
//       Access: Published
//  Description: Get the linear damping applied to the body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
792 14 Dtool_l5yHj_oo 0 6 820 3137 0 14 Dtool_l5yHj_oo 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_angular_damping
//       Access: Published
//  Description: Get the angular damping applied to the body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
793 14 Dtool_l5yHo8Ew 0 7 821 3157 0 14 Dtool_l5yHo8Ew 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_linear_velocity
//       Access: Published
//  Description: Get the linear Velocity of the body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
794 14 Dtool_l5yHmcyb 0 7 822 3157 0 14 Dtool_l5yHmcyb 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_angular_velocity
//       Access: Published
//  Description: Get the angular velocity of the body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
795 14 Dtool_l5yHcTHA 0 6 823 3137 0 14 Dtool_l5yHcTHA 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_max_angular_velocity
//       Access: Published
//  Description: Get the maximum allowed angular velocity for this
//               body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
796 14 Dtool_l5yHHWJ0 0 6 824 3137 0 14 Dtool_l5yHHWJ0 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_linear_velocity
//       Access: Published
//  Description: Get the maximum linear velocity at which the body
//               can go to sleep.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
797 14 Dtool_l5yH7s0j 0 6 825 3137 0 14 Dtool_l5yH7s0j 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_angular_velocity
//       Access: Published
//  Description: Get the maximum angular velocity at which body
//               can go to sleep.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
798 14 Dtool_l5yHlHkH 0 6 826 3138 0 14 Dtool_l5yHlHkH 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_solver_iteration_count
//       Access: Published
//  Description: Get the number of solver iterations performed
//               when processing joint/contacts connected to this
//               body.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
799 14 Dtool_l5yHe5aO 0 6 827 3137 0 14 Dtool_l5yHe5aO 386 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_energy_threshold
//       Access: Published
//  Description: Get the threshold for the energy-based sleeping
//               algorithm. Only used when the BF_energy_sleep_test
//               flag is set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
800 14 Dtool_l5yHxS84 0 6 828 3137 0 14 Dtool_l5yHxS84 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_sleep_damping
//       Access: Published
//  Description: Get the damping factor for bodies that are about
//               to sleep.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
801 14 Dtool_l5yHebW4 0 7 829 3140 0 14 Dtool_l5yHebW4 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass_local_mat
//       Access: Published
//  Description: Get the position and orientation of the center
//               of mass.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
802 14 Dtool_l5yHoRjy 0 7 830 3157 0 14 Dtool_l5yHoRjy 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_mass_space_inertia
//       Access: Published
//  Description: Get the diagonal mass space inertia tensor in
//               bodies mass frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
803 14 Dtool_l5yHrXzN 0 6 831 3120 0 14 Dtool_l5yHrXzN 0 2 4 this 3 3383  4 flag 1 2965  
804 14 Dtool_l5yHT_j7 0 6 832 3137 0 14 Dtool_l5yHT_j7 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_ccd_motion_threshold
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
805 14 Dtool_l5yHQ08I 0 6 833 3137 0 14 Dtool_l5yHQ08I 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_wake_up_counter
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
806 14 Dtool_l5yH5Mxe 0 6 834 3137 0 14 Dtool_l5yH5Mxe 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBodyDesc::get_contact_report_threshold
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3383  
807 14 Dtool_l5yHxIl9 0 4 841 3117 0 14 Dtool_l5yHxIl9 0 1 4 this 3 3148  
808 14 Dtool_l5yHFFWL 0 6 842 3120 0 14 Dtool_l5yHFFWL 0 1 4 this 3 3385  
809 14 Dtool_l5yHUd3F 0 4 843 3117 0 14 Dtool_l5yHUd3F 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  4 name 1 3114  
810 14 Dtool_l5yHf8Jw 0 4 844 3117 0 14 Dtool_l5yHf8Jw 442 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_trigger
//       Access: Published
//  Description: This shape will become a trigger shape if this
//               parameter is set to TRUE. It won't take part in
//               collisions, but trigger events if some other
//               shape passes through it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  5 value 1 3120  
811 14 Dtool_l5yHRCax 0 4 845 3117 0 14 Dtool_l5yHRCax 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  3 pos 1 3131  
812 14 Dtool_l5yHE5f7 0 4 846 3117 0 14 Dtool_l5yHE5f7 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  3 mat 1 3134  
813 14 Dtool_l5yHbb4r 0 4 847 3117 0 14 Dtool_l5yHbb4r 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_local_hpr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3148  1 h 1 3137  1 p 1 3137  1 r 1 3137  
814 14 Dtool_l5yHhNYW 0 4 848 3117 0 14 Dtool_l5yHhNYW 1032 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_skin_width
//       Access: Published
//  Description: Specifies by how much shapes can interpenetrate. 
//
//               Two shapes will interpenetrate by the sum of their
//               skin widths. This means that their graphical
//               representations should be adjusted so that they
//               just touch when the shapes are interpenetrating.
//
//               The default skin width is the 'physx-skin-width'
//               parameter.
//
//               A skin width sum of zero for two bodies is not
//               permitted because it will lead to an unstable
//               simulation.
//
//               If your simulation jitters because resting bodies
//               occasionally lose contact, increasing the size of
//               your collision volumes and the skin width may
//               improve things.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  9 skinWidth 1 3137  
815 14 Dtool_l5yHtXs3 0 4 849 3117 0 14 Dtool_l5yHtXs3 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_shape_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3148  4 flag 1 2985  5 value 1 3120  
816 14 Dtool_l5yHU_4p 0 4 850 3117 0 14 Dtool_l5yHU_4p 598 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_mass
//       Access: Published
//  Description: Sets the mass of this individual shape when
//               computing mass inertial properties for a rigidbody.
//               When mass<=0.0 then density and volume determine
//               the mass. Note that this will only be used if the
//               body has a zero inertia tensor, or if you call
//               PhysxActor::update_mass_from_shapes explicitly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  4 mass 1 3137  
817 14 Dtool_l5yHPhCe 0 4 851 3117 0 14 Dtool_l5yHPhCe 585 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_density
//       Access: Published
//  Description: Sets the density of this individual shape when 
//               computing mass inertial properties for a rigidbody
//               (unless a valid mass >0.0 is provided). Note that
//               this will only be used if the body has a zero
//               inertia tensor, or if you call
//               PhysxActor::update_mass_from_shapes explicitly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  7 density 1 3137  
818 14 Dtool_l5yHkDBr 0 4 852 3117 0 14 Dtool_l5yHkDBr 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_group
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  5 group 1 3176  
819 14 Dtool_l5yHJoQw 0 4 853 3117 0 14 Dtool_l5yHJoQw 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_material
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  8 material 1 3177  
820 14 Dtool_l5yHI2Z6 0 4 854 3117 0 14 Dtool_l5yHI2Z6 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::set_material_index
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3148  5 index 1 3176  
821 14 Dtool_l5yHgxnx 0 6 855 3114 0 14 Dtool_l5yHgxnx 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
822 14 Dtool_l5yHxX_x 0 7 856 3139 0 14 Dtool_l5yHxX_x 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_local_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
823 14 Dtool_l5yHAlIn 0 7 857 3140 0 14 Dtool_l5yHAlIn 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_local_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
824 14 Dtool_l5yH1y8E 0 6 858 3137 0 14 Dtool_l5yH1y8E 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_skin_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
825 14 Dtool_l5yH_oTX 0 6 859 3120 0 14 Dtool_l5yH_oTX 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_shape_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3385  4 flag 1 2985  
826 14 Dtool_l5yHSL7H 0 6 860 3137 0 14 Dtool_l5yHSL7H 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_mass
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
827 14 Dtool_l5yH33I3 0 6 861 3137 0 14 Dtool_l5yH33I3 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_density
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
828 14 Dtool_l5yHG1Ea 0 6 862 3176 0 14 Dtool_l5yHG1Ea 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_group
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
829 14 Dtool_l5yHPrDN 0 6 863 3176 0 14 Dtool_l5yHPrDN 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxShapeDesc::get_material_index
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3385  
830 14 Dtool_l5yHfwrc 0 6 836 3158 0 14 Dtool_l5yHfwrc 0 1 4 this 3 3148  
831 14 Dtool_l5yHPb3R 0 6 837 3148 0 14 Dtool_l5yHPb3R 0 1 4 this 3 3158  
832 14 Dtool_l5yHgqZ_ 0 7 839 3387 0 14 Dtool_l5yHgqZ_ 0 1 4 this 3 3148  
833 14 Dtool_l5yHdbaq 0 6 840 3148 0 14 Dtool_l5yHdbaq 0 1 4 this 3 3387  
834 14 Dtool_l5yHB_EO 0 6 866 3388 0 14 Dtool_l5yHB_EO 297 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global PhysxManager
//               object.
//////////////////////////////////////////////////////////////////// 0 
835 14 Dtool_l5yHF0No 0 4 867 3117 0 14 Dtool_l5yHF0No 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::set_parameter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3388  5 param 1 2963  5 value 1 3137  
836 14 Dtool_l5yHrlkG 0 6 868 3137 0 14 Dtool_l5yHrlkG 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_parameter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  5 param 1 2963  
837 14 Dtool_l5yHHP2H 0 6 869 3120 0 14 Dtool_l5yHHP2H 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::is_hardware_available
//       Access: Published
//  Description: Returns TRUE if a physcis hardware is available
//               on the host system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
838 14 Dtool_l5yH3qgs 0 6 870 3138 0 14 Dtool_l5yH3qgs 299 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_ppus
//       Access: Published
//  Description: Reports the number of PPUs installed in the host
//               system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
839 14 Dtool_l5yHpoSA 0 6 871 3138 0 14 Dtool_l5yHpoSA 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_hw_version
//       Access: Published
//  Description: Reports the available revision of the PhysX
//               Hardware. Returns 0 if there is no hardware present
//               in the machine, 1 for the PhysX Athena revision
//               1.0 card.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
840 14 Dtool_l5yHiV9W 0 6 872 3114 0 14 Dtool_l5yHiV9W 285 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_internal_version
//       Access: Published
//  Description: Reports the internal API version number of the SDK.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
841 14 Dtool_l5yH6c3d 0 6 873 3138 0 14 Dtool_l5yH6c3d 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_scenes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3389  
842 14 Dtool_l5yH8_X7 0 7 874 3143 2011 14 Dtool_l5yH8_X7 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::create_scene
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  4 desc 1 3391  
843 14 Dtool_l5yHWU4O 0 7 875 3143 2011 14 Dtool_l5yHWU4O 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_scene
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3389  3 idx 1 3138  
844 14 Dtool_l5yHsLmV 0 6 876 3138 0 14 Dtool_l5yHsLmV 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_height_fields
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
845 14 Dtool_l5yH5MT1 0 7 877 3272 0 14 Dtool_l5yH5MT1 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::create_height_field
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  4 desc 1 3392  
846 14 Dtool_l5yHK8cT 0 7 878 3272 0 14 Dtool_l5yHK8cT 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_height_field
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  3 idx 1 3138  
847 14 Dtool_l5yH9Lvo 0 6 879 3138 0 14 Dtool_l5yH9Lvo 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_convex_meshes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
848 14 Dtool_l5yHLjO2 0 7 880 3227 0 14 Dtool_l5yHLjO2 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_convex_mesh
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  3 idx 1 3138  
849 14 Dtool_l5yHm0V_ 0 6 881 3138 0 14 Dtool_l5yHm0V_ 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_triangle_meshes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
850 14 Dtool_l5yHMtNb 0 7 882 3371 0 14 Dtool_l5yHMtNb 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_triangle_mesh
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  3 idx 1 3138  
851 14 Dtool_l5yHD_eC 0 6 883 3138 0 14 Dtool_l5yHD_eC 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_cloth_meshes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
852 14 Dtool_l5yHi49W 0 7 884 3215 0 14 Dtool_l5yHi49W 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_cloth_mesh
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  3 idx 1 3138  
853 14 Dtool_l5yHLMb9 0 6 885 3138 0 14 Dtool_l5yHLMb9 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_num_soft_body_meshes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3388  
854 14 Dtool_l5yH5u2I 0 7 886 3351 0 14 Dtool_l5yH5u2I 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::get_soft_body_mesh
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3388  3 idx 1 3138  
855 14 Dtool_l5yHjHqg 0 4 887 3117 0 14 Dtool_l5yHjHqg 216 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3389  
856 14 Dtool_l5yHZ6PM 0 4 887 3117 0 14 Dtool_l5yHZ6PM 216 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3389  3 out 1 3121  12 indent_level 1 3123  
857 14 Dtool_l5yHqWoV 0 4 887 3117 0 14 Dtool_l5yHqWoV 216 ////////////////////////////////////////////////////////////////////
//     Function: PhysxManager::ls
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3389  3 out 1 3121  
858 14 Dtool_l5yHy9t_ 0 7 889 3182 2298 14 Dtool_l5yHy9t_ 712 // Filename: physxBounds3.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
859 14 Dtool_l5yHeBgd 0 4 891 3117 0 14 Dtool_l5yHeBgd 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::bounds_of_obb
//       Access: Published
//  Description: Sets this to the AABB (axis ligned bounding box)
//               of the OBB (oriented bounding box). The OBB is
//               described by orientation, translation and half
//               dimensions.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3182  11 orientation 1 3153  11 translation 1 3131  9 half_dims 1 3150  
860 14 Dtool_l5yHc_BB 0 4 892 3117 0 14 Dtool_l5yHc_BB 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::combine
//       Access: Published
//  Description: Sets this to the union of this and b2. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  2 b2 1 3183  
861 14 Dtool_l5yH57K_ 0 6 893 3120 0 14 Dtool_l5yH57K_ 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::contain
//       Access: Published
//  Description: Returns TRUE if these bounds contain the point v.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3183  1 p 1 3131  
862 14 Dtool_l5yHAs9E 0 4 894 3117 0 14 Dtool_l5yHAs9E 300 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::fatten
//       Access: Published
//  Description: Fattens the AABB in all three dimensions by the
//               given distance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  8 distance 1 3137  
863 14 Dtool_l5yH2Myz 0 4 895 3117 0 14 Dtool_l5yH2Myz 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::include
//       Access: Published
//  Description: Expands the volume to include the point v.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  1 v 1 3131  
864 14 Dtool_l5yH_so0 0 6 896 3120 0 14 Dtool_l5yH_so0 304 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::intersects
//       Access: Published
//  Description: Returns TRUE if the intersection of this and b is
//               is not empty.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3183  1 b 1 3183  
865 14 Dtool_l5yH_F_a 0 6 897 3120 0 14 Dtool_l5yH_F_a 393 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::intersects2d
//       Access: Published
//  Description: Indicates whether the intersection of this and b
//               is empty or not in the plane orthogonal to the
//               axis passed (X = 0, Y = 1 or Z = 2). 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3183  1 b 1 3183  14 axis_to_ignore 1 3138  
866 14 Dtool_l5yHV_9k 0 6 898 3120 0 14 Dtool_l5yHV_9k 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::is_empty
//       Access: Published
//  Description: Returns TRUE if the bounding box is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3183  
867 14 Dtool_l5yHx_7a 0 4 899 3117 0 14 Dtool_l5yHx_7a 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::scale
//       Access: Published
//  Description: Scales the AABB by the given factor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  5 scale 1 3137  
868 14 Dtool_l5yHDBJc 0 4 900 3117 0 14 Dtool_l5yHDBJc 289 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set
//       Access: Published
//  Description: Setup this AABB from minimum corner and maximum
//               corner.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3182  3 min 1 3131  3 max 1 3131  
869 14 Dtool_l5yHAh_6 0 4 901 3117 0 14 Dtool_l5yHAh_6 302 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_center_extents
//       Access: Published
//  Description: Setup this AABB from center point and extents
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3182  6 center 1 3131  7 extents 1 3150  
870 14 Dtool_l5yHB612 0 4 902 3117 0 14 Dtool_l5yHB612 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_empty
//       Access: Published
//  Description: Sets empty to TRUE.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3182  
871 14 Dtool_l5yHrdqF 0 4 903 3117 0 14 Dtool_l5yHrdqF 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_infinite
//       Access: Published
//  Description: Sets infinite bounds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3182  
872 14 Dtool_l5yHiv0K 0 4 904 3117 0 14 Dtool_l5yHiv0K 441 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::transform
//       Access: Published
//  Description: Transforms this volume as if it was an axis aligned
//               bounding box, and then assigns the results' bounds
//               to this. The orientation is applied first, then the
//               translation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3182  11 orientation 1 3153  11 translation 1 3131  
873 14 Dtool_l5yHe5rF 0 7 905 3139 0 14 Dtool_l5yHe5rF 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_max
//       Access: Published
//  Description: Returns the minimum corner of the bounding box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3183  
874 14 Dtool_l5yHCAsC 0 7 906 3139 0 14 Dtool_l5yHCAsC 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_min
//       Access: Published
//  Description: Returns the maximum corner of the bounding box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3183  
875 14 Dtool_l5yHLL4i 0 7 907 3139 0 14 Dtool_l5yHLL4i 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_center
//       Access: Published
//  Description: Returns the center of the bounding box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3183  
876 14 Dtool_l5yHtyrg 0 7 908 3157 0 14 Dtool_l5yHtyrg 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::get_dimensions
//       Access: Published
//  Description: Returns the extents of the bounding box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3183  
877 14 Dtool_l5yH_1Wk 0 4 909 3117 0 14 Dtool_l5yH_1Wk 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_max
//       Access: Published
//  Description: Sets the maximum corner of the bounding box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  5 value 1 3139  
878 14 Dtool_l5yHzuYh 0 4 910 3117 0 14 Dtool_l5yHzuYh 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBounds3::set_min
//       Access: Published
//  Description: Sets the minimum corner of the bounding box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3182  5 value 1 3139  
879 14 Dtool_l5yHlxlb 0 7 912 3393 2320 14 Dtool_l5yHlxlb 704 // Filename: physxBox.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
880 14 Dtool_l5yHB3g5 0 7 912 3393 2320 14 Dtool_l5yHB3g5 220 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 center 1 3131  7 extents 1 3150  3 rot 1 3153  
881 14 Dtool_l5yHqMmO 0 6 914 3120 0 14 Dtool_l5yHqMmO 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::is_valid
//       Access: Published
//  Description: Returns TRUE if the box is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3187  
882 14 Dtool_l5yHzYdd 0 4 915 3117 0 14 Dtool_l5yHzYdd 297 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::rotate
//       Access: Published
//  Description: Recomputes the box after an arbitrary transform by
//               a 4x4 matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3187  1 m 1 3134  3 obb 1 3393  
883 14 Dtool_l5yHG1Y4 0 4 916 3117 0 14 Dtool_l5yHG1Y4 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_empty
//       Access: Published
//  Description: Setups an empty box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3393  
884 14 Dtool_l5yHd4o5 0 7 917 3139 0 14 Dtool_l5yHd4o5 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_center
//       Access: Published
//  Description: Return center of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3187  
885 14 Dtool_l5yHaomO 0 7 918 3157 0 14 Dtool_l5yHaomO 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_extents
//       Access: Published
//  Description: Returns the extents (radii) of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3187  
886 14 Dtool_l5yHrFhE 0 7 919 3156 0 14 Dtool_l5yHrFhE 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::get_rot
//       Access: Published
//  Description: Return the rotation of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3187  
887 14 Dtool_l5yH7jfh 0 4 920 3117 0 14 Dtool_l5yH7jfh 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_center
//       Access: Published
//  Description: Sets the center of the box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3393  6 center 1 3139  
888 14 Dtool_l5yHcb5s 0 4 921 3117 0 14 Dtool_l5yHcb5s 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_extents
//       Access: Published
//  Description: Sets the extents of the box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3393  7 extents 1 3157  
889 14 Dtool_l5yHklrb 0 4 922 3117 0 14 Dtool_l5yHklrb 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBox::set_rot
//       Access: Published
//  Description: Sets the rotation of the box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3393  3 rot 1 3156  
890 14 Dtool_l5yH0Ato 0 4 924 3117 0 14 Dtool_l5yH0Ato 0 1 4 this 3 3337  
891 14 Dtool_l5yHsPLE 0 6 925 3120 0 14 Dtool_l5yHsPLE 0 1 4 this 3 3394  
892 14 Dtool_l5yHY7rQ 0 4 926 3117 0 14 Dtool_l5yHY7rQ 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_pos
//       Access: Published
//  Description: Set the position of the character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3337  3 pos 1 3131  
893 14 Dtool_l5yHSTg2 0 4 927 3117 0 14 Dtool_l5yHSTg2 604 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_slope_limit
//       Access: Published
//  Description: Sets the maximum slope which the character can walk
//               up. In general it is desirable to limit where the
//               character can walk, in particular it is unrealistic
//               for the character to be able to climb arbitary
//               slopes.
//               The value is expressed in degrees.
//               Default: 45.0 degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3337  10 slopeLimit 1 3137  
894 14 Dtool_l5yHz1Ta 0 4 928 3117 0 14 Dtool_l5yHz1Ta 558 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_skin_width
//       Access: Published
//  Description: Sets the skin width used by the controller. 
//               A "skin" around the controller is necessary to
//               avoid numerical precision issues.
//               This is dependant on the scale of the users world,
//               but should be a small, positive non zero value.
//               Default: 0.1 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3337  9 skinWidth 1 3137  
895 14 Dtool_l5yHQkb9 0 4 929 3117 0 14 Dtool_l5yHQkb9 612 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_step_offset
//       Access: Published
//  Description: Defines the maximum height of an obstacle which the
//               character can climb. 
//               A small value will mean that the character gets
//               stuck and cannot walk up stairs etc, a value which
//               is too large will mean that the character can climb
//               over unrealistically high obstacles.
//               Default: 0.5
//////////////////////////////////////////////////////////////////// 2 4 this 3 3337  10 setpOffset 1 3137  
896 14 Dtool_l5yHX_O9 0 4 930 3117 0 14 Dtool_l5yHX_O9 413 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::set_interaction_flag
//       Access: Published
//  Description: The interaction flag controls if a character
//               controller collides with other controllers.
//               The default is to collide with other controllers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3337  15 interactionFlag 1 3120  
897 14 Dtool_l5yHurXF 0 7 931 3139 0 14 Dtool_l5yHurXF 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_pos
//       Access: Published
//  Description: Returns the position of the character.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3394  
898 14 Dtool_l5yHKC0L 0 6 932 3137 0 14 Dtool_l5yHKC0L 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_slope_limit
//       Access: Published
//  Description: Returns the maximum slope which the character can
//               walk up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3394  
899 14 Dtool_l5yHiec3 0 6 933 3137 0 14 Dtool_l5yHiec3 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_skin_width
//       Access: Published
//  Description: Returns the skin width used by the controller. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3394  
900 14 Dtool_l5yHIJuS 0 6 934 3137 0 14 Dtool_l5yHIJuS 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_step_offset
//       Access: Published
//  Description: Returns the maximum height of an obstacle which the
//               character can climb. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3394  
901 14 Dtool_l5yHnjZ0 0 6 935 3120 0 14 Dtool_l5yHnjZ0 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxControllerDesc::get_interaction_flag
//       Access: Published
//  Description: Returns the interaction flag.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3394  
902 14 Dtool_l5yHc0de 0 7 938 3396 2344 14 Dtool_l5yHc0de 732 // Filename: physxBoxControllerDesc.I
// Created by:  enn0x (22Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
903 14 Dtool_l5yHZeot 0 4 940 3117 0 14 Dtool_l5yHZeot 455 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::set_extents
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3396  7 extents 1 3150  
904 14 Dtool_l5yHoeE2 0 7 941 3157 0 14 Dtool_l5yHoeE2 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxControllerDesc::get_extents
//       Access: Published
//  Description: Returns the dimensions of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3397  
905 14 Dtool_l5yHD5Bq 0 4 943 3117 0 14 Dtool_l5yHD5Bq 0 1 4 this 3 3271  
906 14 Dtool_l5yHJ59g 0 6 944 3120 0 14 Dtool_l5yHJ59g 0 1 4 this 3 3399  
907 14 Dtool_l5yHi_GL 0 4 945 3117 0 14 Dtool_l5yHi_GL 261 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3271  4 name 1 3114  
908 14 Dtool_l5yHFQ_5 0 4 946 3117 0 14 Dtool_l5yHFQ_5 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3271  3 pos 1 3131  
909 14 Dtool_l5yHnvmm 0 4 947 3117 0 14 Dtool_l5yHnvmm 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3271  3 mat 1 3134  
910 14 Dtool_l5yHkGn9 0 4 948 3117 0 14 Dtool_l5yHkGn9 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::set_hpr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3271  1 h 1 3137  1 p 1 3137  1 r 1 3137  
911 14 Dtool_l5yHHmE6 0 6 949 3114 0 14 Dtool_l5yHHmE6 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3399  
912 14 Dtool_l5yHKIWj 0 7 950 3139 0 14 Dtool_l5yHKIWj 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3399  
913 14 Dtool_l5yH_2re 0 7 951 3140 0 14 Dtool_l5yH_2re 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeDesc::get_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3399  
914 14 Dtool_l5yHAowc 0 7 953 3173 2357 14 Dtool_l5yHAowc 742 // Filename: physxBoxForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
915 14 Dtool_l5yHLttS 0 4 955 3117 0 14 Dtool_l5yHLttS 463 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::set_dimensions
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3173  10 dimensions 1 3150  
916 14 Dtool_l5yHanjy 0 7 956 3157 0 14 Dtool_l5yHanjy 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxForceFieldShapeDesc::get_dimensions
//       Access: Published
//  Description: Returns the dimensions of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3401  
917 14 Dtool_l5yHvfKi 0 7 958 3197 0 14 Dtool_l5yHvfKi 722 // Filename: physxBoxShapeDesc.I
// Created by:  enn0x (08Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
918 14 Dtool_l5yHHsY9 0 4 959 3117 0 14 Dtool_l5yHHsY9 453 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::set_dimensions
//       Access: Published
//  Description: Sets the dimensions of the box.
//
//               The dimensions are the 'radii' of the box,
//               meaning 1/2 extents in x dimension, 1/2 extents
//               in y dimension, 1/2 extents in z dimension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3197  10 dimensions 1 3150  
919 14 Dtool_l5yHDSWl 0 7 960 3157 0 14 Dtool_l5yHDSWl 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxBoxShapeDesc::get_dimensions
//       Access: Published
//  Description: Returns the dimensions of the box.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3403  
920 14 Dtool_l5yHledW 0 7 962 3405 2364 14 Dtool_l5yHledW 712 // Filename: physxSegment.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
921 14 Dtool_l5yHqQQz 0 7 962 3405 2364 14 Dtool_l5yHqQQz 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 2 p0 1 3131  2 p1 1 3131  
922 14 Dtool_l5yHQKe8 0 7 962 3405 2364 14 Dtool_l5yHQKe8 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 segment 1 3406  
923 14 Dtool_l5yHx_Eh 0 4 964 3117 0 14 Dtool_l5yHx_Eh 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_direction
//       Access: Published
//  Description: Returns the direction vector from the segment's
//               start point to it's end point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3406  3 dir 1 3139  
924 14 Dtool_l5yHWt5h 0 6 965 3137 0 14 Dtool_l5yHWt5h 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_length
//       Access: Published
//  Description: Returns the distance from the segment's start point
//               to it's end point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3406  
925 14 Dtool_l5yHK5jM 0 4 966 3117 0 14 Dtool_l5yHK5jM 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_point
//       Access: Published
//  Description: Computes a point on the segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3406  1 p 1 3139  1 t 1 3137  
926 14 Dtool_l5yHDc5t 0 6 967 3137 0 14 Dtool_l5yHDc5t 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::compute_square_length
//       Access: Published
//  Description: Returns the square distance from the segment's
//               start point to it's end point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3406  
927 14 Dtool_l5yHKDhG 0 7 968 3139 0 14 Dtool_l5yHKDhG 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_origin
//       Access: Published
//  Description: Returns the start point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3406  
928 14 Dtool_l5yHxmXM 0 4 969 3117 0 14 Dtool_l5yHxmXM 317 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_origin_direction
//       Access: Published
//  Description: Setup this segment from origin (start point) and
//               direction vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3405  6 origin 1 3131  9 direction 1 3150  
929 14 Dtool_l5yHFO4B 0 7 970 3139 0 14 Dtool_l5yHFO4B 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_p0
//       Access: Published
//  Description: Returns the start point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3406  
930 14 Dtool_l5yH634h 0 7 971 3139 0 14 Dtool_l5yH634h 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::get_p1
//       Access: Published
//  Description: Returns the end point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3406  
931 14 Dtool_l5yHWL5o 0 4 972 3117 0 14 Dtool_l5yHWL5o 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_p0
//       Access: Published
//  Description: Sets the start point of the segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3405  1 p 1 3139  
932 14 Dtool_l5yHbQ4I 0 4 973 3117 0 14 Dtool_l5yHbQ4I 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSegment::set_p1
//       Access: Published
//  Description: Sets the end point of the segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3405  1 p 1 3139  
933 14 Dtool_l5yHRLKW 0 7 975 3408 2376 14 Dtool_l5yHRLKW 712 // Filename: physxCapsule.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
934 14 Dtool_l5yHbcXA 0 7 975 3408 2376 14 Dtool_l5yHbcXA 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 7 segment 1 3406  6 radius 1 3137  
935 14 Dtool_l5yHVb1g 0 4 977 3117 0 14 Dtool_l5yHVb1g 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_direction
//       Access: Published
//  Description: Returns the direction vector from the segment's
//               start point to it's end point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3185  3 dir 1 3139  
936 14 Dtool_l5yH2Frh 0 6 978 3137 0 14 Dtool_l5yH2Frh 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_length
//       Access: Published
//  Description: Returns the distance from the segment's start point
//               to it's end point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
937 14 Dtool_l5yHCRVM 0 4 979 3117 0 14 Dtool_l5yHCRVM 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_point
//       Access: Published
//  Description: Computes a point on the segment. 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3185  1 p 1 3139  1 t 1 3137  
938 14 Dtool_l5yHL0rt 0 6 980 3137 0 14 Dtool_l5yHL0rt 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::compute_square_length
//       Access: Published
//  Description: Returns the square distance from the segment's
//               start point to it's end point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
939 14 Dtool_l5yH6YSG 0 7 981 3139 0 14 Dtool_l5yH6YSG 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_origin
//       Access: Published
//  Description: Returns the start point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
940 14 Dtool_l5yHdxIM 0 4 982 3117 0 14 Dtool_l5yHdxIM 317 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_origin_direction
//       Access: Published
//  Description: Setup this capsule from origin (start point) and
//               direction vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3408  6 origin 1 3131  9 direction 1 3150  
941 14 Dtool_l5yH7WY4 0 6 983 3137 0 14 Dtool_l5yH7WY4 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_radius
//       Access: Published
//  Description: Returns the capsule's radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
942 14 Dtool_l5yHJSpB 0 7 984 3139 0 14 Dtool_l5yHJSpB 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_p0
//       Access: Published
//  Description: Returns the start point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
943 14 Dtool_l5yHKrph 0 7 985 3139 0 14 Dtool_l5yHKrph 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::get_p1
//       Access: Published
//  Description: Returns the end point of the segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3185  
944 14 Dtool_l5yH82zf 0 4 986 3117 0 14 Dtool_l5yH82zf 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_radius
//       Access: Published
//  Description: Sets the capsule's radius.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3408  5 value 1 3137  
945 14 Dtool_l5yHWnoo 0 4 987 3117 0 14 Dtool_l5yHWnoo 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_p0
//       Access: Published
//  Description: Sets the start point of the segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3408  1 p 1 3139  
946 14 Dtool_l5yHL4pI 0 4 988 3117 0 14 Dtool_l5yHL4pI 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsule::set_p1
//       Access: Published
//  Description: Sets the end point of the segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3408  1 p 1 3139  
947 14 Dtool_l5yHd4c7 0 7 990 3409 2390 14 Dtool_l5yHd4c7 740 // Filename: physxCapsuleControllerDesc.I
// Created by:  enn0x (22Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
948 14 Dtool_l5yHwGCg 0 4 992 3117 0 14 Dtool_l5yHwGCg 0 2 4 this 3 3409  6 radius 1 3137  
949 14 Dtool_l5yHMpH2 0 4 993 3117 0 14 Dtool_l5yHMpH2 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3409  6 height 1 3137  
950 14 Dtool_l5yHtiLm 0 6 994 3137 0 14 Dtool_l5yHtiLm 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3410  
951 14 Dtool_l5yHi4Q8 0 6 995 3137 0 14 Dtool_l5yHi4Q8 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleControllerDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3410  
952 14 Dtool_l5yHBi9X 0 7 997 3204 2396 14 Dtool_l5yHBi9X 750 // Filename: physxCapsuleForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
953 14 Dtool_l5yHVA8A 0 4 999 3117 0 14 Dtool_l5yHVA8A 326 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::set_radius
//       Access: Published
//  Description: Sets the radius of the capsule's hemispherical
//               ends and its trunk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3204  6 radius 1 3137  
954 14 Dtool_l5yHjXJt 0 4 1000 3117 0 14 Dtool_l5yHjXJt 328 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3204  6 height 1 3137  
955 14 Dtool_l5yHi0PN 0 6 1001 3137 0 14 Dtool_l5yHi0PN 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3412  
956 14 Dtool_l5yHWEZ5 0 6 1002 3137 0 14 Dtool_l5yHWEZ5 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleForceFieldShapeDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3412  
957 14 Dtool_l5yHClWj 0 7 1004 3208 0 14 Dtool_l5yHClWj 730 // Filename: physxCapsuleShapeDesc.I
// Created by:  enn0x (11Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
958 14 Dtool_l5yHJfvO 0 4 1005 3117 0 14 Dtool_l5yHJfvO 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::set_radius
//       Access: Published
//  Description: Sets the radius of the capsule's hemispherical
//               ends and its trunk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3208  6 radius 1 3137  
959 14 Dtool_l5yH8Mx5 0 4 1006 3117 0 14 Dtool_l5yH8Mx5 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::set_height
//       Access: Published
//  Description: Sets the distance between the two hemispherical
//               ends of the capsule.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3208  6 height 1 3137  
960 14 Dtool_l5yHsLzR 0 6 1007 3137 0 14 Dtool_l5yHsLzR 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::get_radius
//       Access: Published
//  Description: The radius of the capsule's hemispherical ends
//               and its trunk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3414  
961 14 Dtool_l5yH_828 0 6 1008 3137 0 14 Dtool_l5yH_828 313 ////////////////////////////////////////////////////////////////////
//     Function: PhysxCapsuleShapeDesc::get_height
//       Access: Published
//  Description: The distance between the two hemispherical ends
//               of the capsule.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3414  
962 14 Dtool_l5yHHags 0 7 1010 3339 2407 14 Dtool_l5yHHags 716 // Filename: physxClothDesc.I
// Created by:  enn0x (30Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
963 14 Dtool_l5yHvhpT 0 4 1012 3117 0 14 Dtool_l5yHvhpT 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3339  
964 14 Dtool_l5yHJNZh 0 6 1013 3120 0 14 Dtool_l5yHJNZh 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
965 14 Dtool_l5yHZPtF 0 4 1014 3117 0 14 Dtool_l5yHZPtF 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_cloth_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  4 mesh 1 3215  
966 14 Dtool_l5yHWd6b 0 4 1015 3117 0 14 Dtool_l5yHWd6b 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  4 name 1 3114  
967 14 Dtool_l5yHpCGX 0 4 1016 3117 0 14 Dtool_l5yHpCGX 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  3 pos 1 3131  
968 14 Dtool_l5yHm_YZ 0 4 1017 3117 0 14 Dtool_l5yHm_YZ 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  3 mat 1 3134  
969 14 Dtool_l5yHKZJm 0 4 1018 3117 0 14 Dtool_l5yHKZJm 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_global_hpr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3339  1 h 1 3137  1 p 1 3137  1 r 1 3137  
970 14 Dtool_l5yHJC5z 0 4 1019 3117 0 14 Dtool_l5yHJC5z 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_thickness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  9 thickness 1 3137  
971 14 Dtool_l5yH_nG0 0 4 1020 3117 0 14 Dtool_l5yH_nG0 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_density
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  7 density 1 3137  
972 14 Dtool_l5yHgO01 0 4 1021 3117 0 14 Dtool_l5yHgO01 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_bending_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  9 stiffness 1 3137  
973 14 Dtool_l5yHreLG 0 4 1022 3117 0 14 Dtool_l5yHreLG 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_stretching_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  9 stiffness 1 3137  
974 14 Dtool_l5yHzhLq 0 4 1023 3117 0 14 Dtool_l5yHzhLq 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_damping_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  7 damping 1 3137  
975 14 Dtool_l5yH_sxN 0 4 1024 3117 0 14 Dtool_l5yH_sxN 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_friction
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  8 friction 1 3137  
976 14 Dtool_l5yHKbFZ 0 4 1025 3117 0 14 Dtool_l5yHKbFZ 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_pressure
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  8 pressure 1 3137  
977 14 Dtool_l5yHdVSG 0 4 1026 3117 0 14 Dtool_l5yHdVSG 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_tear_factor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  10 tearFactor 1 3137  
978 14 Dtool_l5yHS08_ 0 4 1027 3117 0 14 Dtool_l5yHS08_ 374 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_solver_iterations
//       Access: Published
//  Description: Number of solver iterations.
//               Small numbers make the simulation faster while 
//               the cloth gets less stiff.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3339  11 interations 1 3138  
979 14 Dtool_l5yH36ux 0 4 1028 3117 0 14 Dtool_l5yH36ux 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual ClothFlag flags.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3339  4 flag 1 2967  5 value 1 3120  
980 14 Dtool_l5yH8OqH 0 6 1029 3114 0 14 Dtool_l5yH8OqH 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
981 14 Dtool_l5yH5JsA 0 7 1030 3139 0 14 Dtool_l5yH5JsA 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_global_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
982 14 Dtool_l5yHisHm 0 7 1031 3140 0 14 Dtool_l5yHisHm 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_global_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
983 14 Dtool_l5yHPulq 0 6 1032 3137 0 14 Dtool_l5yHPulq 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_thickness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
984 14 Dtool_l5yH5uLN 0 6 1033 3137 0 14 Dtool_l5yH5uLN 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_density
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
985 14 Dtool_l5yHxJ8J 0 6 1034 3137 0 14 Dtool_l5yHxJ8J 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_bending_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
986 14 Dtool_l5yHtmPw 0 6 1035 3137 0 14 Dtool_l5yHtmPw 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_stretching_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
987 14 Dtool_l5yHp5v0 0 6 1036 3137 0 14 Dtool_l5yHp5v0 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_damping_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
988 14 Dtool_l5yHAavI 0 6 1037 3137 0 14 Dtool_l5yHAavI 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_friction
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
989 14 Dtool_l5yHLwCU 0 6 1038 3137 0 14 Dtool_l5yHLwCU 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_pressure
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
990 14 Dtool_l5yHoo7w 0 6 1039 3137 0 14 Dtool_l5yHoo7w 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_tear_factor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
991 14 Dtool_l5yH86_i 0 6 1040 3138 0 14 Dtool_l5yH86_i 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_solver_iterations
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3416  
992 14 Dtool_l5yHhu7R 0 6 1041 3120 0 14 Dtool_l5yHhu7R 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3416  4 flag 1 2967  
993 14 Dtool_l5yHcrKE 0 7 1043 3418 2439 14 Dtool_l5yHcrKE 715 // Filename: physxMeshPool.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
994 14 Dtool_l5yHn5vx 0 7 1045 3227 0 14 Dtool_l5yHn5vx 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_convex_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3216  
995 14 Dtool_l5yH7yV_ 0 7 1046 3371 0 14 Dtool_l5yH7yV_ 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_triangle_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3216  
996 14 Dtool_l5yH1hI1 0 7 1047 3215 0 14 Dtool_l5yH1hI1 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_cloth_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3216  
997 14 Dtool_l5yHXnqN 0 7 1048 3351 0 14 Dtool_l5yHXnqN 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::load_soft_body_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3216  
998 14 Dtool_l5yHVsSq 0 6 1049 3120 0 14 Dtool_l5yHVsSq 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_convex_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 mesh 1 3227  
999 14 Dtool_l5yH_4zD 0 6 1050 3120 0 14 Dtool_l5yH_4zD 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_triangle_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 mesh 1 3371  
1000 14 Dtool_l5yHDhUE 0 6 1051 3120 0 14 Dtool_l5yHDhUE 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_cloth_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 mesh 1 3215  
1001 14 Dtool_l5yHorEC 0 6 1052 3120 0 14 Dtool_l5yHorEC 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::release_soft_body_mesh
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 mesh 1 3351  
1002 14 Dtool_l5yHwcf4 0 4 1053 3117 0 14 Dtool_l5yHwcf4 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::list_content
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1003 14 Dtool_l5yHjtuj 0 4 1053 3117 0 14 Dtool_l5yHjtuj 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMeshPool::list_content
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 3 out 1 3121  
1004 14 Dtool_l5yHaK_I 0 7 1055 3419 2450 14 Dtool_l5yHaK_I 721 // Filename: physxClothMeshDesc.I
// Created by:  enn0x (28Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1005 14 Dtool_l5yHWHKR 0 6 1057 3120 0 14 Dtool_l5yHWHKR 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3420  
1006 14 Dtool_l5yHLjv0 0 4 1058 3117 0 14 Dtool_l5yHLjv0 524 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this triangle mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3419  1 n 1 3138  
1007 14 Dtool_l5yHoIIC 0 4 1059 3117 0 14 Dtool_l5yHoIIC 350 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3419  3 idx 1 3138  4 vert 1 3131  8 texcoord 1 3422  
1008 14 Dtool_l5yHz3O4 0 4 1060 3117 0 14 Dtool_l5yHz3O4 425 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_num_triangles
//       Access: Published
//  Description: Sets the number of triangles to be stored in this
//               triangle mesh.
//
//               This method must be called before any calls to
//               set_triangle are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3419  1 n 1 3138  
1009 14 Dtool_l5yH4Ty_ 0 4 1061 3117 0 14 Dtool_l5yH4Ty_ 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_triangles
//       Access: Published
//  Description: Sets a single triangle, by providing the three
//               indices i1, i2, i3.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3419  3 idx 1 3138  2 i1 1 3138  2 i2 1 3138  2 i3 1 3138  
1010 14 Dtool_l5yHQyhb 0 4 1062 3117 0 14 Dtool_l5yHQyhb 676 ////////////////////////////////////////////////////////////////////
//     Function: PhysxClothMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the triangle mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
//               - set_num_triangles
//               - set_triangle
//////////////////////////////////////////////////////////////////// 2 4 this 3 3419  2 np 1 3144  
1011 14 Dtool_l5yHaYXq 0 7 1064 3345 2458 14 Dtool_l5yHaYXq 736 // Filename: physxConstraintDominance.I
// Created by:  enn0x (22Dec09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 2 d0 1 3137  2 d1 1 3137  
1012 14 Dtool_l5yHXN4T 0 6 1066 3137 0 14 Dtool_l5yHXN4T 0 1 4 this 3 3425  
1013 14 Dtool_l5yHXUGV 0 6 1067 3137 0 14 Dtool_l5yHXUGV 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::get_1
//       Access: Published
//  Description: Returns the second dominance factor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3425  
1014 14 Dtool_l5yHkA_Y 0 4 1068 3117 0 14 Dtool_l5yHkA_Y 263 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::set_0
//       Access: Published
//  Description: Sets the first dominance factor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3345  2 d0 1 3137  
1015 14 Dtool_l5yHkLMa 0 4 1069 3117 0 14 Dtool_l5yHkLMa 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConstraintDominance::set_1
//       Access: Published
//  Description: Sets the second dominance factor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3345  2 d1 1 3137  
1016 14 Dtool_l5yHZ30j 0 7 1071 3231 2464 14 Dtool_l5yHZ30j 748 // Filename: physxConvexForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1017 14 Dtool_l5yHHwDq 0 4 1073 3117 0 14 Dtool_l5yHHwDq 288 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexForceFieldShapeDesc::set_mesh
//       Access: Published
//  Description: Sets the convex mesh for this force field shape.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3231  4 mesh 1 3227  
1018 14 Dtool_l5yH6_v0 0 7 1075 3427 2467 14 Dtool_l5yH6_v0 723 // Filename: physxConvexMeshDesc.I
// Created by:  enn0x (11Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1019 14 Dtool_l5yHD_2S 0 6 1077 3120 0 14 Dtool_l5yHD_2S 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3428  
1020 14 Dtool_l5yHka8G 0 4 1078 3117 0 14 Dtool_l5yHka8G 635 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this convex mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
//
//               The number of vertices in a single convex mesh has
//               to be smaller than 256.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3427  1 n 1 3138  
1021 14 Dtool_l5yHqMEj 0 4 1079 3117 0 14 Dtool_l5yHqMEj 351 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3427  3 idx 1 3138  4 vert 1 3131  
1022 14 Dtool_l5yHCu8f 0 4 1080 3117 0 14 Dtool_l5yHCu8f 606 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the convex mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
//////////////////////////////////////////////////////////////////// 2 4 this 3 3427  2 np 1 3144  
1023 14 Dtool_l5yHNqAG 0 7 1082 3235 0 14 Dtool_l5yHNqAG 728 // Filename: physxConvexShapeDesc.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1024 14 Dtool_l5yHpZgH 0 4 1083 3117 0 14 Dtool_l5yHpZgH 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxConvexShapeDesc::set_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3235  4 mesh 1 3227  
1025 14 Dtool_l5yHznxC 0 4 1087 3117 0 14 Dtool_l5yHznxC 0 1 4 this 3 3336  
1026 14 Dtool_l5yHpQgQ 0 6 1088 3120 0 14 Dtool_l5yHpQgQ 0 1 4 this 3 3430  
1027 14 Dtool_l5yHTaCL 0 4 1089 3117 0 14 Dtool_l5yHTaCL 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_name
//       Access: Published
//  Description: Sets a possible debug name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  4 name 1 3114  
1028 14 Dtool_l5yHaRr_ 0 4 1090 3117 0 14 Dtool_l5yHaRr_ 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_joint_flag
//       Access: Published
//  Description: Set or clear a single JointFlag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3336  4 flag 1 2978  5 value 1 3120  
1029 14 Dtool_l5yH2jbb 0 4 1091 3117 0 14 Dtool_l5yH2jbb 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_max_force
//       Access: Published
//  Description: Set a possible debug name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  5 force 1 3137  
1030 14 Dtool_l5yH0IK3 0 4 1092 3117 0 14 Dtool_l5yH0IK3 366 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_max_torque
//       Access: Published
//  Description: Set the maximum angular force (torque) that the
//               joint can withstand before breaking, must be
//               positive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  6 torque 1 3137  
1031 14 Dtool_l5yHnAmT 0 4 1093 3117 0 14 Dtool_l5yHnAmT 323 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_solver_extrapolation_factor
//       Access: Published
//  Description: Set the extrapolation factor for solving joint
//               constraints.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  6 factor 1 3137  
1032 14 Dtool_l5yHRvly 0 4 1094 3117 0 14 Dtool_l5yHRvly 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_global_axis
//       Access: Published
//  Description: Set the local axis/normal using a world space axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  4 axis 1 3150  
1033 14 Dtool_l5yH0vox 0 4 1095 3117 0 14 Dtool_l5yH0vox 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_global_anchor
//       Access: Published
//  Description: Set the anchor using a world space point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3336  6 anchor 1 3131  
1034 14 Dtool_l5yHUXG6 0 4 1096 3117 0 14 Dtool_l5yHUXG6 372 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_normal
//       Access: Published
//  Description: Set the X axis of joint space, in actor[i]'s space,
//               orthogonal to localAxis[i].
//               idx must be either 0 or 1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3336  3 idx 1 3138  6 normal 1 3150  
1035 14 Dtool_l5yHN_S0 0 4 1097 3117 0 14 Dtool_l5yHN_S0 382 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_axis
//       Access: Published
//  Description: Set the Z axis of joint space, in actor[i]'s space.
//               This is the primary axis of the joint. 
//               idx must be either 0 or 1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3336  3 idx 1 3138  4 axis 1 3150  
1036 14 Dtool_l5yH6ZPK 0 4 1098 3117 0 14 Dtool_l5yH6ZPK 330 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_local_anchor
//       Access: Published
//  Description: Set the attachment point of joint in actor[i]'s
//               space. idx must be either 0 or 1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3336  3 idx 1 3138  6 anchor 1 3131  
1037 14 Dtool_l5yHPwQk 0 4 1099 3117 0 14 Dtool_l5yHPwQk 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::set_actor
//       Access: Published
//  Description: Set the two actors connected by the joint.
//               idx must be either 0 or 1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3336  3 idx 1 3138  5 actor 1 3127  
1038 14 Dtool_l5yHF5y2 0 6 1100 3114 0 14 Dtool_l5yHF5y2 224 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3430  
1039 14 Dtool_l5yHlie2 0 6 1101 3120 0 14 Dtool_l5yHlie2 0 2 4 this 3 3430  4 flag 1 2978  
1040 14 Dtool_l5yHjKHS 0 6 1102 3137 0 14 Dtool_l5yHjKHS 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_max_force
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3430  
1041 14 Dtool_l5yHeCvl 0 6 1103 3137 0 14 Dtool_l5yHeCvl 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_max_torque
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3430  
1042 14 Dtool_l5yHAVyT 0 6 1104 3137 0 14 Dtool_l5yHAVyT 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_solver_extrapolation_factor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3430  
1043 14 Dtool_l5yHOTmE 0 7 1105 3157 0 14 Dtool_l5yHOTmE 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_normal
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3430  3 idx 1 3138  
1044 14 Dtool_l5yHzCM2 0 7 1106 3157 0 14 Dtool_l5yHzCM2 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_axis
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3430  3 idx 1 3138  
1045 14 Dtool_l5yH2uFt 0 7 1107 3139 0 14 Dtool_l5yH2uFt 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_local_anchor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3430  3 idx 1 3138  
1046 14 Dtool_l5yHUsaf 0 7 1108 3126 1514 14 Dtool_l5yHUsaf 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDesc::get_actor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3430  3 idx 1 3138  
1047 14 Dtool_l5yHbN2h 0 6 1085 3158 0 14 Dtool_l5yHbN2h 0 1 4 this 3 3336  
1048 14 Dtool_l5yHscCX 0 6 1086 3336 0 14 Dtool_l5yHscCX 0 1 4 this 3 3158  
1049 14 Dtool_l5yHEyG4 0 7 1110 3242 2499 14 Dtool_l5yHEyG4 738 // Filename: physxCylindricalJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxCylindricalJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1050 14 Dtool_l5yHxqF1 0 7 1113 3248 2501 14 Dtool_l5yHxqF1 720 // Filename: physxD6JointDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1051 14 Dtool_l5yHJDzt 0 4 1115 3117 0 14 Dtool_l5yHJDzt 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single D6JointFlag flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3248  4 flag 1 2971  5 value 1 3120  
1052 14 Dtool_l5yH9ZZq 0 4 1116 3117 0 14 Dtool_l5yH9ZZq 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  8 distance 1 3137  
1053 14 Dtool_l5yHYAVc 0 4 1117 3117 0 14 Dtool_l5yHYAVc 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_angle
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 angle 1 3137  
1054 14 Dtool_l5yH4zyH 0 4 1118 3117 0 14 Dtool_l5yH4zyH 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_gear_ratio
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 ratio 1 3137  
1055 14 Dtool_l5yHo6np 0 4 1119 3117 0 14 Dtool_l5yHo6np 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_position
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  3 pos 1 3131  
1056 14 Dtool_l5yHcPWj 0 4 1120 3117 0 14 Dtool_l5yHcPWj 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_linear_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  1 v 1 3150  
1057 14 Dtool_l5yH_2Dg 0 4 1121 3117 0 14 Dtool_l5yH_2Dg 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_angular_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  1 v 1 3150  
1058 14 Dtool_l5yHe83P 0 4 1122 3117 0 14 Dtool_l5yHe83P 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_drive_orientation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  4 quat 1 3251  
1059 14 Dtool_l5yHxD_V 0 4 1123 3117 0 14 Dtool_l5yHxD_V 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  4 mode 1 2980  
1060 14 Dtool_l5yH_m7D 0 4 1124 3117 0 14 Dtool_l5yH_m7D 0 2 4 this 3 3248  7 xMotion 1 2972  
1061 14 Dtool_l5yHzmX8 0 4 1125 3117 0 14 Dtool_l5yHzmX8 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_y_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  7 yMotion 1 2972  
1062 14 Dtool_l5yH2mz0 0 4 1126 3117 0 14 Dtool_l5yH2mz0 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_z_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  7 zMotion 1 2972  
1063 14 Dtool_l5yHJFMQ 0 4 1127 3117 0 14 Dtool_l5yHJFMQ 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing1_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  7 xMotion 1 2972  
1064 14 Dtool_l5yHHFEB 0 4 1128 3117 0 14 Dtool_l5yHHFEB 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing2_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  7 yMotion 1 2972  
1065 14 Dtool_l5yH1pB_ 0 4 1129 3117 0 14 Dtool_l5yH1pB_ 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  7 zMotion 1 2972  
1066 14 Dtool_l5yHzOph 0 4 1130 3117 0 14 Dtool_l5yHzOph 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_x_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1067 14 Dtool_l5yHMPFa 0 4 1131 3117 0 14 Dtool_l5yHMPFa 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_y_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1068 14 Dtool_l5yHJPhS 0 4 1132 3117 0 14 Dtool_l5yHJPhS 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_z_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1069 14 Dtool_l5yHX5o_ 0 4 1133 3117 0 14 Dtool_l5yHX5o_ 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1070 14 Dtool_l5yHO6_4 0 4 1134 3117 0 14 Dtool_l5yHO6_4 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1071 14 Dtool_l5yHGpvX 0 4 1135 3117 0 14 Dtool_l5yHGpvX 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_slerp_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 drive 1 3432  
1072 14 Dtool_l5yHeBKh 0 4 1136 3117 0 14 Dtool_l5yHeBKh 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_linear_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 limit 1 3434  
1073 14 Dtool_l5yHSj5B 0 4 1137 3117 0 14 Dtool_l5yHSj5B 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing1_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 limit 1 3434  
1074 14 Dtool_l5yHbjxy 0 4 1138 3117 0 14 Dtool_l5yHbjxy 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_swing2_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 limit 1 3434  
1075 14 Dtool_l5yHkWOr 0 4 1139 3117 0 14 Dtool_l5yHkWOr 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_limit_low
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 limit 1 3434  
1076 14 Dtool_l5yHCxaa 0 4 1140 3117 0 14 Dtool_l5yHCxaa 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::set_twist_limit_high
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3248  5 limit 1 3434  
1077 14 Dtool_l5yHJ0cD 0 6 1141 3120 0 14 Dtool_l5yHJ0cD 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3249  4 flag 1 2971  
1078 14 Dtool_l5yHKmUr 0 6 1142 3137 0 14 Dtool_l5yHKmUr 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1079 14 Dtool_l5yHAAfe 0 6 1143 3137 0 14 Dtool_l5yHAAfe 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_angle
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1080 14 Dtool_l5yHLvKb 0 6 1144 3137 0 14 Dtool_l5yHLvKb 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_gear_ratio
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1081 14 Dtool_l5yH0Big 0 7 1145 3139 0 14 Dtool_l5yH0Big 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_position
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1082 14 Dtool_l5yHxTpv 0 7 1146 3157 0 14 Dtool_l5yHxTpv 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_linear_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1083 14 Dtool_l5yHV3IV 0 7 1147 3157 0 14 Dtool_l5yHV3IV 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_angular_velocity
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1084 14 Dtool_l5yH6LEB 0 7 1148 3142 0 14 Dtool_l5yH6LEB 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_drive_orientation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1085 14 Dtool_l5yHVlE0 0 6 1149 2980 0 14 Dtool_l5yHVlE0 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_projection_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1086 14 Dtool_l5yH3lAg 0 6 1150 2972 0 14 Dtool_l5yH3lAg 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_x_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1087 14 Dtool_l5yHslcY 0 6 1151 2972 0 14 Dtool_l5yHslcY 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_y_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1088 14 Dtool_l5yHpl4Q 0 6 1152 2972 0 14 Dtool_l5yHpl4Q 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_z_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1089 14 Dtool_l5yHD2Sc 0 6 1153 2972 0 14 Dtool_l5yHD2Sc 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing1_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1090 14 Dtool_l5yH1xKN 0 6 1154 2972 0 14 Dtool_l5yH1xKN 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing2_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1091 14 Dtool_l5yHNnHC 0 6 1155 2972 0 14 Dtool_l5yHNnHC 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_motion
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1092 14 Dtool_l5yH3QyG 0 7 1156 3436 2555 14 Dtool_l5yH3QyG 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_x_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1093 14 Dtool_l5yHzQO_ 0 7 1157 3436 2555 14 Dtool_l5yHzQO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_y_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1094 14 Dtool_l5yH4Qq3 0 7 1158 3436 2555 14 Dtool_l5yH4Qq3 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_z_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1095 14 Dtool_l5yHZSOr 0 7 1159 3436 2555 14 Dtool_l5yHZSOr 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1096 14 Dtool_l5yHwckk 0 7 1160 3436 2555 14 Dtool_l5yHwckk 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1097 14 Dtool_l5yHJkVD 0 7 1161 3436 2555 14 Dtool_l5yHJkVD 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_slerp_drive
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1098 14 Dtool_l5yHb_8r 0 7 1162 3437 2565 14 Dtool_l5yHb_8r 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_linear_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1099 14 Dtool_l5yHhpsM 0 7 1163 3437 2565 14 Dtool_l5yHhpsM 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing1_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1100 14 Dtool_l5yHYqk9 0 7 1164 3437 2565 14 Dtool_l5yHYqk9 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_swing2_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1101 14 Dtool_l5yHoQNq 0 7 1165 3437 2565 14 Dtool_l5yHoQNq 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_limit_low
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1102 14 Dtool_l5yH_VZk 0 7 1166 3437 2565 14 Dtool_l5yH_VZk 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxD6JointDesc::get_twist_limit_high
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3249  
1103 14 Dtool_l5yH5yjO 0 7 1168 3436 2555 14 Dtool_l5yH5yjO 726 // Filename: physxJointDriveDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1104 14 Dtool_l5yH3wZt 0 7 1168 3436 2555 14 Dtool_l5yH3wZt 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 5 sping 1 3137  7 damping 1 3137  10 forceLimit 1 3137  
1105 14 Dtool_l5yHaFQ_ 0 4 1170 3117 0 14 Dtool_l5yHaFQ_ 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_drive_type
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3436  4 type 1 2970  
1106 14 Dtool_l5yHeC4I 0 4 1171 3117 0 14 Dtool_l5yHeC4I 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3436  6 spring 1 3137  
1107 14 Dtool_l5yH6RSf 0 4 1172 3117 0 14 Dtool_l5yH6RSf 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_damping
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3436  7 damping 1 3137  
1108 14 Dtool_l5yHNyve 0 4 1173 3117 0 14 Dtool_l5yHNyve 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::set_force_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3436  5 limit 1 3137  
1109 14 Dtool_l5yHqHDb 0 6 1174 2970 0 14 Dtool_l5yHqHDb 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_drive_type
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3432  
1110 14 Dtool_l5yHMs84 0 6 1175 3137 0 14 Dtool_l5yHMs84 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3432  
1111 14 Dtool_l5yHVreR 0 6 1176 3137 0 14 Dtool_l5yHVreR 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_damping
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3432  
1112 14 Dtool_l5yHfTC0 0 6 1177 3137 0 14 Dtool_l5yHfTC0 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointDriveDesc::get_force_limit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3432  
1113 14 Dtool_l5yHDo1I 0 7 1179 3437 2565 14 Dtool_l5yHDo1I 734 // Filename: physxJointLimitSoftDesc.I
// Created by:  enn0x (01Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1114 14 Dtool_l5yHWbCz 0 7 1179 3437 2565 14 Dtool_l5yHWbCz 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 5 value 1 3137  11 restitution 1 3137  6 spring 1 3137  7 damping 1 3137  
1115 14 Dtool_l5yHmYeM 0 4 1181 3117 0 14 Dtool_l5yHmYeM 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3437  5 value 1 3137  
1116 14 Dtool_l5yHNN7o 0 4 1182 3117 0 14 Dtool_l5yHNN7o 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_restitution
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3437  11 restitution 1 3137  
1117 14 Dtool_l5yHmYmK 0 4 1183 3117 0 14 Dtool_l5yHmYmK 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3437  6 spring 1 3137  
1118 14 Dtool_l5yH9YAc 0 4 1184 3117 0 14 Dtool_l5yH9YAc 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::set_damping
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3437  7 damping 1 3137  
1119 14 Dtool_l5yHGAun 0 6 1185 3137 0 14 Dtool_l5yHGAun 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3434  
1120 14 Dtool_l5yHhLOG 0 6 1186 3137 0 14 Dtool_l5yHhLOG 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_restitution
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3434  
1121 14 Dtool_l5yH1lmV 0 6 1187 3137 0 14 Dtool_l5yH1lmV 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3434  
1122 14 Dtool_l5yHUqJf 0 6 1188 3137 0 14 Dtool_l5yHUqJf 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitSoftDesc::get_damping
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3434  
1123 14 Dtool_l5yHNP33 0 7 1190 3257 2575 14 Dtool_l5yHNP33 732 // Filename: physxDistanceJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1124 14 Dtool_l5yHRz46 0 4 1192 3117 0 14 Dtool_l5yHRz46 0 2 4 this 3 3257  8 distance 1 3137  
1125 14 Dtool_l5yHhu_u 0 4 1193 3117 0 14 Dtool_l5yHhu_u 334 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_min_distance
//       Access: Published
//  Description: Sets the minimum rest length of the rope or rod
//               between the two anchor points
//////////////////////////////////////////////////////////////////// 2 4 this 3 3257  8 distance 1 3137  
1126 14 Dtool_l5yHxAAn 0 4 1194 3117 0 14 Dtool_l5yHxAAn 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_spring
//       Access: Published
//  Description: Makes the joint springy. The spring.targetValue
//               is not used. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3257  6 spring 1 3320  
1127 14 Dtool_l5yHOmbQ 0 4 1195 3117 0 14 Dtool_l5yHOmbQ 279 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single DistanceJointFlag flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3257  4 flag 1 2973  5 value 1 3120  
1128 14 Dtool_l5yHJuSf 0 6 1196 3137 0 14 Dtool_l5yHJuSf 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_max_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3258  
1129 14 Dtool_l5yHZCZT 0 6 1197 3137 0 14 Dtool_l5yHZCZT 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_min_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3258  
1130 14 Dtool_l5yH5R0Z 0 6 1198 3120 0 14 Dtool_l5yH5R0Z 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_flag
//       Access: Published
//  Description: Return a single DistanceJointFlag flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3258  4 flag 1 2973  
1131 14 Dtool_l5yHTp_c 0 7 1199 3324 2585 14 Dtool_l5yHTp_c 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxDistanceJointDesc::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3258  
1132 14 Dtool_l5yHvraF 0 7 1201 3324 2585 14 Dtool_l5yHvraF 718 // Filename: physxSpringDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1133 14 Dtool_l5yH1Xfs 0 7 1201 3324 2585 14 Dtool_l5yH1Xfs 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 spring 1 3137  6 damper 1 3137  11 targetValue 1 3137  
1134 14 Dtool_l5yHEPof 0 7 1201 3324 2585 14 Dtool_l5yHEPof 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 spring 1 3137  6 damper 1 3137  
1135 14 Dtool_l5yHq7gT 0 7 1201 3324 2585 14 Dtool_l5yHq7gT 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 spring 1 3137  
1136 14 Dtool_l5yHYXKT 0 4 1203 3117 0 14 Dtool_l5yHYXKT 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3324  6 spring 1 3137  
1137 14 Dtool_l5yHDWm9 0 4 1204 3117 0 14 Dtool_l5yHDWm9 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_damper
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3324  6 damper 1 3137  
1138 14 Dtool_l5yHZudl 0 4 1205 3117 0 14 Dtool_l5yHZudl 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::set_target_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3324  6 target 1 3137  
1139 14 Dtool_l5yH5YOU 0 6 1206 3137 0 14 Dtool_l5yH5YOU 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3320  
1140 14 Dtool_l5yHwAp_ 0 6 1207 3137 0 14 Dtool_l5yHwAp_ 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_damper
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3320  
1141 14 Dtool_l5yHsr59 0 6 1208 3137 0 14 Dtool_l5yHsr59 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSpringDesc::get_target_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3320  
1142 14 Dtool_l5yH3ZNU 0 7 1210 3263 2593 14 Dtool_l5yH3ZNU 726 // Filename: physxFixedJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxFixedJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1143 14 Dtool_l5yH_Prn 0 7 1213 3338 2595 14 Dtool_l5yH_Prn 726 // Filename: physxForceFieldDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1144 14 Dtool_l5yHpff6 0 4 1215 3117 0 14 Dtool_l5yHpff6 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3338  
1145 14 Dtool_l5yH588V 0 6 1216 3120 0 14 Dtool_l5yH588V 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3438  
1146 14 Dtool_l5yHuyAL 0 4 1217 3117 0 14 Dtool_l5yHuyAL 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  4 name 1 3114  
1147 14 Dtool_l5yH9qci 0 4 1218 3117 0 14 Dtool_l5yH9qci 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  3 pos 1 3131  
1148 14 Dtool_l5yH4LwY 0 4 1219 3117 0 14 Dtool_l5yH4LwY 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  3 mat 1 3134  
1149 14 Dtool_l5yH_qPE 0 4 1220 3117 0 14 Dtool_l5yH_qPE 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_hpr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3338  1 h 1 3137  1 p 1 3137  1 r 1 3137  
1150 14 Dtool_l5yHGC4g 0 4 1221 3117 0 14 Dtool_l5yHGC4g 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_coordinates
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  11 coordinates 1 2975  
1151 14 Dtool_l5yHmM10 0 4 1222 3117 0 14 Dtool_l5yHmM10 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_actor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  5 actor 1 3126  
1152 14 Dtool_l5yHNMtI 0 4 1223 3117 0 14 Dtool_l5yHNMtI 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_constant
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  8 constant 1 3150  
1153 14 Dtool_l5yHHlwp 0 4 1224 3117 0 14 Dtool_l5yHHlwp 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_position_target
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  6 target 1 3131  
1154 14 Dtool_l5yHn_O_ 0 4 1225 3117 0 14 Dtool_l5yHn_O_ 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_position_multiplier
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  10 multiplier 1 3153  
1155 14 Dtool_l5yHm5Gf 0 4 1226 3117 0 14 Dtool_l5yHm5Gf 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_velocity_target
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  6 target 1 3150  
1156 14 Dtool_l5yHztro 0 4 1227 3117 0 14 Dtool_l5yHztro 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_velocity_multiplier
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  10 multiplier 1 3153  
1157 14 Dtool_l5yH4yd_ 0 4 1228 3117 0 14 Dtool_l5yH4yd_ 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_torus_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  6 radius 1 3137  
1158 14 Dtool_l5yHlMqb 0 4 1229 3117 0 14 Dtool_l5yHlMqb 246 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_falloff_linear
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  7 falloff 1 3150  
1159 14 Dtool_l5yH1Xzr 0 4 1230 3117 0 14 Dtool_l5yH1Xzr 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_falloff_quadratic
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  7 falloff 1 3150  
1160 14 Dtool_l5yHBVvw 0 4 1231 3117 0 14 Dtool_l5yHBVvw 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::set_kernel_noise
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  5 noise 1 3150  
1161 14 Dtool_l5yHT2XM 0 4 1232 3117 0 14 Dtool_l5yHT2XM 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::add_include_group_shape
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  9 shapeDesc 1 3271  
1162 14 Dtool_l5yH9jB3 0 4 1233 3117 0 14 Dtool_l5yH9jB3 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldDesc::add_shape_group
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3338  5 group 1 3169  
1163 14 Dtool_l5yH6drI 0 7 1235 3270 2616 14 Dtool_l5yH6drI 746 // Filename: physxForceFieldShapeGroupDesc.I
// Created by:  enn0x (11Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1164 14 Dtool_l5yHm9bD 0 4 1237 3117 0 14 Dtool_l5yHm9bD 283 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3270  
1165 14 Dtool_l5yHQnVx 0 6 1238 3120 0 14 Dtool_l5yHQnVx 279 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3440  
1166 14 Dtool_l5yHz_I0 0 4 1239 3117 0 14 Dtool_l5yHz_I0 331 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::add_shape
//       Access: Published
//  Description: Adds a shape to the list of force field shapes
//               composing this shape group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3270  4 desc 1 3271  
1167 14 Dtool_l5yHGopF 0 4 1240 3117 0 14 Dtool_l5yHGopF 317 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::set_name
//       Access: Published
//  Description: Sets the optional debug name for the force field
//               shape group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3270  4 name 1 3114  
1168 14 Dtool_l5yHXYH4 0 4 1241 3117 0 14 Dtool_l5yHXYH4 0 3 4 this 3 3270  4 flag 1 2976  5 value 1 3120  
1169 14 Dtool_l5yH1Jjj 0 6 1242 3114 0 14 Dtool_l5yH1Jjj 321 ////////////////////////////////////////////////////////////////////
//     Function: PhysxForceFieldShapeGroupDesc::get_name
//       Access: Published
//  Description: Returns the optional debug name for this force
//               field shape group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3440  
1170 14 Dtool_l5yHiY2V 0 6 1243 3120 0 14 Dtool_l5yHiY2V 0 2 4 this 3 3440  4 flag 1 2976  
1171 14 Dtool_l5yHtATO 0 7 1245 3392 2625 14 Dtool_l5yHtATO 728 // Filename: physxHeightFieldDesc.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1172 14 Dtool_l5yHkMK1 0 4 1247 3117 0 14 Dtool_l5yHkMK1 274 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3392  
1173 14 Dtool_l5yHKOgk 0 6 1248 3120 0 14 Dtool_l5yHKOgk 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3442  
1174 14 Dtool_l5yH8A2K 0 4 1249 3117 0 14 Dtool_l5yH8A2K 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_size
//       Access: Private
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3392  8 num_rows 1 3138  11 num_columns 1 3138  
1175 14 Dtool_l5yHOybL 0 4 1250 3117 0 14 Dtool_l5yHOybL 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_image
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3392  5 image 1 3444  13 materialIndex 1 3176  
1176 14 Dtool_l5yHMpxH 0 4 1250 3117 0 14 Dtool_l5yHMpxH 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_image
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3392  5 image 1 3444  
1177 14 Dtool_l5yHnApE 0 4 1251 3117 0 14 Dtool_l5yHnApE 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_thickness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3392  9 thickness 1 3137  
1178 14 Dtool_l5yHKBz1 0 4 1252 3117 0 14 Dtool_l5yHKBz1 0 2 4 this 3 3392  9 threshold 1 3137  
1179 14 Dtool_l5yHYRI8 0 4 1253 3117 0 14 Dtool_l5yHYRI8 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3392  3 row 1 3138  6 column 1 3138  6 height 1 3447  
1180 14 Dtool_l5yHJQb9 0 4 1254 3117 0 14 Dtool_l5yHJQb9 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_tess_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3392  3 row 1 3138  6 column 1 3138  5 value 1 3176  
1181 14 Dtool_l5yHMwdu 0 4 1255 3117 0 14 Dtool_l5yHMwdu 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldDesc::set_material_index
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 this 3 3392  3 row 1 3138  6 column 1 3138  14 materialIndex0 1 3176  14 materialIndex1 1 3176  
1182 14 Dtool_l5yHV9VK 0 7 1257 3278 0 14 Dtool_l5yHV9VK 738 // Filename: physxHeightFieldShapeDesc.I
// Created by:  enn0x (15Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1183 14 Dtool_l5yHsU5g 0 4 1258 3117 0 14 Dtool_l5yHsU5g 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_height_field
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3278  2 hf 1 3273  
1184 14 Dtool_l5yHVEg9 0 4 1259 3117 0 14 Dtool_l5yHVEg9 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_dimensions
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3278  10 dimensions 1 3150  
1185 14 Dtool_l5yHn5GH 0 4 1260 3117 0 14 Dtool_l5yHn5GH 499 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_hole_material
//       Access: Published
//  Description: Sets the the material index that designates holes
//               in the height field. This number is compared
//               directly to sample materials. Consequently the
//               high 9 bits must be zero.
//               Default value is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3278  5 index 1 3176  
1186 14 Dtool_l5yHU0W1 0 4 1261 3117 0 14 Dtool_l5yHU0W1 458 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::set_material_index_high_bits
//       Access: Published
//  Description: Sets the high 9 bits of this number are used to
//               complete the material indices in the samples. The
//               remaining low 7 bits must be zero.
//               Default value is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3278  5 index 1 3176  
1187 14 Dtool_l5yHyibx 0 6 1262 3176 0 14 Dtool_l5yHyibx 334 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::get_hole_material
//       Access: Published
//  Description: Returns the the material index that designates
//               holes in the height field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3448  
1188 14 Dtool_l5yHXlUY 0 6 1263 3176 0 14 Dtool_l5yHXlUY 369 ////////////////////////////////////////////////////////////////////
//     Function: PhysxHeightFieldShapeDesc::get_material_index_hight_bits
//       Access: Published
//  Description: Returns the high 9 bits of this number are used to
//               complete the material indices in the samples.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3448  
1189 14 Dtool_l5yHJ3hg 0 7 1265 3450 2643 14 Dtool_l5yHJ3hg 726 // Filename: physxJointLimitDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1190 14 Dtool_l5yHH_X_ 0 7 1265 3450 2643 14 Dtool_l5yHH_X_ 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 5 value 1 3137  11 restitution 1 3137  8 hardness 1 3137  
1191 14 Dtool_l5yHaifs 0 4 1267 3117 0 14 Dtool_l5yHaifs 0 2 4 this 3 3450  5 value 1 3137  
1192 14 Dtool_l5yHgZrz 0 4 1268 3117 0 14 Dtool_l5yHgZrz 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::set_restitution
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3450  11 restitution 1 3137  
1193 14 Dtool_l5yHHom6 0 4 1269 3117 0 14 Dtool_l5yHHom6 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::set_hardness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3450  8 hardness 1 3137  
1194 14 Dtool_l5yHBJeg 0 6 1270 3137 0 14 Dtool_l5yHBJeg 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3322  
1195 14 Dtool_l5yH4C_I 0 6 1271 3137 0 14 Dtool_l5yH4C_I 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_restitution
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3322  
1196 14 Dtool_l5yHqxfw 0 6 1272 3137 0 14 Dtool_l5yHqxfw 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxJointLimitDesc::get_hardness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3322  
1197 14 Dtool_l5yHiszP 0 7 1274 3451 2651 14 Dtool_l5yHiszP 713 // Filename: physxKitchen.I
// Created by:  enn0x (12Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1198 14 Dtool_l5yHggBV 0 4 1276 3117 0 14 Dtool_l5yHggBV 0 3 4 this 3 3451  9 skinWidth 1 3137  18 hintCollisionSpeed 1 3120  
1199 14 Dtool_l5yHyht_ 0 7 1277 3227 0 14 Dtool_l5yHyht_ 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_convex_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3451  8 meshDesc 1 3428  
1200 14 Dtool_l5yHEZxn 0 6 1277 3120 0 14 Dtool_l5yHEZxn 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_convex_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3451  8 meshDesc 1 3428  8 filename 1 3216  
1201 14 Dtool_l5yHg4ze 0 7 1278 3371 0 14 Dtool_l5yHg4ze 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_triangle_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3451  8 meshDesc 1 3452  
1202 14 Dtool_l5yHw7Uh 0 6 1278 3120 0 14 Dtool_l5yHw7Uh 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_triangle_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3451  8 meshDesc 1 3452  8 filename 1 3216  
1203 14 Dtool_l5yHbxxc 0 7 1279 3215 0 14 Dtool_l5yHbxxc 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_cloth_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3451  8 meshDesc 1 3420  
1204 14 Dtool_l5yHm1xz 0 6 1279 3120 0 14 Dtool_l5yHm1xz 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_cloth_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3451  8 meshDesc 1 3420  8 filename 1 3216  
1205 14 Dtool_l5yHBDbD 0 7 1280 3351 0 14 Dtool_l5yHBDbD 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_soft_body_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3451  8 meshDesc 1 3454  
1206 14 Dtool_l5yHqLgV 0 6 1280 3120 0 14 Dtool_l5yHqLgV 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_soft_body_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3451  8 meshDesc 1 3454  8 filename 1 3216  
1207 14 Dtool_l5yHDwe5 0 6 1281 3120 0 14 Dtool_l5yHDwe5 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxKitchen::cook_texcoords
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3451  8 meshDesc 1 3420  8 filename 1 3216  
1208 14 Dtool_l5yH1R_d 0 7 1283 3456 2659 14 Dtool_l5yH1R_d 727 // Filename: physxTriangleMeshDesc.I
// Created by:  enn0x (11Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1209 14 Dtool_l5yHu7Uz 0 6 1285 3120 0 14 Dtool_l5yHu7Uz 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3452  
1210 14 Dtool_l5yH7OUt 0 4 1286 3117 0 14 Dtool_l5yH7OUt 527 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this triangle mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3456  1 n 1 3138  
1211 14 Dtool_l5yH_56F 0 4 1287 3117 0 14 Dtool_l5yH_56F 353 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3456  3 idx 1 3138  4 vert 1 3131  
1212 14 Dtool_l5yH5S0K 0 4 1288 3117 0 14 Dtool_l5yH5S0K 428 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_num_triangles
//       Access: Published
//  Description: Sets the number of triangles to be stored in this
//               triangle mesh.
//
//               This method must be called before any calls to
//               set_triangle are done!
//////////////////////////////////////////////////////////////////// 3 4 this 3 3456  1 n 1 3138  20 use_material_indices 1 3120  
1213 14 Dtool_l5yHugeZ 0 4 1288 3117 0 14 Dtool_l5yHugeZ 428 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_num_triangles
//       Access: Published
//  Description: Sets the number of triangles to be stored in this
//               triangle mesh.
//
//               This method must be called before any calls to
//               set_triangle are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3456  1 n 1 3138  
1214 14 Dtool_l5yHNkma 0 4 1289 3117 0 14 Dtool_l5yHNkma 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_triangles
//       Access: Published
//  Description: Sets a single triangle, by providing the three
//               indices i1, i2, i3.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3456  3 idx 1 3138  2 i1 1 3138  2 i2 1 3138  2 i3 1 3138  14 material_index 1 3138  
1215 14 Dtool_l5yH5D_h 0 4 1289 3117 0 14 Dtool_l5yH5D_h 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_triangles
//       Access: Published
//  Description: Sets a single triangle, by providing the three
//               indices i1, i2, i3.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3456  3 idx 1 3138  2 i1 1 3138  2 i2 1 3138  2 i3 1 3138  
1216 14 Dtool_l5yHKr71 0 4 1290 3117 0 14 Dtool_l5yHKr71 679 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshDesc::set_from_node_path
//       Access: Published
//  Description: A convenience method to set the mesh data from
//               a NodePath in a single call. The method iterates
//               over the NodePath geoms and collects data for
//               the triangle mesh.
//
//               Do not use the following function when using this
//               one:
//               - set_num_vertices
//               - set_vertex
//               - set_num_triangles
//               - set_triangle
//////////////////////////////////////////////////////////////////// 2 4 this 3 3456  2 np 1 3144  
1217 14 Dtool_l5yHWKC3 0 7 1292 3457 2667 14 Dtool_l5yHWKC3 727 // Filename: physxSoftBodyMeshDesc.I
// Created by:  enn0x (12Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1218 14 Dtool_l5yHIl5i 0 6 1294 3120 0 14 Dtool_l5yHIl5i 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3454  
1219 14 Dtool_l5yHOm4c 0 4 1295 3117 0 14 Dtool_l5yHOm4c 528 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_num_vertices
//       Access: Published
//  Description: Sets the number of vertices to be stored within
//               this soft body mesh. The function allocates memory
//               for the vertices, but it does not set any vertices.
//
//               This method must be called before any calls to
//               set_vertex are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3457  1 n 1 3138  
1220 14 Dtool_l5yHAce1 0 4 1296 3117 0 14 Dtool_l5yHAce1 353 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_vertex
//       Access: Published
//  Description: Sets a single vertex. You have to call the function
//               set_num_vertices before you can call this function.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3457  3 idx 1 3138  4 vert 1 3131  
1221 14 Dtool_l5yHPBxF 0 4 1297 3117 0 14 Dtool_l5yHPBxF 434 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_num_tetrahedra
//       Access: Published
//  Description: Sets the number of tetrahedra to be stored in this
//               soft body mesh.
//
//               This method must be called before any calls to
//               set_tetrahedron are done!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3457  1 n 1 3138  
1222 14 Dtool_l5yHUuNJ 0 4 1298 3117 0 14 Dtool_l5yHUuNJ 328 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyMeshDesc::set_tetrahedron
//       Access: Published
//  Description: Sets a single tetrahedron, by providing the three
//               indices i1, i2, i3, i4.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3457  3 idx 1 3138  2 i1 1 3138  2 i2 1 3138  2 i3 1 3138  2 i4 1 3138  
1223 14 Dtool_l5yHi7a7 0 7 1300 3391 2674 14 Dtool_l5yHi7a7 716 // Filename: physxSceneDesc.I
// Created by:  enn0x (05Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1224 14 Dtool_l5yHduNQ 0 4 1302 3117 0 14 Dtool_l5yHduNQ 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3391  
1225 14 Dtool_l5yHgl9d 0 6 1303 3120 0 14 Dtool_l5yHgl9d 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1226 14 Dtool_l5yHlJPX 0 4 1304 3117 0 14 Dtool_l5yHlJPX 0 3 4 this 3 3391  4 flag 1 2984  5 value 1 3120  
1227 14 Dtool_l5yHhk1p 0 4 1305 3117 0 14 Dtool_l5yHhk1p 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_gravity
//       Access: Published
//  Description: Sets the gravity vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  7 gravity 1 3150  
1228 14 Dtool_l5yHcH0m 0 4 1306 3117 0 14 Dtool_l5yHcH0m 1021 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_max_bounds
//       Access: Published
//  Description: Set the max scene bounds. 
//
//               If scene bounds are provided (maxBounds in the
//               descriptor), the SDK takes advantage of this
//               information to accelerate scene-level collision
//               queries (e.g. raycasting). When using maxBounds,
//               you have to make sure created objects stay within
//               the scene bounds. In particular, the position of
//               dynamic shapes should stay within the provided
//               bounds. Otherwise the shapes outside the bounds
//               will not be taken into account by all scene queries
//               (raycasting, sweep tests, overlap tests, etc). They
//               will nonetheless still work correctly for the main
//               physics simulation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  6 bounds 1 3182  
1229 14 Dtool_l5yHDLNH 0 4 1307 3117 0 14 Dtool_l5yHDLNH 304 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_static_structure
//       Access: Published
//  Description: Defines the structure used to store static
//               objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 2981  
1230 14 Dtool_l5yHy1Tx 0 4 1308 3117 0 14 Dtool_l5yHy1Tx 398 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_dynamic_structure
//       Access: Published
//  Description: Defines the subdivision level for acceleration
//               structures used for scene queries.
//               This is only used when maxBounds are defined!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 2981  
1231 14 Dtool_l5yHF6XK 0 4 1309 3117 0 14 Dtool_l5yHF6XK 1413 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_bp_type
//       Access: Published
//  Description: Defines which type of broadphase to use.
//
//               (1) BPT_sap_single: A sweep-and-prune (SAP)
//               algorithm to find pairs of potentially colliding
//               shapes.
//
//               (2) BPT_sap_multi: A multi sweep-and-prune
//               algorithm to find pairs of potentially colliding
//               shapes. Uses a configurable 2D grid to divide the
//               scene space into cells. The potentially overlapping
//               shape pairs are detected in each cell and the
//               information is merged together. This approach is
//               usually faster than BPT_sap_single in scenarios
//               with many shapes and a high creation/deletion rate
//               of shapes. However, the amount of memory required
//               is considerably higher depending on the number of
//               grid cells used.
//               The following extra parameters need to be defined: 
//               - PhysxSceneDesc.set_max_bounds
//               - PhysxSceneDesc.set_num_grid_cells_x
//               - PhysxSceneDesc.set_num_grid_cells_y
//               (the scene up direction is set via config options)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 2966  
1232 14 Dtool_l5yHC1ZH 0 4 1310 3117 0 14 Dtool_l5yHC1ZH 399 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_subdivision_level
//       Access: Published
//  Description: Defines the subdivision level for acceleration
//               structures used for scene queries. 
//               This is only used when maxBounds are defined!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 3138  
1233 14 Dtool_l5yHL_2_ 0 4 1311 3117 0 14 Dtool_l5yHL_2_ 498 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_num_grid_cells_x
//       Access: Published
//  Description: Defines the number of broadphase cells along the
//               grid x-axis. Must be power of two. Max is 8 at the
//               moment. The broadphase type must be set to
//               BPT_sap_multi for this parameter to have
//               an effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 3138  
1234 14 Dtool_l5yHIsSC 0 4 1312 3117 0 14 Dtool_l5yHIsSC 498 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::set_num_grid_cells_y
//       Access: Published
//  Description: Defines the number of broadphase cells along the
//               grid y-axis. Must be power of two. Max is 8 at the
//               moment. The broadphase type must be set to
//               BPT_sap_multi for this parameter to have
//               an effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3391  5 value 1 3138  
1235 14 Dtool_l5yHXUc3 0 6 1313 3120 0 14 Dtool_l5yHXUc3 0 2 4 this 3 3458  4 flag 1 2984  
1236 14 Dtool_l5yHwn5V 0 7 1314 3157 0 14 Dtool_l5yHwn5V 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_gravity
//       Access: Published
//  Description: Get the gravity vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1237 14 Dtool_l5yHUbT_ 0 7 1315 3182 2298 14 Dtool_l5yHUbT_ 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_max_bounds
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1238 14 Dtool_l5yHThO9 0 6 1316 2981 0 14 Dtool_l5yHThO9 304 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_static_structure
//       Access: Published
//  Description: Returns the structure used to store static
//               objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1239 14 Dtool_l5yH_vII 0 6 1317 2981 0 14 Dtool_l5yH_vII 335 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_dynamic_structure
//       Access: Published
//  Description: Returns the subdivision level for acceleration
//               structures used for scene queries.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1240 14 Dtool_l5yHJoSr 0 6 1318 2966 0 14 Dtool_l5yHJoSr 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_bp_type
//       Access: Published
//  Description: Returns the type of broadphase to use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1241 14 Dtool_l5yHZscr 0 6 1319 3138 0 14 Dtool_l5yHZscr 336 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_subdivision_level
//       Access: Published
//  Description: Returns the subdivision level for acceleration
//               structures used for scene queries. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1242 14 Dtool_l5yHacQi 0 6 1320 3138 0 14 Dtool_l5yHacQi 314 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_num_grid_cells_x
//       Access: Published
//  Description: Returns the number of broadphase cells along the
//               grid x-axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1243 14 Dtool_l5yHaCsk 0 6 1321 3138 0 14 Dtool_l5yHaCsk 314 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneDesc::get_num_grid_cells_y
//       Access: Published
//  Description: Returns the number of broadphase cells along the
//               grid y-axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3458  
1244 14 Dtool_l5yHE7R0 0 7 1323 3282 2696 14 Dtool_l5yHE7R0 722 // Filename: physxMaterialDesc.I
// Created by:  enn0x (21Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1245 14 Dtool_l5yH8_4R 0 4 1325 3117 0 14 Dtool_l5yH8_4R 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3282  
1246 14 Dtool_l5yH3IyF 0 6 1326 3120 0 14 Dtool_l5yH3IyF 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1247 14 Dtool_l5yHpEkW 0 4 1327 3117 0 14 Dtool_l5yHpEkW 622 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dynamic_friction
//       Access: Published
//  Description: Sets the coefficient of dynamic friction -- should
//               be in [0, +inf]. If set to greater than
//               staticFriction, the effective value of staticFriction
//               will be increased to match.
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 coef 1 3137  
1248 14 Dtool_l5yHY5Av 0 4 1328 3117 0 14 Dtool_l5yHY5Av 481 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_static_friction
//       Access: Published
//  Description: Sets the coefficient of static friction -- should
//               be in [0, +inf].
//               If the flag MF_anisotropic is set, then this value
//               is used for the primary direction of anisotropy
//               (U axis).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 coef 1 3137  
1249 14 Dtool_l5yHzxJz 0 4 1329 3117 0 14 Dtool_l5yHzxJz 571 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_restitution
//       Access: Published
//  Description: Sets the coefficient of restitution -- 0 makes the
//               object bounce as little as possible, higher values
//               up to 1.0 result in more bounce. Note that values
//               close to or above 1 may cause stability problems
//               and/or increasing energy. Range: [0,1]
//               Default: 0.0
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 rest 1 3137  
1250 14 Dtool_l5yHKNUB 0 4 1330 3117 0 14 Dtool_l5yHKNUB 442 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dynamic_friction_v
//       Access: Published
//  Description: Sets the anisotropic dynamic friction coefficient
//               for along the secondary (V) axis of anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 coef 1 3137  
1251 14 Dtool_l5yHZAVs 0 4 1331 3117 0 14 Dtool_l5yHZAVs 440 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_static_friction_v
//       Access: Published
//  Description: Sets the anisotropic static friction coefficient
//               for along the secondary (V) axis of anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 coef 1 3137  
1252 14 Dtool_l5yH_bOz 0 4 1332 3117 0 14 Dtool_l5yH_bOz 403 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_dir_of_anisotropy
//       Access: Published
//  Description: Sets the shape space direction (unit vector) of
//               anisotropy.
//               This is only used if the flag MF_anisotropic is
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  3 dir 1 3150  
1253 14 Dtool_l5yHq7kP 0 4 1333 3117 0 14 Dtool_l5yHq7kP 296 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_flag
//       Access: Published
//  Description: Sets flags which control the behavior of a
//               material.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3282  4 flag 1 2979  5 value 1 3120  
1254 14 Dtool_l5yHXj4Z 0 4 1334 3117 0 14 Dtool_l5yHXj4Z 469 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_friction_combine_mode
//       Access: Published
//  Description: Sets the friction combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 mode 1 2969  
1255 14 Dtool_l5yHU1_d 0 4 1335 3117 0 14 Dtool_l5yHU1_d 475 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::set_restitution_combine_mode
//       Access: Published
//  Description: Sets the restitution combine mode.
//               - CM_average : Average: (a + b)/2.
//               - CM_min : Minimum: min(a,b).
//               - CM_multiply : Multiply: a*b.
//               - CM_max : Maximum: max(a,b).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3282  4 mode 1 2969  
1256 14 Dtool_l5yHk3nb 0 6 1336 3137 0 14 Dtool_l5yHk3nb 283 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dynamic_friction
//       Access: Published
//  Description: Returns the coefficient of dynamic friction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1257 14 Dtool_l5yHdtEF 0 6 1337 3137 0 14 Dtool_l5yHdtEF 281 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_static_friction
//       Access: Published
//  Description: Retruns the coefficient of static friction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1258 14 Dtool_l5yHnCmV 0 6 1338 3137 0 14 Dtool_l5yHnCmV 273 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_restitution
//       Access: Published
//  Description: Returns the coefficient of restitution.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1259 14 Dtool_l5yHgxGW 0 6 1339 3137 0 14 Dtool_l5yHgxGW 375 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dynamic_friction_v
//       Access: Published
//  Description: Returns the anisotropic dynamic friction
//               coefficient for along the secondary (V) axis of
//               anisotropy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1260 14 Dtool_l5yHEW2Q 0 6 1340 3137 0 14 Dtool_l5yHEW2Q 356 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_static_friction_v
//       Access: Published
//  Description: Returns the anisotropic static friction coefficient
//               for along the secondary (V) axis of anisotropy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1261 14 Dtool_l5yHknw_ 0 7 1341 3157 0 14 Dtool_l5yHknw_ 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_dir_of_anisotropy
//       Access: Published
//  Description: Returns the shape space direction (unit vector) of
//               anisotropy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1262 14 Dtool_l5yHBx3B 0 6 1342 3120 0 14 Dtool_l5yHBx3B 299 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_flag
//       Access: Published
//  Description: Returns flags which control the behavior of a
//               material.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3280  4 flag 1 2979  
1263 14 Dtool_l5yH3qZo 0 6 1343 2969 0 14 Dtool_l5yH3qZo 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_friction_combine_mode
//       Access: Published
//  Description: Returns the friction combine mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1264 14 Dtool_l5yHEttB 0 6 1344 2969 0 14 Dtool_l5yHEttB 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMaterialDesc::get_restitution_combine_mode
//       Access: Published
//  Description: Returns the restitution combine mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3280  
1265 14 Dtool_l5yH9QES 0 7 1346 3313 2718 14 Dtool_l5yH9QES 716 // Filename: physxMotorDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1266 14 Dtool_l5yH7pz9 0 7 1346 3313 2718 14 Dtool_l5yH7pz9 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 9 velTarget 1 3137  8 maxForce 1 3137  8 freeSpin 1 3120  
1267 14 Dtool_l5yHzddx 0 7 1346 3313 2718 14 Dtool_l5yHzddx 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 velTarget 1 3137  8 maxForce 1 3137  
1268 14 Dtool_l5yHeprK 0 7 1346 3313 2718 14 Dtool_l5yHeprK 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 velTarget 1 3137  
1269 14 Dtool_l5yH0Lcq 0 4 1348 3117 0 14 Dtool_l5yH0Lcq 0 2 4 this 3 3313  9 velTarget 1 3137  
1270 14 Dtool_l5yHYV56 0 4 1349 3117 0 14 Dtool_l5yHYV56 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::set_max_force
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3313  8 maxForce 1 3137  
1271 14 Dtool_l5yHwuct 0 4 1350 3117 0 14 Dtool_l5yHwuct 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::set_free_spin
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3313  8 freeSpin 1 3120  
1272 14 Dtool_l5yHeEBZ 0 6 1351 3137 0 14 Dtool_l5yHeEBZ 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_vel_target
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3311  
1273 14 Dtool_l5yHUBkx 0 6 1352 3137 0 14 Dtool_l5yHUBkx 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_max_force
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3311  
1274 14 Dtool_l5yHUIo1 0 6 1353 3120 0 14 Dtool_l5yHUIo1 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxMotorDesc::get_free_spin
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3311  
1275 14 Dtool_l5yHSgyg 0 7 1355 3460 2726 14 Dtool_l5yHSgyg 708 // Filename: physxPlane.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1276 14 Dtool_l5yHK_uI 0 7 1355 3460 2726 14 Dtool_l5yHK_uI 222 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 plane 1 3461  
1277 14 Dtool_l5yHlee2 0 6 1357 3137 0 14 Dtool_l5yHlee2 219 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::distance
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3461  1 p 1 3131  
1278 14 Dtool_l5yH2dvY 0 6 1358 3120 0 14 Dtool_l5yH2dvY 218 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::belongs
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3461  1 p 1 3131  
1279 14 Dtool_l5yHDVzk 0 4 1359 3117 0 14 Dtool_l5yHDVzk 220 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::normalize
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3460  
1280 14 Dtool_l5yHio9M 0 7 1360 3139 0 14 Dtool_l5yHio9M 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::point_in_plane
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3461  
1281 14 Dtool_l5yHdYNF 0 7 1361 3139 0 14 Dtool_l5yHdYNF 218 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::project
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3461  1 p 1 3131  
1282 14 Dtool_l5yH0kHs 0 4 1362 3117 0 14 Dtool_l5yH0kHs 220 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::transform
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3461  9 transform 1 3134  11 transformed 1 3460  
1283 14 Dtool_l5yHwyfb 0 4 1363 3117 0 14 Dtool_l5yHwyfb 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::inverse_transform
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3461  9 transform 1 3134  11 transformed 1 3460  
1284 14 Dtool_l5yHD7C8 0 7 1364 3460 2726 14 Dtool_l5yHD7C8 214 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3460  2 p0 1 3131  2 p1 1 3131  2 p2 1 3131  
1285 14 Dtool_l5yHONAj 0 7 1365 3460 2726 14 Dtool_l5yHONAj 215 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::zero
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3460  
1286 14 Dtool_l5yHlS2C 0 6 1366 3137 0 14 Dtool_l5yHlS2C 216 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::get_d
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3461  
1287 14 Dtool_l5yHa_jZ 0 7 1367 3157 0 14 Dtool_l5yHa_jZ 221 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3461  
1288 14 Dtool_l5yHR5RX 0 4 1368 3117 0 14 Dtool_l5yHR5RX 216 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set_d
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3460  1 d 1 3137  
1289 14 Dtool_l5yHsAhv 0 4 1369 3117 0 14 Dtool_l5yHsAhv 221 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlane::set_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3460  6 normal 1 3157  
1290 14 Dtool_l5yHBXkV 0 7 1371 3286 0 14 Dtool_l5yHBXkV 726 // Filename: physxPlaneShapeDesc.I
// Created by:  enn0x (08Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1291 14 Dtool_l5yHTJhG 0 4 1372 3117 0 14 Dtool_l5yHTJhG 362 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPlaneShapeDesc::set_plane
//       Access: Published
//  Description: Sets the parameters of the plane equation.
//               normal: Plane normal.
//               d: The distance from the origin. 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3286  6 normal 1 3150  1 d 1 3137  
1292 14 Dtool_l5yHjiO0 0 7 1374 3290 2743 14 Dtool_l5yHjiO0 740 // Filename: physxPointInPlaneJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointInPlaneJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1293 14 Dtool_l5yHV_AE 0 7 1377 3296 2745 14 Dtool_l5yHV_AE 738 // Filename: physxPointOnLineJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPointOnLineJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1294 14 Dtool_l5yHOnWq 0 7 1380 3302 2747 14 Dtool_l5yHOnWq 734 // Filename: physxPrismaticJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPrismaticJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1295 14 Dtool_l5yHyQjm 0 7 1383 3308 2749 14 Dtool_l5yHyQjm 728 // Filename: physxPulleyJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1296 14 Dtool_l5yH0wfv 0 4 1385 3117 0 14 Dtool_l5yH0wfv 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_distance
//       Access: Published
//  Description: Sets the rest length of the rope connecting the
//               two objects. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3308  8 distance 1 3137  
1297 14 Dtool_l5yHrNmO 0 4 1386 3117 0 14 Dtool_l5yHrNmO 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_stiffness
//       Access: Published
//  Description: Sets how stiff the constraint is, between 0 and 1
//               (stiffest)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3308  9 stiffness 1 3137  
1298 14 Dtool_l5yHJMwQ 0 4 1387 3117 0 14 Dtool_l5yHJMwQ 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_ratio
//       Access: Published
//  Description: Sets the transmission ratio.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3308  6 ration 1 3137  
1299 14 Dtool_l5yHa_4o 0 4 1388 3117 0 14 Dtool_l5yHa_4o 305 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_pulley
//       Access: Published
//  Description: Sets the suspension points of two bodies in world
//               space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3308  3 idx 1 3138  3 pos 1 3131  
1300 14 Dtool_l5yHl7i9 0 4 1389 3117 0 14 Dtool_l5yHl7i9 260 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_motor
//       Access: Published
//  Description: Sets an optional joint motor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3308  5 motor 1 3311  
1301 14 Dtool_l5yHAHFx 0 4 1390 3117 0 14 Dtool_l5yHAHFx 275 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single PulleyJointFlag flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3308  4 flag 1 2982  5 value 1 3120  
1302 14 Dtool_l5yHLLzs 0 6 1391 3137 0 14 Dtool_l5yHLLzs 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3309  
1303 14 Dtool_l5yHy5r7 0 6 1392 3137 0 14 Dtool_l5yHy5r7 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3309  
1304 14 Dtool_l5yHn_vQ 0 6 1393 3137 0 14 Dtool_l5yHn_vQ 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_ratio
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3309  
1305 14 Dtool_l5yH_vAm 0 6 1394 3120 0 14 Dtool_l5yH_vAm 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3309  4 flag 1 2982  
1306 14 Dtool_l5yHguwV 0 7 1395 3139 0 14 Dtool_l5yHguwV 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_pulley
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3309  3 idx 1 3138  
1307 14 Dtool_l5yHcvPf 0 7 1396 3313 2718 14 Dtool_l5yHcvPf 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxPulleyJointDesc::get_motor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3309  
1308 14 Dtool_l5yHHpeM 0 7 1398 3463 2763 14 Dtool_l5yHHpeM 704 // Filename: physxRay.I
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1309 14 Dtool_l5yHwx8w 0 4 1400 3117 0 14 Dtool_l5yHwx8w 426 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_length
//       Access: Published
//  Description: Sets the ray length. If no length is set then the
//               ray will be virtually infinite (the maximum
//               floating point number will be used, e.g.
//               3.40282346639e+038).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3463  6 length 1 3137  
1310 14 Dtool_l5yHbm0O 0 4 1401 3117 0 14 Dtool_l5yHbm0O 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_origin
//       Access: Published
//  Description: Sets the ray origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3463  6 origin 1 3131  
1311 14 Dtool_l5yHr3tp 0 4 1402 3117 0 14 Dtool_l5yHr3tp 310 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::set_direction
//       Access: Published
//  Description: Set the ray direction. It is not required to pass
//               a normalized vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3463  9 direction 1 3150  
1312 14 Dtool_l5yHy3U6 0 6 1403 3137 0 14 Dtool_l5yHy3U6 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_length
//       Access: Published
//  Description: Returns the ray length.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3191  
1313 14 Dtool_l5yHx_9m 0 7 1404 3139 0 14 Dtool_l5yHx_9m 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_origin
//       Access: Published
//  Description: Returns the ray origin
//////////////////////////////////////////////////////////////////// 1 4 this 3 3191  
1314 14 Dtool_l5yHmdzS 0 7 1405 3157 0 14 Dtool_l5yHmdzS 249 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRay::get_direction
//       Access: Published
//  Description: Returns the ray direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3191  
1315 14 Dtool_l5yHcPWo 0 7 1407 3193 2771 14 Dtool_l5yHcPWo 718 // Filename: physxRaycastHit.I
// Created by:  enn0x (21Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 hit 1 3464  
1316 14 Dtool_l5yHLsPq 0 6 1409 3120 0 14 Dtool_l5yHLsPq 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::is_empty
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3467  
1317 14 Dtool_l5yHOUkM 0 7 1410 3149 1687 14 Dtool_l5yHOUkM 226 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_shape
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3467  
1318 14 Dtool_l5yHlfcg 0 7 1411 3139 0 14 Dtool_l5yHlfcg 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_impact_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3467  
1319 14 Dtool_l5yHZezX 0 7 1412 3157 0 14 Dtool_l5yHZezX 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_impact_normal
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3467  
1320 14 Dtool_l5yHYNw1 0 6 1413 3137 0 14 Dtool_l5yHYNw1 229 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastHit::get_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3467  
1321 14 Dtool_l5yHCcdZ 0 6 1418 3138 0 14 Dtool_l5yHCcdZ 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_num_hits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3469  
1322 14 Dtool_l5yHp5Oa 0 7 1419 3193 2771 14 Dtool_l5yHp5Oa 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_first_hit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3344  
1323 14 Dtool_l5yHhT_Q 0 7 1420 3193 2771 14 Dtool_l5yHhT_Q 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_next_hit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3344  
1324 14 Dtool_l5yHXuIZ 0 7 1421 3193 2771 14 Dtool_l5yHXuIZ 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRaycastReport::get_hit
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3344  3 idx 1 3138  
1325 14 Dtool_l5yH8x_V 0 6 1416 3471 0 14 Dtool_l5yH8x_V 0 1 4 this 3 3344  
1326 14 Dtool_l5yHQr1O 0 6 1417 3344 0 14 Dtool_l5yHQr1O 0 2 4 this 3 3471  4 this 1 3471  
1327 14 Dtool_l5yHL6Gs 0 7 1424 3317 2785 14 Dtool_l5yHL6Gs 732 // Filename: physxRevoluteJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1328 14 Dtool_l5yHrI1m 0 4 1426 3117 0 14 Dtool_l5yHrI1m 318 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_distance
//       Access: Published
//  Description: Sets the distance beyond which the joint is
//               projected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  8 distance 1 3137  
1329 14 Dtool_l5yHa3gg 0 4 1427 3117 0 14 Dtool_l5yHa3gg 295 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_angle
//       Access: Published
//  Description: Sets the angle beyond which the joint is projected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  5 angle 1 3137  
1330 14 Dtool_l5yH0KHB 0 4 1428 3117 0 14 Dtool_l5yH0KHB 259 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_spring
//       Access: Published
//  Description: Sets an aptional spring. 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  6 spring 1 3320  
1331 14 Dtool_l5yH4Ozo 0 4 1429 3117 0 14 Dtool_l5yH4Ozo 279 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single RevoluteJointFlag flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3317  4 flag 1 2983  5 value 1 3120  
1332 14 Dtool_l5yHIiHN 0 4 1430 3117 0 14 Dtool_l5yHIiHN 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_motor
//       Access: Published
//  Description: Sets an optional joint motor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  5 motor 1 3311  
1333 14 Dtool_l5yHvR_0 0 4 1431 3117 0 14 Dtool_l5yHvR_0 311 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_limit_low
//       Access: Published
//  Description: Sets optional limits for the angular motion of the
//               joint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  3 low 1 3322  
1334 14 Dtool_l5yHmLxL 0 4 1432 3117 0 14 Dtool_l5yHmLxL 312 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_limit_high
//       Access: Published
//  Description: Sets optional limits for the angular motion of the
//               joint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  4 high 1 3322  
1335 14 Dtool_l5yH8VIQ 0 4 1433 3117 0 14 Dtool_l5yH8VIQ 316 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3317  4 mode 1 2980  
1336 14 Dtool_l5yHqNWh 0 6 1434 3137 0 14 Dtool_l5yHqNWh 320 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_distance
//       Access: Published
//  Description: Return the distance beyond which the joint is
//               projected.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1337 14 Dtool_l5yHA1mq 0 6 1435 3137 0 14 Dtool_l5yHA1mq 314 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_angle
//       Access: Published
//  Description: Return the angle beyond which the joint is
//               projected.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1338 14 Dtool_l5yHBOMy 0 6 1436 3120 0 14 Dtool_l5yHBOMy 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3318  4 flag 1 2983  
1339 14 Dtool_l5yHVfG3 0 7 1437 3324 2585 14 Dtool_l5yHVfG3 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1340 14 Dtool_l5yHhyYM 0 7 1438 3313 2718 14 Dtool_l5yHhyYM 262 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_motor
//       Access: Published
//  Description: Sets an optional joint motor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1341 14 Dtool_l5yHHiVj 0 7 1439 3450 2643 14 Dtool_l5yHHiVj 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_limit_low
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1342 14 Dtool_l5yHZFid 0 7 1440 3450 2643 14 Dtool_l5yHZFid 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_limit_high
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1343 14 Dtool_l5yH4z4R 0 6 1441 2980 0 14 Dtool_l5yH4z4R 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxRevoluteJointDesc::get_projection_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3318  
1344 14 Dtool_l5yHLA06 0 7 1443 3335 2803 14 Dtool_l5yHLA06 228 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 ptr 1 3472  
1345 14 Dtool_l5yHC4qg 0 6 1445 3138 0 14 Dtool_l5yHC4qg 724 // Filename: physxSceneStats2.cxx
// Created by:  enn0x (20Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_num_stats
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3475  
1346 14 Dtool_l5yHUalB 0 6 1446 3123 0 14 Dtool_l5yHUalB 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_cur_value
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3475  5 index 1 3138  
1347 14 Dtool_l5yHzwEe 0 6 1447 3123 0 14 Dtool_l5yHzwEe 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_max_value
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3475  5 index 1 3138  
1348 14 Dtool_l5yH3_0_ 0 6 1448 3114 0 14 Dtool_l5yH3_0_ 225 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3475  5 index 1 3138  
1349 14 Dtool_l5yHw_w_ 0 6 1449 3138 0 14 Dtool_l5yHw_w_ 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSceneStats2::get_parent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3475  5 index 1 3138  
1350 14 Dtool_l5yH7is_ 0 7 1451 3342 0 14 Dtool_l5yH7is_ 720 // Filename: physxVehicleDesc.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1351 14 Dtool_l5yHSS1a 0 4 1452 3117 0 14 Dtool_l5yHSS1a 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3342  
1352 14 Dtool_l5yH_gdQ 0 6 1453 3120 0 14 Dtool_l5yH_gdQ 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxVehicleDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3477  
1353 14 Dtool_l5yHUXGw 0 7 1455 3340 2813 14 Dtool_l5yHUXGw 722 // Filename: physxSoftBodyDesc.I
// Created by:  enn0x (12Sep10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1354 14 Dtool_l5yH6wx5 0 4 1457 3117 0 14 Dtool_l5yH6wx5 271 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3340  
1355 14 Dtool_l5yHxWrt 0 6 1458 3120 0 14 Dtool_l5yHxWrt 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1356 14 Dtool_l5yHqSV8 0 4 1459 3117 0 14 Dtool_l5yHqSV8 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_soft_body_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  4 mesh 1 3351  
1357 14 Dtool_l5yHl6o8 0 4 1460 3117 0 14 Dtool_l5yHl6o8 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  4 name 1 3114  
1358 14 Dtool_l5yHF3P0 0 4 1461 3117 0 14 Dtool_l5yHF3P0 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  3 pos 1 3131  
1359 14 Dtool_l5yHny3g 0 4 1462 3117 0 14 Dtool_l5yHny3g 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  3 mat 1 3134  
1360 14 Dtool_l5yHmg53 0 4 1463 3117 0 14 Dtool_l5yHmg53 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_global_hpr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3340  1 h 1 3137  1 p 1 3137  1 r 1 3137  
1361 14 Dtool_l5yHQz1n 0 4 1464 3117 0 14 Dtool_l5yHQz1n 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_density
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  7 density 1 3137  
1362 14 Dtool_l5yHaaBq 0 4 1465 3117 0 14 Dtool_l5yHaaBq 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_volume_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  9 stiffness 1 3137  
1363 14 Dtool_l5yHCi0E 0 4 1466 3117 0 14 Dtool_l5yHCi0E 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_stretching_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  9 stiffness 1 3137  
1364 14 Dtool_l5yHLwAa 0 4 1467 3117 0 14 Dtool_l5yHLwAa 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_damping_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  7 damping 1 3137  
1365 14 Dtool_l5yHm7vf 0 4 1468 3117 0 14 Dtool_l5yHm7vf 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_friction
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  8 friction 1 3137  
1366 14 Dtool_l5yH7_UM 0 4 1469 3117 0 14 Dtool_l5yH7_UM 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_tear_factor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  10 tearFactor 1 3137  
1367 14 Dtool_l5yHOl20 0 4 1470 3117 0 14 Dtool_l5yHOl20 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_particle_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  6 radius 1 3137  
1368 14 Dtool_l5yHo0Ky 0 4 1471 3117 0 14 Dtool_l5yHo0Ky 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_relative_grid_spacing
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  7 spacing 1 3137  
1369 14 Dtool_l5yHbPTx 0 4 1472 3117 0 14 Dtool_l5yHbPTx 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_collision_response_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  4 coef 1 3137  
1370 14 Dtool_l5yHIO_x 0 4 1473 3117 0 14 Dtool_l5yHIO_x 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_attachment_response_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  4 coef 1 3137  
1371 14 Dtool_l5yHLR6L 0 4 1474 3117 0 14 Dtool_l5yHLR6L 381 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_solver_iterations
//       Access: Published
//  Description: Number of solver iterations.
//               Small numbers make the simulation faster while 
//               the soft body gets less stiff.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3340  11 interations 1 3138  
1372 14 Dtool_l5yHFy8a 0 4 1475 3117 0 14 Dtool_l5yHFy8a 272 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::set_flag
//       Access: Published
//  Description: Raise or lower individual SoftBodyFlag flags.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3340  4 flag 1 2986  5 value 1 3120  
1373 14 Dtool_l5yH7UHw 0 6 1476 3114 0 14 Dtool_l5yH7UHw 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1374 14 Dtool_l5yHes1H 0 7 1477 3139 0 14 Dtool_l5yHes1H 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_global_pos
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1375 14 Dtool_l5yHRBJD 0 7 1478 3140 0 14 Dtool_l5yHRBJD 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_global_mat
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1376 14 Dtool_l5yHRF5Q 0 6 1479 3137 0 14 Dtool_l5yHRF5Q 230 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_density
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1377 14 Dtool_l5yHbaDv 0 6 1480 3137 0 14 Dtool_l5yHbaDv 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_volume_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1378 14 Dtool_l5yH_zBx 0 6 1481 3137 0 14 Dtool_l5yH_zBx 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_stretching_stiffness
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1379 14 Dtool_l5yHrXQ3 0 6 1482 3137 0 14 Dtool_l5yHrXQ3 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_damping_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1380 14 Dtool_l5yHQe2E 0 6 1483 3137 0 14 Dtool_l5yHQe2E 231 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_friction
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1381 14 Dtool_l5yHnkyu 0 6 1484 3137 0 14 Dtool_l5yHnkyu 234 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_tear_factor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1382 14 Dtool_l5yHKL4K 0 6 1485 3137 0 14 Dtool_l5yHKL4K 238 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_particle_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1383 14 Dtool_l5yH8hV8 0 6 1486 3137 0 14 Dtool_l5yH8hV8 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_relative_grid_spacing
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1384 14 Dtool_l5yHN_ci 0 6 1487 3137 0 14 Dtool_l5yHN_ci 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_collision_response_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1385 14 Dtool_l5yH5ACb 0 6 1488 3137 0 14 Dtool_l5yH5ACb 254 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_attachment_response_coefficient
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1386 14 Dtool_l5yHKJnx 0 6 1489 3138 0 14 Dtool_l5yHKJnx 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_solver_iterations
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3479  
1387 14 Dtool_l5yHbbQN 0 6 1490 3120 0 14 Dtool_l5yHbbQN 227 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSoftBodyDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3479  4 flag 1 2986  
1388 14 Dtool_l5yH0jBb 0 7 1492 3481 2849 14 Dtool_l5yH0jBb 710 // Filename: physxSphere.I
// Created by:  enn0x (31Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1389 14 Dtool_l5yHfHnf 0 7 1492 3481 2849 14 Dtool_l5yHfHnf 223 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 sphere 1 3189  
1390 14 Dtool_l5yHAUxj 0 6 1494 3120 0 14 Dtool_l5yHAUxj 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if a point is contained within the sphere.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3189  1 p 1 3131  
1391 14 Dtool_l5yHj7Rc 0 6 1494 3120 0 14 Dtool_l5yHj7Rc 393 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if an axis aligned box is contained within
//               the sphere. The axis aligned box is defined by the
//               minimum corner and the maximum corner.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3189  3 min 1 3131  3 max 1 3131  
1392 14 Dtool_l5yH1lGt 0 6 1494 3120 0 14 Dtool_l5yH1lGt 270 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::contains
//       Access: Published
//  Description: Tests if a sphere is contained within the sphere.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3189  6 sphere 1 3189  
1393 14 Dtool_l5yHiQrx 0 6 1495 3120 0 14 Dtool_l5yHiQrx 322 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::intersect
//       Access: Published
//  Description: Tests if the sphere intersects another sphere.
//               Returns TRUE if the spheres overlap.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3189  6 sphere 1 3189  
1394 14 Dtool_l5yHy39U 0 6 1496 3120 0 14 Dtool_l5yHy39U 258 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::is_valid
//       Access: Published
//  Description: Returns TRUE if this sphere is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3189  
1395 14 Dtool_l5yH3fCn 0 7 1497 3139 0 14 Dtool_l5yH3fCn 256 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::get_center
//       Access: Published
//  Description: Returns the center of the sphere.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3189  
1396 14 Dtool_l5yHmdhD 0 6 1498 3137 0 14 Dtool_l5yHmdhD 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::get_radius
//       Access: Published
//  Description: Returns the sphere's radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3189  
1397 14 Dtool_l5yH0eHc 0 4 1499 3117 0 14 Dtool_l5yH0eHc 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::set_center
//       Access: Published
//  Description: Sets the center of the sphere.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3481  5 value 1 3139  
1398 14 Dtool_l5yHsSwy 0 4 1500 3117 0 14 Dtool_l5yHsSwy 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphere::set_radius
//       Access: Published
//  Description: Sets the sphere's radius.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3481  5 value 1 3137  
1399 14 Dtool_l5yHJuHS 0 7 1502 3358 2858 14 Dtool_l5yHJuHS 748 // Filename: physxSphereForceFieldShapeDesc.I
// Created by:  enn0x (06Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1400 14 Dtool_l5yH65vT 0 4 1504 3117 0 14 Dtool_l5yH65vT 276 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3358  6 radius 1 3137  
1401 14 Dtool_l5yHcUHc 0 6 1505 3137 0 14 Dtool_l5yHcUHc 258 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereForceFieldShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3482  
1402 14 Dtool_l5yHWB2F 0 7 1507 3362 0 14 Dtool_l5yHWB2F 728 // Filename: physxSphereShapeDesc.I
// Created by:  enn0x (11Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1403 14 Dtool_l5yHHDMW 0 4 1508 3117 0 14 Dtool_l5yHHDMW 266 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3362  6 radius 1 3137  
1404 14 Dtool_l5yHf9SY 0 6 1509 3137 0 14 Dtool_l5yHf9SY 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphereShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3484  
1405 14 Dtool_l5yHH7GC 0 7 1511 3366 2865 14 Dtool_l5yHH7GC 734 // Filename: physxSphericalJointDesc.I
// Created by:  enn0x (28Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1406 14 Dtool_l5yHoO5F 0 4 1513 3117 0 14 Dtool_l5yHoO5F 294 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_projection_distance
//       Access: Published
//  Description: Set the distance above which to project joint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  8 distance 1 3137  
1407 14 Dtool_l5yHjlJc 0 4 1514 3117 0 14 Dtool_l5yHjlJc 281 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_flag
//       Access: Published
//  Description: Sets or clears a single SphericalJointFlag flag.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3366  4 flag 1 2988  5 value 1 3120  
1408 14 Dtool_l5yHH3R_ 0 4 1515 3117 0 14 Dtool_l5yHH3R_ 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_axis
//       Access: Published
//  Description: Set the swing limit axis defined in the joint
//               space of actor 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  4 axis 1 3150  
1409 14 Dtool_l5yHH4SA 0 4 1516 3117 0 14 Dtool_l5yHH4SA 283 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_spring
//       Access: Published
//  Description: Sets a spring that works against twisting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  6 spring 1 3320  
1410 14 Dtool_l5yHLce_ 0 4 1517 3117 0 14 Dtool_l5yHLce_ 283 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_spring
//       Access: Published
//  Description: Sets a spring that works against swinging.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  6 spring 1 3320  
1411 14 Dtool_l5yHsrYN 0 4 1518 3117 0 14 Dtool_l5yHsrYN 292 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_joint_spring
//       Access: Published
//  Description: Sets a spring that lets the joint get pulled apart.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  6 spring 1 3320  
1412 14 Dtool_l5yHRx8x 0 4 1519 3117 0 14 Dtool_l5yHRx8x 278 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_limit_low
//       Access: Published
//  Description: Limits rotation around twist axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  3 low 1 3322  
1413 14 Dtool_l5yH5u_7 0 4 1520 3117 0 14 Dtool_l5yH5u_7 279 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_twist_limit_high
//       Access: Published
//  Description: Limits rotation around twist axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  4 high 1 3322  
1414 14 Dtool_l5yHdVBO 0 4 1521 3117 0 14 Dtool_l5yHdVBO 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_swing_limit
//       Access: Published
//  Description: Limits swing of twist axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  5 limit 1 3322  
1415 14 Dtool_l5yHb__w 0 4 1522 3117 0 14 Dtool_l5yHb__w 317 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::set_projection_mode
//       Access: Published
//  Description: Use this to enable joint projection.
//               Default is PM_none.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3366  4 mode 1 2980  
1416 14 Dtool_l5yHWeNX 0 6 1523 3137 0 14 Dtool_l5yHWeNX 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_projection_distance
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1417 14 Dtool_l5yHJ_Pf 0 6 1524 3120 0 14 Dtool_l5yHJ_Pf 233 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3367  4 flag 1 2988  
1418 14 Dtool_l5yHG7g7 0 7 1525 3157 0 14 Dtool_l5yHG7g7 239 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_axis
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1419 14 Dtool_l5yHzYbq 0 7 1526 3324 2585 14 Dtool_l5yHzYbq 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1420 14 Dtool_l5yHm7mp 0 7 1527 3324 2585 14 Dtool_l5yHm7mp 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1421 14 Dtool_l5yHF4h3 0 7 1528 3324 2585 14 Dtool_l5yHF4h3 241 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_joint_spring
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1422 14 Dtool_l5yHLvPn 0 7 1529 3450 2643 14 Dtool_l5yHLvPn 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_limit_low
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1423 14 Dtool_l5yHQs4F 0 7 1530 3450 2643 14 Dtool_l5yHQs4F 245 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_twist_limit_high
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1424 14 Dtool_l5yHO_VP 0 7 1531 3450 2643 14 Dtool_l5yHO_VP 267 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_swing_limit
//       Access: Published
//  Description: Limits swing of twist axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1425 14 Dtool_l5yHHzAn 0 6 1532 2980 0 14 Dtool_l5yHHzAn 244 ////////////////////////////////////////////////////////////////////
//     Function: PhysxSphericalJointDesc::get_projection_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3367  
1426 14 Dtool_l5yH1E90 0 7 1534 3375 0 14 Dtool_l5yH1E90 740 // Filename: physxTriangleMeshShapeDesc.I
// Created by:  enn0x (14Oct09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1427 14 Dtool_l5yHbXKs 0 4 1535 3117 0 14 Dtool_l5yHbXKs 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxTriangleMeshShapeDesc::set_mesh
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3375  4 mesh 1 3371  
1428 14 Dtool_l5yHKoan 0 7 1537 3486 2889 14 Dtool_l5yHKoan 712 // Filename: physxUtilLib.I
// Created by:  enn0x (01Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1429 14 Dtool_l5yH5JRb 0 6 1539 3120 0 14 Dtool_l5yH5JRb 340 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::box_contains_point
//       Access: Published
//  Description: Test if an oriented box contains a point.
//
//               \param [in] box
//               \param [in] p
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  3 box 1 3187  1 p 1 3131  
1430 14 Dtool_l5yHQxLi 0 7 1540 3393 2320 14 Dtool_l5yHQxLi 381 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::create_box
//       Access: Published
//  Description: Create an oriented box from an axis aligned box
//               and a transformation. 
//
//               \param [in] aabb
//               \param [in] mat
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  4 aabb 1 3183  3 mat 1 3134  
1431 14 Dtool_l5yHPOwT 0 7 1541 3157 0 14 Dtool_l5yHPOwT 546 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_world_edge_normal
//       Access: Published
//  Description: Compute and edge normals for an oriented box. This
//               is an averaged normal, from the two faces sharing
//               the edge. The edge index should be from 0 to 11 
//               (i.e. a box has 12 edges).
//
//               \param [in] box
//               \param [in] edge_index
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  3 box 1 3187  10 edge_index 1 3138  
1432 14 Dtool_l5yHuztD 0 7 1542 3408 2376 14 Dtool_l5yHuztD 315 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_capsule_around_box
//       Access: Published
//  Description: Compute a capsule which encloses a box.
//
//               \param [in] box
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  3 box 1 3187  
1433 14 Dtool_l5yH3bRr 0 6 1543 3120 0 14 Dtool_l5yH3bRr 394 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::is_box_a_inside_box_b
//       Access: Published
//  Description: Test if box A is inside another box B. Returns
//               TRUE if box A is inside box B.
//
//               \param [in] a
//               \param [in] b
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  1 a 1 3187  1 b 1 3187  
1434 14 Dtool_l5yH_lO8 0 7 1544 3393 2320 14 Dtool_l5yH_lO8 319 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_around_capsule
//       Access: Published
//  Description: Compute a box which encloses a capsule.
//
//               \param [in] capsule
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  7 capsule 1 3185  
1435 14 Dtool_l5yHQfW8 0 4 1545 3117 0 14 Dtool_l5yHQfW8 250 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_exceptions
//       Access: Published
//  Description: Set FPU precision.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  1 b 1 3120  
1436 14 Dtool_l5yHzIJ9 0 4 1546 3117 0 14 Dtool_l5yHzIJ9 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision24
//       Access: Published
//  Description: Set FPU precision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1437 14 Dtool_l5yHC3jQ 0 4 1547 3117 0 14 Dtool_l5yHC3jQ 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision53
//       Access: Published
//  Description: Set FPU precision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1438 14 Dtool_l5yH2IXZ 0 4 1548 3117 0 14 Dtool_l5yH2IXZ 251 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_precision64
//       Access: Published
//  Description: Set FPU precision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1439 14 Dtool_l5yHEpaA 0 4 1549 3117 0 14 Dtool_l5yHEpaA 253 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_chop
//       Access: Published
//  Description: Set FPU precision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1440 14 Dtool_l5yHKilT 0 4 1550 3117 0 14 Dtool_l5yHKilT 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_down
//       Access: Published
//  Description: Set FPU rounding mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1441 14 Dtool_l5yHIp54 0 4 1551 3117 0 14 Dtool_l5yHIp54 257 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_near
//       Access: Published
//  Description: Set FPU rounding mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1442 14 Dtool_l5yH80tb 0 4 1552 3117 0 14 Dtool_l5yH80tb 255 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::set_fpu_rounding_up
//       Access: Published
//  Description: Set FPU rounding mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3486  
1443 14 Dtool_l5yHLPuv 0 6 1553 3123 0 14 Dtool_l5yHLPuv 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_ceil
//       Access: Published
//  Description: Convert a floating point number to an integer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  1 f 1 3137  
1444 14 Dtool_l5yHevp4 0 6 1554 3123 0 14 Dtool_l5yHevp4 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_chop
//       Access: Published
//  Description: Convert a floating point number to an integer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  1 f 1 3137  
1445 14 Dtool_l5yH5CuU 0 6 1555 3123 0 14 Dtool_l5yH5CuU 269 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::int_floor
//       Access: Published
//  Description: Convert a floating point number to an integer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3486  1 f 1 3137  
1446 14 Dtool_l5yH050z 0 6 1556 3137 0 14 Dtool_l5yH050z 377 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_distance_squared
//       Access: Published
//  Description: Compute the distance squared from a point to a
//               ray.
//
//               \param [in] ray
//               \param [in] point
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  3 ray 1 3191  5 point 1 3131  
1447 14 Dtool_l5yH5L_U 0 6 1557 3137 0 14 Dtool_l5yH5L_U 385 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_square_distance
//       Access: Published
//  Description: Compute the distance squared from a point to a
//               line segment.
//
//               \param [in] seg
//               \param [in] point
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  3 seg 1 3406  5 point 1 3131  
1448 14 Dtool_l5yHWxWi 0 7 1558 3481 2849 14 Dtool_l5yHWxWi 378 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::merge_spheres
//       Access: Published
//  Description: Compute an overall bounding sphere for a pair of
//               spheres.
//
//               \param [in] sphere0
//               \param [in] sphere1
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  7 sphere0 1 3189  7 sphere1 1 3189  
1449 14 Dtool_l5yH_cQc 0 4 1559 3117 0 14 Dtool_l5yH_cQc 381 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::normal_to_tangents
//       Access: Published
//  Description: Get the tangent vectors associated with a normal.
//
//               \param [in] n
//               \param [out] t1
//               \param [out] t2
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  1 n 1 3150  2 t1 1 3157  2 t2 1 3157  
1450 14 Dtool_l5yHO9y_ 0 7 1560 3156 0 14 Dtool_l5yHO9y_ 391 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::find_rotation_matrix
//       Access: Published
//  Description: Computes a rotation matrix M so that: M * x = b
//               (x and b are unit vectors).
//
//               \param [in] x
//               \param [in] b
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  1 x 1 3150  1 b 1 3150  
1451 14 Dtool_l5yHx7HM 0 6 1561 3137 0 14 Dtool_l5yHx7HM 393 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_mass
//       Access: Published
//  Description: Computes mass of a homogeneous sphere according
//               to sphere density. 
//
//               \param [in] radius
//               \param [in] density
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  6 radius 1 3137  7 density 1 3137  
1452 14 Dtool_l5yHxoNL 0 6 1562 3137 0 14 Dtool_l5yHxoNL 391 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_density
//       Access: Published
//  Description: Computes density of a homogeneous sphere according
//               to sphere mass
//
//               \param [in] radius
//               \param [in] mass
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  6 radius 1 3137  4 mass 1 3137  
1453 14 Dtool_l5yH0jTF 0 6 1563 3137 0 14 Dtool_l5yH0jTF 383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_mass
//       Access: Published
//  Description: Computes mass of a homogeneous box according to
//               box density.
//
//               \param [in] radius
//               \param [in] density
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  7 extents 1 3150  7 density 1 3137  
1454 14 Dtool_l5yHMikg 0 6 1564 3137 0 14 Dtool_l5yHMikg 383 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_density
//       Access: Published
//  Description: Computes density of a homogeneous box according to
//               box mass.
//
//               \param [in] radius
//               \param [in] mass
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  7 extents 1 3150  4 mass 1 3137  
1455 14 Dtool_l5yHmG48 0 6 1565 3137 0 14 Dtool_l5yHmG48 401 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_ellipsoid_mass
//       Access: Published
//  Description: Computes mass of a homogeneous ellipsoid according
//               to ellipsoid density.
//
//               \param [in] radius
//               \param [in] density
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  7 extents 1 3150  7 density 1 3137  
1456 14 Dtool_l5yH0j2N 0 6 1566 3137 0 14 Dtool_l5yH0j2N 401 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_ellipsoid_density
//       Access: Published
//  Description: Computes density of a homogeneous ellipsoid
//               according to ellipsoid mass.
//
//               \param [in] radius
//               \param [in] mass
//////////////////////////////////////////////////////////////////// 3 4 this 3 3486  7 extents 1 3150  4 mass 1 3137  
1457 14 Dtool_l5yHm9Bb 0 6 1567 3137 0 14 Dtool_l5yHm9Bb 398 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cylinder_mass
//       Access: Published
//  Description: Computes mass of a homogeneous cylinder according
//               to cylinder density.
//
//               \param [in] radius
//               \param [in] density
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  6 radius 1 3137  6 length 1 3137  7 density 1 3137  
1458 14 Dtool_l5yHdMXy 0 6 1568 3137 0 14 Dtool_l5yHdMXy 398 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cylinder_density
//       Access: Published
//  Description: Computes density of a homogeneous cylinder
//               according to cylinder mass.
//
//               \param [in] radius
//               \param [in] mass
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  6 radius 1 3137  6 length 1 3137  4 mass 1 3137  
1459 14 Dtool_l5yHWS5R 0 6 1569 3137 0 14 Dtool_l5yHWS5R 386 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cone_mass
//       Access: Published
//  Description: Computes mass of a homogeneous cone according to
//               cone density.
//
//               \param [in] radius
//               \param [in] density
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  6 radius 1 3137  6 length 1 3137  7 density 1 3137  
1460 14 Dtool_l5yHiUSH 0 6 1570 3137 0 14 Dtool_l5yHiUSH 386 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_cone_density
//       Access: Published
//  Description: Computes density of a homogeneous cone according
//               to cone mass.
//
//               \param [in] radius
//               \param [in] mass
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  6 radius 1 3137  6 length 1 3137  4 mass 1 3137  
1461 14 Dtool_l5yHd7kq 0 7 1571 3157 0 14 Dtool_l5yHd7kq 435 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_box_inertia_tensor
//       Access: Published
//  Description: Computes diagonalized inertia tensor for a box.
//
//               \param [in] mass
//               \param [in] xlength
//               \param [in] ylength
//               \param [in] zlength
//////////////////////////////////////////////////////////////////// 5 4 this 3 3486  4 mass 1 3137  7 xlength 1 3137  7 ylength 1 3137  7 zlength 1 3137  
1462 14 Dtool_l5yH49T0 0 7 1572 3157 0 14 Dtool_l5yH49T0 402 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::compute_sphere_inertia_tensor
//       Access: Published
//  Description: Computes diagonalized inertia tensor for a sphere.
//
//               \param [in] mass
//               \param [in] radius
//               \param [in] hollow
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  4 mass 1 3137  6 radius 1 3137  6 hollow 1 3120  
1463 14 Dtool_l5yHUSxC 0 6 1573 3120 0 14 Dtool_l5yHUSxC 672 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::box_box_intersect
//       Access: Published
//  Description: Boolean intersection test between two OBBs. Uses
//               the separating axis theorem. Disabling 'full_test'
//               only performs 6 axis tests out of 15.
//
//               \param [in] extents0
//               \param [in] center0
//               \param [in] rotation0
//               \param [in] extents1
//               \param [in] center1
//               \param [in] rotation1
//               \param [in] full_test
//////////////////////////////////////////////////////////////////// 8 4 this 3 3486  8 extents0 1 3150  7 center0 1 3131  9 rotation0 1 3153  8 extents1 1 3150  7 center1 1 3131  9 rotation1 1 3153  9 full_test 1 3120  
1464 14 Dtool_l5yH0RZa 0 6 1574 3120 0 14 Dtool_l5yH0RZa 490 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::tri_box_intersect
//       Access: Published
//  Description: Boolean intersection test between a triangle and
//               a box.
//
//               \param [in] vertex0
//               \param [in] vertex1
//               \param [in] vertex2
//               \param [in] center
//               \param [in] extents
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  7 vertex0 1 3131  7 vertex1 1 3131  7 vertex2 1 3131  6 center 1 3131  7 extents 1 3150  
1465 14 Dtool_l5yHyiEb 0 6 1575 3120 0 14 Dtool_l5yHyiEb 378 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_plane_intersect
//       Access: Published
//  Description: Ray-plane intersection test. 
//
//               \param [in] ray
//               \param [in] plane
//               \param [out] point_on_plane
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  3 ray 1 3191  5 plane 1 3461  14 point_on_plane 1 3139  
1466 14 Dtool_l5yHR6Jy 0 6 1576 3120 0 14 Dtool_l5yHR6Jy 594 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_sphere_intersect
//       Access: Published
//  Description: Ray-sphere intersection test. Returns true if the
//               ray intersects the sphere, and the impact point if
//               needed.
//
//               \param [in] origin
//               \param [in] dir
//               \param [in] length
//               \param [in] center
//               \param [in] radius
//               \param [out] hit_pos
//////////////////////////////////////////////////////////////////// 7 4 this 3 3486  6 origin 1 3131  3 dir 1 3150  6 length 1 3137  6 center 1 3131  6 radius 1 3137  7 hit_pos 1 3139  
1467 14 Dtool_l5yHckQ0 0 6 1577 3120 0 14 Dtool_l5yHckQ0 500 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_box_intersect
//       Access: Published
//  Description: Segment-AABB intersection test. Also computes
//               intersection point.
//
//               \param [in] p1
//               \param [in] p2
//               \param [in] bbox_min
//               \param [in] bbox_max
//               \param [out] intercept
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  2 p1 1 3131  2 p2 1 3131  8 bbox_min 1 3131  8 bbox_max 1 3131  9 intercept 1 3139  
1468 14 Dtool_l5yHbBrO 0 6 1578 3120 0 14 Dtool_l5yHbBrO 484 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_aabb_intersect
//       Access: Published
//  Description: Ray-AABB intersection test. Also computes
//               intersection point.
//
//               \param [in] min
//               \param [in] max
//               \param [in] origin
//               \param [in] dir
//               \param [out] coord
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  3 min 1 3131  3 max 1 3131  6 origin 1 3131  3 dir 1 3150  5 coord 1 3139  
1469 14 Dtool_l5yHQEQI 0 6 1579 3120 0 14 Dtool_l5yHQEQI 497 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_obb_intersect
//       Access: Published
//  Description: Boolean segment-OBB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] p0
//               \param [in] p1
//               \param [in] center
//               \param [in] extents
//               \param [in] rot
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  2 p0 1 3131  2 p1 1 3131  6 center 1 3131  7 extents 1 3150  3 rot 1 3153  
1470 14 Dtool_l5yHBUy2 0 6 1580 3120 0 14 Dtool_l5yHBUy2 459 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::segment_aabb_intersect
//       Access: Published
//  Description: Boolean segment-AABB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] p0
//               \param [in] p1
//               \param [in] min
//               \param [in] max
//////////////////////////////////////////////////////////////////// 5 4 this 3 3486  2 p0 1 3131  2 p1 1 3131  3 min 1 3131  3 max 1 3131  
1471 14 Dtool_l5yHXdMz 0 6 1581 3120 0 14 Dtool_l5yHXdMz 458 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_obb_intersect
//       Access: Published
//  Description: Boolean ray-OBB intersection test. Based on
//               separating axis theorem.
//
//               \param [in] ray
//               \param [in] center
//               \param [in] extents
//               \param [in] rot
//////////////////////////////////////////////////////////////////// 5 4 this 3 3486  3 ray 1 3191  6 center 1 3131  7 extents 1 3150  3 rot 1 3153  
1472 14 Dtool_l5yH6ab_ 0 6 1582 3138 0 14 Dtool_l5yH6ab_ 455 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_capsule_intersect
//       Access: Published
//  Description: Ray-capsule intersection test. Returns number of
//               intersection points (0,1 or 2) along the ray.
//
//               \param [in] origin
//               \param [in] dir
//               \param [in] capsule
//////////////////////////////////////////////////////////////////// 4 4 this 3 3486  6 origin 1 3131  3 dir 1 3150  7 capsule 1 3185  
1473 14 Dtool_l5yHo2Es 0 6 1583 3120 0 14 Dtool_l5yHo2Es 545 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::swept_spheres_intersect
//       Access: Published
//  Description: Sphere-sphere sweep test. Returns true if spheres
//               intersect during their linear motion along
//               provided velocity vectors.
//
//               \param [in] sphere0
//               \param [in] velocity0
//               \param [in] sphere1
//               \param [in] velocity1
//////////////////////////////////////////////////////////////////// 5 4 this 3 3486  7 sphere0 1 3189  9 velocity0 1 3150  7 sphere1 1 3189  9 velocity1 1 3150  
1474 14 Dtool_l5yH7bri 0 6 1584 3120 0 14 Dtool_l5yH7bri 733 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::ray_tri_intersect
//       Access: Published
//  Description: Ray-triangle intersection test. Returns impact 
//               distance (t) as well as barycentric coordinates
//               (u,v) of impact point. The test performs back face
//               culling or not according to 'cull'.
//
//               \param [in] orig
//               \param [in] dir
//               \param [in] vert0
//               \param [in] vert1
//               \param [in] vert2
//               \param [out] hit, with coordinates (t,u,v)
//               \param [in] cull
//////////////////////////////////////////////////////////////////// 8 4 this 3 3486  4 orig 1 3131  3 dir 1 3150  5 vert0 1 3131  5 vert1 1 3131  5 vert2 1 3131  3 hit 1 3157  4 cull 1 3120  
1475 14 Dtool_l5yHWgV_ 0 6 1585 3120 0 14 Dtool_l5yHWgV_ 648 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_capsule
//       Access: Published
//  Description: Box-vs-capsule sweep test. Sweeps a box against a
//               capsule, returns true if box hit the capsule. Also
//               returns contact information.
//
//               \param [in] box Box
//               \param [in] lss Capsule
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] normal Normal at impact point
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  3 box 1 3187  3 lss 1 3185  3 dir 1 3150  6 length 1 3137  6 normal 1 3157  
1476 14 Dtool_l5yHNKKn 0 6 1586 3120 0 14 Dtool_l5yHNKKn 646 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_sphere
//       Access: Published
//  Description: Box-vs-sphere sweep test. Sweeps a box against a
//               sphere, returns true if box hit the sphere. Also
//               returns contact information.
//
//               \param [in] box Box
//               \param [in] sphere Sphere
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] normal Normal at impact point
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  3 box 1 3187  6 sphere 1 3189  3 dir 1 3150  6 length 1 3137  6 normal 1 3157  
1477 14 Dtool_l5yH_k7D 0 6 1587 3120 0 14 Dtool_l5yH_k7D 706 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_capsule_capsule
//       Access: Published
//  Description: Capsule-vs-capsule sweep test. Sweeps a capsule
//               against a capsule, returns true if capsule hit the
//               other capsule. Also returns contact information.
//
//               \param [in] lss0
//               \param [in] lss1
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
//////////////////////////////////////////////////////////////////// 7 4 this 3 3486  4 lss0 1 3185  4 lss1 1 3185  3 dir 1 3150  6 length 1 3137  2 ip 1 3139  6 normal 1 3157  
1478 14 Dtool_l5yHgNOW 0 6 1588 3120 0 14 Dtool_l5yHgNOW 697 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_sphere_capsule
//       Access: Published
//  Description: Sphere-vs-capsule sweep test. Sweeps a sphere
//               against a capsule, returns true if sphere hit the
//               capsule. Also returns contact information.
//
//               \param [in] sphere
//               \param [in] lss
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
//////////////////////////////////////////////////////////////////// 7 4 this 3 3486  6 sphere 1 3189  3 lss 1 3185  3 dir 1 3150  6 length 1 3137  2 ip 1 3139  6 normal 1 3157  
1479 14 Dtool_l5yHozoT 0 6 1589 3120 0 14 Dtool_l5yHozoT 674 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::sweep_box_box
//       Access: Published
//  Description: Box-vs-box sweep test. Sweeps a box against a box,
//               returns true if box hit the other box. Also returns
//               contact information.
//
//               \param [in] box0
//               \param [in] box1
//               \param [in] dir Unit-length sweep direction
//               \param [in] length Length of sweep
//               \param [out] ip Impact point
//               \param [out] normal Normal at impact point
//////////////////////////////////////////////////////////////////// 7 4 this 3 3486  4 box0 1 3187  4 box1 1 3187  3 dir 1 3150  6 length 1 3137  2 ip 1 3139  6 normal 1 3157  
1480 14 Dtool_l5yHwd_b 0 6 1590 3137 0 14 Dtool_l5yHwd_b 594 ////////////////////////////////////////////////////////////////////
//     Function: PhysxUtilLib::point_obb_sqr_dist
//       Access: Published
//  Description: Point-vs-OBB distance computation. Returns distance
//               between a point and an OBB.
//
//               \param [in] point The point
//               \param [in] center OBB center
//               \param [in] extents OBB extents
//               \param [in] rot OBB rotation
//               \param [out] params Closest point on the box, in box space
//////////////////////////////////////////////////////////////////// 6 4 this 3 3486  5 point 1 3131  6 center 1 3131  7 extents 1 3150  3 rot 1 3153  6 params 1 3139  
1481 14 Dtool_l5yHNTSf 0 7 1592 3487 0 14 Dtool_l5yHNTSf 716 // Filename: physxWheelDesc.I
// Created by:  enn0x (23Mar10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1482 14 Dtool_l5yH_Uuu 0 4 1593 3117 0 14 Dtool_l5yH_Uuu 268 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::set_to_default
//       Access: Published
//  Description: (re)sets the structure to the default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3487  
1483 14 Dtool_l5yHZFe8 0 6 1594 3120 0 14 Dtool_l5yHZFe8 264 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelDesc::is_valid
//       Access: Published
//  Description: Returns true if the descriptor is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3488  
1484 14 Dtool_l5yHPX3C 0 7 1596 3380 0 14 Dtool_l5yHPX3C 726 // Filename: physxWheelShapeDesc.I
// Created by:  enn0x (09Nov09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1485 14 Dtool_l5yHhA2U 0 4 1597 3117 0 14 Dtool_l5yHhA2U 265 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_radius
//       Access: Published
//  Description: Radius of shape. Must be positive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  6 radius 1 3137  
1486 14 Dtool_l5yHu5c3 0 4 1598 3117 0 14 Dtool_l5yHu5c3 330 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_suspension_travel
//       Access: Published
//  Description: Set the maximum extension distance of suspension
//               along shape's -Y axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  16 suspensionTravel 1 3137  
1487 14 Dtool_l5yH9Apj 0 4 1599 3117 0 14 Dtool_l5yH9Apj 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_inverse_wheel_mass
//       Access: Published
//  Description: Set the inverse mass of the wheel.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  16 inverseWheelMass 1 3137  
1488 14 Dtool_l5yHUU3_ 0 4 1600 3117 0 14 Dtool_l5yHUU3_ 281 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_motor_torque
//       Access: Published
//  Description: Set the sum engine torque on the wheel axle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  11 motorTorque 1 3137  
1489 14 Dtool_l5yHxTmh 0 4 1601 3117 0 14 Dtool_l5yHxTmh 282 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_brake_torque
//       Access: Published
//  Description: Set the amount of torque applied for braking.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  11 brakeTorque 1 3137  
1490 14 Dtool_l5yHwDAb 0 4 1602 3117 0 14 Dtool_l5yHwDAb 340 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_steer_angle
//       Access: Published
//  Description: Set the steering angle, around shape Y axis.
//               The steering angle is measured in degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  10 steerAngle 1 3137  
1491 14 Dtool_l5yHN0gD 0 4 1603 3117 0 14 Dtool_l5yHN0gD 281 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_wheel_flag
//       Access: Published
//  Description: Turn the specified wheel shape flag on or off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3380  4 flag 1 2992  5 value 1 3120  
1492 14 Dtool_l5yHflr1 0 4 1604 3117 0 14 Dtool_l5yHflr1 307 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::set_suspension
//       Access: Published
//  Description: Set the data intended for car wheel suspension
//               effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3380  6 spring 1 3320  
1493 14 Dtool_l5yHDv7E 0 6 1605 3137 0 14 Dtool_l5yHDv7E 247 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_radius
//       Access: Published
//  Description: Radius of shape.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1494 14 Dtool_l5yHH9qf 0 6 1606 3137 0 14 Dtool_l5yHH9qf 242 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_suspension_travel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1495 14 Dtool_l5yHuBya 0 6 1607 3137 0 14 Dtool_l5yHuBya 243 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_inverse_wheel_mass
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1496 14 Dtool_l5yHFrYY 0 6 1608 3137 0 14 Dtool_l5yHFrYY 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_motor_torque
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1497 14 Dtool_l5yHCIJ7 0 6 1609 3137 0 14 Dtool_l5yHCIJ7 237 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_brake_torque
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1498 14 Dtool_l5yHHzTw 0 6 1610 3137 0 14 Dtool_l5yHHzTw 236 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_steer_angle
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
1499 14 Dtool_l5yHo88X 0 6 1611 3120 0 14 Dtool_l5yHo88X 0 2 4 this 3 3490  4 flag 1 2992  
1500 14 Dtool_l5yHVRRG 0 7 1612 3324 2585 14 Dtool_l5yHVRRG 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysxWheelShapeDesc::get_suspension
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3490  
530
2962 10 PhysxEnums 0 141313 10 PhysxEnums 10 PhysxEnums 0 0 0 0 1501 0 0 0 0 0 0 30 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 280
////////////////////////////////////////////////////////////////////
//       Class : PhysxEnums
// Description : This class exists just to provide scoping for the
//               enums shared by PhysX classes.
////////////////////////////////////////////////////////////////////

2963 14 PhysxParameter 0 794624 26 PhysxEnums::PhysxParameter 26 PhysxEnums::PhysxParameter 2962 0 0 0 0 0 0 0 0 0 86 15 P_penalty_force 27 PhysxEnums::P_penalty_force 0 12 P_skin_width 24 PhysxEnums::P_skin_width 1 31 P_default_sleep_lin_vel_squared 43 PhysxEnums::P_default_sleep_lin_vel_squared 2 31 P_default_sleep_ang_vel_squared 43 PhysxEnums::P_default_sleep_ang_vel_squared 3 18 P_bounce_threshold 30 PhysxEnums::P_bounce_threshold 4 19 P_dyn_frict_scaling 31 PhysxEnums::P_dyn_frict_scaling 5 19 P_sta_frict_scaling 31 PhysxEnums::P_sta_frict_scaling 6 22 P_max_angular_velocity 34 PhysxEnums::P_max_angular_velocity 7 15 P_continuous_cd 27 PhysxEnums::P_continuous_cd 8 21 P_visualization_scale 33 PhysxEnums::P_visualization_scale 9 16 P_adaptive_force 28 PhysxEnums::P_adaptive_force 68 19 P_coll_veta_jointed 31 PhysxEnums::P_coll_veta_jointed 69 26 P_trigger_trigger_callback 38 PhysxEnums::P_trigger_trigger_callback 70 16 P_select_hw_algo 28 PhysxEnums::P_select_hw_algo 71 13 P_ccd_epsilon 25 PhysxEnums::P_ccd_epsilon 73 30 P_solver_convergence_threshold 42 PhysxEnums::P_solver_convergence_threshold 74 18 P_bbox_noise_level 30 PhysxEnums::P_bbox_noise_level 75 27 P_implicit_sweep_cache_size 39 PhysxEnums::P_implicit_sweep_cache_size 76 22 P_default_sleep_energy 34 PhysxEnums::P_default_sleep_energy 77 28 P_constant_fluid_max_packets 40 PhysxEnums::P_constant_fluid_max_packets 78 39 P_constant_fluid_max_particles_per_step 51 PhysxEnums::P_constant_fluid_max_particles_per_step 79 28 P_asynchronous_mesh_creation 40 PhysxEnums::P_asynchronous_mesh_creation 96 35 P_force_field_custom_kernel_epsilon 47 PhysxEnums::P_force_field_custom_kernel_epsilon 97 24 P_improved_spring_solver 36 PhysxEnums::P_improved_spring_solver 98 33 P_fast_massive_bp_volume_deletion 45 PhysxEnums::P_fast_massive_bp_volume_deletion 99 20 P_legacy_joint_drive 32 PhysxEnums::P_legacy_joint_drive 100 22 P_visualize_world_axes 34 PhysxEnums::P_visualize_world_axes 10 21 P_visualize_body_axes 33 PhysxEnums::P_visualize_body_axes 11 26 P_visualize_body_mass_axes 38 PhysxEnums::P_visualize_body_mass_axes 12 29 P_visualize_body_lin_velocity 41 PhysxEnums::P_visualize_body_lin_velocity 13 29 P_visualize_body_ang_velocity 41 PhysxEnums::P_visualize_body_ang_velocity 14 29 P_visualize_body_joint_groups 41 PhysxEnums::P_visualize_body_joint_groups 22 28 P_visualize_joint_local_axes 40 PhysxEnums::P_visualize_joint_local_axes 27 28 P_visualize_joint_world_axes 40 PhysxEnums::P_visualize_joint_world_axes 28 24 P_visualize_joint_limits 36 PhysxEnums::P_visualize_joint_limits 29 25 P_visualize_contact_point 37 PhysxEnums::P_visualize_contact_point 33 26 P_visualize_contact_normal 38 PhysxEnums::P_visualize_contact_normal 34 25 P_visualize_contact_error 37 PhysxEnums::P_visualize_contact_error 35 25 P_visualize_contact_force 37 PhysxEnums::P_visualize_contact_force 36 22 P_visualize_actor_axes 34 PhysxEnums::P_visualize_actor_axes 37 27 P_visualize_collision_aabbs 39 PhysxEnums::P_visualize_collision_aabbs 38 28 P_visualize_collision_shapes 40 PhysxEnums::P_visualize_collision_shapes 39 26 P_visualize_collision_axes 38 PhysxEnums::P_visualize_collision_axes 40 31 P_visualize_collision_compounds 43 PhysxEnums::P_visualize_collision_compounds 41 30 P_visualize_collision_vnormals 42 PhysxEnums::P_visualize_collision_vnormals 42 30 P_visualize_collision_fnormals 42 PhysxEnums::P_visualize_collision_fnormals 43 27 P_visualize_collision_edges 39 PhysxEnums::P_visualize_collision_edges 44 29 P_visualize_collision_spheres 41 PhysxEnums::P_visualize_collision_spheres 45 28 P_visualize_collision_static 40 PhysxEnums::P_visualize_collision_static 47 29 P_visualize_collision_dynamic 41 PhysxEnums::P_visualize_collision_dynamic 48 26 P_visualize_collision_free 38 PhysxEnums::P_visualize_collision_free 49 25 P_visualize_collision_ccd 37 PhysxEnums::P_visualize_collision_ccd 50 31 P_visualize_collision_skeletons 43 PhysxEnums::P_visualize_collision_skeletons 51 26 P_visualize_fluid_emitters 38 PhysxEnums::P_visualize_fluid_emitters 52 26 P_visualize_fluid_position 38 PhysxEnums::P_visualize_fluid_position 53 26 P_visualize_fluid_velocity 38 PhysxEnums::P_visualize_fluid_velocity 54 31 P_visualize_fluid_kernel_radius 43 PhysxEnums::P_visualize_fluid_kernel_radius 55 24 P_visualize_fluid_bounds 36 PhysxEnums::P_visualize_fluid_bounds 56 25 P_visualize_fluid_packets 37 PhysxEnums::P_visualize_fluid_packets 57 30 P_visualize_fluid_motion_limit 42 PhysxEnums::P_visualize_fluid_motion_limit 58 31 P_visualize_fluid_dyn_collision 43 PhysxEnums::P_visualize_fluid_dyn_collision 59 31 P_visualize_fluid_stc_collision 43 PhysxEnums::P_visualize_fluid_stc_collision 60 30 P_visualize_fluid_mesh_packets 42 PhysxEnums::P_visualize_fluid_mesh_packets 61 24 P_visualize_fluid_drains 36 PhysxEnums::P_visualize_fluid_drains 62 29 P_visualize_fluid_packet_data 41 PhysxEnums::P_visualize_fluid_packet_data 90 22 P_visualize_cloth_mesh 34 PhysxEnums::P_visualize_cloth_mesh 63 28 P_visualize_cloth_collisions 40 PhysxEnums::P_visualize_cloth_collisions 64 32 P_visualize_cloth_selfcollisions 44 PhysxEnums::P_visualize_cloth_selfcollisions 65 29 P_visualize_cloth_workpackets 41 PhysxEnums::P_visualize_cloth_workpackets 66 23 P_visualize_cloth_sleep 35 PhysxEnums::P_visualize_cloth_sleep 67 30 P_visualize_cloth_sleep_vertex 42 PhysxEnums::P_visualize_cloth_sleep_vertex 94 35 P_visualize_cloth_tearable_vertices 47 PhysxEnums::P_visualize_cloth_tearable_vertices 80 25 P_visualize_cloth_tearing 37 PhysxEnums::P_visualize_cloth_tearing 81 28 P_visualize_cloth_attachment 40 PhysxEnums::P_visualize_cloth_attachment 82 29 P_visualize_cloth_validbounds 41 PhysxEnums::P_visualize_cloth_validbounds 92 25 P_visualize_softbody_mesh 37 PhysxEnums::P_visualize_softbody_mesh 83 31 P_visualize_softbody_collisions 43 PhysxEnums::P_visualize_softbody_collisions 84 32 P_visualize_softbody_workpackets 44 PhysxEnums::P_visualize_softbody_workpackets 85 26 P_visualize_softbody_sleep 38 PhysxEnums::P_visualize_softbody_sleep 86 33 P_visualize_softbody_sleep_vertex 45 PhysxEnums::P_visualize_softbody_sleep_vertex 95 38 P_visualize_softbody_tearable_vertices 50 PhysxEnums::P_visualize_softbody_tearable_vertices 87 28 P_visualize_softbody_tearing 40 PhysxEnums::P_visualize_softbody_tearing 88 31 P_visualize_softbody_attachment 43 PhysxEnums::P_visualize_softbody_attachment 89 32 P_visualize_softbody_validbounds 44 PhysxEnums::P_visualize_softbody_validbounds 93 27 P_visualize_active_vertices 39 PhysxEnums::P_visualize_active_vertices 72 24 P_visualize_force_fields 36 PhysxEnums::P_visualize_force_fields 91 0 0

2964 14 PhysxActorFlag 0 794624 26 PhysxEnums::PhysxActorFlag 26 PhysxEnums::PhysxActorFlag 2962 0 0 0 0 0 0 0 0 0 7 20 AF_disable_collision 32 PhysxEnums::AF_disable_collision 1 19 AF_disable_response 31 PhysxEnums::AF_disable_response 2 11 AF_lock_com 23 PhysxEnums::AF_lock_com 4 26 AF_fluid_disable_collision 38 PhysxEnums::AF_fluid_disable_collision 8 23 AF_contact_modification 35 PhysxEnums::AF_contact_modification 16 22 AF_force_cone_friction 34 PhysxEnums::AF_force_cone_friction 32 28 AF_user_actor_pair_filtering 40 PhysxEnums::AF_user_actor_pair_filtering 64 0 0

2965 13 PhysxBodyFlag 0 794624 25 PhysxEnums::PhysxBodyFlag 25 PhysxEnums::PhysxBodyFlag 2962 0 0 0 0 0 0 0 0 0 14 18 BF_disable_gravity 30 PhysxEnums::BF_disable_gravity 1 15 Bf_frozen_pos_x 27 PhysxEnums::Bf_frozen_pos_x 2 15 BF_frozen_pos_y 27 PhysxEnums::BF_frozen_pos_y 4 15 BF_frozen_pos_z 27 PhysxEnums::BF_frozen_pos_z 8 15 BF_frozen_rot_x 27 PhysxEnums::BF_frozen_rot_x 16 15 BF_frozen_rot_y 27 PhysxEnums::BF_frozen_rot_y 32 15 BF_frozen_rot_z 27 PhysxEnums::BF_frozen_rot_z 64 13 BF_frozen_pos 25 PhysxEnums::BF_frozen_pos 256 13 BF_frozen_rot 25 PhysxEnums::BF_frozen_rot 131072 9 BF_frozen 21 PhysxEnums::BF_frozen 131328 12 BF_kinematic 24 PhysxEnums::BF_kinematic 128 16 BF_visualization 28 PhysxEnums::BF_visualization 256 19 BF_filter_sleep_vel 31 PhysxEnums::BF_filter_sleep_vel 1024 20 BF_energy_sleep_test 32 PhysxEnums::BF_energy_sleep_test 2048 0 0

2966 19 PhysxBroadPhaseType 0 794624 31 PhysxEnums::PhysxBroadPhaseType 31 PhysxEnums::PhysxBroadPhaseType 2962 0 0 0 0 0 0 0 0 0 2 14 BPT_sap_single 26 PhysxEnums::BPT_sap_single 0 13 BPT_sap_multi 25 PhysxEnums::BPT_sap_multi 1 0 0

2967 14 PhysxClothFlag 0 794624 26 PhysxEnums::PhysxClothFlag 26 PhysxEnums::PhysxClothFlag 2962 0 0 0 0 0 0 0 0 0 18 12 CLF_pressure 24 PhysxEnums::CLF_pressure 1 10 CLF_static 22 PhysxEnums::CLF_static 2 21 CLF_disable_collision 33 PhysxEnums::CLF_disable_collision 4 17 CLF_selfcollision 29 PhysxEnums::CLF_selfcollision 8 17 CLF_visualization 29 PhysxEnums::CLF_visualization 16 11 CLF_gravity 23 PhysxEnums::CLF_gravity 32 11 CLF_bending 23 PhysxEnums::CLF_bending 64 17 CLF_bending_ortho 29 PhysxEnums::CLF_bending_ortho 128 11 CLF_damping 23 PhysxEnums::CLF_damping 256 20 CLF_collision_twoway 32 PhysxEnums::CLF_collision_twoway 512 22 CLF_triangle_collision 34 PhysxEnums::CLF_triangle_collision 2048 12 CLF_tearable 24 PhysxEnums::CLF_tearable 4096 12 CLF_hardware 24 PhysxEnums::CLF_hardware 8192 14 CLF_comdamping 26 PhysxEnums::CLF_comdamping 16384 15 CLF_validbounds 27 PhysxEnums::CLF_validbounds 32768 19 CLF_fluid_collision 31 PhysxEnums::CLF_fluid_collision 65536 23 CLF_disable_dynamic_ccd 35 PhysxEnums::CLF_disable_dynamic_ccd 131072 10 CLF_adhere 22 PhysxEnums::CLF_adhere 262144 0 0

2968 20 PhysxContactPairFlag 0 794624 32 PhysxEnums::PhysxContactPairFlag 32 PhysxEnums::PhysxContactPairFlag 2962 0 0 0 0 0 0 0 0 0 12 15 CPF_ignore_pair 27 PhysxEnums::CPF_ignore_pair 1 25 CPF_notify_on_start_touch 37 PhysxEnums::CPF_notify_on_start_touch 2 23 CPF_notify_on_end_touch 35 PhysxEnums::CPF_notify_on_end_touch 4 19 CPF_notify_on_touch 31 PhysxEnums::CPF_notify_on_touch 8 20 CPF_notify_on_impact 32 PhysxEnums::CPF_notify_on_impact 16 18 CPF_notify_on_roll 30 PhysxEnums::CPF_notify_on_roll 32 19 CPF_notify_on_slide 31 PhysxEnums::CPF_notify_on_slide 64 17 CPF_notify_forces 29 PhysxEnums::CPF_notify_forces 128 35 CPF_notify_on_start_touch_threshold 47 PhysxEnums::CPF_notify_on_start_touch_threshold 256 33 CPF_notify_on_end_touch_threshold 45 PhysxEnums::CPF_notify_on_end_touch_threshold 512 29 CPF_notify_on_touch_threshold 41 PhysxEnums::CPF_notify_on_touch_threshold 1024 32 CPF_notify_contact_modifications 44 PhysxEnums::CPF_notify_contact_modifications 65536 0 0

2969 16 PhysxCombineMode 0 794624 28 PhysxEnums::PhysxCombineMode 28 PhysxEnums::PhysxCombineMode 2962 0 0 0 0 0 0 0 0 0 4 10 CM_average 22 PhysxEnums::CM_average 0 6 CM_min 18 PhysxEnums::CM_min 1 11 CM_multiply 23 PhysxEnums::CM_multiply 2 6 CM_max 18 PhysxEnums::CM_max 3 0 0

2970 21 PhysxD6JointDriveType 0 794624 33 PhysxEnums::PhysxD6JointDriveType 33 PhysxEnums::PhysxD6JointDriveType 2962 0 0 0 0 0 0 0 0 0 2 23 D6_joint_drive_position 35 PhysxEnums::D6_joint_drive_position 1 23 D6_joint_drive_velocity 35 PhysxEnums::D6_joint_drive_velocity 2 0 0

2971 16 PhysxD6JointFlag 0 794624 28 PhysxEnums::PhysxD6JointFlag 28 PhysxEnums::PhysxD6JointFlag 2962 0 0 0 0 0 0 0 0 0 2 20 D6_joint_slerp_drive 32 PhysxEnums::D6_joint_slerp_drive 1 22 D6_joint_gear_disabled 34 PhysxEnums::D6_joint_gear_disabled 2 0 0

2972 18 PhysxD6JointMotion 0 794624 30 PhysxEnums::PhysxD6JointMotion 30 PhysxEnums::PhysxD6JointMotion 2962 0 0 0 0 0 0 0 0 0 3 22 D6_joint_motion_locked 34 PhysxEnums::D6_joint_motion_locked 0 23 D6_joint_motion_limited 35 PhysxEnums::D6_joint_motion_limited 1 20 D6_joint_motion_free 32 PhysxEnums::D6_joint_motion_free 2 0 0

2973 22 PhysxDistanceJointFlag 0 794624 34 PhysxEnums::PhysxDistanceJointFlag 34 PhysxEnums::PhysxDistanceJointFlag 2962 0 0 0 0 0 0 0 0 0 3 24 DJF_max_distance_enabled 36 PhysxEnums::DJF_max_distance_enabled 1 24 DJF_mix_distance_enabled 36 PhysxEnums::DJF_mix_distance_enabled 2 18 DJF_spring_enabled 30 PhysxEnums::DJF_spring_enabled 4 0 0

2974 13 PhysxFilterOp 0 794624 25 PhysxEnums::PhysxFilterOp 25 PhysxEnums::PhysxFilterOp 2962 0 0 0 0 0 0 0 0 0 7 6 FO_and 18 PhysxEnums::FO_and 0 5 FO_or 17 PhysxEnums::FO_or 1 6 FO_xor 18 PhysxEnums::FO_xor 2 7 FO_nand 19 PhysxEnums::FO_nand 3 6 FO_nor 18 PhysxEnums::FO_nor 4 7 FO_nxor 19 PhysxEnums::FO_nxor 5 11 FO_swap_and 23 PhysxEnums::FO_swap_and 6 0 0

2975 26 PhysxForceFieldCoordinates 0 794624 38 PhysxEnums::PhysxForceFieldCoordinates 38 PhysxEnums::PhysxForceFieldCoordinates 2962 0 0 0 0 0 0 0 0 0 4 13 FFC_cartesian 25 PhysxEnums::FFC_cartesian 0 13 FFC_spherical 25 PhysxEnums::FFC_spherical 1 15 FFC_cylindrical 27 PhysxEnums::FFC_cylindrical 2 12 FFC_toroidal 24 PhysxEnums::FFC_toroidal 3 0 0

2976 29 PhysxForceFieldShapeGroupFlag 0 794624 41 PhysxEnums::PhysxForceFieldShapeGroupFlag 41 PhysxEnums::PhysxForceFieldShapeGroupFlag 2962 0 0 0 0 0 0 0 0 0 1 18 FFSG_exclude_group 30 PhysxEnums::FFSG_exclude_group 1 0 0

2977 14 PhysxForceMode 0 794624 26 PhysxEnums::PhysxForceMode 26 PhysxEnums::PhysxForceMode 2962 0 0 0 0 0 0 0 0 0 6 8 FM_force 20 PhysxEnums::FM_force 0 10 FM_impulse 22 PhysxEnums::FM_impulse 1 18 FM_velocity_change 30 PhysxEnums::FM_velocity_change 2 17 FM_smooth_impulse 29 PhysxEnums::FM_smooth_impulse 3 25 FM_smooth_velocity_change 37 PhysxEnums::FM_smooth_velocity_change 4 15 FM_acceleration 27 PhysxEnums::FM_acceleration 5 0 0

2978 14 PhysxJointFlag 0 794624 26 PhysxEnums::PhysxJointFlag 26 PhysxEnums::PhysxJointFlag 2962 0 0 0 0 0 0 0 0 0 2 20 JF_collision_enabled 32 PhysxEnums::JF_collision_enabled 1 16 JF_visualization 28 PhysxEnums::JF_visualization 2 0 0

2979 17 PhysxMaterialFlag 0 794624 29 PhysxEnums::PhysxMaterialFlag 29 PhysxEnums::PhysxMaterialFlag 2962 0 0 0 0 0 0 0 0 0 3 14 MF_anisotropic 26 PhysxEnums::MF_anisotropic 1 19 MF_disable_friction 31 PhysxEnums::MF_disable_friction 16 26 MF_disable_strong_friction 38 PhysxEnums::MF_disable_strong_friction 32 0 0

2980 19 PhysxProjectionMode 0 794624 31 PhysxEnums::PhysxProjectionMode 31 PhysxEnums::PhysxProjectionMode 2962 0 0 0 0 0 0 0 0 0 3 7 PM_none 19 PhysxEnums::PM_none 0 16 PM_point_mindist 28 PhysxEnums::PM_point_mindist 1 17 PM_linear_mindist 29 PhysxEnums::PM_linear_mindist 2 0 0

2981 21 PhysxPruningStructure 0 794624 33 PhysxEnums::PhysxPruningStructure 33 PhysxEnums::PhysxPruningStructure 2962 0 0 0 0 0 0 0 0 0 5 7 PS_none 19 PhysxEnums::PS_none 0 9 PS_octree 21 PhysxEnums::PS_octree 1 11 PS_quadtree 23 PhysxEnums::PS_quadtree 2 20 PS_dynamic_aabb_tree 32 PhysxEnums::PS_dynamic_aabb_tree 3 19 PS_static_aabb_tree 31 PhysxEnums::PS_static_aabb_tree 4 0 0

2982 20 PhysxPulleyJointFlag 0 794624 32 PhysxEnums::PhysxPulleyJointFlag 32 PhysxEnums::PhysxPulleyJointFlag 2962 0 0 0 0 0 0 0 0 0 2 12 PJF_is_rigid 24 PhysxEnums::PJF_is_rigid 1 17 PJF_motor_enabled 29 PhysxEnums::PJF_motor_enabled 2 0 0

2983 22 PhysxRevoluteJointFlag 0 794624 34 PhysxEnums::PhysxRevoluteJointFlag 34 PhysxEnums::PhysxRevoluteJointFlag 2962 0 0 0 0 0 0 0 0 0 3 17 RJF_limit_enabled 29 PhysxEnums::RJF_limit_enabled 1 17 RJF_motor_enabled 29 PhysxEnums::RJF_motor_enabled 2 18 RJF_spring_enabled 30 PhysxEnums::RJF_spring_enabled 4 0 0

2984 14 PhysxSceneFlag 0 794624 26 PhysxEnums::PhysxSceneFlag 26 PhysxEnums::PhysxSceneFlag 2962 0 0 0 0 0 0 0 0 0 7 14 SF_disable_sse 26 PhysxEnums::SF_disable_sse 1 21 SF_disable_collisions 33 PhysxEnums::SF_disable_collisions 2 19 SF_restricted_scene 31 PhysxEnums::SF_restricted_scene 32 22 SF_disable_scene_mutex 34 PhysxEnums::SF_disable_scene_mutex 64 22 SF_force_cone_friction 34 PhysxEnums::SF_force_cone_friction 128 21 SF_sequential_primary 33 PhysxEnums::SF_sequential_primary 256 25 SF_fluid_performance_hint 37 PhysxEnums::SF_fluid_performance_hint 512 0 0

2985 14 PhysxShapeFlag 0 794624 26 PhysxEnums::PhysxShapeFlag 26 PhysxEnums::PhysxShapeFlag 2962 0 0 0 0 0 0 0 0 0 21 19 SF_trigger_on_enter 31 PhysxEnums::SF_trigger_on_enter 1 19 SF_trigger_on_leave 31 PhysxEnums::SF_trigger_on_leave 2 18 SF_trigger_on_stay 30 PhysxEnums::SF_trigger_on_stay 4 17 SF_trigger_enable 29 PhysxEnums::SF_trigger_enable 7 16 SF_visualization 28 PhysxEnums::SF_visualization 8 20 SF_disable_collision 32 PhysxEnums::SF_disable_collision 16 21 SF_disable_raycasting 33 PhysxEnums::SF_disable_raycasting 64 19 SF_disable_response 31 PhysxEnums::SF_disable_response 4096 24 SF_disable_scene_queries 36 PhysxEnums::SF_disable_scene_queries 16384 22 SF_point_contact_force 34 PhysxEnums::SF_point_contact_force 128 18 SF_feature_indices 30 PhysxEnums::SF_feature_indices 32 22 SF_dynamic_dynamic_ccd 34 PhysxEnums::SF_dynamic_dynamic_ccd 8192 14 SF_fluid_drain 26 PhysxEnums::SF_fluid_drain 256 26 SF_fluid_disable_collision 38 PhysxEnums::SF_fluid_disable_collision 1024 15 SF_fluid_twoway 27 PhysxEnums::SF_fluid_twoway 2048 14 SF_cloth_drain 26 PhysxEnums::SF_cloth_drain 32768 26 SF_cloth_disable_collision 38 PhysxEnums::SF_cloth_disable_collision 65536 15 SF_cloth_twoway 27 PhysxEnums::SF_cloth_twoway 131072 17 SF_softbody_drain 29 PhysxEnums::SF_softbody_drain 262144 29 SF_softbody_disable_collision 41 PhysxEnums::SF_softbody_disable_collision 524288 18 SF_softbody_twoway 30 PhysxEnums::SF_softbody_twoway 1048576 0 0

2986 17 PhysxSoftBodyFlag 0 794624 29 PhysxEnums::PhysxSoftBodyFlag 29 PhysxEnums::PhysxSoftBodyFlag 2962 0 0 0 0 0 0 0 0 0 15 10 SBF_static 22 PhysxEnums::SBF_static 2 21 SBF_disable_collision 33 PhysxEnums::SBF_disable_collision 4 17 SBF_selfcollision 29 PhysxEnums::SBF_selfcollision 8 17 SBF_visualization 29 PhysxEnums::SBF_visualization 16 11 SBF_gravity 23 PhysxEnums::SBF_gravity 32 22 SBF_volume_conservtion 34 PhysxEnums::SBF_volume_conservtion 64 11 SBF_damping 23 PhysxEnums::SBF_damping 128 20 SBF_collision_twoway 32 PhysxEnums::SBF_collision_twoway 256 12 SBF_tearable 24 PhysxEnums::SBF_tearable 512 12 SBF_hardware 24 PhysxEnums::SBF_hardware 1024 14 SBF_comdamping 26 PhysxEnums::SBF_comdamping 2048 15 SBF_validbounds 27 PhysxEnums::SBF_validbounds 4096 19 SBF_fluid_collision 31 PhysxEnums::SBF_fluid_collision 8192 23 SBF_disable_dynamic_ccd 35 PhysxEnums::SBF_disable_dynamic_ccd 16384 10 SBF_adhere 22 PhysxEnums::SBF_adhere 32768 0 0

2987 15 PhysxShapesType 0 794624 27 PhysxEnums::PhysxShapesType 27 PhysxEnums::PhysxShapesType 2962 0 0 0 0 0 0 0 0 0 3 9 ST_static 21 PhysxEnums::ST_static 1 10 ST_dynamic 22 PhysxEnums::ST_dynamic 2 6 ST_all 18 PhysxEnums::ST_all 3 0 0

2988 23 PhysxSphericalJointFlag 0 794624 35 PhysxEnums::PhysxSphericalJointFlag 35 PhysxEnums::PhysxSphericalJointFlag 2962 0 0 0 0 0 0 0 0 0 6 23 SJF_twist_limit_enabled 35 PhysxEnums::SJF_twist_limit_enabled 1 23 SJF_swing_limit_enabled 35 PhysxEnums::SJF_swing_limit_enabled 2 24 SJF_twist_spring_enabled 36 PhysxEnums::SJF_twist_spring_enabled 4 24 SJF_swing_spring_enabled 36 PhysxEnums::SJF_swing_spring_enabled 8 24 SJF_joint_spring_enabled 36 PhysxEnums::SJF_joint_spring_enabled 16 33 SJF_perpendicular_dir_constraints 45 PhysxEnums::SJF_perpendicular_dir_constraints 32 0 0

2989 11 PhysxUpAxis 0 794624 23 PhysxEnums::PhysxUpAxis 23 PhysxEnums::PhysxUpAxis 2962 0 0 0 0 0 0 0 0 0 3 4 X_up 16 PhysxEnums::X_up 1 4 Y_up 16 PhysxEnums::Y_up 2 4 Z_up 16 PhysxEnums::Z_up 3 0 0

2990 27 PhysxVertexAttachmentStatus 0 794624 39 PhysxEnums::PhysxVertexAttachmentStatus 39 PhysxEnums::PhysxVertexAttachmentStatus 2962 0 0 0 0 0 0 0 0 0 3 8 VAS_none 20 PhysxEnums::VAS_none 0 10 VAS_global 22 PhysxEnums::VAS_global 1 9 VAS_shape 21 PhysxEnums::VAS_shape 2 0 0

2991 14 PhysxWheelFlag 0 794624 26 PhysxEnums::PhysxWheelFlag 26 PhysxEnums::PhysxWheelFlag 2962 0 0 0 0 0 0 0 0 0 4 18 WF_steerable_input 30 PhysxEnums::WF_steerable_input 1 17 WF_steerable_auto 29 PhysxEnums::WF_steerable_auto 2 24 WF_affected_by_handbrake 36 PhysxEnums::WF_affected_by_handbrake 4 14 WF_accelerated 26 PhysxEnums::WF_accelerated 8 0 0

2992 19 PhysxWheelShapeFlag 0 794624 31 PhysxEnums::PhysxWheelShapeFlag 31 PhysxEnums::PhysxWheelShapeFlag 2962 0 0 0 0 0 0 0 0 0 7 29 WSF_wheel_axis_contact_normal 41 PhysxEnums::WSF_wheel_axis_contact_normal 1 26 WSF_input_lat_slipvelocity 38 PhysxEnums::WSF_input_lat_slipvelocity 2 26 WSF_input_lng_slipvelocity 38 PhysxEnums::WSF_input_lng_slipvelocity 4 28 WSF_unscaled_spring_behavior 40 PhysxEnums::WSF_unscaled_spring_behavior 8 23 WSF_axle_speed_override 35 PhysxEnums::WSF_axle_speed_override 16 24 WSF_emulate_legacy_wheel 36 PhysxEnums::WSF_emulate_legacy_wheel 32 20 WSF_clamped_friction 32 PhysxEnums::WSF_clamped_friction 64 0 0

2993 11 PhysxObject 0 43009 11 PhysxObject 11 PhysxObject 0 0 0 0 0 0 7 1502 1503 1504 1505 1506 1507 1508 0 0 1 0 2994 0 0 0 0 199
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//       Class : PhysxObject
// Description : 
////////////////////////////////////////////////////////////////////

2994 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2995 10 PhysxActor 0 26625 10 PhysxActor 10 PhysxActor 0 0 0 1 1513 1514 0 92 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1 3492 0 2 3 2993 1509 1510 3 2962 1511 1512 0 0 715
////////////////////////////////////////////////////////////////////
//       Class : PhysxActor
// Description : Actors are the main simulation objects. Actors
//               are owned by a scene (PhysxScene).
//
//               An actor may optionally encapsulate a dynamic rigid
//               body by setting the body member of the actor's
//               descriptor when it is created. Otherwise the actor
//               will be static (fixed in the world).
//
//               Instances of PhysxActor are created by calling
//               PhysxScene::create_actor() and destroyed by calling
//               PhysxActor::release().
////////////////////////////////////////////////////////////////////

2996 15 PhysxController 0 141313 15 PhysxController 15 PhysxController 0 0 0 0 1630 0 19 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 0 0 2 3 2993 1607 1608 3 2962 1609 1610 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : PhysxController
// Description : Abstract base class for character controllers.
////////////////////////////////////////////////////////////////////

2997 18 PhysxBoxController 0 75777 18 PhysxBoxController 18 PhysxBoxController 0 0 0 1 1631 1630 0 3 1632 1633 1634 0 0 1 0 2996 0 0 0 0 216
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxController
// Description : Box character controller.
////////////////////////////////////////////////////////////////////

2998 20 PhysxForceFieldShape 0 141313 20 PhysxForceFieldShape 20 PhysxForceFieldShape 0 0 0 0 1650 0 11 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 0 0 2 3 2993 1635 1636 3 2962 1637 1638 0 0 236
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceFieldShape
// Description : Abstract base class for force field shapes.
////////////////////////////////////////////////////////////////////

2999 23 PhysxBoxForceFieldShape 0 75777 23 PhysxBoxForceFieldShape 23 PhysxBoxForceFieldShape 0 0 0 1 1651 1650 0 4 1652 1653 1654 1655 0 0 1 0 2998 0 0 0 0 245
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxForceFieldShape
// Description : A box shaped region used to define a force field.
////////////////////////////////////////////////////////////////////

3000 10 PhysxShape 0 141313 10 PhysxShape 10 PhysxShape 0 0 0 0 1687 0 27 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 0 0 2 3 2993 1656 1657 3 2962 1658 1659 0 0 214
////////////////////////////////////////////////////////////////////
//       Class : PhysxShape
// Description : Abstract base class for shapes.
////////////////////////////////////////////////////////////////////

3001 13 PhysxBoxShape 0 75777 13 PhysxBoxShape 13 PhysxBoxShape 0 0 0 1 1688 1687 0 4 1689 1690 1691 1692 0 0 1 0 3000 0 0 0 0 754
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxShape
// Description : A box shaped collision detection primitive. Each
//               shape is owned by the actor which it is attached
//               to.
//
//               An instance can be created by calling the
//               createShape() method of the PhysxActor object that
//               will own it, with a PhysxBoxShapeDesc object as the
//               parameter, or by adding the shape descriptor to the
//               PhysxActorDesc class before creating the actor.
//
//               The shape is deleted by calling release() on the
//               shape itself.
////////////////////////////////////////////////////////////////////

3002 22 PhysxCapsuleController 0 75777 22 PhysxCapsuleController 22 PhysxCapsuleController 0 0 0 1 1693 1630 0 5 1694 1695 1696 1697 1698 0 0 1 0 2996 0 0 0 0 902
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleController
// Description : A capsule character controller.
//
//               The capsule is defined as a position, a vertical
//               height, and a radius. The height is the same height
//               as for PhysxCapsuleShape objects, i.e. the distance
//               between the two sphere centers at the end of the
//               capsule. In other words:
//
//               p = pos (returned by controller)
//               h = height
//               r = radius
//
//               p = center of capsule
//               top sphere center = p.y + h*0.5
//               bottom sphere center = p.y - h*0.5
//               top capsule point = p.y + h*0.5 + r
//               bottom capsule point = p.y - h*0.5 - r
////////////////////////////////////////////////////////////////////

3003 27 PhysxCapsuleForceFieldShape 0 75777 27 PhysxCapsuleForceFieldShape 27 PhysxCapsuleForceFieldShape 0 0 0 1 1699 1650 0 6 1700 1701 1702 1703 1704 1705 0 0 1 0 2998 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleForceFieldShape
// Description : A capsule shaped region used to define a force
//               field.
////////////////////////////////////////////////////////////////////

3004 17 PhysxCapsuleShape 0 75777 17 PhysxCapsuleShape 17 PhysxCapsuleShape 0 0 0 1 1706 1687 0 6 1707 1708 1709 1710 1711 1712 0 0 1 0 3000 0 0 0 0 1080
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleShape
// Description : A capsule shaped collision detection primitive,
//               also known as a line swept sphere. 'radius' is the
//               radius of the capsule's hemispherical ends and its
//               trunk. 'height' is the distance between the two
//               hemispherical ends of the capsule. The height is
//               along the capsule's Y axis. Each shape is owned by
//               an actor that it is attached to.
//
//               An instance can be created by calling the
//               createShape() method of the PhysxActor object that
//               should own it, with a PhysxCapsuleShapeDesc object
//               as the parameter, or by adding the shape descriptor
//               into the PhysxActorDesc class before creating the
//               actor.
//
//               The shape is deleted by calling release() on the
//               shape itself.
////////////////////////////////////////////////////////////////////

3005 10 PhysxCloth 0 26625 10 PhysxCloth 10 PhysxCloth 0 0 0 1 1717 1718 0 40 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 0 0 2 3 2993 1713 1714 3 2962 1715 1716 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : PhysxCloth
// Description : 
////////////////////////////////////////////////////////////////////

3006 14 PhysxClothMesh 0 75777 14 PhysxClothMesh 14 PhysxClothMesh 0 0 0 0 0 0 3 1759 1760 1761 0 0 1 0 2993 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : PhysxClothMesh
// Description : 
////////////////////////////////////////////////////////////////////

3007 14 PhysxClothNode 0 75777 14 PhysxClothNode 14 PhysxClothNode 0 0 0 1 1762 0 0 2 1763 1764 0 0 1 0 3008 0 0 0 0 237
////////////////////////////////////////////////////////////////////
//       Class : PhysxClothNode
// Description : Renderable geometry which represents a cloth mesh.
////////////////////////////////////////////////////////////////////

3008 8 GeomNode 0 2049 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 2 3493 3494 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

3009 16 PhysxContactPair 0 75777 16 PhysxContactPair 16 PhysxContactPair 0 0 0 0 0 0 9 1765 1766 1767 1768 1769 1770 1771 1772 1773 1 3495 0 1 0 2994 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : PhysxContactPair
// Description : An instance of this class is send with contact
//               reporting events. It contains detailed information
//               on the contact.
////////////////////////////////////////////////////////////////////

3010 17 PhysxContactPoint 0 75777 17 PhysxContactPoint 17 PhysxContactPoint 0 0 0 1 1774 0 0 7 1775 1776 1777 1778 1779 1780 1781 0 0 1 0 3011 0 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : PhysxContactPoint
// Description : A helper structure for iterating over contact
//               streams reported by PhysxContactPair.
////////////////////////////////////////////////////////////////////

3011 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

3012 15 PhysxConvexMesh 0 75777 15 PhysxConvexMesh 15 PhysxConvexMesh 0 0 0 0 0 0 3 1782 1783 1784 0 0 1 0 2993 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexMesh
// Description : A Convex Mesh. Internally represented as a list of
//               convex polygons. The number of polygons is
//               limited to 256.
////////////////////////////////////////////////////////////////////

3013 26 PhysxConvexForceFieldShape 0 75777 26 PhysxConvexForceFieldShape 26 PhysxConvexForceFieldShape 0 0 0 1 1785 1650 0 2 1786 1787 0 0 1 0 2998 0 0 0 0 249
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexForceFieldShape
// Description : A convex shaped region used to define force field.
////////////////////////////////////////////////////////////////////

3014 16 PhysxConvexShape 0 75777 16 PhysxConvexShape 16 PhysxConvexShape 0 0 0 1 1788 1687 0 2 1789 1790 0 0 1 0 3000 0 0 0 0 272
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexShape
// Description : A shapes which is used to represent an instance of
//               an convex mesh.
////////////////////////////////////////////////////////////////////

3015 10 PhysxJoint 0 141313 10 PhysxJoint 10 PhysxJoint 0 0 0 0 1814 0 19 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 0 0 2 3 2993 1791 1792 3 2962 1793 1794 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PhysxJoint
// Description : Abstract base class for the different types of
//               joints. All joints are used to connect two dynamic
//               actors, or an actor and the environment.
////////////////////////////////////////////////////////////////////

3016 21 PhysxCylindricalJoint 0 75777 21 PhysxCylindricalJoint 21 PhysxCylindricalJoint 0 0 0 1 1815 1814 0 3 1816 1817 1818 0 0 1 0 3015 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : PhysxCylindricalJoint
// Description : Cylindrical Joints permit relative translational
//               movement between two bodies along an axis, and also
//               relative rotation along the axis. 
////////////////////////////////////////////////////////////////////

3017 12 PhysxD6Joint 0 75777 12 PhysxD6Joint 12 PhysxD6Joint 0 0 0 1 1819 1814 0 7 1820 1821 1822 1823 1824 1825 1826 0 0 1 0 3015 0 0 0 0 500
////////////////////////////////////////////////////////////////////
//       Class : PhysxD6Joint
// Description : A D6 joint is a general constraint between two
//               actors.  It allows the user to individually define
//               the linear and rotational degrees of freedom.  It
//               also allows the user to configure the joint with
//               limits and driven degrees of freedom as they wish.
////////////////////////////////////////////////////////////////////

3018 18 PhysxDebugGeomNode 0 75777 18 PhysxDebugGeomNode 18 PhysxDebugGeomNode 0 0 0 1 1827 0 0 36 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 0 0 1 0 3008 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : PhysxDebugGeomNode
// Description : Renderable geometry which represents visualizations
//               of physics objects. Intended to help with
//               debugging code.
////////////////////////////////////////////////////////////////////

3019 18 PhysxDistanceJoint 0 75777 18 PhysxDistanceJoint 18 PhysxDistanceJoint 0 0 0 1 1864 1814 0 3 1865 1866 1867 0 0 1 0 3015 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : PhysxDistanceJoint
// Description : A distance joint maintains a certain distance
//               between two points on two actors. 
////////////////////////////////////////////////////////////////////

3020 15 PhysxFixedJoint 0 75777 15 PhysxFixedJoint 15 PhysxFixedJoint 0 0 0 1 1868 1814 0 3 1869 1870 1871 0 0 1 0 3015 0 0 0 0 302
////////////////////////////////////////////////////////////////////
//       Class : PhysxFixedJoint
// Description : A fixed joint permits no relative movement between
//               two bodies. ie the bodies are glued together. 
////////////////////////////////////////////////////////////////////

3021 15 PhysxForceField 0 75777 15 PhysxForceField 15 PhysxForceField 0 0 0 1 1872 0 0 8 1873 1874 1875 1876 1877 1878 1879 1880 1 3496 0 1 0 2993 0 0 0 0 520
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceField
// Description : A force field effector. Instances of this object
//               automate the application of forces onto rigid
//               bodies, fluid, soft bodies and cloth.
//               Force fields allow you to implement for example
//               gusts of wind, dust devils, vacuum cleaners or
//               anti-gravity zones.
////////////////////////////////////////////////////////////////////

3022 25 PhysxForceFieldShapeGroup 0 26625 25 PhysxForceFieldShapeGroup 25 PhysxForceFieldShapeGroup 0 0 0 1 1885 1886 0 11 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1 3497 0 2 3 2993 1881 1882 3 2962 1883 1884 0 0 198
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceFieldShapeGroup
// Description : 
////////////////////////////////////////////////////////////////////

3023 16 PhysxHeightField 0 75777 16 PhysxHeightField 16 PhysxHeightField 0 0 0 0 0 0 4 1898 1899 1900 1901 0 0 1 0 2993 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : PhysxHeightField
// Description : A height field object. 
//               Height fields work in a similar way as triangle
//               meshes specified to act as height fields, with
//               some important differences:
//
//               Triangle meshes can be made of nonuniform geometry,
//               while height fields are regular, rectangular grids.
//               This means that with PhysxHeightField, you
//               sacrifice flexibility in return for improved
//               performance and decreased memory consumption.
//
//               Height fields are referenced by shape instances of
//               type PhysxHeightFieldShape.
//
//               To create an instance of this class call
//               PhysxManager::create_height_field(), and
//               PhysxHeightField::release() to release it. This is
//               only possible once you have released all of its
//               PhysxHeightFiedShape instances before.
////////////////////////////////////////////////////////////////////

3024 21 PhysxHeightFieldShape 0 75777 21 PhysxHeightFieldShape 21 PhysxHeightFieldShape 0 0 0 1 1902 1687 0 2 1903 1904 0 0 1 0 3000 0 0 0 0 827
////////////////////////////////////////////////////////////////////
//       Class : PhysxHeightFieldShape
// Description : This class is a shape instance of a height field
//               object of type PhysxHeightField. Each shape is
//               owned by an actor that it is attached to.
//
//               An instance can be created by calling the
//               createShape() method of the PhysxActor object that
//               should own it, with a PhysxHeightFieldShapeDesc
//               object as the parameter, or by adding the shape
//               descriptor into the PhysxActorDesc class before
//               creating the actor.
//
//               The shape is deleted by calling release() on the
//               shape itself.
////////////////////////////////////////////////////////////////////

3025 13 PhysxMaterial 0 26625 13 PhysxMaterial 13 PhysxMaterial 0 0 0 1 1909 1910 0 25 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 0 0 2 3 2993 1905 1906 3 2962 1907 1908 0 0 1105
////////////////////////////////////////////////////////////////////
//       Class : PhysxMaterial
// Description : A class for describing a shape's surface
//               properties.
//
//               You can create a material which has different
//               friction coefficients depending on the direction
//               that a body in contact is trying to move in. This
//               is called anisotropic friction.
//
//               Anisotropic friction is useful for modeling things
//               like sledges, skis etc
//
//               When you create an anisotropic material you specify
//               the default friction parameters and also friction
//               parameters for the V axis. The friction parameters
//               for the V axis are applied to motion along the
//               direction of anisotropy (dirOfAnisotropy).
//
//               Default material: You can change the properties of
//               the default material by querying for material
//               index 0.
////////////////////////////////////////////////////////////////////

3026 15 PhysxPlaneShape 0 75777 15 PhysxPlaneShape 15 PhysxPlaneShape 0 0 0 1 1936 1687 0 3 1937 1938 1939 0 0 1 0 3000 0 0 0 0 1428
////////////////////////////////////////////////////////////////////
//       Class : PhysxPlaneShape
// Description : A plane collision detection primitive. By default
//               it is configured to be the y == 0 plane. You can
//               then set a normal and a d to specify an arbitrary
//               plane. d is the distance of the plane from the
//               origin along the normal, assuming the normal is
//               normalized. Thus the plane equation is:
//               normal.x * X + normal.y * Y + normal.z * Z = d
//
//               Note: the plane does not represent an infinitely
//               thin object, but rather a completely solid
//               negative half space (all points p for which
//               normal.dot(p) - d < 0 are inside the solid region.)
//
//               Each shape is owned by an actor that it is attached
//               to.
//
//               An instance can be created by calling the
//               createShape() method of the PhysxActor object that
//               should own it, with a PhysxPlaneShapeDesc object as
//               the parameter, or by adding the shape descriptor
//               into the PhysxActorDesc class before creating the
//               actor.
//
//               The shape is deleted by calling release() on the
//               shape itself.
////////////////////////////////////////////////////////////////////

3027 22 PhysxPointInPlaneJoint 0 75777 22 PhysxPointInPlaneJoint 22 PhysxPointInPlaneJoint 0 0 0 1 1940 1814 0 3 1941 1942 1943 0 0 1 0 3015 0 0 0 0 557
////////////////////////////////////////////////////////////////////
//       Class : PhysxPointInPlaneJoint
// Description : A point in plane joint constrains a point on one
//               body to only move inside a plane attached to another
//               body. 
//               The starting point of the point is defined as the
//               anchor point. The plane through this point is
//               specified by its normal which is the joint axis
//               vector.
////////////////////////////////////////////////////////////////////

3028 21 PhysxPointOnLineJoint 0 75777 21 PhysxPointOnLineJoint 21 PhysxPointOnLineJoint 0 0 0 1 1944 1814 0 3 1945 1946 1947 0 0 1 0 3015 0 0 0 0 521
////////////////////////////////////////////////////////////////////
//       Class : PhysxPointOnLineJoint
// Description : A point on line joint constrains a point on one
//               body to only move along a line attached to another
//               body. 
//               The starting point of the joint is defined as the
//               anchor point. The line through this point is
//               specified by its direction (axis) vector.
////////////////////////////////////////////////////////////////////

3029 19 PhysxPrismaticJoint 0 75777 19 PhysxPrismaticJoint 19 PhysxPrismaticJoint 0 0 0 1 1948 1814 0 3 1949 1950 1951 0 0 1 0 3015 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PhysxPrismaticJoint
// Description : A prismatic joint permits relative translational
//               movement between two bodies along an axis, but no
//               relative rotational movement. 
////////////////////////////////////////////////////////////////////

3030 16 PhysxPulleyJoint 0 75777 16 PhysxPulleyJoint 16 PhysxPulleyJoint 0 0 0 1 1952 1814 0 7 1953 1954 1955 1956 1957 1958 1959 0 0 1 0 3015 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : PhysxPulleyJoint
// Description : A pulley joint simulates a rope between two
//               objects passing over two pulleys.
////////////////////////////////////////////////////////////////////

3031 18 PhysxRevoluteJoint 0 75777 18 PhysxRevoluteJoint 18 PhysxRevoluteJoint 0 0 0 1 1960 1814 0 14 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 0 0 1 0 3015 0 0 0 0 500
////////////////////////////////////////////////////////////////////
//       Class : PhysxRevoluteJoint
// Description : A joint which behaves in a similar way to a hinge
//               or axel. A hinge joint removes all but a single
//               rotational degree of freedom from two objects. The
//               axis along which the two bodies may rotate is
//               specified with a point and a direction vector.
////////////////////////////////////////////////////////////////////

3032 18 PhysxOverlapReport 0 26625 18 PhysxOverlapReport 18 PhysxOverlapReport 0 0 0 0 1981 0 4 1977 1978 1979 1980 1 3498 0 1 3 3033 1975 1976 0 0 419
////////////////////////////////////////////////////////////////////
//       Class : PhysxOverlapReport
// Description : Objects of this class are returned by the 'overlap
//               shape' methods, for example overlapSphereShapes.
//               They contain an iterable list of all sshapes that
//               the raycast query produced.
////////////////////////////////////////////////////////////////////

3033 21 PhysxUserEntityReport 0 1050625 21 PhysxUserEntityReport 21 PhysxUserEntityReport 0 0 0 0 0 0 0 0 0 0 0 0 0

3034 9 PhysxMask 0 26625 9 PhysxMask 9 PhysxMask 0 0 0 1 1982 1983 0 6 1984 1985 1986 1987 1988 1989 0 0 0 0 0 203
////////////////////////////////////////////////////////////////////
//       Class : PhysxMask
// Description : 32-bit bitmask class.
////////////////////////////////////////////////////////////////////

3035 15 PhysxGroupsMask 0 26625 15 PhysxGroupsMask 15 PhysxGroupsMask 0 0 0 1 1990 1991 0 14 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 0 0 0 0 0 210
////////////////////////////////////////////////////////////////////
//       Class : PhysxGroupsMask
// Description : 128-bit bitmask class.
////////////////////////////////////////////////////////////////////

3036 10 PhysxScene 0 26625 10 PhysxScene 10 PhysxScene 0 0 0 1 2010 2011 0 76 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 9 3499 3500 3501 3502 3503 3504 3505 3506 3507 0 2 3 2993 2006 2007 3 2962 2008 2009 0 0 750
////////////////////////////////////////////////////////////////////
//       Class : PhysxScene
// Description : A scene is a collection of bodies, constraints,
//               and effectors which can interact.
//
//               The scene simulates the behavior of these objects
//               over time. Several scenes may exist at the same
//               time, but each body, constraint, or effector object
//               is specific to a scene -- they may not be shared.
//
//               For example, attempting to create a joint in one
//               scene and then using it to attach bodies from a
//               different scene results in undefined behavior.
////////////////////////////////////////////////////////////////////

3037 13 PhysxSoftBody 0 26625 13 PhysxSoftBody 13 PhysxSoftBody 0 0 0 1 2092 2093 0 42 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 0 0 2 3 2993 2088 2089 3 2962 2090 2091 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : PhysxSoftBody
// Description : 
////////////////////////////////////////////////////////////////////

3038 17 PhysxSoftBodyMesh 0 75777 17 PhysxSoftBodyMesh 17 PhysxSoftBodyMesh 0 0 0 0 0 0 3 2136 2137 2138 0 0 1 0 2993 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : PhysxSoftBodyMesh
// Description : 
////////////////////////////////////////////////////////////////////

3039 17 PhysxSoftBodyNode 0 75777 17 PhysxSoftBodyNode 17 PhysxSoftBodyNode 0 0 0 1 2139 0 0 2 2140 2141 0 0 1 0 3008 0 0 0 0 261
////////////////////////////////////////////////////////////////////
//       Class : PhysxSoftBodyNode
// Description : Renderable geometry which represents a soft body
//               mesh.
////////////////////////////////////////////////////////////////////

3040 26 PhysxSphereForceFieldShape 0 75777 26 PhysxSphereForceFieldShape 26 PhysxSphereForceFieldShape 0 0 0 1 2142 1650 0 4 2143 2144 2145 2146 0 0 1 0 2998 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphereForceFieldShape
// Description : A spherical force field shape.
////////////////////////////////////////////////////////////////////

3041 16 PhysxSphereShape 0 75777 16 PhysxSphereShape 16 PhysxSphereShape 0 0 0 1 2147 1687 0 4 2148 2149 2150 2151 0 0 1 0 3000 0 0 0 0 783
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphereShape
// Description : A sphere shaped collision detection primitive. 
//               Each shape is owned by an actor that it is attached
//               to.
//
//               An instance can be created by calling the
//               createShape() method of the PhysxActor object that
//               should own it, with a PhysxSphereShapeDesc object
//               as the parameter, or by adding the shape descriptor
//               into the PhysxActorDesc class before creating the
//               actor.
//
//               The shape is deleted by calling release() on the
//               shape itself.
////////////////////////////////////////////////////////////////////

3042 19 PhysxSphericalJoint 0 75777 19 PhysxSphericalJoint 19 PhysxSphericalJoint 0 0 0 1 2152 1814 0 7 2153 2154 2155 2156 2157 2158 2159 0 0 1 0 3015 0 0 0 0 465
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphericalJoint
// Description : A sphere joint constrains two points on two bodies
//               to coincide. This point, specified in world space
//               (this guarantees that the points coincide to start
//               with) is the only parameter that has to be
//               specified.
////////////////////////////////////////////////////////////////////

3043 17 PhysxTriangleMesh 0 75777 17 PhysxTriangleMesh 17 PhysxTriangleMesh 0 0 0 0 0 0 3 2160 2161 2162 0 0 1 0 2993 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : PhysxTriangleMesh
// Description : 
////////////////////////////////////////////////////////////////////

3044 22 PhysxTriangleMeshShape 0 75777 22 PhysxTriangleMeshShape 22 PhysxTriangleMeshShape 0 0 0 1 2163 1687 0 2 2164 2165 0 0 1 0 3000 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : PhysxTriangleMeshShape
// Description : A shapes which is used to represent an instance of
//               an convex mesh.
////////////////////////////////////////////////////////////////////

3045 12 PhysxVehicle 0 75777 12 PhysxVehicle 12 PhysxVehicle 0 0 0 1 2166 0 0 2 2167 2168 0 0 1 0 2993 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : PhysxVehicle
// Description : 
////////////////////////////////////////////////////////////////////

3046 10 PhysxWheel 0 75777 10 PhysxWheel 10 PhysxWheel 0 0 0 1 2169 0 0 1 2170 0 0 1 0 2993 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : PhysxWheel
// Description : 
////////////////////////////////////////////////////////////////////

3047 15 PhysxWheelShape 0 75777 15 PhysxWheelShape 15 PhysxWheelShape 0 0 0 1 2171 1687 0 21 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 0 0 1 0 3000 0 0 0 0 2099
////////////////////////////////////////////////////////////////////
//       Class : PhysxWheelShape
// Description : A special shape used for simulating a car wheel. 
//               The -Y axis should be directed toward the ground.
//
//               A ray is cast from the shape's origin along the -Y
//               axis. When the ray strikes something, and the
//               distance is:
//
//               - less than wheelRadius from the shape origin:
//                 a hard contact is created 
//               - between wheelRadius and (suspensionTravel +
//                 wheelRadius): a soft suspension contact is
//                 created 
//               - greater than (suspensionTravel + wheelRadius):
//                 no contact is created. 
//
//               Thus at the point of greatest possible suspension
//               compression the wheel axle will pass through at
//               the shape's origin. At the point greatest
//               suspension extension the wheel axle will be a
//               distance of suspensionTravel from the shape's
//               origin.
//
//               The suspension's targetValue is 0 for real cars,
//               which means that the suspension tries to extend
//               all the way. Otherwise one can specify values
//               [0,1] for suspensions which have a spring to
//               pull the wheel up when it is extended too far.
//               0.5 will then fall halfway along suspensionTravel.
//
//               The +Z axis is the 'forward' direction of travel
//               for the wheel. -Z is backwards. The wheel rolls
//               forward when rotating around the positive direction
//               around the X axis.
//
//               A positive wheel steering angle corresponds to a
//               positive rotation around the shape's Y axis.
//               (Castor angles are not modeled.)
//
//               The coordinate frame of the shape is rigidly fixed
//               on the car.
////////////////////////////////////////////////////////////////////

3048 14 PhysxActorDesc 0 26625 14 PhysxActorDesc 14 PhysxActorDesc 0 0 0 1 2193 2194 0 14 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 0 0 0 0 0 213
////////////////////////////////////////////////////////////////////
//       Class : PhysxActorDesc
// Description : Descriptor for PhysxActor.
////////////////////////////////////////////////////////////////////

3049 13 PhysxBodyDesc 0 26625 13 PhysxBodyDesc 13 PhysxBodyDesc 0 0 0 1 2209 2210 0 36 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 0 0 1 0 2962 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : PhysxBodyDesc
// Description : Descriptor for the optional rigid body dynamic
//               state of PhysxActor.
////////////////////////////////////////////////////////////////////

3050 14 PhysxShapeDesc 0 43009 14 PhysxShapeDesc 14 PhysxShapeDesc 0 0 0 0 0 0 23 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 0 0 2 3 2962 2247 2248 3 3051 2249 2250 0 0 338
////////////////////////////////////////////////////////////////////
//       Class : PhysxShapeDesc
// Description : Abstract base class for shape descriptors.
//               Descriptors for all the different shape types are
//               derived from this class.
////////////////////////////////////////////////////////////////////

3051 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

3052 12 PhysxManager 0 26625 12 PhysxManager 12 PhysxManager 0 0 0 0 2274 0 22 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 6 3508 3509 3510 3511 3512 3513 0 1 0 2962 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : PhysxManager
// Description : The central interface to the PhysX subsystem.
//               Used e. g. for setting/retrieving global parameters
//               or for creating scenes.
////////////////////////////////////////////////////////////////////

3053 12 PhysxBounds3 0 26625 12 PhysxBounds3 12 PhysxBounds3 0 0 0 1 2297 2298 0 20 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 0 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : PhysxBounds3
// Description : Represention of a axis aligned bounding box. 
//               The box is stored as minimum and maximum extent
//               corners. Alternate representation would be center
//               and dimensions. May be empty or nonempty. If not
//               empty, min <= max has to hold.
////////////////////////////////////////////////////////////////////

3054 8 PhysxBox 0 26625 8 PhysxBox 8 PhysxBox 0 0 0 1 2319 2320 0 9 2321 2322 2323 2324 2325 2326 2327 2328 2329 0 0 0 0 0 489
////////////////////////////////////////////////////////////////////
//       Class : PhysxBox
// Description : Represents an oriented bounding box, as a center
//               point, extents(radii) and a rotation. i.e. the
//               center of the box is at the center point, the box
//               is rotated around this point with the rotation and
//               it is 2*extents in width, height and depth.
////////////////////////////////////////////////////////////////////

3055 19 PhysxControllerDesc 0 141313 19 PhysxControllerDesc 19 PhysxControllerDesc 0 0 0 0 2342 0 12 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 0 0 0 0 0 236
////////////////////////////////////////////////////////////////////
//       Class : PhysxControllerDesc
// Description : Descriptor class for a character controller.
////////////////////////////////////////////////////////////////////

3056 22 PhysxBoxControllerDesc 0 26625 22 PhysxBoxControllerDesc 22 PhysxBoxControllerDesc 0 0 0 1 2343 2344 0 2 2345 2346 0 0 1 0 3055 0 0 0 0 235
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxControllerDesc
// Description : Descriptor class for PhysxBoxController.
////////////////////////////////////////////////////////////////////

3057 24 PhysxForceFieldShapeDesc 0 43009 24 PhysxForceFieldShapeDesc 24 PhysxForceFieldShapeDesc 0 0 0 0 0 0 9 2347 2348 2349 2350 2351 2352 2353 2354 2355 0 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceFieldShapeDesc
// Description : Abstract base class for descriptors for force 
//               field shapes descriptors.
////////////////////////////////////////////////////////////////////

3058 27 PhysxBoxForceFieldShapeDesc 0 26625 27 PhysxBoxForceFieldShapeDesc 27 PhysxBoxForceFieldShapeDesc 0 0 0 1 2356 2357 0 2 2358 2359 0 0 1 0 3057 0 0 0 0 239
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxForceFieldShapeDesc
// Description : Descriptor for a box force field shape.
////////////////////////////////////////////////////////////////////

3059 17 PhysxBoxShapeDesc 0 75777 17 PhysxBoxShapeDesc 17 PhysxBoxShapeDesc 0 0 0 1 2360 0 0 2 2361 2362 0 0 1 0 3050 0 0 0 0 225
////////////////////////////////////////////////////////////////////
//       Class : PhysxBoxShapeDesc
// Description : Descriptor class for PhysxBoxShape.
////////////////////////////////////////////////////////////////////

3060 12 PhysxSegment 0 26625 12 PhysxSegment 12 PhysxSegment 0 0 0 1 2363 2364 0 10 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 0 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : PhysxSegment
// Description : Represents a line segment.
////////////////////////////////////////////////////////////////////

3061 12 PhysxCapsule 0 26625 12 PhysxCapsule 12 PhysxCapsule 0 0 0 1 2375 2376 0 12 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 0 0 0 0 0 0

3062 26 PhysxCapsuleControllerDesc 0 26625 26 PhysxCapsuleControllerDesc 26 PhysxCapsuleControllerDesc 0 0 0 1 2389 2390 0 4 2391 2392 2393 2394 0 0 1 0 3055 0 0 0 0 243
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleControllerDesc
// Description : Descriptor class for PhysxCapsuleController.
////////////////////////////////////////////////////////////////////

3063 31 PhysxCapsuleForceFieldShapeDesc 0 26625 31 PhysxCapsuleForceFieldShapeDesc 31 PhysxCapsuleForceFieldShapeDesc 0 0 0 1 2395 2396 0 4 2397 2398 2399 2400 0 0 1 0 3057 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleForceFieldShapeDesc
// Description : Descriptor for a capsule force field shape.
////////////////////////////////////////////////////////////////////

3064 21 PhysxCapsuleShapeDesc 0 75777 21 PhysxCapsuleShapeDesc 21 PhysxCapsuleShapeDesc 0 0 0 1 2401 0 0 4 2402 2403 2404 2405 0 0 1 0 3050 0 0 0 0 233
////////////////////////////////////////////////////////////////////
//       Class : PhysxCapsuleShapeDesc
// Description : Descriptor class for PhysxCapsuleShape.
////////////////////////////////////////////////////////////////////

3065 14 PhysxClothDesc 0 26625 14 PhysxClothDesc 14 PhysxClothDesc 0 0 0 1 2406 2407 0 30 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 0 0 1 0 2962 0 0 0 0 213
////////////////////////////////////////////////////////////////////
//       Class : PhysxClothDesc
// Description : Descriptor for PhysxCloth.
////////////////////////////////////////////////////////////////////

3066 13 PhysxMeshPool 0 26625 13 PhysxMeshPool 13 PhysxMeshPool 0 0 0 1 2438 2439 0 9 2440 2441 2442 2443 2444 2445 2446 2447 2448 0 0 0 0 0 475
////////////////////////////////////////////////////////////////////
//       Class : PhysxMeshPool
// Description : This class unifies all references to the same
//               filename, so that multiple attempts to load the
//               same mesh will return the same pointer.
//               The mesh filename is automatically resolved before
//               an attempt to load the mesh is made.
////////////////////////////////////////////////////////////////////

3067 18 PhysxClothMeshDesc 0 26625 18 PhysxClothMeshDesc 18 PhysxClothMeshDesc 0 0 0 1 2449 2450 0 6 2451 2452 2453 2454 2455 2456 0 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : PhysxClothMeshDesc
// Description :
////////////////////////////////////////////////////////////////////

3068 24 PhysxConstraintDominance 0 26625 24 PhysxConstraintDominance 24 PhysxConstraintDominance 0 0 0 1 2457 2458 0 4 2459 2460 2461 2462 0 0 0 0 0 532
////////////////////////////////////////////////////////////////////
//       Class : PhysxConstraintDominance
// Description : Expresses the dominance relationship of a
//               constraint. For the time being only three settings
//               are permitted:. (1.0f, 1.0f), (0.0f, 1.0f), and
//               (1.0f, 0.0f). 
//
//               See PhysxScene::set_dominance_group_pair for a
//               detailed explanation of dominance behaviour.
////////////////////////////////////////////////////////////////////

3069 30 PhysxConvexForceFieldShapeDesc 0 26625 30 PhysxConvexForceFieldShapeDesc 30 PhysxConvexForceFieldShapeDesc 0 0 0 1 2463 2464 0 1 2465 0 0 1 0 3057 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexForceFieldShapeDesc
// Description : A descriptor for a convex force field shape.
////////////////////////////////////////////////////////////////////

3070 19 PhysxConvexMeshDesc 0 26625 19 PhysxConvexMeshDesc 19 PhysxConvexMeshDesc 0 0 0 1 2466 2467 0 4 2468 2469 2470 2471 0 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexMeshDesc
// Description :
////////////////////////////////////////////////////////////////////

3071 20 PhysxConvexShapeDesc 0 75777 20 PhysxConvexShapeDesc 20 PhysxConvexShapeDesc 0 0 0 1 2472 0 0 1 2473 0 0 1 0 3050 0 0 0 0 231
////////////////////////////////////////////////////////////////////
//       Class : PhysxConvexShapeDesc
// Description : Descriptor class for PhysxConvexShape.
////////////////////////////////////////////////////////////////////

3072 14 PhysxJointDesc 0 43009 14 PhysxJointDesc 14 PhysxJointDesc 0 0 0 0 0 0 22 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 0 0 1 3 2962 2474 2475 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PhysxJointDesc
// Description : Abstract base class for joint descriptors.
////////////////////////////////////////////////////////////////////

3073 25 PhysxCylindricalJointDesc 0 26625 25 PhysxCylindricalJointDesc 25 PhysxCylindricalJointDesc 0 0 0 1 2498 2499 0 0 0 0 1 0 3072 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : PhysxCylindricalJointDesc
// Description : Descriptor class for sliding joint. See
//               PhysxCylindricalJoint.
////////////////////////////////////////////////////////////////////

3074 16 PhysxD6JointDesc 0 26625 16 PhysxD6JointDesc 16 PhysxD6JointDesc 0 0 0 1 2500 2501 0 52 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 0 0 1 0 3072 0 0 0 0 189
////////////////////////////////////////////////////////////////////
//       Class : PhysxD6JointDesc
// Description : 
////////////////////////////////////////////////////////////////////

3075 19 PhysxJointDriveDesc 0 26625 19 PhysxJointDriveDesc 19 PhysxJointDriveDesc 0 0 0 1 2554 2555 0 8 2556 2557 2558 2559 2560 2561 2562 2563 0 0 1 0 2962 0 0 0 0 262
////////////////////////////////////////////////////////////////////
//       Class : PhysxJointDriveDesc
// Description : Used to describe drive properties for a
//               PhysxD6Joint.
////////////////////////////////////////////////////////////////////

3076 23 PhysxJointLimitSoftDesc 0 26625 23 PhysxJointLimitSoftDesc 23 PhysxJointLimitSoftDesc 0 0 0 1 2564 2565 0 8 2566 2567 2568 2569 2570 2571 2572 2573 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : PhysxJointLimitSoftDesc
// Description : Describes a joint limit.
////////////////////////////////////////////////////////////////////

3077 22 PhysxDistanceJointDesc 0 26625 22 PhysxDistanceJointDesc 22 PhysxDistanceJointDesc 0 0 0 1 2574 2575 0 8 2576 2577 2578 2579 2580 2581 2582 2583 0 0 1 0 3072 0 0 0 0 272
////////////////////////////////////////////////////////////////////
//       Class : PhysxDistanceJointDesc
// Description : Descriptor class for distance joint. See
//               PhysxDistanceJoint.
////////////////////////////////////////////////////////////////////

3078 15 PhysxSpringDesc 0 26625 15 PhysxSpringDesc 15 PhysxSpringDesc 0 0 0 1 2584 2585 0 6 2586 2587 2588 2589 2590 2591 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : PhysxSpringDesc
// Description : Describes a joint spring. The spring is implicitly
//               integrated, so even high spring and damper
//               coefficients should be robust.
////////////////////////////////////////////////////////////////////

3079 19 PhysxFixedJointDesc 0 26625 19 PhysxFixedJointDesc 19 PhysxFixedJointDesc 0 0 0 1 2592 2593 0 0 0 0 1 0 3072 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : PhysxFixedJointDesc
// Description : Descriptor class for fixed joint. A fixed joint
//               permits no relative movement between two bodies, 
//               i. e. the bodies are glued together. 
////////////////////////////////////////////////////////////////////

3080 19 PhysxForceFieldDesc 0 26625 19 PhysxForceFieldDesc 19 PhysxForceFieldDesc 0 0 0 1 2594 2595 0 19 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 0 0 1 0 2962 0 0 0 0 226
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceFieldDesc
// Description : Descriptor class for force fields.
////////////////////////////////////////////////////////////////////

3081 29 PhysxForceFieldShapeGroupDesc 0 26625 29 PhysxForceFieldShapeGroupDesc 29 PhysxForceFieldShapeGroupDesc 0 0 0 1 2615 2616 0 7 2617 2618 2619 2620 2621 2622 2623 0 0 1 0 2962 0 0 0 0 202
////////////////////////////////////////////////////////////////////
//       Class : PhysxForceFieldShapeGroupDesc
// Description : 
////////////////////////////////////////////////////////////////////

3082 20 PhysxHeightFieldDesc 0 26625 20 PhysxHeightFieldDesc 20 PhysxHeightFieldDesc 0 0 0 1 2624 2625 0 9 2626 2627 2628 2629 2630 2631 2632 2633 2634 0 0 0 0 0 483
////////////////////////////////////////////////////////////////////
//       Class : PhysxHeightFieldDesc
// Description : Descriptor class for height fields. The height
//               field data is copied when a PhysxHeightField object
//               is created from this descriptor. After the call 
//               the user may discard the original height data (e.g.
//               release the PNGImage).
////////////////////////////////////////////////////////////////////

3083 25 PhysxHeightFieldShapeDesc 0 75777 25 PhysxHeightFieldShapeDesc 25 PhysxHeightFieldShapeDesc 0 0 0 1 2635 0 0 6 2636 2637 2638 2639 2640 2641 0 0 1 0 3050 0 0 0 0 241
////////////////////////////////////////////////////////////////////
//       Class : PhysxHeightFieldShapeDesc
// Description : Descriptor class for PhysxHeightFieldShape.
////////////////////////////////////////////////////////////////////

3084 19 PhysxJointLimitDesc 0 26625 19 PhysxJointLimitDesc 19 PhysxJointLimitDesc 0 0 0 1 2642 2643 0 6 2644 2645 2646 2647 2648 2649 0 0 0 0 0 216
////////////////////////////////////////////////////////////////////
//       Class : PhysxJointLimitDesc
// Description : Describes a joint limit.
////////////////////////////////////////////////////////////////////

3085 12 PhysxKitchen 0 26625 12 PhysxKitchen 12 PhysxKitchen 0 0 0 1 2650 2651 0 6 2652 2653 2654 2655 2656 2657 0 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : PhysxKitchen
// Description : 
////////////////////////////////////////////////////////////////////

3086 21 PhysxTriangleMeshDesc 0 26625 21 PhysxTriangleMeshDesc 21 PhysxTriangleMeshDesc 0 0 0 1 2658 2659 0 6 2660 2661 2662 2663 2664 2665 0 0 0 0 0 193
////////////////////////////////////////////////////////////////////
//       Class : PhysxTriangleMeshDesc
// Description :
////////////////////////////////////////////////////////////////////

3087 21 PhysxSoftBodyMeshDesc 0 26625 21 PhysxSoftBodyMeshDesc 21 PhysxSoftBodyMeshDesc 0 0 0 1 2666 2667 0 5 2668 2669 2670 2671 2672 0 0 0 0 0 193
////////////////////////////////////////////////////////////////////
//       Class : PhysxSoftBodyMeshDesc
// Description :
////////////////////////////////////////////////////////////////////

3088 14 PhysxSceneDesc 0 26625 14 PhysxSceneDesc 14 PhysxSceneDesc 0 0 0 1 2673 2674 0 20 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 0 0 1 0 2962 0 0 0 0 213
////////////////////////////////////////////////////////////////////
//       Class : PhysxSceneDesc
// Description : Descriptor for PhysxScene.
////////////////////////////////////////////////////////////////////

3089 17 PhysxMaterialDesc 0 26625 17 PhysxMaterialDesc 17 PhysxMaterialDesc 0 0 0 1 2695 2696 0 20 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 0 0 1 0 2962 0 0 0 0 240
////////////////////////////////////////////////////////////////////
//       Class : PhysxMaterialDesc
// Description : Descriptor class for materials. See PhysxMaterial.
////////////////////////////////////////////////////////////////////

3090 14 PhysxMotorDesc 0 26625 14 PhysxMotorDesc 14 PhysxMotorDesc 0 0 0 1 2717 2718 0 6 2719 2720 2721 2722 2723 2724 0 0 0 0 0 465
////////////////////////////////////////////////////////////////////
//       Class : PhysxMotorDesc
// Description : Describes a joint motor. Some joints can be
//               motorized, this allows them to apply a force to
//               cause attached actors to move. Joints which can be
//               motorized:
//               - PhysxPulleyJoint
//               - PhysxRevoluteJoint
////////////////////////////////////////////////////////////////////

3091 10 PhysxPlane 0 26625 10 PhysxPlane 10 PhysxPlane 0 0 0 1 2725 2726 0 13 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 0 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : PhysxPlane
// Description : 
////////////////////////////////////////////////////////////////////

3092 19 PhysxPlaneShapeDesc 0 75777 19 PhysxPlaneShapeDesc 19 PhysxPlaneShapeDesc 0 0 0 1 2740 0 0 1 2741 0 0 1 0 3050 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PhysxPlaneShapeDesc
// Description : Descriptor class for PhysxPlaneShape.
////////////////////////////////////////////////////////////////////

3093 26 PhysxPointInPlaneJointDesc 0 26625 26 PhysxPointInPlaneJointDesc 26 PhysxPointInPlaneJointDesc 0 0 0 1 2742 2743 0 0 0 0 1 0 3072 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : PhysxPointInPlaneJointDesc
// Description : Descriptor class for point-in-plane joint. See
//               PhysxPointInPlaneJoint.
////////////////////////////////////////////////////////////////////

3094 25 PhysxPointOnLineJointDesc 0 26625 25 PhysxPointOnLineJointDesc 25 PhysxPointOnLineJointDesc 0 0 0 1 2744 2745 0 0 0 0 1 0 3072 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : PhysxPointOnLineJointDesc
// Description : Descriptor class for point-on-line joint.
//               See PhysxPointOnLineJoint.
////////////////////////////////////////////////////////////////////

3095 23 PhysxPrismaticJointDesc 0 26625 23 PhysxPrismaticJointDesc 23 PhysxPrismaticJointDesc 0 0 0 1 2746 2747 0 0 0 0 1 0 3072 0 0 0 0 275
////////////////////////////////////////////////////////////////////
//       Class : PhysxPrismaticJointDesc
// Description : Descriptor class for prismatic joint. See
//               PhysxPrismaticJoint.
////////////////////////////////////////////////////////////////////

3096 20 PhysxPulleyJointDesc 0 26625 20 PhysxPulleyJointDesc 20 PhysxPulleyJointDesc 0 0 0 1 2748 2749 0 12 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 0 0 1 0 3072 0 0 0 0 268
////////////////////////////////////////////////////////////////////
//       Class : PhysxPulleyJointDesc
// Description : Descriptor class for distance joint. See
//               PhysxPulleyJoint.
////////////////////////////////////////////////////////////////////

3097 8 PhysxRay 0 26625 8 PhysxRay 8 PhysxRay 0 0 0 1 2762 2763 0 6 2764 2765 2766 2767 2768 2769 0 0 0 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : PhysxRay
// Description : Represents an ray as an origin and direction.
//               The ray will be infinite if no length is given.
////////////////////////////////////////////////////////////////////

3098 15 PhysxRaycastHit 0 26625 15 PhysxRaycastHit 15 PhysxRaycastHit 0 0 0 1 2770 2771 0 5 2772 2773 2774 2775 2776 0 0 0 0 0 321
////////////////////////////////////////////////////////////////////
//       Class : PhysxRaycastHit
// Description : This structure captures results for a single
//               raycast query.  See PhysxScene for raycasting
//               methods.
////////////////////////////////////////////////////////////////////

3099 18 PhysxRaycastReport 0 26625 18 PhysxRaycastReport 18 PhysxRaycastReport 0 0 0 0 2783 0 4 2779 2780 2781 2782 1 3514 0 1 3 3100 2777 2778 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : PhysxRaycastReport
// Description : Objects of this class are returned by the 'raycast
//               all' methods. They contain an iterable list of all
//               hits that the raycast query produced.
////////////////////////////////////////////////////////////////////

3100 19 NxUserRaycastReport 0 2049 19 NxUserRaycastReport 19 NxUserRaycastReport 0 0 0 0 0 0 0 0 0 0 0 0 0

3101 22 PhysxRevoluteJointDesc 0 26625 22 PhysxRevoluteJointDesc 22 PhysxRevoluteJointDesc 0 0 0 1 2784 2785 0 16 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 0 0 1 0 3072 0 0 0 0 272
////////////////////////////////////////////////////////////////////
//       Class : PhysxRevoluteJointDesc
// Description : Descriptor class for distance joint. See
//               PhysxRevoluteJoint.
////////////////////////////////////////////////////////////////////

3102 16 PhysxSceneStats2 0 26625 16 PhysxSceneStats2 16 PhysxSceneStats2 0 0 0 1 2802 2803 0 5 2804 2805 2806 2807 2808 0 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : PhysxSceneStats2
// Description :
////////////////////////////////////////////////////////////////////

3103 16 PhysxVehicleDesc 0 75777 16 PhysxVehicleDesc 16 PhysxVehicleDesc 0 0 0 1 2809 0 0 2 2810 2811 0 0 1 0 3051 0 0 0 0 189
////////////////////////////////////////////////////////////////////
//       Class : PhysxVehicleDesc
// Description : 
////////////////////////////////////////////////////////////////////

3104 17 PhysxSoftBodyDesc 0 26625 17 PhysxSoftBodyDesc 17 PhysxSoftBodyDesc 0 0 0 1 2812 2813 0 34 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 0 0 1 0 2962 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : PhysxSoftBodyDesc
// Description : Descriptor for PhysxSoftBody.
////////////////////////////////////////////////////////////////////

3105 11 PhysxSphere 0 26625 11 PhysxSphere 11 PhysxSphere 0 0 0 1 2848 2849 0 7 2850 2851 2852 2853 2854 2855 2856 0 0 0 0 0 260
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphere
// Description : Represents a sphere defined by its center point
//               and radius.
////////////////////////////////////////////////////////////////////

3106 30 PhysxSphereForceFieldShapeDesc 0 26625 30 PhysxSphereForceFieldShapeDesc 30 PhysxSphereForceFieldShapeDesc 0 0 0 1 2857 2858 0 2 2859 2860 0 0 1 0 3057 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphereForceFieldShapeDesc
// Description : A descriptor for a sphere force field shape.
////////////////////////////////////////////////////////////////////

3107 20 PhysxSphereShapeDesc 0 75777 20 PhysxSphereShapeDesc 20 PhysxSphereShapeDesc 0 0 0 1 2861 0 0 2 2862 2863 0 0 1 0 3050 0 0 0 0 231
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphereShapeDesc
// Description : Descriptor class for PhysxSphereShape.
////////////////////////////////////////////////////////////////////

3108 23 PhysxSphericalJointDesc 0 26625 23 PhysxSphericalJointDesc 23 PhysxSphericalJointDesc 0 0 0 1 2864 2865 0 20 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 0 0 1 0 3072 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : PhysxSphericalJointDesc
// Description : Descriptor class for distance joint. See
//               PhysxSphericalJoint.
////////////////////////////////////////////////////////////////////

3109 26 PhysxTriangleMeshShapeDesc 0 75777 26 PhysxTriangleMeshShapeDesc 26 PhysxTriangleMeshShapeDesc 0 0 0 1 2886 0 0 1 2887 0 0 1 0 3050 0 0 0 0 243
////////////////////////////////////////////////////////////////////
//       Class : PhysxTriangleMeshShapeDesc
// Description : Descriptor class for PhysxTriangleMeshShape.
////////////////////////////////////////////////////////////////////

3110 12 PhysxUtilLib 0 26625 12 PhysxUtilLib 12 PhysxUtilLib 0 0 0 1 2888 2889 0 52 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 0 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : PhysxUtilLib
// Description : 
////////////////////////////////////////////////////////////////////

3111 14 PhysxWheelDesc 0 75777 14 PhysxWheelDesc 14 PhysxWheelDesc 0 0 0 1 2942 0 0 2 2943 2944 0 0 1 0 3051 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : PhysxWheelDesc
// Description : 
////////////////////////////////////////////////////////////////////

3112 19 PhysxWheelShapeDesc 0 75777 19 PhysxWheelShapeDesc 19 PhysxWheelShapeDesc 0 0 0 1 2945 0 0 16 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 0 0 1 0 3050 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PhysxWheelShapeDesc
// Description : Descriptor class for PhysxWheelShape.
////////////////////////////////////////////////////////////////////

3113 13 PhysxObject * 0 8576 13 PhysxObject * 13 PhysxObject * 0 0 2993 0 0 0 0 0 0 0 0 0 0

3114 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3115 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 3116 0 0 0 0 0 0 0 0 0 0

3116 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

3117 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3118 19 PhysxObject const * 0 8576 19 PhysxObject const * 19 PhysxObject const * 0 0 3119 0 0 0 0 0 0 0 0 0 0

3119 17 PhysxObject const 0 8832 17 PhysxObject const 17 PhysxObject const 0 0 2993 0 0 0 0 0 0 0 0 0 0

3120 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3121 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 3122 0 0 0 0 0 0 0 0 0 0

3122 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3123 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3124 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3125 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 3124 0 0 0 0 0 0 0 0 0 0

3126 12 PhysxActor * 0 8576 12 PhysxActor * 12 PhysxActor * 0 0 2995 0 0 0 0 0 0 0 0 0 0

3127 18 PhysxActor const * 0 8576 18 PhysxActor const * 18 PhysxActor const * 0 0 3128 0 0 0 0 0 0 0 0 0 0

3128 16 PhysxActor const 0 8832 16 PhysxActor const 16 PhysxActor const 0 0 2995 0 0 0 0 0 0 0 0 0 0

3129 15 PhysxBodyDesc * 0 8576 15 PhysxBodyDesc * 15 PhysxBodyDesc * 0 0 3049 0 0 0 0 0 0 0 0 0 0

3130 16 PhysxActorDesc * 0 8576 16 PhysxActorDesc * 16 PhysxActorDesc * 0 0 3048 0 0 0 0 0 0 0 0 0 0

3131 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3132 0 0 0 0 0 0 0 0 0 0

3132 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 3133 0 0 0 0 0 0 0 0 0 0

3133 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3134 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3135 0 0 0 0 0 0 0 0 0 0

3135 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3136 0 0 0 0 0 0 0 0 0 0

3136 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 3515 3516 3517 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3137 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3138 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3139 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 3133 0 0 0 0 0 0 0 0 0 0

3140 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3136 0 0 0 0 0 0 0 0 0 0

3141 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3142 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3141 0 0 0 0 0 0 0 0 0 0

3143 12 PhysxScene * 0 8576 12 PhysxScene * 12 PhysxScene * 0 0 3036 0 0 0 0 0 0 0 0 0 0

3144 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 3145 0 0 0 0 0 0 0 0 0 0

3145 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 3146 0 0 0 0 0 0 0 0 0 0

3146 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 3518 3519 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

3147 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 3146 0 0 0 0 0 0 0 0 0 0

3148 16 PhysxShapeDesc * 0 8576 16 PhysxShapeDesc * 16 PhysxShapeDesc * 0 0 3050 0 0 0 0 0 0 0 0 0 0

3149 12 PhysxShape * 0 8576 12 PhysxShape * 12 PhysxShape * 0 0 3000 0 0 0 0 0 0 0 0 0 0

3150 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 3151 0 0 0 0 0 0 0 0 0 0

3151 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 3152 0 0 0 0 0 0 0 0 0 0

3152 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3153 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3154 0 0 0 0 0 0 0 0 0 0

3154 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3155 0 0 0 0 0 0 0 0 0 0

3155 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 3520 3521 3522 3523 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3156 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3155 0 0 0 0 0 0 0 0 0 0

3157 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 3152 0 0 0 0 0 0 0 0 0 0

3158 12 PhysxEnums * 0 8576 12 PhysxEnums * 12 PhysxEnums * 0 0 2962 0 0 0 0 0 0 0 0 0 0

3159 17 PhysxController * 0 8576 17 PhysxController * 17 PhysxController * 0 0 2996 0 0 0 0 0 0 0 0 0 0

3160 23 PhysxController const * 0 8576 23 PhysxController const * 23 PhysxController const * 0 0 3161 0 0 0 0 0 0 0 0 0 0

3161 21 PhysxController const 0 8832 21 PhysxController const 21 PhysxController const 0 0 2996 0 0 0 0 0 0 0 0 0 0

3162 20 PhysxBoxController * 0 8576 20 PhysxBoxController * 20 PhysxBoxController * 0 0 2997 0 0 0 0 0 0 0 0 0 0

3163 26 PhysxBoxController const * 0 8576 26 PhysxBoxController const * 26 PhysxBoxController const * 0 0 3164 0 0 0 0 0 0 0 0 0 0

3164 24 PhysxBoxController const 0 8832 24 PhysxBoxController const 24 PhysxBoxController const 0 0 2997 0 0 0 0 0 0 0 0 0 0

3165 22 PhysxForceFieldShape * 0 8576 22 PhysxForceFieldShape * 22 PhysxForceFieldShape * 0 0 2998 0 0 0 0 0 0 0 0 0 0

3166 28 PhysxForceFieldShape const * 0 8576 28 PhysxForceFieldShape const * 28 PhysxForceFieldShape const * 0 0 3167 0 0 0 0 0 0 0 0 0 0

3167 26 PhysxForceFieldShape const 0 8832 26 PhysxForceFieldShape const 26 PhysxForceFieldShape const 0 0 2998 0 0 0 0 0 0 0 0 0 0

3168 17 PhysxForceField * 0 8576 17 PhysxForceField * 17 PhysxForceField * 0 0 3021 0 0 0 0 0 0 0 0 0 0

3169 27 PhysxForceFieldShapeGroup * 0 8576 27 PhysxForceFieldShapeGroup * 27 PhysxForceFieldShapeGroup * 0 0 3022 0 0 0 0 0 0 0 0 0 0

3170 25 PhysxBoxForceFieldShape * 0 8576 25 PhysxBoxForceFieldShape * 25 PhysxBoxForceFieldShape * 0 0 2999 0 0 0 0 0 0 0 0 0 0

3171 31 PhysxBoxForceFieldShape const * 0 8576 31 PhysxBoxForceFieldShape const * 31 PhysxBoxForceFieldShape const * 0 0 3172 0 0 0 0 0 0 0 0 0 0

3172 29 PhysxBoxForceFieldShape const 0 8832 29 PhysxBoxForceFieldShape const 29 PhysxBoxForceFieldShape const 0 0 2999 0 0 0 0 0 0 0 0 0 0

3173 29 PhysxBoxForceFieldShapeDesc * 0 8576 29 PhysxBoxForceFieldShapeDesc * 29 PhysxBoxForceFieldShapeDesc * 0 0 3058 0 0 0 0 0 0 0 0 0 0

3174 18 PhysxShape const * 0 8576 18 PhysxShape const * 18 PhysxShape const * 0 0 3175 0 0 0 0 0 0 0 0 0 0

3175 16 PhysxShape const 0 8832 16 PhysxShape const 16 PhysxShape const 0 0 3000 0 0 0 0 0 0 0 0 0 0

3176 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3177 21 PhysxMaterial const * 0 8576 21 PhysxMaterial const * 21 PhysxMaterial const * 0 0 3178 0 0 0 0 0 0 0 0 0 0

3178 19 PhysxMaterial const 0 8832 19 PhysxMaterial const 19 PhysxMaterial const 0 0 3025 0 0 0 0 0 0 0 0 0 0

3179 23 PhysxGroupsMask const * 0 8576 23 PhysxGroupsMask const * 23 PhysxGroupsMask const * 0 0 3180 0 0 0 0 0 0 0 0 0 0

3180 21 PhysxGroupsMask const 0 8832 21 PhysxGroupsMask const 21 PhysxGroupsMask const 0 0 3035 0 0 0 0 0 0 0 0 0 0

3181 17 PhysxGroupsMask * 0 8576 17 PhysxGroupsMask * 17 PhysxGroupsMask * 0 0 3035 0 0 0 0 0 0 0 0 0 0

3182 14 PhysxBounds3 * 0 8576 14 PhysxBounds3 * 14 PhysxBounds3 * 0 0 3053 0 0 0 0 0 0 0 0 0 0

3183 20 PhysxBounds3 const * 0 8576 20 PhysxBounds3 const * 20 PhysxBounds3 const * 0 0 3184 0 0 0 0 0 0 0 0 0 0

3184 18 PhysxBounds3 const 0 8832 18 PhysxBounds3 const 18 PhysxBounds3 const 0 0 3053 0 0 0 0 0 0 0 0 0 0

3185 20 PhysxCapsule const * 0 8576 20 PhysxCapsule const * 20 PhysxCapsule const * 0 0 3186 0 0 0 0 0 0 0 0 0 0

3186 18 PhysxCapsule const 0 8832 18 PhysxCapsule const 18 PhysxCapsule const 0 0 3061 0 0 0 0 0 0 0 0 0 0

3187 16 PhysxBox const * 0 8576 16 PhysxBox const * 16 PhysxBox const * 0 0 3188 0 0 0 0 0 0 0 0 0 0

3188 14 PhysxBox const 0 8832 14 PhysxBox const 14 PhysxBox const 0 0 3054 0 0 0 0 0 0 0 0 0 0

3189 19 PhysxSphere const * 0 8576 19 PhysxSphere const * 19 PhysxSphere const * 0 0 3190 0 0 0 0 0 0 0 0 0 0

3190 17 PhysxSphere const 0 8832 17 PhysxSphere const 17 PhysxSphere const 0 0 3105 0 0 0 0 0 0 0 0 0 0

3191 16 PhysxRay const * 0 8576 16 PhysxRay const * 16 PhysxRay const * 0 0 3192 0 0 0 0 0 0 0 0 0 0

3192 14 PhysxRay const 0 8832 14 PhysxRay const 14 PhysxRay const 0 0 3097 0 0 0 0 0 0 0 0 0 0

3193 17 PhysxRaycastHit * 0 8576 17 PhysxRaycastHit * 17 PhysxRaycastHit * 0 0 3098 0 0 0 0 0 0 0 0 0 0

3194 15 PhysxBoxShape * 0 8576 15 PhysxBoxShape * 15 PhysxBoxShape * 0 0 3001 0 0 0 0 0 0 0 0 0 0

3195 21 PhysxBoxShape const * 0 8576 21 PhysxBoxShape const * 21 PhysxBoxShape const * 0 0 3196 0 0 0 0 0 0 0 0 0 0

3196 19 PhysxBoxShape const 0 8832 19 PhysxBoxShape const 19 PhysxBoxShape const 0 0 3001 0 0 0 0 0 0 0 0 0 0

3197 19 PhysxBoxShapeDesc * 0 8576 19 PhysxBoxShapeDesc * 19 PhysxBoxShapeDesc * 0 0 3059 0 0 0 0 0 0 0 0 0 0

3198 24 PhysxCapsuleController * 0 8576 24 PhysxCapsuleController * 24 PhysxCapsuleController * 0 0 3002 0 0 0 0 0 0 0 0 0 0

3199 30 PhysxCapsuleController const * 0 8576 30 PhysxCapsuleController const * 30 PhysxCapsuleController const * 0 0 3200 0 0 0 0 0 0 0 0 0 0

3200 28 PhysxCapsuleController const 0 8832 28 PhysxCapsuleController const 28 PhysxCapsuleController const 0 0 3002 0 0 0 0 0 0 0 0 0 0

3201 29 PhysxCapsuleForceFieldShape * 0 8576 29 PhysxCapsuleForceFieldShape * 29 PhysxCapsuleForceFieldShape * 0 0 3003 0 0 0 0 0 0 0 0 0 0

3202 35 PhysxCapsuleForceFieldShape const * 0 8576 35 PhysxCapsuleForceFieldShape const * 35 PhysxCapsuleForceFieldShape const * 0 0 3203 0 0 0 0 0 0 0 0 0 0

3203 33 PhysxCapsuleForceFieldShape const 0 8832 33 PhysxCapsuleForceFieldShape const 33 PhysxCapsuleForceFieldShape const 0 0 3003 0 0 0 0 0 0 0 0 0 0

3204 33 PhysxCapsuleForceFieldShapeDesc * 0 8576 33 PhysxCapsuleForceFieldShapeDesc * 33 PhysxCapsuleForceFieldShapeDesc * 0 0 3063 0 0 0 0 0 0 0 0 0 0

3205 19 PhysxCapsuleShape * 0 8576 19 PhysxCapsuleShape * 19 PhysxCapsuleShape * 0 0 3004 0 0 0 0 0 0 0 0 0 0

3206 25 PhysxCapsuleShape const * 0 8576 25 PhysxCapsuleShape const * 25 PhysxCapsuleShape const * 0 0 3207 0 0 0 0 0 0 0 0 0 0

3207 23 PhysxCapsuleShape const 0 8832 23 PhysxCapsuleShape const 23 PhysxCapsuleShape const 0 0 3004 0 0 0 0 0 0 0 0 0 0

3208 23 PhysxCapsuleShapeDesc * 0 8576 23 PhysxCapsuleShapeDesc * 23 PhysxCapsuleShapeDesc * 0 0 3064 0 0 0 0 0 0 0 0 0 0

3209 12 PhysxCloth * 0 8576 12 PhysxCloth * 12 PhysxCloth * 0 0 3005 0 0 0 0 0 0 0 0 0 0

3210 18 PhysxCloth const * 0 8576 18 PhysxCloth const * 18 PhysxCloth const * 0 0 3211 0 0 0 0 0 0 0 0 0 0

3211 16 PhysxCloth const 0 8832 16 PhysxCloth const 16 PhysxCloth const 0 0 3005 0 0 0 0 0 0 0 0 0 0

3212 16 PhysxClothNode * 0 8576 16 PhysxClothNode * 16 PhysxClothNode * 0 0 3007 0 0 0 0 0 0 0 0 0 0

3213 22 PhysxClothMesh const * 0 8576 22 PhysxClothMesh const * 22 PhysxClothMesh const * 0 0 3214 0 0 0 0 0 0 0 0 0 0

3214 20 PhysxClothMesh const 0 8832 20 PhysxClothMesh const 20 PhysxClothMesh const 0 0 3006 0 0 0 0 0 0 0 0 0 0

3215 16 PhysxClothMesh * 0 8576 16 PhysxClothMesh * 16 PhysxClothMesh * 0 0 3006 0 0 0 0 0 0 0 0 0 0

3216 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 3217 0 0 0 0 0 0 0 0 0 0

3217 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 3218 0 0 0 0 0 0 0 0 0 0

3218 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

3219 24 PhysxContactPair const * 0 8576 24 PhysxContactPair const * 24 PhysxContactPair const * 0 0 3220 0 0 0 0 0 0 0 0 0 0

3220 22 PhysxContactPair const 0 8832 22 PhysxContactPair const 22 PhysxContactPair const 0 0 3009 0 0 0 0 0 0 0 0 0 0

3221 18 PhysxContactPair * 0 8576 18 PhysxContactPair * 18 PhysxContactPair * 0 0 3009 0 0 0 0 0 0 0 0 0 0

3222 19 PhysxContactPoint * 0 8576 19 PhysxContactPoint * 19 PhysxContactPoint * 0 0 3010 0 0 0 0 0 0 0 0 0 0

3223 25 PhysxContactPoint const * 0 8576 25 PhysxContactPoint const * 25 PhysxContactPoint const * 0 0 3224 0 0 0 0 0 0 0 0 0 0

3224 23 PhysxContactPoint const 0 8832 23 PhysxContactPoint const 23 PhysxContactPoint const 0 0 3010 0 0 0 0 0 0 0 0 0 0

3225 23 PhysxConvexMesh const * 0 8576 23 PhysxConvexMesh const * 23 PhysxConvexMesh const * 0 0 3226 0 0 0 0 0 0 0 0 0 0

3226 21 PhysxConvexMesh const 0 8832 21 PhysxConvexMesh const 21 PhysxConvexMesh const 0 0 3012 0 0 0 0 0 0 0 0 0 0

3227 17 PhysxConvexMesh * 0 8576 17 PhysxConvexMesh * 17 PhysxConvexMesh * 0 0 3012 0 0 0 0 0 0 0 0 0 0

3228 28 PhysxConvexForceFieldShape * 0 8576 28 PhysxConvexForceFieldShape * 28 PhysxConvexForceFieldShape * 0 0 3013 0 0 0 0 0 0 0 0 0 0

3229 34 PhysxConvexForceFieldShape const * 0 8576 34 PhysxConvexForceFieldShape const * 34 PhysxConvexForceFieldShape const * 0 0 3230 0 0 0 0 0 0 0 0 0 0

3230 32 PhysxConvexForceFieldShape const 0 8832 32 PhysxConvexForceFieldShape const 32 PhysxConvexForceFieldShape const 0 0 3013 0 0 0 0 0 0 0 0 0 0

3231 32 PhysxConvexForceFieldShapeDesc * 0 8576 32 PhysxConvexForceFieldShapeDesc * 32 PhysxConvexForceFieldShapeDesc * 0 0 3069 0 0 0 0 0 0 0 0 0 0

3232 18 PhysxConvexShape * 0 8576 18 PhysxConvexShape * 18 PhysxConvexShape * 0 0 3014 0 0 0 0 0 0 0 0 0 0

3233 24 PhysxConvexShape const * 0 8576 24 PhysxConvexShape const * 24 PhysxConvexShape const * 0 0 3234 0 0 0 0 0 0 0 0 0 0

3234 22 PhysxConvexShape const 0 8832 22 PhysxConvexShape const 22 PhysxConvexShape const 0 0 3014 0 0 0 0 0 0 0 0 0 0

3235 22 PhysxConvexShapeDesc * 0 8576 22 PhysxConvexShapeDesc * 22 PhysxConvexShapeDesc * 0 0 3071 0 0 0 0 0 0 0 0 0 0

3236 12 PhysxJoint * 0 8576 12 PhysxJoint * 12 PhysxJoint * 0 0 3015 0 0 0 0 0 0 0 0 0 0

3237 18 PhysxJoint const * 0 8576 18 PhysxJoint const * 18 PhysxJoint const * 0 0 3238 0 0 0 0 0 0 0 0 0 0

3238 16 PhysxJoint const 0 8832 16 PhysxJoint const 16 PhysxJoint const 0 0 3015 0 0 0 0 0 0 0 0 0 0

3239 23 PhysxCylindricalJoint * 0 8576 23 PhysxCylindricalJoint * 23 PhysxCylindricalJoint * 0 0 3016 0 0 0 0 0 0 0 0 0 0

3240 29 PhysxCylindricalJoint const * 0 8576 29 PhysxCylindricalJoint const * 29 PhysxCylindricalJoint const * 0 0 3241 0 0 0 0 0 0 0 0 0 0

3241 27 PhysxCylindricalJoint const 0 8832 27 PhysxCylindricalJoint const 27 PhysxCylindricalJoint const 0 0 3016 0 0 0 0 0 0 0 0 0 0

3242 27 PhysxCylindricalJointDesc * 0 8576 27 PhysxCylindricalJointDesc * 27 PhysxCylindricalJointDesc * 0 0 3073 0 0 0 0 0 0 0 0 0 0

3243 33 PhysxCylindricalJointDesc const * 0 8576 33 PhysxCylindricalJointDesc const * 33 PhysxCylindricalJointDesc const * 0 0 3244 0 0 0 0 0 0 0 0 0 0

3244 31 PhysxCylindricalJointDesc const 0 8832 31 PhysxCylindricalJointDesc const 31 PhysxCylindricalJointDesc const 0 0 3073 0 0 0 0 0 0 0 0 0 0

3245 14 PhysxD6Joint * 0 8576 14 PhysxD6Joint * 14 PhysxD6Joint * 0 0 3017 0 0 0 0 0 0 0 0 0 0

3246 20 PhysxD6Joint const * 0 8576 20 PhysxD6Joint const * 20 PhysxD6Joint const * 0 0 3247 0 0 0 0 0 0 0 0 0 0

3247 18 PhysxD6Joint const 0 8832 18 PhysxD6Joint const 18 PhysxD6Joint const 0 0 3017 0 0 0 0 0 0 0 0 0 0

3248 18 PhysxD6JointDesc * 0 8576 18 PhysxD6JointDesc * 18 PhysxD6JointDesc * 0 0 3074 0 0 0 0 0 0 0 0 0 0

3249 24 PhysxD6JointDesc const * 0 8576 24 PhysxD6JointDesc const * 24 PhysxD6JointDesc const * 0 0 3250 0 0 0 0 0 0 0 0 0 0

3250 22 PhysxD6JointDesc const 0 8832 22 PhysxD6JointDesc const 22 PhysxD6JointDesc const 0 0 3074 0 0 0 0 0 0 0 0 0 0

3251 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3252 0 0 0 0 0 0 0 0 0 0

3252 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3141 0 0 0 0 0 0 0 0 0 0

3253 20 PhysxDebugGeomNode * 0 8576 20 PhysxDebugGeomNode * 20 PhysxDebugGeomNode * 0 0 3018 0 0 0 0 0 0 0 0 0 0

3254 20 PhysxDistanceJoint * 0 8576 20 PhysxDistanceJoint * 20 PhysxDistanceJoint * 0 0 3019 0 0 0 0 0 0 0 0 0 0

3255 26 PhysxDistanceJoint const * 0 8576 26 PhysxDistanceJoint const * 26 PhysxDistanceJoint const * 0 0 3256 0 0 0 0 0 0 0 0 0 0

3256 24 PhysxDistanceJoint const 0 8832 24 PhysxDistanceJoint const 24 PhysxDistanceJoint const 0 0 3019 0 0 0 0 0 0 0 0 0 0

3257 24 PhysxDistanceJointDesc * 0 8576 24 PhysxDistanceJointDesc * 24 PhysxDistanceJointDesc * 0 0 3077 0 0 0 0 0 0 0 0 0 0

3258 30 PhysxDistanceJointDesc const * 0 8576 30 PhysxDistanceJointDesc const * 30 PhysxDistanceJointDesc const * 0 0 3259 0 0 0 0 0 0 0 0 0 0

3259 28 PhysxDistanceJointDesc const 0 8832 28 PhysxDistanceJointDesc const 28 PhysxDistanceJointDesc const 0 0 3077 0 0 0 0 0 0 0 0 0 0

3260 17 PhysxFixedJoint * 0 8576 17 PhysxFixedJoint * 17 PhysxFixedJoint * 0 0 3020 0 0 0 0 0 0 0 0 0 0

3261 23 PhysxFixedJoint const * 0 8576 23 PhysxFixedJoint const * 23 PhysxFixedJoint const * 0 0 3262 0 0 0 0 0 0 0 0 0 0

3262 21 PhysxFixedJoint const 0 8832 21 PhysxFixedJoint const 21 PhysxFixedJoint const 0 0 3020 0 0 0 0 0 0 0 0 0 0

3263 21 PhysxFixedJointDesc * 0 8576 21 PhysxFixedJointDesc * 21 PhysxFixedJointDesc * 0 0 3079 0 0 0 0 0 0 0 0 0 0

3264 27 PhysxFixedJointDesc const * 0 8576 27 PhysxFixedJointDesc const * 27 PhysxFixedJointDesc const * 0 0 3265 0 0 0 0 0 0 0 0 0 0

3265 25 PhysxFixedJointDesc const 0 8832 25 PhysxFixedJointDesc const 25 PhysxFixedJointDesc const 0 0 3079 0 0 0 0 0 0 0 0 0 0

3266 23 PhysxForceField const * 0 8576 23 PhysxForceField const * 23 PhysxForceField const * 0 0 3267 0 0 0 0 0 0 0 0 0 0

3267 21 PhysxForceField const 0 8832 21 PhysxForceField const 21 PhysxForceField const 0 0 3021 0 0 0 0 0 0 0 0 0 0

3268 33 PhysxForceFieldShapeGroup const * 0 8576 33 PhysxForceFieldShapeGroup const * 33 PhysxForceFieldShapeGroup const * 0 0 3269 0 0 0 0 0 0 0 0 0 0

3269 31 PhysxForceFieldShapeGroup const 0 8832 31 PhysxForceFieldShapeGroup const 31 PhysxForceFieldShapeGroup const 0 0 3022 0 0 0 0 0 0 0 0 0 0

3270 31 PhysxForceFieldShapeGroupDesc * 0 8576 31 PhysxForceFieldShapeGroupDesc * 31 PhysxForceFieldShapeGroupDesc * 0 0 3081 0 0 0 0 0 0 0 0 0 0

3271 26 PhysxForceFieldShapeDesc * 0 8576 26 PhysxForceFieldShapeDesc * 26 PhysxForceFieldShapeDesc * 0 0 3057 0 0 0 0 0 0 0 0 0 0

3272 18 PhysxHeightField * 0 8576 18 PhysxHeightField * 18 PhysxHeightField * 0 0 3023 0 0 0 0 0 0 0 0 0 0

3273 24 PhysxHeightField const * 0 8576 24 PhysxHeightField const * 24 PhysxHeightField const * 0 0 3274 0 0 0 0 0 0 0 0 0 0

3274 22 PhysxHeightField const 0 8832 22 PhysxHeightField const 22 PhysxHeightField const 0 0 3023 0 0 0 0 0 0 0 0 0 0

3275 23 PhysxHeightFieldShape * 0 8576 23 PhysxHeightFieldShape * 23 PhysxHeightFieldShape * 0 0 3024 0 0 0 0 0 0 0 0 0 0

3276 29 PhysxHeightFieldShape const * 0 8576 29 PhysxHeightFieldShape const * 29 PhysxHeightFieldShape const * 0 0 3277 0 0 0 0 0 0 0 0 0 0

3277 27 PhysxHeightFieldShape const 0 8832 27 PhysxHeightFieldShape const 27 PhysxHeightFieldShape const 0 0 3024 0 0 0 0 0 0 0 0 0 0

3278 27 PhysxHeightFieldShapeDesc * 0 8576 27 PhysxHeightFieldShapeDesc * 27 PhysxHeightFieldShapeDesc * 0 0 3083 0 0 0 0 0 0 0 0 0 0

3279 15 PhysxMaterial * 0 8576 15 PhysxMaterial * 15 PhysxMaterial * 0 0 3025 0 0 0 0 0 0 0 0 0 0

3280 25 PhysxMaterialDesc const * 0 8576 25 PhysxMaterialDesc const * 25 PhysxMaterialDesc const * 0 0 3281 0 0 0 0 0 0 0 0 0 0

3281 23 PhysxMaterialDesc const 0 8832 23 PhysxMaterialDesc const 23 PhysxMaterialDesc const 0 0 3089 0 0 0 0 0 0 0 0 0 0

3282 19 PhysxMaterialDesc * 0 8576 19 PhysxMaterialDesc * 19 PhysxMaterialDesc * 0 0 3089 0 0 0 0 0 0 0 0 0 0

3283 17 PhysxPlaneShape * 0 8576 17 PhysxPlaneShape * 17 PhysxPlaneShape * 0 0 3026 0 0 0 0 0 0 0 0 0 0

3284 23 PhysxPlaneShape const * 0 8576 23 PhysxPlaneShape const * 23 PhysxPlaneShape const * 0 0 3285 0 0 0 0 0 0 0 0 0 0

3285 21 PhysxPlaneShape const 0 8832 21 PhysxPlaneShape const 21 PhysxPlaneShape const 0 0 3026 0 0 0 0 0 0 0 0 0 0

3286 21 PhysxPlaneShapeDesc * 0 8576 21 PhysxPlaneShapeDesc * 21 PhysxPlaneShapeDesc * 0 0 3092 0 0 0 0 0 0 0 0 0 0

3287 24 PhysxPointInPlaneJoint * 0 8576 24 PhysxPointInPlaneJoint * 24 PhysxPointInPlaneJoint * 0 0 3027 0 0 0 0 0 0 0 0 0 0

3288 30 PhysxPointInPlaneJoint const * 0 8576 30 PhysxPointInPlaneJoint const * 30 PhysxPointInPlaneJoint const * 0 0 3289 0 0 0 0 0 0 0 0 0 0

3289 28 PhysxPointInPlaneJoint const 0 8832 28 PhysxPointInPlaneJoint const 28 PhysxPointInPlaneJoint const 0 0 3027 0 0 0 0 0 0 0 0 0 0

3290 28 PhysxPointInPlaneJointDesc * 0 8576 28 PhysxPointInPlaneJointDesc * 28 PhysxPointInPlaneJointDesc * 0 0 3093 0 0 0 0 0 0 0 0 0 0

3291 34 PhysxPointInPlaneJointDesc const * 0 8576 34 PhysxPointInPlaneJointDesc const * 34 PhysxPointInPlaneJointDesc const * 0 0 3292 0 0 0 0 0 0 0 0 0 0

3292 32 PhysxPointInPlaneJointDesc const 0 8832 32 PhysxPointInPlaneJointDesc const 32 PhysxPointInPlaneJointDesc const 0 0 3093 0 0 0 0 0 0 0 0 0 0

3293 23 PhysxPointOnLineJoint * 0 8576 23 PhysxPointOnLineJoint * 23 PhysxPointOnLineJoint * 0 0 3028 0 0 0 0 0 0 0 0 0 0

3294 29 PhysxPointOnLineJoint const * 0 8576 29 PhysxPointOnLineJoint const * 29 PhysxPointOnLineJoint const * 0 0 3295 0 0 0 0 0 0 0 0 0 0

3295 27 PhysxPointOnLineJoint const 0 8832 27 PhysxPointOnLineJoint const 27 PhysxPointOnLineJoint const 0 0 3028 0 0 0 0 0 0 0 0 0 0

3296 27 PhysxPointOnLineJointDesc * 0 8576 27 PhysxPointOnLineJointDesc * 27 PhysxPointOnLineJointDesc * 0 0 3094 0 0 0 0 0 0 0 0 0 0

3297 33 PhysxPointOnLineJointDesc const * 0 8576 33 PhysxPointOnLineJointDesc const * 33 PhysxPointOnLineJointDesc const * 0 0 3298 0 0 0 0 0 0 0 0 0 0

3298 31 PhysxPointOnLineJointDesc const 0 8832 31 PhysxPointOnLineJointDesc const 31 PhysxPointOnLineJointDesc const 0 0 3094 0 0 0 0 0 0 0 0 0 0

3299 21 PhysxPrismaticJoint * 0 8576 21 PhysxPrismaticJoint * 21 PhysxPrismaticJoint * 0 0 3029 0 0 0 0 0 0 0 0 0 0

3300 27 PhysxPrismaticJoint const * 0 8576 27 PhysxPrismaticJoint const * 27 PhysxPrismaticJoint const * 0 0 3301 0 0 0 0 0 0 0 0 0 0

3301 25 PhysxPrismaticJoint const 0 8832 25 PhysxPrismaticJoint const 25 PhysxPrismaticJoint const 0 0 3029 0 0 0 0 0 0 0 0 0 0

3302 25 PhysxPrismaticJointDesc * 0 8576 25 PhysxPrismaticJointDesc * 25 PhysxPrismaticJointDesc * 0 0 3095 0 0 0 0 0 0 0 0 0 0

3303 31 PhysxPrismaticJointDesc const * 0 8576 31 PhysxPrismaticJointDesc const * 31 PhysxPrismaticJointDesc const * 0 0 3304 0 0 0 0 0 0 0 0 0 0

3304 29 PhysxPrismaticJointDesc const 0 8832 29 PhysxPrismaticJointDesc const 29 PhysxPrismaticJointDesc const 0 0 3095 0 0 0 0 0 0 0 0 0 0

3305 18 PhysxPulleyJoint * 0 8576 18 PhysxPulleyJoint * 18 PhysxPulleyJoint * 0 0 3030 0 0 0 0 0 0 0 0 0 0

3306 24 PhysxPulleyJoint const * 0 8576 24 PhysxPulleyJoint const * 24 PhysxPulleyJoint const * 0 0 3307 0 0 0 0 0 0 0 0 0 0

3307 22 PhysxPulleyJoint const 0 8832 22 PhysxPulleyJoint const 22 PhysxPulleyJoint const 0 0 3030 0 0 0 0 0 0 0 0 0 0

3308 22 PhysxPulleyJointDesc * 0 8576 22 PhysxPulleyJointDesc * 22 PhysxPulleyJointDesc * 0 0 3096 0 0 0 0 0 0 0 0 0 0

3309 28 PhysxPulleyJointDesc const * 0 8576 28 PhysxPulleyJointDesc const * 28 PhysxPulleyJointDesc const * 0 0 3310 0 0 0 0 0 0 0 0 0 0

3310 26 PhysxPulleyJointDesc const 0 8832 26 PhysxPulleyJointDesc const 26 PhysxPulleyJointDesc const 0 0 3096 0 0 0 0 0 0 0 0 0 0

3311 22 PhysxMotorDesc const * 0 8576 22 PhysxMotorDesc const * 22 PhysxMotorDesc const * 0 0 3312 0 0 0 0 0 0 0 0 0 0

3312 20 PhysxMotorDesc const 0 8832 20 PhysxMotorDesc const 20 PhysxMotorDesc const 0 0 3090 0 0 0 0 0 0 0 0 0 0

3313 16 PhysxMotorDesc * 0 8576 16 PhysxMotorDesc * 16 PhysxMotorDesc * 0 0 3090 0 0 0 0 0 0 0 0 0 0

3314 20 PhysxRevoluteJoint * 0 8576 20 PhysxRevoluteJoint * 20 PhysxRevoluteJoint * 0 0 3031 0 0 0 0 0 0 0 0 0 0

3315 26 PhysxRevoluteJoint const * 0 8576 26 PhysxRevoluteJoint const * 26 PhysxRevoluteJoint const * 0 0 3316 0 0 0 0 0 0 0 0 0 0

3316 24 PhysxRevoluteJoint const 0 8832 24 PhysxRevoluteJoint const 24 PhysxRevoluteJoint const 0 0 3031 0 0 0 0 0 0 0 0 0 0

3317 24 PhysxRevoluteJointDesc * 0 8576 24 PhysxRevoluteJointDesc * 24 PhysxRevoluteJointDesc * 0 0 3101 0 0 0 0 0 0 0 0 0 0

3318 30 PhysxRevoluteJointDesc const * 0 8576 30 PhysxRevoluteJointDesc const * 30 PhysxRevoluteJointDesc const * 0 0 3319 0 0 0 0 0 0 0 0 0 0

3319 28 PhysxRevoluteJointDesc const 0 8832 28 PhysxRevoluteJointDesc const 28 PhysxRevoluteJointDesc const 0 0 3101 0 0 0 0 0 0 0 0 0 0

3320 23 PhysxSpringDesc const * 0 8576 23 PhysxSpringDesc const * 23 PhysxSpringDesc const * 0 0 3321 0 0 0 0 0 0 0 0 0 0

3321 21 PhysxSpringDesc const 0 8832 21 PhysxSpringDesc const 21 PhysxSpringDesc const 0 0 3078 0 0 0 0 0 0 0 0 0 0

3322 27 PhysxJointLimitDesc const * 0 8576 27 PhysxJointLimitDesc const * 27 PhysxJointLimitDesc const * 0 0 3323 0 0 0 0 0 0 0 0 0 0

3323 25 PhysxJointLimitDesc const 0 8832 25 PhysxJointLimitDesc const 25 PhysxJointLimitDesc const 0 0 3084 0 0 0 0 0 0 0 0 0 0

3324 17 PhysxSpringDesc * 0 8576 17 PhysxSpringDesc * 17 PhysxSpringDesc * 0 0 3078 0 0 0 0 0 0 0 0 0 0

3325 26 PhysxOverlapReport const * 0 8576 26 PhysxOverlapReport const * 26 PhysxOverlapReport const * 0 0 3326 0 0 0 0 0 0 0 0 0 0

3326 24 PhysxOverlapReport const 0 8832 24 PhysxOverlapReport const 24 PhysxOverlapReport const 0 0 3032 0 0 0 0 0 0 0 0 0 0

3327 20 PhysxOverlapReport * 0 8576 20 PhysxOverlapReport * 20 PhysxOverlapReport * 0 0 3032 0 0 0 0 0 0 0 0 0 0

3328 11 PhysxMask * 0 8576 11 PhysxMask * 11 PhysxMask * 0 0 3034 0 0 0 0 0 0 0 0 0 0

3329 17 PhysxMask const * 0 8576 17 PhysxMask const * 17 PhysxMask const * 0 0 3330 0 0 0 0 0 0 0 0 0 0

3330 15 PhysxMask const 0 8832 15 PhysxMask const 15 PhysxMask const 0 0 3034 0 0 0 0 0 0 0 0 0 0

3331 14 NxGroupsMask * 0 8576 14 NxGroupsMask * 14 NxGroupsMask * 0 0 3332 0 0 0 0 0 0 0 0 0 0

3332 12 NxGroupsMask 0 2048 12 NxGroupsMask 12 NxGroupsMask 0 0 0 0 0 0 0 0 0 0 0 0 0

3333 18 PhysxScene const * 0 8576 18 PhysxScene const * 18 PhysxScene const * 0 0 3334 0 0 0 0 0 0 0 0 0 0

3334 16 PhysxScene const 0 8832 16 PhysxScene const 16 PhysxScene const 0 0 3036 0 0 0 0 0 0 0 0 0 0

3335 18 PhysxSceneStats2 * 0 8576 18 PhysxSceneStats2 * 18 PhysxSceneStats2 * 0 0 3102 0 0 0 0 0 0 0 0 0 0

3336 16 PhysxJointDesc * 0 8576 16 PhysxJointDesc * 16 PhysxJointDesc * 0 0 3072 0 0 0 0 0 0 0 0 0 0

3337 21 PhysxControllerDesc * 0 8576 21 PhysxControllerDesc * 21 PhysxControllerDesc * 0 0 3055 0 0 0 0 0 0 0 0 0 0

3338 21 PhysxForceFieldDesc * 0 8576 21 PhysxForceFieldDesc * 21 PhysxForceFieldDesc * 0 0 3080 0 0 0 0 0 0 0 0 0 0

3339 16 PhysxClothDesc * 0 8576 16 PhysxClothDesc * 16 PhysxClothDesc * 0 0 3065 0 0 0 0 0 0 0 0 0 0

3340 19 PhysxSoftBodyDesc * 0 8576 19 PhysxSoftBodyDesc * 19 PhysxSoftBodyDesc * 0 0 3104 0 0 0 0 0 0 0 0 0 0

3341 15 PhysxSoftBody * 0 8576 15 PhysxSoftBody * 15 PhysxSoftBody * 0 0 3037 0 0 0 0 0 0 0 0 0 0

3342 18 PhysxVehicleDesc * 0 8576 18 PhysxVehicleDesc * 18 PhysxVehicleDesc * 0 0 3103 0 0 0 0 0 0 0 0 0 0

3343 14 PhysxVehicle * 0 8576 14 PhysxVehicle * 14 PhysxVehicle * 0 0 3045 0 0 0 0 0 0 0 0 0 0

3344 20 PhysxRaycastReport * 0 8576 20 PhysxRaycastReport * 20 PhysxRaycastReport * 0 0 3099 0 0 0 0 0 0 0 0 0 0

3345 26 PhysxConstraintDominance * 0 8576 26 PhysxConstraintDominance * 26 PhysxConstraintDominance * 0 0 3068 0 0 0 0 0 0 0 0 0 0

3346 21 PhysxSoftBody const * 0 8576 21 PhysxSoftBody const * 21 PhysxSoftBody const * 0 0 3347 0 0 0 0 0 0 0 0 0 0

3347 19 PhysxSoftBody const 0 8832 19 PhysxSoftBody const 19 PhysxSoftBody const 0 0 3037 0 0 0 0 0 0 0 0 0 0

3348 19 PhysxSoftBodyNode * 0 8576 19 PhysxSoftBodyNode * 19 PhysxSoftBodyNode * 0 0 3039 0 0 0 0 0 0 0 0 0 0

3349 25 PhysxSoftBodyMesh const * 0 8576 25 PhysxSoftBodyMesh const * 25 PhysxSoftBodyMesh const * 0 0 3350 0 0 0 0 0 0 0 0 0 0

3350 23 PhysxSoftBodyMesh const 0 8832 23 PhysxSoftBodyMesh const 23 PhysxSoftBodyMesh const 0 0 3038 0 0 0 0 0 0 0 0 0 0

3351 19 PhysxSoftBodyMesh * 0 8576 19 PhysxSoftBodyMesh * 19 PhysxSoftBodyMesh * 0 0 3038 0 0 0 0 0 0 0 0 0 0

3352 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 3353 0 0 0 0 0 0 0 0 0 0

3353 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 3354 0 0 0 0 0 0 0 0 0 0

3354 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 1 3524 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

3355 28 PhysxSphereForceFieldShape * 0 8576 28 PhysxSphereForceFieldShape * 28 PhysxSphereForceFieldShape * 0 0 3040 0 0 0 0 0 0 0 0 0 0

3356 34 PhysxSphereForceFieldShape const * 0 8576 34 PhysxSphereForceFieldShape const * 34 PhysxSphereForceFieldShape const * 0 0 3357 0 0 0 0 0 0 0 0 0 0

3357 32 PhysxSphereForceFieldShape const 0 8832 32 PhysxSphereForceFieldShape const 32 PhysxSphereForceFieldShape const 0 0 3040 0 0 0 0 0 0 0 0 0 0

3358 32 PhysxSphereForceFieldShapeDesc * 0 8576 32 PhysxSphereForceFieldShapeDesc * 32 PhysxSphereForceFieldShapeDesc * 0 0 3106 0 0 0 0 0 0 0 0 0 0

3359 18 PhysxSphereShape * 0 8576 18 PhysxSphereShape * 18 PhysxSphereShape * 0 0 3041 0 0 0 0 0 0 0 0 0 0

3360 24 PhysxSphereShape const * 0 8576 24 PhysxSphereShape const * 24 PhysxSphereShape const * 0 0 3361 0 0 0 0 0 0 0 0 0 0

3361 22 PhysxSphereShape const 0 8832 22 PhysxSphereShape const 22 PhysxSphereShape const 0 0 3041 0 0 0 0 0 0 0 0 0 0

3362 22 PhysxSphereShapeDesc * 0 8576 22 PhysxSphereShapeDesc * 22 PhysxSphereShapeDesc * 0 0 3107 0 0 0 0 0 0 0 0 0 0

3363 21 PhysxSphericalJoint * 0 8576 21 PhysxSphericalJoint * 21 PhysxSphericalJoint * 0 0 3042 0 0 0 0 0 0 0 0 0 0

3364 27 PhysxSphericalJoint const * 0 8576 27 PhysxSphericalJoint const * 27 PhysxSphericalJoint const * 0 0 3365 0 0 0 0 0 0 0 0 0 0

3365 25 PhysxSphericalJoint const 0 8832 25 PhysxSphericalJoint const 25 PhysxSphericalJoint const 0 0 3042 0 0 0 0 0 0 0 0 0 0

3366 25 PhysxSphericalJointDesc * 0 8576 25 PhysxSphericalJointDesc * 25 PhysxSphericalJointDesc * 0 0 3108 0 0 0 0 0 0 0 0 0 0

3367 31 PhysxSphericalJointDesc const * 0 8576 31 PhysxSphericalJointDesc const * 31 PhysxSphericalJointDesc const * 0 0 3368 0 0 0 0 0 0 0 0 0 0

3368 29 PhysxSphericalJointDesc const 0 8832 29 PhysxSphericalJointDesc const 29 PhysxSphericalJointDesc const 0 0 3108 0 0 0 0 0 0 0 0 0 0

3369 25 PhysxTriangleMesh const * 0 8576 25 PhysxTriangleMesh const * 25 PhysxTriangleMesh const * 0 0 3370 0 0 0 0 0 0 0 0 0 0

3370 23 PhysxTriangleMesh const 0 8832 23 PhysxTriangleMesh const 23 PhysxTriangleMesh const 0 0 3043 0 0 0 0 0 0 0 0 0 0

3371 19 PhysxTriangleMesh * 0 8576 19 PhysxTriangleMesh * 19 PhysxTriangleMesh * 0 0 3043 0 0 0 0 0 0 0 0 0 0

3372 24 PhysxTriangleMeshShape * 0 8576 24 PhysxTriangleMeshShape * 24 PhysxTriangleMeshShape * 0 0 3044 0 0 0 0 0 0 0 0 0 0

3373 30 PhysxTriangleMeshShape const * 0 8576 30 PhysxTriangleMeshShape const * 30 PhysxTriangleMeshShape const * 0 0 3374 0 0 0 0 0 0 0 0 0 0

3374 28 PhysxTriangleMeshShape const 0 8832 28 PhysxTriangleMeshShape const 28 PhysxTriangleMeshShape const 0 0 3044 0 0 0 0 0 0 0 0 0 0

3375 28 PhysxTriangleMeshShapeDesc * 0 8576 28 PhysxTriangleMeshShapeDesc * 28 PhysxTriangleMeshShapeDesc * 0 0 3109 0 0 0 0 0 0 0 0 0 0

3376 12 PhysxWheel * 0 8576 12 PhysxWheel * 12 PhysxWheel * 0 0 3046 0 0 0 0 0 0 0 0 0 0

3377 17 PhysxWheelShape * 0 8576 17 PhysxWheelShape * 17 PhysxWheelShape * 0 0 3047 0 0 0 0 0 0 0 0 0 0

3378 23 PhysxWheelShape const * 0 8576 23 PhysxWheelShape const * 23 PhysxWheelShape const * 0 0 3379 0 0 0 0 0 0 0 0 0 0

3379 21 PhysxWheelShape const 0 8832 21 PhysxWheelShape const 21 PhysxWheelShape const 0 0 3047 0 0 0 0 0 0 0 0 0 0

3380 21 PhysxWheelShapeDesc * 0 8576 21 PhysxWheelShapeDesc * 21 PhysxWheelShapeDesc * 0 0 3112 0 0 0 0 0 0 0 0 0 0

3381 22 PhysxActorDesc const * 0 8576 22 PhysxActorDesc const * 22 PhysxActorDesc const * 0 0 3382 0 0 0 0 0 0 0 0 0 0

3382 20 PhysxActorDesc const 0 8832 20 PhysxActorDesc const 20 PhysxActorDesc const 0 0 3048 0 0 0 0 0 0 0 0 0 0

3383 21 PhysxBodyDesc const * 0 8576 21 PhysxBodyDesc const * 21 PhysxBodyDesc const * 0 0 3384 0 0 0 0 0 0 0 0 0 0

3384 19 PhysxBodyDesc const 0 8832 19 PhysxBodyDesc const 19 PhysxBodyDesc const 0 0 3049 0 0 0 0 0 0 0 0 0 0

3385 22 PhysxShapeDesc const * 0 8576 22 PhysxShapeDesc const * 22 PhysxShapeDesc const * 0 0 3386 0 0 0 0 0 0 0 0 0 0

3386 20 PhysxShapeDesc const 0 8832 20 PhysxShapeDesc const 20 PhysxShapeDesc const 0 0 3050 0 0 0 0 0 0 0 0 0 0

3387 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 3051 0 0 0 0 0 0 0 0 0 0

3388 14 PhysxManager * 0 8576 14 PhysxManager * 14 PhysxManager * 0 0 3052 0 0 0 0 0 0 0 0 0 0

3389 20 PhysxManager const * 0 8576 20 PhysxManager const * 20 PhysxManager const * 0 0 3390 0 0 0 0 0 0 0 0 0 0

3390 18 PhysxManager const 0 8832 18 PhysxManager const 18 PhysxManager const 0 0 3052 0 0 0 0 0 0 0 0 0 0

3391 16 PhysxSceneDesc * 0 8576 16 PhysxSceneDesc * 16 PhysxSceneDesc * 0 0 3088 0 0 0 0 0 0 0 0 0 0

3392 22 PhysxHeightFieldDesc * 0 8576 22 PhysxHeightFieldDesc * 22 PhysxHeightFieldDesc * 0 0 3082 0 0 0 0 0 0 0 0 0 0

3393 10 PhysxBox * 0 8576 10 PhysxBox * 10 PhysxBox * 0 0 3054 0 0 0 0 0 0 0 0 0 0

3394 27 PhysxControllerDesc const * 0 8576 27 PhysxControllerDesc const * 27 PhysxControllerDesc const * 0 0 3395 0 0 0 0 0 0 0 0 0 0

3395 25 PhysxControllerDesc const 0 8832 25 PhysxControllerDesc const 25 PhysxControllerDesc const 0 0 3055 0 0 0 0 0 0 0 0 0 0

3396 24 PhysxBoxControllerDesc * 0 8576 24 PhysxBoxControllerDesc * 24 PhysxBoxControllerDesc * 0 0 3056 0 0 0 0 0 0 0 0 0 0

3397 30 PhysxBoxControllerDesc const * 0 8576 30 PhysxBoxControllerDesc const * 30 PhysxBoxControllerDesc const * 0 0 3398 0 0 0 0 0 0 0 0 0 0

3398 28 PhysxBoxControllerDesc const 0 8832 28 PhysxBoxControllerDesc const 28 PhysxBoxControllerDesc const 0 0 3056 0 0 0 0 0 0 0 0 0 0

3399 32 PhysxForceFieldShapeDesc const * 0 8576 32 PhysxForceFieldShapeDesc const * 32 PhysxForceFieldShapeDesc const * 0 0 3400 0 0 0 0 0 0 0 0 0 0

3400 30 PhysxForceFieldShapeDesc const 0 8832 30 PhysxForceFieldShapeDesc const 30 PhysxForceFieldShapeDesc const 0 0 3057 0 0 0 0 0 0 0 0 0 0

3401 35 PhysxBoxForceFieldShapeDesc const * 0 8576 35 PhysxBoxForceFieldShapeDesc const * 35 PhysxBoxForceFieldShapeDesc const * 0 0 3402 0 0 0 0 0 0 0 0 0 0

3402 33 PhysxBoxForceFieldShapeDesc const 0 8832 33 PhysxBoxForceFieldShapeDesc const 33 PhysxBoxForceFieldShapeDesc const 0 0 3058 0 0 0 0 0 0 0 0 0 0

3403 25 PhysxBoxShapeDesc const * 0 8576 25 PhysxBoxShapeDesc const * 25 PhysxBoxShapeDesc const * 0 0 3404 0 0 0 0 0 0 0 0 0 0

3404 23 PhysxBoxShapeDesc const 0 8832 23 PhysxBoxShapeDesc const 23 PhysxBoxShapeDesc const 0 0 3059 0 0 0 0 0 0 0 0 0 0

3405 14 PhysxSegment * 0 8576 14 PhysxSegment * 14 PhysxSegment * 0 0 3060 0 0 0 0 0 0 0 0 0 0

3406 20 PhysxSegment const * 0 8576 20 PhysxSegment const * 20 PhysxSegment const * 0 0 3407 0 0 0 0 0 0 0 0 0 0

3407 18 PhysxSegment const 0 8832 18 PhysxSegment const 18 PhysxSegment const 0 0 3060 0 0 0 0 0 0 0 0 0 0

3408 14 PhysxCapsule * 0 8576 14 PhysxCapsule * 14 PhysxCapsule * 0 0 3061 0 0 0 0 0 0 0 0 0 0

3409 28 PhysxCapsuleControllerDesc * 0 8576 28 PhysxCapsuleControllerDesc * 28 PhysxCapsuleControllerDesc * 0 0 3062 0 0 0 0 0 0 0 0 0 0

3410 34 PhysxCapsuleControllerDesc const * 0 8576 34 PhysxCapsuleControllerDesc const * 34 PhysxCapsuleControllerDesc const * 0 0 3411 0 0 0 0 0 0 0 0 0 0

3411 32 PhysxCapsuleControllerDesc const 0 8832 32 PhysxCapsuleControllerDesc const 32 PhysxCapsuleControllerDesc const 0 0 3062 0 0 0 0 0 0 0 0 0 0

3412 39 PhysxCapsuleForceFieldShapeDesc const * 0 8576 39 PhysxCapsuleForceFieldShapeDesc const * 39 PhysxCapsuleForceFieldShapeDesc const * 0 0 3413 0 0 0 0 0 0 0 0 0 0

3413 37 PhysxCapsuleForceFieldShapeDesc const 0 8832 37 PhysxCapsuleForceFieldShapeDesc const 37 PhysxCapsuleForceFieldShapeDesc const 0 0 3063 0 0 0 0 0 0 0 0 0 0

3414 29 PhysxCapsuleShapeDesc const * 0 8576 29 PhysxCapsuleShapeDesc const * 29 PhysxCapsuleShapeDesc const * 0 0 3415 0 0 0 0 0 0 0 0 0 0

3415 27 PhysxCapsuleShapeDesc const 0 8832 27 PhysxCapsuleShapeDesc const 27 PhysxCapsuleShapeDesc const 0 0 3064 0 0 0 0 0 0 0 0 0 0

3416 22 PhysxClothDesc const * 0 8576 22 PhysxClothDesc const * 22 PhysxClothDesc const * 0 0 3417 0 0 0 0 0 0 0 0 0 0

3417 20 PhysxClothDesc const 0 8832 20 PhysxClothDesc const 20 PhysxClothDesc const 0 0 3065 0 0 0 0 0 0 0 0 0 0

3418 15 PhysxMeshPool * 0 8576 15 PhysxMeshPool * 15 PhysxMeshPool * 0 0 3066 0 0 0 0 0 0 0 0 0 0

3419 20 PhysxClothMeshDesc * 0 8576 20 PhysxClothMeshDesc * 20 PhysxClothMeshDesc * 0 0 3067 0 0 0 0 0 0 0 0 0 0

3420 26 PhysxClothMeshDesc const * 0 8576 26 PhysxClothMeshDesc const * 26 PhysxClothMeshDesc const * 0 0 3421 0 0 0 0 0 0 0 0 0 0

3421 24 PhysxClothMeshDesc const 0 8832 24 PhysxClothMeshDesc const 24 PhysxClothMeshDesc const 0 0 3067 0 0 0 0 0 0 0 0 0 0

3422 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 3423 0 0 0 0 0 0 0 0 0 0

3423 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 3424 0 0 0 0 0 0 0 0 0 0

3424 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3425 32 PhysxConstraintDominance const * 0 8576 32 PhysxConstraintDominance const * 32 PhysxConstraintDominance const * 0 0 3426 0 0 0 0 0 0 0 0 0 0

3426 30 PhysxConstraintDominance const 0 8832 30 PhysxConstraintDominance const 30 PhysxConstraintDominance const 0 0 3068 0 0 0 0 0 0 0 0 0 0

3427 21 PhysxConvexMeshDesc * 0 8576 21 PhysxConvexMeshDesc * 21 PhysxConvexMeshDesc * 0 0 3070 0 0 0 0 0 0 0 0 0 0

3428 27 PhysxConvexMeshDesc const * 0 8576 27 PhysxConvexMeshDesc const * 27 PhysxConvexMeshDesc const * 0 0 3429 0 0 0 0 0 0 0 0 0 0

3429 25 PhysxConvexMeshDesc const 0 8832 25 PhysxConvexMeshDesc const 25 PhysxConvexMeshDesc const 0 0 3070 0 0 0 0 0 0 0 0 0 0

3430 22 PhysxJointDesc const * 0 8576 22 PhysxJointDesc const * 22 PhysxJointDesc const * 0 0 3431 0 0 0 0 0 0 0 0 0 0

3431 20 PhysxJointDesc const 0 8832 20 PhysxJointDesc const 20 PhysxJointDesc const 0 0 3072 0 0 0 0 0 0 0 0 0 0

3432 27 PhysxJointDriveDesc const * 0 8576 27 PhysxJointDriveDesc const * 27 PhysxJointDriveDesc const * 0 0 3433 0 0 0 0 0 0 0 0 0 0

3433 25 PhysxJointDriveDesc const 0 8832 25 PhysxJointDriveDesc const 25 PhysxJointDriveDesc const 0 0 3075 0 0 0 0 0 0 0 0 0 0

3434 31 PhysxJointLimitSoftDesc const * 0 8576 31 PhysxJointLimitSoftDesc const * 31 PhysxJointLimitSoftDesc const * 0 0 3435 0 0 0 0 0 0 0 0 0 0

3435 29 PhysxJointLimitSoftDesc const 0 8832 29 PhysxJointLimitSoftDesc const 29 PhysxJointLimitSoftDesc const 0 0 3076 0 0 0 0 0 0 0 0 0 0

3436 21 PhysxJointDriveDesc * 0 8576 21 PhysxJointDriveDesc * 21 PhysxJointDriveDesc * 0 0 3075 0 0 0 0 0 0 0 0 0 0

3437 25 PhysxJointLimitSoftDesc * 0 8576 25 PhysxJointLimitSoftDesc * 25 PhysxJointLimitSoftDesc * 0 0 3076 0 0 0 0 0 0 0 0 0 0

3438 27 PhysxForceFieldDesc const * 0 8576 27 PhysxForceFieldDesc const * 27 PhysxForceFieldDesc const * 0 0 3439 0 0 0 0 0 0 0 0 0 0

3439 25 PhysxForceFieldDesc const 0 8832 25 PhysxForceFieldDesc const 25 PhysxForceFieldDesc const 0 0 3080 0 0 0 0 0 0 0 0 0 0

3440 37 PhysxForceFieldShapeGroupDesc const * 0 8576 37 PhysxForceFieldShapeGroupDesc const * 37 PhysxForceFieldShapeGroupDesc const * 0 0 3441 0 0 0 0 0 0 0 0 0 0

3441 35 PhysxForceFieldShapeGroupDesc const 0 8832 35 PhysxForceFieldShapeGroupDesc const 35 PhysxForceFieldShapeGroupDesc const 0 0 3081 0 0 0 0 0 0 0 0 0 0

3442 28 PhysxHeightFieldDesc const * 0 8576 28 PhysxHeightFieldDesc const * 28 PhysxHeightFieldDesc const * 0 0 3443 0 0 0 0 0 0 0 0 0 0

3443 26 PhysxHeightFieldDesc const 0 8832 26 PhysxHeightFieldDesc const 26 PhysxHeightFieldDesc const 0 0 3082 0 0 0 0 0 0 0 0 0 0

3444 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 3445 0 0 0 0 0 0 0 0 0 0

3445 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 3446 0 0 0 0 0 0 0 0 0 0

3446 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

3447 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3448 33 PhysxHeightFieldShapeDesc const * 0 8576 33 PhysxHeightFieldShapeDesc const * 33 PhysxHeightFieldShapeDesc const * 0 0 3449 0 0 0 0 0 0 0 0 0 0

3449 31 PhysxHeightFieldShapeDesc const 0 8832 31 PhysxHeightFieldShapeDesc const 31 PhysxHeightFieldShapeDesc const 0 0 3083 0 0 0 0 0 0 0 0 0 0

3450 21 PhysxJointLimitDesc * 0 8576 21 PhysxJointLimitDesc * 21 PhysxJointLimitDesc * 0 0 3084 0 0 0 0 0 0 0 0 0 0

3451 14 PhysxKitchen * 0 8576 14 PhysxKitchen * 14 PhysxKitchen * 0 0 3085 0 0 0 0 0 0 0 0 0 0

3452 29 PhysxTriangleMeshDesc const * 0 8576 29 PhysxTriangleMeshDesc const * 29 PhysxTriangleMeshDesc const * 0 0 3453 0 0 0 0 0 0 0 0 0 0

3453 27 PhysxTriangleMeshDesc const 0 8832 27 PhysxTriangleMeshDesc const 27 PhysxTriangleMeshDesc const 0 0 3086 0 0 0 0 0 0 0 0 0 0

3454 29 PhysxSoftBodyMeshDesc const * 0 8576 29 PhysxSoftBodyMeshDesc const * 29 PhysxSoftBodyMeshDesc const * 0 0 3455 0 0 0 0 0 0 0 0 0 0

3455 27 PhysxSoftBodyMeshDesc const 0 8832 27 PhysxSoftBodyMeshDesc const 27 PhysxSoftBodyMeshDesc const 0 0 3087 0 0 0 0 0 0 0 0 0 0

3456 23 PhysxTriangleMeshDesc * 0 8576 23 PhysxTriangleMeshDesc * 23 PhysxTriangleMeshDesc * 0 0 3086 0 0 0 0 0 0 0 0 0 0

3457 23 PhysxSoftBodyMeshDesc * 0 8576 23 PhysxSoftBodyMeshDesc * 23 PhysxSoftBodyMeshDesc * 0 0 3087 0 0 0 0 0 0 0 0 0 0

3458 22 PhysxSceneDesc const * 0 8576 22 PhysxSceneDesc const * 22 PhysxSceneDesc const * 0 0 3459 0 0 0 0 0 0 0 0 0 0

3459 20 PhysxSceneDesc const 0 8832 20 PhysxSceneDesc const 20 PhysxSceneDesc const 0 0 3088 0 0 0 0 0 0 0 0 0 0

3460 12 PhysxPlane * 0 8576 12 PhysxPlane * 12 PhysxPlane * 0 0 3091 0 0 0 0 0 0 0 0 0 0

3461 18 PhysxPlane const * 0 8576 18 PhysxPlane const * 18 PhysxPlane const * 0 0 3462 0 0 0 0 0 0 0 0 0 0

3462 16 PhysxPlane const 0 8832 16 PhysxPlane const 16 PhysxPlane const 0 0 3091 0 0 0 0 0 0 0 0 0 0

3463 10 PhysxRay * 0 8576 10 PhysxRay * 10 PhysxRay * 0 0 3097 0 0 0 0 0 0 0 0 0 0

3464 20 NxRaycastHit const * 0 8576 20 NxRaycastHit const * 20 NxRaycastHit const * 0 0 3465 0 0 0 0 0 0 0 0 0 0

3465 18 NxRaycastHit const 0 8832 18 NxRaycastHit const 18 NxRaycastHit const 0 0 3466 0 0 0 0 0 0 0 0 0 0

3466 12 NxRaycastHit 0 2048 12 NxRaycastHit 12 NxRaycastHit 0 0 0 0 0 0 0 0 0 0 0 0 0

3467 23 PhysxRaycastHit const * 0 8576 23 PhysxRaycastHit const * 23 PhysxRaycastHit const * 0 0 3468 0 0 0 0 0 0 0 0 0 0

3468 21 PhysxRaycastHit const 0 8832 21 PhysxRaycastHit const 21 PhysxRaycastHit const 0 0 3098 0 0 0 0 0 0 0 0 0 0

3469 26 PhysxRaycastReport const * 0 8576 26 PhysxRaycastReport const * 26 PhysxRaycastReport const * 0 0 3470 0 0 0 0 0 0 0 0 0 0

3470 24 PhysxRaycastReport const 0 8832 24 PhysxRaycastReport const 24 PhysxRaycastReport const 0 0 3099 0 0 0 0 0 0 0 0 0 0

3471 21 NxUserRaycastReport * 0 8576 21 NxUserRaycastReport * 21 NxUserRaycastReport * 0 0 3100 0 0 0 0 0 0 0 0 0 0

3472 21 NxSceneStats2 const * 0 8576 21 NxSceneStats2 const * 21 NxSceneStats2 const * 0 0 3473 0 0 0 0 0 0 0 0 0 0

3473 19 NxSceneStats2 const 0 8832 19 NxSceneStats2 const 19 NxSceneStats2 const 0 0 3474 0 0 0 0 0 0 0 0 0 0

3474 13 NxSceneStats2 0 2048 13 NxSceneStats2 13 NxSceneStats2 0 0 0 0 0 0 0 0 0 0 0 0 0

3475 24 PhysxSceneStats2 const * 0 8576 24 PhysxSceneStats2 const * 24 PhysxSceneStats2 const * 0 0 3476 0 0 0 0 0 0 0 0 0 0

3476 22 PhysxSceneStats2 const 0 8832 22 PhysxSceneStats2 const 22 PhysxSceneStats2 const 0 0 3102 0 0 0 0 0 0 0 0 0 0

3477 24 PhysxVehicleDesc const * 0 8576 24 PhysxVehicleDesc const * 24 PhysxVehicleDesc const * 0 0 3478 0 0 0 0 0 0 0 0 0 0

3478 22 PhysxVehicleDesc const 0 8832 22 PhysxVehicleDesc const 22 PhysxVehicleDesc const 0 0 3103 0 0 0 0 0 0 0 0 0 0

3479 25 PhysxSoftBodyDesc const * 0 8576 25 PhysxSoftBodyDesc const * 25 PhysxSoftBodyDesc const * 0 0 3480 0 0 0 0 0 0 0 0 0 0

3480 23 PhysxSoftBodyDesc const 0 8832 23 PhysxSoftBodyDesc const 23 PhysxSoftBodyDesc const 0 0 3104 0 0 0 0 0 0 0 0 0 0

3481 13 PhysxSphere * 0 8576 13 PhysxSphere * 13 PhysxSphere * 0 0 3105 0 0 0 0 0 0 0 0 0 0

3482 38 PhysxSphereForceFieldShapeDesc const * 0 8576 38 PhysxSphereForceFieldShapeDesc const * 38 PhysxSphereForceFieldShapeDesc const * 0 0 3483 0 0 0 0 0 0 0 0 0 0

3483 36 PhysxSphereForceFieldShapeDesc const 0 8832 36 PhysxSphereForceFieldShapeDesc const 36 PhysxSphereForceFieldShapeDesc const 0 0 3106 0 0 0 0 0 0 0 0 0 0

3484 28 PhysxSphereShapeDesc const * 0 8576 28 PhysxSphereShapeDesc const * 28 PhysxSphereShapeDesc const * 0 0 3485 0 0 0 0 0 0 0 0 0 0

3485 26 PhysxSphereShapeDesc const 0 8832 26 PhysxSphereShapeDesc const 26 PhysxSphereShapeDesc const 0 0 3107 0 0 0 0 0 0 0 0 0 0

3486 14 PhysxUtilLib * 0 8576 14 PhysxUtilLib * 14 PhysxUtilLib * 0 0 3110 0 0 0 0 0 0 0 0 0 0

3487 16 PhysxWheelDesc * 0 8576 16 PhysxWheelDesc * 16 PhysxWheelDesc * 0 0 3111 0 0 0 0 0 0 0 0 0 0

3488 22 PhysxWheelDesc const * 0 8576 22 PhysxWheelDesc const * 22 PhysxWheelDesc const * 0 0 3489 0 0 0 0 0 0 0 0 0 0

3489 20 PhysxWheelDesc const 0 8832 20 PhysxWheelDesc const 20 PhysxWheelDesc const 0 0 3111 0 0 0 0 0 0 0 0 0 0

3490 27 PhysxWheelShapeDesc const * 0 8576 27 PhysxWheelShapeDesc const * 27 PhysxWheelShapeDesc const * 0 0 3491 0 0 0 0 0 0 0 0 0 0

3491 25 PhysxWheelShapeDesc const 0 8832 25 PhysxWheelShapeDesc const 25 PhysxWheelShapeDesc const 0 0 3112 0 0 0 0 0 0 0 0 0 0

0
0
33
3492 0 0 42 10 get_shapes 14 get_num_shapes 9 get_shape 
3493 0 0 308 9 get_geoms 13 get_num_geoms 8 get_geom 
3494 0 0 308 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
3495 0 0 312 18 get_contact_points 22 get_num_contact_points 17 get_contact_point 
3496 0 0 431 16 get_shape_groups 20 get_num_shape_groups 15 get_shape_group 
3497 0 0 441 10 get_shapes 14 get_num_shapes 9 get_shape 
3498 0 0 545 12 get_overlaps 16 get_num_overlaps 11 get_overlap 
3499 0 0 580 10 get_actors 14 get_num_actors 9 get_actor 
3500 0 0 580 10 get_joints 14 get_num_joints 9 get_joint 
3501 0 0 580 13 get_materials 17 get_num_materials 12 get_material 
3502 0 0 580 15 get_controllers 19 get_num_controllers 14 get_controller 
3503 0 0 580 16 get_force_fields 20 get_num_force_fields 15 get_force_field 
3504 0 0 580 28 get_force_field_shape_groups 32 get_num_force_field_shape_groups 27 get_force_field_shape_group 
3505 0 0 580 10 get_cloths 14 get_num_cloths 9 get_cloth 
3506 0 0 580 15 get_soft_bodies 19 get_num_soft_bodies 13 get_soft_body 
3507 0 0 580 12 get_vehicles 16 get_num_vehicles 11 get_vehicle 
3508 0 0 864 10 get_scenes 14 get_num_scenes 9 get_scene 
3509 0 0 864 17 get_height_fields 21 get_num_height_fields 16 get_height_field 
3510 0 0 864 17 get_convex_meshes 21 get_num_convex_meshes 15 get_convex_mesh 
3511 0 0 864 19 get_triangle_meshes 23 get_num_triangle_meshes 17 get_triangle_mesh 
3512 0 0 864 16 get_cloth_meshes 20 get_num_cloth_meshes 14 get_cloth_mesh 
3513 0 0 864 20 get_soft_body_meshes 24 get_num_soft_body_meshes 18 get_soft_body_mesh 
3514 0 0 1414 8 get_hits 12 get_num_hits 7 get_hit 
3515 0 0 1651 8 get_rows 4 size 7 get_row 
3516 0 0 1651 8 get_cols 4 size 7 get_col 
3517 0 0 1651 9 get_row3s 4 size 8 get_row3 
3518 0 0 1682 9 get_nodes 13 get_num_nodes 8 get_node 
3519 0 0 1682 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
3520 0 0 1725 8 get_rows 4 size 7 get_row 
3521 0 0 1725 8 get_cols 4 size 7 get_col 
3522 0 0 1725 9 get_col2s 4 size 8 get_col2 
3523 0 0 1725 9 get_row2s 4 size 8 get_row2 
3524 0 0 2572 14 get_primitives 18 get_num_primitives 13 get_primitive 
