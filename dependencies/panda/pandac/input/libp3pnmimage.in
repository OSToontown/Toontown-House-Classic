1365929978
2 2
13 libp3pnmimage 4 BCNh 5 panda 
182
292 5 pixel 0 4 474 12 pixel::pixel 0 2 1 2 0
99
pixel::pixel(void);
pixel::pixel(unsigned short int r, unsigned short int g, unsigned short int b);

293 4 size 0 4 474 11 pixel::size 0 1 3 0
29
static int pixel::size(void);

294 11 operator [] 0 4 474 18 pixel::operator [] 0 2 4 5 0
98
unsigned short int pixel::operator [](int i) const;
unsigned short int &pixel::operator [](int i);

295 11 __setitem__ 0 4 474 18 pixel::__setitem__ 0 1 6 0
53
void pixel::__setitem__(int i, unsigned short int v);

296 10 operator + 0 4 474 17 pixel::operator + 0 1 7 0
50
pixel pixel::operator +(pixel const &other) const;

297 10 operator - 0 4 474 17 pixel::operator - 0 1 8 0
50
pixel pixel::operator -(pixel const &other) const;

298 10 operator * 0 4 474 17 pixel::operator * 0 1 9 0
49
pixel pixel::operator *(double const mult) const;

299 11 operator += 0 4 474 18 pixel::operator += 0 1 10 0
44
void pixel::operator +=(pixel const &other);

300 11 operator -= 0 4 474 18 pixel::operator -= 0 1 11 0
44
void pixel::operator -=(pixel const &other);

301 11 operator *= 0 4 474 18 pixel::operator *= 0 1 12 0
43
void pixel::operator *=(double const mult);

302 5 get_b 0 20 474 12 pixel::get_b 0 1 13 39
getter for unsigned short int pixel::b;
44
unsigned short int pixel::get_b(void) const;

303 5 set_b 0 36 474 12 pixel::set_b 0 1 14 39
setter for unsigned short int pixel::b;
44
void pixel::set_b(unsigned short int value);

304 5 get_g 0 20 474 12 pixel::get_g 0 1 15 39
getter for unsigned short int pixel::g;
44
unsigned short int pixel::get_g(void) const;

305 5 set_g 0 36 474 12 pixel::set_g 0 1 16 39
setter for unsigned short int pixel::g;
44
void pixel::set_g(unsigned short int value);

306 5 get_r 0 20 474 12 pixel::get_r 0 1 17 39
getter for unsigned short int pixel::r;
44
unsigned short int pixel::get_r(void) const;

307 5 set_r 0 36 474 12 pixel::set_r 0 1 18 39
setter for unsigned short int pixel::r;
44
void pixel::set_r(unsigned short int value);

308 6 ~pixel 0 4 474 13 pixel::~pixel 0 0 0
20
pixel::~pixel(void);

309 8 get_name 0 4 476 21 PNMFileType::get_name 0 1 19 0
67
virtual basic_string< char > PNMFileType::get_name(void) const = 0;

310 18 get_num_extensions 0 4 476 31 PNMFileType::get_num_extensions 0 1 20 360
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
////////////////////////////////////////////////////////////////////
56
virtual int PNMFileType::get_num_extensions(void) const;

311 13 get_extension 0 4 476 26 PNMFileType::get_extension 0 1 21 378
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
////////////////////////////////////////////////////////////////////
69
virtual basic_string< char > PNMFileType::get_extension(int n) const;

312 23 get_suggested_extension 0 4 476 36 PNMFileType::get_suggested_extension 0 1 22 424
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
////////////////////////////////////////////////////////////////////
78
virtual basic_string< char > PNMFileType::get_suggested_extension(void) const;

313 14 get_class_type 0 4 476 27 PNMFileType::get_class_type 0 1 23 0
52
static TypeHandle PNMFileType::get_class_type(void);

314 14 PNMImageHeader 0 4 478 30 PNMImageHeader::PNMImageHeader 0 2 24 25 949
// Filename: pnmImageHeader.I
// Created by:  drose (15Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
111
inline PNMImageHeader::PNMImageHeader(void);
inline PNMImageHeader::PNMImageHeader(PNMImageHeader const &copy);

315 10 operator = 0 4 478 26 PNMImageHeader::operator = 0 1 26 239
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void PNMImageHeader::operator =(PNMImageHeader const &copy);

316 15 ~PNMImageHeader 0 4 478 31 PNMImageHeader::~PNMImageHeader 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PNMImageHeader::~PNMImageHeader(void);

317 14 get_color_type 0 4 478 30 PNMImageHeader::get_color_type 0 1 27 397
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
////////////////////////////////////////////////////////////////////
76
inline PNMImageHeader::ColorType PNMImageHeader::get_color_type(void) const;

318 16 get_num_channels 0 4 478 32 PNMImageHeader::get_num_channels 0 1 28 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
////////////////////////////////////////////////////////////////////
56
inline int PNMImageHeader::get_num_channels(void) const;

319 12 is_grayscale 0 4 478 28 PNMImageHeader::is_grayscale 0 2 29 30 948
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
////////////////////////////////////////////////////////////////////
140
static inline bool PNMImageHeader::is_grayscale(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::is_grayscale(void) const;

320 9 has_alpha 0 4 478 25 PNMImageHeader::has_alpha 0 2 31 32 852
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
////////////////////////////////////////////////////////////////////
134
static inline bool PNMImageHeader::has_alpha(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::has_alpha(void) const;

321 10 get_maxval 0 4 478 26 PNMImageHeader::get_maxval 0 1 33 443
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
////////////////////////////////////////////////////////////////////
65
inline unsigned short int PNMImageHeader::get_maxval(void) const;

322 10 get_x_size 0 4 478 26 PNMImageHeader::get_x_size 0 1 34 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_x_size(void) const;

323 10 get_y_size 0 4 478 26 PNMImageHeader::get_y_size 0 1 35 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_y_size(void) const;

324 11 get_comment 0 4 478 27 PNMImageHeader::get_comment 0 1 36 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > PNMImageHeader::get_comment(void) const;

325 11 set_comment 0 4 478 27 PNMImageHeader::set_comment 0 1 37 278
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
////////////////////////////////////////////////////////////////////
77
inline void PNMImageHeader::set_comment(basic_string< char > const &comment);

326 8 has_type 0 4 478 24 PNMImageHeader::has_type 0 1 38 315
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool PNMImageHeader::has_type(void) const;

327 8 get_type 0 4 478 24 PNMImageHeader::get_type 0 1 39 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
////////////////////////////////////////////////////////////////////
57
inline PNMFileType *PNMImageHeader::get_type(void) const;

328 8 set_type 0 4 478 24 PNMImageHeader::set_type 0 1 40 583
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
////////////////////////////////////////////////////////////////////
56
inline void PNMImageHeader::set_type(PNMFileType *type);

329 11 read_header 0 4 478 27 PNMImageHeader::read_header 0 7 41 42 43 44 45 46 47 1214
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
295
bool PNMImageHeader::read_header(Filename const &filename, PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1));
bool PNMImageHeader::read_header(istream &data, basic_string< char > const &filename = ((string())), PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1));

330 11 make_reader 0 4 478 27 PNMImageHeader::make_reader 0 9 48 49 50 51 52 53 54 55 56 2105
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
373
PNMReader *PNMImageHeader::make_reader(Filename const &filename, PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1)) const;
PNMReader *PNMImageHeader::make_reader(istream *file, bool owns_file = (1), Filename const &filename = ((())), basic_string< char > magic_number = ((string())), PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1)) const;

331 11 make_writer 0 4 478 27 PNMImageHeader::make_writer 0 6 57 58 59 60 61 62 1861
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
259
PNMWriter *PNMImageHeader::make_writer(Filename const &filename, PNMFileType *type = ((void *)(0))) const;
PNMWriter *PNMImageHeader::make_writer(ostream *file, bool owns_file = (1), Filename const &filename = ((())), PNMFileType *type = ((void *)(0))) const;

332 17 read_magic_number 0 4 478 33 PNMImageHeader::read_magic_number 0 1 63 602
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
////////////////////////////////////////////////////////////////////
112
static bool PNMImageHeader::read_magic_number(istream *file, basic_string< char > &magic_number, int num_bytes);

333 6 output 0 4 478 22 PNMImageHeader::output 0 1 64 221
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void PNMImageHeader::output(ostream &out) const;

334 9 PixelSpec 0 4 480 36 PNMImageHeader::PixelSpec::PixelSpec 0 7 65 66 67 68 69 70 71 1683
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
679
inline PNMImageHeader::PixelSpec::PixelSpec(unsigned short int gray_value);
inline PNMImageHeader::PixelSpec::PixelSpec(unsigned short int gray_value, unsigned short int alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(unsigned short int red, unsigned short int green, unsigned short int blue);
inline PNMImageHeader::PixelSpec::PixelSpec(unsigned short int red, unsigned short int green, unsigned short int blue, unsigned short int alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(pixel const &rgb);
inline PNMImageHeader::PixelSpec::PixelSpec(pixel const &rgb, unsigned short int alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(PNMImageHeader::PixelSpec const &copy);

335 10 operator = 0 4 480 37 PNMImageHeader::PixelSpec::operator = 0 1 72 251
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
89
inline void PNMImageHeader::PixelSpec::operator =(PNMImageHeader::PixelSpec const &copy);

336 10 operator < 0 4 480 37 PNMImageHeader::PixelSpec::operator < 0 1 73 237
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator <
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
96
inline bool PNMImageHeader::PixelSpec::operator <(PNMImageHeader::PixelSpec const &other) const;

337 11 operator == 0 4 480 38 PNMImageHeader::PixelSpec::operator == 0 1 74 238
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator ==
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
97
inline bool PNMImageHeader::PixelSpec::operator ==(PNMImageHeader::PixelSpec const &other) const;

338 11 operator != 0 4 480 38 PNMImageHeader::PixelSpec::operator != 0 1 75 238
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator !=
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
97
inline bool PNMImageHeader::PixelSpec::operator !=(PNMImageHeader::PixelSpec const &other) const;

339 10 compare_to 0 4 480 37 PNMImageHeader::PixelSpec::compare_to 0 1 76 237
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
inline int PNMImageHeader::PixelSpec::compare_to(PNMImageHeader::PixelSpec const &other) const;

340 7 get_red 0 4 480 34 PNMImageHeader::PixelSpec::get_red 0 1 77 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
inline unsigned short int PNMImageHeader::PixelSpec::get_red(void) const;

341 9 get_green 0 4 480 36 PNMImageHeader::PixelSpec::get_green 0 1 78 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline unsigned short int PNMImageHeader::PixelSpec::get_green(void) const;

342 8 get_blue 0 4 480 35 PNMImageHeader::PixelSpec::get_blue 0 1 79 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline unsigned short int PNMImageHeader::PixelSpec::get_blue(void) const;

343 9 get_alpha 0 4 480 36 PNMImageHeader::PixelSpec::get_alpha 0 1 80 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline unsigned short int PNMImageHeader::PixelSpec::get_alpha(void) const;

344 7 set_red 0 4 480 34 PNMImageHeader::PixelSpec::set_red 0 1 81 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void PNMImageHeader::PixelSpec::set_red(unsigned short int red);

345 9 set_green 0 4 480 36 PNMImageHeader::PixelSpec::set_green 0 1 82 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void PNMImageHeader::PixelSpec::set_green(unsigned short int green);

346 8 set_blue 0 4 480 35 PNMImageHeader::PixelSpec::set_blue 0 1 83 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
inline void PNMImageHeader::PixelSpec::set_blue(unsigned short int blue);

347 9 set_alpha 0 4 480 36 PNMImageHeader::PixelSpec::set_alpha 0 1 84 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void PNMImageHeader::PixelSpec::set_alpha(unsigned short int alpha);

348 11 operator [] 0 4 480 38 PNMImageHeader::PixelSpec::operator [] 0 1 85 397
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator []
//       Access: Published
//  Description: Indexes numerically into the components, in the order
//               R, G, B, A.  This also makes the PixelSpec work like
//               a tuple in Python.
////////////////////////////////////////////////////////////////////
78
inline unsigned short int PNMImageHeader::PixelSpec::operator [](int n) const;

349 4 size 0 4 480 31 PNMImageHeader::PixelSpec::size 0 1 86 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
////////////////////////////////////////////////////////////////////
56
static inline int PNMImageHeader::PixelSpec::size(void);

350 6 output 0 4 480 33 PNMImageHeader::PixelSpec::output 0 1 87 230
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
void PNMImageHeader::PixelSpec::output(ostream &out) const;

351 10 ~PixelSpec 0 4 480 37 PNMImageHeader::PixelSpec::~PixelSpec 0 0 0
44
PNMImageHeader::PixelSpec::~PixelSpec(void);

352 15 ~PixelSpecCount 0 4 481 47 PNMImageHeader::PixelSpecCount::~PixelSpecCount 0 0 0
54
PNMImageHeader::PixelSpecCount::~PixelSpecCount(void);

353 9 Histogram 0 4 482 36 PNMImageHeader::Histogram::Histogram 0 1 88 238
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
inline PNMImageHeader::Histogram::Histogram(void);

354 14 get_num_pixels 0 4 482 41 PNMImageHeader::Histogram::get_num_pixels 0 1 89 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
////////////////////////////////////////////////////////////////////
65
inline int PNMImageHeader::Histogram::get_num_pixels(void) const;

355 9 get_pixel 0 4 482 36 PNMImageHeader::Histogram::get_pixel 0 1 90 385
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
////////////////////////////////////////////////////////////////////
90
inline PNMImageHeader::PixelSpec const &PNMImageHeader::Histogram::get_pixel(int n) const;

356 9 get_count 0 4 482 36 PNMImageHeader::Histogram::get_count 0 2 91 92 678
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
////////////////////////////////////////////////////////////////////
156
inline int PNMImageHeader::Histogram::get_count(int n) const;
inline int PNMImageHeader::Histogram::get_count(PNMImageHeader::PixelSpec const &pixel) const;

357 5 write 0 4 482 32 PNMImageHeader::Histogram::write 0 1 93 229
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PNMImageHeader::Histogram::write(ostream &out) const;

358 10 ~Histogram 0 4 482 37 PNMImageHeader::Histogram::~Histogram 0 0 0
44
PNMImageHeader::Histogram::~Histogram(void);

359 16 make_transparent 0 4 483 26 PNMBrush::make_transparent 0 1 94 414
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
////////////////////////////////////////////////////////////////////
62
static PointerTo< PNMBrush > PNMBrush::make_transparent(void);

360 10 make_pixel 0 4 483 20 PNMBrush::make_pixel 0 2 95 96 384
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
////////////////////////////////////////////////////////////////////
118
static PointerTo< PNMBrush > PNMBrush::make_pixel(LVecBase4d const &color, PNMBrush::BrushEffect effect = (BE_blend));

361 9 make_spot 0 4 483 19 PNMBrush::make_spot 0 2 97 98 401
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
////////////////////////////////////////////////////////////////////
144
static PointerTo< PNMBrush > PNMBrush::make_spot(LVecBase4d const &color, double radius, bool fuzzy, PNMBrush::BrushEffect effect = (BE_blend));

362 10 make_image 0 4 483 20 PNMBrush::make_image 0 2 99 100 537
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
////////////////////////////////////////////////////////////////////
138
static PointerTo< PNMBrush > PNMBrush::make_image(PNMImage const &image, double xc, double yc, PNMBrush::BrushEffect effect = (BE_blend));

363 8 PNMImage 0 4 486 18 PNMImage::PNMImage 0 8 101 102 103 104 105 106 107 108 1375
// Filename: pnmImage.I
// Created by:  drose (15Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
307
inline PNMImage::PNMImage(void);
PNMImage::PNMImage(Filename const &filename, PNMFileType *type = ((void *)(0)));
inline PNMImage::PNMImage(int x_size, int y_size, int num_channels = (3), unsigned short int maxval = (255), PNMFileType *type = ((void *)(0)));
inline PNMImage::PNMImage(PNMImage const &copy);

364 10 operator = 0 4 486 20 PNMImage::operator = 0 1 109 233
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::operator =(PNMImage const &copy);

365 9 ~PNMImage 0 4 486 19 PNMImage::~PNMImage 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PNMImage::~PNMImage(void);

366 9 clamp_val 0 4 486 19 PNMImage::clamp_val 0 1 110 290
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
////////////////////////////////////////////////////////////////////
69
inline unsigned short int PNMImage::clamp_val(int input_value) const;

367 6 to_val 0 4 486 16 PNMImage::to_val 0 1 111 299
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale values from [0..1] to
//               [0..get_maxval()].
////////////////////////////////////////////////////////////////////
69
inline unsigned short int PNMImage::to_val(double input_value) const;

368 8 from_val 0 4 486 18 PNMImage::from_val 0 1 112 301
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale values from
//               [0..get_maxval()] to [0..1].
////////////////////////////////////////////////////////////////////
71
inline double PNMImage::from_val(unsigned short int input_value) const;

369 5 clear 0 4 486 15 PNMImage::clear 0 5 113 114 115 116 117 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
////////////////////////////////////////////////////////////////////
167
void PNMImage::clear(void);
void PNMImage::clear(int x_size, int y_size, int num_channels = (3), unsigned short int maxval = (255), PNMFileType *type = ((void *)(0)));

370 9 copy_from 0 4 486 19 PNMImage::copy_from 0 1 118 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
////////////////////////////////////////////////////////////////////
47
void PNMImage::copy_from(PNMImage const &copy);

371 12 copy_channel 0 4 486 22 PNMImage::copy_channel 0 7 119 120 121 122 123 124 125 696
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
////////////////////////////////////////////////////////////////////
252
void PNMImage::copy_channel(PNMImage const &copy, int src_channel, int dest_channel);
void PNMImage::copy_channel(PNMImage const &copy, int xto, int yto, int cto, int xfrom = (0), int yfrom = (0), int cfrom = (0), int x_size = (-1), int y_size = (-1));

372 16 copy_header_from 0 4 486 26 PNMImage::copy_header_from 0 1 126 445
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
////////////////////////////////////////////////////////////////////
62
void PNMImage::copy_header_from(PNMImageHeader const &header);

373 9 take_from 0 4 486 19 PNMImage::take_from 0 1 127 314
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
////////////////////////////////////////////////////////////////////
41
void PNMImage::take_from(PNMImage &orig);

374 4 fill 0 4 486 14 PNMImage::fill 0 3 128 129 130 610
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////
113
inline void PNMImage::fill(double red, double green, double blue);
inline void PNMImage::fill(double gray = (0));

375 8 fill_val 0 4 486 18 PNMImage::fill_val 0 3 131 132 133 618
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////
162
void PNMImage::fill_val(unsigned short int red, unsigned short int green, unsigned short int blue);
inline void PNMImage::fill_val(unsigned short int gray = (0));

376 10 alpha_fill 0 4 486 20 PNMImage::alpha_fill 0 2 134 135 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::alpha_fill(double alpha = (0));

377 14 alpha_fill_val 0 4 486 24 PNMImage::alpha_fill_val 0 2 136 137 273
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
62
void PNMImage::alpha_fill_val(unsigned short int alpha = (0));

378 13 set_read_size 0 4 486 23 PNMImage::set_read_size 0 1 138 855
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_read_size(int x_size, int y_size);

379 15 clear_read_size 0 4 486 25 PNMImage::clear_read_size 0 1 139 298
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
////////////////////////////////////////////////////////////////////
44
inline void PNMImage::clear_read_size(void);

380 13 has_read_size 0 4 486 23 PNMImage::has_read_size 0 1 140 271
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
////////////////////////////////////////////////////////////////////
48
inline bool PNMImage::has_read_size(void) const;

381 15 get_read_x_size 0 4 486 25 PNMImage::get_read_x_size 0 1 141 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_x_size(void) const;

382 15 get_read_y_size 0 4 486 25 PNMImage::get_read_y_size 0 1 142 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_y_size(void) const;

383 4 read 0 4 486 14 PNMImage::read 0 8 143 144 145 146 147 148 149 150 1758
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
309
bool PNMImage::read(Filename const &filename, PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1));
bool PNMImage::read(istream &data, basic_string< char > const &filename = ((string())), PNMFileType *type = ((void *)(0)), bool report_unknown_type = (1));
bool PNMImage::read(PNMReader *reader);

384 5 write 0 4 486 15 PNMImage::write 0 6 151 152 153 154 155 156 1386
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
266
bool PNMImage::write(Filename const &filename, PNMFileType *type = ((void *)(0))) const;
bool PNMImage::write(ostream &data, basic_string< char > const &filename = ((string())), PNMFileType *type = ((void *)(0))) const;
bool PNMImage::write(PNMWriter *writer) const;

385 8 is_valid 0 4 486 18 PNMImage::is_valid 0 1 157 470
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
////////////////////////////////////////////////////////////////////
43
inline bool PNMImage::is_valid(void) const;

386 16 set_num_channels 0 4 486 26 PNMImage::set_num_channels 0 1 158 531
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_num_channels(int num_channels);

387 14 set_color_type 0 4 486 24 PNMImage::set_color_type 0 1 159 606
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
////////////////////////////////////////////////////////////////////
68
void PNMImage::set_color_type(PNMImageHeader::ColorType color_type);

388 9 add_alpha 0 4 486 19 PNMImage::add_alpha 0 1 160 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
////////////////////////////////////////////////////////////////////
38
inline void PNMImage::add_alpha(void);

389 12 remove_alpha 0 4 486 22 PNMImage::remove_alpha 0 1 161 270
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
////////////////////////////////////////////////////////////////////
41
inline void PNMImage::remove_alpha(void);

390 14 make_grayscale 0 4 486 24 PNMImage::make_grayscale 0 2 162 163 839
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
////////////////////////////////////////////////////////////////////
107
inline void PNMImage::make_grayscale(void);
void PNMImage::make_grayscale(double rc, double gc, double bc);

391 8 make_rgb 0 4 486 18 PNMImage::make_rgb 0 1 164 329
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////
37
inline void PNMImage::make_rgb(void);

392 12 reverse_rows 0 4 486 22 PNMImage::reverse_rows 0 1 165 272
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
34
void PNMImage::reverse_rows(void);

393 10 set_maxval 0 4 486 20 PNMImage::set_maxval 0 1 166 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
////////////////////////////////////////////////////////////////////
53
void PNMImage::set_maxval(unsigned short int maxval);

394 11 get_xel_val 0 4 486 21 PNMImage::get_xel_val 0 1 167 565
// The *_val() functions return or set the color values in the range
// [0..get_maxval()].  This range may be different for different
// images!  Use the corresponding functions (without _val()) to work
// in the normalized range [0..1].

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
62
inline pixel const &PNMImage::get_xel_val(int x, int y) const;

395 11 set_xel_val 0 4 486 21 PNMImage::set_xel_val 0 3 168 169 170 1025
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
257
inline void PNMImage::set_xel_val(int x, int y, pixel const &value);
inline void PNMImage::set_xel_val(int x, int y, unsigned short int r, unsigned short int g, unsigned short int b);
inline void PNMImage::set_xel_val(int x, int y, unsigned short int gray);

396 11 get_red_val 0 4 486 21 PNMImage::get_red_val 0 1 171 340
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
68
inline unsigned short int PNMImage::get_red_val(int x, int y) const;

397 13 get_green_val 0 4 486 23 PNMImage::get_green_val 0 1 172 344
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
70
inline unsigned short int PNMImage::get_green_val(int x, int y) const;

398 12 get_blue_val 0 4 486 22 PNMImage::get_blue_val 0 1 173 342
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
69
inline unsigned short int PNMImage::get_blue_val(int x, int y) const;

399 12 get_gray_val 0 4 486 22 PNMImage::get_gray_val 0 1 174 584
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned is
//               in the range 0..maxval.
////////////////////////////////////////////////////////////////////
69
inline unsigned short int PNMImage::get_gray_val(int x, int y) const;

400 13 get_alpha_val 0 4 486 23 PNMImage::get_alpha_val 0 1 175 435
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval.
////////////////////////////////////////////////////////////////////
70
inline unsigned short int PNMImage::get_alpha_val(int x, int y) const;

401 11 set_red_val 0 4 486 21 PNMImage::set_red_val 0 1 176 363
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
70
inline void PNMImage::set_red_val(int x, int y, unsigned short int r);

402 13 set_green_val 0 4 486 23 PNMImage::set_green_val 0 1 177 367
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
72
inline void PNMImage::set_green_val(int x, int y, unsigned short int g);

403 12 set_blue_val 0 4 486 22 PNMImage::set_blue_val 0 1 178 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
71
inline void PNMImage::set_blue_val(int x, int y, unsigned short int b);

404 12 set_gray_val 0 4 486 22 PNMImage::set_gray_val 0 1 179 723
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval.
////////////////////////////////////////////////////////////////////
74
inline void PNMImage::set_gray_val(int x, int y, unsigned short int gray);

405 13 set_alpha_val 0 4 486 23 PNMImage::set_alpha_val 0 1 180 441
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
////////////////////////////////////////////////////////////////////
72
inline void PNMImage::set_alpha_val(int x, int y, unsigned short int a);

406 15 get_channel_val 0 4 486 25 PNMImage::get_channel_val 0 1 181 630
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
78
unsigned short int PNMImage::get_channel_val(int x, int y, int channel) const;

407 15 set_channel_val 0 4 486 25 PNMImage::set_channel_val 0 1 182 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
84
void PNMImage::set_channel_val(int x, int y, int channel, unsigned short int value);

408 9 get_pixel 0 4 486 19 PNMImage::get_pixel 0 1 183 322
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
66
PNMImageHeader::PixelSpec PNMImage::get_pixel(int x, int y) const;

409 9 set_pixel 0 4 486 19 PNMImage::set_pixel 0 1 184 319
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
79
void PNMImage::set_pixel(int x, int y, PNMImageHeader::PixelSpec const &pixel);

410 7 get_xel 0 4 486 17 PNMImage::get_xel 0 1 185 474
// The corresponding get_xel(), set_xel(), get_red(), etc. functions
// automatically scale their values by get_maxval() into the range
// [0..1].

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////
56
inline LVecBase3d PNMImage::get_xel(int x, int y) const;

411 7 set_xel 0 4 486 17 PNMImage::set_xel 0 3 186 187 188 1025
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a double in
//               the range 0..1.
////////////////////////////////////////////////////////////////////
202
inline void PNMImage::set_xel(int x, int y, LVecBase3d const &value);
inline void PNMImage::set_xel(int x, int y, double r, double g, double b);
inline void PNMImage::set_xel(int x, int y, double gray);

412 9 get_xel_a 0 4 486 19 PNMImage::get_xel_a 0 1 189 329
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////
58
inline LVecBase4d PNMImage::get_xel_a(int x, int y) const;

413 9 set_xel_a 0 4 486 19 PNMImage::set_xel_a 0 2 190 191 660
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
////////////////////////////////////////////////////////////////////
158
inline void PNMImage::set_xel_a(int x, int y, LVecBase4d const &value);
inline void PNMImage::set_xel_a(int x, int y, double r, double g, double b, double a);

414 7 get_red 0 4 486 17 PNMImage::get_red 0 1 192 357
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
////////////////////////////////////////////////////////////////////
52
inline double PNMImage::get_red(int x, int y) const;

415 9 get_green 0 4 486 19 PNMImage::get_green 0 1 193 361
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
////////////////////////////////////////////////////////////////////
54
inline double PNMImage::get_green(int x, int y) const;

416 8 get_blue 0 4 486 18 PNMImage::get_blue 0 1 194 359
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
////////////////////////////////////////////////////////////////////
53
inline double PNMImage::get_blue(int x, int y) const;

417 8 get_gray 0 4 486 18 PNMImage::get_gray 0 1 195 584
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned is
//               a double in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline double PNMImage::get_gray(int x, int y) const;

418 9 get_alpha 0 4 486 19 PNMImage::get_alpha 0 1 196 435
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a double
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
54
inline double PNMImage::get_alpha(int x, int y) const;

419 7 set_red 0 4 486 17 PNMImage::set_red 0 1 197 363
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
54
inline void PNMImage::set_red(int x, int y, double r);

420 9 set_green 0 4 486 19 PNMImage::set_green 0 1 198 367
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
56
inline void PNMImage::set_green(int x, int y, double g);

421 8 set_blue 0 4 486 18 PNMImage::set_blue 0 1 199 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_blue(int x, int y, double b);

422 8 set_gray 0 4 486 18 PNMImage::set_gray 0 1 200 719
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a double in the range 0..1.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::set_gray(int x, int y, double gray);

423 9 set_alpha 0 4 486 19 PNMImage::set_alpha 0 1 201 432
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
////////////////////////////////////////////////////////////////////
56
inline void PNMImage::set_alpha(int x, int y, double a);

424 11 get_channel 0 4 486 21 PNMImage::get_channel 0 1 202 630
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a double in the range
//               0..1.
////////////////////////////////////////////////////////////////////
69
inline double PNMImage::get_channel(int x, int y, int channel) const;

425 11 set_channel 0 4 486 21 PNMImage::set_channel 0 1 203 633
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a double in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
75
inline void PNMImage::set_channel(int x, int y, int channel, double value);

426 10 get_bright 0 4 486 20 PNMImage::get_bright 0 3 204 205 206 1413
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               double in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
////////////////////////////////////////////////////////////////////
244
inline double PNMImage::get_bright(int x, int y) const;
inline double PNMImage::get_bright(int x, int y, double rc, double gc, double bc) const;
inline double PNMImage::get_bright(int x, int y, double rc, double gc, double bc, double ac) const;

427 5 blend 0 4 486 15 PNMImage::blend 0 2 207 208 1080
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////
159
inline void PNMImage::blend(int x, int y, LVecBase3d const &val, double alpha);
void PNMImage::blend(int x, int y, double r, double g, double b, double alpha);

428 11 operator [] 0 4 486 21 PNMImage::operator [] 0 2 209 210 784
// If you're used to the NetPBM library and like working with a 2-d
// array of xels, and using the PNM macros to access their components,
// you may treat the PNMImage as such directly.

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Array Operator
//       Access: Published
//  Description: Allows the PNMImage to appear to be a 2-d array of
//               xels.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Array Operator
//       Access: Published
//  Description: Allows the PNMImage to appear to be a 2-d array of
//               xels.
////////////////////////////////////////////////////////////////////
99
inline pixel *PNMImage::operator [](int y);
inline pixel const *PNMImage::operator [](int y) const;

429 14 copy_sub_image 0 4 486 24 PNMImage::copy_sub_image 0 5 211 212 213 214 215 647
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
142
void PNMImage::copy_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1));

430 15 blend_sub_image 0 4 486 25 PNMImage::blend_sub_image 0 6 216 217 218 219 220 221 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
////////////////////////////////////////////////////////////////////
169
void PNMImage::blend_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), double pixel_scale = (1));

431 16 darken_sub_image 0 4 486 26 PNMImage::darken_sub_image 0 6 222 223 224 225 226 227 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
////////////////////////////////////////////////////////////////////
170
void PNMImage::darken_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), double pixel_scale = (1));

432 17 lighten_sub_image 0 4 486 27 PNMImage::lighten_sub_image 0 6 228 229 230 231 232 233 635
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
////////////////////////////////////////////////////////////////////
171
void PNMImage::lighten_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), double pixel_scale = (1));

433 9 threshold 0 4 486 19 PNMImage::threshold 0 1 234 891
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y). Set this image's
//               (x, y) to:
//
//               lt.get_xel(x, y) if s <= threshold, or
//
//               ge.get_xel(x, y) if s > threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.
////////////////////////////////////////////////////////////////////
126
void PNMImage::threshold(PNMImage const &select_image, int channel, double threshold, PNMImage const &lt, PNMImage const &ge);

434 11 render_spot 0 4 486 21 PNMImage::render_spot 0 1 235 781
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
////////////////////////////////////////////////////////////////////
109
void PNMImage::render_spot(LVecBase4d const &fg, LVecBase4d const &bg, double min_radius, double max_radius);

435 13 expand_border 0 4 486 23 PNMImage::expand_border 0 1 236 472
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
////////////////////////////////////////////////////////////////////
96
void PNMImage::expand_border(int left, int right, int bottom, int top, LVecBase4d const &color);

436 10 box_filter 0 4 486 20 PNMImage::box_filter 0 2 237 238 499
// The bodies for the non-inline *_filter() functions can be found
// in the file pnm-image-filter.cxx.

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
54
inline void PNMImage::box_filter(double radius = (1));

437 15 gaussian_filter 0 4 486 25 PNMImage::gaussian_filter 0 2 239 240 404
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
59
inline void PNMImage::gaussian_filter(double radius = (1));

438 15 box_filter_from 0 4 486 25 PNMImage::box_filter_from 0 1 241 530
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
68
void PNMImage::box_filter_from(double radius, PNMImage const &copy);

439 20 gaussian_filter_from 0 4 486 30 PNMImage::gaussian_filter_from 0 1 242 535
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
73
void PNMImage::gaussian_filter_from(double radius, PNMImage const &copy);

440 17 quick_filter_from 0 4 486 27 PNMImage::quick_filter_from 0 3 243 244 245 731
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
////////////////////////////////////////////////////////////////////
93
void PNMImage::quick_filter_from(PNMImage const &copy, int xborder = (0), int yborder = (0));

441 14 make_histogram 0 4 486 24 PNMImage::make_histogram 0 1 246 294
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
////////////////////////////////////////////////////////////////////
63
void PNMImage::make_histogram(PNMImageHeader::Histogram &hist);

442 17 perlin_noise_fill 0 4 486 27 PNMImage::perlin_noise_fill 0 4 247 248 249 250 880
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
////////////////////////////////////////////////////////////////////
172
void PNMImage::perlin_noise_fill(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
void PNMImage::perlin_noise_fill(StackedPerlinNoise2 &perlin);

443 14 remix_channels 0 4 486 24 PNMImage::remix_channels 0 1 251 370
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
////////////////////////////////////////////////////////////////////
53
void PNMImage::remix_channels(LMatrix4f const &conv);

444 13 gamma_correct 0 4 486 23 PNMImage::gamma_correct 0 1 252 474
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
////////////////////////////////////////////////////////////////////
72
inline void PNMImage::gamma_correct(double from_gamma, double to_gamma);

445 19 gamma_correct_alpha 0 4 486 29 PNMImage::gamma_correct_alpha 0 1 253 481
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
////////////////////////////////////////////////////////////////////
78
inline void PNMImage::gamma_correct_alpha(double from_gamma, double to_gamma);

446 14 apply_exponent 0 4 486 24 PNMImage::apply_exponent 0 4 254 255 256 257 1934
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////
366
inline void PNMImage::apply_exponent(double gray_exponent);
inline void PNMImage::apply_exponent(double gray_exponent, double alpha_exponent);
inline void PNMImage::apply_exponent(double red_exponent, double green_exponent, double blue_exponent);
void PNMImage::apply_exponent(double red_exponent, double green_exponent, double blue_exponent, double alpha_exponent);

447 15 get_average_xel 0 4 486 25 PNMImage::get_average_xel 0 1 258 302
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
////////////////////////////////////////////////////////////////////
49
LVecBase3d PNMImage::get_average_xel(void) const;

448 17 get_average_xel_a 0 4 486 27 PNMImage::get_average_xel_a 0 1 259 333
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
////////////////////////////////////////////////////////////////////
51
LVecBase4d PNMImage::get_average_xel_a(void) const;

449 16 get_average_gray 0 4 486 26 PNMImage::get_average_gray 0 1 260 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
////////////////////////////////////////////////////////////////////
46
double PNMImage::get_average_gray(void) const;

450 10 operator ~ 0 68 486 20 PNMImage::operator ~ 0 1 261 307
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator ~
//       Access: Published
//  Description: Returns a new PNMImage that is the
//               complement of the current PNMImage.
////////////////////////////////////////////////////////////////////
42
PNMImage PNMImage::operator ~(void) const;

451 10 operator + 0 4 486 20 PNMImage::operator + 0 2 262 263 772
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               is the sum of the corresponding pixel values
//               in the two given images.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is added to each pixel in the provided image.
////////////////////////////////////////////////////////////////////
135
inline PNMImage PNMImage::operator +(PNMImage const &other) const;
inline PNMImage PNMImage::operator +(LVecBase4d const &other) const;

452 10 operator - 0 4 486 20 PNMImage::operator - 0 2 264 265 787
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the right image is subtracted from each
//               pixel value from the left image.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is subtracted from each pixel in the provided image.
////////////////////////////////////////////////////////////////////
135
inline PNMImage PNMImage::operator -(PNMImage const &other) const;
inline PNMImage PNMImage::operator -(LVecBase4d const &other) const;

453 10 operator * 0 4 486 20 PNMImage::operator * 0 2 266 267 902
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the left image is multiplied by each
//               pixel value from the right image. Note that the
//               floating-point values in the 0..1 range are
//               multiplied, not in the 0..maxval range.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *
//       Access: Published
//  Description: Multiplies every pixel value in the image by
//               a constant floating-point multiplier value.
////////////////////////////////////////////////////////////////////
129
inline PNMImage PNMImage::operator *(PNMImage const &other) const;
inline PNMImage PNMImage::operator *(double multiplier) const;

454 11 operator += 0 4 486 21 PNMImage::operator += 0 2 268 269 774
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               is the sum of the corresponding pixel values
//               in the two given images.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +=
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is added to each pixel in the provided image.
////////////////////////////////////////////////////////////////////
103
void PNMImage::operator +=(PNMImage const &other);
void PNMImage::operator +=(LVecBase4d const &other);

455 11 operator -= 0 4 486 21 PNMImage::operator -= 0 2 270 271 789
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the right image is subtracted from each
//               pixel value from the left image.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -=
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is subtracted from each pixel in the provided image.
////////////////////////////////////////////////////////////////////
103
void PNMImage::operator -=(PNMImage const &other);
void PNMImage::operator -=(LVecBase4d const &other);

456 11 operator *= 0 4 486 21 PNMImage::operator *= 0 2 272 273 904
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the left image is multiplied by each
//               pixel value from the right image. Note that the
//               floating-point values in the 0..1 range are
//               multiplied, not in the 0..maxval range.
//               Only valid when both images have the same size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *=
//       Access: Published
//  Description: Multiplies every pixel value in the image by
//               a constant floating-point multiplier value.
////////////////////////////////////////////////////////////////////
97
void PNMImage::operator *=(PNMImage const &other);
void PNMImage::operator *=(double multiplier);

457 20 ~PNMFileTypeRegistry 0 4 487 41 PNMFileTypeRegistry::~PNMFileTypeRegistry 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
PNMFileTypeRegistry::~PNMFileTypeRegistry(void);

458 13 get_num_types 0 4 487 34 PNMFileTypeRegistry::get_num_types 0 1 274 279
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
51
int PNMFileTypeRegistry::get_num_types(void) const;

459 8 get_type 0 4 487 29 PNMFileTypeRegistry::get_type 0 1 275 261
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
56
PNMFileType *PNMFileTypeRegistry::get_type(int n) const;

460 23 get_type_from_extension 0 4 487 44 PNMFileTypeRegistry::get_type_from_extension 0 1 276 481
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
102
PNMFileType *PNMFileTypeRegistry::get_type_from_extension(basic_string< char > const &filename) const;

461 26 get_type_from_magic_number 0 4 487 47 PNMFileTypeRegistry::get_type_from_magic_number 0 1 277 544
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
109
PNMFileType *PNMFileTypeRegistry::get_type_from_magic_number(basic_string< char > const &magic_number) const;

462 18 get_type_by_handle 0 4 487 39 PNMFileTypeRegistry::get_type_by_handle 0 1 278 444
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
////////////////////////////////////////////////////////////////////
78
PNMFileType *PNMFileTypeRegistry::get_type_by_handle(TypeHandle handle) const;

463 5 write 0 4 487 26 PNMFileTypeRegistry::write 0 2 279 280 332
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
76
void PNMFileTypeRegistry::write(ostream &out, int indent_level = (0)) const;

464 14 get_global_ptr 0 4 487 35 PNMFileTypeRegistry::get_global_ptr 0 1 281 319
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
70
static PNMFileTypeRegistry *PNMFileTypeRegistry::get_global_ptr(void);

465 10 PNMPainter 0 4 488 22 PNMPainter::PNMPainter 0 3 282 283 284 896
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
////////////////////////////////////////////////////////////////////
68
PNMPainter::PNMPainter(PNMImage &image, int xo = (0), int yo = (0));

466 11 ~PNMPainter 0 4 488 23 PNMPainter::~PNMPainter 0 0 708
// Filename: pnmPainter.I
// Created by:  drose (02Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline PNMPainter::~PNMPainter(void);

467 7 set_pen 0 4 488 19 PNMPainter::set_pen 0 1 285 608
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
47
inline void PNMPainter::set_pen(PNMBrush *pen);

468 7 get_pen 0 4 488 19 PNMPainter::get_pen 0 1 286 259
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
////////////////////////////////////////////////////////////////////
49
inline PNMBrush *PNMPainter::get_pen(void) const;

469 8 set_fill 0 4 488 20 PNMPainter::set_fill 0 1 287 639
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
49
inline void PNMPainter::set_fill(PNMBrush *fill);

470 8 get_fill 0 4 488 20 PNMPainter::get_fill 0 1 288 268
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
////////////////////////////////////////////////////////////////////
50
inline PNMBrush *PNMPainter::get_fill(void) const;

471 10 draw_point 0 4 488 22 PNMPainter::draw_point 0 1 289 305
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
55
inline void PNMPainter::draw_point(double x, double y);

472 9 draw_line 0 4 488 21 PNMPainter::draw_line 0 1 290 303
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
71
void PNMPainter::draw_line(double xa, double ya, double xb, double yb);

473 14 draw_rectangle 0 4 488 26 PNMPainter::draw_rectangle 0 1 291 488
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
////////////////////////////////////////////////////////////////////
76
void PNMPainter::draw_rectangle(double xa, double ya, double xb, double yb);

291
1 14 Dtool_BCNhndVM 0 7 2 489 308 14 Dtool_BCNhndVM 0 0 
2 14 Dtool_BCNhnRJq 0 7 2 489 308 14 Dtool_BCNhnRJq 0 3 1 r 1 475  1 g 1 475  1 b 1 475  
3 14 Dtool_BCNhGjIK 0 6 3 490 0 14 Dtool_BCNhGjIK 0 0 
4 14 Dtool_BCNhvPAo 0 4 4 491 0 14 Dtool_BCNhvPAo 0 2 4 this 3 489  1 i 1 490  
5 14 Dtool_BCNhCOb2 0 6 4 475 0 14 Dtool_BCNhCOb2 0 2 4 this 3 492  1 i 1 490  
6 14 Dtool_BCNhtVKB 0 4 5 491 0 14 Dtool_BCNhtVKB 0 3 4 this 3 489  1 i 1 490  1 v 1 475  
7 14 Dtool_BCNhqbZf 0 7 6 489 308 14 Dtool_BCNhqbZf 0 2 4 this 3 492  5 other 1 492  
8 14 Dtool_BCNhqTKp 0 7 7 489 308 14 Dtool_BCNhqTKp 0 2 4 this 3 492  5 other 1 492  
9 14 Dtool_BCNhUeef 0 7 8 489 308 14 Dtool_BCNhUeef 0 2 4 this 3 492  4 mult 1 494  
10 14 Dtool_BCNhyxYf 0 6 9 489 0 14 Dtool_BCNhyxYf 0 2 4 this 3 489  5 other 1 492  
11 14 Dtool_BCNhy5Jp 0 6 10 489 0 14 Dtool_BCNhy5Jp 0 2 4 this 3 489  5 other 1 492  
12 14 Dtool_BCNh2b7D 0 6 11 489 0 14 Dtool_BCNh2b7D 0 2 4 this 3 489  4 mult 1 494  
13 14 Dtool_BCNhrZSg 0 6 13 475 0 14 Dtool_BCNhrZSg 0 1 4 this 3 492  
14 14 Dtool_BCNhNJEp 0 4 14 491 0 14 Dtool_BCNhNJEp 0 2 4 this 3 489  5 value 1 475  
15 14 Dtool_BCNhrjfs 0 6 16 475 0 14 Dtool_BCNhrjfs 0 1 4 this 3 492  
16 14 Dtool_BCNhNDR1 0 4 17 491 0 14 Dtool_BCNhNDR1 0 2 4 this 3 489  5 value 1 475  
17 14 Dtool_BCNhq5VH 0 6 19 475 0 14 Dtool_BCNhq5VH 0 1 4 this 3 492  
18 14 Dtool_BCNhSpIQ 0 4 20 491 0 14 Dtool_BCNhSpIQ 0 2 4 this 3 489  5 value 1 475  
19 14 Dtool_BCNhmp_V 0 6 25 497 0 14 Dtool_BCNhmp_V 0 1 4 this 3 495  
20 14 Dtool_BCNhs8xu 0 6 26 490 0 14 Dtool_BCNhs8xu 360 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 495  
21 14 Dtool_BCNh_4Ze 0 6 27 497 0 14 Dtool_BCNh_4Ze 378 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  1 n 1 490  
22 14 Dtool_BCNhmZL5 0 6 28 497 0 14 Dtool_BCNhmZL5 424 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 495  
23 14 Dtool_BCNhP0PY 0 7 29 499 0 14 Dtool_BCNhP0PY 0 0 
24 14 Dtool_BCNhBReb 0 7 31 500 316 14 Dtool_BCNhBReb 716 // Filename: pnmImageHeader.I
// Created by:  drose (15Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
25 14 Dtool_BCNh2f0p 0 7 31 500 316 14 Dtool_BCNh2f0p 231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 501  
26 14 Dtool_BCNhglLY 0 6 32 500 0 14 Dtool_BCNhglLY 239 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 500  4 copy 1 501  
27 14 Dtool_BCNh7arZ 0 6 35 479 0 14 Dtool_BCNh7arZ 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
28 14 Dtool_BCNhieYf 0 6 36 490 0 14 Dtool_BCNhieYf 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
29 14 Dtool_BCNhAZAi 0 6 37 503 0 14 Dtool_BCNhAZAi 551 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
30 14 Dtool_BCNhc8Xa 0 6 37 503 0 14 Dtool_BCNhc8Xa 395 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 479  
31 14 Dtool_BCNhAlRN 0 6 38 503 0 14 Dtool_BCNhAlRN 464 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
32 14 Dtool_BCNhLbsW 0 6 38 503 0 14 Dtool_BCNhLbsW 386 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 479  
33 14 Dtool_BCNh_pzV 0 6 39 475 0 14 Dtool_BCNh_pzV 443 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
34 14 Dtool_BCNhoepx 0 6 40 490 0 14 Dtool_BCNhoepx 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
35 14 Dtool_BCNh488x 0 6 41 490 0 14 Dtool_BCNh488x 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
36 14 Dtool_BCNhH6FH 0 6 42 497 0 14 Dtool_BCNhH6FH 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
37 14 Dtool_BCNhtnwk 0 4 43 491 0 14 Dtool_BCNhtnwk 278 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
//////////////////////////////////////////////////////////////////// 2 4 this 3 500  7 comment 1 497  
38 14 Dtool_BCNhVIh0 0 6 44 503 0 14 Dtool_BCNhVIh0 315 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
39 14 Dtool_BCNhN1gn 0 6 45 504 0 14 Dtool_BCNhN1gn 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
40 14 Dtool_BCNhKhXL 0 4 46 491 0 14 Dtool_BCNhKhXL 583 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 500  4 type 1 504  
41 14 Dtool_BCNhjGQr 0 6 47 503 0 14 Dtool_BCNhjGQr 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 500  8 filename 1 505  4 type 1 504  19 report_unknown_type 1 503  
42 14 Dtool_BCNh6NNp 0 6 47 503 0 14 Dtool_BCNh6NNp 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 500  8 filename 1 505  4 type 1 504  
43 14 Dtool_BCNhMN61 0 6 47 503 0 14 Dtool_BCNhMN61 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 500  8 filename 1 505  
44 14 Dtool_BCNhy4oR 0 6 47 503 0 14 Dtool_BCNhy4oR 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 500  4 data 1 508  8 filename 1 497  4 type 1 504  19 report_unknown_type 1 503  
45 14 Dtool_BCNhB6mV 0 6 47 503 0 14 Dtool_BCNhB6mV 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 500  4 data 1 508  8 filename 1 497  4 type 1 504  
46 14 Dtool_BCNh6jDg 0 6 47 503 0 14 Dtool_BCNh6jDg 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 500  4 data 1 508  8 filename 1 497  
47 14 Dtool_BCNhn_zc 0 6 47 503 0 14 Dtool_BCNhn_zc 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 500  4 data 1 508  
48 14 Dtool_BCNhyMEf 0 6 48 510 0 14 Dtool_BCNhyMEf 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 501  8 filename 1 505  4 type 1 504  19 report_unknown_type 1 503  
49 14 Dtool_BCNhXjYE 0 6 48 510 0 14 Dtool_BCNhXjYE 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  8 filename 1 505  4 type 1 504  
50 14 Dtool_BCNhHm13 0 6 48 510 0 14 Dtool_BCNhHm13 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  8 filename 1 505  
51 14 Dtool_BCNhhavn 0 6 48 510 0 14 Dtool_BCNhhavn 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 7 4 this 3 501  4 file 1 508  9 owns_file 1 503  8 filename 1 505  12 magic_number 1 497  4 type 1 504  19 report_unknown_type 1 503  
52 14 Dtool_BCNhB_GS 0 6 48 510 0 14 Dtool_BCNhB_GS 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 6 4 this 3 501  4 file 1 508  9 owns_file 1 503  8 filename 1 505  12 magic_number 1 497  4 type 1 504  
53 14 Dtool_BCNh9Nkt 0 6 48 510 0 14 Dtool_BCNh9Nkt 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 5 4 this 3 501  4 file 1 508  9 owns_file 1 503  8 filename 1 505  12 magic_number 1 497  
54 14 Dtool_BCNhXIKf 0 6 48 510 0 14 Dtool_BCNhXIKf 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 501  4 file 1 508  9 owns_file 1 503  8 filename 1 505  
55 14 Dtool_BCNhhpvx 0 6 48 510 0 14 Dtool_BCNhhpvx 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  4 file 1 508  9 owns_file 1 503  
56 14 Dtool_BCNhG56G 0 6 48 510 0 14 Dtool_BCNhG56G 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  4 file 1 508  
57 14 Dtool_BCNh5aMD 0 6 49 512 0 14 Dtool_BCNh5aMD 694 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  8 filename 1 505  4 type 1 504  
58 14 Dtool_BCNhZHo2 0 6 49 512 0 14 Dtool_BCNhZHo2 694 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  8 filename 1 505  
59 14 Dtool_BCNhnxIJ 0 6 49 512 0 14 Dtool_BCNhnxIJ 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 5 4 this 3 501  4 file 1 514  9 owns_file 1 503  8 filename 1 505  4 type 1 504  
60 14 Dtool_BCNhMA9F 0 6 49 512 0 14 Dtool_BCNhMA9F 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 501  4 file 1 514  9 owns_file 1 503  8 filename 1 505  
61 14 Dtool_BCNhvviY 0 6 49 512 0 14 Dtool_BCNhvviY 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  4 file 1 514  9 owns_file 1 503  
62 14 Dtool_BCNhKDut 0 6 49 512 0 14 Dtool_BCNhKDut 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  4 file 1 514  
63 14 Dtool_BCNh3Qff 0 6 50 503 0 14 Dtool_BCNh3Qff 602 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
//////////////////////////////////////////////////////////////////// 3 4 file 1 508  12 magic_number 1 516  9 num_bytes 1 490  
64 14 Dtool_BCNhN1NO 0 4 51 491 0 14 Dtool_BCNhN1NO 221 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  3 out 1 514  
65 14 Dtool_BCNhaiba 0 7 53 520 351 14 Dtool_BCNhaiba 243 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 518  
66 14 Dtool_BCNhBg5h 0 7 53 520 351 14 Dtool_BCNhBg5h 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 3 rgb 1 492  
67 14 Dtool_BCNhrfQp 0 7 53 520 351 14 Dtool_BCNhrfQp 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 rgb 1 492  5 alpha 1 475  
68 14 Dtool_BCNhP_Wa 0 7 53 520 351 14 Dtool_BCNhP_Wa 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 gray_value 1 475  
69 14 Dtool_BCNh0C33 0 7 53 520 351 14 Dtool_BCNh0C33 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 10 gray_value 1 475  5 alpha 1 475  
70 14 Dtool_BCNh0mtQ 0 7 53 520 351 14 Dtool_BCNh0mtQ 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 3 red 1 475  5 green 1 475  4 blue 1 475  
71 14 Dtool_BCNhuvff 0 7 53 520 351 14 Dtool_BCNhuvff 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 3 red 1 475  5 green 1 475  4 blue 1 475  5 alpha 1 475  
72 14 Dtool_BCNhH_yL 0 6 54 520 0 14 Dtool_BCNhH_yL 251 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 520  4 copy 1 518  
73 14 Dtool_BCNhKqUd 0 6 55 503 0 14 Dtool_BCNhKqUd 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator <
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  5 other 1 518  
74 14 Dtool_BCNh3ntw 0 6 56 503 0 14 Dtool_BCNh3ntw 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator ==
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  5 other 1 518  
75 14 Dtool_BCNhVnpl 0 6 57 503 0 14 Dtool_BCNhVnpl 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator !=
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  5 other 1 518  
76 14 Dtool_BCNhNjTc 0 6 58 490 0 14 Dtool_BCNhNjTc 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  5 other 1 518  
77 14 Dtool_BCNh_8Tt 0 6 59 475 0 14 Dtool_BCNh_8Tt 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
78 14 Dtool_BCNhYDpY 0 6 60 475 0 14 Dtool_BCNhYDpY 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
79 14 Dtool_BCNh_k6u 0 6 61 475 0 14 Dtool_BCNh_k6u 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
80 14 Dtool_BCNhoGXs 0 6 62 475 0 14 Dtool_BCNhoGXs 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
81 14 Dtool_BCNhR5lq 0 4 63 491 0 14 Dtool_BCNhR5lq 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 520  3 red 1 475  
82 14 Dtool_BCNhFQSX 0 4 64 491 0 14 Dtool_BCNhFQSX 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 520  5 green 1 475  
83 14 Dtool_BCNh_U_S 0 4 65 491 0 14 Dtool_BCNh_U_S 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 520  4 blue 1 475  
84 14 Dtool_BCNhek_q 0 4 66 491 0 14 Dtool_BCNhek_q 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 520  5 alpha 1 475  
85 14 Dtool_BCNhjJlA 0 6 67 475 0 14 Dtool_BCNhjJlA 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::operator []
//       Access: Published
//  Description: Indexes numerically into the components, in the order
//               R, G, B, A.  This also makes the PixelSpec work like
//               a tuple in Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  1 n 1 490  
86 14 Dtool_BCNhSM56 0 6 68 490 0 14 Dtool_BCNhSM56 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
//////////////////////////////////////////////////////////////////// 0 
87 14 Dtool_BCNhdDxm 0 4 69 491 0 14 Dtool_BCNhdDxm 230 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  3 out 1 514  
88 14 Dtool_BCNhwHpx 0 7 74 521 358 14 Dtool_BCNhwHpx 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
89 14 Dtool_BCNhKSJ_ 0 6 75 490 0 14 Dtool_BCNhKSJ_ 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 522  
90 14 Dtool_BCNhjIKa 0 6 76 518 0 14 Dtool_BCNhjIKa 385 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
//////////////////////////////////////////////////////////////////// 2 4 this 3 522  1 n 1 490  
91 14 Dtool_BCNhzrFZ 0 6 77 490 0 14 Dtool_BCNhzrFZ 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 522  5 pixel 1 518  
92 14 Dtool_BCNhDuJV 0 6 77 490 0 14 Dtool_BCNhDuJV 347 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 522  1 n 1 490  
93 14 Dtool_BCNh67a1 0 4 78 491 0 14 Dtool_BCNh67a1 229 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 522  3 out 1 514  
94 14 Dtool_BCNhX5Ct 0 7 83 524 0 14 Dtool_BCNhX5Ct 414 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
//////////////////////////////////////////////////////////////////// 0 
95 14 Dtool_BCNhEIGY 0 7 84 524 0 14 Dtool_BCNhEIGY 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
//////////////////////////////////////////////////////////////////// 2 5 color 1 525  6 effect 1 485  
96 14 Dtool_BCNhU4t_ 0 7 84 524 0 14 Dtool_BCNhU4t_ 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
//////////////////////////////////////////////////////////////////// 1 5 color 1 525  
97 14 Dtool_BCNhFWh_ 0 7 85 524 0 14 Dtool_BCNhFWh_ 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
//////////////////////////////////////////////////////////////////// 4 5 color 1 525  6 radius 1 494  5 fuzzy 1 503  6 effect 1 485  
98 14 Dtool_BCNhgvau 0 7 85 524 0 14 Dtool_BCNhgvau 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
//////////////////////////////////////////////////////////////////// 3 5 color 1 525  6 radius 1 494  5 fuzzy 1 503  
99 14 Dtool_BCNhmniy 0 7 86 524 0 14 Dtool_BCNhmniy 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
//////////////////////////////////////////////////////////////////// 4 5 image 1 528  2 xc 1 494  2 yc 1 494  6 effect 1 485  
100 14 Dtool_BCNh1ifs 0 7 86 524 0 14 Dtool_BCNh1ifs 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
//////////////////////////////////////////////////////////////////// 3 5 image 1 528  2 xc 1 494  2 yc 1 494  
101 14 Dtool_BCNhJuU_ 0 7 88 530 365 14 Dtool_BCNhJuU_ 704 // Filename: pnmImage.I
// Created by:  drose (15Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
102 14 Dtool_BCNhZniN 0 7 88 530 365 14 Dtool_BCNhZniN 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 505  4 type 1 504  
103 14 Dtool_BCNhGo3y 0 7 88 530 365 14 Dtool_BCNhGo3y 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 505  
104 14 Dtool_BCNh9JI_ 0 7 88 530 365 14 Dtool_BCNh9JI_ 225 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 528  
105 14 Dtool_BCNhGUHz 0 7 88 530 365 14 Dtool_BCNhGUHz 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  6 maxval 1 475  4 type 1 504  
106 14 Dtool_BCNh3kSc 0 7 88 530 365 14 Dtool_BCNh3kSc 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  6 maxval 1 475  
107 14 Dtool_BCNh0Ehq 0 7 88 530 365 14 Dtool_BCNh0Ehq 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  
108 14 Dtool_BCNhxphz 0 7 88 530 365 14 Dtool_BCNhxphz 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 x_size 1 490  6 y_size 1 490  
109 14 Dtool_BCNhW6D7 0 6 89 530 0 14 Dtool_BCNhW6D7 233 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 copy 1 528  
110 14 Dtool_BCNh1Od2 0 6 91 475 0 14 Dtool_BCNh1Od2 290 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  11 input_value 1 490  
111 14 Dtool_BCNhJVnd 0 6 92 475 0 14 Dtool_BCNhJVnd 299 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale values from [0..1] to
//               [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  11 input_value 1 494  
112 14 Dtool_BCNh78bW 0 6 93 494 0 14 Dtool_BCNh78bW 301 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale values from
//               [0..get_maxval()] to [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  11 input_value 1 475  
113 14 Dtool_BCNhgRyO 0 4 94 491 0 14 Dtool_BCNhgRyO 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
114 14 Dtool_BCNhFn3z 0 4 94 491 0 14 Dtool_BCNhFn3z 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  6 maxval 1 475  4 type 1 504  
115 14 Dtool_BCNh32h2 0 4 94 491 0 14 Dtool_BCNh32h2 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  6 maxval 1 475  
116 14 Dtool_BCNhJDi_ 0 4 94 491 0 14 Dtool_BCNhJDi_ 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  6 x_size 1 490  6 y_size 1 490  12 num_channels 1 490  
117 14 Dtool_BCNhJQp3 0 4 94 491 0 14 Dtool_BCNhJQp3 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  6 x_size 1 490  6 y_size 1 490  
118 14 Dtool_BCNh1EcB 0 4 95 491 0 14 Dtool_BCNh1EcB 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 copy 1 528  
119 14 Dtool_BCNh7qGl 0 4 96 491 0 14 Dtool_BCNh7qGl 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  11 src_channel 1 490  12 dest_channel 1 490  
120 14 Dtool_BCNhfWin 0 4 96 491 0 14 Dtool_BCNhfWin 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 10 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  5 xfrom 1 490  5 yfrom 1 490  5 cfrom 1 490  6 x_size 1 490  6 y_size 1 490  
121 14 Dtool_BCNhv6bv 0 4 96 491 0 14 Dtool_BCNhv6bv 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 9 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  5 xfrom 1 490  5 yfrom 1 490  5 cfrom 1 490  6 x_size 1 490  
122 14 Dtool_BCNhy9XT 0 4 96 491 0 14 Dtool_BCNhy9XT 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 8 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  5 xfrom 1 490  5 yfrom 1 490  5 cfrom 1 490  
123 14 Dtool_BCNhFKXl 0 4 96 491 0 14 Dtool_BCNhFKXl 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  5 xfrom 1 490  5 yfrom 1 490  
124 14 Dtool_BCNhItVu 0 4 96 491 0 14 Dtool_BCNhItVu 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  5 xfrom 1 490  
125 14 Dtool_BCNhVR0S 0 4 96 491 0 14 Dtool_BCNhVR0S 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  3 cto 1 490  
126 14 Dtool_BCNhfIQ5 0 4 97 491 0 14 Dtool_BCNhfIQ5 445 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 header 1 501  
127 14 Dtool_BCNhNRgL 0 4 98 491 0 14 Dtool_BCNhNRgL 314 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 orig 1 530  
128 14 Dtool_BCNhVQQT 0 4 99 491 0 14 Dtool_BCNhVQQT 309 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 gray 1 494  
129 14 Dtool_BCNh_Hno 0 4 99 491 0 14 Dtool_BCNh_Hno 309 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
130 14 Dtool_BCNhFZy4 0 4 99 491 0 14 Dtool_BCNhFZy4 299 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  3 red 1 494  5 green 1 494  4 blue 1 494  
131 14 Dtool_BCNh9TTf 0 4 100 491 0 14 Dtool_BCNh9TTf 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 gray 1 475  
132 14 Dtool_BCNhgsJ_ 0 4 100 491 0 14 Dtool_BCNhgsJ_ 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
133 14 Dtool_BCNhJAW_ 0 4 100 491 0 14 Dtool_BCNhJAW_ 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  3 red 1 475  5 green 1 475  4 blue 1 475  
134 14 Dtool_BCNhJekT 0 4 101 491 0 14 Dtool_BCNhJekT 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 alpha 1 494  
135 14 Dtool_BCNhZk_o 0 4 101 491 0 14 Dtool_BCNhZk_o 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
136 14 Dtool_BCNh_dAZ 0 4 102 491 0 14 Dtool_BCNh_dAZ 273 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 alpha 1 475  
137 14 Dtool_BCNh7C1N 0 4 102 491 0 14 Dtool_BCNh7C1N 273 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
138 14 Dtool_BCNhXK1K 0 4 103 491 0 14 Dtool_BCNhXK1K 855 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  6 x_size 1 490  6 y_size 1 490  
139 14 Dtool_BCNhILYS 0 4 104 491 0 14 Dtool_BCNhILYS 298 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
140 14 Dtool_BCNhx2p1 0 6 105 503 0 14 Dtool_BCNhx2p1 271 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
141 14 Dtool_BCNh9mAj 0 6 106 490 0 14 Dtool_BCNh9mAj 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
142 14 Dtool_BCNh69BD 0 6 107 490 0 14 Dtool_BCNh69BD 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
143 14 Dtool_BCNhC64S 0 6 108 503 0 14 Dtool_BCNhC64S 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  8 filename 1 505  4 type 1 504  19 report_unknown_type 1 503  
144 14 Dtool_BCNhPAvM 0 6 108 503 0 14 Dtool_BCNhPAvM 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  8 filename 1 505  4 type 1 504  
145 14 Dtool_BCNhvCUh 0 6 108 503 0 14 Dtool_BCNhvCUh 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  8 filename 1 505  
146 14 Dtool_BCNhdJLw 0 6 108 503 0 14 Dtool_BCNhdJLw 692 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 reader 1 510  
147 14 Dtool_BCNh9o7O 0 6 108 503 0 14 Dtool_BCNh9o7O 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 data 1 508  8 filename 1 497  4 type 1 504  19 report_unknown_type 1 503  
148 14 Dtool_BCNhwKxG 0 6 108 503 0 14 Dtool_BCNhwKxG 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 data 1 508  8 filename 1 497  4 type 1 504  
149 14 Dtool_BCNhgtc5 0 6 108 503 0 14 Dtool_BCNhgtc5 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  4 data 1 508  8 filename 1 497  
150 14 Dtool_BCNh5luU 0 6 108 503 0 14 Dtool_BCNh5luU 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 data 1 508  
151 14 Dtool_BCNhryAQ 0 6 109 503 0 14 Dtool_BCNhryAQ 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  8 filename 1 505  4 type 1 504  
152 14 Dtool_BCNhibdu 0 6 109 503 0 14 Dtool_BCNhibdu 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  8 filename 1 505  
153 14 Dtool_BCNhl0d0 0 6 109 503 0 14 Dtool_BCNhl0d0 513 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 writer 1 512  
154 14 Dtool_BCNh3I_7 0 6 109 503 0 14 Dtool_BCNh3I_7 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 4 4 this 3 528  4 data 1 514  8 filename 1 497  4 type 1 504  
155 14 Dtool_BCNhSl_y 0 6 109 503 0 14 Dtool_BCNhSl_y 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  4 data 1 514  8 filename 1 497  
156 14 Dtool_BCNhlWrL 0 6 109 503 0 14 Dtool_BCNhlWrL 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  4 data 1 514  
157 14 Dtool_BCNhbtI8 0 6 110 503 0 14 Dtool_BCNhbtI8 470 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
158 14 Dtool_BCNhvlnH 0 4 111 491 0 14 Dtool_BCNhvlnH 531 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  12 num_channels 1 490  
159 14 Dtool_BCNhHw_e 0 4 112 491 0 14 Dtool_BCNhHw_e 606 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  10 color_type 1 479  
160 14 Dtool_BCNhudkF 0 4 113 491 0 14 Dtool_BCNhudkF 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
161 14 Dtool_BCNhuXS6 0 4 114 491 0 14 Dtool_BCNhuXS6 270 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
162 14 Dtool_BCNhvd8W 0 4 115 491 0 14 Dtool_BCNhvd8W 335 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
163 14 Dtool_BCNhsKwX 0 4 115 491 0 14 Dtool_BCNhsKwX 502 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  2 rc 1 494  2 gc 1 494  2 bc 1 494  
164 14 Dtool_BCNhWxCH 0 4 116 491 0 14 Dtool_BCNhWxCH 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
165 14 Dtool_BCNhkTj7 0 4 117 491 0 14 Dtool_BCNhkTj7 272 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
166 14 Dtool_BCNhqQ4f 0 4 118 491 0 14 Dtool_BCNhqQ4f 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 maxval 1 475  
167 14 Dtool_BCNhZ_t1 0 6 119 492 0 14 Dtool_BCNhZ_t1 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
168 14 Dtool_BCNhBLQe 0 4 120 491 0 14 Dtool_BCNhBLQe 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  5 value 1 492  
169 14 Dtool_BCNhwSca 0 4 120 491 0 14 Dtool_BCNhwSca 369 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  4 gray 1 475  
170 14 Dtool_BCNheokV 0 4 120 491 0 14 Dtool_BCNheokV 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 475  1 g 1 475  1 b 1 475  
171 14 Dtool_BCNhvbnu 0 6 121 475 0 14 Dtool_BCNhvbnu 340 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
172 14 Dtool_BCNhim_o 0 6 122 475 0 14 Dtool_BCNhim_o 344 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
173 14 Dtool_BCNhfY0A 0 6 123 475 0 14 Dtool_BCNhfY0A 342 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
174 14 Dtool_BCNh3oeE 0 6 124 475 0 14 Dtool_BCNh3oeE 584 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned is
//               in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
175 14 Dtool_BCNhKba3 0 6 125 475 0 14 Dtool_BCNhKba3 435 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
176 14 Dtool_BCNhB1WT 0 4 126 491 0 14 Dtool_BCNhB1WT 363 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 475  
177 14 Dtool_BCNh4_Bi 0 4 127 491 0 14 Dtool_BCNh4_Bi 367 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 g 1 475  
178 14 Dtool_BCNhq9d9 0 4 128 491 0 14 Dtool_BCNhq9d9 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 b 1 475  
179 14 Dtool_BCNhjFIB 0 4 129 491 0 14 Dtool_BCNhjFIB 723 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  4 gray 1 475  
180 14 Dtool_BCNhjmcw 0 4 130 491 0 14 Dtool_BCNhjmcw 441 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 a 1 475  
181 14 Dtool_BCNh5dxI 0 6 131 475 0 14 Dtool_BCNh5dxI 630 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 528  1 x 1 490  1 y 1 490  7 channel 1 490  
182 14 Dtool_BCNh4AHG 0 4 132 491 0 14 Dtool_BCNh4AHG 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  1 x 1 490  1 y 1 490  7 channel 1 490  5 value 1 475  
183 14 Dtool_BCNhEyf6 0 7 133 520 351 14 Dtool_BCNhEyf6 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
184 14 Dtool_BCNh4idQ 0 4 134 491 0 14 Dtool_BCNh4idQ 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  5 pixel 1 518  
185 14 Dtool_BCNhE1Ub 0 7 135 532 0 14 Dtool_BCNhE1Ub 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
186 14 Dtool_BCNhlCyT 0 4 136 491 0 14 Dtool_BCNhlCyT 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  5 value 1 533  
187 14 Dtool_BCNhkAzw 0 4 136 491 0 14 Dtool_BCNhkAzw 369 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a double in
//               the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  4 gray 1 494  
188 14 Dtool_BCNhJNjN 0 4 136 491 0 14 Dtool_BCNhJNjN 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 494  1 g 1 494  1 b 1 494  
189 14 Dtool_BCNhV6AJ 0 7 137 535 0 14 Dtool_BCNhV6AJ 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
190 14 Dtool_BCNh0Zb6 0 4 138 491 0 14 Dtool_BCNh0Zb6 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  5 value 1 525  
191 14 Dtool_BCNhkHvU 0 4 138 491 0 14 Dtool_BCNhkHvU 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 494  1 g 1 494  1 b 1 494  1 a 1 494  
192 14 Dtool_BCNh2WPU 0 6 139 494 0 14 Dtool_BCNh2WPU 357 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
193 14 Dtool_BCNhhyC9 0 6 140 494 0 14 Dtool_BCNhhyC9 361 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
194 14 Dtool_BCNhWrcz 0 6 141 494 0 14 Dtool_BCNhWrcz 359 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a double in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
195 14 Dtool_BCNh55I3 0 6 142 494 0 14 Dtool_BCNh55I3 584 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned is
//               a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
196 14 Dtool_BCNha6eL 0 6 143 494 0 14 Dtool_BCNha6eL 435 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a double
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
197 14 Dtool_BCNhWqtp 0 4 144 491 0 14 Dtool_BCNhWqtp 363 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 494  
198 14 Dtool_BCNh2K1_ 0 4 145 491 0 14 Dtool_BCNh2K1_ 367 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 g 1 494  
199 14 Dtool_BCNhr0aG 0 4 146 491 0 14 Dtool_BCNhr0aG 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a double in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 b 1 494  
200 14 Dtool_BCNhiwGK 0 4 147 491 0 14 Dtool_BCNhiwGK 719 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a double in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  4 gray 1 494  
201 14 Dtool_BCNh9QPO 0 4 148 491 0 14 Dtool_BCNh9QPO 432 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  1 x 1 490  1 y 1 490  1 a 1 494  
202 14 Dtool_BCNhjZD3 0 6 149 494 0 14 Dtool_BCNhjZD3 630 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a double in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 528  1 x 1 490  1 y 1 490  7 channel 1 490  
203 14 Dtool_BCNhPshy 0 4 150 491 0 14 Dtool_BCNhPshy 633 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a double in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  1 x 1 490  1 y 1 490  7 channel 1 490  5 value 1 494  
204 14 Dtool_BCNhcpGI 0 6 151 494 0 14 Dtool_BCNhcpGI 467 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               double in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 x 1 490  1 y 1 490  
205 14 Dtool_BCNhN9Lp 0 6 151 494 0 14 Dtool_BCNhN9Lp 467 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 6 4 this 3 528  1 x 1 490  1 y 1 490  2 rc 1 494  2 gc 1 494  2 bc 1 494  
206 14 Dtool_BCNh1KaX 0 6 151 494 0 14 Dtool_BCNh1KaX 475 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 7 4 this 3 528  1 x 1 490  1 y 1 490  2 rc 1 494  2 gc 1 494  2 bc 1 494  2 ac 1 494  
207 14 Dtool_BCNhVicO 0 4 152 491 0 14 Dtool_BCNhVicO 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  1 x 1 490  1 y 1 490  3 val 1 533  5 alpha 1 494  
208 14 Dtool_BCNh9I6e 0 4 152 491 0 14 Dtool_BCNh9I6e 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  1 x 1 490  1 y 1 490  1 r 1 494  1 g 1 494  1 b 1 494  5 alpha 1 494  
209 14 Dtool_BCNh_EKA 0 6 153 489 0 14 Dtool_BCNh_EKA 297 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Array Operator
//       Access: Published
//  Description: Allows the PNMImage to appear to be a 2-d array of
//               xels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  1 y 1 490  
210 14 Dtool_BCNhwxq_ 0 6 153 492 0 14 Dtool_BCNhwxq_ 297 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Array Operator
//       Access: Published
//  Description: Allows the PNMImage to appear to be a 2-d array of
//               xels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  1 y 1 490  
211 14 Dtool_BCNhiW_W 0 4 154 491 0 14 Dtool_BCNhiW_W 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  
212 14 Dtool_BCNhxEW3 0 4 154 491 0 14 Dtool_BCNhxEW3 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  
213 14 Dtool_BCNhWkin 0 4 154 491 0 14 Dtool_BCNhWkin 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  
214 14 Dtool_BCNhXAof 0 4 154 491 0 14 Dtool_BCNhXAof 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  
215 14 Dtool_BCNhrmrb 0 4 154 491 0 14 Dtool_BCNhrmrb 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  
216 14 Dtool_BCNhUBqK 0 4 155 491 0 14 Dtool_BCNhUBqK 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 9 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  11 pixel_scale 1 494  
217 14 Dtool_BCNhnnVh 0 4 155 491 0 14 Dtool_BCNhnnVh 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 8 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  
218 14 Dtool_BCNh_Jps 0 4 155 491 0 14 Dtool_BCNh_Jps 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  
219 14 Dtool_BCNh9rTy 0 4 155 491 0 14 Dtool_BCNh9rTy 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  
220 14 Dtool_BCNhHoI1 0 4 155 491 0 14 Dtool_BCNhHoI1 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  
221 14 Dtool_BCNh5Bk2 0 4 155 491 0 14 Dtool_BCNh5Bk2 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  
222 14 Dtool_BCNhOz5_ 0 4 156 491 0 14 Dtool_BCNhOz5_ 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 9 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  11 pixel_scale 1 494  
223 14 Dtool_BCNhj3MU 0 4 156 491 0 14 Dtool_BCNhj3MU 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 8 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  
224 14 Dtool_BCNhW_U9 0 4 156 491 0 14 Dtool_BCNhW_U9 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  
225 14 Dtool_BCNhCJ4x 0 4 156 491 0 14 Dtool_BCNhCJ4x 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  
226 14 Dtool_BCNhg3LM 0 4 156 491 0 14 Dtool_BCNhg3LM 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  
227 14 Dtool_BCNh7UU5 0 4 156 491 0 14 Dtool_BCNh7UU5 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  
228 14 Dtool_BCNhfVkb 0 4 157 491 0 14 Dtool_BCNhfVkb 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 9 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  11 pixel_scale 1 494  
229 14 Dtool_BCNhpuck 0 4 157 491 0 14 Dtool_BCNhpuck 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 8 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  6 y_size 1 490  
230 14 Dtool_BCNhFcYI 0 4 157 491 0 14 Dtool_BCNhFcYI 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 7 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  6 x_size 1 490  
231 14 Dtool_BCNhfeXa 0 4 157 491 0 14 Dtool_BCNhfeXa 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  5 yfrom 1 490  
232 14 Dtool_BCNhsdWj 0 4 157 491 0 14 Dtool_BCNhsdWj 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  5 xfrom 1 490  
233 14 Dtool_BCNhb52H 0 4 157 491 0 14 Dtool_BCNhb52H 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  3 xto 1 490  3 yto 1 490  
234 14 Dtool_BCNhGK6i 0 4 158 491 0 14 Dtool_BCNhGK6i 891 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y). Set this image's
//               (x, y) to:
//
//               lt.get_xel(x, y) if s <= threshold, or
//
//               ge.get_xel(x, y) if s > threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  12 select_image 1 528  7 channel 1 490  9 threshold 1 494  2 lt 1 528  2 ge 1 528  
235 14 Dtool_BCNhj9HN 0 4 159 491 0 14 Dtool_BCNhj9HN 781 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  2 fg 1 525  2 bg 1 525  10 min_radius 1 494  10 max_radius 1 494  
236 14 Dtool_BCNhg5VA 0 4 160 491 0 14 Dtool_BCNhg5VA 472 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
//////////////////////////////////////////////////////////////////// 6 4 this 3 530  4 left 1 490  5 right 1 490  6 bottom 1 490  3 top 1 490  5 color 1 525  
237 14 Dtool_BCNh0QpA 0 4 161 491 0 14 Dtool_BCNh0QpA 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 radius 1 494  
238 14 Dtool_BCNhKBDW 0 4 161 491 0 14 Dtool_BCNhKBDW 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
239 14 Dtool_BCNhSjEC 0 4 162 491 0 14 Dtool_BCNhSjEC 404 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 radius 1 494  
240 14 Dtool_BCNhN02s 0 4 162 491 0 14 Dtool_BCNhN02s 404 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
241 14 Dtool_BCNhPYod 0 4 163 491 0 14 Dtool_BCNhPYod 530 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  6 radius 1 494  4 copy 1 528  
242 14 Dtool_BCNhRiE8 0 4 164 491 0 14 Dtool_BCNhRiE8 535 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  6 radius 1 494  4 copy 1 528  
243 14 Dtool_BCNh2C4m 0 4 165 491 0 14 Dtool_BCNh2C4m 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  4 copy 1 528  7 xborder 1 490  7 yborder 1 490  
244 14 Dtool_BCNhocJ5 0 4 165 491 0 14 Dtool_BCNhocJ5 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  4 copy 1 528  7 xborder 1 490  
245 14 Dtool_BCNhRBRi 0 4 165 491 0 14 Dtool_BCNhRBRi 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 copy 1 528  
246 14 Dtool_BCNhluC7 0 4 166 491 0 14 Dtool_BCNhluC7 294 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 hist 1 521  
247 14 Dtool_BCNhLw3A 0 4 167 491 0 14 Dtool_BCNhLw3A 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 perlin 1 536  
248 14 Dtool_BCNh_dBm 0 4 167 491 0 14 Dtool_BCNh_dBm 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  2 sx 1 494  2 sy 1 494  10 table_size 1 490  4 seed 1 538  
249 14 Dtool_BCNhtAOc 0 4 167 491 0 14 Dtool_BCNhtAOc 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  2 sx 1 494  2 sy 1 494  10 table_size 1 490  
250 14 Dtool_BCNh06Hk 0 4 167 491 0 14 Dtool_BCNh06Hk 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  2 sx 1 494  2 sy 1 494  
251 14 Dtool_BCNhfaTI 0 4 168 491 0 14 Dtool_BCNhfaTI 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 conv 1 539  
252 14 Dtool_BCNhYSjO 0 4 169 491 0 14 Dtool_BCNhYSjO 474 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  10 from_gamma 1 494  8 to_gamma 1 494  
253 14 Dtool_BCNhwa1s 0 4 170 491 0 14 Dtool_BCNhwa1s 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  10 from_gamma 1 494  8 to_gamma 1 494  
254 14 Dtool_BCNhH6Fb 0 4 171 491 0 14 Dtool_BCNhH6Fb 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  13 gray_exponent 1 494  
255 14 Dtool_BCNhkr_l 0 4 171 491 0 14 Dtool_BCNhkr_l 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  13 gray_exponent 1 494  14 alpha_exponent 1 494  
256 14 Dtool_BCNhxePx 0 4 171 491 0 14 Dtool_BCNhxePx 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 4 4 this 3 530  12 red_exponent 1 494  14 green_exponent 1 494  13 blue_exponent 1 494  
257 14 Dtool_BCNhZSgf 0 4 171 491 0 14 Dtool_BCNhZSgf 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 5 4 this 3 530  12 red_exponent 1 494  14 green_exponent 1 494  13 blue_exponent 1 494  14 alpha_exponent 1 494  
258 14 Dtool_BCNh9NNp 0 7 172 532 0 14 Dtool_BCNh9NNp 302 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
259 14 Dtool_BCNhrTM5 0 7 173 535 0 14 Dtool_BCNhrTM5 333 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
260 14 Dtool_BCNhbKRd 0 6 174 494 0 14 Dtool_BCNhbKRd 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
261 14 Dtool_BCNh7hU9 0 7 175 530 365 14 Dtool_BCNh7hU9 307 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator ~
//       Access: Published
//  Description: Returns a new PNMImage that is the
//               complement of the current PNMImage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
262 14 Dtool_BCNhSIk1 0 7 176 530 365 14 Dtool_BCNhSIk1 333 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is added to each pixel in the provided image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 other 1 525  
263 14 Dtool_BCNhO9xS 0 7 176 530 365 14 Dtool_BCNhO9xS 437 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               is the sum of the corresponding pixel values
//               in the two given images.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 other 1 528  
264 14 Dtool_BCNhtan1 0 7 177 530 365 14 Dtool_BCNhtan1 340 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is subtracted from each pixel in the provided image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 other 1 525  
265 14 Dtool_BCNhxDzS 0 7 177 530 365 14 Dtool_BCNhxDzS 445 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the right image is subtracted from each
//               pixel value from the left image.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 other 1 528  
266 14 Dtool_BCNhSkwy 0 7 178 530 365 14 Dtool_BCNhSkwy 575 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the left image is multiplied by each
//               pixel value from the right image. Note that the
//               floating-point values in the 0..1 range are
//               multiplied, not in the 0..maxval range.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 other 1 528  
267 14 Dtool_BCNhgYfb 0 7 178 530 365 14 Dtool_BCNhgYfb 325 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *
//       Access: Published
//  Description: Multiplies every pixel value in the image by
//               a constant floating-point multiplier value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  10 multiplier 1 494  
268 14 Dtool_BCNhiOty 0 6 179 530 0 14 Dtool_BCNhiOty 334 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +=
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is added to each pixel in the provided image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 other 1 525  
269 14 Dtool_BCNhULJV 0 6 179 530 0 14 Dtool_BCNhULJV 438 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator +=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               is the sum of the corresponding pixel values
//               in the two given images.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 other 1 528  
270 14 Dtool_BCNhlcsy 0 6 180 530 0 14 Dtool_BCNhlcsy 341 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -=
//       Access: Published
//  Description: Returns a new PNMImage in which the provided color
//               is subtracted from each pixel in the provided image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 other 1 525  
271 14 Dtool_BCNhdZIV 0 6 180 530 0 14 Dtool_BCNhdZIV 446 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator -=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the right image is subtracted from each
//               pixel value from the left image.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 other 1 528  
272 14 Dtool_BCNhQSI1 0 6 181 530 0 14 Dtool_BCNhQSI1 576 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *=
//       Access: Published
//  Description: Returns a new PNMImage in which each pixel value
//               from the left image is multiplied by each
//               pixel value from the right image. Note that the
//               floating-point values in the 0..1 range are
//               multiplied, not in the 0..maxval range.
//               Only valid when both images have the same size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 other 1 528  
273 14 Dtool_BCNh4c6t 0 6 181 530 0 14 Dtool_BCNh4c6t 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::operator *=
//       Access: Published
//  Description: Multiplies every pixel value in the image by
//               a constant floating-point multiplier value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  10 multiplier 1 494  
274 14 Dtool_BCNh4WfZ 0 6 184 490 0 14 Dtool_BCNh4WfZ 279 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
275 14 Dtool_BCNhQ4tf 0 6 185 504 0 14 Dtool_BCNhQ4tf 261 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  1 n 1 490  
276 14 Dtool_BCNhul04 0 6 186 504 0 14 Dtool_BCNhul04 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  8 filename 1 497  
277 14 Dtool_BCNhE_a6 0 6 187 504 0 14 Dtool_BCNhE_a6 544 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  12 magic_number 1 497  
278 14 Dtool_BCNhULKw 0 6 188 504 0 14 Dtool_BCNhULKw 444 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  6 handle 1 499  
279 14 Dtool_BCNhPi13 0 4 189 491 0 14 Dtool_BCNhPi13 332 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  3 out 1 514  12 indent_level 1 490  
280 14 Dtool_BCNhfjWd 0 4 189 491 0 14 Dtool_BCNhfjWd 332 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  3 out 1 514  
281 14 Dtool_BCNhFElp 0 6 190 544 0 14 Dtool_BCNhFElp 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
282 14 Dtool_BCNhScvd 0 7 192 545 466 14 Dtool_BCNhScvd 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 3 5 image 1 530  2 xo 1 490  2 yo 1 490  
283 14 Dtool_BCNht6xb 0 7 192 545 466 14 Dtool_BCNht6xb 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 2 5 image 1 530  2 xo 1 490  
284 14 Dtool_BCNhCt0a 0 7 192 545 466 14 Dtool_BCNhCt0a 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 1 5 image 1 530  
285 14 Dtool_BCNhZ5aW 0 4 194 491 0 14 Dtool_BCNhZ5aW 608 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  3 pen 1 524  
286 14 Dtool_BCNhTkSz 0 7 195 524 0 14 Dtool_BCNhTkSz 259 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
287 14 Dtool_BCNhdT_C 0 4 196 491 0 14 Dtool_BCNhdT_C 639 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  4 fill 1 524  
288 14 Dtool_BCNhQsMf 0 7 197 524 0 14 Dtool_BCNhQsMf 268 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
289 14 Dtool_BCNhnCKD 0 4 198 491 0 14 Dtool_BCNhnCKD 305 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 545  1 x 1 494  1 y 1 494  
290 14 Dtool_BCNhdfA6 0 4 199 491 0 14 Dtool_BCNhdfA6 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 545  2 xa 1 494  2 ya 1 494  2 xb 1 494  2 yb 1 494  
291 14 Dtool_BCNhIBht 0 4 200 491 0 14 Dtool_BCNhIBht 488 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
//////////////////////////////////////////////////////////////////// 5 4 this 3 545  2 xa 1 494  2 ya 1 494  2 xb 1 494  2 yb 1 494  
74
474 5 pixel 0 140289 5 pixel 5 pixel 0 0 0 1 292 308 3 548 549 550 9 293 294 295 296 297 298 299 300 301 0 0 0 0 0 0

475 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

476 11 PNMFileType 0 75777 11 PNMFileType 11 PNMFileType 0 0 0 0 0 0 5 309 310 311 312 313 1 551 0 1 0 477 0 0 0 0 330
////////////////////////////////////////////////////////////////////
//       Class : PNMFileType
// Description : This is the base class of a family of classes that
//               represent particular image file types that PNMImage
//               supports.
////////////////////////////////////////////////////////////////////

477 13 TypedWritable 0 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

478 14 PNMImageHeader 0 26625 14 PNMImageHeader 14 PNMImageHeader 0 0 0 1 314 316 0 18 315 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 0 0 0 0 4 479 480 481 482 616
////////////////////////////////////////////////////////////////////
//       Class : PNMImageHeader
// Description : This is the base class of PNMImage, PNMReader, and
//               PNMWriter.  It encapsulates all the information
//               associated with an image that describes its size,
//               number of channels, etc; that is, all the information
//               about the image except the image data itself.  It's
//               the sort of information you typically read from the
//               image file's header.
////////////////////////////////////////////////////////////////////

479 9 ColorType 0 794624 25 PNMImageHeader::ColorType 25 PNMImageHeader::ColorType 478 0 0 0 0 0 0 0 0 0 5 10 CT_invalid 26 PNMImageHeader::CT_invalid 0 12 CT_grayscale 28 PNMImageHeader::CT_grayscale 1 14 CT_two_channel 30 PNMImageHeader::CT_two_channel 2 8 CT_color 24 PNMImageHeader::CT_color 3 15 CT_four_channel 31 PNMImageHeader::CT_four_channel 4 0 198
// This enumerated type indicates the number of channels in the
// image, and also implies an image type.  You can treat it either
// as an integer number of channels or as an enumerated image type.

480 9 PixelSpec 0 403457 25 PNMImageHeader::PixelSpec 25 PNMImageHeader::PixelSpec 478 0 0 1 334 351 0 16 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 0 0 0 0 0 179
// Contains a single pixel specification used in compute_histogram()
// and make_histogram().  Note that pixels are stored by integer
// value, not by floating-point scaled value.

481 14 PixelSpecCount 0 403457 30 PNMImageHeader::PixelSpecCount 30 PNMImageHeader::PixelSpecCount 478 0 0 0 352 0 0 0 0 0 0 0 93
// Associates a pixel specification with an appearance count, for
// use in Histogram, below.

482 9 Histogram 0 403457 25 PNMImageHeader::Histogram 25 PNMImageHeader::Histogram 478 0 0 1 353 358 0 4 354 355 356 357 1 552 0 0 0 0 65
// Used to return a pixel histogram in PNMImage::get_histogram().

483 8 PNMBrush 0 75777 8 PNMBrush 8 PNMBrush 0 0 0 0 0 0 4 359 360 361 362 0 0 1 0 484 0 0 0 1 485 836
////////////////////////////////////////////////////////////////////
//       Class : PNMBrush
// Description : This class is used to control the shape and color of
//               the drawing operations performed by a PNMPainter
//               object.
//
//               Normally, you don't create a PNMBrush directly;
//               instead, use one of the static PNMBrush::make_*()
//               methods provided here.
//
//               A PNMBrush is used to draw the border of a polygon or
//               rectangle, as well as for filling its interior.  When
//               it is used to draw a border, the brush is "smeared"
//               over the border; when it is used to fill the
//               interior, it is tiled through the interior.
////////////////////////////////////////////////////////////////////

484 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

485 11 BrushEffect 0 794624 21 PNMBrush::BrushEffect 21 PNMBrush::BrushEffect 483 0 0 0 0 0 0 0 0 0 4 6 BE_set 16 PNMBrush::BE_set 0 8 BE_blend 18 PNMBrush::BE_blend 1 9 BE_darken 19 PNMBrush::BE_darken 2 10 BE_lighten 20 PNMBrush::BE_lighten 3 0 0

486 8 PNMImage 0 26625 8 PNMImage 8 PNMImage 0 0 0 1 363 365 0 92 364 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 0 0 1 0 478 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

487 19 PNMFileTypeRegistry 0 26625 19 PNMFileTypeRegistry 19 PNMFileTypeRegistry 0 0 0 0 457 0 7 458 459 460 461 462 463 464 1 553 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PNMFileTypeRegistry
// Description : This class maintains the set of all known
//               PNMFileTypes in the universe.
////////////////////////////////////////////////////////////////////

488 10 PNMPainter 0 26625 10 PNMPainter 10 PNMPainter 0 0 0 1 465 466 0 7 467 468 469 470 471 472 473 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : PNMPainter
// Description : This class provides a number of convenient methods
//               for painting drawings directly into a PNMImage.
//
//               It stores a pointer to the PNMImage you pass it, but
//               it does not take ownership of the object; you are
//               responsible for ensuring that the PNMImage does not
//               destruct during the lifetime of the PNMPainter
//               object.
////////////////////////////////////////////////////////////////////

489 7 pixel * 0 8576 7 pixel * 7 pixel * 0 0 474 0 0 0 0 0 0 0 0 0 0

490 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

491 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

492 13 pixel const * 0 8576 13 pixel const * 13 pixel const * 0 0 493 0 0 0 0 0 0 0 0 0 0

493 11 pixel const 0 8832 11 pixel const 11 pixel const 0 0 474 0 0 0 0 0 0 0 0 0 0

494 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

495 19 PNMFileType const * 0 8576 19 PNMFileType const * 19 PNMFileType const * 0 0 496 0 0 0 0 0 0 0 0 0 0

496 17 PNMFileType const 0 8832 17 PNMFileType const 17 PNMFileType const 0 0 476 0 0 0 0 0 0 0 0 0 0

497 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

498 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

499 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 498 0 0 0 0 0 0 0 0 0 0

500 16 PNMImageHeader * 0 8576 16 PNMImageHeader * 16 PNMImageHeader * 0 0 478 0 0 0 0 0 0 0 0 0 0

501 22 PNMImageHeader const * 0 8576 22 PNMImageHeader const * 22 PNMImageHeader const * 0 0 502 0 0 0 0 0 0 0 0 0 0

502 20 PNMImageHeader const 0 8832 20 PNMImageHeader const 20 PNMImageHeader const 0 0 478 0 0 0 0 0 0 0 0 0 0

503 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

504 13 PNMFileType * 0 8576 13 PNMFileType * 13 PNMFileType * 0 0 476 0 0 0 0 0 0 0 0 0 0

505 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 506 0 0 0 0 0 0 0 0 0 0

506 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 507 0 0 0 0 0 0 0 0 0 0

507 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

508 9 istream * 0 8576 9 istream * 9 istream * 0 0 509 0 0 0 0 0 0 0 0 0 0

509 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

510 11 PNMReader * 0 8576 11 PNMReader * 11 PNMReader * 0 0 511 0 0 0 0 0 0 0 0 0 0

511 9 PNMReader 0 2048 9 PNMReader 9 PNMReader 0 0 0 0 0 0 0 0 0 0 0 0 0

512 11 PNMWriter * 0 8576 11 PNMWriter * 11 PNMWriter * 0 0 513 0 0 0 0 0 0 0 0 0 0

513 9 PNMWriter 0 2048 9 PNMWriter 9 PNMWriter 0 0 0 0 0 0 0 0 0 0 0 0 0

514 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 515 0 0 0 0 0 0 0 0 0 0

515 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

516 22 basic_string< char > * 0 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 517 0 0 0 0 0 0 0 0 0 0

517 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

518 17 PixelSpec const * 0 8576 33 PNMImageHeader::PixelSpec const * 33 PNMImageHeader::PixelSpec const * 0 0 519 0 0 0 0 0 0 0 0 0 0

519 15 PixelSpec const 0 8832 31 PNMImageHeader::PixelSpec const 31 PNMImageHeader::PixelSpec const 0 0 480 0 0 0 0 0 0 0 0 0 0

520 11 PixelSpec * 0 8576 27 PNMImageHeader::PixelSpec * 27 PNMImageHeader::PixelSpec * 0 0 480 0 0 0 0 0 0 0 0 0 0

521 11 Histogram * 0 8576 27 PNMImageHeader::Histogram * 27 PNMImageHeader::Histogram * 0 0 482 0 0 0 0 0 0 0 0 0 0

522 17 Histogram const * 0 8576 33 PNMImageHeader::Histogram const * 33 PNMImageHeader::Histogram const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 15 Histogram const 0 8832 31 PNMImageHeader::Histogram const 31 PNMImageHeader::Histogram const 0 0 482 0 0 0 0 0 0 0 0 0 0

524 10 PNMBrush * 0 8576 10 PNMBrush * 10 PNMBrush * 0 0 483 0 0 0 0 0 0 0 0 0 0

525 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 526 0 0 0 0 0 0 0 0 0 0

526 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 527 0 0 0 0 0 0 0 0 0 0

527 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

528 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 529 0 0 0 0 0 0 0 0 0 0

529 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 486 0 0 0 0 0 0 0 0 0 0

530 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 486 0 0 0 0 0 0 0 0 0 0

531 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

532 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 531 0 0 0 0 0 0 0 0 0 0

533 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 531 0 0 0 0 0 0 0 0 0 0

535 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 527 0 0 0 0 0 0 0 0 0 0

536 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 19 StackedPerlinNoise2 0 2048 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 0 0 0 0 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

538 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

539 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 540 0 0 0 0 0 0 0 0 0 0

540 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 541 0 0 0 0 0 0 0 0 0 0

541 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 554 555 556 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

542 27 PNMFileTypeRegistry const * 0 8576 27 PNMFileTypeRegistry const * 27 PNMFileTypeRegistry const * 0 0 543 0 0 0 0 0 0 0 0 0 0

543 25 PNMFileTypeRegistry const 0 8832 25 PNMFileTypeRegistry const 25 PNMFileTypeRegistry const 0 0 487 0 0 0 0 0 0 0 0 0 0

544 21 PNMFileTypeRegistry * 0 8576 21 PNMFileTypeRegistry * 21 PNMFileTypeRegistry * 0 0 487 0 0 0 0 0 0 0 0 0 0

545 12 PNMPainter * 0 8576 12 PNMPainter * 12 PNMPainter * 0 0 488 0 0 0 0 0 0 0 0 0 0

546 18 PNMPainter const * 0 8576 18 PNMPainter const * 18 PNMPainter const * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 16 PNMPainter const 0 8832 16 PNMPainter const 16 PNMPainter const 0 0 488 0 0 0 0 0 0 0 0 0 0

0
3
548 1 b 0 6 475 302 303 8 pixel::b 
549 1 g 0 6 475 304 305 8 pixel::g 
550 1 r 0 6 475 306 307 8 pixel::r 
6
551 0 0 23 14 get_extensions 18 get_num_extensions 13 get_extension 
552 0 0 73 10 get_pixels 14 get_num_pixels 9 get_pixel 
553 0 0 182 9 get_types 13 get_num_types 8 get_type 
554 0 0 506 8 get_rows 4 size 7 get_row 
555 0 0 506 8 get_cols 4 size 7 get_col 
556 0 0 506 9 get_row3s 4 size 8 get_row3 
