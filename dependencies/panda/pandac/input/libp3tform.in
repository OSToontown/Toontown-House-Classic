1365931500
2 2
10 libp3tform 4 v_mB 5 panda 
248
261 13 ButtonThrower 0 4 509 28 ButtonThrower::ButtonThrower 0 1 1 222
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
ButtonThrower::ButtonThrower(basic_string< char > const &name);

262 21 set_button_down_event 0 4 509 36 ButtonThrower::set_button_down_event 0 1 2 1356
// Filename: buttonThrower.I
// Created by:  drose (26Dec03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
96
inline void ButtonThrower::set_button_down_event(basic_string< char > const &button_down_event);

263 21 get_button_down_event 0 4 509 36 ButtonThrower::get_button_down_event 0 1 3 353
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
////////////////////////////////////////////////////////////////////
84
inline basic_string< char > const &ButtonThrower::get_button_down_event(void) const;

264 19 set_button_up_event 0 4 509 34 ButtonThrower::set_button_up_event 0 1 4 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_button_up_event(basic_string< char > const &button_up_event);

265 19 get_button_up_event 0 4 509 34 ButtonThrower::get_button_up_event 0 1 5 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_button_up_event(void) const;

266 23 set_button_repeat_event 0 4 509 38 ButtonThrower::set_button_repeat_event 0 1 6 875
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
100
inline void ButtonThrower::set_button_repeat_event(basic_string< char > const &button_repeat_event);

267 23 get_button_repeat_event 0 4 509 38 ButtonThrower::get_button_repeat_event 0 1 7 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > const &ButtonThrower::get_button_repeat_event(void) const;

268 19 set_keystroke_event 0 4 509 34 ButtonThrower::set_keystroke_event 0 1 8 1304
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_keystroke_event(basic_string< char > const &keystroke_event);

269 19 get_keystroke_event 0 4 509 34 ButtonThrower::get_keystroke_event 0 1 9 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_keystroke_event(void) const;

270 19 set_candidate_event 0 4 509 34 ButtonThrower::set_candidate_event 0 1 10 1252
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_candidate_event(basic_string< char > const &candidate_event);

271 19 get_candidate_event 0 4 509 34 ButtonThrower::get_candidate_event 0 1 11 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_candidate_event(void) const;

272 14 set_move_event 0 4 509 29 ButtonThrower::set_move_event 0 1 12 340
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
////////////////////////////////////////////////////////////////////
82
inline void ButtonThrower::set_move_event(basic_string< char > const &move_event);

273 14 get_move_event 0 4 509 29 ButtonThrower::get_move_event 0 1 13 332
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &ButtonThrower::get_move_event(void) const;

274 10 set_prefix 0 4 509 25 ButtonThrower::set_prefix 0 1 14 505
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
////////////////////////////////////////////////////////////////////
74
inline void ButtonThrower::set_prefix(basic_string< char > const &prefix);

275 10 get_prefix 0 4 509 25 ButtonThrower::get_prefix 0 1 15 320
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ButtonThrower::get_prefix(void) const;

276 17 set_specific_flag 0 4 509 32 ButtonThrower::set_specific_flag 0 1 16 604
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
////////////////////////////////////////////////////////////////////
65
inline void ButtonThrower::set_specific_flag(bool specific_flag);

277 17 get_specific_flag 0 4 509 32 ButtonThrower::get_specific_flag 0 1 17 351
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
////////////////////////////////////////////////////////////////////
57
inline bool ButtonThrower::get_specific_flag(void) const;

278 13 set_time_flag 0 4 509 28 ButtonThrower::set_time_flag 0 1 18 720
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
////////////////////////////////////////////////////////////////////
57
inline void ButtonThrower::set_time_flag(bool time_flag);

279 13 get_time_flag 0 4 509 28 ButtonThrower::get_time_flag 0 1 19 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
////////////////////////////////////////////////////////////////////
53
inline bool ButtonThrower::get_time_flag(void) const;

280 13 add_parameter 0 4 509 28 ButtonThrower::add_parameter 0 1 20 382
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
61
void ButtonThrower::add_parameter(EventParameter const &obj);

281 18 get_num_parameters 0 4 509 33 ButtonThrower::get_num_parameters 0 1 21 405
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
50
int ButtonThrower::get_num_parameters(void) const;

282 13 get_parameter 0 4 509 28 ButtonThrower::get_parameter 0 1 22 386
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
////////////////////////////////////////////////////////////////////
57
EventParameter ButtonThrower::get_parameter(int n) const;

283 20 get_modifier_buttons 0 4 509 35 ButtonThrower::get_modifier_buttons 0 1 23 808
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
////////////////////////////////////////////////////////////////////
78
inline ModifierButtons const &ButtonThrower::get_modifier_buttons(void) const;

284 20 set_modifier_buttons 0 4 509 35 ButtonThrower::set_modifier_buttons 0 1 24 1054
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
////////////////////////////////////////////////////////////////////
77
inline void ButtonThrower::set_modifier_buttons(ModifierButtons const &mods);

285 24 set_throw_buttons_active 0 4 509 39 ButtonThrower::set_throw_buttons_active 0 1 25 597
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
////////////////////////////////////////////////////////////////////
63
inline void ButtonThrower::set_throw_buttons_active(bool flag);

286 24 get_throw_buttons_active 0 4 509 39 ButtonThrower::get_throw_buttons_active 0 1 26 446
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
////////////////////////////////////////////////////////////////////
64
inline bool ButtonThrower::get_throw_buttons_active(void) const;

287 16 add_throw_button 0 4 509 31 ButtonThrower::add_throw_button 0 1 27 1056
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
////////////////////////////////////////////////////////////////////
94
bool ButtonThrower::add_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

288 19 remove_throw_button 0 4 509 34 ButtonThrower::remove_throw_button 0 1 28 513
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
////////////////////////////////////////////////////////////////////
97
bool ButtonThrower::remove_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

289 16 has_throw_button 0 4 509 31 ButtonThrower::has_throw_button 0 2 29 30 1059
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
////////////////////////////////////////////////////////////////////
172
bool ButtonThrower::has_throw_button(ModifierButtons const &mods, ButtonHandle const &button) const;
bool ButtonThrower::has_throw_button(ButtonHandle const &button) const;

290 19 clear_throw_buttons 0 4 509 34 ButtonThrower::clear_throw_buttons 0 1 31 342
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
////////////////////////////////////////////////////////////////////
46
void ButtonThrower::clear_throw_buttons(void);

291 14 get_class_type 0 4 509 29 ButtonThrower::get_class_type 0 1 32 0
54
static TypeHandle ButtonThrower::get_class_type(void);

292 14 require_button 0 4 511 34 MouseInterfaceNode::require_button 0 1 33 589
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
////////////////////////////////////////////////////////////////////
82
void MouseInterfaceNode::require_button(ButtonHandle const &button, bool is_down);

293 12 clear_button 0 4 511 32 MouseInterfaceNode::clear_button 0 1 34 340
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
////////////////////////////////////////////////////////////////////
66
void MouseInterfaceNode::clear_button(ButtonHandle const &button);

294 17 clear_all_buttons 0 4 511 37 MouseInterfaceNode::clear_all_buttons 0 1 35 332
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
////////////////////////////////////////////////////////////////////
49
void MouseInterfaceNode::clear_all_buttons(void);

295 14 get_class_type 0 4 511 34 MouseInterfaceNode::get_class_type 0 1 36 0
59
static TypeHandle MouseInterfaceNode::get_class_type(void);

296 14 DriveInterface 0 4 512 30 DriveInterface::DriveInterface 0 2 37 38 226
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
DriveInterface::DriveInterface(basic_string< char > const &name = (""));

297 17 set_forward_speed 0 4 512 33 DriveInterface::set_forward_speed 0 1 39 886
// Filename: driveInterface.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_forward_speed(float speed);

298 17 get_forward_speed 0 4 512 33 DriveInterface::get_forward_speed 0 1 40 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_forward_speed(void) const;

299 17 set_reverse_speed 0 4 512 33 DriveInterface::set_reverse_speed 0 1 41 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_reverse_speed(float speed);

300 17 get_reverse_speed 0 4 512 33 DriveInterface::get_reverse_speed 0 1 42 402
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_reverse_speed(void) const;

301 16 set_rotate_speed 0 4 512 32 DriveInterface::set_rotate_speed 0 1 43 413
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline void DriveInterface::set_rotate_speed(float speed);

302 16 get_rotate_speed 0 4 512 32 DriveInterface::get_rotate_speed 0 1 44 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline float DriveInterface::get_rotate_speed(void) const;

303 22 set_vertical_dead_zone 0 4 512 38 DriveInterface::set_vertical_dead_zone 0 1 45 603
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
63
inline void DriveInterface::set_vertical_dead_zone(float zone);

304 22 get_vertical_dead_zone 0 4 512 38 DriveInterface::get_vertical_dead_zone 0 1 46 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
64
inline float DriveInterface::get_vertical_dead_zone(void) const;

305 24 set_horizontal_dead_zone 0 4 512 40 DriveInterface::set_horizontal_dead_zone 0 1 47 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_horizontal_dead_zone(float zone);

306 24 get_horizontal_dead_zone 0 4 512 40 DriveInterface::get_horizontal_dead_zone 0 1 48 609
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
66
inline float DriveInterface::get_horizontal_dead_zone(void) const;

307 25 set_vertical_ramp_up_time 0 4 512 41 DriveInterface::set_vertical_ramp_up_time 0 1 49 431
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
////////////////////////////////////////////////////////////////////
74
inline void DriveInterface::set_vertical_ramp_up_time(float ramp_up_time);

308 25 get_vertical_ramp_up_time 0 4 512 41 DriveInterface::get_vertical_ramp_up_time 0 1 50 451
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
////////////////////////////////////////////////////////////////////
67
inline float DriveInterface::get_vertical_ramp_up_time(void) const;

309 27 set_vertical_ramp_down_time 0 4 512 43 DriveInterface::set_vertical_ramp_down_time 0 1 51 412
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
78
inline void DriveInterface::set_vertical_ramp_down_time(float ramp_down_time);

310 27 get_vertical_ramp_down_time 0 4 512 43 DriveInterface::get_vertical_ramp_down_time 0 1 52 415
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_vertical_ramp_down_time(void) const;

311 27 set_horizontal_ramp_up_time 0 4 512 43 DriveInterface::set_horizontal_ramp_up_time 0 1 53 417
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
////////////////////////////////////////////////////////////////////
76
inline void DriveInterface::set_horizontal_ramp_up_time(float ramp_up_time);

312 27 get_horizontal_ramp_up_time 0 4 512 43 DriveInterface::get_horizontal_ramp_up_time 0 1 54 420
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_horizontal_ramp_up_time(void) const;

313 29 set_horizontal_ramp_down_time 0 4 512 45 DriveInterface::set_horizontal_ramp_down_time 0 1 55 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
80
inline void DriveInterface::set_horizontal_ramp_down_time(float ramp_down_time);

314 29 get_horizontal_ramp_down_time 0 4 512 45 DriveInterface::get_horizontal_ramp_down_time 0 1 56 419
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
71
inline float DriveInterface::get_horizontal_ramp_down_time(void) const;

315 9 get_speed 0 4 512 25 DriveInterface::get_speed 0 1 57 278
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
51
inline float DriveInterface::get_speed(void) const;

316 13 get_rot_speed 0 4 512 29 DriveInterface::get_rot_speed 0 1 58 286
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
55
inline float DriveInterface::get_rot_speed(void) const;

317 5 reset 0 4 512 21 DriveInterface::reset 0 1 59 332
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
////////////////////////////////////////////////////////////////////
33
void DriveInterface::reset(void);

318 7 get_pos 0 4 512 23 DriveInterface::get_pos 0 1 60 280
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &DriveInterface::get_pos(void) const;

319 5 get_x 0 4 512 21 DriveInterface::get_x 0 1 61 0
47
inline float DriveInterface::get_x(void) const;

320 5 get_y 0 4 512 21 DriveInterface::get_y 0 1 62 0
47
inline float DriveInterface::get_y(void) const;

321 5 get_z 0 4 512 21 DriveInterface::get_z 0 1 63 0
47
inline float DriveInterface::get_z(void) const;

322 7 set_pos 0 4 512 23 DriveInterface::set_pos 0 2 64 65 259
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_pos(LVecBase3f const &vec);
inline void DriveInterface::set_pos(float x, float y, float z);

323 5 set_x 0 4 512 21 DriveInterface::set_x 0 1 66 0
43
inline void DriveInterface::set_x(float x);

324 5 set_y 0 4 512 21 DriveInterface::set_y 0 1 67 0
43
inline void DriveInterface::set_y(float y);

325 5 set_z 0 4 512 21 DriveInterface::set_z 0 1 68 0
43
inline void DriveInterface::set_z(float z);

326 7 get_hpr 0 4 512 23 DriveInterface::get_hpr 0 1 69 280
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &DriveInterface::get_hpr(void) const;

327 5 get_h 0 4 512 21 DriveInterface::get_h 0 1 70 0
47
inline float DriveInterface::get_h(void) const;

328 5 get_p 0 4 512 21 DriveInterface::get_p 0 1 71 0
47
inline float DriveInterface::get_p(void) const;

329 5 get_r 0 4 512 21 DriveInterface::get_r 0 1 72 0
47
inline float DriveInterface::get_r(void) const;

330 7 set_hpr 0 4 512 23 DriveInterface::set_hpr 0 2 73 74 262
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_hpr(LVecBase3f const &hpr);
inline void DriveInterface::set_hpr(float h, float p, float r);

331 5 set_h 0 4 512 21 DriveInterface::set_h 0 1 75 0
43
inline void DriveInterface::set_h(float h);

332 5 set_p 0 4 512 21 DriveInterface::set_p 0 1 76 0
43
inline void DriveInterface::set_p(float p);

333 5 set_r 0 4 512 21 DriveInterface::set_r 0 1 77 0
43
inline void DriveInterface::set_r(float r);

334 14 set_force_roll 0 4 512 30 DriveInterface::set_force_roll 0 1 78 322
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
////////////////////////////////////////////////////////////////////
54
void DriveInterface::set_force_roll(float force_roll);

335 16 set_ignore_mouse 0 4 512 32 DriveInterface::set_ignore_mouse 0 1 79 736
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_ignore_mouse(bool ignore_mouse);

336 16 get_ignore_mouse 0 4 512 32 DriveInterface::get_ignore_mouse 0 1 80 326
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
////////////////////////////////////////////////////////////////////
57
inline bool DriveInterface::get_ignore_mouse(void) const;

337 15 set_force_mouse 0 4 512 31 DriveInterface::set_force_mouse 0 1 81 406
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
////////////////////////////////////////////////////////////////////
62
inline void DriveInterface::set_force_mouse(bool force_mouse);

338 15 get_force_mouse 0 4 512 31 DriveInterface::get_force_mouse 0 1 82 323
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
////////////////////////////////////////////////////////////////////
56
inline bool DriveInterface::get_force_mouse(void) const;

339 19 set_stop_this_frame 0 4 512 35 DriveInterface::set_stop_this_frame 0 1 83 649
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
////////////////////////////////////////////////////////////////////
70
inline void DriveInterface::set_stop_this_frame(bool stop_this_frame);

340 19 get_stop_this_frame 0 4 512 35 DriveInterface::get_stop_this_frame 0 1 84 336
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
////////////////////////////////////////////////////////////////////
60
inline bool DriveInterface::get_stop_this_frame(void) const;

341 7 set_mat 0 4 512 23 DriveInterface::set_mat 0 1 85 276
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
////////////////////////////////////////////////////////////////////
51
void DriveInterface::set_mat(LMatrix4f const &mat);

342 7 get_mat 0 4 512 23 DriveInterface::get_mat 0 1 86 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
////////////////////////////////////////////////////////////////////
47
LMatrix4f const &DriveInterface::get_mat(void);

343 12 force_dgraph 0 4 512 28 DriveInterface::force_dgraph 0 1 87 558
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
////////////////////////////////////////////////////////////////////
40
void DriveInterface::force_dgraph(void);

344 14 get_class_type 0 4 512 30 DriveInterface::get_class_type 0 1 88 0
55
static TypeHandle DriveInterface::get_class_type(void);

345 14 MouseSubregion 0 4 513 30 MouseSubregion::MouseSubregion 0 1 89 223
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
MouseSubregion::MouseSubregion(basic_string< char > const &name);

346 8 get_left 0 4 513 24 MouseSubregion::get_left 0 1 90 869
// Filename: mouseSubregion.I
// Created by:  drose (13May05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float MouseSubregion::get_left(void) const;

347 9 get_right 0 4 513 25 MouseSubregion::get_right 0 1 91 381
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float MouseSubregion::get_right(void) const;

348 10 get_bottom 0 4 513 26 MouseSubregion::get_bottom 0 1 92 384
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
////////////////////////////////////////////////////////////////////
52
inline float MouseSubregion::get_bottom(void) const;

349 7 get_top 0 4 513 23 MouseSubregion::get_top 0 1 93 377
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float MouseSubregion::get_top(void) const;

350 14 set_dimensions 0 4 513 30 MouseSubregion::set_dimensions 0 1 94 583
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
////////////////////////////////////////////////////////////////////
79
inline void MouseSubregion::set_dimensions(float l, float r, float b, float t);

351 14 get_class_type 0 4 513 30 MouseSubregion::get_class_type 0 1 95 0
55
static TypeHandle MouseSubregion::get_class_type(void);

352 37 upcast_to_TypedWritableReferenceCount 0 12 514 57 MouseWatcherRegion::upcast_to_TypedWritableReferenceCount 0 1 114 61
upcast from MouseWatcherRegion to TypedWritableReferenceCount
93
TypedWritableReferenceCount *MouseWatcherRegion::upcast_to_TypedWritableReferenceCount(void);

353 30 downcast_to_MouseWatcherRegion 0 12 515 59 TypedWritableReferenceCount::downcast_to_MouseWatcherRegion 0 1 115 63
downcast from TypedWritableReferenceCount to MouseWatcherRegion
86
MouseWatcherRegion *TypedWritableReferenceCount::downcast_to_MouseWatcherRegion(void);

354 17 upcast_to_Namable 0 12 514 37 MouseWatcherRegion::upcast_to_Namable 0 1 116 41
upcast from MouseWatcherRegion to Namable
53
Namable *MouseWatcherRegion::upcast_to_Namable(void);

355 30 downcast_to_MouseWatcherRegion 0 12 516 39 Namable::downcast_to_MouseWatcherRegion 0 1 117 43
downcast from Namable to MouseWatcherRegion
66
MouseWatcherRegion *Namable::downcast_to_MouseWatcherRegion(void);

356 18 MouseWatcherRegion 0 4 514 38 MouseWatcherRegion::MouseWatcherRegion 0 2 96 97 956
// Filename: mouseWatcherRegion.I
// Created by:  drose (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
236
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, float left, float right, float bottom, float top);
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, LVecBase4f const &frame);

357 9 set_frame 0 4 514 29 MouseWatcherRegion::set_frame 0 2 98 99 458
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
160
inline void MouseWatcherRegion::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcherRegion::set_frame(LVecBase4f const &frame);

358 9 get_frame 0 4 514 29 MouseWatcherRegion::get_frame 0 1 100 228
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &MouseWatcherRegion::get_frame(void) const;

359 8 get_area 0 4 514 28 MouseWatcherRegion::get_area 0 1 101 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
////////////////////////////////////////////////////////////////////
54
inline float MouseWatcherRegion::get_area(void) const;

360 8 set_sort 0 4 514 28 MouseWatcherRegion::set_sort 0 1 102 672
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
////////////////////////////////////////////////////////////////////
51
inline void MouseWatcherRegion::set_sort(int sort);

361 8 get_sort 0 4 514 28 MouseWatcherRegion::get_sort 0 1 103 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
////////////////////////////////////////////////////////////////////
52
inline int MouseWatcherRegion::get_sort(void) const;

362 10 set_active 0 4 514 30 MouseWatcherRegion::set_active 0 1 104 515
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcherRegion::set_active(bool active);

363 10 get_active 0 4 514 30 MouseWatcherRegion::get_active 0 1 105 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
////////////////////////////////////////////////////////////////////
55
inline bool MouseWatcherRegion::get_active(void) const;

364 12 set_keyboard 0 4 514 32 MouseWatcherRegion::set_keyboard 0 1 106 598
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
////////////////////////////////////////////////////////////////////
60
inline void MouseWatcherRegion::set_keyboard(bool keyboard);

365 12 get_keyboard 0 4 514 32 MouseWatcherRegion::get_keyboard 0 1 107 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherRegion::get_keyboard(void) const;

366 18 set_suppress_flags 0 4 514 38 MouseWatcherRegion::set_suppress_flags 0 1 108 725
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcherRegion::set_suppress_flags(int suppress_flags);

367 18 get_suppress_flags 0 4 514 38 MouseWatcherRegion::get_suppress_flags 0 1 109 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
////////////////////////////////////////////////////////////////////
62
inline int MouseWatcherRegion::get_suppress_flags(void) const;

368 6 output 0 4 514 26 MouseWatcherRegion::output 0 1 110 225
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void MouseWatcherRegion::output(ostream &out) const;

369 5 write 0 4 514 25 MouseWatcherRegion::write 0 2 111 112 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
void MouseWatcherRegion::write(ostream &out, int indent_level = (0)) const;

370 14 get_class_type 0 4 514 34 MouseWatcherRegion::get_class_type 0 1 113 0
59
static TypeHandle MouseWatcherRegion::get_class_type(void);

371 19 ~MouseWatcherRegion 0 4 514 39 MouseWatcherRegion::~MouseWatcherRegion 0 0 0
46
MouseWatcherRegion::~MouseWatcherRegion(void);

372 24 upcast_to_ReferenceCount 0 12 518 43 MouseWatcherGroup::upcast_to_ReferenceCount 0 1 135 47
upcast from MouseWatcherGroup to ReferenceCount
66
ReferenceCount *MouseWatcherGroup::upcast_to_ReferenceCount(void);

373 18 ~MouseWatcherGroup 0 4 518 37 MouseWatcherGroup::~MouseWatcherGroup 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual MouseWatcherGroup::~MouseWatcherGroup(void);

374 10 add_region 0 4 518 29 MouseWatcherGroup::add_region 0 1 118 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
////////////////////////////////////////////////////////////////////
63
void MouseWatcherGroup::add_region(MouseWatcherRegion *region);

375 10 has_region 0 4 518 29 MouseWatcherGroup::has_region 0 1 119 348
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherGroup, false otherwise.
////////////////////////////////////////////////////////////////////
69
bool MouseWatcherGroup::has_region(MouseWatcherRegion *region) const;

376 13 remove_region 0 4 518 32 MouseWatcherGroup::remove_region 0 1 120 403
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
66
bool MouseWatcherGroup::remove_region(MouseWatcherRegion *region);

377 11 find_region 0 4 518 30 MouseWatcherGroup::find_region 0 1 121 417
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
////////////////////////////////////////////////////////////////////
91
MouseWatcherRegion *MouseWatcherGroup::find_region(basic_string< char > const &name) const;

378 13 clear_regions 0 4 518 32 MouseWatcherGroup::clear_regions 0 1 122 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
////////////////////////////////////////////////////////////////////
44
void MouseWatcherGroup::clear_regions(void);

379 12 sort_regions 0 4 518 31 MouseWatcherGroup::sort_regions 0 1 123 303
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
////////////////////////////////////////////////////////////////////
43
void MouseWatcherGroup::sort_regions(void);

380 9 is_sorted 0 4 518 28 MouseWatcherGroup::is_sorted 0 1 124 312
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
////////////////////////////////////////////////////////////////////
46
bool MouseWatcherGroup::is_sorted(void) const;

381 15 get_num_regions 0 4 518 34 MouseWatcherGroup::get_num_regions 0 1 125 277
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
////////////////////////////////////////////////////////////////////
51
int MouseWatcherGroup::get_num_regions(void) const;

382 10 get_region 0 4 518 29 MouseWatcherGroup::get_region 0 1 126 472
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
////////////////////////////////////////////////////////////////////
63
MouseWatcherRegion *MouseWatcherGroup::get_region(int n) const;

383 6 output 0 4 518 25 MouseWatcherGroup::output 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
void MouseWatcherGroup::output(ostream &out) const;

384 5 write 0 4 518 24 MouseWatcherGroup::write 0 2 128 129 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void MouseWatcherGroup::write(ostream &out, int indent_level = (0)) const;

385 12 show_regions 0 4 518 31 MouseWatcherGroup::show_regions 0 1 130 445
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherGroup.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
////////////////////////////////////////////////////////////////////
117
void MouseWatcherGroup::show_regions(NodePath const &render2d, basic_string< char > const &bin_name, int draw_order);

386 9 set_color 0 4 518 28 MouseWatcherGroup::set_color 0 1 131 362
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
////////////////////////////////////////////////////////////////////
59
void MouseWatcherGroup::set_color(LVecBase4f const &color);

387 12 hide_regions 0 4 518 31 MouseWatcherGroup::hide_regions 0 1 132 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
////////////////////////////////////////////////////////////////////
43
void MouseWatcherGroup::hide_regions(void);

388 14 update_regions 0 4 518 33 MouseWatcherGroup::update_regions 0 1 133 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
////////////////////////////////////////////////////////////////////
45
void MouseWatcherGroup::update_regions(void);

389 14 get_class_type 0 4 518 33 MouseWatcherGroup::get_class_type 0 1 134 0
58
static TypeHandle MouseWatcherGroup::get_class_type(void);

390 18 upcast_to_DataNode 0 12 520 32 MouseWatcher::upcast_to_DataNode 0 1 199 36
upcast from MouseWatcher to DataNode
49
DataNode *MouseWatcher::upcast_to_DataNode(void);

391 24 downcast_to_MouseWatcher 0 12 510 34 DataNode::downcast_to_MouseWatcher 0 1 200 38
downcast from DataNode to MouseWatcher
55
MouseWatcher *DataNode::downcast_to_MouseWatcher(void);

392 27 upcast_to_MouseWatcherGroup 0 12 520 41 MouseWatcher::upcast_to_MouseWatcherGroup 0 1 201 45
upcast from MouseWatcher to MouseWatcherGroup
67
MouseWatcherGroup *MouseWatcher::upcast_to_MouseWatcherGroup(void);

393 24 downcast_to_MouseWatcher 0 12 518 43 MouseWatcherGroup::downcast_to_MouseWatcher 0 1 202 47
downcast from MouseWatcherGroup to MouseWatcher
64
MouseWatcher *MouseWatcherGroup::downcast_to_MouseWatcher(void);

394 12 MouseWatcher 0 4 520 26 MouseWatcher::MouseWatcher 0 2 136 137 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
MouseWatcher::MouseWatcher(basic_string< char > const &name = (""));

395 13 ~MouseWatcher 0 4 520 27 MouseWatcher::~MouseWatcher 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual MouseWatcher::~MouseWatcher(void);

396 13 remove_region 0 4 520 27 MouseWatcher::remove_region 0 1 138 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
61
bool MouseWatcher::remove_region(MouseWatcherRegion *region);

397 9 has_mouse 0 4 520 23 MouseWatcher::has_mouse 0 1 139 828
// Filename: mouseWatcher.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
////////////////////////////////////////////////////////////////////
48
inline bool MouseWatcher::has_mouse(void) const;

398 13 is_mouse_open 0 4 520 27 MouseWatcher::is_mouse_open 0 1 140 473
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
////////////////////////////////////////////////////////////////////
52
inline bool MouseWatcher::is_mouse_open(void) const;

399 9 get_mouse 0 4 520 23 MouseWatcher::get_mouse 0 1 141 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
59
inline LPoint2f const &MouseWatcher::get_mouse(void) const;

400 11 get_mouse_x 0 4 520 25 MouseWatcher::get_mouse_x 0 1 142 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_x(void) const;

401 11 get_mouse_y 0 4 520 25 MouseWatcher::get_mouse_y 0 1 143 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_y(void) const;

402 9 set_frame 0 4 520 23 MouseWatcher::set_frame 0 2 144 145 1273
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
////////////////////////////////////////////////////////////////////
148
inline void MouseWatcher::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcher::set_frame(LVecBase4f const &frame);

403 9 get_frame 0 4 520 23 MouseWatcher::get_frame 0 1 146 296
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f const &MouseWatcher::get_frame(void) const;

404 14 is_over_region 0 4 520 28 MouseWatcher::is_over_region 0 3 147 148 149 961
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////
188
inline bool MouseWatcher::is_over_region(void) const;
inline bool MouseWatcher::is_over_region(float x, float y) const;
inline bool MouseWatcher::is_over_region(LPoint2f const &pos) const;

405 15 get_over_region 0 4 520 29 MouseWatcher::get_over_region 0 3 150 151 152 1187
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
////////////////////////////////////////////////////////////////////
229
inline MouseWatcherRegion *MouseWatcher::get_over_region(void) const;
inline MouseWatcherRegion *MouseWatcher::get_over_region(float x, float y) const;
MouseWatcherRegion *MouseWatcher::get_over_region(LPoint2f const &pos) const;

406 14 is_button_down 0 4 520 28 MouseWatcher::is_button_down 0 1 153 328
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool MouseWatcher::is_button_down(ButtonHandle button) const;

407 23 set_button_down_pattern 0 4 520 37 MouseWatcher::set_button_down_pattern 0 1 154 762
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
87
inline void MouseWatcher::set_button_down_pattern(basic_string< char > const &pattern);

408 23 get_button_down_pattern 0 4 520 37 MouseWatcher::get_button_down_pattern 0 1 155 394
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &MouseWatcher::get_button_down_pattern(void) const;

409 21 set_button_up_pattern 0 4 520 35 MouseWatcher::set_button_up_pattern 0 1 156 400
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline void MouseWatcher::set_button_up_pattern(basic_string< char > const &pattern);

410 21 get_button_up_pattern 0 4 520 35 MouseWatcher::get_button_up_pattern 0 1 157 391
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &MouseWatcher::get_button_up_pattern(void) const;

411 25 set_button_repeat_pattern 0 4 520 39 MouseWatcher::set_button_repeat_pattern 0 1 158 827
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
89
inline void MouseWatcher::set_button_repeat_pattern(basic_string< char > const &pattern);

412 25 get_button_repeat_pattern 0 4 520 39 MouseWatcher::get_button_repeat_pattern 0 1 159 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > const &MouseWatcher::get_button_repeat_pattern(void) const;

413 17 set_enter_pattern 0 4 520 31 MouseWatcher::set_enter_pattern 0 1 160 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_enter_pattern(basic_string< char > const &pattern);

414 17 get_enter_pattern 0 4 520 31 MouseWatcher::get_enter_pattern 0 1 161 559
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_enter_pattern(void) const;

415 17 set_leave_pattern 0 4 520 31 MouseWatcher::set_leave_pattern 0 1 162 585
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_leave_pattern(basic_string< char > const &pattern);

416 17 get_leave_pattern 0 4 520 31 MouseWatcher::get_leave_pattern 0 1 163 560
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_leave_pattern(void) const;

417 18 set_within_pattern 0 4 520 32 MouseWatcher::set_within_pattern 0 1 164 591
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
82
inline void MouseWatcher::set_within_pattern(basic_string< char > const &pattern);

418 18 get_within_pattern 0 4 520 32 MouseWatcher::get_within_pattern 0 1 165 565
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &MouseWatcher::get_within_pattern(void) const;

419 19 set_without_pattern 0 4 520 33 MouseWatcher::set_without_pattern 0 1 166 594
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
83
inline void MouseWatcher::set_without_pattern(basic_string< char > const &pattern);

420 19 get_without_pattern 0 4 520 33 MouseWatcher::get_without_pattern 0 1 167 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > const &MouseWatcher::get_without_pattern(void) const;

421 12 set_geometry 0 4 520 26 MouseWatcher::set_geometry 0 1 168 553
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcher::set_geometry(PandaNode *node);

422 12 has_geometry 0 4 520 26 MouseWatcher::has_geometry 0 1 169 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
////////////////////////////////////////////////////////////////////
51
inline bool MouseWatcher::has_geometry(void) const;

423 12 get_geometry 0 4 520 26 MouseWatcher::get_geometry 0 1 170 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
////////////////////////////////////////////////////////////////////
57
inline PandaNode *MouseWatcher::get_geometry(void) const;

424 14 clear_geometry 0 4 520 28 MouseWatcher::clear_geometry 0 1 171 308
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
////////////////////////////////////////////////////////////////////
47
inline void MouseWatcher::clear_geometry(void);

425 17 set_extra_handler 0 4 520 31 MouseWatcher::set_extra_handler 0 1 172 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
62
inline void MouseWatcher::set_extra_handler(EventHandler *eh);

426 17 get_extra_handler 0 4 520 31 MouseWatcher::get_extra_handler 0 1 173 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
65
inline EventHandler *MouseWatcher::get_extra_handler(void) const;

427 20 set_modifier_buttons 0 4 520 34 MouseWatcher::set_modifier_buttons 0 1 174 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_modifier_buttons(ModifierButtons const &mods);

428 20 get_modifier_buttons 0 4 520 34 MouseWatcher::get_modifier_buttons 0 1 175 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
////////////////////////////////////////////////////////////////////
70
inline ModifierButtons MouseWatcher::get_modifier_buttons(void) const;

429 18 set_display_region 0 4 520 32 MouseWatcher::set_display_region 0 1 176 743
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
////////////////////////////////////////////////////////////////////
64
inline void MouseWatcher::set_display_region(DisplayRegion *dr);

430 20 clear_display_region 0 4 520 34 MouseWatcher::clear_display_region 0 1 177 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
////////////////////////////////////////////////////////////////////
53
inline void MouseWatcher::clear_display_region(void);

431 18 get_display_region 0 4 520 32 MouseWatcher::get_display_region 0 1 178 386
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
////////////////////////////////////////////////////////////////////
67
inline DisplayRegion *MouseWatcher::get_display_region(void) const;

432 18 has_display_region 0 4 520 32 MouseWatcher::has_display_region 0 1 179 525
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcher::has_display_region(void) const;

433 9 add_group 0 4 520 23 MouseWatcher::add_group 0 1 180 841
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherGroup, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
////////////////////////////////////////////////////////////////////
55
bool MouseWatcher::add_group(MouseWatcherGroup *group);

434 12 remove_group 0 4 520 26 MouseWatcher::remove_group 0 1 181 474
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
////////////////////////////////////////////////////////////////////
58
bool MouseWatcher::remove_group(MouseWatcherGroup *group);

435 13 replace_group 0 4 520 27 MouseWatcher::replace_group 0 1 182 665
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
////////////////////////////////////////////////////////////////////
93
bool MouseWatcher::replace_group(MouseWatcherGroup *old_group, MouseWatcherGroup *new_group);

436 14 get_num_groups 0 4 520 28 MouseWatcher::get_num_groups 0 1 183 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
////////////////////////////////////////////////////////////////////
45
int MouseWatcher::get_num_groups(void) const;

437 9 get_group 0 4 520 23 MouseWatcher::get_group 0 1 184 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
////////////////////////////////////////////////////////////////////
56
MouseWatcherGroup *MouseWatcher::get_group(int n) const;

438 22 set_inactivity_timeout 0 4 520 36 MouseWatcher::set_inactivity_timeout 0 1 185 822
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
////////////////////////////////////////////////////////////////////
65
inline void MouseWatcher::set_inactivity_timeout(double timeout);

439 22 has_inactivity_timeout 0 4 520 36 MouseWatcher::has_inactivity_timeout 0 1 186 321
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcher::has_inactivity_timeout(void) const;

440 22 get_inactivity_timeout 0 4 520 36 MouseWatcher::get_inactivity_timeout 0 1 187 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
////////////////////////////////////////////////////////////////////
63
inline double MouseWatcher::get_inactivity_timeout(void) const;

441 24 clear_inactivity_timeout 0 4 520 38 MouseWatcher::clear_inactivity_timeout 0 1 188 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
////////////////////////////////////////////////////////////////////
57
inline void MouseWatcher::clear_inactivity_timeout(void);

442 28 set_inactivity_timeout_event 0 4 520 42 MouseWatcher::set_inactivity_timeout_event 0 1 189 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline void MouseWatcher::set_inactivity_timeout_event(basic_string< char > const &event);

443 28 get_inactivity_timeout_event 0 4 520 42 MouseWatcher::get_inactivity_timeout_event 0 1 190 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > const &MouseWatcher::get_inactivity_timeout_event(void) const;

444 13 get_trail_log 0 4 520 27 MouseWatcher::get_trail_log 0 1 191 713
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////
82
inline ConstPointerTo< PointerEventList > MouseWatcher::get_trail_log(void) const;

445 16 num_trail_recent 0 4 520 30 MouseWatcher::num_trail_recent 0 1 192 440
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
////////////////////////////////////////////////////////////////////
54
inline int MouseWatcher::num_trail_recent(void) const;

446 22 set_trail_log_duration 0 4 520 36 MouseWatcher::set_trail_log_duration 0 1 193 468
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
////////////////////////////////////////////////////////////////////
59
void MouseWatcher::set_trail_log_duration(double duration);

447 14 get_trail_node 0 4 520 28 MouseWatcher::get_trail_node 0 1 194 999
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
////////////////////////////////////////////////////////////////////
57
PointerTo< GeomNode > MouseWatcher::get_trail_node(void);

448 16 clear_trail_node 0 4 520 30 MouseWatcher::clear_trail_node 0 1 195 533
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
////////////////////////////////////////////////////////////////////
42
void MouseWatcher::clear_trail_node(void);

449 15 clear_trail_log 0 4 520 29 MouseWatcher::clear_trail_log 0 1 196 349
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
////////////////////////////////////////////////////////////////////
48
inline void MouseWatcher::clear_trail_log(void);

450 13 note_activity 0 4 520 27 MouseWatcher::note_activity 0 1 197 951
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
////////////////////////////////////////////////////////////////////
39
void MouseWatcher::note_activity(void);

451 14 get_class_type 0 4 520 28 MouseWatcher::get_class_type 0 1 198 0
53
static TypeHandle MouseWatcher::get_class_type(void);

452 22 ~MouseWatcherParameter 0 4 521 45 MouseWatcherParameter::~MouseWatcherParameter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline MouseWatcherParameter::~MouseWatcherParameter(void);

453 10 has_button 0 4 521 33 MouseWatcherParameter::has_button 0 1 203 341
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::has_button(void) const;

454 10 get_button 0 4 521 33 MouseWatcherParameter::get_button 0 1 204 406
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
66
inline ButtonHandle MouseWatcherParameter::get_button(void) const;

455 12 is_keyrepeat 0 4 521 35 MouseWatcherParameter::is_keyrepeat 0 1 205 381
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
////////////////////////////////////////////////////////////////////
60
inline bool MouseWatcherParameter::is_keyrepeat(void) const;

456 11 has_keycode 0 4 521 34 MouseWatcherParameter::has_keycode 0 1 206 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool MouseWatcherParameter::has_keycode(void) const;

457 11 get_keycode 0 4 521 34 MouseWatcherParameter::get_keycode 0 1 207 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
////////////////////////////////////////////////////////////////////
58
inline int MouseWatcherParameter::get_keycode(void) const;

458 13 has_candidate 0 4 521 36 MouseWatcherParameter::has_candidate 0 1 208 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcherParameter::has_candidate(void) const;

459 28 get_candidate_string_encoded 0 4 521 51 MouseWatcherParameter::get_candidate_string_encoded 0 2 209 210 832
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////
211
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(void) const;
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(TextEncoder::Encoding encoding) const;

460 19 get_highlight_start 0 4 521 42 MouseWatcherParameter::get_highlight_start 0 1 211 323
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
////////////////////////////////////////////////////////////////////
75
inline unsigned int MouseWatcherParameter::get_highlight_start(void) const;

461 17 get_highlight_end 0 4 521 40 MouseWatcherParameter::get_highlight_end 0 1 212 334
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
////////////////////////////////////////////////////////////////////
73
inline unsigned int MouseWatcherParameter::get_highlight_end(void) const;

462 14 get_cursor_pos 0 4 521 37 MouseWatcherParameter::get_cursor_pos 0 1 213 329
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
////////////////////////////////////////////////////////////////////
70
inline unsigned int MouseWatcherParameter::get_cursor_pos(void) const;

463 20 get_modifier_buttons 0 4 521 43 MouseWatcherParameter::get_modifier_buttons 0 1 214 352
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
////////////////////////////////////////////////////////////////////
86
inline ModifierButtons const &MouseWatcherParameter::get_modifier_buttons(void) const;

464 9 has_mouse 0 4 521 32 MouseWatcherParameter::has_mouse 0 1 215 330
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherParameter::has_mouse(void) const;

465 9 get_mouse 0 4 521 32 MouseWatcherParameter::get_mouse 0 1 216 425
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
////////////////////////////////////////////////////////////////////
68
inline LPoint2f const &MouseWatcherParameter::get_mouse(void) const;

466 10 is_outside 0 4 521 33 MouseWatcherParameter::is_outside 0 1 217 415
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::is_outside(void) const;

467 6 output 0 4 521 29 MouseWatcherParameter::output 0 1 218 229
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void MouseWatcherParameter::output(ostream &out) const;

468 9 Trackball 0 4 522 20 Trackball::Trackball 0 1 219 218
////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
Trackball::Trackball(basic_string< char > const &name);

469 5 reset 0 4 522 16 Trackball::reset 0 1 220 257
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
////////////////////////////////////////////////////////////////////
28
void Trackball::reset(void);

470 17 get_forward_scale 0 4 522 28 Trackball::get_forward_scale 0 1 221 335
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
////////////////////////////////////////////////////////////////////
47
float Trackball::get_forward_scale(void) const;

471 17 set_forward_scale 0 4 522 28 Trackball::set_forward_scale 0 1 222 435
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
////////////////////////////////////////////////////////////////////
50
void Trackball::set_forward_scale(float fwdscale);

472 7 get_pos 0 4 522 18 Trackball::get_pos 0 1 223 291
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
////////////////////////////////////////////////////////////////////
47
LPoint3f const &Trackball::get_pos(void) const;

473 5 get_x 0 4 522 16 Trackball::get_x 0 1 224 0
35
float Trackball::get_x(void) const;

474 5 get_y 0 4 522 16 Trackball::get_y 0 1 225 0
35
float Trackball::get_y(void) const;

475 5 get_z 0 4 522 16 Trackball::get_z 0 1 226 0
35
float Trackball::get_z(void) const;

476 7 set_pos 0 4 522 18 Trackball::set_pos 0 2 227 228 269
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_pos(LVecBase3f const &vec);
void Trackball::set_pos(float x, float y, float z);

477 5 set_x 0 4 522 16 Trackball::set_x 0 1 229 0
31
void Trackball::set_x(float x);

478 5 set_y 0 4 522 16 Trackball::set_y 0 1 230 0
31
void Trackball::set_y(float y);

479 5 set_z 0 4 522 16 Trackball::set_z 0 1 231 0
31
void Trackball::set_z(float z);

480 7 get_hpr 0 4 522 18 Trackball::get_hpr 0 1 232 277
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
////////////////////////////////////////////////////////////////////
42
LVecBase3f Trackball::get_hpr(void) const;

481 5 get_h 0 4 522 16 Trackball::get_h 0 1 233 0
35
float Trackball::get_h(void) const;

482 5 get_p 0 4 522 16 Trackball::get_p 0 1 234 0
35
float Trackball::get_p(void) const;

483 5 get_r 0 4 522 16 Trackball::get_r 0 1 235 0
35
float Trackball::get_r(void) const;

484 7 set_hpr 0 4 522 18 Trackball::set_hpr 0 2 236 237 255
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_hpr(LVecBase3f const &hpr);
void Trackball::set_hpr(float h, float p, float r);

485 5 set_h 0 4 522 16 Trackball::set_h 0 1 238 0
31
void Trackball::set_h(float h);

486 5 set_p 0 4 522 16 Trackball::set_p 0 1 239 0
31
void Trackball::set_p(float p);

487 5 set_r 0 4 522 16 Trackball::set_r 0 1 240 0
31
void Trackball::set_r(float r);

488 17 reset_origin_here 0 4 522 28 Trackball::reset_origin_here 0 1 241 430
/// **** Origin of Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
////////////////////////////////////////////////////////////////////
40
void Trackball::reset_origin_here(void);

489 11 move_origin 0 4 522 22 Trackball::move_origin 0 1 242 271
////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
////////////////////////////////////////////////////////////////////
55
void Trackball::move_origin(float x, float y, float z);

490 10 get_origin 0 4 522 21 Trackball::get_origin 0 1 243 260
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
////////////////////////////////////////////////////////////////////
43
LPoint3f Trackball::get_origin(void) const;

491 10 set_origin 0 4 522 21 Trackball::set_origin 0 1 244 258
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
////////////////////////////////////////////////////////////////////
53
void Trackball::set_origin(LVecBase3f const &origin);

492 16 set_control_mode 0 4 522 27 Trackball::set_control_mode 0 1 245 654
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
////////////////////////////////////////////////////////////////////
70
void Trackball::set_control_mode(Trackball::ControlMode control_mode);

493 16 get_control_mode 0 4 522 27 Trackball::get_control_mode 0 1 246 277
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
////////////////////////////////////////////////////////////////////
63
Trackball::ControlMode Trackball::get_control_mode(void) const;

494 10 set_invert 0 4 522 21 Trackball::set_invert 0 1 247 403
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
38
void Trackball::set_invert(bool flag);

495 10 get_invert 0 4 522 21 Trackball::get_invert 0 1 248 406
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
39
bool Trackball::get_invert(void) const;

496 10 set_rel_to 0 4 522 21 Trackball::set_rel_to 0 1 249 561
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
////////////////////////////////////////////////////////////////////
51
void Trackball::set_rel_to(NodePath const &rel_to);

497 10 get_rel_to 0 4 522 21 Trackball::get_rel_to 0 1 250 327
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
////////////////////////////////////////////////////////////////////
50
NodePath const &Trackball::get_rel_to(void) const;

498 21 set_coordinate_system 0 4 522 32 Trackball::set_coordinate_system 0 1 251 524
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
////////////////////////////////////////////////////////////////////
59
void Trackball::set_coordinate_system(CoordinateSystem cs);

499 21 get_coordinate_system 0 4 522 32 Trackball::get_coordinate_system 0 1 252 325
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
////////////////////////////////////////////////////////////////////
62
CoordinateSystem Trackball::get_coordinate_system(void) const;

500 7 set_mat 0 4 522 18 Trackball::set_mat 0 1 253 368
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
////////////////////////////////////////////////////////////////////
46
void Trackball::set_mat(LMatrix4f const &mat);

501 7 get_mat 0 4 522 18 Trackball::get_mat 0 1 254 292
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Trackball::get_mat(void) const;

502 13 get_trans_mat 0 4 522 24 Trackball::get_trans_mat 0 1 255 387
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
////////////////////////////////////////////////////////////////////
54
LMatrix4f const &Trackball::get_trans_mat(void) const;

503 14 get_class_type 0 4 522 25 Trackball::get_class_type 0 1 256 0
50
static TypeHandle Trackball::get_class_type(void);

504 12 Transform2SG 0 4 524 26 Transform2SG::Transform2SG 0 1 257 221
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
Transform2SG::Transform2SG(basic_string< char > const &name);

505 8 set_node 0 4 524 22 Transform2SG::set_node 0 1 258 262
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
////////////////////////////////////////////////////////////////////
45
void Transform2SG::set_node(PandaNode *node);

506 8 get_node 0 4 524 22 Transform2SG::get_node 0 1 259 324
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
////////////////////////////////////////////////////////////////////
46
PandaNode *Transform2SG::get_node(void) const;

507 14 get_class_type 0 4 524 28 Transform2SG::get_class_type 0 1 260 0
53
static TypeHandle Transform2SG::get_class_type(void);

508 13 ~Transform2SG 0 4 524 27 Transform2SG::~Transform2SG 0 0 0
34
Transform2SG::~Transform2SG(void);

260
1 14 Dtool_v_mBk4xy 0 7 3 526 0 14 Dtool_v_mBk4xy 222 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
2 14 Dtool_v_mBgXgW 0 4 4 527 0 14 Dtool_v_mBgXgW 1356 // Filename: buttonThrower.I
// Created by:  drose (26Dec03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  17 button_down_event 1 525  
3 14 Dtool_v_mBarVA 0 6 5 525 0 14 Dtool_v_mBarVA 353 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
4 14 Dtool_v_mBI2Hn 0 4 6 527 0 14 Dtool_v_mBI2Hn 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  15 button_up_event 1 525  
5 14 Dtool_v_mBz4X5 0 6 7 525 0 14 Dtool_v_mBz4X5 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
6 14 Dtool_v_mBrSEu 0 4 8 527 0 14 Dtool_v_mBrSEu 875 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  19 button_repeat_event 1 525  
7 14 Dtool_v_mBzthZ 0 6 9 525 0 14 Dtool_v_mBzthZ 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
8 14 Dtool_v_mB_Oot 0 4 10 527 0 14 Dtool_v_mB_Oot 1304 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  15 keystroke_event 1 525  
9 14 Dtool_v_mB1s5_ 0 6 11 525 0 14 Dtool_v_mB1s5_ 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
10 14 Dtool_v_mBzQU_ 0 4 12 527 0 14 Dtool_v_mBzQU_ 1252 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  15 candidate_event 1 525  
11 14 Dtool_v_mBtajR 0 6 13 525 0 14 Dtool_v_mBtajR 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
12 14 Dtool_v_mBn2SG 0 4 14 527 0 14 Dtool_v_mBn2SG 340 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  10 move_event 1 525  
13 14 Dtool_v_mBsPhu 0 6 15 525 0 14 Dtool_v_mBsPhu 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
14 14 Dtool_v_mB8tb8 0 4 16 527 0 14 Dtool_v_mB8tb8 505 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  6 prefix 1 525  
15 14 Dtool_v_mB3m_a 0 6 17 525 0 14 Dtool_v_mB3m_a 320 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
16 14 Dtool_v_mBmYQj 0 4 18 527 0 14 Dtool_v_mBmYQj 604 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  13 specific_flag 1 530  
17 14 Dtool_v_mBpjBE 0 6 19 530 0 14 Dtool_v_mBpjBE 351 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
18 14 Dtool_v_mBY3F7 0 4 20 527 0 14 Dtool_v_mBY3F7 720 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  9 time_flag 1 530  
19 14 Dtool_v_mBWTVj 0 6 21 530 0 14 Dtool_v_mBWTVj 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
20 14 Dtool_v_mBHaR_ 0 4 22 527 0 14 Dtool_v_mBHaR_ 382 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  3 obj 1 531  
21 14 Dtool_v_mBbj99 0 6 23 534 0 14 Dtool_v_mBbj99 405 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
22 14 Dtool_v_mBamFl 0 7 24 535 0 14 Dtool_v_mBamFl 386 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  1 n 1 534  
23 14 Dtool_v_mBGlsX 0 6 25 536 0 14 Dtool_v_mBGlsX 808 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
24 14 Dtool_v_mB7l_D 0 4 26 527 0 14 Dtool_v_mB7l_D 1054 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  4 mods 1 536  
25 14 Dtool_v_mBuTqR 0 4 27 527 0 14 Dtool_v_mBuTqR 597 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  4 flag 1 530  
26 14 Dtool_v_mB5I8a 0 6 28 530 0 14 Dtool_v_mB5I8a 446 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
27 14 Dtool_v_mBJi9T 0 6 29 530 0 14 Dtool_v_mBJi9T 1056 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 526  4 mods 1 536  6 button 1 539  
28 14 Dtool_v_mBpsxI 0 6 30 530 0 14 Dtool_v_mBpsxI 513 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 526  4 mods 1 536  6 button 1 539  
29 14 Dtool_v_mBUvSd 0 6 31 530 0 14 Dtool_v_mBUvSd 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 button 1 539  
30 14 Dtool_v_mBcX_g 0 6 31 530 0 14 Dtool_v_mBcX_g 413 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  4 mods 1 536  6 button 1 539  
31 14 Dtool_v_mBMSSv 0 4 32 527 0 14 Dtool_v_mBMSSv 342 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
32 14 Dtool_v_mBmOhU 0 7 33 543 0 14 Dtool_v_mBmOhU 0 0 
33 14 Dtool_v_mBslm1 0 4 35 527 0 14 Dtool_v_mBslm1 589 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
//////////////////////////////////////////////////////////////////// 3 4 this 3 544  6 button 1 539  7 is_down 1 530  
34 14 Dtool_v_mBzD5_ 0 4 36 527 0 14 Dtool_v_mBzD5_ 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  6 button 1 539  
35 14 Dtool_v_mBP5gT 0 4 37 527 0 14 Dtool_v_mBP5gT 332 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
36 14 Dtool_v_mB23QH 0 7 38 543 0 14 Dtool_v_mB23QH 0 0 
37 14 Dtool_v_mBqXDJ 0 7 40 545 0 14 Dtool_v_mBqXDJ 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
38 14 Dtool_v_mBIz9n 0 7 40 545 0 14 Dtool_v_mBIz9n 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
39 14 Dtool_v_mBKTpq 0 4 41 527 0 14 Dtool_v_mBKTpq 886 // Filename: driveInterface.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  5 speed 1 546  
40 14 Dtool_v_mBfKJb 0 6 42 546 0 14 Dtool_v_mBfKJb 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
41 14 Dtool_v_mB924G 0 4 43 527 0 14 Dtool_v_mB924G 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  5 speed 1 546  
42 14 Dtool_v_mBsNX3 0 6 44 546 0 14 Dtool_v_mBsNX3 402 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
43 14 Dtool_v_mBMuQt 0 4 45 527 0 14 Dtool_v_mBMuQt 413 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  5 speed 1 546  
44 14 Dtool_v_mB82Ba 0 6 46 546 0 14 Dtool_v_mB82Ba 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
45 14 Dtool_v_mB_K6o 0 4 47 527 0 14 Dtool_v_mB_K6o 603 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  4 zone 1 546  
46 14 Dtool_v_mBWqfE 0 6 48 546 0 14 Dtool_v_mBWqfE 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
47 14 Dtool_v_mByXFf 0 4 49 527 0 14 Dtool_v_mByXFf 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  4 zone 1 546  
48 14 Dtool_v_mBh_JJ 0 6 50 546 0 14 Dtool_v_mBh_JJ 609 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
49 14 Dtool_v_mBaQ8o 0 4 51 527 0 14 Dtool_v_mBaQ8o 431 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  12 ramp_up_time 1 546  
50 14 Dtool_v_mBq_RD 0 6 52 546 0 14 Dtool_v_mBq_RD 451 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
51 14 Dtool_v_mBkWik 0 4 53 527 0 14 Dtool_v_mBkWik 412 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  14 ramp_down_time 1 546  
52 14 Dtool_v_mBi7QW 0 6 54 546 0 14 Dtool_v_mBi7QW 415 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
53 14 Dtool_v_mB61dH 0 4 55 527 0 14 Dtool_v_mB61dH 417 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  12 ramp_up_time 1 546  
54 14 Dtool_v_mBNIM5 0 6 56 546 0 14 Dtool_v_mBNIM5 420 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
55 14 Dtool_v_mB2qn5 0 4 57 527 0 14 Dtool_v_mB2qn5 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  14 ramp_down_time 1 546  
56 14 Dtool_v_mBACXI 0 6 58 546 0 14 Dtool_v_mBACXI 419 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
57 14 Dtool_v_mBv7hx 0 6 59 546 0 14 Dtool_v_mBv7hx 278 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
58 14 Dtool_v_mBQzD6 0 6 60 546 0 14 Dtool_v_mBQzD6 286 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
59 14 Dtool_v_mBKbcV 0 4 61 527 0 14 Dtool_v_mBKbcV 332 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 545  
60 14 Dtool_v_mBdmzH 0 6 62 549 0 14 Dtool_v_mBdmzH 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
61 14 Dtool_v_mBBRV2 0 6 63 546 0 14 Dtool_v_mBBRV2 0 1 4 this 3 547  
62 14 Dtool_v_mBRvo2 0 6 64 546 0 14 Dtool_v_mBRvo2 0 1 4 this 3 547  
63 14 Dtool_v_mBhN82 0 6 65 546 0 14 Dtool_v_mBhN82 0 1 4 this 3 547  
64 14 Dtool_v_mBAmwj 0 4 66 527 0 14 Dtool_v_mBAmwj 259 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  3 vec 1 552  
65 14 Dtool_v_mBjVcP 0 4 66 527 0 14 Dtool_v_mBjVcP 0 4 4 this 3 545  1 x 1 546  1 y 1 546  1 z 1 546  
66 14 Dtool_v_mBpTmn 0 4 67 527 0 14 Dtool_v_mBpTmn 0 2 4 this 3 545  1 x 1 546  
67 14 Dtool_v_mBZx6n 0 4 68 527 0 14 Dtool_v_mBZx6n 0 2 4 this 3 545  1 y 1 546  
68 14 Dtool_v_mBJXNo 0 4 69 527 0 14 Dtool_v_mBJXNo 0 2 4 this 3 545  1 z 1 546  
69 14 Dtool_v_mBY8sW 0 6 70 552 0 14 Dtool_v_mBY8sW 256 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
70 14 Dtool_v_mBBtcx 0 6 71 546 0 14 Dtool_v_mBBtcx 0 1 4 this 3 547  
71 14 Dtool_v_mBBf5z 0 6 72 546 0 14 Dtool_v_mBBf5z 0 1 4 this 3 547  
72 14 Dtool_v_mBhbg0 0 6 73 546 0 14 Dtool_v_mBhbg0 0 1 4 this 3 547  
73 14 Dtool_v_mBFcoy 0 4 74 527 0 14 Dtool_v_mBFcoy 262 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  3 hpr 1 552  
74 14 Dtool_v_mB4DVe 0 4 74 527 0 14 Dtool_v_mB4DVe 0 4 4 this 3 545  1 h 1 546  1 p 1 546  1 r 1 546  
75 14 Dtool_v_mBp3ui 0 4 75 527 0 14 Dtool_v_mBp3ui 0 2 4 this 3 545  1 h 1 546  
76 14 Dtool_v_mBpBKl 0 4 76 527 0 14 Dtool_v_mBpBKl 0 2 4 this 3 545  1 p 1 546  
77 14 Dtool_v_mBJFxl 0 4 77 527 0 14 Dtool_v_mBJFxl 0 2 4 this 3 545  1 r 1 546  
78 14 Dtool_v_mBI1Ry 0 4 78 527 0 14 Dtool_v_mBI1Ry 322 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  10 force_roll 1 546  
79 14 Dtool_v_mBsn9J 0 4 79 527 0 14 Dtool_v_mBsn9J 736 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  12 ignore_mouse 1 530  
80 14 Dtool_v_mBHO_x 0 6 80 530 0 14 Dtool_v_mBHO_x 326 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
81 14 Dtool_v_mBpmA_ 0 4 81 527 0 14 Dtool_v_mBpmA_ 406 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  11 force_mouse 1 530  
82 14 Dtool_v_mBlWhe 0 6 82 530 0 14 Dtool_v_mBlWhe 323 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
83 14 Dtool_v_mBxaMx 0 4 83 527 0 14 Dtool_v_mBxaMx 649 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  15 stop_this_frame 1 530  
84 14 Dtool_v_mBjdTo 0 6 84 530 0 14 Dtool_v_mBjdTo 336 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
85 14 Dtool_v_mBTToo 0 4 85 527 0 14 Dtool_v_mBTToo 276 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  3 mat 1 555  
86 14 Dtool_v_mBoJtK 0 6 86 555 0 14 Dtool_v_mBoJtK 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 545  
87 14 Dtool_v_mBQ2Wr 0 4 87 527 0 14 Dtool_v_mBQ2Wr 558 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 545  
88 14 Dtool_v_mB0qRB 0 7 88 543 0 14 Dtool_v_mB0qRB 0 0 
89 14 Dtool_v_mBczRD 0 7 90 558 0 14 Dtool_v_mBczRD 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
90 14 Dtool_v_mBVI_1 0 6 91 546 0 14 Dtool_v_mBVI_1 869 // Filename: mouseSubregion.I
// Created by:  drose (13May05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
91 14 Dtool_v_mBVfJj 0 6 92 546 0 14 Dtool_v_mBVfJj 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
92 14 Dtool_v_mBaA1U 0 6 93 546 0 14 Dtool_v_mBaA1U 384 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
93 14 Dtool_v_mBhR06 0 6 94 546 0 14 Dtool_v_mBhR06 377 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
94 14 Dtool_v_mBlkoB 0 4 95 527 0 14 Dtool_v_mBlkoB 583 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
//////////////////////////////////////////////////////////////////// 5 4 this 3 558  1 l 1 546  1 r 1 546  1 b 1 546  1 t 1 546  
95 14 Dtool_v_mByuXc 0 7 96 543 0 14 Dtool_v_mByuXc 0 0 
96 14 Dtool_v_mBXN0b 0 7 104 564 371 14 Dtool_v_mBXN0b 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 525  5 frame 1 561  
97 14 Dtool_v_mBVKEG 0 7 104 564 371 14 Dtool_v_mBVKEG 724 // Filename: mouseWatcherRegion.I
// Created by:  drose (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 525  4 left 1 546  5 right 1 546  6 bottom 1 546  3 top 1 546  
98 14 Dtool_v_mBvRlo 0 4 105 527 0 14 Dtool_v_mBvRlo 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  5 frame 1 561  
99 14 Dtool_v_mBTI04 0 4 105 527 0 14 Dtool_v_mBTI04 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 564  4 left 1 546  5 right 1 546  6 bottom 1 546  3 top 1 546  
100 14 Dtool_v_mBC2td 0 6 106 561 0 14 Dtool_v_mBC2td 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
101 14 Dtool_v_mBxwAe 0 6 107 546 0 14 Dtool_v_mBxwAe 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
102 14 Dtool_v_mBuUjJ 0 4 108 527 0 14 Dtool_v_mBuUjJ 672 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  4 sort 1 534  
103 14 Dtool_v_mBwQ_6 0 6 109 534 0 14 Dtool_v_mBwQ_6 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
104 14 Dtool_v_mBH96x 0 4 110 527 0 14 Dtool_v_mBH96x 515 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  6 active 1 530  
105 14 Dtool_v_mBBoGH 0 6 111 530 0 14 Dtool_v_mBBoGH 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
106 14 Dtool_v_mB_wOd 0 4 112 527 0 14 Dtool_v_mB_wOd 598 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  8 keyboard 1 530  
107 14 Dtool_v_mB2JK8 0 6 113 530 0 14 Dtool_v_mB2JK8 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
108 14 Dtool_v_mBTWvO 0 4 115 527 0 14 Dtool_v_mBTWvO 725 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  14 suppress_flags 1 534  
109 14 Dtool_v_mByKjf 0 6 116 534 0 14 Dtool_v_mByKjf 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
110 14 Dtool_v_mBkvVL 0 4 117 527 0 14 Dtool_v_mBkvVL 225 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 565  3 out 1 567  
111 14 Dtool_v_mBijOS 0 4 118 527 0 14 Dtool_v_mBijOS 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 565  3 out 1 567  12 indent_level 1 534  
112 14 Dtool_v_mB1qaj 0 4 118 527 0 14 Dtool_v_mB1qaj 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 565  3 out 1 567  
113 14 Dtool_v_mBet1g 0 7 119 543 0 14 Dtool_v_mBet1g 0 0 
114 14 Dtool_v_mBS1_F 0 7 99 569 0 14 Dtool_v_mBS1_F 0 1 4 this 3 564  
115 14 Dtool_v_mB76md 0 7 100 564 371 14 Dtool_v_mB76md 0 1 4 this 3 569  
116 14 Dtool_v_mBuEXk 0 6 102 570 0 14 Dtool_v_mBuEXk 0 1 4 this 3 564  
117 14 Dtool_v_mB7Z9h 0 7 103 564 371 14 Dtool_v_mB7Z9h 0 1 4 this 3 570  
118 14 Dtool_v_mBxUMA 0 4 125 527 0 14 Dtool_v_mBxUMA 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  6 region 1 564  
119 14 Dtool_v_mB75tC 0 6 126 530 0 14 Dtool_v_mB75tC 348 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherGroup, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  6 region 1 564  
120 14 Dtool_v_mBnY6C 0 6 127 530 0 14 Dtool_v_mBnY6C 403 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  6 region 1 564  
121 14 Dtool_v_mB2SzS 0 7 128 564 371 14 Dtool_v_mB2SzS 417 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  4 name 1 525  
122 14 Dtool_v_mB9D_y 0 4 129 527 0 14 Dtool_v_mB9D_y 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
123 14 Dtool_v_mBhUIB 0 4 130 527 0 14 Dtool_v_mBhUIB 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
124 14 Dtool_v_mB1L8g 0 6 131 530 0 14 Dtool_v_mB1L8g 312 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 572  
125 14 Dtool_v_mBFnk1 0 6 132 534 0 14 Dtool_v_mBFnk1 277 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 572  
126 14 Dtool_v_mBYyXb 0 7 133 564 371 14 Dtool_v_mBYyXb 472 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  1 n 1 534  
127 14 Dtool_v_mBtX2N 0 4 134 527 0 14 Dtool_v_mBtX2N 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  3 out 1 567  
128 14 Dtool_v_mBlVEu 0 4 135 527 0 14 Dtool_v_mBlVEu 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 572  3 out 1 567  12 indent_level 1 534  
129 14 Dtool_v_mBF5ne 0 4 135 527 0 14 Dtool_v_mBF5ne 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  3 out 1 567  
130 14 Dtool_v_mBjHAN 0 4 136 527 0 14 Dtool_v_mBjHAN 445 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherGroup.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
//////////////////////////////////////////////////////////////////// 4 4 this 3 571  8 render2d 1 574  8 bin_name 1 525  10 draw_order 1 534  
131 14 Dtool_v_mBkq3J 0 4 137 527 0 14 Dtool_v_mBkq3J 362 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  5 color 1 561  
132 14 Dtool_v_mBsd8H 0 4 138 527 0 14 Dtool_v_mBsd8H 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
133 14 Dtool_v_mBPMXL 0 4 139 527 0 14 Dtool_v_mBPMXL 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
134 14 Dtool_v_mB3_jo 0 7 140 543 0 14 Dtool_v_mB3_jo 0 0 
135 14 Dtool_v_mBXWnS 0 7 123 577 0 14 Dtool_v_mBXWnS 0 1 4 this 3 571  
136 14 Dtool_v_mBcC1c 0 7 146 578 395 14 Dtool_v_mBcC1c 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
137 14 Dtool_v_mBa1_K 0 7 146 578 395 14 Dtool_v_mBa1_K 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
138 14 Dtool_v_mBNVgH 0 6 148 530 0 14 Dtool_v_mBNVgH 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  6 region 1 564  
139 14 Dtool_v_mBNnfE 0 6 149 530 0 14 Dtool_v_mBNnfE 828 // Filename: mouseWatcher.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
140 14 Dtool_v_mBIirl 0 6 150 530 0 14 Dtool_v_mBIirl 473 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
141 14 Dtool_v_mBP88Z 0 6 151 581 0 14 Dtool_v_mBP88Z 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
142 14 Dtool_v_mBY5e7 0 6 152 546 0 14 Dtool_v_mBY5e7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
143 14 Dtool_v_mBhnf7 0 6 153 546 0 14 Dtool_v_mBhnf7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
144 14 Dtool_v_mBHxfL 0 4 154 527 0 14 Dtool_v_mBHxfL 928 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 frame 1 561  
145 14 Dtool_v_mB0bst 0 4 154 527 0 14 Dtool_v_mB0bst 343 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 578  4 left 1 546  5 right 1 546  6 bottom 1 546  3 top 1 546  
146 14 Dtool_v_mB08UI 0 6 155 561 0 14 Dtool_v_mB08UI 296 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
147 14 Dtool_v_mBcWJO 0 6 156 530 0 14 Dtool_v_mBcWJO 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
148 14 Dtool_v_mBvoLV 0 6 156 530 0 14 Dtool_v_mBvoLV 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 579  3 pos 1 581  
149 14 Dtool_v_mBO62h 0 6 156 530 0 14 Dtool_v_mBO62h 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 579  1 x 1 546  1 y 1 546  
150 14 Dtool_v_mBeZEz 0 7 157 564 371 14 Dtool_v_mBeZEz 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
151 14 Dtool_v_mBg7zU 0 7 157 564 371 14 Dtool_v_mBg7zU 513 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
//////////////////////////////////////////////////////////////////// 2 4 this 3 579  3 pos 1 581  
152 14 Dtool_v_mBwQqr 0 7 157 564 371 14 Dtool_v_mBwQqr 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 579  1 x 1 546  1 y 1 546  
153 14 Dtool_v_mB39sY 0 6 158 530 0 14 Dtool_v_mB39sY 328 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 579  6 button 1 584  
154 14 Dtool_v_mBcEcO 0 4 159 527 0 14 Dtool_v_mBcEcO 762 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
155 14 Dtool_v_mBht1B 0 6 160 525 0 14 Dtool_v_mBht1B 394 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
156 14 Dtool_v_mBm2Gd 0 4 161 527 0 14 Dtool_v_mBm2Gd 400 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
157 14 Dtool_v_mBi4be 0 6 162 525 0 14 Dtool_v_mBi4be 391 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
158 14 Dtool_v_mBixkm 0 4 163 527 0 14 Dtool_v_mBixkm 827 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
159 14 Dtool_v_mBLPpO 0 6 164 525 0 14 Dtool_v_mBLPpO 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
160 14 Dtool_v_mBYndk 0 4 165 527 0 14 Dtool_v_mBYndk 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
161 14 Dtool_v_mBAuR6 0 6 166 525 0 14 Dtool_v_mBAuR6 559 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
162 14 Dtool_v_mBHX33 0 4 167 527 0 14 Dtool_v_mBHX33 585 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
163 14 Dtool_v_mBWyqN 0 6 168 525 0 14 Dtool_v_mBWyqN 560 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
164 14 Dtool_v_mBlQGQ 0 4 169 527 0 14 Dtool_v_mBlQGQ 591 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
165 14 Dtool_v_mBtUxJ 0 6 170 525 0 14 Dtool_v_mBtUxJ 565 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
166 14 Dtool_v_mBq8_O 0 4 171 527 0 14 Dtool_v_mBq8_O 594 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 pattern 1 525  
167 14 Dtool_v_mBa5mF 0 6 172 525 0 14 Dtool_v_mBa5mF 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
168 14 Dtool_v_mBCINK 0 4 173 527 0 14 Dtool_v_mBCINK 553 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  4 node 1 585  
169 14 Dtool_v_mBnnGj 0 6 174 530 0 14 Dtool_v_mBnnGj 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
170 14 Dtool_v_mBgJl4 0 7 175 585 0 14 Dtool_v_mBgJl4 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
171 14 Dtool_v_mBalHk 0 4 176 527 0 14 Dtool_v_mBalHk 308 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
172 14 Dtool_v_mBT4a_ 0 4 177 527 0 14 Dtool_v_mBT4a_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  2 eh 1 587  
173 14 Dtool_v_mBpC6_ 0 6 178 587 0 14 Dtool_v_mBpC6_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
174 14 Dtool_v_mBtFyZ 0 4 179 527 0 14 Dtool_v_mBtFyZ 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  4 mods 1 536  
175 14 Dtool_v_mBI0bg 0 7 180 589 0 14 Dtool_v_mBI0bg 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
176 14 Dtool_v_mBin8K 0 4 181 527 0 14 Dtool_v_mBin8K 743 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  2 dr 1 590  
177 14 Dtool_v_mB1V8S 0 4 182 527 0 14 Dtool_v_mB1V8S 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
178 14 Dtool_v_mBbAU7 0 7 183 590 0 14 Dtool_v_mBbAU7 386 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
179 14 Dtool_v_mBZp2l 0 6 184 530 0 14 Dtool_v_mBZp2l 525 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
180 14 Dtool_v_mB6Y8I 0 6 185 530 0 14 Dtool_v_mB6Y8I 841 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherGroup, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 group 1 571  
181 14 Dtool_v_mBe1yD 0 6 186 530 0 14 Dtool_v_mBe1yD 474 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 group 1 571  
182 14 Dtool_v_mBeayk 0 6 187 530 0 14 Dtool_v_mBeayk 665 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 578  9 old_group 1 571  9 new_group 1 571  
183 14 Dtool_v_mBlrMu 0 6 188 534 0 14 Dtool_v_mBlrMu 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
184 14 Dtool_v_mBt9yw 0 7 189 571 373 14 Dtool_v_mBt9yw 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 579  1 n 1 534  
185 14 Dtool_v_mBCe2F 0 4 190 527 0 14 Dtool_v_mBCe2F 822 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  7 timeout 1 592  
186 14 Dtool_v_mBmGVJ 0 6 191 530 0 14 Dtool_v_mBmGVJ 321 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
187 14 Dtool_v_mBSYye 0 6 192 592 0 14 Dtool_v_mBSYye 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
188 14 Dtool_v_mB2sej 0 4 193 527 0 14 Dtool_v_mB2sej 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
189 14 Dtool_v_mB6rZ_ 0 4 194 527 0 14 Dtool_v_mB6rZ_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 event 1 525  
190 14 Dtool_v_mBemLm 0 6 195 525 0 14 Dtool_v_mBemLm 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
191 14 Dtool_v_mBLTg_ 0 7 196 595 0 14 Dtool_v_mBLTg_ 713 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
192 14 Dtool_v_mBRetJ 0 6 197 534 0 14 Dtool_v_mBRetJ 440 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
//////////////////////////////////////////////////////////////////// 1 4 this 3 579  
193 14 Dtool_v_mBCGVq 0 4 198 527 0 14 Dtool_v_mBCGVq 468 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  8 duration 1 592  
194 14 Dtool_v_mBsiL0 0 7 199 597 0 14 Dtool_v_mBsiL0 999 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
195 14 Dtool_v_mBdIxZ 0 4 200 527 0 14 Dtool_v_mBdIxZ 533 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
196 14 Dtool_v_mBbIXE 0 4 201 527 0 14 Dtool_v_mBbIXE 349 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
197 14 Dtool_v_mBYPsS 0 4 202 527 0 14 Dtool_v_mBYPsS 951 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
198 14 Dtool_v_mBfzXa 0 7 203 543 0 14 Dtool_v_mBfzXa 0 0 
199 14 Dtool_v_mBKzc_ 0 7 142 598 0 14 Dtool_v_mBKzc_ 0 1 4 this 3 578  
200 14 Dtool_v_mBhM9_ 0 7 143 578 395 14 Dtool_v_mBhM9_ 0 1 4 this 3 598  
201 14 Dtool_v_mBLdxH 0 7 144 571 373 14 Dtool_v_mBLdxH 0 1 4 this 3 578  
202 14 Dtool_v_mBk8r2 0 7 145 578 395 14 Dtool_v_mBk8r2 0 1 4 this 3 571  
203 14 Dtool_v_mBHdBJ 0 6 206 530 0 14 Dtool_v_mBHdBJ 341 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
204 14 Dtool_v_mBWbt7 0 7 207 584 0 14 Dtool_v_mBWbt7 406 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
205 14 Dtool_v_mBNSyS 0 6 208 530 0 14 Dtool_v_mBNSyS 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
206 14 Dtool_v_mBjsPh 0 6 209 530 0 14 Dtool_v_mBjsPh 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
207 14 Dtool_v_mBLr7T 0 6 210 534 0 14 Dtool_v_mBLr7T 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
208 14 Dtool_v_mBm3E2 0 6 211 530 0 14 Dtool_v_mBm3E2 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
209 14 Dtool_v_mBJON1 0 6 212 525 0 14 Dtool_v_mBJON1 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
210 14 Dtool_v_mBggbz 0 6 212 525 0 14 Dtool_v_mBggbz 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  8 encoding 1 601  
211 14 Dtool_v_mB2Qq_ 0 6 213 603 0 14 Dtool_v_mB2Qq_ 323 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
212 14 Dtool_v_mBwcQ5 0 6 214 603 0 14 Dtool_v_mBwcQ5 334 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
213 14 Dtool_v_mB5fsc 0 6 215 603 0 14 Dtool_v_mB5fsc 329 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
214 14 Dtool_v_mBD2au 0 6 216 536 0 14 Dtool_v_mBD2au 352 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
215 14 Dtool_v_mB3Y9y 0 6 217 530 0 14 Dtool_v_mB3Y9y 330 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
216 14 Dtool_v_mBnFpl 0 6 218 581 0 14 Dtool_v_mBnFpl 425 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
217 14 Dtool_v_mBCuZd 0 6 219 530 0 14 Dtool_v_mBCuZd 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
218 14 Dtool_v_mBP1BE 0 4 220 527 0 14 Dtool_v_mBP1BE 229 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  3 out 1 567  
219 14 Dtool_v_mBFM2w 0 7 222 604 0 14 Dtool_v_mBFM2w 218 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
220 14 Dtool_v_mBQM3x 0 4 223 527 0 14 Dtool_v_mBQM3x 257 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 604  
221 14 Dtool_v_mBylhr 0 6 224 546 0 14 Dtool_v_mBylhr 335 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
222 14 Dtool_v_mBeGTT 0 4 225 527 0 14 Dtool_v_mBeGTT 435 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  8 fwdscale 1 546  
223 14 Dtool_v_mBAeAL 0 6 226 549 0 14 Dtool_v_mBAeAL 264 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
224 14 Dtool_v_mB2VRC 0 6 227 546 0 14 Dtool_v_mB2VRC 0 1 4 this 3 605  
225 14 Dtool_v_mB_EbC 0 6 228 546 0 14 Dtool_v_mB_EbC 0 1 4 this 3 605  
226 14 Dtool_v_mBm3kC 0 6 229 546 0 14 Dtool_v_mBm3kC 0 1 4 this 3 605  
227 14 Dtool_v_mB2sA5 0 4 230 527 0 14 Dtool_v_mB2sA5 269 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  3 vec 1 552  
228 14 Dtool_v_mBSryu 0 4 230 527 0 14 Dtool_v_mBSryu 0 4 4 this 3 604  1 x 1 546  1 y 1 546  1 z 1 546  
229 14 Dtool_v_mBCF66 0 4 231 527 0 14 Dtool_v_mBCF66 0 2 4 this 3 604  1 x 1 546  
230 14 Dtool_v_mBa0E7 0 4 232 527 0 14 Dtool_v_mBa0E7 0 2 4 this 3 604  1 y 1 546  
231 14 Dtool_v_mBSnO7 0 4 233 527 0 14 Dtool_v_mBSnO7 0 2 4 this 3 604  1 z 1 546  
232 14 Dtool_v_mB9kcy 0 7 234 607 0 14 Dtool_v_mB9kcy 253 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
233 14 Dtool_v_mB1H1_ 0 6 235 546 0 14 Dtool_v_mB1H1_ 0 1 4 this 3 605  
234 14 Dtool_v_mB2MDB 0 6 236 546 0 14 Dtool_v_mB2MDB 0 1 4 this 3 605  
235 14 Dtool_v_mBmuWB 0 6 237 546 0 14 Dtool_v_mBmuWB 0 1 4 this 3 605  
236 14 Dtool_v_mBw7cg 0 4 238 527 0 14 Dtool_v_mBw7cg 255 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  3 hpr 1 552  
237 14 Dtool_v_mBQARW 0 4 238 527 0 14 Dtool_v_mBQARW 0 4 4 this 3 604  1 h 1 546  1 p 1 546  1 r 1 546  
238 14 Dtool_v_mBC3e4 0 4 239 527 0 14 Dtool_v_mBC3e4 0 2 4 this 3 604  1 h 1 546  
239 14 Dtool_v_mBCMs5 0 4 240 527 0 14 Dtool_v_mBCMs5 0 2 4 this 3 604  1 p 1 546  
240 14 Dtool_v_mBSuA6 0 4 241 527 0 14 Dtool_v_mBSuA6 0 2 4 this 3 604  1 r 1 546  
241 14 Dtool_v_mBQuKj 0 4 242 527 0 14 Dtool_v_mBQuKj 396 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 604  
242 14 Dtool_v_mBgy67 0 4 243 527 0 14 Dtool_v_mBgy67 271 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
//////////////////////////////////////////////////////////////////// 4 4 this 3 604  1 x 1 546  1 y 1 546  1 z 1 546  
243 14 Dtool_v_mB8Sdj 0 7 244 608 0 14 Dtool_v_mB8Sdj 260 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
244 14 Dtool_v_mBszQ3 0 4 245 527 0 14 Dtool_v_mBszQ3 258 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  6 origin 1 552  
245 14 Dtool_v_mBlxsW 0 4 247 527 0 14 Dtool_v_mBlxsW 654 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  12 control_mode 1 523  
246 14 Dtool_v_mBKl1v 0 6 248 523 0 14 Dtool_v_mBKl1v 277 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
247 14 Dtool_v_mBUESo 0 4 249 527 0 14 Dtool_v_mBUESo 403 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  4 flag 1 530  
248 14 Dtool_v_mBP3xR 0 6 250 530 0 14 Dtool_v_mBP3xR 406 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
249 14 Dtool_v_mBlgYv 0 4 251 527 0 14 Dtool_v_mBlgYv 561 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  6 rel_to 1 574  
250 14 Dtool_v_mBMggh 0 6 252 574 0 14 Dtool_v_mBMggh 327 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
251 14 Dtool_v_mB2veS 0 4 253 527 0 14 Dtool_v_mB2veS 524 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  2 cs 1 609  
252 14 Dtool_v_mB5ZF5 0 6 254 609 0 14 Dtool_v_mB5ZF5 325 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
253 14 Dtool_v_mBinab 0 4 255 527 0 14 Dtool_v_mBinab 368 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  3 mat 1 555  
254 14 Dtool_v_mBZ1ai 0 6 256 555 0 14 Dtool_v_mBZ1ai 292 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
255 14 Dtool_v_mBWvGL 0 6 257 555 0 14 Dtool_v_mBWvGL 387 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
256 14 Dtool_v_mBATvH 0 7 258 543 0 14 Dtool_v_mBATvH 0 0 
257 14 Dtool_v_mBDG5A 0 7 260 610 508 14 Dtool_v_mBDG5A 221 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 525  
258 14 Dtool_v_mBdpGS 0 4 261 527 0 14 Dtool_v_mBdpGS 262 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  4 node 1 585  
259 14 Dtool_v_mBCzs4 0 7 262 585 0 14 Dtool_v_mBCzs4 324 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
260 14 Dtool_v_mBDfAE 0 7 263 543 0 14 Dtool_v_mBDfAE 0 0 
104
509 13 ButtonThrower 0 75777 13 ButtonThrower 13 ButtonThrower 0 0 0 1 261 0 0 30 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 1 613 0 1 0 510 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : ButtonThrower
// Description : Throws Panda Events for button down/up events
//               generated within the data graph.
//
//               This is a DataNode which is intended to be parented
//               to the data graph below a device which is generating
//               a sequence of button events, like a MouseAndKeyboard
//               device.  It simply takes each button it finds and
//               throws a corresponding event based on the button name
//               via the throw_event() call.
////////////////////////////////////////////////////////////////////

510 8 DataNode 0 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

511 18 MouseInterfaceNode 0 75777 18 MouseInterfaceNode 18 MouseInterfaceNode 0 0 0 0 0 0 4 292 293 294 295 0 0 1 0 510 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : MouseInterfaceNode
// Description : This is the base class for some classes that monitor
//               the mouse and keyboard input and perform some action
//               due to their state.
//
//               It collects together some common interface; in
//               particular, the require_button() and related methods.
////////////////////////////////////////////////////////////////////

512 14 DriveInterface 0 75777 14 DriveInterface 14 DriveInterface 0 0 0 1 296 0 0 48 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 0 0 1 0 511 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

513 14 MouseSubregion 0 75777 14 MouseSubregion 14 MouseSubregion 0 0 0 1 345 0 0 6 346 347 348 349 350 351 0 0 1 0 511 0 0 0 0 587
////////////////////////////////////////////////////////////////////
//       Class : MouseSubregion
// Description : The MouseSubregion object scales the mouse inputs
//               from within a rectangular region of the screen, as if
//               they were the full-screen inputs.
//
//               If you choose your MouseSubregion coordinates to
//               exactly match a DisplayRegion within your window, you
//               end up with a virtual mouse within your
//               DisplayRegion.
////////////////////////////////////////////////////////////////////

514 18 MouseWatcherRegion 0 141313 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 1 356 371 0 14 357 358 359 360 361 362 363 364 365 366 367 368 369 370 0 0 2 3 515 352 353 3 516 354 355 0 1 517 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

515 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

516 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

517 13 SuppressFlags 0 794624 33 MouseWatcherRegion::SuppressFlags 33 MouseWatcherRegion::SuppressFlags 514 0 0 0 0 0 0 0 0 0 4 15 SF_mouse_button 35 MouseWatcherRegion::SF_mouse_button 1 15 SF_other_button 35 MouseWatcherRegion::SF_other_button 2 13 SF_any_button 33 MouseWatcherRegion::SF_any_button 3 17 SF_mouse_position 37 MouseWatcherRegion::SF_mouse_position 4 0 0

518 17 MouseWatcherGroup 0 26625 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 373 0 16 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 1 614 0 1 5 519 372 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.
////////////////////////////////////////////////////////////////////

519 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

520 12 MouseWatcher 0 26625 12 MouseWatcher 12 MouseWatcher 0 0 0 1 394 395 0 56 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 1 615 0 2 3 510 390 391 3 518 392 393 0 0 1626
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
//
//               Finally, this class can keep a record of the mouse
//               trail.  This is useful if you want to know, not just
//               where the mouse is, but the exact sequence of movements
//               it took to get there.  This information is mainly useful
//               for gesture-recognition code.  To use trail logging,
//               you need to enable the generation of pointer events
//               in the GraphicsWindowInputDevice and set the trail 
//               log duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////

521 21 MouseWatcherParameter 0 26625 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 452 0 15 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

522 9 Trackball 0 75777 9 Trackball 9 Trackball 0 0 0 1 468 0 0 35 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 0 0 1 0 511 0 0 0 1 523 702
////////////////////////////////////////////////////////////////////
//       Class : Trackball
// Description : Trackball acts like Performer in trackball mode.  It
//               can either spin around a piece of geometry directly,
//               or it can spin around a camera with the inverse
//               transform to make it appear that the whole world is
//               spinning.
//
//               The Trackball object actually just places a transform
//               in the data graph; parent a Transform2SG node under
//               it to actually transform objects (or cameras) in the
//               world.
////////////////////////////////////////////////////////////////////

523 11 ControlMode 0 794624 22 Trackball::ControlMode 22 Trackball::ControlMode 522 0 0 0 0 0 0 0 0 0 5 10 CM_default 21 Trackball::CM_default 0 8 CM_truck 19 Trackball::CM_truck 1 6 CM_pan 17 Trackball::CM_pan 2 8 CM_dolly 19 Trackball::CM_dolly 3 7 CM_roll 18 Trackball::CM_roll 4 0 18
/// **** Misc ****

524 12 Transform2SG 0 141313 12 Transform2SG 12 Transform2SG 0 0 0 1 504 508 0 3 505 506 507 0 0 1 0 510 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : Transform2SG
// Description : input: Transform (matrix)
//
//               output: none, but applies the matrix as the transform
//               transition for a given arc of the scene graph.
////////////////////////////////////////////////////////////////////

525 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

526 15 ButtonThrower * 0 8576 15 ButtonThrower * 15 ButtonThrower * 0 0 509 0 0 0 0 0 0 0 0 0 0

527 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

528 21 ButtonThrower const * 0 8576 21 ButtonThrower const * 21 ButtonThrower const * 0 0 529 0 0 0 0 0 0 0 0 0 0

529 19 ButtonThrower const 0 8832 19 ButtonThrower const 19 ButtonThrower const 0 0 509 0 0 0 0 0 0 0 0 0 0

530 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

531 22 EventParameter const * 0 8576 22 EventParameter const * 22 EventParameter const * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 20 EventParameter const 0 8832 20 EventParameter const 20 EventParameter const 0 0 533 0 0 0 0 0 0 0 0 0 0

533 14 EventParameter 0 2048 14 EventParameter 14 EventParameter 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the EventStoreValue template class, defined
//               below.
////////////////////////////////////////////////////////////////////

534 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

535 16 EventParameter * 0 8576 16 EventParameter * 16 EventParameter * 0 0 533 0 0 0 0 0 0 0 0 0 0

536 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 538 0 0 0 0 0 0 0 0 0 0

538 15 ModifierButtons 0 2048 15 ModifierButtons 15 ModifierButtons 0 0 0 0 0 0 0 1 616 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

539 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 540 0 0 0 0 0 0 0 0 0 0

540 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 541 0 0 0 0 0 0 0 0 0 0

541 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

542 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

543 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 542 0 0 0 0 0 0 0 0 0 0

544 20 MouseInterfaceNode * 0 8576 20 MouseInterfaceNode * 20 MouseInterfaceNode * 0 0 511 0 0 0 0 0 0 0 0 0 0

545 16 DriveInterface * 0 8576 16 DriveInterface * 16 DriveInterface * 0 0 512 0 0 0 0 0 0 0 0 0 0

546 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

547 22 DriveInterface const * 0 8576 22 DriveInterface const * 22 DriveInterface const * 0 0 548 0 0 0 0 0 0 0 0 0 0

548 20 DriveInterface const 0 8832 20 DriveInterface const 20 DriveInterface const 0 0 512 0 0 0 0 0 0 0 0 0 0

549 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 551 0 0 0 0 0 0 0 0 0 0

551 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

552 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 554 0 0 0 0 0 0 0 0 0 0

554 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

555 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 556 0 0 0 0 0 0 0 0 0 0

556 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 557 0 0 0 0 0 0 0 0 0 0

557 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 617 618 619 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

558 16 MouseSubregion * 0 8576 16 MouseSubregion * 16 MouseSubregion * 0 0 513 0 0 0 0 0 0 0 0 0 0

559 22 MouseSubregion const * 0 8576 22 MouseSubregion const * 22 MouseSubregion const * 0 0 560 0 0 0 0 0 0 0 0 0 0

560 20 MouseSubregion const 0 8832 20 MouseSubregion const 20 MouseSubregion const 0 0 513 0 0 0 0 0 0 0 0 0 0

561 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 563 0 0 0 0 0 0 0 0 0 0

563 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

564 20 MouseWatcherRegion * 0 8576 20 MouseWatcherRegion * 20 MouseWatcherRegion * 0 0 514 0 0 0 0 0 0 0 0 0 0

565 26 MouseWatcherRegion const * 0 8576 26 MouseWatcherRegion const * 26 MouseWatcherRegion const * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 24 MouseWatcherRegion const 0 8832 24 MouseWatcherRegion const 24 MouseWatcherRegion const 0 0 514 0 0 0 0 0 0 0 0 0 0

567 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

569 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 515 0 0 0 0 0 0 0 0 0 0

570 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 516 0 0 0 0 0 0 0 0 0 0

571 19 MouseWatcherGroup * 0 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 518 0 0 0 0 0 0 0 0 0 0

572 25 MouseWatcherGroup const * 0 8576 25 MouseWatcherGroup const * 25 MouseWatcherGroup const * 0 0 573 0 0 0 0 0 0 0 0 0 0

573 23 MouseWatcherGroup const 0 8832 23 MouseWatcherGroup const 23 MouseWatcherGroup const 0 0 518 0 0 0 0 0 0 0 0 0 0

574 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 576 0 0 0 0 0 0 0 0 0 0

576 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 620 621 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

577 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 519 0 0 0 0 0 0 0 0 0 0

578 14 MouseWatcher * 0 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 520 0 0 0 0 0 0 0 0 0 0

579 20 MouseWatcher const * 0 8576 20 MouseWatcher const * 20 MouseWatcher const * 0 0 580 0 0 0 0 0 0 0 0 0 0

580 18 MouseWatcher const 0 8832 18 MouseWatcher const 18 MouseWatcher const 0 0 520 0 0 0 0 0 0 0 0 0 0

581 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 582 0 0 0 0 0 0 0 0 0 0

582 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 583 0 0 0 0 0 0 0 0 0 0

583 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

584 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 541 0 0 0 0 0 0 0 0 0 0

585 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

587 14 EventHandler * 0 8576 14 EventHandler * 14 EventHandler * 0 0 588 0 0 0 0 0 0 0 0 0 0

588 12 EventHandler 0 2048 12 EventHandler 12 EventHandler 0 0 0 0 0 0 0 0 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

589 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 538 0 0 0 0 0 0 0 0 0 0

590 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 591 0 0 0 0 0 0 0 0 0 0

591 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

592 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

593 22 PointerEventList const 0 8832 22 PointerEventList const 22 PointerEventList const 0 0 594 0 0 0 0 0 0 0 0 0 0

594 16 PointerEventList 0 2048 16 PointerEventList 16 PointerEventList 0 0 0 0 0 0 0 0 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : PointerEventList
// Description : Records a set of pointer events that happened
//               recently.  This class is usually used only in the
//               data graph, to transmit the recent pointer presses,
//               but it may be used anywhere a list of PointerEvents
//               is desired.
////////////////////////////////////////////////////////////////////

595 24 PointerEventList const * 0 8576 24 PointerEventList const * 24 PointerEventList const * 0 0 593 0 0 0 0 0 0 0 0 0 0

596 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 2 622 623 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

597 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 596 0 0 0 0 0 0 0 0 0 0

598 10 DataNode * 0 8576 10 DataNode * 10 DataNode * 0 0 510 0 0 0 0 0 0 0 0 0 0

599 29 MouseWatcherParameter const * 0 8576 29 MouseWatcherParameter const * 29 MouseWatcherParameter const * 0 0 600 0 0 0 0 0 0 0 0 0 0

600 27 MouseWatcherParameter const 0 8832 27 MouseWatcherParameter const 27 MouseWatcherParameter const 0 0 521 0 0 0 0 0 0 0 0 0 0

601 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 602 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

602 11 TextEncoder 0 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

603 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

604 11 Trackball * 0 8576 11 Trackball * 11 Trackball * 0 0 522 0 0 0 0 0 0 0 0 0 0

605 17 Trackball const * 0 8576 17 Trackball const * 17 Trackball const * 0 0 606 0 0 0 0 0 0 0 0 0 0

606 15 Trackball const 0 8832 15 Trackball const 15 Trackball const 0 0 522 0 0 0 0 0 0 0 0 0 0

607 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 554 0 0 0 0 0 0 0 0 0 0

608 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 551 0 0 0 0 0 0 0 0 0 0

609 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

610 14 Transform2SG * 0 8576 14 Transform2SG * 14 Transform2SG * 0 0 524 0 0 0 0 0 0 0 0 0 0

611 20 Transform2SG const * 0 8576 20 Transform2SG const * 20 Transform2SG const * 0 0 612 0 0 0 0 0 0 0 0 0 0

612 18 Transform2SG const 0 8832 18 Transform2SG const 18 Transform2SG const 0 0 524 0 0 0 0 0 0 0 0 0 0

0
0
11
613 0 0 1 14 get_parameters 18 get_num_parameters 13 get_parameter 
614 0 0 121 11 get_regions 15 get_num_regions 10 get_region 
615 0 0 141 10 get_groups 14 get_num_groups 9 get_group 
616 0 0 301 11 get_buttons 15 get_num_buttons 10 get_button 
617 0 0 383 8 get_rows 4 size 7 get_row 
618 0 0 383 8 get_cols 4 size 7 get_col 
619 0 0 383 9 get_row3s 4 size 8 get_row3 
620 0 0 447 9 get_nodes 13 get_num_nodes 8 get_node 
621 0 0 447 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
622 0 0 531 9 get_geoms 13 get_num_geoms 8 get_geom 
623 0 0 531 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
