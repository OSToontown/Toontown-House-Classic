1365933630
2 2
11 libpandaode 4 sTqO 8 pandaode 
579
682 8 OdeWorld 0 4 1268 18 OdeWorld::OdeWorld 0 2 1 2 0
67
OdeWorld::OdeWorld(void);
OdeWorld::OdeWorld(OdeWorld const &copy);

683 7 destroy 0 4 1268 17 OdeWorld::destroy 0 1 3 0
29
void OdeWorld::destroy(void);

684 8 is_empty 0 4 1268 18 OdeWorld::is_empty 0 1 4 942
// Filename: odeWorld.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeWorld
//               does not point to a valid world. It is an error to
//               call a method on an empty world.
//               Note that an empty OdeWorld also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeWorld::is_empty(void) const;

685 6 get_id 0 4 1268 16 OdeWorld::get_id 0 1 5 248
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::get_id
//       Access: Published
//  Description: Returns the underlying dWorldID.
////////////////////////////////////////////////////////////////////
45
inline dxWorld *OdeWorld::get_id(void) const;

686 11 set_gravity 0 4 1268 21 OdeWorld::set_gravity 0 2 6 7 0
119
inline void OdeWorld::set_gravity(float x, float y, float z);
inline void OdeWorld::set_gravity(LVecBase3f const &vec);

687 7 set_erp 0 4 1268 17 OdeWorld::set_erp 0 1 8 0
41
inline void OdeWorld::set_erp(float erp);

688 7 set_cfm 0 4 1268 17 OdeWorld::set_cfm 0 1 9 0
41
inline void OdeWorld::set_cfm(float cfm);

689 29 set_quick_step_num_iterations 0 4 1268 39 OdeWorld::set_quick_step_num_iterations 0 1 10 0
61
inline void OdeWorld::set_quick_step_num_iterations(int num);

690 16 set_quick_step_w 0 4 1268 26 OdeWorld::set_quick_step_w 0 1 11 0
62
inline void OdeWorld::set_quick_step_w(float over_relaxation);

691 30 set_contact_max_correcting_vel 0 4 1268 40 OdeWorld::set_contact_max_correcting_vel 0 1 12 0
64
inline void OdeWorld::set_contact_max_correcting_vel(float vel);

692 25 set_contact_surface_layer 0 4 1268 35 OdeWorld::set_contact_surface_layer 0 1 13 0
61
inline void OdeWorld::set_contact_surface_layer(float depth);

693 25 set_auto_enable_depth_sf1 0 4 1268 35 OdeWorld::set_auto_enable_depth_sf1 0 1 14 0
71
inline void OdeWorld::set_auto_enable_depth_sf1(int auto_enable_depth);

694 33 set_auto_disable_linear_threshold 0 4 1268 43 OdeWorld::set_auto_disable_linear_threshold 0 1 15 0
80
inline void OdeWorld::set_auto_disable_linear_threshold(float linear_threshold);

695 34 set_auto_disable_angular_threshold 0 4 1268 44 OdeWorld::set_auto_disable_angular_threshold 0 1 16 0
82
inline void OdeWorld::set_auto_disable_angular_threshold(float angular_threshold);

696 22 set_auto_disable_steps 0 4 1268 32 OdeWorld::set_auto_disable_steps 0 1 17 0
56
inline void OdeWorld::set_auto_disable_steps(int steps);

697 21 set_auto_disable_time 0 4 1268 31 OdeWorld::set_auto_disable_time 0 1 18 0
56
inline void OdeWorld::set_auto_disable_time(float time);

698 21 set_auto_disable_flag 0 4 1268 31 OdeWorld::set_auto_disable_flag 0 1 19 0
65
inline void OdeWorld::set_auto_disable_flag(int do_auto_disable);

699 11 get_gravity 0 4 1268 21 OdeWorld::get_gravity 0 1 20 0
52
inline LVecBase3f OdeWorld::get_gravity(void) const;

700 7 get_erp 0 4 1268 17 OdeWorld::get_erp 0 1 21 0
43
inline float OdeWorld::get_erp(void) const;

701 7 get_cfm 0 4 1268 17 OdeWorld::get_cfm 0 1 22 0
43
inline float OdeWorld::get_cfm(void) const;

702 29 get_quick_step_num_iterations 0 4 1268 39 OdeWorld::get_quick_step_num_iterations 0 1 23 0
63
inline int OdeWorld::get_quick_step_num_iterations(void) const;

703 16 get_quick_step_w 0 4 1268 26 OdeWorld::get_quick_step_w 0 1 24 0
52
inline float OdeWorld::get_quick_step_w(void) const;

704 30 get_contact_max_correcting_vel 0 4 1268 40 OdeWorld::get_contact_max_correcting_vel 0 1 25 0
66
inline float OdeWorld::get_contact_max_correcting_vel(void) const;

705 25 get_contact_surface_layer 0 4 1268 35 OdeWorld::get_contact_surface_layer 0 1 26 0
61
inline float OdeWorld::get_contact_surface_layer(void) const;

706 25 get_auto_enable_depth_sf1 0 4 1268 35 OdeWorld::get_auto_enable_depth_sf1 0 1 27 0
59
inline int OdeWorld::get_auto_enable_depth_sf1(void) const;

707 33 get_auto_disable_linear_threshold 0 4 1268 43 OdeWorld::get_auto_disable_linear_threshold 0 1 28 0
69
inline float OdeWorld::get_auto_disable_linear_threshold(void) const;

708 34 get_auto_disable_angular_threshold 0 4 1268 44 OdeWorld::get_auto_disable_angular_threshold 0 1 29 0
70
inline float OdeWorld::get_auto_disable_angular_threshold(void) const;

709 22 get_auto_disable_steps 0 4 1268 32 OdeWorld::get_auto_disable_steps 0 1 30 0
56
inline int OdeWorld::get_auto_disable_steps(void) const;

710 21 get_auto_disable_time 0 4 1268 31 OdeWorld::get_auto_disable_time 0 1 31 0
57
inline float OdeWorld::get_auto_disable_time(void) const;

711 21 get_auto_disable_flag 0 4 1268 31 OdeWorld::get_auto_disable_flag 0 1 32 0
55
inline int OdeWorld::get_auto_disable_flag(void) const;

712 16 impulse_to_force 0 4 1268 26 OdeWorld::impulse_to_force 0 2 33 34 0
180
inline LVecBase3f OdeWorld::impulse_to_force(float stepsize, float ix, float iy, float iz);
inline LVecBase3f OdeWorld::impulse_to_force(float stepsize, LVecBase3f const &impulse);

713 4 step 0 4 1268 14 OdeWorld::step 0 1 35 0
43
inline void OdeWorld::step(float stepsize);

714 10 quick_step 0 4 1268 20 OdeWorld::quick_step 0 1 36 0
49
inline void OdeWorld::quick_step(float stepsize);

715 10 step_fast1 0 4 1268 20 OdeWorld::step_fast1 0 1 37 0
68
inline void OdeWorld::step_fast1(float stepsize, int maxiterations);

716 10 compare_to 0 4 1268 20 OdeWorld::compare_to 0 1 38 0
61
inline int OdeWorld::compare_to(OdeWorld const &other) const;

717 18 init_surface_table 0 4 1268 28 OdeWorld::init_surface_table 0 1 39 0
62
void OdeWorld::init_surface_table(unsigned char num_surfaces);

718 18 add_body_dampening 0 4 1268 28 OdeWorld::add_body_dampening 0 1 40 55
//void assign_surface_body(OdeBody& body, int surface);
62
void OdeWorld::add_body_dampening(OdeBody &body, int surface);

719 17 set_surface_entry 0 4 1268 27 OdeWorld::set_surface_entry 0 1 41 55
//void assign_surface_body(OdeBody& body, int surface);
173
void OdeWorld::set_surface_entry(unsigned char pos1, unsigned char pos2, float mu, float bounce, float bounce_vel, float soft_erp, float soft_cfm, float slip, float dampen);

720 15 apply_dampening 0 4 1268 25 OdeWorld::apply_dampening 0 1 42 0
57
float OdeWorld::apply_dampening(float dt, OdeBody &body);

721 22 operator typecast bool 0 132 1268 32 OdeWorld::operator typecast bool 0 1 44 0
50
bool OdeWorld::operator typecast bool(void) const;

722 14 get_class_type 0 4 1268 24 OdeWorld::get_class_type 0 1 43 0
49
static TypeHandle OdeWorld::get_class_type(void);

723 13 OdeJointGroup 0 4 1270 28 OdeJointGroup::OdeJointGroup 0 1 45 0
35
OdeJointGroup::OdeJointGroup(void);

724 7 destroy 0 4 1270 22 OdeJointGroup::destroy 0 1 46 0
34
void OdeJointGroup::destroy(void);

725 6 get_id 0 4 1270 21 OdeJointGroup::get_id 0 1 47 491
// Filename: odeJointGroup.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
55
inline dxJointGroup *OdeJointGroup::get_id(void) const;

726 5 empty 0 4 1270 20 OdeJointGroup::empty 0 1 48 0
45
inline void OdeJointGroup::empty(void) const;

727 10 compare_to 0 4 1270 25 OdeJointGroup::compare_to 0 1 49 0
71
inline int OdeJointGroup::compare_to(OdeJointGroup const &other) const;

728 14 get_class_type 0 4 1270 29 OdeJointGroup::get_class_type 0 1 50 0
54
static TypeHandle OdeJointGroup::get_class_type(void);

729 10 get_force1 0 4 1271 28 OdeJointFeedback::get_force1 0 1 51 0
64
inline LVector3f const OdeJointFeedback::get_force1(void) const;

730 10 get_force2 0 4 1271 28 OdeJointFeedback::get_force2 0 1 52 0
64
inline LVector3f const OdeJointFeedback::get_force2(void) const;

731 11 get_torque1 0 4 1271 29 OdeJointFeedback::get_torque1 0 1 53 0
65
inline LVector3f const OdeJointFeedback::get_torque1(void) const;

732 11 get_torque2 0 4 1271 29 OdeJointFeedback::get_torque2 0 1 54 0
65
inline LVector3f const OdeJointFeedback::get_torque2(void) const;

733 17 ~OdeJointFeedback 0 4 1271 35 OdeJointFeedback::~OdeJointFeedback 0 0 0
42
OdeJointFeedback::~OdeJointFeedback(void);

734 7 destroy 0 4 1273 17 OdeJoint::destroy 0 1 55 0
29
void OdeJoint::destroy(void);

735 8 is_empty 0 4 1273 18 OdeJoint::is_empty 0 1 56 942
// Filename: odeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeJoint
//               does not point to a valid joint. It is an error to
//               call a method on an empty joint.
//               Note that an empty OdeJoint also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeJoint::is_empty(void) const;

736 6 get_id 0 4 1273 16 OdeJoint::get_id 0 1 57 248
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::get_id
//       Access: Published
//  Description: Returns the underlying dJointID.
////////////////////////////////////////////////////////////////////
45
inline dxJoint *OdeJoint::get_id(void) const;

737 14 get_joint_type 0 4 1273 24 OdeJoint::get_joint_type 0 1 58 30
/* INLINE void *get_data(); */
48
inline int OdeJoint::get_joint_type(void) const;

738 8 get_body 0 4 1273 18 OdeJoint::get_body 0 1 59 0
44
OdeBody OdeJoint::get_body(int index) const;

739 12 set_feedback 0 4 1273 22 OdeJoint::set_feedback 0 3 60 61 62 0
108
inline void OdeJoint::set_feedback(OdeJointFeedback *);
inline void OdeJoint::set_feedback(bool flag = (1));

740 12 get_feedback 0 4 1273 22 OdeJoint::get_feedback 0 1 63 0
54
inline OdeJointFeedback *OdeJoint::get_feedback(void);

741 13 attach_bodies 0 4 1273 23 OdeJoint::attach_bodies 0 1 64 430
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_bodies
//       Access: Published
//  Description: Attaches two OdeBody objects to this joint.
//               Order is important.
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
////////////////////////////////////////////////////////////////////
73
void OdeJoint::attach_bodies(OdeBody const &body1, OdeBody const &body2);

742 11 attach_body 0 4 1273 21 OdeJoint::attach_body 0 1 65 511
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_body
//       Access: Published
//  Description: Attaches a single OdeBody to this joint at the
//               specified index (0 or 1).  The other index will be 
//               set to the environment (null).
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
////////////////////////////////////////////////////////////////////
59
void OdeJoint::attach_body(OdeBody const &body, int index);

743 6 detach 0 4 1273 16 OdeJoint::detach 0 1 66 0
28
void OdeJoint::detach(void);

744 5 write 0 4 1273 15 OdeJoint::write 0 3 67 68 69 0
85
virtual void OdeJoint::write(ostream &out = (cout), unsigned int indent = (0)) const;

745 10 compare_to 0 4 1273 20 OdeJoint::compare_to 0 1 70 0
61
inline int OdeJoint::compare_to(OdeJoint const &other) const;

746 11 operator == 0 4 1273 21 OdeJoint::operator == 0 1 71 0
63
inline bool OdeJoint::operator ==(OdeJoint const &other) const;

747 22 operator typecast bool 0 132 1273 32 OdeJoint::operator typecast bool 0 1 84 0
50
bool OdeJoint::operator typecast bool(void) const;

748 15 convert_to_ball 0 4 1273 25 OdeJoint::convert_to_ball 0 1 72 0
51
OdeBallJoint OdeJoint::convert_to_ball(void) const;

749 16 convert_to_hinge 0 4 1273 26 OdeJoint::convert_to_hinge 0 1 73 0
53
OdeHingeJoint OdeJoint::convert_to_hinge(void) const;

750 17 convert_to_slider 0 4 1273 27 OdeJoint::convert_to_slider 0 1 74 0
55
OdeSliderJoint OdeJoint::convert_to_slider(void) const;

751 18 convert_to_contact 0 4 1273 28 OdeJoint::convert_to_contact 0 1 75 0
57
OdeContactJoint OdeJoint::convert_to_contact(void) const;

752 20 convert_to_universal 0 4 1273 30 OdeJoint::convert_to_universal 0 1 76 0
61
OdeUniversalJoint OdeJoint::convert_to_universal(void) const;

753 17 convert_to_hinge2 0 4 1273 27 OdeJoint::convert_to_hinge2 0 1 77 0
55
OdeHinge2Joint OdeJoint::convert_to_hinge2(void) const;

754 16 convert_to_fixed 0 4 1273 26 OdeJoint::convert_to_fixed 0 1 78 0
53
OdeFixedJoint OdeJoint::convert_to_fixed(void) const;

755 15 convert_to_null 0 4 1273 25 OdeJoint::convert_to_null 0 1 79 0
51
OdeNullJoint OdeJoint::convert_to_null(void) const;

756 18 convert_to_a_motor 0 4 1273 28 OdeJoint::convert_to_a_motor 0 1 80 0
56
OdeAMotorJoint OdeJoint::convert_to_a_motor(void) const;

757 18 convert_to_l_motor 0 4 1273 28 OdeJoint::convert_to_l_motor 0 1 81 0
56
OdeLMotorJoint OdeJoint::convert_to_l_motor(void) const;

758 18 convert_to_plane2d 0 4 1273 28 OdeJoint::convert_to_plane2d 0 1 82 0
57
OdePlane2dJoint OdeJoint::convert_to_plane2d(void) const;

759 14 get_class_type 0 4 1273 24 OdeJoint::get_class_type 0 1 83 0
49
static TypeHandle OdeJoint::get_class_type(void);

760 14 OdeAMotorJoint 0 4 1275 30 OdeAMotorJoint::OdeAMotorJoint 0 2 85 86 0
125
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world);
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

761 12 set_num_axes 0 4 1275 28 OdeAMotorJoint::set_num_axes 0 1 87 492
// Filename: odeAMotorJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
50
inline void OdeAMotorJoint::set_num_axes(int num);

762 8 set_axis 0 4 1275 24 OdeAMotorJoint::set_axis 0 2 88 89 0
164
inline void OdeAMotorJoint::set_axis(int anum, int rel, float x, float y, float z);
inline void OdeAMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

763 9 set_angle 0 4 1275 25 OdeAMotorJoint::set_angle 0 1 90 0
61
inline void OdeAMotorJoint::set_angle(int anum, float angle);

764 8 set_mode 0 4 1275 24 OdeAMotorJoint::set_mode 0 1 91 0
47
inline void OdeAMotorJoint::set_mode(int mode);

765 11 add_torques 0 4 1275 27 OdeAMotorJoint::add_torques 0 1 92 0
85
inline void OdeAMotorJoint::add_torques(float torque1, float torque2, float torque3);

766 12 get_num_axes 0 4 1275 28 OdeAMotorJoint::get_num_axes 0 1 93 0
52
inline int OdeAMotorJoint::get_num_axes(void) const;

767 8 get_axis 0 4 1275 24 OdeAMotorJoint::get_axis 0 1 94 0
59
inline LVecBase3f OdeAMotorJoint::get_axis(int anum) const;

768 12 get_axis_rel 0 4 1275 28 OdeAMotorJoint::get_axis_rel 0 1 95 0
56
inline int OdeAMotorJoint::get_axis_rel(int anum) const;

769 9 get_angle 0 4 1275 25 OdeAMotorJoint::get_angle 0 1 96 0
55
inline float OdeAMotorJoint::get_angle(int anum) const;

770 14 get_angle_rate 0 4 1275 30 OdeAMotorJoint::get_angle_rate 0 1 97 0
60
inline float OdeAMotorJoint::get_angle_rate(int anum) const;

771 8 get_mode 0 4 1275 24 OdeAMotorJoint::get_mode 0 1 98 0
48
inline int OdeAMotorJoint::get_mode(void) const;

772 17 set_param_lo_stop 0 4 1275 33 OdeAMotorJoint::set_param_lo_stop 0 1 99 0
67
inline void OdeAMotorJoint::set_param_lo_stop(int axis, float val);

773 17 set_param_hi_stop 0 4 1275 33 OdeAMotorJoint::set_param_hi_stop 0 1 100 0
67
inline void OdeAMotorJoint::set_param_hi_stop(int axis, float val);

774 13 set_param_vel 0 4 1275 29 OdeAMotorJoint::set_param_vel 0 1 101 0
63
inline void OdeAMotorJoint::set_param_vel(int axis, float val);

775 15 set_param_f_max 0 4 1275 31 OdeAMotorJoint::set_param_f_max 0 1 102 0
65
inline void OdeAMotorJoint::set_param_f_max(int axis, float val);

776 22 set_param_fudge_factor 0 4 1275 38 OdeAMotorJoint::set_param_fudge_factor 0 1 103 0
72
inline void OdeAMotorJoint::set_param_fudge_factor(int axis, float val);

777 16 set_param_bounce 0 4 1275 32 OdeAMotorJoint::set_param_bounce 0 1 104 0
66
inline void OdeAMotorJoint::set_param_bounce(int axis, float val);

778 13 set_param_CFM 0 4 1275 29 OdeAMotorJoint::set_param_CFM 0 1 105 0
63
inline void OdeAMotorJoint::set_param_CFM(int axis, float val);

779 18 set_param_stop_ERP 0 4 1275 34 OdeAMotorJoint::set_param_stop_ERP 0 1 106 0
68
inline void OdeAMotorJoint::set_param_stop_ERP(int axis, float val);

780 18 set_param_stop_CFM 0 4 1275 34 OdeAMotorJoint::set_param_stop_CFM 0 1 107 0
68
inline void OdeAMotorJoint::set_param_stop_CFM(int axis, float val);

781 17 get_param_lo_stop 0 4 1275 33 OdeAMotorJoint::get_param_lo_stop 0 1 108 0
63
inline float OdeAMotorJoint::get_param_lo_stop(int axis) const;

782 17 get_param_hi_stop 0 4 1275 33 OdeAMotorJoint::get_param_hi_stop 0 1 109 0
63
inline float OdeAMotorJoint::get_param_hi_stop(int axis) const;

783 13 get_param_vel 0 4 1275 29 OdeAMotorJoint::get_param_vel 0 1 110 0
59
inline float OdeAMotorJoint::get_param_vel(int axis) const;

784 15 get_param_f_max 0 4 1275 31 OdeAMotorJoint::get_param_f_max 0 1 111 0
61
inline float OdeAMotorJoint::get_param_f_max(int axis) const;

785 22 get_param_fudge_factor 0 4 1275 38 OdeAMotorJoint::get_param_fudge_factor 0 1 112 0
68
inline float OdeAMotorJoint::get_param_fudge_factor(int axis) const;

786 16 get_param_bounce 0 4 1275 32 OdeAMotorJoint::get_param_bounce 0 1 113 0
62
inline float OdeAMotorJoint::get_param_bounce(int axis) const;

787 13 get_param_CFM 0 4 1275 29 OdeAMotorJoint::get_param_CFM 0 1 114 0
59
inline float OdeAMotorJoint::get_param_CFM(int axis) const;

788 18 get_param_stop_ERP 0 4 1275 34 OdeAMotorJoint::get_param_stop_ERP 0 1 115 0
64
inline float OdeAMotorJoint::get_param_stop_ERP(int axis) const;

789 18 get_param_stop_CFM 0 4 1275 34 OdeAMotorJoint::get_param_stop_CFM 0 1 116 0
64
inline float OdeAMotorJoint::get_param_stop_CFM(int axis) const;

790 14 get_class_type 0 4 1275 30 OdeAMotorJoint::get_class_type 0 1 117 0
55
static TypeHandle OdeAMotorJoint::get_class_type(void);

791 12 OdeBallJoint 0 4 1276 26 OdeBallJoint::OdeBallJoint 0 2 118 119 0
117
OdeBallJoint::OdeBallJoint(OdeWorld &world);
OdeBallJoint::OdeBallJoint(OdeWorld &world, OdeJointGroup &joint_group);

792 10 set_anchor 0 4 1276 24 OdeBallJoint::set_anchor 0 2 120 121 490
// Filename: odeBallJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
128
inline void OdeBallJoint::set_anchor(float x, float y, float z);
inline void OdeBallJoint::set_anchor(LVecBase3f const &anchor);

793 11 set_anchor2 0 4 1276 25 OdeBallJoint::set_anchor2 0 2 122 123 0
130
inline void OdeBallJoint::set_anchor2(float x, float y, float z);
inline void OdeBallJoint::set_anchor2(LVecBase3f const &anchor);

794 10 get_anchor 0 4 1276 24 OdeBallJoint::get_anchor 0 1 124 0
55
inline LVecBase3f OdeBallJoint::get_anchor(void) const;

795 11 get_anchor2 0 4 1276 25 OdeBallJoint::get_anchor2 0 1 125 0
56
inline LVecBase3f OdeBallJoint::get_anchor2(void) const;

796 14 get_class_type 0 4 1276 28 OdeBallJoint::get_class_type 0 1 126 0
53
static TypeHandle OdeBallJoint::get_class_type(void);

797 7 OdeMass 0 4 1277 16 OdeMass::OdeMass 0 2 127 128 0
62
OdeMass::OdeMass(void);
OdeMass::OdeMass(OdeMass const &copy);

798 5 check 0 4 1277 14 OdeMass::check 0 1 129 485
// Filename: odeMass.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
32
inline int OdeMass::check(void);

799 8 set_zero 0 4 1277 17 OdeMass::set_zero 0 1 130 0
36
inline void OdeMass::set_zero(void);

800 14 set_parameters 0 4 1277 23 OdeMass::set_parameters 0 2 131 132 0
248
inline void OdeMass::set_parameters(float themass, float cgx, float cgy, float cgz, float I11, float I22, float I33, float I12, float I13, float I23);
inline void OdeMass::set_parameters(float themass, LVecBase3f const &center, LMatrix3f const &r);

801 10 set_sphere 0 4 1277 19 OdeMass::set_sphere 0 1 133 0
61
inline void OdeMass::set_sphere(float density, float radius);

802 16 set_sphere_total 0 4 1277 25 OdeMass::set_sphere_total 0 1 134 0
70
inline void OdeMass::set_sphere_total(float total_mass, float radius);

803 11 set_capsule 0 4 1277 20 OdeMass::set_capsule 0 1 135 0
91
inline void OdeMass::set_capsule(float density, int direction, float radius, float length);

804 17 set_capsule_total 0 4 1277 26 OdeMass::set_capsule_total 0 1 136 0
100
inline void OdeMass::set_capsule_total(float total_mass, int direction, float radius, float length);

805 12 set_cylinder 0 4 1277 21 OdeMass::set_cylinder 0 1 137 0
92
inline void OdeMass::set_cylinder(float density, int direction, float radius, float length);

806 18 set_cylinder_total 0 4 1277 27 OdeMass::set_cylinder_total 0 1 138 0
101
inline void OdeMass::set_cylinder_total(float total_mass, int direction, float radius, float length);

807 7 set_box 0 4 1277 16 OdeMass::set_box 0 2 139 140 0
143
inline void OdeMass::set_box(float density, float lx, float ly, float lz);
inline void OdeMass::set_box(float density, LVecBase3f const &size);

808 13 set_box_total 0 4 1277 22 OdeMass::set_box_total 0 2 141 142 0
161
inline void OdeMass::set_box_total(float total_mass, float lx, float ly, float lz);
inline void OdeMass::set_box_total(float total_mass, LVecBase3f const &size);

809 6 adjust 0 4 1277 15 OdeMass::adjust 0 1 143 0
43
inline void OdeMass::adjust(float newmass);

810 9 translate 0 4 1277 18 OdeMass::translate 0 2 144 145 0
113
inline void OdeMass::translate(float x, float y, float z);
inline void OdeMass::translate(LVecBase3f const &pos);

811 6 rotate 0 4 1277 15 OdeMass::rotate 0 1 146 0
48
inline void OdeMass::rotate(LMatrix3f const &r);

812 3 add 0 4 1277 12 OdeMass::add 0 1 147 0
41
inline void OdeMass::add(OdeMass &other);

813 13 get_magnitude 0 4 1277 22 OdeMass::get_magnitude 0 1 148 0
48
inline float OdeMass::get_magnitude(void) const;

814 10 get_center 0 4 1277 19 OdeMass::get_center 0 1 149 0
48
inline LPoint3f OdeMass::get_center(void) const;

815 19 get_inertial_tensor 0 4 1277 28 OdeMass::get_inertial_tensor 0 1 150 0
58
inline LMatrix3f OdeMass::get_inertial_tensor(void) const;

816 5 write 0 4 1277 14 OdeMass::write 0 3 151 152 153 0
84
virtual void OdeMass::write(ostream &out = (cout), unsigned int indent = (0)) const;

817 14 get_class_type 0 4 1277 23 OdeMass::get_class_type 0 1 154 0
48
static TypeHandle OdeMass::get_class_type(void);

818 7 OdeBody 0 4 1279 16 OdeBody::OdeBody 0 1 155 0
34
OdeBody::OdeBody(OdeWorld &world);

819 7 destroy 0 4 1279 16 OdeBody::destroy 0 1 156 0
28
void OdeBody::destroy(void);

820 8 is_empty 0 4 1279 17 OdeBody::is_empty 0 1 157 936
// Filename: odeBody.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeBody
//               does not point to a valid body. It is an error to
//               call a method on an empty body.
//               Note that an empty OdeBody also evaluates to False.
////////////////////////////////////////////////////////////////////
42
inline bool OdeBody::is_empty(void) const;

821 6 get_id 0 4 1279 15 OdeBody::get_id 0 1 158 246
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::get_id
//       Access: Published
//  Description: Returns the underlying dBodyID.
////////////////////////////////////////////////////////////////////
43
inline dxBody *OdeBody::get_id(void) const;

822 33 set_auto_disable_linear_threshold 0 4 1279 42 OdeBody::set_auto_disable_linear_threshold 0 1 159 0
79
inline void OdeBody::set_auto_disable_linear_threshold(float linear_threshold);

823 34 set_auto_disable_angular_threshold 0 4 1279 43 OdeBody::set_auto_disable_angular_threshold 0 1 160 0
81
inline void OdeBody::set_auto_disable_angular_threshold(float angular_threshold);

824 22 set_auto_disable_steps 0 4 1279 31 OdeBody::set_auto_disable_steps 0 1 161 0
55
inline void OdeBody::set_auto_disable_steps(int steps);

825 21 set_auto_disable_time 0 4 1279 30 OdeBody::set_auto_disable_time 0 1 162 0
55
inline void OdeBody::set_auto_disable_time(float time);

826 21 set_auto_disable_flag 0 4 1279 30 OdeBody::set_auto_disable_flag 0 1 163 0
64
inline void OdeBody::set_auto_disable_flag(int do_auto_disable);

827 25 set_auto_disable_defaults 0 4 1279 34 OdeBody::set_auto_disable_defaults 0 1 164 0
53
inline void OdeBody::set_auto_disable_defaults(void);

828 8 set_data 0 4 1279 17 OdeBody::set_data 0 1 165 0
89
inline void OdeBody::set_data(void *data);
inline void OdeBody::set_data(PyObject *data);

829 12 set_position 0 4 1279 21 OdeBody::set_position 0 2 166 167 0
119
inline void OdeBody::set_position(float x, float y, float z);
inline void OdeBody::set_position(LVecBase3f const &pos);

830 12 set_rotation 0 4 1279 21 OdeBody::set_rotation 0 1 168 0
54
inline void OdeBody::set_rotation(LMatrix3f const &r);

831 14 set_quaternion 0 4 1279 23 OdeBody::set_quaternion 0 1 169 0
59
inline void OdeBody::set_quaternion(LQuaternionf const &q);

832 14 set_linear_vel 0 4 1279 23 OdeBody::set_linear_vel 0 2 170 171 0
123
inline void OdeBody::set_linear_vel(float x, float y, float z);
inline void OdeBody::set_linear_vel(LVecBase3f const &vel);

833 15 set_angular_vel 0 4 1279 24 OdeBody::set_angular_vel 0 2 172 173 0
125
inline void OdeBody::set_angular_vel(float x, float y, float z);
inline void OdeBody::set_angular_vel(LVecBase3f const &vel);

834 8 set_mass 0 4 1279 17 OdeBody::set_mass 0 1 174 0
45
inline void OdeBody::set_mass(OdeMass &mass);

835 33 get_auto_disable_linear_threshold 0 4 1279 42 OdeBody::get_auto_disable_linear_threshold 0 1 175 0
68
inline float OdeBody::get_auto_disable_linear_threshold(void) const;

836 34 get_auto_disable_angular_threshold 0 4 1279 43 OdeBody::get_auto_disable_angular_threshold 0 1 176 0
69
inline float OdeBody::get_auto_disable_angular_threshold(void) const;

837 22 get_auto_disable_steps 0 4 1279 31 OdeBody::get_auto_disable_steps 0 1 177 0
55
inline int OdeBody::get_auto_disable_steps(void) const;

838 21 get_auto_disable_time 0 4 1279 30 OdeBody::get_auto_disable_time 0 1 178 0
56
inline float OdeBody::get_auto_disable_time(void) const;

839 21 get_auto_disable_flag 0 4 1279 30 OdeBody::get_auto_disable_flag 0 1 179 0
54
inline int OdeBody::get_auto_disable_flag(void) const;

840 8 get_data 0 4 1279 17 OdeBody::get_data 0 1 180 0
47
inline PyObject *OdeBody::get_data(void) const;

841 12 get_position 0 4 1279 21 OdeBody::get_position 0 1 181 0
52
inline LVecBase3f OdeBody::get_position(void) const;

842 12 get_rotation 0 4 1279 21 OdeBody::get_rotation 0 1 182 0
51
inline LMatrix3f OdeBody::get_rotation(void) const;

843 14 get_quaternion 0 4 1279 23 OdeBody::get_quaternion 0 1 183 0
54
inline LVecBase4f OdeBody::get_quaternion(void) const;

844 14 get_linear_vel 0 4 1279 23 OdeBody::get_linear_vel 0 1 184 0
54
inline LVecBase3f OdeBody::get_linear_vel(void) const;

845 15 get_angular_vel 0 4 1279 24 OdeBody::get_angular_vel 0 1 185 0
55
inline LVecBase3f OdeBody::get_angular_vel(void) const;

846 8 get_mass 0 4 1279 17 OdeBody::get_mass 0 1 186 0
45
inline OdeMass OdeBody::get_mass(void) const;

847 9 add_force 0 4 1279 18 OdeBody::add_force 0 2 187 188 0
114
inline void OdeBody::add_force(float fx, float fy, float fz);
inline void OdeBody::add_force(LVecBase3f const &f);

848 10 add_torque 0 4 1279 19 OdeBody::add_torque 0 2 189 190 0
116
inline void OdeBody::add_torque(float fx, float fy, float fz);
inline void OdeBody::add_torque(LVecBase3f const &f);

849 13 add_rel_force 0 4 1279 22 OdeBody::add_rel_force 0 2 191 192 0
122
inline void OdeBody::add_rel_force(float fx, float fy, float fz);
inline void OdeBody::add_rel_force(LVecBase3f const &f);

850 14 add_rel_torque 0 4 1279 23 OdeBody::add_rel_torque 0 2 193 194 0
124
inline void OdeBody::add_rel_torque(float fx, float fy, float fz);
inline void OdeBody::add_rel_torque(LVecBase3f const &f);

851 16 add_force_at_pos 0 4 1279 25 OdeBody::add_force_at_pos 0 2 195 196 0
181
inline void OdeBody::add_force_at_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

852 20 add_force_at_rel_pos 0 4 1279 29 OdeBody::add_force_at_rel_pos 0 2 197 198 0
189
inline void OdeBody::add_force_at_rel_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

853 20 add_rel_force_at_pos 0 4 1279 29 OdeBody::add_rel_force_at_pos 0 2 199 200 0
189
inline void OdeBody::add_rel_force_at_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_rel_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

854 24 add_rel_force_at_rel_pos 0 4 1279 33 OdeBody::add_rel_force_at_rel_pos 0 2 201 202 0
197
inline void OdeBody::add_rel_force_at_rel_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_rel_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

855 9 set_force 0 4 1279 18 OdeBody::set_force 0 2 203 204 0
111
inline void OdeBody::set_force(float x, float y, float z);
inline void OdeBody::set_force(LVecBase3f const &f);

856 10 set_torque 0 4 1279 19 OdeBody::set_torque 0 2 205 206 0
113
inline void OdeBody::set_torque(float x, float y, float z);
inline void OdeBody::set_torque(LVecBase3f const &f);

857 17 get_rel_point_pos 0 4 1279 26 OdeBody::get_rel_point_pos 0 2 207 208 0
152
inline LPoint3f OdeBody::get_rel_point_pos(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_rel_point_pos(LVecBase3f const &pos) const;

858 17 get_rel_point_vel 0 4 1279 26 OdeBody::get_rel_point_vel 0 2 209 210 0
152
inline LPoint3f OdeBody::get_rel_point_vel(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_rel_point_vel(LVecBase3f const &pos) const;

859 13 get_point_vel 0 4 1279 22 OdeBody::get_point_vel 0 2 211 212 0
144
inline LPoint3f OdeBody::get_point_vel(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_point_vel(LVecBase3f const &pos) const;

860 17 get_pos_rel_point 0 4 1279 26 OdeBody::get_pos_rel_point 0 2 213 214 0
152
inline LPoint3f OdeBody::get_pos_rel_point(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_pos_rel_point(LVecBase3f const &pos) const;

861 15 vector_to_world 0 4 1279 24 OdeBody::vector_to_world 0 2 215 216 0
152
inline LVecBase3f OdeBody::vector_to_world(float px, float py, float pz) const;
inline LVecBase3f OdeBody::vector_to_world(LVecBase3f const &pos) const;

862 17 vector_from_world 0 4 1279 26 OdeBody::vector_from_world 0 2 217 218 0
156
inline LVecBase3f OdeBody::vector_from_world(float px, float py, float pz) const;
inline LVecBase3f OdeBody::vector_from_world(LVecBase3f const &pos) const;

863 24 set_finite_rotation_mode 0 4 1279 33 OdeBody::set_finite_rotation_mode 0 1 219 0
56
inline void OdeBody::set_finite_rotation_mode(int mode);

864 24 set_finite_rotation_axis 0 4 1279 33 OdeBody::set_finite_rotation_axis 0 2 220 221 0
144
inline void OdeBody::set_finite_rotation_axis(float x, float y, float z);
inline void OdeBody::set_finite_rotation_axis(LVecBase3f const &axis);

865 24 get_finite_rotation_mode 0 4 1279 33 OdeBody::get_finite_rotation_mode 0 1 222 0
57
inline int OdeBody::get_finite_rotation_mode(void) const;

866 24 get_finite_rotation_axis 0 4 1279 33 OdeBody::get_finite_rotation_axis 0 1 223 0
64
inline LVecBase3f OdeBody::get_finite_rotation_axis(void) const;

867 14 get_num_joints 0 4 1279 23 OdeBody::get_num_joints 0 1 224 0
47
inline int OdeBody::get_num_joints(void) const;

868 9 get_joint 0 4 1279 18 OdeBody::get_joint 0 1 225 0
45
OdeJoint OdeBody::get_joint(int index) const;

869 6 enable 0 4 1279 15 OdeBody::enable 0 1 226 0
34
inline void OdeBody::enable(void);

870 7 disable 0 4 1279 16 OdeBody::disable 0 1 227 0
35
inline void OdeBody::disable(void);

871 10 is_enabled 0 4 1279 19 OdeBody::is_enabled 0 1 228 0
43
inline int OdeBody::is_enabled(void) const;

872 16 set_gravity_mode 0 4 1279 25 OdeBody::set_gravity_mode 0 1 229 0
48
inline void OdeBody::set_gravity_mode(int mode);

873 16 get_gravity_mode 0 4 1279 25 OdeBody::get_gravity_mode 0 1 230 0
49
inline int OdeBody::get_gravity_mode(void) const;

874 5 write 0 4 1279 14 OdeBody::write 0 3 231 232 233 0
84
virtual void OdeBody::write(ostream &out = (cout), unsigned int indent = (0)) const;

875 22 operator typecast bool 0 132 1279 31 OdeBody::operator typecast bool 0 1 236 0
49
bool OdeBody::operator typecast bool(void) const;

876 10 compare_to 0 4 1279 19 OdeBody::compare_to 0 1 234 0
59
inline int OdeBody::compare_to(OdeBody const &other) const;

877 14 get_class_type 0 4 1279 23 OdeBody::get_class_type 0 1 235 0
48
static TypeHandle OdeBody::get_class_type(void);

878 7 destroy 0 4 1280 17 OdeSpace::destroy 0 1 237 0
29
void OdeSpace::destroy(void);

879 8 is_empty 0 4 1280 18 OdeSpace::is_empty 0 1 238 942
// Filename: odeSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeSpace::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeSpace
//               does not point to a valid space. It is an error to
//               call a method on an empty space.
//               Note that an empty OdeSpace also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeSpace::is_empty(void) const;

880 11 set_cleanup 0 4 1280 21 OdeSpace::set_cleanup 0 1 239 0
44
inline void OdeSpace::set_cleanup(int mode);

881 11 get_cleanup 0 4 1280 21 OdeSpace::get_cleanup 0 1 240 0
45
inline int OdeSpace::get_cleanup(void) const;

882 5 query 0 4 1280 15 OdeSpace::query 0 2 241 242 0
97
int OdeSpace::query(OdeGeom const &geom) const;
int OdeSpace::query(OdeSpace const &space) const;

883 13 get_num_geoms 0 4 1280 23 OdeSpace::get_num_geoms 0 1 243 0
47
inline int OdeSpace::get_num_geoms(void) const;

884 8 get_AABB 0 4 1280 18 OdeSpace::get_AABB 0 1 244 0
71
inline void OdeSpace::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

885 8 is_space 0 4 1280 18 OdeSpace::is_space 0 1 245 0
36
inline int OdeSpace::is_space(void);

886 9 get_class 0 4 1280 19 OdeSpace::get_class 0 1 246 0
43
inline int OdeSpace::get_class(void) const;

887 17 set_category_bits 0 4 1280 27 OdeSpace::set_category_bits 0 1 247 0
81
inline void OdeSpace::set_category_bits(BitMask< unsigned int, 32 > const &bits);

888 16 set_collide_bits 0 4 1280 26 OdeSpace::set_collide_bits 0 1 248 0
80
inline void OdeSpace::set_collide_bits(BitMask< unsigned int, 32 > const &bits);

889 17 get_category_bits 0 4 1280 27 OdeSpace::get_category_bits 0 1 249 0
69
inline BitMask< unsigned int, 32 > OdeSpace::get_category_bits(void);

890 16 get_collide_bits 0 4 1280 26 OdeSpace::get_collide_bits 0 1 250 0
68
inline BitMask< unsigned int, 32 > OdeSpace::get_collide_bits(void);

891 6 enable 0 4 1280 16 OdeSpace::enable 0 1 251 0
35
inline void OdeSpace::enable(void);

892 7 disable 0 4 1280 17 OdeSpace::disable 0 1 252 0
36
inline void OdeSpace::disable(void);

893 10 is_enabled 0 4 1280 20 OdeSpace::is_enabled 0 1 253 0
38
inline int OdeSpace::is_enabled(void);

894 22 set_auto_collide_world 0 4 1280 32 OdeSpace::set_auto_collide_world 0 1 254 0
50
void OdeSpace::set_auto_collide_world(OdeWorld &);

895 28 set_auto_collide_joint_group 0 4 1280 38 OdeSpace::set_auto_collide_joint_group 0 1 255 0
61
void OdeSpace::set_auto_collide_joint_group(OdeJointGroup &);

896 3 add 0 4 1280 13 OdeSpace::add 0 2 256 257 0
71
void OdeSpace::add(OdeGeom &geom);
void OdeSpace::add(OdeSpace &space);

897 6 remove 0 4 1280 16 OdeSpace::remove 0 2 258 259 0
77
void OdeSpace::remove(OdeGeom &geom);
void OdeSpace::remove(OdeSpace &space);

898 5 clean 0 4 1280 15 OdeSpace::clean 0 1 260 0
27
void OdeSpace::clean(void);

899 8 get_geom 0 4 1280 18 OdeSpace::get_geom 0 1 261 0
34
OdeGeom OdeSpace::get_geom(int i);

900 9 get_space 0 4 1280 19 OdeSpace::get_space 0 1 262 104
// Not INLINE because of forward declaration
//static int get_surface_type(OdeSpace * self, dGeomID o1);
48
inline OdeSpace OdeSpace::get_space(void) const;

901 5 write 0 4 1280 15 OdeSpace::write 0 3 263 264 265 0
85
virtual void OdeSpace::write(ostream &out = (cout), unsigned int indent = (0)) const;

902 22 operator typecast bool 0 132 1280 32 OdeSpace::operator typecast bool 0 1 285 0
50
bool OdeSpace::operator typecast bool(void) const;

903 23 convert_to_simple_space 0 4 1280 33 OdeSpace::convert_to_simple_space 0 1 266 0
61
OdeSimpleSpace OdeSpace::convert_to_simple_space(void) const;

904 21 convert_to_hash_space 0 4 1280 31 OdeSpace::convert_to_hash_space 0 1 267 0
57
OdeHashSpace OdeSpace::convert_to_hash_space(void) const;

905 26 convert_to_quad_tree_space 0 4 1280 36 OdeSpace::convert_to_quad_tree_space 0 1 268 0
66
OdeQuadTreeSpace OdeSpace::convert_to_quad_tree_space(void) const;

906 12 auto_collide 0 4 1280 22 OdeSpace::auto_collide 0 1 269 0
33
int OdeSpace::auto_collide(void);

907 7 collide 0 4 1280 17 OdeSpace::collide 0 1 270 0
62
int OdeSpace::collide(PyObject *arg, PyObject *near_callback);

908 16 get_contact_data 0 4 1280 26 OdeSpace::get_contact_data 0 1 271 0
57
static double OdeSpace::get_contact_data(int data_index);

909 14 get_contact_id 0 4 1280 24 OdeSpace::get_contact_id 0 2 272 273 0
62
int OdeSpace::get_contact_id(int data_index, int first = (0));

910 14 set_collide_id 0 4 1280 24 OdeSpace::set_collide_id 0 2 274 275 0
118
int OdeSpace::set_collide_id(int collide_id, dxGeom *id);
int OdeSpace::set_collide_id(OdeGeom &geom, int collide_id);

911 16 set_surface_type 0 4 1280 26 OdeSpace::set_surface_type 0 2 276 277 0
128
void OdeSpace::set_surface_type(int surface_type, dxGeom *id);
void OdeSpace::set_surface_type(OdeGeom &geom, int surface_type);

912 16 get_surface_type 0 4 1280 26 OdeSpace::get_surface_type 0 2 278 279 0
90
int OdeSpace::get_surface_type(dxGeom *o1);
int OdeSpace::get_surface_type(OdeGeom &geom);

913 14 get_collide_id 0 4 1280 24 OdeSpace::get_collide_id 0 2 280 281 0
86
int OdeSpace::get_collide_id(dxGeom *o1);
int OdeSpace::get_collide_id(OdeGeom &geom);

914 19 set_collision_event 0 4 1280 29 OdeSpace::set_collision_event 0 1 282 0
82
inline void OdeSpace::set_collision_event(basic_string< char > const &event_name);

915 19 get_collision_event 0 4 1280 29 OdeSpace::get_collision_event 0 1 283 0
64
inline basic_string< char > OdeSpace::get_collision_event(void);

916 14 get_class_type 0 4 1280 24 OdeSpace::get_class_type 0 1 284 0
49
static TypeHandle OdeSpace::get_class_type(void);

917 7 destroy 0 4 1281 16 OdeGeom::destroy 0 1 286 0
28
void OdeGeom::destroy(void);

918 8 is_empty 0 4 1281 17 OdeGeom::is_empty 0 1 287 936
// Filename: odeGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeGeom
//               does not point to a valid geom. It is an error to
//               call a method on an empty geom.
//               Note that an empty OdeGeom also evaluates to False.
////////////////////////////////////////////////////////////////////
42
inline bool OdeGeom::is_empty(void) const;

919 6 get_id 0 4 1281 15 OdeGeom::get_id 0 1 288 246
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::get_id
//       Access: Published
//  Description: Returns the underlying dGeomID.
////////////////////////////////////////////////////////////////////
43
inline dxGeom *OdeGeom::get_id(void) const;

920 8 set_body 0 4 1281 17 OdeGeom::set_body 0 1 289 35
//INLINE void set_data(void* data);
45
inline void OdeGeom::set_body(OdeBody &body);

921 8 has_body 0 4 1281 17 OdeGeom::has_body 0 1 290 35
//INLINE void set_data(void* data);
42
inline bool OdeGeom::has_body(void) const;

922 8 get_body 0 4 1281 17 OdeGeom::get_body 0 1 291 0
45
inline OdeBody OdeGeom::get_body(void) const;

923 12 set_position 0 4 1281 21 OdeGeom::set_position 0 2 292 293 0
119
inline void OdeGeom::set_position(float x, float y, float z);
inline void OdeGeom::set_position(LVecBase3f const &pos);

924 12 set_rotation 0 4 1281 21 OdeGeom::set_rotation 0 1 294 0
54
inline void OdeGeom::set_rotation(LMatrix3f const &r);

925 14 set_quaternion 0 4 1281 23 OdeGeom::set_quaternion 0 1 295 0
59
inline void OdeGeom::set_quaternion(LQuaternionf const &q);

926 12 get_position 0 4 1281 21 OdeGeom::get_position 0 1 296 0
50
inline LPoint3f OdeGeom::get_position(void) const;

927 12 get_rotation 0 4 1281 21 OdeGeom::get_rotation 0 1 297 0
51
inline LMatrix3f OdeGeom::get_rotation(void) const;

928 14 get_quaternion 0 4 1281 23 OdeGeom::get_quaternion 0 1 298 0
56
inline LQuaternionf OdeGeom::get_quaternion(void) const;

929 8 get_AABB 0 4 1281 17 OdeGeom::get_AABB 0 1 299 0
70
inline void OdeGeom::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

930 8 is_space 0 4 1281 17 OdeGeom::is_space 0 1 300 0
35
inline int OdeGeom::is_space(void);

931 9 get_class 0 4 1281 18 OdeGeom::get_class 0 1 301 0
42
inline int OdeGeom::get_class(void) const;

932 17 set_category_bits 0 4 1281 26 OdeGeom::set_category_bits 0 1 302 0
80
inline void OdeGeom::set_category_bits(BitMask< unsigned int, 32 > const &bits);

933 16 set_collide_bits 0 4 1281 25 OdeGeom::set_collide_bits 0 1 303 0
79
inline void OdeGeom::set_collide_bits(BitMask< unsigned int, 32 > const &bits);

934 17 get_category_bits 0 4 1281 26 OdeGeom::get_category_bits 0 1 304 0
68
inline BitMask< unsigned int, 32 > OdeGeom::get_category_bits(void);

935 16 get_collide_bits 0 4 1281 25 OdeGeom::get_collide_bits 0 1 305 0
67
inline BitMask< unsigned int, 32 > OdeGeom::get_collide_bits(void);

936 6 enable 0 4 1281 15 OdeGeom::enable 0 1 306 0
34
inline void OdeGeom::enable(void);

937 7 disable 0 4 1281 16 OdeGeom::disable 0 1 307 0
35
inline void OdeGeom::disable(void);

938 10 is_enabled 0 4 1281 19 OdeGeom::is_enabled 0 1 308 0
37
inline int OdeGeom::is_enabled(void);

939 19 set_offset_position 0 4 1281 28 OdeGeom::set_offset_position 0 2 309 310 0
133
inline void OdeGeom::set_offset_position(float x, float y, float z);
inline void OdeGeom::set_offset_position(LVecBase3f const &pos);

940 19 set_offset_rotation 0 4 1281 28 OdeGeom::set_offset_rotation 0 1 311 0
61
inline void OdeGeom::set_offset_rotation(LMatrix3f const &r);

941 21 set_offset_quaternion 0 4 1281 30 OdeGeom::set_offset_quaternion 0 1 312 0
66
inline void OdeGeom::set_offset_quaternion(LQuaternionf const &q);

942 25 set_offset_world_position 0 4 1281 34 OdeGeom::set_offset_world_position 0 2 313 314 0
145
inline void OdeGeom::set_offset_world_position(float x, float y, float z);
inline void OdeGeom::set_offset_world_position(LVecBase3f const &pos);

943 25 set_offset_world_rotation 0 4 1281 34 OdeGeom::set_offset_world_rotation 0 1 315 0
67
inline void OdeGeom::set_offset_world_rotation(LMatrix3f const &r);

944 27 set_offset_world_quaternion 0 4 1281 36 OdeGeom::set_offset_world_quaternion 0 1 316 0
72
inline void OdeGeom::set_offset_world_quaternion(LQuaternionf const &q);

945 12 clear_offset 0 4 1281 21 OdeGeom::clear_offset 0 1 317 0
40
inline void OdeGeom::clear_offset(void);

946 9 is_offset 0 4 1281 18 OdeGeom::is_offset 0 1 318 0
36
inline int OdeGeom::is_offset(void);

947 19 get_offset_position 0 4 1281 28 OdeGeom::get_offset_position 0 1 319 0
57
inline LPoint3f OdeGeom::get_offset_position(void) const;

948 19 get_offset_rotation 0 4 1281 28 OdeGeom::get_offset_rotation 0 1 320 0
58
inline LMatrix3f OdeGeom::get_offset_rotation(void) const;

949 21 get_offset_quaternion 0 4 1281 30 OdeGeom::get_offset_quaternion 0 1 321 0
63
inline LQuaternionf OdeGeom::get_offset_quaternion(void) const;

950 9 get_space 0 4 1281 18 OdeGeom::get_space 0 1 322 0
40
OdeSpace OdeGeom::get_space(void) const;

951 5 write 0 4 1281 14 OdeGeom::write 0 3 323 324 325 0
84
virtual void OdeGeom::write(ostream &out = (cout), unsigned int indent = (0)) const;

952 22 operator typecast bool 0 132 1281 31 OdeGeom::operator typecast bool 0 1 338 0
49
bool OdeGeom::operator typecast bool(void) const;

953 10 compare_to 0 4 1281 19 OdeGeom::compare_to 0 1 326 0
59
inline int OdeGeom::compare_to(OdeGeom const &other) const;

954 14 convert_to_box 0 4 1281 23 OdeGeom::convert_to_box 0 1 327 0
47
OdeBoxGeom OdeGeom::convert_to_box(void) const;

955 26 convert_to_capped_cylinder 0 4 1281 35 OdeGeom::convert_to_capped_cylinder 0 1 328 0
70
OdeCappedCylinderGeom OdeGeom::convert_to_capped_cylinder(void) const;

956 19 convert_to_cylinder 0 4 1281 28 OdeGeom::convert_to_cylinder 0 1 329 43
// OdeConvexGeom convert_to_convex() const;
57
OdeCylinderGeom OdeGeom::convert_to_cylinder(void) const;

957 16 convert_to_plane 0 4 1281 25 OdeGeom::convert_to_plane 0 1 330 53
// OdeHeightfieldGeom convert_to_heightfield() const;
51
OdePlaneGeom OdeGeom::convert_to_plane(void) const;

958 14 convert_to_ray 0 4 1281 23 OdeGeom::convert_to_ray 0 1 331 53
// OdeHeightfieldGeom convert_to_heightfield() const;
47
OdeRayGeom OdeGeom::convert_to_ray(void) const;

959 17 convert_to_sphere 0 4 1281 26 OdeGeom::convert_to_sphere 0 1 332 0
53
OdeSphereGeom OdeGeom::convert_to_sphere(void) const;

960 19 convert_to_tri_mesh 0 4 1281 28 OdeGeom::convert_to_tri_mesh 0 1 333 0
56
OdeTriMeshGeom OdeGeom::convert_to_tri_mesh(void) const;

961 23 convert_to_simple_space 0 4 1281 32 OdeGeom::convert_to_simple_space 0 1 334 0
60
OdeSimpleSpace OdeGeom::convert_to_simple_space(void) const;

962 21 convert_to_hash_space 0 4 1281 30 OdeGeom::convert_to_hash_space 0 1 335 0
56
OdeHashSpace OdeGeom::convert_to_hash_space(void) const;

963 26 convert_to_quad_tree_space 0 4 1281 35 OdeGeom::convert_to_quad_tree_space 0 1 336 0
65
OdeQuadTreeSpace OdeGeom::convert_to_quad_tree_space(void) const;

964 14 get_class_type 0 4 1281 23 OdeGeom::get_class_type 0 1 337 0
48
static TypeHandle OdeGeom::get_class_type(void);

965 10 OdeBoxGeom 0 4 1283 22 OdeBoxGeom::OdeBoxGeom 0 3 339 340 341 0
189
OdeBoxGeom::OdeBoxGeom(float lx, float ly, float lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, float lx, float ly, float lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, LVecBase3f const &size);

966 11 set_lengths 0 4 1283 23 OdeBoxGeom::set_lengths 0 2 342 343 488
// Filename: odeBoxGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
127
inline void OdeBoxGeom::set_lengths(float lx, float ly, float lz);
inline void OdeBoxGeom::set_lengths(LVecBase3f const &size);

967 11 get_lengths 0 4 1283 23 OdeBoxGeom::get_lengths 0 1 344 0
48
inline LVecBase3f OdeBoxGeom::get_lengths(void);

968 15 get_point_depth 0 4 1283 27 OdeBoxGeom::get_point_depth 0 2 345 346 0
129
inline float OdeBoxGeom::get_point_depth(float x, float y, float z);
inline float OdeBoxGeom::get_point_depth(LPoint3f const &p);

969 14 get_class_type 0 4 1283 26 OdeBoxGeom::get_class_type 0 1 347 0
51
static TypeHandle OdeBoxGeom::get_class_type(void);

970 21 OdeCappedCylinderGeom 0 4 1284 44 OdeCappedCylinderGeom::OdeCappedCylinderGeom 0 2 348 349 0
164
OdeCappedCylinderGeom::OdeCappedCylinderGeom(float radius, float length);
OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeSpace &space, float radius, float length);

971 10 set_params 0 4 1284 33 OdeCappedCylinderGeom::set_params 0 1 350 499
// Filename: odeCappedCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
74
inline void OdeCappedCylinderGeom::set_params(float radius, float length);

972 10 get_params 0 4 1284 33 OdeCappedCylinderGeom::get_params 0 0 0
82
inline void OdeCappedCylinderGeom::get_params(float *radius, float *length) const;

973 10 get_radius 0 4 1284 33 OdeCappedCylinderGeom::get_radius 0 1 351 0
59
inline float OdeCappedCylinderGeom::get_radius(void) const;

974 10 get_length 0 4 1284 33 OdeCappedCylinderGeom::get_length 0 1 352 0
59
inline float OdeCappedCylinderGeom::get_length(void) const;

975 15 get_point_depth 0 4 1284 38 OdeCappedCylinderGeom::get_point_depth 0 2 353 354 0
163
inline float OdeCappedCylinderGeom::get_point_depth(float x, float y, float z) const;
inline float OdeCappedCylinderGeom::get_point_depth(LPoint3f const &p) const;

976 14 get_class_type 0 4 1284 37 OdeCappedCylinderGeom::get_class_type 0 1 355 0
62
static TypeHandle OdeCappedCylinderGeom::get_class_type(void);

977 14 OdeContactGeom 0 4 1285 30 OdeContactGeom::OdeContactGeom 0 2 356 357 0
97
OdeContactGeom::OdeContactGeom(void);
OdeContactGeom::OdeContactGeom(OdeContactGeom const &copy);

978 7 get_pos 0 4 1285 23 OdeContactGeom::get_pos 0 1 358 492
// Filename: odeContactGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
54
inline LVecBase3f OdeContactGeom::get_pos(void) const;

979 10 get_normal 0 4 1285 26 OdeContactGeom::get_normal 0 1 359 0
57
inline LVecBase3f OdeContactGeom::get_normal(void) const;

980 9 get_depth 0 4 1285 25 OdeContactGeom::get_depth 0 1 360 0
51
inline float OdeContactGeom::get_depth(void) const;

981 6 get_g1 0 4 1285 22 OdeContactGeom::get_g1 0 1 361 0
50
inline OdeGeom OdeContactGeom::get_g1(void) const;

982 6 get_g2 0 4 1285 22 OdeContactGeom::get_g2 0 1 362 0
50
inline OdeGeom OdeContactGeom::get_g2(void) const;

983 9 get_side1 0 4 1285 25 OdeContactGeom::get_side1 0 1 363 0
49
inline int OdeContactGeom::get_side1(void) const;

984 9 get_side2 0 4 1285 25 OdeContactGeom::get_side2 0 1 364 0
49
inline int OdeContactGeom::get_side2(void) const;

985 7 set_pos 0 4 1285 23 OdeContactGeom::set_pos 0 1 365 0
59
inline void OdeContactGeom::set_pos(LVecBase3f const &pos);

986 10 set_normal 0 4 1285 26 OdeContactGeom::set_normal 0 1 366 0
65
inline void OdeContactGeom::set_normal(LVecBase3f const &normal);

987 9 set_depth 0 4 1285 25 OdeContactGeom::set_depth 0 1 367 0
57
inline void OdeContactGeom::set_depth(float const depth);

988 6 set_g1 0 4 1285 22 OdeContactGeom::set_g1 0 1 368 0
56
inline void OdeContactGeom::set_g1(OdeGeom const &geom);

989 6 set_g2 0 4 1285 22 OdeContactGeom::set_g2 0 1 369 0
56
inline void OdeContactGeom::set_g2(OdeGeom const &geom);

990 14 get_class_type 0 4 1285 30 OdeContactGeom::get_class_type 0 1 370 0
55
static TypeHandle OdeContactGeom::get_class_type(void);

991 9 get_geom1 0 4 1286 28 OdeCollisionEntry::get_geom1 0 1 371 268
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom1
//       Access: Published
//  Description: Returns the first geom in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeGeom OdeCollisionEntry::get_geom1(void) const;

992 9 get_geom2 0 4 1286 28 OdeCollisionEntry::get_geom2 0 1 372 269
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom2
//       Access: Published
//  Description: Returns the second geom in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeGeom OdeCollisionEntry::get_geom2(void) const;

993 9 get_body1 0 4 1286 28 OdeCollisionEntry::get_body1 0 1 373 268
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body1
//       Access: Published
//  Description: Returns the first body in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeBody OdeCollisionEntry::get_body1(void) const;

994 9 get_body2 0 4 1286 28 OdeCollisionEntry::get_body2 0 1 374 269
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body2
//       Access: Published
//  Description: Returns the second body in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeBody OdeCollisionEntry::get_body2(void) const;

995 16 get_num_contacts 0 4 1286 35 OdeCollisionEntry::get_num_contacts 0 1 375 283
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_num_contacts
//       Access: Published
//  Description: Returns the number of contacts in the collision.
////////////////////////////////////////////////////////////////////
68
inline unsigned int OdeCollisionEntry::get_num_contacts(void) const;

996 17 get_contact_point 0 4 1286 36 OdeCollisionEntry::get_contact_point 0 1 376 378
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_point
//       Access: Published
//  Description: Returns the nth contact point in the collision.
//               This does exactly the same as
//               get_contact_geom(n).get_pos().
////////////////////////////////////////////////////////////////////
75
inline LPoint3f OdeCollisionEntry::get_contact_point(unsigned int n) const;

997 16 get_contact_geom 0 4 1286 35 OdeCollisionEntry::get_contact_geom 0 1 377 281
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_geom
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
////////////////////////////////////////////////////////////////////
80
inline OdeContactGeom OdeCollisionEntry::get_contact_geom(unsigned int n) const;

998 11 operator [] 0 4 1286 30 OdeCollisionEntry::operator [] 0 1 378 276
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator []
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
////////////////////////////////////////////////////////////////////
75
inline OdeContactGeom OdeCollisionEntry::operator [](unsigned int n) const;

999 22 operator typecast bool 0 132 1286 41 OdeCollisionEntry::operator typecast bool 0 1 381 313
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator bool
//       Access: Published
//  Description: An OdeCollisionEntry evaluates to False if it
//               holds no contacts.
////////////////////////////////////////////////////////////////////
66
inline bool OdeCollisionEntry::operator typecast bool(void) const;

1000 8 is_empty 0 4 1286 27 OdeCollisionEntry::is_empty 0 1 379 271
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::is_empty
//       Access: Published
//  Description: Returns true if the entry holds no contacts.
////////////////////////////////////////////////////////////////////
52
inline bool OdeCollisionEntry::is_empty(void) const;

1001 14 get_class_type 0 4 1286 33 OdeCollisionEntry::get_class_type 0 1 380 0
58
static TypeHandle OdeCollisionEntry::get_class_type(void);

1002 20 OdeSurfaceParameters 0 4 1287 42 OdeSurfaceParameters::OdeSurfaceParameters 0 3 382 383 384 0
75
OdeSurfaceParameters::OdeSurfaceParameters(int mode = (0), float mu = (0));

1003 8 set_mode 0 4 1287 30 OdeSurfaceParameters::set_mode 0 1 385 498
// Filename: odeSurfaceParameters.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
53
inline void OdeSurfaceParameters::set_mode(int mode);

1004 6 set_mu 0 4 1287 28 OdeSurfaceParameters::set_mu 0 1 386 0
51
inline void OdeSurfaceParameters::set_mu(float mu);

1005 7 set_mu2 0 4 1287 29 OdeSurfaceParameters::set_mu2 0 1 387 0
53
inline void OdeSurfaceParameters::set_mu2(float mu2);

1006 10 set_bounce 0 4 1287 32 OdeSurfaceParameters::set_bounce 0 1 388 0
59
inline void OdeSurfaceParameters::set_bounce(float bounce);

1007 14 set_bounce_vel 0 4 1287 36 OdeSurfaceParameters::set_bounce_vel 0 1 389 0
67
inline void OdeSurfaceParameters::set_bounce_vel(float bounce_vel);

1008 12 set_soft_erp 0 4 1287 34 OdeSurfaceParameters::set_soft_erp 0 1 390 0
63
inline void OdeSurfaceParameters::set_soft_erp(float soft_erp);

1009 12 set_soft_cfm 0 4 1287 34 OdeSurfaceParameters::set_soft_cfm 0 1 391 0
63
inline void OdeSurfaceParameters::set_soft_cfm(float soft_cfm);

1010 11 set_motion1 0 4 1287 33 OdeSurfaceParameters::set_motion1 0 1 392 0
60
inline void OdeSurfaceParameters::set_motion1(float motion);

1011 11 set_motion2 0 4 1287 33 OdeSurfaceParameters::set_motion2 0 1 393 0
60
inline void OdeSurfaceParameters::set_motion2(float motion);

1012 9 set_slip1 0 4 1287 31 OdeSurfaceParameters::set_slip1 0 1 394 0
56
inline void OdeSurfaceParameters::set_slip1(float slip);

1013 9 set_slip2 0 4 1287 31 OdeSurfaceParameters::set_slip2 0 1 395 0
56
inline void OdeSurfaceParameters::set_slip2(float slip);

1014 8 get_mode 0 4 1287 30 OdeSurfaceParameters::get_mode 0 1 396 0
54
inline int OdeSurfaceParameters::get_mode(void) const;

1015 6 get_mu 0 4 1287 28 OdeSurfaceParameters::get_mu 0 1 397 0
54
inline float OdeSurfaceParameters::get_mu(void) const;

1016 7 get_mu2 0 4 1287 29 OdeSurfaceParameters::get_mu2 0 1 398 0
55
inline float OdeSurfaceParameters::get_mu2(void) const;

1017 10 get_bounce 0 4 1287 32 OdeSurfaceParameters::get_bounce 0 1 399 0
58
inline float OdeSurfaceParameters::get_bounce(void) const;

1018 14 get_bounce_vel 0 4 1287 36 OdeSurfaceParameters::get_bounce_vel 0 1 400 0
62
inline float OdeSurfaceParameters::get_bounce_vel(void) const;

1019 12 get_soft_erp 0 4 1287 34 OdeSurfaceParameters::get_soft_erp 0 1 401 0
60
inline float OdeSurfaceParameters::get_soft_erp(void) const;

1020 12 get_soft_cfm 0 4 1287 34 OdeSurfaceParameters::get_soft_cfm 0 1 402 0
60
inline float OdeSurfaceParameters::get_soft_cfm(void) const;

1021 11 get_motion1 0 4 1287 33 OdeSurfaceParameters::get_motion1 0 1 403 0
59
inline float OdeSurfaceParameters::get_motion1(void) const;

1022 11 get_motion2 0 4 1287 33 OdeSurfaceParameters::get_motion2 0 1 404 0
59
inline float OdeSurfaceParameters::get_motion2(void) const;

1023 9 get_slip1 0 4 1287 31 OdeSurfaceParameters::get_slip1 0 1 405 0
57
inline float OdeSurfaceParameters::get_slip1(void) const;

1024 9 get_slip2 0 4 1287 31 OdeSurfaceParameters::get_slip2 0 1 406 0
57
inline float OdeSurfaceParameters::get_slip2(void) const;

1025 14 get_class_type 0 4 1287 36 OdeSurfaceParameters::get_class_type 0 1 407 0
61
static TypeHandle OdeSurfaceParameters::get_class_type(void);

1026 10 OdeContact 0 4 1289 22 OdeContact::OdeContact 0 2 408 409 38
// OdeContact(const OdeContact &copy);
78
OdeContact::OdeContact(void);
OdeContact::OdeContact(dContact const &contact);

1027 11 get_surface 0 4 1289 23 OdeContact::get_surface 0 1 410 488
// Filename: odeContact.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
64
inline OdeSurfaceParameters OdeContact::get_surface(void) const;

1028 8 get_geom 0 4 1289 20 OdeContact::get_geom 0 1 411 0
49
inline OdeContactGeom OdeContact::get_geom(void);

1029 9 get_fdir1 0 4 1289 21 OdeContact::get_fdir1 0 1 412 0
52
inline LVecBase3f OdeContact::get_fdir1(void) const;

1030 11 set_surface 0 4 1289 23 OdeContact::set_surface 0 1 413 0
84
inline void OdeContact::set_surface(OdeSurfaceParameters const &surface_parameters);

1031 8 set_geom 0 4 1289 20 OdeContact::set_geom 0 1 414 0
69
inline void OdeContact::set_geom(OdeContactGeom const &contact_geom);

1032 9 set_fdir1 0 4 1289 21 OdeContact::set_fdir1 0 1 415 0
59
inline void OdeContact::set_fdir1(LVecBase3f const &fdir1);

1033 14 get_class_type 0 4 1289 26 OdeContact::get_class_type 0 1 416 0
51
static TypeHandle OdeContact::get_class_type(void);

1034 15 OdeContactJoint 0 4 1290 32 OdeContactJoint::OdeContactJoint 0 2 417 418 0
183
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeContact const &contact);
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeJointGroup &joint_group, OdeContact const &contact);

1035 14 get_class_type 0 4 1290 31 OdeContactJoint::get_class_type 0 1 419 0
56
static TypeHandle OdeContactJoint::get_class_type(void);

1036 15 OdeCylinderGeom 0 4 1291 32 OdeCylinderGeom::OdeCylinderGeom 0 2 420 421 0
140
OdeCylinderGeom::OdeCylinderGeom(float radius, float length);
OdeCylinderGeom::OdeCylinderGeom(OdeSpace &space, float radius, float length);

1037 10 set_params 0 4 1291 27 OdeCylinderGeom::set_params 0 1 422 493
// Filename: odeCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
68
inline void OdeCylinderGeom::set_params(float radius, float length);

1038 10 get_params 0 4 1291 27 OdeCylinderGeom::get_params 0 0 0
76
inline void OdeCylinderGeom::get_params(float *radius, float *length) const;

1039 10 get_radius 0 4 1291 27 OdeCylinderGeom::get_radius 0 1 423 0
53
inline float OdeCylinderGeom::get_radius(void) const;

1040 10 get_length 0 4 1291 27 OdeCylinderGeom::get_length 0 1 424 0
53
inline float OdeCylinderGeom::get_length(void) const;

1041 14 get_class_type 0 4 1291 31 OdeCylinderGeom::get_class_type 0 1 425 0
56
static TypeHandle OdeCylinderGeom::get_class_type(void);

1042 13 OdeFixedJoint 0 4 1292 28 OdeFixedJoint::OdeFixedJoint 0 2 426 427 0
121
OdeFixedJoint::OdeFixedJoint(OdeWorld &world);
OdeFixedJoint::OdeFixedJoint(OdeWorld &world, OdeJointGroup &joint_group);

1043 3 set 0 4 1292 18 OdeFixedJoint::set 0 1 428 491
// Filename: odeFixedJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
37
inline void OdeFixedJoint::set(void);

1044 14 get_class_type 0 4 1292 29 OdeFixedJoint::get_class_type 0 1 429 0
54
static TypeHandle OdeFixedJoint::get_class_type(void);

1045 12 OdeHashSpace 0 4 1293 26 OdeHashSpace::OdeHashSpace 0 2 430 431 0
78
OdeHashSpace::OdeHashSpace(void);
OdeHashSpace::OdeHashSpace(OdeSpace &space);

1046 10 set_levels 0 4 1293 24 OdeHashSpace::set_levels 0 1 432 490
// Filename: odeHashSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
65
inline void OdeHashSpace::set_levels(int minlevel, int maxlevel);

1047 13 get_min_level 0 4 1293 27 OdeHashSpace::get_min_level 0 1 433 0
51
inline int OdeHashSpace::get_min_level(void) const;

1048 13 get_max_level 0 4 1293 27 OdeHashSpace::get_max_level 0 1 434 0
51
inline int OdeHashSpace::get_max_level(void) const;

1049 14 get_class_type 0 4 1293 28 OdeHashSpace::get_class_type 0 1 435 0
53
static TypeHandle OdeHashSpace::get_class_type(void);

1050 14 OdeHinge2Joint 0 4 1294 30 OdeHinge2Joint::OdeHinge2Joint 0 2 436 437 0
125
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world, OdeJointGroup &joint_group);
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world);

1051 10 set_anchor 0 4 1294 26 OdeHinge2Joint::set_anchor 0 2 438 439 0
132
inline void OdeHinge2Joint::set_anchor(float x, float y, float z);
inline void OdeHinge2Joint::set_anchor(LVecBase3f const &anchor);

1052 9 set_axis1 0 4 1294 25 OdeHinge2Joint::set_axis1 0 2 440 441 0
128
inline void OdeHinge2Joint::set_axis1(float x, float y, float z);
inline void OdeHinge2Joint::set_axis1(LVecBase3f const &axis);

1053 9 set_axis2 0 4 1294 25 OdeHinge2Joint::set_axis2 0 2 442 443 0
128
inline void OdeHinge2Joint::set_axis2(float x, float y, float z);
inline void OdeHinge2Joint::set_axis2(LVecBase3f const &axis);

1054 11 add_torques 0 4 1294 27 OdeHinge2Joint::add_torques 0 1 444 0
70
inline void OdeHinge2Joint::add_torques(float torque1, float torque2);

1055 10 get_anchor 0 4 1294 26 OdeHinge2Joint::get_anchor 0 1 445 0
57
inline LVecBase3f OdeHinge2Joint::get_anchor(void) const;

1056 11 get_anchor2 0 4 1294 27 OdeHinge2Joint::get_anchor2 0 1 446 0
58
inline LVecBase3f OdeHinge2Joint::get_anchor2(void) const;

1057 9 get_axis1 0 4 1294 25 OdeHinge2Joint::get_axis1 0 1 447 0
56
inline LVecBase3f OdeHinge2Joint::get_axis1(void) const;

1058 9 get_axis2 0 4 1294 25 OdeHinge2Joint::get_axis2 0 1 448 0
56
inline LVecBase3f OdeHinge2Joint::get_axis2(void) const;

1059 10 get_angle1 0 4 1294 26 OdeHinge2Joint::get_angle1 0 1 449 0
52
inline float OdeHinge2Joint::get_angle1(void) const;

1060 15 get_angle1_rate 0 4 1294 31 OdeHinge2Joint::get_angle1_rate 0 1 450 0
57
inline float OdeHinge2Joint::get_angle1_rate(void) const;

1061 15 get_angle2_rate 0 4 1294 31 OdeHinge2Joint::get_angle2_rate 0 1 451 0
57
inline float OdeHinge2Joint::get_angle2_rate(void) const;

1062 17 set_param_lo_stop 0 4 1294 33 OdeHinge2Joint::set_param_lo_stop 0 1 452 0
67
inline void OdeHinge2Joint::set_param_lo_stop(int axis, float val);

1063 17 set_param_hi_stop 0 4 1294 33 OdeHinge2Joint::set_param_hi_stop 0 1 453 0
67
inline void OdeHinge2Joint::set_param_hi_stop(int axis, float val);

1064 13 set_param_vel 0 4 1294 29 OdeHinge2Joint::set_param_vel 0 1 454 0
63
inline void OdeHinge2Joint::set_param_vel(int axis, float val);

1065 15 set_param_f_max 0 4 1294 31 OdeHinge2Joint::set_param_f_max 0 1 455 0
65
inline void OdeHinge2Joint::set_param_f_max(int axis, float val);

1066 22 set_param_fudge_factor 0 4 1294 38 OdeHinge2Joint::set_param_fudge_factor 0 1 456 0
72
inline void OdeHinge2Joint::set_param_fudge_factor(int axis, float val);

1067 16 set_param_bounce 0 4 1294 32 OdeHinge2Joint::set_param_bounce 0 1 457 0
66
inline void OdeHinge2Joint::set_param_bounce(int axis, float val);

1068 13 set_param_CFM 0 4 1294 29 OdeHinge2Joint::set_param_CFM 0 1 458 0
63
inline void OdeHinge2Joint::set_param_CFM(int axis, float val);

1069 18 set_param_stop_ERP 0 4 1294 34 OdeHinge2Joint::set_param_stop_ERP 0 1 459 0
68
inline void OdeHinge2Joint::set_param_stop_ERP(int axis, float val);

1070 18 set_param_stop_CFM 0 4 1294 34 OdeHinge2Joint::set_param_stop_CFM 0 1 460 0
68
inline void OdeHinge2Joint::set_param_stop_CFM(int axis, float val);

1071 24 set_param_suspension_ERP 0 4 1294 40 OdeHinge2Joint::set_param_suspension_ERP 0 1 461 0
74
inline void OdeHinge2Joint::set_param_suspension_ERP(int axis, float val);

1072 24 set_param_suspension_CFM 0 4 1294 40 OdeHinge2Joint::set_param_suspension_CFM 0 1 462 0
74
inline void OdeHinge2Joint::set_param_suspension_CFM(int axis, float val);

1073 17 get_param_lo_stop 0 4 1294 33 OdeHinge2Joint::get_param_lo_stop 0 1 463 0
63
inline float OdeHinge2Joint::get_param_lo_stop(int axis) const;

1074 17 get_param_hi_stop 0 4 1294 33 OdeHinge2Joint::get_param_hi_stop 0 1 464 0
63
inline float OdeHinge2Joint::get_param_hi_stop(int axis) const;

1075 13 get_param_vel 0 4 1294 29 OdeHinge2Joint::get_param_vel 0 1 465 0
59
inline float OdeHinge2Joint::get_param_vel(int axis) const;

1076 15 get_param_f_max 0 4 1294 31 OdeHinge2Joint::get_param_f_max 0 1 466 0
61
inline float OdeHinge2Joint::get_param_f_max(int axis) const;

1077 22 get_param_fudge_factor 0 4 1294 38 OdeHinge2Joint::get_param_fudge_factor 0 1 467 0
68
inline float OdeHinge2Joint::get_param_fudge_factor(int axis) const;

1078 16 get_param_bounce 0 4 1294 32 OdeHinge2Joint::get_param_bounce 0 1 468 0
62
inline float OdeHinge2Joint::get_param_bounce(int axis) const;

1079 13 get_param_CFM 0 4 1294 29 OdeHinge2Joint::get_param_CFM 0 1 469 0
59
inline float OdeHinge2Joint::get_param_CFM(int axis) const;

1080 18 get_param_stop_ERP 0 4 1294 34 OdeHinge2Joint::get_param_stop_ERP 0 1 470 0
64
inline float OdeHinge2Joint::get_param_stop_ERP(int axis) const;

1081 18 get_param_stop_CFM 0 4 1294 34 OdeHinge2Joint::get_param_stop_CFM 0 1 471 0
64
inline float OdeHinge2Joint::get_param_stop_CFM(int axis) const;

1082 24 get_param_suspension_ERP 0 4 1294 40 OdeHinge2Joint::get_param_suspension_ERP 0 1 472 0
70
inline float OdeHinge2Joint::get_param_suspension_ERP(int axis) const;

1083 24 get_param_suspension_CFM 0 4 1294 40 OdeHinge2Joint::get_param_suspension_CFM 0 1 473 0
70
inline float OdeHinge2Joint::get_param_suspension_CFM(int axis) const;

1084 14 get_class_type 0 4 1294 30 OdeHinge2Joint::get_class_type 0 1 474 0
55
static TypeHandle OdeHinge2Joint::get_class_type(void);

1085 13 OdeHingeJoint 0 4 1295 28 OdeHingeJoint::OdeHingeJoint 0 2 475 476 0
121
OdeHingeJoint::OdeHingeJoint(OdeWorld &world);
OdeHingeJoint::OdeHingeJoint(OdeWorld &world, OdeJointGroup &joint_group);

1086 10 set_anchor 0 4 1295 25 OdeHingeJoint::set_anchor 0 2 477 478 491
// Filename: odeHingeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
130
inline void OdeHingeJoint::set_anchor(float x, float y, float z);
inline void OdeHingeJoint::set_anchor(LVecBase3f const &anchor);

1087 16 set_anchor_delta 0 4 1295 31 OdeHingeJoint::set_anchor_delta 0 2 479 480 0
195
inline void OdeHingeJoint::set_anchor_delta(float x, float y, float z, float ax, float ay, float az);
inline void OdeHingeJoint::set_anchor_delta(LVecBase3f const &anchor, LVecBase3f const &vec);

1088 8 set_axis 0 4 1295 23 OdeHingeJoint::set_axis 0 2 481 482 0
124
inline void OdeHingeJoint::set_axis(float x, float y, float z);
inline void OdeHingeJoint::set_axis(LVecBase3f const &axis);

1089 10 add_torque 0 4 1295 25 OdeHingeJoint::add_torque 0 1 483 0
52
inline void OdeHingeJoint::add_torque(float torque);

1090 10 get_anchor 0 4 1295 25 OdeHingeJoint::get_anchor 0 1 484 0
56
inline LVecBase3f OdeHingeJoint::get_anchor(void) const;

1091 11 get_anchor2 0 4 1295 26 OdeHingeJoint::get_anchor2 0 1 485 0
57
inline LVecBase3f OdeHingeJoint::get_anchor2(void) const;

1092 8 get_axis 0 4 1295 23 OdeHingeJoint::get_axis 0 1 486 0
54
inline LVecBase3f OdeHingeJoint::get_axis(void) const;

1093 9 get_angle 0 4 1295 24 OdeHingeJoint::get_angle 0 1 487 0
50
inline float OdeHingeJoint::get_angle(void) const;

1094 14 get_angle_rate 0 4 1295 29 OdeHingeJoint::get_angle_rate 0 1 488 0
55
inline float OdeHingeJoint::get_angle_rate(void) const;

1095 17 set_param_lo_stop 0 4 1295 32 OdeHingeJoint::set_param_lo_stop 0 1 489 0
56
inline void OdeHingeJoint::set_param_lo_stop(float val);

1096 17 set_param_hi_stop 0 4 1295 32 OdeHingeJoint::set_param_hi_stop 0 1 490 0
56
inline void OdeHingeJoint::set_param_hi_stop(float val);

1097 13 set_param_vel 0 4 1295 28 OdeHingeJoint::set_param_vel 0 1 491 0
52
inline void OdeHingeJoint::set_param_vel(float val);

1098 15 set_param_f_max 0 4 1295 30 OdeHingeJoint::set_param_f_max 0 1 492 0
54
inline void OdeHingeJoint::set_param_f_max(float val);

1099 22 set_param_fudge_factor 0 4 1295 37 OdeHingeJoint::set_param_fudge_factor 0 1 493 0
61
inline void OdeHingeJoint::set_param_fudge_factor(float val);

1100 16 set_param_bounce 0 4 1295 31 OdeHingeJoint::set_param_bounce 0 1 494 0
55
inline void OdeHingeJoint::set_param_bounce(float val);

1101 13 set_param_CFM 0 4 1295 28 OdeHingeJoint::set_param_CFM 0 1 495 0
52
inline void OdeHingeJoint::set_param_CFM(float val);

1102 18 set_param_stop_ERP 0 4 1295 33 OdeHingeJoint::set_param_stop_ERP 0 1 496 0
57
inline void OdeHingeJoint::set_param_stop_ERP(float val);

1103 18 set_param_stop_CFM 0 4 1295 33 OdeHingeJoint::set_param_stop_CFM 0 1 497 0
57
inline void OdeHingeJoint::set_param_stop_CFM(float val);

1104 17 get_param_lo_stop 0 4 1295 32 OdeHingeJoint::get_param_lo_stop 0 1 498 0
58
inline float OdeHingeJoint::get_param_lo_stop(void) const;

1105 17 get_param_hi_stop 0 4 1295 32 OdeHingeJoint::get_param_hi_stop 0 1 499 0
58
inline float OdeHingeJoint::get_param_hi_stop(void) const;

1106 13 get_param_vel 0 4 1295 28 OdeHingeJoint::get_param_vel 0 1 500 0
54
inline float OdeHingeJoint::get_param_vel(void) const;

1107 15 get_param_f_max 0 4 1295 30 OdeHingeJoint::get_param_f_max 0 1 501 0
56
inline float OdeHingeJoint::get_param_f_max(void) const;

1108 22 get_param_fudge_factor 0 4 1295 37 OdeHingeJoint::get_param_fudge_factor 0 1 502 0
63
inline float OdeHingeJoint::get_param_fudge_factor(void) const;

1109 16 get_param_bounce 0 4 1295 31 OdeHingeJoint::get_param_bounce 0 1 503 0
57
inline float OdeHingeJoint::get_param_bounce(void) const;

1110 13 get_param_CFM 0 4 1295 28 OdeHingeJoint::get_param_CFM 0 1 504 0
54
inline float OdeHingeJoint::get_param_CFM(void) const;

1111 18 get_param_stop_ERP 0 4 1295 33 OdeHingeJoint::get_param_stop_ERP 0 1 505 0
59
inline float OdeHingeJoint::get_param_stop_ERP(void) const;

1112 18 get_param_stop_CFM 0 4 1295 33 OdeHingeJoint::get_param_stop_CFM 0 1 506 0
59
inline float OdeHingeJoint::get_param_stop_CFM(void) const;

1113 14 get_class_type 0 4 1295 29 OdeHingeJoint::get_class_type 0 1 507 0
54
static TypeHandle OdeHingeJoint::get_class_type(void);

1114 18 OdeJointCollection 0 4 1296 38 OdeJointCollection::OdeJointCollection 0 2 508 509 0
117
OdeJointCollection::OdeJointCollection(void);
OdeJointCollection::OdeJointCollection(OdeJointCollection const &copy);

1115 10 operator = 0 4 1296 30 OdeJointCollection::operator = 0 1 510 0
68
void OdeJointCollection::operator =(OdeJointCollection const &copy);

1116 19 ~OdeJointCollection 0 4 1296 39 OdeJointCollection::~OdeJointCollection 0 0 723
// Filename: odeJointCollection.I
// Created by:  drose (10Nov08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline OdeJointCollection::~OdeJointCollection(void);

1117 9 add_joint 0 4 1296 29 OdeJointCollection::add_joint 0 1 511 0
58
void OdeJointCollection::add_joint(OdeJoint const &joint);

1118 12 remove_joint 0 4 1296 32 OdeJointCollection::remove_joint 0 1 512 0
61
bool OdeJointCollection::remove_joint(OdeJoint const &joint);

1119 15 add_joints_from 0 4 1296 35 OdeJointCollection::add_joints_from 0 1 513 0
74
void OdeJointCollection::add_joints_from(OdeJointCollection const &other);

1120 18 remove_joints_from 0 4 1296 38 OdeJointCollection::remove_joints_from 0 1 514 0
77
void OdeJointCollection::remove_joints_from(OdeJointCollection const &other);

1121 23 remove_duplicate_joints 0 4 1296 43 OdeJointCollection::remove_duplicate_joints 0 1 515 0
55
void OdeJointCollection::remove_duplicate_joints(void);

1122 9 has_joint 0 4 1296 29 OdeJointCollection::has_joint 0 1 516 0
64
bool OdeJointCollection::has_joint(OdeJoint const &joint) const;

1123 5 clear 0 4 1296 25 OdeJointCollection::clear 0 1 517 0
37
void OdeJointCollection::clear(void);

1124 8 is_empty 0 4 1296 28 OdeJointCollection::is_empty 0 1 518 0
46
bool OdeJointCollection::is_empty(void) const;

1125 14 get_num_joints 0 4 1296 34 OdeJointCollection::get_num_joints 0 1 519 0
51
int OdeJointCollection::get_num_joints(void) const;

1126 9 get_joint 0 4 1296 29 OdeJointCollection::get_joint 0 1 520 0
56
OdeJoint OdeJointCollection::get_joint(int index) const;

1127 11 operator [] 0 4 1296 31 OdeJointCollection::operator [] 0 1 521 0
58
OdeJoint OdeJointCollection::operator [](int index) const;

1128 4 size 0 4 1296 24 OdeJointCollection::size 0 1 522 333
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::size
//       Access: Published
//  Description: Returns the number of joints in the collection.  This
//               is the same thing as get_num_joints().
////////////////////////////////////////////////////////////////////
41
int OdeJointCollection::size(void) const;

1129 11 operator += 0 4 1296 31 OdeJointCollection::operator += 0 1 523 279
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
77
inline void OdeJointCollection::operator +=(OdeJointCollection const &other);

1130 10 operator + 0 4 1296 30 OdeJointCollection::operator + 0 1 524 324
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +
//       Access: Published
//  Description: Returns a OdeJointCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
96
inline OdeJointCollection OdeJointCollection::operator +(OdeJointCollection const &other) const;

1131 14 OdeLMotorJoint 0 4 1297 30 OdeLMotorJoint::OdeLMotorJoint 0 2 525 526 0
125
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world);
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

1132 12 set_num_axes 0 4 1297 28 OdeLMotorJoint::set_num_axes 0 1 527 0
50
inline void OdeLMotorJoint::set_num_axes(int num);

1133 8 set_axis 0 4 1297 24 OdeLMotorJoint::set_axis 0 2 528 529 0
164
inline void OdeLMotorJoint::set_axis(int anum, int rel, float x, float y, float z);
inline void OdeLMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

1134 9 set_param 0 4 1297 25 OdeLMotorJoint::set_param 0 1 530 0
66
inline void OdeLMotorJoint::set_param(int parameter, float value);

1135 12 get_num_axes 0 4 1297 28 OdeLMotorJoint::get_num_axes 0 1 531 0
52
inline int OdeLMotorJoint::get_num_axes(void) const;

1136 8 get_axis 0 4 1297 24 OdeLMotorJoint::get_axis 0 1 532 0
59
inline LVecBase3f OdeLMotorJoint::get_axis(int anum) const;

1137 9 get_param 0 4 1297 25 OdeLMotorJoint::get_param 0 1 533 0
60
inline float OdeLMotorJoint::get_param(int parameter) const;

1138 14 get_class_type 0 4 1297 30 OdeLMotorJoint::get_class_type 0 1 534 0
55
static TypeHandle OdeLMotorJoint::get_class_type(void);

1139 12 OdeNullJoint 0 4 1298 26 OdeNullJoint::OdeNullJoint 0 2 535 536 0
117
OdeNullJoint::OdeNullJoint(OdeWorld &world);
OdeNullJoint::OdeNullJoint(OdeWorld &world, OdeJointGroup &joint_group);

1140 14 get_class_type 0 4 1298 28 OdeNullJoint::get_class_type 0 1 537 0
53
static TypeHandle OdeNullJoint::get_class_type(void);

1141 15 OdePlane2dJoint 0 4 1299 32 OdePlane2dJoint::OdePlane2dJoint 0 2 538 539 0
129
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world);
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world, OdeJointGroup &joint_group);

1142 11 set_x_param 0 4 1299 28 OdePlane2dJoint::set_x_param 0 1 540 493
// Filename: odePlane2dJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
69
inline void OdePlane2dJoint::set_x_param(int parameter, float value);

1143 11 set_y_param 0 4 1299 28 OdePlane2dJoint::set_y_param 0 1 541 0
69
inline void OdePlane2dJoint::set_y_param(int parameter, float value);

1144 15 set_angle_param 0 4 1299 32 OdePlane2dJoint::set_angle_param 0 1 542 0
73
inline void OdePlane2dJoint::set_angle_param(int parameter, float value);

1145 14 get_class_type 0 4 1299 31 OdePlane2dJoint::get_class_type 0 1 543 0
56
static TypeHandle OdePlane2dJoint::get_class_type(void);

1146 12 OdePlaneGeom 0 4 1300 26 OdePlaneGeom::OdePlaneGeom 0 4 544 545 546 547 0
269
OdePlaneGeom::OdePlaneGeom(float a, float b, float c, float d);
OdePlaneGeom::OdePlaneGeom(LVecBase4f const &params);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, float a, float b, float c, float d);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, LVecBase4f const &params);

1147 10 set_params 0 4 1300 24 OdePlaneGeom::set_params 0 2 548 549 490
// Filename: odePlaneGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
137
inline void OdePlaneGeom::set_params(float a, float b, float c, float d);
inline void OdePlaneGeom::set_params(LVecBase4f const &params);

1148 10 get_params 0 4 1300 24 OdePlaneGeom::get_params 0 1 550 0
55
inline LVecBase4f OdePlaneGeom::get_params(void) const;

1149 15 get_point_depth 0 4 1300 29 OdePlaneGeom::get_point_depth 0 2 551 552 0
145
inline float OdePlaneGeom::get_point_depth(float x, float y, float z) const;
inline float OdePlaneGeom::get_point_depth(LPoint3f const &p) const;

1150 14 get_class_type 0 4 1300 28 OdePlaneGeom::get_class_type 0 1 553 0
53
static TypeHandle OdePlaneGeom::get_class_type(void);

1151 16 OdeQuadTreeSpace 0 4 1301 34 OdeQuadTreeSpace::OdeQuadTreeSpace 0 2 554 555 0
224
OdeQuadTreeSpace::OdeQuadTreeSpace(LPoint3f const &center, LVecBase3f const &extents, int const depth);
OdeQuadTreeSpace::OdeQuadTreeSpace(OdeSpace &space, LPoint3f const &center, LVecBase3f const &extents, int const depth);

1152 14 get_class_type 0 4 1301 32 OdeQuadTreeSpace::get_class_type 0 1 556 0
57
static TypeHandle OdeQuadTreeSpace::get_class_type(void);

1153 10 OdeRayGeom 0 4 1302 22 OdeRayGeom::OdeRayGeom 0 2 557 558 0
92
OdeRayGeom::OdeRayGeom(float length);
OdeRayGeom::OdeRayGeom(OdeSpace &space, float length);

1154 10 set_length 0 4 1302 22 OdeRayGeom::set_length 0 1 559 488
// Filename: odeRayGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
49
inline void OdeRayGeom::set_length(float length);

1155 10 get_length 0 4 1302 22 OdeRayGeom::get_length 0 1 560 0
42
inline float OdeRayGeom::get_length(void);

1156 3 set 0 4 1302 15 OdeRayGeom::set 0 2 561 562 0
165
inline void OdeRayGeom::set(float px, float py, float pz, float dx, float dy, float dz);
inline void OdeRayGeom::set(LVecBase3f const &start, LVecBase3f const &dir);

1157 3 get 0 4 1302 15 OdeRayGeom::get 0 1 563 0
70
inline void OdeRayGeom::get(LVecBase3f &start, LVecBase3f &dir) const;

1158 9 get_start 0 4 1302 21 OdeRayGeom::get_start 0 1 564 0
52
inline LVecBase3f OdeRayGeom::get_start(void) const;

1159 13 get_direction 0 4 1302 25 OdeRayGeom::get_direction 0 1 565 0
56
inline LVecBase3f OdeRayGeom::get_direction(void) const;

1160 10 set_params 0 4 1302 22 OdeRayGeom::set_params 0 1 566 0
73
inline void OdeRayGeom::set_params(int first_contact, int backface_cull);

1161 10 get_params 0 4 1302 22 OdeRayGeom::get_params 0 0 0
81
inline void OdeRayGeom::get_params(int &first_contact, int &backface_cull) const;

1162 17 get_first_contact 0 4 1302 29 OdeRayGeom::get_first_contact 0 1 567 0
53
inline int OdeRayGeom::get_first_contact(void) const;

1163 17 get_backface_cull 0 4 1302 29 OdeRayGeom::get_backface_cull 0 1 568 0
53
inline int OdeRayGeom::get_backface_cull(void) const;

1164 15 set_closest_hit 0 4 1302 27 OdeRayGeom::set_closest_hit 0 1 569 0
57
inline void OdeRayGeom::set_closest_hit(int closest_hit);

1165 15 get_closest_hit 0 4 1302 27 OdeRayGeom::get_closest_hit 0 1 570 0
45
inline int OdeRayGeom::get_closest_hit(void);

1166 14 get_class_type 0 4 1302 26 OdeRayGeom::get_class_type 0 1 571 0
51
static TypeHandle OdeRayGeom::get_class_type(void);

1167 14 OdeSimpleSpace 0 4 1303 30 OdeSimpleSpace::OdeSimpleSpace 0 2 572 573 0
86
OdeSimpleSpace::OdeSimpleSpace(void);
OdeSimpleSpace::OdeSimpleSpace(OdeSpace &space);

1168 14 get_class_type 0 4 1303 30 OdeSimpleSpace::get_class_type 0 1 574 0
55
static TypeHandle OdeSimpleSpace::get_class_type(void);

1169 14 OdeSliderJoint 0 4 1304 30 OdeSliderJoint::OdeSliderJoint 0 2 575 576 0
125
OdeSliderJoint::OdeSliderJoint(OdeWorld &world);
OdeSliderJoint::OdeSliderJoint(OdeWorld &world, OdeJointGroup &joint_group);

1170 8 set_axis 0 4 1304 24 OdeSliderJoint::set_axis 0 2 577 578 492
// Filename: odeSliderJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
126
inline void OdeSliderJoint::set_axis(float x, float y, float z);
inline void OdeSliderJoint::set_axis(LVecBase3f const &axis);

1171 14 set_axis_delta 0 4 1304 30 OdeSliderJoint::set_axis_delta 0 2 579 580 0
191
inline void OdeSliderJoint::set_axis_delta(float x, float y, float z, float ax, float ay, float az);
inline void OdeSliderJoint::set_axis_delta(LVecBase3f const &axis, LVecBase3f const &vec);

1172 9 add_force 0 4 1304 25 OdeSliderJoint::add_force 0 1 581 0
51
inline void OdeSliderJoint::add_force(float force);

1173 12 get_position 0 4 1304 28 OdeSliderJoint::get_position 0 1 582 0
54
inline float OdeSliderJoint::get_position(void) const;

1174 17 get_position_rate 0 4 1304 33 OdeSliderJoint::get_position_rate 0 1 583 0
59
inline float OdeSliderJoint::get_position_rate(void) const;

1175 8 get_axis 0 4 1304 24 OdeSliderJoint::get_axis 0 1 584 0
55
inline LVecBase3f OdeSliderJoint::get_axis(void) const;

1176 17 set_param_lo_stop 0 4 1304 33 OdeSliderJoint::set_param_lo_stop 0 1 585 0
57
inline void OdeSliderJoint::set_param_lo_stop(float val);

1177 17 set_param_hi_stop 0 4 1304 33 OdeSliderJoint::set_param_hi_stop 0 1 586 0
57
inline void OdeSliderJoint::set_param_hi_stop(float val);

1178 13 set_param_vel 0 4 1304 29 OdeSliderJoint::set_param_vel 0 1 587 0
53
inline void OdeSliderJoint::set_param_vel(float val);

1179 15 set_param_f_max 0 4 1304 31 OdeSliderJoint::set_param_f_max 0 1 588 0
55
inline void OdeSliderJoint::set_param_f_max(float val);

1180 22 set_param_fudge_factor 0 4 1304 38 OdeSliderJoint::set_param_fudge_factor 0 1 589 0
62
inline void OdeSliderJoint::set_param_fudge_factor(float val);

1181 16 set_param_bounce 0 4 1304 32 OdeSliderJoint::set_param_bounce 0 1 590 0
56
inline void OdeSliderJoint::set_param_bounce(float val);

1182 13 set_param_CFM 0 4 1304 29 OdeSliderJoint::set_param_CFM 0 1 591 0
53
inline void OdeSliderJoint::set_param_CFM(float val);

1183 18 set_param_stop_ERP 0 4 1304 34 OdeSliderJoint::set_param_stop_ERP 0 1 592 0
58
inline void OdeSliderJoint::set_param_stop_ERP(float val);

1184 18 set_param_stop_CFM 0 4 1304 34 OdeSliderJoint::set_param_stop_CFM 0 1 593 0
58
inline void OdeSliderJoint::set_param_stop_CFM(float val);

1185 17 get_param_lo_stop 0 4 1304 33 OdeSliderJoint::get_param_lo_stop 0 1 594 0
59
inline float OdeSliderJoint::get_param_lo_stop(void) const;

1186 17 get_param_hi_stop 0 4 1304 33 OdeSliderJoint::get_param_hi_stop 0 1 595 0
59
inline float OdeSliderJoint::get_param_hi_stop(void) const;

1187 13 get_param_vel 0 4 1304 29 OdeSliderJoint::get_param_vel 0 1 596 0
55
inline float OdeSliderJoint::get_param_vel(void) const;

1188 15 get_param_f_max 0 4 1304 31 OdeSliderJoint::get_param_f_max 0 1 597 0
57
inline float OdeSliderJoint::get_param_f_max(void) const;

1189 22 get_param_fudge_factor 0 4 1304 38 OdeSliderJoint::get_param_fudge_factor 0 1 598 0
64
inline float OdeSliderJoint::get_param_fudge_factor(void) const;

1190 16 get_param_bounce 0 4 1304 32 OdeSliderJoint::get_param_bounce 0 1 599 0
58
inline float OdeSliderJoint::get_param_bounce(void) const;

1191 13 get_param_CFM 0 4 1304 29 OdeSliderJoint::get_param_CFM 0 1 600 0
55
inline float OdeSliderJoint::get_param_CFM(void) const;

1192 18 get_param_stop_ERP 0 4 1304 34 OdeSliderJoint::get_param_stop_ERP 0 1 601 0
60
inline float OdeSliderJoint::get_param_stop_ERP(void) const;

1193 18 get_param_stop_CFM 0 4 1304 34 OdeSliderJoint::get_param_stop_CFM 0 1 602 0
60
inline float OdeSliderJoint::get_param_stop_CFM(void) const;

1194 14 get_class_type 0 4 1304 30 OdeSliderJoint::get_class_type 0 1 603 0
55
static TypeHandle OdeSliderJoint::get_class_type(void);

1195 13 OdeSphereGeom 0 4 1305 28 OdeSphereGeom::OdeSphereGeom 0 3 604 605 606 0
149
OdeSphereGeom::OdeSphereGeom(float radius);
OdeSphereGeom::OdeSphereGeom(OdeSpace &space, float radius);
OdeSphereGeom::OdeSphereGeom(OdeGeom &geom);

1196 10 set_radius 0 4 1305 25 OdeSphereGeom::set_radius 0 1 607 491
// Filename: odeSphereGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
52
inline void OdeSphereGeom::set_radius(float radius);

1197 10 get_radius 0 4 1305 25 OdeSphereGeom::get_radius 0 1 608 0
51
inline float OdeSphereGeom::get_radius(void) const;

1198 15 get_point_depth 0 4 1305 30 OdeSphereGeom::get_point_depth 0 2 609 610 0
147
inline float OdeSphereGeom::get_point_depth(float x, float y, float z) const;
inline float OdeSphereGeom::get_point_depth(LPoint3f const &p) const;

1199 14 get_class_type 0 4 1305 29 OdeSphereGeom::get_class_type 0 1 611 0
54
static TypeHandle OdeSphereGeom::get_class_type(void);

1200 14 OdeTriMeshData 0 4 1306 30 OdeTriMeshData::OdeTriMeshData 0 2 612 613 202
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

// Private copy constructor, shouldn't be copying these objects
78
OdeTriMeshData::OdeTriMeshData(NodePath const &model, bool use_normals = (0));

1201 7 destroy 0 4 1306 23 OdeTriMeshData::destroy 0 1 614 0
35
void OdeTriMeshData::destroy(void);

1202 5 write 0 4 1306 21 OdeTriMeshData::write 0 3 615 616 617 221
// INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update();
91
virtual void OdeTriMeshData::write(ostream &out = (cout), unsigned int indent = (0)) const;

1203 11 write_faces 0 4 1306 27 OdeTriMeshData::write_faces 0 1 618 221
// INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update();
53
void OdeTriMeshData::write_faces(ostream &out) const;

1204 14 get_class_type 0 4 1306 30 OdeTriMeshData::get_class_type 0 1 619 0
55
static TypeHandle OdeTriMeshData::get_class_type(void);

1205 14 OdeTriMeshGeom 0 4 1308 30 OdeTriMeshGeom::OdeTriMeshGeom 0 3 620 621 622 162
/* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */
184
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeSpace &space, OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshGeom const &copy);

1206 7 destroy 0 4 1308 23 OdeTriMeshGeom::destroy 0 1 623 0
35
void OdeTriMeshGeom::destroy(void);

1207 17 set_tri_mesh_data 0 4 1308 33 OdeTriMeshGeom::set_tri_mesh_data 0 1 624 0
68
inline void OdeTriMeshGeom::set_tri_mesh_data(OdeTriMeshData &data);

1208 17 get_tri_mesh_data 0 4 1308 33 OdeTriMeshGeom::get_tri_mesh_data 0 1 625 0
81
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_tri_mesh_data(void) const;

1209 8 set_data 0 4 1308 24 OdeTriMeshGeom::set_data 0 1 626 492
// Filename: odeTriMeshGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
59
inline void OdeTriMeshGeom::set_data(OdeTriMeshData &data);

1210 8 get_data 0 4 1308 24 OdeTriMeshGeom::get_data 0 1 627 0
72
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_data(void) const;

1211 9 enable_TC 0 4 1308 25 OdeTriMeshGeom::enable_TC 0 1 628 0
66
inline void OdeTriMeshGeom::enable_TC(int geom_class, int enable);

1212 13 is_TC_enabled 0 4 1308 29 OdeTriMeshGeom::is_TC_enabled 0 1 629 0
63
inline int OdeTriMeshGeom::is_TC_enabled(int geom_class) const;

1213 14 clear_TC_cache 0 4 1308 30 OdeTriMeshGeom::clear_TC_cache 0 1 630 0
64
inline void OdeTriMeshGeom::clear_TC_cache(OdeGeom const &geom);

1214 12 get_triangle 0 4 1308 28 OdeTriMeshGeom::get_triangle 0 1 631 0
105
inline void OdeTriMeshGeom::get_triangle(int face_index, LPoint3f &v0, LPoint3f &v1, LPoint3f &v2) const;

1215 9 get_point 0 4 1308 25 OdeTriMeshGeom::get_point 0 1 632 0
82
inline LPoint3f OdeTriMeshGeom::get_point(int face_index, float u, float v) const;

1216 17 get_num_triangles 0 4 1308 33 OdeTriMeshGeom::get_num_triangles 0 1 633 0
57
inline int OdeTriMeshGeom::get_num_triangles(void) const;

1217 14 get_class_type 0 4 1308 30 OdeTriMeshGeom::get_class_type 0 1 634 0
55
static TypeHandle OdeTriMeshGeom::get_class_type(void);

1218 17 OdeUniversalJoint 0 4 1309 36 OdeUniversalJoint::OdeUniversalJoint 0 2 635 636 0
137
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world);
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world, OdeJointGroup &joint_group);

1219 10 set_anchor 0 4 1309 29 OdeUniversalJoint::set_anchor 0 2 637 638 495
// Filename: odeUniversalJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
138
inline void OdeUniversalJoint::set_anchor(float x, float y, float z);
inline void OdeUniversalJoint::set_anchor(LVecBase3f const &anchor);

1220 9 set_axis1 0 4 1309 28 OdeUniversalJoint::set_axis1 0 2 639 640 0
134
inline void OdeUniversalJoint::set_axis1(float x, float y, float z);
inline void OdeUniversalJoint::set_axis1(LVecBase3f const &axis);

1221 9 set_axis2 0 4 1309 28 OdeUniversalJoint::set_axis2 0 2 641 642 0
134
inline void OdeUniversalJoint::set_axis2(float x, float y, float z);
inline void OdeUniversalJoint::set_axis2(LVecBase3f const &axis);

1222 11 add_torques 0 4 1309 30 OdeUniversalJoint::add_torques 0 1 643 0
73
inline void OdeUniversalJoint::add_torques(float torque1, float torque2);

1223 10 get_anchor 0 4 1309 29 OdeUniversalJoint::get_anchor 0 1 644 0
60
inline LVecBase3f OdeUniversalJoint::get_anchor(void) const;

1224 11 get_anchor2 0 4 1309 30 OdeUniversalJoint::get_anchor2 0 1 645 0
61
inline LVecBase3f OdeUniversalJoint::get_anchor2(void) const;

1225 9 get_axis1 0 4 1309 28 OdeUniversalJoint::get_axis1 0 1 646 0
59
inline LVecBase3f OdeUniversalJoint::get_axis1(void) const;

1226 9 get_axis2 0 4 1309 28 OdeUniversalJoint::get_axis2 0 1 647 0
59
inline LVecBase3f OdeUniversalJoint::get_axis2(void) const;

1227 10 get_angle1 0 4 1309 29 OdeUniversalJoint::get_angle1 0 1 648 0
55
inline float OdeUniversalJoint::get_angle1(void) const;

1228 10 get_angle2 0 4 1309 29 OdeUniversalJoint::get_angle2 0 1 649 0
55
inline float OdeUniversalJoint::get_angle2(void) const;

1229 15 get_angle1_rate 0 4 1309 34 OdeUniversalJoint::get_angle1_rate 0 1 650 0
60
inline float OdeUniversalJoint::get_angle1_rate(void) const;

1230 15 get_angle2_rate 0 4 1309 34 OdeUniversalJoint::get_angle2_rate 0 1 651 0
60
inline float OdeUniversalJoint::get_angle2_rate(void) const;

1231 17 set_param_lo_stop 0 4 1309 36 OdeUniversalJoint::set_param_lo_stop 0 1 652 0
70
inline void OdeUniversalJoint::set_param_lo_stop(int axis, float val);

1232 17 set_param_hi_stop 0 4 1309 36 OdeUniversalJoint::set_param_hi_stop 0 1 653 0
70
inline void OdeUniversalJoint::set_param_hi_stop(int axis, float val);

1233 13 set_param_vel 0 4 1309 32 OdeUniversalJoint::set_param_vel 0 1 654 0
66
inline void OdeUniversalJoint::set_param_vel(int axis, float val);

1234 15 set_param_f_max 0 4 1309 34 OdeUniversalJoint::set_param_f_max 0 1 655 0
68
inline void OdeUniversalJoint::set_param_f_max(int axis, float val);

1235 22 set_param_fudge_factor 0 4 1309 41 OdeUniversalJoint::set_param_fudge_factor 0 1 656 0
75
inline void OdeUniversalJoint::set_param_fudge_factor(int axis, float val);

1236 16 set_param_bounce 0 4 1309 35 OdeUniversalJoint::set_param_bounce 0 1 657 0
69
inline void OdeUniversalJoint::set_param_bounce(int axis, float val);

1237 13 set_param_CFM 0 4 1309 32 OdeUniversalJoint::set_param_CFM 0 1 658 0
66
inline void OdeUniversalJoint::set_param_CFM(int axis, float val);

1238 18 set_param_stop_ERP 0 4 1309 37 OdeUniversalJoint::set_param_stop_ERP 0 1 659 0
71
inline void OdeUniversalJoint::set_param_stop_ERP(int axis, float val);

1239 18 set_param_stop_CFM 0 4 1309 37 OdeUniversalJoint::set_param_stop_CFM 0 1 660 0
71
inline void OdeUniversalJoint::set_param_stop_CFM(int axis, float val);

1240 17 get_param_lo_stop 0 4 1309 36 OdeUniversalJoint::get_param_lo_stop 0 1 661 0
66
inline float OdeUniversalJoint::get_param_lo_stop(int axis) const;

1241 17 get_param_hi_stop 0 4 1309 36 OdeUniversalJoint::get_param_hi_stop 0 1 662 0
66
inline float OdeUniversalJoint::get_param_hi_stop(int axis) const;

1242 13 get_param_vel 0 4 1309 32 OdeUniversalJoint::get_param_vel 0 1 663 0
62
inline float OdeUniversalJoint::get_param_vel(int axis) const;

1243 15 get_param_f_max 0 4 1309 34 OdeUniversalJoint::get_param_f_max 0 1 664 0
64
inline float OdeUniversalJoint::get_param_f_max(int axis) const;

1244 22 get_param_fudge_factor 0 4 1309 41 OdeUniversalJoint::get_param_fudge_factor 0 1 665 0
71
inline float OdeUniversalJoint::get_param_fudge_factor(int axis) const;

1245 16 get_param_bounce 0 4 1309 35 OdeUniversalJoint::get_param_bounce 0 1 666 0
65
inline float OdeUniversalJoint::get_param_bounce(int axis) const;

1246 13 get_param_CFM 0 4 1309 32 OdeUniversalJoint::get_param_CFM 0 1 667 0
62
inline float OdeUniversalJoint::get_param_CFM(int axis) const;

1247 18 get_param_stop_ERP 0 4 1309 37 OdeUniversalJoint::get_param_stop_ERP 0 1 668 0
67
inline float OdeUniversalJoint::get_param_stop_ERP(int axis) const;

1248 18 get_param_stop_CFM 0 4 1309 37 OdeUniversalJoint::get_param_stop_CFM 0 1 669 0
67
inline float OdeUniversalJoint::get_param_stop_CFM(int axis) const;

1249 14 get_class_type 0 4 1309 33 OdeUniversalJoint::get_class_type 0 1 670 0
58
static TypeHandle OdeUniversalJoint::get_class_type(void);

1250 20 get_connecting_joint 0 4 1310 29 OdeUtil::get_connecting_joint 0 1 671 283
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint
//       Access: Public, Static
//  Description: Returns the joint that connects the given bodies.
////////////////////////////////////////////////////////////////////
90
static OdeJoint OdeUtil::get_connecting_joint(OdeBody const &body1, OdeBody const &body2);

1251 25 get_connecting_joint_list 0 4 1310 34 OdeUtil::get_connecting_joint_list 0 1 672 319
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint_list
//       Access: Public, Static
//  Description: Returns a collection of joints connecting the
//               specified bodies.
////////////////////////////////////////////////////////////////////
105
static OdeJointCollection OdeUtil::get_connecting_joint_list(OdeBody const &body1, OdeBody const &body2);

1252 13 are_connected 0 4 1310 22 OdeUtil::are_connected 0 1 673 320
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint, returns 0 otherwise.
////////////////////////////////////////////////////////////////////
78
static int OdeUtil::are_connected(OdeBody const &body1, OdeBody const &body2);

1253 23 are_connected_excluding 0 4 1310 32 OdeUtil::are_connected_excluding 0 1 674 733
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected_excluding
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint that does not match the given
//               joint_type, returns 0 otherwise. This is useful
//               for deciding whether to add contact joints between
//               two bodies: if they are already connected by
//               non-contact joints then it may not be appropriate
//               to add contacts, however it is okay to add more
//               contact between bodies that already have contacts.
////////////////////////////////////////////////////////////////////
110
static int OdeUtil::are_connected_excluding(OdeBody const &body1, OdeBody const &body2, int const joint_type);

1254 7 collide 0 4 1310 16 OdeUtil::collide 0 2 675 676 392
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
////////////////////////////////////////////////////////////////////
137
static PointerTo< OdeCollisionEntry > OdeUtil::collide(OdeGeom const &geom1, OdeGeom const &geom2, short int const max_contacts = (150));

1255 8 collide2 0 4 1310 17 OdeUtil::collide2 0 1 677 371
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide2
//       Access: Public, Static
//  Description: Calls the callback for all potentially intersecting
//               pairs that contain one geom from geom1 and one geom
//               from geom2.
////////////////////////////////////////////////////////////////////
108
static int OdeUtil::collide2(OdeGeom const &geom1, OdeGeom const &geom2, PyObject *arg, PyObject *callback);

1256 13 space_to_geom 0 4 1310 22 OdeUtil::space_to_geom 0 1 678 0
61
static OdeGeom OdeUtil::space_to_geom(OdeSpace const &space);

1257 12 get_infinity 0 4 1310 21 OdeUtil::get_infinity 0 1 679 73
// RAU we can't access OC_infinity as constants are not exposed in python
41
static float OdeUtil::get_infinity(void);

1258 13 rand_get_seed 0 4 1310 22 OdeUtil::rand_get_seed 0 1 680 0
40
static int OdeUtil::rand_get_seed(void);

1259 13 rand_set_seed 0 4 1310 22 OdeUtil::rand_set_seed 0 1 681 0
42
static void OdeUtil::rand_set_seed(int s);

1260 8 ~OdeUtil 0 4 1310 17 OdeUtil::~OdeUtil 0 0 0
24
OdeUtil::~OdeUtil(void);

681
1 14 Dtool_sTqOSgW9 0 7 10 1311 0 14 Dtool_sTqOSgW9 0 0 
2 14 Dtool_sTqOK2Lv 0 7 10 1311 0 14 Dtool_sTqOK2Lv 0 1 4 copy 1 1312  
3 14 Dtool_sTqOQY8E 0 4 11 1314 0 14 Dtool_sTqOQY8E 0 1 4 this 3 1311  
4 14 Dtool_sTqOqrmt 0 6 12 1315 0 14 Dtool_sTqOqrmt 942 // Filename: odeWorld.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeWorld
//               does not point to a valid world. It is an error to
//               call a method on an empty world.
//               Note that an empty OdeWorld also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1312  
5 14 Dtool_sTqOeICR 0 6 13 1316 0 14 Dtool_sTqOeICR 248 ////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::get_id
//       Access: Published
//  Description: Returns the underlying dWorldID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1312  
6 14 Dtool_sTqOpAda 0 4 14 1314 0 14 Dtool_sTqOpAda 0 2 4 this 3 1311  3 vec 1 1317  
7 14 Dtool_sTqOenQT 0 4 14 1314 0 14 Dtool_sTqOenQT 0 4 4 this 3 1311  1 x 1 1320  1 y 1 1320  1 z 1 1320  
8 14 Dtool_sTqO7r7A 0 4 15 1314 0 14 Dtool_sTqO7r7A 0 2 4 this 3 1311  3 erp 1 1320  
9 14 Dtool_sTqOInbQ 0 4 16 1314 0 14 Dtool_sTqOInbQ 0 2 4 this 3 1311  3 cfm 1 1320  
10 14 Dtool_sTqOxVK8 0 4 17 1314 0 14 Dtool_sTqOxVK8 0 2 4 this 3 1311  3 num 1 1321  
11 14 Dtool_sTqOg82m 0 4 18 1314 0 14 Dtool_sTqOg82m 0 2 4 this 3 1311  15 over_relaxation 1 1320  
12 14 Dtool_sTqOJiHA 0 4 19 1314 0 14 Dtool_sTqOJiHA 0 2 4 this 3 1311  3 vel 1 1320  
13 14 Dtool_sTqO4p5o 0 4 20 1314 0 14 Dtool_sTqO4p5o 0 2 4 this 3 1311  5 depth 1 1320  
14 14 Dtool_sTqOdECg 0 4 21 1314 0 14 Dtool_sTqOdECg 0 2 4 this 3 1311  17 auto_enable_depth 1 1321  
15 14 Dtool_sTqOktT6 0 4 22 1314 0 14 Dtool_sTqOktT6 0 2 4 this 3 1311  16 linear_threshold 1 1320  
16 14 Dtool_sTqOP717 0 4 23 1314 0 14 Dtool_sTqOP717 0 2 4 this 3 1311  17 angular_threshold 1 1320  
17 14 Dtool_sTqOfJpy 0 4 24 1314 0 14 Dtool_sTqOfJpy 0 2 4 this 3 1311  5 steps 1 1321  
18 14 Dtool_sTqO9LLJ 0 4 25 1314 0 14 Dtool_sTqO9LLJ 0 2 4 this 3 1311  4 time 1 1320  
19 14 Dtool_sTqOt_qL 0 4 26 1314 0 14 Dtool_sTqOt_qL 0 2 4 this 3 1311  15 do_auto_disable 1 1321  
20 14 Dtool_sTqO7FBj 0 7 27 1322 0 14 Dtool_sTqO7FBj 0 1 4 this 3 1312  
21 14 Dtool_sTqO9H6U 0 6 28 1320 0 14 Dtool_sTqO9H6U 0 1 4 this 3 1312  
22 14 Dtool_sTqOo7bk 0 6 29 1320 0 14 Dtool_sTqOo7bk 0 1 4 this 3 1312  
23 14 Dtool_sTqOeLjK 0 6 30 1321 0 14 Dtool_sTqOeLjK 0 1 4 this 3 1312  
24 14 Dtool_sTqOOhj4 0 6 31 1320 0 14 Dtool_sTqOOhj4 0 1 4 this 3 1312  
25 14 Dtool_sTqO8R2j 0 6 32 1320 0 14 Dtool_sTqO8R2j 0 1 4 this 3 1312  
26 14 Dtool_sTqOdaT6 0 6 33 1320 0 14 Dtool_sTqOdaT6 0 1 4 this 3 1312  
27 14 Dtool_sTqOIM4T 0 6 34 1321 0 14 Dtool_sTqOIM4T 0 1 4 this 3 1312  
28 14 Dtool_sTqO47sl 0 6 35 1320 0 14 Dtool_sTqO47sl 0 1 4 this 3 1312  
29 14 Dtool_sTqOm9NF 0 6 36 1320 0 14 Dtool_sTqOm9NF 0 1 4 this 3 1312  
30 14 Dtool_sTqOvFAB 0 6 37 1321 0 14 Dtool_sTqOvFAB 0 1 4 this 3 1312  
31 14 Dtool_sTqO56ft 0 6 38 1320 0 14 Dtool_sTqO56ft 0 1 4 this 3 1312  
32 14 Dtool_sTqOw4OX 0 6 39 1321 0 14 Dtool_sTqOw4OX 0 1 4 this 3 1312  
33 14 Dtool_sTqOrA8s 0 7 40 1322 0 14 Dtool_sTqOrA8s 0 3 4 this 3 1311  8 stepsize 1 1320  7 impulse 1 1317  
34 14 Dtool_sTqOTN6b 0 7 40 1322 0 14 Dtool_sTqOTN6b 0 5 4 this 3 1311  8 stepsize 1 1320  2 ix 1 1320  2 iy 1 1320  2 iz 1 1320  
35 14 Dtool_sTqOAQKf 0 4 41 1314 0 14 Dtool_sTqOAQKf 0 2 4 this 3 1311  8 stepsize 1 1320  
36 14 Dtool_sTqOSBA1 0 4 42 1314 0 14 Dtool_sTqOSBA1 0 2 4 this 3 1311  8 stepsize 1 1320  
37 14 Dtool_sTqOVAyi 0 4 43 1314 0 14 Dtool_sTqOVAyi 0 3 4 this 3 1311  8 stepsize 1 1320  13 maxiterations 1 1321  
38 14 Dtool_sTqOYsYo 0 6 44 1321 0 14 Dtool_sTqOYsYo 0 2 4 this 3 1312  5 other 1 1312  
39 14 Dtool_sTqOmm6V 0 4 45 1314 0 14 Dtool_sTqOmm6V 0 2 4 this 3 1311  12 num_surfaces 1 1323  
40 14 Dtool_sTqOCIbf 0 4 46 1314 0 14 Dtool_sTqOCIbf 55 //void assign_surface_body(OdeBody& body, int surface); 3 4 this 3 1311  4 body 1 1324  7 surface 1 1321  
41 14 Dtool_sTqO3lGk 0 4 47 1314 0 14 Dtool_sTqO3lGk 55 //void assign_surface_body(OdeBody& body, int surface); 10 4 this 3 1311  4 pos1 1 1323  4 pos2 1 1323  2 mu 1 1320  6 bounce 1 1320  10 bounce_vel 1 1320  8 soft_erp 1 1320  8 soft_cfm 1 1320  4 slip 1 1320  6 dampen 1 1320  
42 14 Dtool_sTqOOfqx 0 6 48 1320 0 14 Dtool_sTqOOfqx 0 3 4 this 3 1311  2 dt 1 1320  4 body 1 1324  
43 14 Dtool_sTqO05DB 0 7 50 1326 0 14 Dtool_sTqO05DB 0 0 
44 14 Dtool_sTqO_scl 0 6 49 1315 0 14 Dtool_sTqO_scl 0 1 4 this 3 1312  
45 14 Dtool_sTqO8kx4 0 7 52 1327 0 14 Dtool_sTqO8kx4 0 0 
46 14 Dtool_sTqO7Etj 0 4 53 1314 0 14 Dtool_sTqO7Etj 0 1 4 this 3 1327  
47 14 Dtool_sTqO0a67 0 6 54 1330 0 14 Dtool_sTqO0a67 491 // Filename: odeJointGroup.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1328  
48 14 Dtool_sTqO9_fM 0 4 55 1314 0 14 Dtool_sTqO9_fM 0 1 4 this 3 1328  
49 14 Dtool_sTqOoK_U 0 6 56 1321 0 14 Dtool_sTqOoK_U 0 2 4 this 3 1328  5 other 1 1328  
50 14 Dtool_sTqO436b 0 7 57 1326 0 14 Dtool_sTqO436b 0 0 
51 14 Dtool_sTqOh5ao 0 7 60 1335 0 14 Dtool_sTqOh5ao 0 1 4 this 3 1333  
52 14 Dtool_sTqOr5SZ 0 7 61 1335 0 14 Dtool_sTqOr5SZ 0 1 4 this 3 1333  
53 14 Dtool_sTqOjUNA 0 7 62 1335 0 14 Dtool_sTqOjUNA 0 1 4 this 3 1333  
54 14 Dtool_sTqObQNc 0 7 63 1335 0 14 Dtool_sTqObQNc 0 1 4 this 3 1333  
55 14 Dtool_sTqOIKi8 0 4 67 1314 0 14 Dtool_sTqOIKi8 0 1 4 this 3 1336  
56 14 Dtool_sTqOhYNl 0 6 68 1315 0 14 Dtool_sTqOhYNl 942 // Filename: odeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeJoint
//               does not point to a valid joint. It is an error to
//               call a method on an empty joint.
//               Note that an empty OdeJoint also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
57 14 Dtool_sTqOL6oI 0 6 69 1339 0 14 Dtool_sTqOL6oI 248 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::get_id
//       Access: Published
//  Description: Returns the underlying dJointID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
58 14 Dtool_sTqOmNmo 0 6 70 1321 0 14 Dtool_sTqOmNmo 30 /* INLINE void *get_data(); */ 1 4 this 3 1337  
59 14 Dtool_sTqO3H_I 0 7 71 1324 0 14 Dtool_sTqO3H_I 0 2 4 this 3 1337  5 index 1 1321  
60 14 Dtool_sTqONoSO 0 4 72 1314 0 14 Dtool_sTqONoSO 0 2 4 this 3 1336  6 param0 0 1340  
61 14 Dtool_sTqOvJTj 0 4 72 1314 0 14 Dtool_sTqOvJTj 0 2 4 this 3 1336  4 flag 1 1315  
62 14 Dtool_sTqOLVlu 0 4 72 1314 0 14 Dtool_sTqOLVlu 0 1 4 this 3 1336  
63 14 Dtool_sTqO7Pqt 0 6 73 1340 0 14 Dtool_sTqO7Pqt 0 1 4 this 3 1336  
64 14 Dtool_sTqO65Uw 0 4 74 1314 0 14 Dtool_sTqO65Uw 430 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_bodies
//       Access: Published
//  Description: Attaches two OdeBody objects to this joint.
//               Order is important.
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1336  5 body1 1 1341  5 body2 1 1341  
65 14 Dtool_sTqO999A 0 4 75 1314 0 14 Dtool_sTqO999A 511 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_body
//       Access: Published
//  Description: Attaches a single OdeBody to this joint at the
//               specified index (0 or 1).  The other index will be 
//               set to the environment (null).
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1336  4 body 1 1341  5 index 1 1321  
66 14 Dtool_sTqO3ezo 0 4 76 1314 0 14 Dtool_sTqO3ezo 0 1 4 this 3 1336  
67 14 Dtool_sTqOm_hW 0 4 77 1314 0 14 Dtool_sTqOm_hW 0 3 4 this 3 1337  3 out 1 1343  6 indent 1 1345  
68 14 Dtool_sTqOFaTp 0 4 77 1314 0 14 Dtool_sTqOFaTp 0 2 4 this 3 1337  3 out 1 1343  
69 14 Dtool_sTqO7io7 0 4 77 1314 0 14 Dtool_sTqO7io7 0 1 4 this 3 1337  
70 14 Dtool_sTqOakwR 0 6 78 1321 0 14 Dtool_sTqOakwR 0 2 4 this 3 1337  5 other 1 1337  
71 14 Dtool_sTqO72Nf 0 6 79 1315 0 14 Dtool_sTqO72Nf 0 2 4 this 3 1337  5 other 1 1337  
72 14 Dtool_sTqOtRu7 0 7 81 1346 0 14 Dtool_sTqOtRu7 0 1 4 this 3 1337  
73 14 Dtool_sTqORgNH 0 7 82 1347 0 14 Dtool_sTqORgNH 0 1 4 this 3 1337  
74 14 Dtool_sTqOo_8D 0 7 83 1348 0 14 Dtool_sTqOo_8D 0 1 4 this 3 1337  
75 14 Dtool_sTqO6AOV 0 7 84 1349 0 14 Dtool_sTqO6AOV 0 1 4 this 3 1337  
76 14 Dtool_sTqOz_o3 0 7 85 1350 0 14 Dtool_sTqOz_o3 0 1 4 this 3 1337  
77 14 Dtool_sTqOr_jT 0 7 86 1351 0 14 Dtool_sTqOr_jT 0 1 4 this 3 1337  
78 14 Dtool_sTqOxLC_ 0 7 87 1352 0 14 Dtool_sTqOxLC_ 0 1 4 this 3 1337  
79 14 Dtool_sTqOxzoZ 0 7 88 1353 0 14 Dtool_sTqOxzoZ 0 1 4 this 3 1337  
80 14 Dtool_sTqO_QxA 0 7 89 1354 0 14 Dtool_sTqO_QxA 0 1 4 this 3 1337  
81 14 Dtool_sTqO8ILs 0 7 90 1355 0 14 Dtool_sTqO8ILs 0 1 4 this 3 1337  
82 14 Dtool_sTqOTcVs 0 7 91 1356 0 14 Dtool_sTqOTcVs 0 1 4 this 3 1337  
83 14 Dtool_sTqOMrp4 0 7 92 1326 0 14 Dtool_sTqOMrp4 0 0 
84 14 Dtool_sTqOqeCd 0 6 80 1315 0 14 Dtool_sTqOqeCd 0 1 4 this 3 1337  
85 14 Dtool_sTqOX6_b 0 7 94 1354 0 14 Dtool_sTqOX6_b 0 1 5 world 1 1311  
86 14 Dtool_sTqO2TWl 0 7 94 1354 0 14 Dtool_sTqO2TWl 0 2 5 world 1 1311  11 joint_group 1 1327  
87 14 Dtool_sTqO3gnC 0 4 95 1314 0 14 Dtool_sTqO3gnC 492 // Filename: odeAMotorJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  3 num 1 1321  
88 14 Dtool_sTqOb2u3 0 4 96 1314 0 14 Dtool_sTqOb2u3 0 4 4 this 3 1354  4 anum 1 1321  3 rel 1 1321  4 axis 1 1317  
89 14 Dtool_sTqOrAqW 0 4 96 1314 0 14 Dtool_sTqOrAqW 0 6 4 this 3 1354  4 anum 1 1321  3 rel 1 1321  1 x 1 1320  1 y 1 1320  1 z 1 1320  
90 14 Dtool_sTqOU3BV 0 4 97 1314 0 14 Dtool_sTqOU3BV 0 3 4 this 3 1354  4 anum 1 1321  5 angle 1 1320  
91 14 Dtool_sTqOGG1t 0 4 98 1314 0 14 Dtool_sTqOGG1t 0 2 4 this 3 1354  4 mode 1 1321  
92 14 Dtool_sTqOJBrb 0 4 99 1314 0 14 Dtool_sTqOJBrb 0 4 4 this 3 1354  7 torque1 1 1320  7 torque2 1 1320  7 torque3 1 1320  
93 14 Dtool_sTqOavI9 0 6 100 1321 0 14 Dtool_sTqOavI9 0 1 4 this 3 1357  
94 14 Dtool_sTqOCTYA 0 7 101 1322 0 14 Dtool_sTqOCTYA 0 2 4 this 3 1357  4 anum 1 1321  
95 14 Dtool_sTqO1zd3 0 6 102 1321 0 14 Dtool_sTqO1zd3 0 2 4 this 3 1357  4 anum 1 1321  
96 14 Dtool_sTqO3tTR 0 6 103 1320 0 14 Dtool_sTqO3tTR 0 2 4 this 3 1357  4 anum 1 1321  
97 14 Dtool_sTqOM44a 0 6 104 1320 0 14 Dtool_sTqOM44a 0 2 4 this 3 1357  4 anum 1 1321  
98 14 Dtool_sTqO5NLF 0 6 105 1321 0 14 Dtool_sTqO5NLF 0 1 4 this 3 1357  
99 14 Dtool_sTqOl7N0 0 4 106 1314 0 14 Dtool_sTqOl7N0 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
100 14 Dtool_sTqOg82A 0 4 107 1314 0 14 Dtool_sTqOg82A 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
101 14 Dtool_sTqOtNYF 0 4 108 1314 0 14 Dtool_sTqOtNYF 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
102 14 Dtool_sTqOEaVZ 0 4 109 1314 0 14 Dtool_sTqOEaVZ 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
103 14 Dtool_sTqO8_bG 0 4 110 1314 0 14 Dtool_sTqO8_bG 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
104 14 Dtool_sTqOETYh 0 4 111 1314 0 14 Dtool_sTqOETYh 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
105 14 Dtool_sTqO1hVS 0 4 112 1314 0 14 Dtool_sTqO1hVS 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
106 14 Dtool_sTqOsUe9 0 4 113 1314 0 14 Dtool_sTqOsUe9 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
107 14 Dtool_sTqOM5Uy 0 4 114 1314 0 14 Dtool_sTqOM5Uy 0 3 4 this 3 1354  4 axis 1 1321  3 val 1 1320  
108 14 Dtool_sTqObhmS 0 6 115 1320 0 14 Dtool_sTqObhmS 0 2 4 this 3 1357  4 axis 1 1321  
109 14 Dtool_sTqOHePf 0 6 116 1320 0 14 Dtool_sTqOHePf 0 2 4 this 3 1357  4 axis 1 1321  
110 14 Dtool_sTqOo9Pa 0 6 117 1320 0 14 Dtool_sTqOo9Pa 0 2 4 this 3 1357  4 axis 1 1321  
111 14 Dtool_sTqOiHpV 0 6 118 1320 0 14 Dtool_sTqOiHpV 0 2 4 this 3 1357  4 axis 1 1321  
112 14 Dtool_sTqOhLw9 0 6 119 1320 0 14 Dtool_sTqOhLw9 0 2 4 this 3 1357  4 axis 1 1321  
113 14 Dtool_sTqOTulD 0 6 120 1320 0 14 Dtool_sTqOTulD 0 2 4 this 3 1357  4 axis 1 1321  
114 14 Dtool_sTqOgoLn 0 6 121 1320 0 14 Dtool_sTqOgoLn 0 2 4 this 3 1357  4 axis 1 1321  
115 14 Dtool_sTqO4Jvh 0 6 122 1320 0 14 Dtool_sTqO4Jvh 0 2 4 this 3 1357  4 axis 1 1321  
116 14 Dtool_sTqOzenW 0 6 123 1320 0 14 Dtool_sTqOzenW 0 2 4 this 3 1357  4 axis 1 1321  
117 14 Dtool_sTqOQJeM 0 7 124 1326 0 14 Dtool_sTqOQJeM 0 0 
118 14 Dtool_sTqO0ou4 0 7 126 1346 0 14 Dtool_sTqO0ou4 0 1 5 world 1 1311  
119 14 Dtool_sTqOkXuP 0 7 126 1346 0 14 Dtool_sTqOkXuP 0 2 5 world 1 1311  11 joint_group 1 1327  
120 14 Dtool_sTqOqXP7 0 4 127 1314 0 14 Dtool_sTqOqXP7 0 2 4 this 3 1346  6 anchor 1 1317  
121 14 Dtool_sTqO7e9y 0 4 127 1314 0 14 Dtool_sTqO7e9y 490 // Filename: odeBallJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1346  1 x 1 1320  1 y 1 1320  1 z 1 1320  
122 14 Dtool_sTqO1Rm1 0 4 128 1314 0 14 Dtool_sTqO1Rm1 0 2 4 this 3 1346  6 anchor 1 1317  
123 14 Dtool_sTqOScGt 0 4 128 1314 0 14 Dtool_sTqOScGt 0 4 4 this 3 1346  1 x 1 1320  1 y 1 1320  1 z 1 1320  
124 14 Dtool_sTqOPwkP 0 7 129 1322 0 14 Dtool_sTqOPwkP 0 1 4 this 3 1359  
125 14 Dtool_sTqOK2IC 0 7 130 1322 0 14 Dtool_sTqOK2IC 0 1 4 this 3 1359  
126 14 Dtool_sTqOMY4I 0 7 131 1326 0 14 Dtool_sTqOMY4I 0 0 
127 14 Dtool_sTqOl7RU 0 7 134 1361 0 14 Dtool_sTqOl7RU 0 0 
128 14 Dtool_sTqOFvRR 0 7 134 1361 0 14 Dtool_sTqOFvRR 0 1 4 copy 1 1362  
129 14 Dtool_sTqO64Kq 0 6 135 1321 0 14 Dtool_sTqO64Kq 485 // Filename: odeMass.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1361  
130 14 Dtool_sTqOoBsr 0 4 136 1314 0 14 Dtool_sTqOoBsr 0 1 4 this 3 1361  
131 14 Dtool_sTqOz44c 0 4 137 1314 0 14 Dtool_sTqOz44c 0 4 4 this 3 1361  7 themass 1 1320  6 center 1 1317  1 r 1 1364  
132 14 Dtool_sTqOKsYE 0 4 137 1314 0 14 Dtool_sTqOKsYE 0 11 4 this 3 1361  7 themass 1 1320  3 cgx 1 1320  3 cgy 1 1320  3 cgz 1 1320  3 I11 1 1320  3 I22 1 1320  3 I33 1 1320  3 I12 1 1320  3 I13 1 1320  3 I23 1 1320  
133 14 Dtool_sTqO0Nut 0 4 138 1314 0 14 Dtool_sTqO0Nut 0 3 4 this 3 1361  7 density 1 1320  6 radius 1 1320  
134 14 Dtool_sTqOv8vI 0 4 139 1314 0 14 Dtool_sTqOv8vI 0 3 4 this 3 1361  10 total_mass 1 1320  6 radius 1 1320  
135 14 Dtool_sTqOoYEB 0 4 140 1314 0 14 Dtool_sTqOoYEB 0 5 4 this 3 1361  7 density 1 1320  9 direction 1 1321  6 radius 1 1320  6 length 1 1320  
136 14 Dtool_sTqOHNH7 0 4 141 1314 0 14 Dtool_sTqOHNH7 0 5 4 this 3 1361  10 total_mass 1 1320  9 direction 1 1321  6 radius 1 1320  6 length 1 1320  
137 14 Dtool_sTqOBMGT 0 4 142 1314 0 14 Dtool_sTqOBMGT 0 5 4 this 3 1361  7 density 1 1320  9 direction 1 1321  6 radius 1 1320  6 length 1 1320  
138 14 Dtool_sTqOJK4T 0 4 143 1314 0 14 Dtool_sTqOJK4T 0 5 4 this 3 1361  10 total_mass 1 1320  9 direction 1 1321  6 radius 1 1320  6 length 1 1320  
139 14 Dtool_sTqOC9N1 0 4 144 1314 0 14 Dtool_sTqOC9N1 0 3 4 this 3 1361  7 density 1 1320  4 size 1 1317  
140 14 Dtool_sTqOhh5g 0 4 144 1314 0 14 Dtool_sTqOhh5g 0 5 4 this 3 1361  7 density 1 1320  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
141 14 Dtool_sTqOmp5A 0 4 145 1314 0 14 Dtool_sTqOmp5A 0 3 4 this 3 1361  10 total_mass 1 1320  4 size 1 1317  
142 14 Dtool_sTqO9XXw 0 4 145 1314 0 14 Dtool_sTqO9XXw 0 5 4 this 3 1361  10 total_mass 1 1320  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
143 14 Dtool_sTqOPVcX 0 4 146 1314 0 14 Dtool_sTqOPVcX 0 2 4 this 3 1361  7 newmass 1 1320  
144 14 Dtool_sTqOxBsQ 0 4 147 1314 0 14 Dtool_sTqOxBsQ 0 2 4 this 3 1361  3 pos 1 1317  
145 14 Dtool_sTqOXdfG 0 4 147 1314 0 14 Dtool_sTqOXdfG 0 4 4 this 3 1361  1 x 1 1320  1 y 1 1320  1 z 1 1320  
146 14 Dtool_sTqO89Mg 0 4 148 1314 0 14 Dtool_sTqO89Mg 0 2 4 this 3 1361  1 r 1 1364  
147 14 Dtool_sTqOtlWU 0 4 149 1314 0 14 Dtool_sTqOtlWU 0 2 4 this 3 1361  5 other 1 1361  
148 14 Dtool_sTqOTidF 0 6 150 1320 0 14 Dtool_sTqOTidF 0 1 4 this 3 1362  
149 14 Dtool_sTqOz_eX 0 7 151 1368 0 14 Dtool_sTqOz_eX 0 1 4 this 3 1362  
150 14 Dtool_sTqO63xk 0 7 152 1369 0 14 Dtool_sTqO63xk 0 1 4 this 3 1362  
151 14 Dtool_sTqODs9v 0 4 153 1314 0 14 Dtool_sTqODs9v 0 3 4 this 3 1362  3 out 1 1343  6 indent 1 1345  
152 14 Dtool_sTqO1JlI 0 4 153 1314 0 14 Dtool_sTqO1JlI 0 2 4 this 3 1362  3 out 1 1343  
153 14 Dtool_sTqO39NP 0 4 153 1314 0 14 Dtool_sTqO39NP 0 1 4 this 3 1362  
154 14 Dtool_sTqOAuG7 0 7 154 1326 0 14 Dtool_sTqOAuG7 0 0 
155 14 Dtool_sTqOUz7M 0 7 156 1324 0 14 Dtool_sTqOUz7M 0 1 5 world 1 1311  
156 14 Dtool_sTqOWmXm 0 4 157 1314 0 14 Dtool_sTqOWmXm 0 1 4 this 3 1324  
157 14 Dtool_sTqOu8oN 0 6 158 1315 0 14 Dtool_sTqOu8oN 936 // Filename: odeBody.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeBody
//               does not point to a valid body. It is an error to
//               call a method on an empty body.
//               Note that an empty OdeBody also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
158 14 Dtool_sTqOFGug 0 6 159 1370 0 14 Dtool_sTqOFGug 246 ////////////////////////////////////////////////////////////////////
//     Function: OdeBody::get_id
//       Access: Published
//  Description: Returns the underlying dBodyID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
159 14 Dtool_sTqO9H7b 0 4 160 1314 0 14 Dtool_sTqO9H7b 0 2 4 this 3 1324  16 linear_threshold 1 1320  
160 14 Dtool_sTqOIb_t 0 4 161 1314 0 14 Dtool_sTqOIb_t 0 2 4 this 3 1324  17 angular_threshold 1 1320  
161 14 Dtool_sTqOHVvj 0 4 162 1314 0 14 Dtool_sTqOHVvj 0 2 4 this 3 1324  5 steps 1 1321  
162 14 Dtool_sTqOWebs 0 4 163 1314 0 14 Dtool_sTqOWebs 0 2 4 this 3 1324  4 time 1 1320  
163 14 Dtool_sTqOiqiM 0 4 164 1314 0 14 Dtool_sTqOiqiM 0 2 4 this 3 1324  15 do_auto_disable 1 1321  
164 14 Dtool_sTqOQBwk 0 4 165 1314 0 14 Dtool_sTqOQBwk 0 1 4 this 3 1324  
165 14 Dtool_sTqO8wp1 0 4 166 1314 0 14 Dtool_sTqO8wp1 0 2 4 this 3 1324  4 data 1 1371  
166 14 Dtool_sTqOnLY5 0 4 167 1314 0 14 Dtool_sTqOnLY5 0 2 4 this 3 1324  3 pos 1 1317  
167 14 Dtool_sTqOXcNy 0 4 167 1314 0 14 Dtool_sTqOXcNy 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
168 14 Dtool_sTqOllWo 0 4 168 1314 0 14 Dtool_sTqOllWo 0 2 4 this 3 1324  1 r 1 1364  
169 14 Dtool_sTqOvNAs 0 4 169 1314 0 14 Dtool_sTqOvNAs 0 2 4 this 3 1324  1 q 1 1373  
170 14 Dtool_sTqOnERy 0 4 170 1314 0 14 Dtool_sTqOnERy 0 2 4 this 3 1324  3 vel 1 1317  
171 14 Dtool_sTqOcX_d 0 4 170 1314 0 14 Dtool_sTqOcX_d 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
172 14 Dtool_sTqOJnMq 0 4 171 1314 0 14 Dtool_sTqOJnMq 0 2 4 this 3 1324  3 vel 1 1317  
173 14 Dtool_sTqO2u6h 0 4 171 1314 0 14 Dtool_sTqO2u6h 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
174 14 Dtool_sTqOOZsc 0 4 172 1314 0 14 Dtool_sTqOOZsc 0 2 4 this 3 1324  4 mass 1 1361  
175 14 Dtool_sTqOo9RZ 0 6 173 1320 0 14 Dtool_sTqOo9RZ 0 1 4 this 3 1341  
176 14 Dtool_sTqOt4Q6 0 6 174 1320 0 14 Dtool_sTqOt4Q6 0 1 4 this 3 1341  
177 14 Dtool_sTqOSKLQ 0 6 175 1321 0 14 Dtool_sTqOSKLQ 0 1 4 this 3 1341  
178 14 Dtool_sTqOd3j1 0 6 176 1320 0 14 Dtool_sTqOd3j1 0 1 4 this 3 1341  
179 14 Dtool_sTqOKU3m 0 6 177 1321 0 14 Dtool_sTqOKU3m 0 1 4 this 3 1341  
180 14 Dtool_sTqO9eZW 0 6 178 1371 0 14 Dtool_sTqO9eZW 0 1 4 this 3 1341  
181 14 Dtool_sTqOON1i 0 7 179 1322 0 14 Dtool_sTqOON1i 0 1 4 this 3 1341  
182 14 Dtool_sTqOka7C 0 7 180 1369 0 14 Dtool_sTqOka7C 0 1 4 this 3 1341  
183 14 Dtool_sTqOPrQp 0 7 181 1377 0 14 Dtool_sTqOPrQp 0 1 4 this 3 1341  
184 14 Dtool_sTqOJa4w 0 7 182 1322 0 14 Dtool_sTqOJa4w 0 1 4 this 3 1341  
185 14 Dtool_sTqOMoje 0 7 183 1322 0 14 Dtool_sTqOMoje 0 1 4 this 3 1341  
186 14 Dtool_sTqOWMnN 0 7 184 1361 0 14 Dtool_sTqOWMnN 0 1 4 this 3 1341  
187 14 Dtool_sTqOqyfi 0 4 185 1314 0 14 Dtool_sTqOqyfi 0 2 4 this 3 1324  1 f 1 1317  
188 14 Dtool_sTqOepTY 0 4 185 1314 0 14 Dtool_sTqOepTY 0 4 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
189 14 Dtool_sTqOqLRh 0 4 186 1314 0 14 Dtool_sTqOqLRh 0 2 4 this 3 1324  1 f 1 1317  
190 14 Dtool_sTqOe_Hd 0 4 186 1314 0 14 Dtool_sTqOe_Hd 0 4 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
191 14 Dtool_sTqOoZjF 0 4 187 1314 0 14 Dtool_sTqOoZjF 0 2 4 this 3 1324  1 f 1 1317  
192 14 Dtool_sTqOcc4g 0 4 187 1314 0 14 Dtool_sTqOcc4g 0 4 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
193 14 Dtool_sTqO1NeF 0 4 188 1314 0 14 Dtool_sTqO1NeF 0 2 4 this 3 1324  1 f 1 1317  
194 14 Dtool_sTqO6TKx 0 4 188 1314 0 14 Dtool_sTqO6TKx 0 4 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
195 14 Dtool_sTqOgmuA 0 4 189 1314 0 14 Dtool_sTqOgmuA 0 3 4 this 3 1324  1 f 1 1317  3 pos 1 1317  
196 14 Dtool_sTqOwkbd 0 4 189 1314 0 14 Dtool_sTqOwkbd 0 7 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
197 14 Dtool_sTqO_FQA 0 4 190 1314 0 14 Dtool_sTqO_FQA 0 3 4 this 3 1324  1 f 1 1317  3 pos 1 1317  
198 14 Dtool_sTqOj0Au 0 4 190 1314 0 14 Dtool_sTqOj0Au 0 7 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
199 14 Dtool_sTqOQ6Zv 0 4 191 1314 0 14 Dtool_sTqOQ6Zv 0 3 4 this 3 1324  1 f 1 1317  3 pos 1 1317  
200 14 Dtool_sTqOmVKd 0 4 191 1314 0 14 Dtool_sTqOmVKd 0 7 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
201 14 Dtool_sTqOJJWD 0 4 192 1314 0 14 Dtool_sTqOJJWD 0 3 4 this 3 1324  1 f 1 1317  3 pos 1 1317  
202 14 Dtool_sTqORRLK 0 4 192 1314 0 14 Dtool_sTqORRLK 0 7 4 this 3 1324  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
203 14 Dtool_sTqOmMq5 0 4 193 1314 0 14 Dtool_sTqOmMq5 0 2 4 this 3 1324  1 f 1 1317  
204 14 Dtool_sTqOCOfv 0 4 193 1314 0 14 Dtool_sTqOCOfv 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
205 14 Dtool_sTqOWrc4 0 4 194 1314 0 14 Dtool_sTqOWrc4 0 2 4 this 3 1324  1 f 1 1317  
206 14 Dtool_sTqOVzR0 0 4 194 1314 0 14 Dtool_sTqOVzR0 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
207 14 Dtool_sTqOQ3wW 0 7 195 1368 0 14 Dtool_sTqOQ3wW 0 2 4 this 3 1341  3 pos 1 1317  
208 14 Dtool_sTqOBHgj 0 7 195 1368 0 14 Dtool_sTqOBHgj 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
209 14 Dtool_sTqOBvTm 0 7 196 1368 0 14 Dtool_sTqOBvTm 0 2 4 this 3 1341  3 pos 1 1317  
210 14 Dtool_sTqOJTDz 0 7 196 1368 0 14 Dtool_sTqOJTDz 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
211 14 Dtool_sTqO7KB0 0 7 197 1368 0 14 Dtool_sTqO7KB0 0 2 4 this 3 1341  3 pos 1 1317  
212 14 Dtool_sTqOeHjA 0 7 197 1368 0 14 Dtool_sTqOeHjA 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
213 14 Dtool_sTqOMiS9 0 7 198 1368 0 14 Dtool_sTqOMiS9 0 2 4 this 3 1341  3 pos 1 1317  
214 14 Dtool_sTqOEADK 0 7 198 1368 0 14 Dtool_sTqOEADK 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
215 14 Dtool_sTqOR2lV 0 7 199 1322 0 14 Dtool_sTqOR2lV 0 2 4 this 3 1341  3 pos 1 1317  
216 14 Dtool_sTqOImeS 0 7 199 1322 0 14 Dtool_sTqOImeS 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
217 14 Dtool_sTqODdVO 0 7 200 1322 0 14 Dtool_sTqODdVO 0 2 4 this 3 1341  3 pos 1 1317  
218 14 Dtool_sTqObFFb 0 7 200 1322 0 14 Dtool_sTqObFFb 0 4 4 this 3 1341  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
219 14 Dtool_sTqOVsom 0 4 201 1314 0 14 Dtool_sTqOVsom 0 2 4 this 3 1324  4 mode 1 1321  
220 14 Dtool_sTqONRm8 0 4 202 1314 0 14 Dtool_sTqONRm8 0 2 4 this 3 1324  4 axis 1 1317  
221 14 Dtool_sTqOBGkr 0 4 202 1314 0 14 Dtool_sTqOBGkr 0 4 4 this 3 1324  1 x 1 1320  1 y 1 1320  1 z 1 1320  
222 14 Dtool_sTqOqt1w 0 6 203 1321 0 14 Dtool_sTqOqt1w 0 1 4 this 3 1341  
223 14 Dtool_sTqO98IX 0 7 204 1322 0 14 Dtool_sTqO98IX 0 1 4 this 3 1341  
224 14 Dtool_sTqOrroe 0 6 205 1321 0 14 Dtool_sTqOrroe 0 1 4 this 3 1341  
225 14 Dtool_sTqOmWrD 0 7 206 1336 0 14 Dtool_sTqOmWrD 0 2 4 this 3 1341  5 index 1 1321  
226 14 Dtool_sTqOoKqz 0 4 207 1314 0 14 Dtool_sTqOoKqz 0 1 4 this 3 1324  
227 14 Dtool_sTqOggiP 0 4 208 1314 0 14 Dtool_sTqOggiP 0 1 4 this 3 1324  
228 14 Dtool_sTqO0xr6 0 6 209 1321 0 14 Dtool_sTqO0xr6 0 1 4 this 3 1341  
229 14 Dtool_sTqORD2K 0 4 210 1314 0 14 Dtool_sTqORD2K 0 2 4 this 3 1324  4 mode 1 1321  
230 14 Dtool_sTqOz1_n 0 6 211 1321 0 14 Dtool_sTqOz1_n 0 1 4 this 3 1341  
231 14 Dtool_sTqO5WFl 0 4 212 1314 0 14 Dtool_sTqO5WFl 0 3 4 this 3 1341  3 out 1 1343  6 indent 1 1345  
232 14 Dtool_sTqOGKt9 0 4 212 1314 0 14 Dtool_sTqOGKt9 0 2 4 this 3 1341  3 out 1 1343  
233 14 Dtool_sTqOlKUE 0 4 212 1314 0 14 Dtool_sTqOlKUE 0 1 4 this 3 1341  
234 14 Dtool_sTqO_8IH 0 6 214 1321 0 14 Dtool_sTqO_8IH 0 2 4 this 3 1341  5 other 1 1341  
235 14 Dtool_sTqOD2Pw 0 7 215 1326 0 14 Dtool_sTqOD2Pw 0 0 
236 14 Dtool_sTqOu8Ux 0 6 213 1315 0 14 Dtool_sTqOu8Ux 0 1 4 this 3 1341  
237 14 Dtool_sTqOoE44 0 4 217 1314 0 14 Dtool_sTqOoE44 0 1 4 this 3 1378  
238 14 Dtool_sTqO_njh 0 6 218 1315 0 14 Dtool_sTqO_njh 942 // Filename: odeSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeSpace::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeSpace
//               does not point to a valid space. It is an error to
//               call a method on an empty space.
//               Note that an empty OdeSpace also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
239 14 Dtool_sTqO_5BH 0 4 219 1314 0 14 Dtool_sTqO_5BH 0 2 4 this 3 1378  4 mode 1 1321  
240 14 Dtool_sTqOgwMZ 0 6 220 1321 0 14 Dtool_sTqOgwMZ 0 1 4 this 3 1379  
241 14 Dtool_sTqOxVCc 0 6 221 1321 0 14 Dtool_sTqOxVCc 0 2 4 this 3 1379  4 geom 1 1381  
242 14 Dtool_sTqOpO1J 0 6 221 1321 0 14 Dtool_sTqOpO1J 0 2 4 this 3 1379  5 space 1 1379  
243 14 Dtool_sTqOBcMo 0 6 222 1321 0 14 Dtool_sTqOBcMo 0 1 4 this 3 1379  
244 14 Dtool_sTqOs6IK 0 4 223 1314 0 14 Dtool_sTqOs6IK 0 3 4 this 3 1379  3 min 1 1322  3 max 1 1322  
245 14 Dtool_sTqOZZ8C 0 6 224 1321 0 14 Dtool_sTqOZZ8C 0 1 4 this 3 1378  
246 14 Dtool_sTqOD2mO 0 6 225 1321 0 14 Dtool_sTqOD2mO 0 1 4 this 3 1379  
247 14 Dtool_sTqOsWAU 0 4 226 1314 0 14 Dtool_sTqOsWAU 0 2 4 this 3 1378  4 bits 1 1383  
248 14 Dtool_sTqOz6QP 0 4 227 1314 0 14 Dtool_sTqOz6QP 0 2 4 this 3 1378  4 bits 1 1383  
249 14 Dtool_sTqO7Jza 0 7 228 1386 0 14 Dtool_sTqO7Jza 0 1 4 this 3 1378  
250 14 Dtool_sTqOQXsu 0 7 229 1386 0 14 Dtool_sTqOQXsu 0 1 4 this 3 1378  
251 14 Dtool_sTqOcFNi 0 4 230 1314 0 14 Dtool_sTqOcFNi 0 1 4 this 3 1378  
252 14 Dtool_sTqOHU_d 0 4 231 1314 0 14 Dtool_sTqOHU_d 0 1 4 this 3 1378  
253 14 Dtool_sTqOhEra 0 6 232 1321 0 14 Dtool_sTqOhEra 0 1 4 this 3 1378  
254 14 Dtool_sTqOjup_ 0 4 233 1314 0 14 Dtool_sTqOjup_ 0 2 4 this 3 1378  6 param0 0 1311  
255 14 Dtool_sTqO5dx8 0 4 234 1314 0 14 Dtool_sTqO5dx8 0 2 4 this 3 1378  6 param0 0 1327  
256 14 Dtool_sTqOZPSN 0 4 235 1314 0 14 Dtool_sTqOZPSN 0 2 4 this 3 1378  4 geom 1 1387  
257 14 Dtool_sTqO2zkP 0 4 235 1314 0 14 Dtool_sTqO2zkP 0 2 4 this 3 1378  5 space 1 1378  
258 14 Dtool_sTqO1wNo 0 4 236 1314 0 14 Dtool_sTqO1wNo 0 2 4 this 3 1378  4 geom 1 1387  
259 14 Dtool_sTqOfLFM 0 4 236 1314 0 14 Dtool_sTqOfLFM 0 2 4 this 3 1378  5 space 1 1378  
260 14 Dtool_sTqOJCvo 0 4 237 1314 0 14 Dtool_sTqOJCvo 0 1 4 this 3 1378  
261 14 Dtool_sTqOtlfI 0 7 238 1387 0 14 Dtool_sTqOtlfI 0 2 4 this 3 1378  1 i 1 1321  
262 14 Dtool_sTqO0Iyp 0 7 239 1378 0 14 Dtool_sTqO0Iyp 104 // Not INLINE because of forward declaration
//static int get_surface_type(OdeSpace * self, dGeomID o1); 1 4 this 3 1379  
263 14 Dtool_sTqO2l3S 0 4 240 1314 0 14 Dtool_sTqO2l3S 0 3 4 this 3 1379  3 out 1 1343  6 indent 1 1345  
264 14 Dtool_sTqOXVpl 0 4 240 1314 0 14 Dtool_sTqOXVpl 0 2 4 this 3 1379  3 out 1 1343  
265 14 Dtool_sTqOSr_3 0 4 240 1314 0 14 Dtool_sTqOSr_3 0 1 4 this 3 1379  
266 14 Dtool_sTqOYg8r 0 7 242 1388 0 14 Dtool_sTqOYg8r 0 1 4 this 3 1379  
267 14 Dtool_sTqOpTBD 0 7 243 1389 0 14 Dtool_sTqOpTBD 0 1 4 this 3 1379  
268 14 Dtool_sTqO5ezm 0 7 244 1390 0 14 Dtool_sTqO5ezm 0 1 4 this 3 1379  
269 14 Dtool_sTqODPpW 0 6 245 1321 0 14 Dtool_sTqODPpW 0 1 4 this 3 1378  
270 14 Dtool_sTqOQBGE 0 6 246 1321 0 14 Dtool_sTqOQBGE 0 3 4 this 3 1378  3 arg 1 1371  13 near_callback 1 1371  
271 14 Dtool_sTqOsLOz 0 6 247 1391 0 14 Dtool_sTqOsLOz 0 1 10 data_index 1 1321  
272 14 Dtool_sTqOOCVJ 0 6 248 1321 0 14 Dtool_sTqOOCVJ 0 3 4 this 3 1378  10 data_index 1 1321  5 first 1 1321  
273 14 Dtool_sTqOzP2o 0 6 248 1321 0 14 Dtool_sTqOzP2o 0 2 4 this 3 1378  10 data_index 1 1321  
274 14 Dtool_sTqO2IlA 0 6 249 1321 0 14 Dtool_sTqO2IlA 0 3 4 this 3 1378  4 geom 1 1387  10 collide_id 1 1321  
275 14 Dtool_sTqObtO9 0 6 249 1321 0 14 Dtool_sTqObtO9 0 3 4 this 3 1378  10 collide_id 1 1321  2 id 1 1392  
276 14 Dtool_sTqOrMQD 0 4 250 1314 0 14 Dtool_sTqOrMQD 0 3 4 this 3 1378  4 geom 1 1387  12 surface_type 1 1321  
277 14 Dtool_sTqO5jZN 0 4 250 1314 0 14 Dtool_sTqO5jZN 0 3 4 this 3 1378  12 surface_type 1 1321  2 id 1 1392  
278 14 Dtool_sTqOPNdr 0 6 251 1321 0 14 Dtool_sTqOPNdr 0 2 4 this 3 1378  4 geom 1 1387  
279 14 Dtool_sTqOT7zx 0 6 251 1321 0 14 Dtool_sTqOT7zx 0 2 4 this 3 1378  2 o1 1 1392  
280 14 Dtool_sTqOKVCg 0 6 252 1321 0 14 Dtool_sTqOKVCg 0 2 4 this 3 1378  4 geom 1 1387  
281 14 Dtool_sTqOU4S2 0 6 252 1321 0 14 Dtool_sTqOU4S2 0 2 4 this 3 1378  2 o1 1 1392  
282 14 Dtool_sTqOGhKS 0 4 253 1314 0 14 Dtool_sTqOGhKS 0 2 4 this 3 1378  10 event_name 1 1393  
283 14 Dtool_sTqOVyQ_ 0 6 254 1393 0 14 Dtool_sTqOVyQ_ 0 1 4 this 3 1378  
284 14 Dtool_sTqOst_0 0 7 255 1326 0 14 Dtool_sTqOst_0 0 0 
285 14 Dtool_sTqOqaYZ 0 6 241 1315 0 14 Dtool_sTqOqaYZ 0 1 4 this 3 1379  
286 14 Dtool_sTqODmh0 0 4 258 1314 0 14 Dtool_sTqODmh0 0 1 4 this 3 1387  
287 14 Dtool_sTqOUuxb 0 6 259 1315 0 14 Dtool_sTqOUuxb 936 // Filename: odeGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeGeom
//               does not point to a valid geom. It is an error to
//               call a method on an empty geom.
//               Note that an empty OdeGeom also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
288 14 Dtool_sTqOWW3u 0 6 260 1392 0 14 Dtool_sTqOWW3u 246 ////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::get_id
//       Access: Published
//  Description: Returns the underlying dGeomID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
289 14 Dtool_sTqOtSQY 0 4 261 1314 0 14 Dtool_sTqOtSQY 35 //INLINE void set_data(void* data); 2 4 this 3 1387  4 body 1 1324  
290 14 Dtool_sTqOXAml 0 6 262 1315 0 14 Dtool_sTqOXAml 35 //INLINE void set_data(void* data); 1 4 this 3 1381  
291 14 Dtool_sTqOf0Vw 0 7 263 1324 0 14 Dtool_sTqOf0Vw 0 1 4 this 3 1381  
292 14 Dtool_sTqOO_iH 0 4 264 1314 0 14 Dtool_sTqOO_iH 0 2 4 this 3 1387  3 pos 1 1317  
293 14 Dtool_sTqOwOXA 0 4 264 1314 0 14 Dtool_sTqOwOXA 0 4 4 this 3 1387  1 x 1 1320  1 y 1 1320  1 z 1 1320  
294 14 Dtool_sTqOPIg2 0 4 265 1314 0 14 Dtool_sTqOPIg2 0 2 4 this 3 1387  1 r 1 1364  
295 14 Dtool_sTqOBfK6 0 4 266 1314 0 14 Dtool_sTqOBfK6 0 2 4 this 3 1387  1 q 1 1373  
296 14 Dtool_sTqORB_w 0 7 267 1368 0 14 Dtool_sTqORB_w 0 1 4 this 3 1381  
297 14 Dtool_sTqOLTER 0 7 268 1369 0 14 Dtool_sTqOLTER 0 1 4 this 3 1381  
298 14 Dtool_sTqOR9Z3 0 7 269 1394 0 14 Dtool_sTqOR9Z3 0 1 4 this 3 1381  
299 14 Dtool_sTqO6C_Y 0 4 270 1314 0 14 Dtool_sTqO6C_Y 0 3 4 this 3 1381  3 min 1 1322  3 max 1 1322  
300 14 Dtool_sTqO8M0Q 0 6 271 1321 0 14 Dtool_sTqO8M0Q 0 1 4 this 3 1387  
301 14 Dtool_sTqOhmKT 0 6 272 1321 0 14 Dtool_sTqOhmKT 0 1 4 this 3 1381  
302 14 Dtool_sTqO5wRx 0 4 273 1314 0 14 Dtool_sTqO5wRx 0 2 4 this 3 1387  4 bits 1 1383  
303 14 Dtool_sTqOH4Fr 0 4 274 1314 0 14 Dtool_sTqOH4Fr 0 2 4 this 3 1387  4 bits 1 1383  
304 14 Dtool_sTqOuOix 0 7 275 1386 0 14 Dtool_sTqOuOix 0 1 4 this 3 1387  
305 14 Dtool_sTqOcjIK 0 7 276 1386 0 14 Dtool_sTqOcjIK 0 1 4 this 3 1387  
306 14 Dtool_sTqOyJzB 0 4 277 1314 0 14 Dtool_sTqOyJzB 0 1 4 this 3 1387  
307 14 Dtool_sTqOGzrd 0 4 278 1314 0 14 Dtool_sTqOGzrd 0 1 4 this 3 1387  
308 14 Dtool_sTqOnMkJ 0 6 279 1321 0 14 Dtool_sTqOnMkJ 0 1 4 this 3 1387  
309 14 Dtool_sTqO8kBe 0 4 280 1314 0 14 Dtool_sTqO8kBe 0 2 4 this 3 1387  3 pos 1 1317  
310 14 Dtool_sTqOBod1 0 4 280 1314 0 14 Dtool_sTqOBod1 0 4 4 this 3 1387  1 x 1 1320  1 y 1 1320  1 z 1 1320  
311 14 Dtool_sTqOjjCF 0 4 281 1314 0 14 Dtool_sTqOjjCF 0 2 4 this 3 1387  1 r 1 1364  
312 14 Dtool_sTqODj5O 0 4 282 1314 0 14 Dtool_sTqODj5O 0 2 4 this 3 1387  1 q 1 1373  
313 14 Dtool_sTqO1fEA 0 4 283 1314 0 14 Dtool_sTqO1fEA 0 2 4 this 3 1387  3 pos 1 1317  
314 14 Dtool_sTqOe7Bf 0 4 283 1314 0 14 Dtool_sTqOe7Bf 0 4 4 this 3 1387  1 x 1 1320  1 y 1 1320  1 z 1 1320  
315 14 Dtool_sTqOns9A 0 4 284 1314 0 14 Dtool_sTqOns9A 0 2 4 this 3 1387  1 r 1 1364  
316 14 Dtool_sTqO_h_7 0 4 285 1314 0 14 Dtool_sTqO_h_7 0 2 4 this 3 1387  1 q 1 1373  
317 14 Dtool_sTqOJiDv 0 4 286 1314 0 14 Dtool_sTqOJiDv 0 1 4 this 3 1387  
318 14 Dtool_sTqOhq2h 0 6 287 1321 0 14 Dtool_sTqOhq2h 0 1 4 this 3 1387  
319 14 Dtool_sTqOADQ7 0 7 288 1368 0 14 Dtool_sTqOADQ7 0 1 4 this 3 1381  
320 14 Dtool_sTqOEoTE 0 7 289 1369 0 14 Dtool_sTqOEoTE 0 1 4 this 3 1381  
321 14 Dtool_sTqOn5PY 0 7 290 1394 0 14 Dtool_sTqOn5PY 0 1 4 this 3 1381  
322 14 Dtool_sTqOp_Ay 0 7 291 1378 0 14 Dtool_sTqOp_Ay 0 1 4 this 3 1381  
323 14 Dtool_sTqOiWOz 0 4 292 1314 0 14 Dtool_sTqOiWOz 0 3 4 this 3 1381  3 out 1 1343  6 indent 1 1345  
324 14 Dtool_sTqOdY3L 0 4 292 1314 0 14 Dtool_sTqOdY3L 0 2 4 this 3 1381  3 out 1 1343  
325 14 Dtool_sTqOPXeS 0 4 292 1314 0 14 Dtool_sTqOPXeS 0 1 4 this 3 1381  
326 14 Dtool_sTqO2Ef3 0 6 294 1321 0 14 Dtool_sTqO2Ef3 0 2 4 this 3 1381  5 other 1 1381  
327 14 Dtool_sTqOVNxU 0 7 295 1395 0 14 Dtool_sTqOVNxU 0 1 4 this 3 1381  
328 14 Dtool_sTqOfK7w 0 7 296 1396 0 14 Dtool_sTqOfK7w 0 1 4 this 3 1381  
329 14 Dtool_sTqOahYj 0 7 297 1397 0 14 Dtool_sTqOahYj 43 // OdeConvexGeom convert_to_convex() const; 1 4 this 3 1381  
330 14 Dtool_sTqOeq3c 0 7 298 1398 0 14 Dtool_sTqOeq3c 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1381  
331 14 Dtool_sTqOqZZJ 0 7 299 1399 0 14 Dtool_sTqOqZZJ 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1381  
332 14 Dtool_sTqOyqpD 0 7 300 1400 0 14 Dtool_sTqOyqpD 0 1 4 this 3 1381  
333 14 Dtool_sTqOXaIY 0 7 301 1401 0 14 Dtool_sTqOXaIY 0 1 4 this 3 1381  
334 14 Dtool_sTqOX_CC 0 7 302 1388 0 14 Dtool_sTqOX_CC 0 1 4 this 3 1381  
335 14 Dtool_sTqO2TwK 0 7 303 1389 0 14 Dtool_sTqO2TwK 0 1 4 this 3 1381  
336 14 Dtool_sTqOsd3z 0 7 304 1390 0 14 Dtool_sTqOsd3z 0 1 4 this 3 1381  
337 14 Dtool_sTqOhAY_ 0 7 305 1326 0 14 Dtool_sTqOhAY_ 0 0 
338 14 Dtool_sTqOYyd_ 0 6 293 1315 0 14 Dtool_sTqOYyd_ 0 1 4 this 3 1381  
339 14 Dtool_sTqO5Mqw 0 7 307 1395 0 14 Dtool_sTqO5Mqw 0 2 5 space 1 1378  4 size 1 1317  
340 14 Dtool_sTqOG0nP 0 7 307 1395 0 14 Dtool_sTqOG0nP 0 4 5 space 1 1378  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
341 14 Dtool_sTqOUAjx 0 7 307 1395 0 14 Dtool_sTqOUAjx 0 3 2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
342 14 Dtool_sTqOrilP 0 4 308 1314 0 14 Dtool_sTqOrilP 0 2 4 this 3 1395  4 size 1 1317  
343 14 Dtool_sTqOTeQ7 0 4 308 1314 0 14 Dtool_sTqOTeQ7 488 // Filename: odeBoxGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1395  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
344 14 Dtool_sTqOiU9Y 0 7 309 1322 0 14 Dtool_sTqOiU9Y 0 1 4 this 3 1395  
345 14 Dtool_sTqOmkzM 0 6 310 1320 0 14 Dtool_sTqOmkzM 0 2 4 this 3 1395  1 p 1 1402  
346 14 Dtool_sTqOmr58 0 6 310 1320 0 14 Dtool_sTqOmr58 0 4 4 this 3 1395  1 x 1 1320  1 y 1 1320  1 z 1 1320  
347 14 Dtool_sTqO4h7F 0 7 311 1326 0 14 Dtool_sTqO4h7F 0 0 
348 14 Dtool_sTqOfjkn 0 7 313 1396 0 14 Dtool_sTqOfjkn 0 3 5 space 1 1378  6 radius 1 1320  6 length 1 1320  
349 14 Dtool_sTqOVPcL 0 7 313 1396 0 14 Dtool_sTqOVPcL 0 2 6 radius 1 1320  6 length 1 1320  
350 14 Dtool_sTqOSpf3 0 4 314 1314 0 14 Dtool_sTqOSpf3 499 // Filename: odeCappedCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1396  6 radius 1 1320  6 length 1 1320  
351 14 Dtool_sTqOBhyZ 0 6 316 1320 0 14 Dtool_sTqOBhyZ 0 1 4 this 3 1404  
352 14 Dtool_sTqOFELI 0 6 317 1320 0 14 Dtool_sTqOFELI 0 1 4 this 3 1404  
353 14 Dtool_sTqOaaTf 0 6 318 1320 0 14 Dtool_sTqOaaTf 0 2 4 this 3 1404  1 p 1 1402  
354 14 Dtool_sTqOwl8R 0 6 318 1320 0 14 Dtool_sTqOwl8R 0 4 4 this 3 1404  1 x 1 1320  1 y 1 1320  1 z 1 1320  
355 14 Dtool_sTqObowg 0 7 319 1326 0 14 Dtool_sTqObowg 0 0 
356 14 Dtool_sTqOrDgj 0 7 321 1406 0 14 Dtool_sTqOrDgj 0 0 
357 14 Dtool_sTqOxR7P 0 7 321 1406 0 14 Dtool_sTqOxR7P 0 1 4 copy 1 1407  
358 14 Dtool_sTqO_ppo 0 7 322 1322 0 14 Dtool_sTqO_ppo 492 // Filename: odeContactGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1407  
359 14 Dtool_sTqOchdK 0 7 323 1322 0 14 Dtool_sTqOchdK 0 1 4 this 3 1407  
360 14 Dtool_sTqOv0Qh 0 6 324 1320 0 14 Dtool_sTqOv0Qh 0 1 4 this 3 1407  
361 14 Dtool_sTqOBzZu 0 7 325 1387 0 14 Dtool_sTqOBzZu 0 1 4 this 3 1407  
362 14 Dtool_sTqOBrK4 0 7 326 1387 0 14 Dtool_sTqOBrK4 0 1 4 this 3 1407  
363 14 Dtool_sTqOa9mU 0 6 327 1321 0 14 Dtool_sTqOa9mU 0 1 4 this 3 1407  
364 14 Dtool_sTqOTvnU 0 6 328 1321 0 14 Dtool_sTqOTvnU 0 1 4 this 3 1407  
365 14 Dtool_sTqOCqlE 0 4 329 1314 0 14 Dtool_sTqOCqlE 0 2 4 this 3 1406  3 pos 1 1317  
366 14 Dtool_sTqOUgHy 0 4 330 1314 0 14 Dtool_sTqOUgHy 0 2 4 this 3 1406  6 normal 1 1317  
367 14 Dtool_sTqOEoiS 0 4 331 1314 0 14 Dtool_sTqOEoiS 0 2 4 this 3 1406  5 depth 1 1320  
368 14 Dtool_sTqOadT8 0 4 332 1314 0 14 Dtool_sTqOadT8 0 2 4 this 3 1406  4 geom 1 1381  
369 14 Dtool_sTqOdlDG 0 4 333 1314 0 14 Dtool_sTqOdlDG 0 2 4 this 3 1406  4 geom 1 1381  
370 14 Dtool_sTqOVmGi 0 7 334 1326 0 14 Dtool_sTqOVmGi 0 0 
371 14 Dtool_sTqO_HD5 0 7 336 1387 0 14 Dtool_sTqO_HD5 268 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom1
//       Access: Published
//  Description: Returns the first geom in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
372 14 Dtool_sTqOxH7p 0 7 337 1387 0 14 Dtool_sTqOxH7p 269 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom2
//       Access: Published
//  Description: Returns the second geom in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
373 14 Dtool_sTqOju3W 0 7 338 1324 0 14 Dtool_sTqOju3W 268 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body1
//       Access: Published
//  Description: Returns the first body in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
374 14 Dtool_sTqOpuvH 0 7 339 1324 0 14 Dtool_sTqOpuvH 269 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body2
//       Access: Published
//  Description: Returns the second body in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
375 14 Dtool_sTqOf6L7 0 6 340 1345 0 14 Dtool_sTqOf6L7 283 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_num_contacts
//       Access: Published
//  Description: Returns the number of contacts in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
376 14 Dtool_sTqODdLz 0 7 341 1368 0 14 Dtool_sTqODdLz 378 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_point
//       Access: Published
//  Description: Returns the nth contact point in the collision.
//               This does exactly the same as
//               get_contact_geom(n).get_pos().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  1 n 1 1345  
377 14 Dtool_sTqOoD8_ 0 7 342 1406 0 14 Dtool_sTqOoD8_ 281 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_geom
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  1 n 1 1345  
378 14 Dtool_sTqOHg3X 0 7 343 1406 0 14 Dtool_sTqOHg3X 276 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator []
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  1 n 1 1345  
379 14 Dtool_sTqO5L6p 0 6 345 1315 0 14 Dtool_sTqO5L6p 271 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::is_empty
//       Access: Published
//  Description: Returns true if the entry holds no contacts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
380 14 Dtool_sTqOLNW0 0 7 346 1326 0 14 Dtool_sTqOLNW0 0 0 
381 14 Dtool_sTqOtk24 0 6 344 1315 0 14 Dtool_sTqOtk24 313 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator bool
//       Access: Published
//  Description: An OdeCollisionEntry evaluates to False if it
//               holds no contacts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
382 14 Dtool_sTqOWmWA 0 7 349 1411 0 14 Dtool_sTqOWmWA 0 2 4 mode 1 1321  2 mu 1 1320  
383 14 Dtool_sTqOP6Dl 0 7 349 1411 0 14 Dtool_sTqOP6Dl 0 1 4 mode 1 1321  
384 14 Dtool_sTqO1ZXM 0 7 349 1411 0 14 Dtool_sTqO1ZXM 0 0 
385 14 Dtool_sTqOVM_j 0 4 350 1314 0 14 Dtool_sTqOVM_j 498 // Filename: odeSurfaceParameters.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1411  4 mode 1 1321  
386 14 Dtool_sTqOCbx_ 0 4 351 1314 0 14 Dtool_sTqOCbx_ 0 2 4 this 3 1411  2 mu 1 1320  
387 14 Dtool_sTqOfGNz 0 4 352 1314 0 14 Dtool_sTqOfGNz 0 2 4 this 3 1411  3 mu2 1 1320  
388 14 Dtool_sTqOC0q9 0 4 353 1314 0 14 Dtool_sTqOC0q9 0 2 4 this 3 1411  6 bounce 1 1320  
389 14 Dtool_sTqOA0BE 0 4 354 1314 0 14 Dtool_sTqOA0BE 0 2 4 this 3 1411  10 bounce_vel 1 1320  
390 14 Dtool_sTqOgkJb 0 4 355 1314 0 14 Dtool_sTqOgkJb 0 2 4 this 3 1411  8 soft_erp 1 1320  
391 14 Dtool_sTqOQ5AQ 0 4 356 1314 0 14 Dtool_sTqOQ5AQ 0 2 4 this 3 1411  8 soft_cfm 1 1320  
392 14 Dtool_sTqOwv5X 0 4 357 1314 0 14 Dtool_sTqOwv5X 0 2 4 this 3 1411  6 motion 1 1320  
393 14 Dtool_sTqOlvp5 0 4 358 1314 0 14 Dtool_sTqOlvp5 0 2 4 this 3 1411  6 motion 1 1320  
394 14 Dtool_sTqOnGqL 0 4 359 1314 0 14 Dtool_sTqOnGqL 0 2 4 this 3 1411  4 slip 1 1320  
395 14 Dtool_sTqOnf4M 0 4 360 1314 0 14 Dtool_sTqOnf4M 0 2 4 this 3 1411  4 slip 1 1320  
396 14 Dtool_sTqOZ_H5 0 6 361 1321 0 14 Dtool_sTqOZ_H5 0 1 4 this 3 1412  
397 14 Dtool_sTqOTxDQ 0 6 362 1320 0 14 Dtool_sTqOTxDQ 0 1 4 this 3 1412  
398 14 Dtool_sTqOfhO_ 0 6 363 1320 0 14 Dtool_sTqOfhO_ 0 1 4 this 3 1412  
399 14 Dtool_sTqOgOw_ 0 6 364 1320 0 14 Dtool_sTqOgOw_ 0 1 4 this 3 1412  
400 14 Dtool_sTqONSOp 0 6 365 1320 0 14 Dtool_sTqONSOp 0 1 4 this 3 1412  
401 14 Dtool_sTqOf6eY 0 6 366 1320 0 14 Dtool_sTqOf6eY 0 1 4 this 3 1412  
402 14 Dtool_sTqOajVN 0 6 367 1320 0 14 Dtool_sTqOajVN 0 1 4 this 3 1412  
403 14 Dtool_sTqO2Vtd 0 6 368 1320 0 14 Dtool_sTqO2Vtd 0 1 4 this 3 1412  
404 14 Dtool_sTqObKd_ 0 6 369 1320 0 14 Dtool_sTqObKd_ 0 1 4 this 3 1412  
405 14 Dtool_sTqONEpL 0 6 370 1320 0 14 Dtool_sTqONEpL 0 1 4 this 3 1412  
406 14 Dtool_sTqONL3M 0 6 371 1320 0 14 Dtool_sTqONL3M 0 1 4 this 3 1412  
407 14 Dtool_sTqOyAtM 0 7 372 1326 0 14 Dtool_sTqOyAtM 0 0 
408 14 Dtool_sTqOoVpX 0 7 374 1414 0 14 Dtool_sTqOoVpX 0 0 
409 14 Dtool_sTqO5d7O 0 7 374 1414 0 14 Dtool_sTqO5d7O 38 // OdeContact(const OdeContact &copy); 1 7 contact 1 1415  
410 14 Dtool_sTqOTEDY 0 7 375 1411 0 14 Dtool_sTqOTEDY 488 // Filename: odeContact.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1418  
411 14 Dtool_sTqOTva8 0 7 376 1406 0 14 Dtool_sTqOTva8 0 1 4 this 3 1414  
412 14 Dtool_sTqO86si 0 7 377 1322 0 14 Dtool_sTqO86si 0 1 4 this 3 1418  
413 14 Dtool_sTqOwAkR 0 4 378 1314 0 14 Dtool_sTqOwAkR 0 2 4 this 3 1414  18 surface_parameters 1 1412  
414 14 Dtool_sTqOxE1A 0 4 379 1314 0 14 Dtool_sTqOxE1A 0 2 4 this 3 1414  12 contact_geom 1 1407  
415 14 Dtool_sTqOO8iC 0 4 380 1314 0 14 Dtool_sTqOO8iC 0 2 4 this 3 1414  5 fdir1 1 1317  
416 14 Dtool_sTqOvRIE 0 7 381 1326 0 14 Dtool_sTqOvRIE 0 0 
417 14 Dtool_sTqOwqXn 0 7 383 1349 0 14 Dtool_sTqOwqXn 0 2 5 world 1 1311  7 contact 1 1418  
418 14 Dtool_sTqO7HAE 0 7 383 1349 0 14 Dtool_sTqO7HAE 0 3 5 world 1 1311  11 joint_group 1 1327  7 contact 1 1418  
419 14 Dtool_sTqOlL36 0 7 384 1326 0 14 Dtool_sTqOlL36 0 0 
420 14 Dtool_sTqOoKYd 0 7 386 1397 0 14 Dtool_sTqOoKYd 0 3 5 space 1 1378  6 radius 1 1320  6 length 1 1320  
421 14 Dtool_sTqOpiV_ 0 7 386 1397 0 14 Dtool_sTqOpiV_ 0 2 6 radius 1 1320  6 length 1 1320  
422 14 Dtool_sTqOr5k1 0 4 387 1314 0 14 Dtool_sTqOr5k1 493 // Filename: odeCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1397  6 radius 1 1320  6 length 1 1320  
423 14 Dtool_sTqOlFIl 0 6 389 1320 0 14 Dtool_sTqOlFIl 0 1 4 this 3 1420  
424 14 Dtool_sTqONs2A 0 6 390 1320 0 14 Dtool_sTqONs2A 0 1 4 this 3 1420  
425 14 Dtool_sTqOuZP3 0 7 391 1326 0 14 Dtool_sTqOuZP3 0 0 
426 14 Dtool_sTqOl0Dv 0 7 393 1352 0 14 Dtool_sTqOl0Dv 0 1 5 world 1 1311  
427 14 Dtool_sTqON2YW 0 7 393 1352 0 14 Dtool_sTqON2YW 0 2 5 world 1 1311  11 joint_group 1 1327  
428 14 Dtool_sTqO__C8 0 4 394 1314 0 14 Dtool_sTqO__C8 491 // Filename: odeFixedJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1352  
429 14 Dtool_sTqOCbRZ 0 7 395 1326 0 14 Dtool_sTqOCbRZ 0 0 
430 14 Dtool_sTqOYwng 0 7 397 1389 0 14 Dtool_sTqOYwng 0 0 
431 14 Dtool_sTqOK4tA 0 7 397 1389 0 14 Dtool_sTqOK4tA 0 1 5 space 1 1378  
432 14 Dtool_sTqOu9tU 0 4 398 1314 0 14 Dtool_sTqOu9tU 490 // Filename: odeHashSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1389  8 minlevel 1 1321  8 maxlevel 1 1321  
433 14 Dtool_sTqOeDbq 0 6 399 1321 0 14 Dtool_sTqOeDbq 0 1 4 this 3 1422  
434 14 Dtool_sTqOCkZt 0 6 400 1321 0 14 Dtool_sTqOCkZt 0 1 4 this 3 1422  
435 14 Dtool_sTqOgfSF 0 7 401 1326 0 14 Dtool_sTqOgfSF 0 0 
436 14 Dtool_sTqOXyov 0 7 403 1351 0 14 Dtool_sTqOXyov 0 1 5 world 1 1311  
437 14 Dtool_sTqO2EB5 0 7 403 1351 0 14 Dtool_sTqO2EB5 0 2 5 world 1 1311  11 joint_group 1 1327  
438 14 Dtool_sTqOIy1d 0 4 404 1314 0 14 Dtool_sTqOIy1d 0 2 4 this 3 1351  6 anchor 1 1317  
439 14 Dtool_sTqOmzgP 0 4 404 1314 0 14 Dtool_sTqOmzgP 0 4 4 this 3 1351  1 x 1 1320  1 y 1 1320  1 z 1 1320  
440 14 Dtool_sTqOgjz3 0 4 405 1314 0 14 Dtool_sTqOgjz3 0 2 4 this 3 1351  4 axis 1 1317  
441 14 Dtool_sTqOG9Sv 0 4 405 1314 0 14 Dtool_sTqOG9Sv 0 4 4 this 3 1351  1 x 1 1320  1 y 1 1320  1 z 1 1320  
442 14 Dtool_sTqOvt03 0 4 406 1314 0 14 Dtool_sTqOvt03 0 2 4 this 3 1351  4 axis 1 1317  
443 14 Dtool_sTqOBPUv 0 4 406 1314 0 14 Dtool_sTqOBPUv 0 4 4 this 3 1351  1 x 1 1320  1 y 1 1320  1 z 1 1320  
444 14 Dtool_sTqOvJ_0 0 4 407 1314 0 14 Dtool_sTqOvJ_0 0 3 4 this 3 1351  7 torque1 1 1320  7 torque2 1 1320  
445 14 Dtool_sTqOPXM2 0 7 408 1322 0 14 Dtool_sTqOPXM2 0 1 4 this 3 1424  
446 14 Dtool_sTqOlbiC 0 7 409 1322 0 14 Dtool_sTqOlbiC 0 1 4 this 3 1424  
447 14 Dtool_sTqOxF1J 0 7 410 1322 0 14 Dtool_sTqOxF1J 0 1 4 this 3 1424  
448 14 Dtool_sTqO_32J 0 7 411 1322 0 14 Dtool_sTqO_32J 0 1 4 this 3 1424  
449 14 Dtool_sTqOR8Fo 0 6 412 1320 0 14 Dtool_sTqOR8Fo 0 1 4 this 3 1424  
450 14 Dtool_sTqOlujE 0 6 413 1320 0 14 Dtool_sTqOlujE 0 1 4 this 3 1424  
451 14 Dtool_sTqOFxIF 0 6 414 1320 0 14 Dtool_sTqOFxIF 0 1 4 this 3 1424  
452 14 Dtool_sTqOno7T 0 4 415 1314 0 14 Dtool_sTqOno7T 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
453 14 Dtool_sTqOjvkg 0 4 416 1314 0 14 Dtool_sTqOjvkg 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
454 14 Dtool_sTqOnuGl 0 4 417 1314 0 14 Dtool_sTqOnuGl 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
455 14 Dtool_sTqOFJC5 0 4 418 1314 0 14 Dtool_sTqOFJC5 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
456 14 Dtool_sTqO7NIm 0 4 419 1314 0 14 Dtool_sTqO7NIm 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
457 14 Dtool_sTqO7ZGB 0 4 420 1314 0 14 Dtool_sTqO7ZGB 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
458 14 Dtool_sTqOz6Cy 0 4 421 1314 0 14 Dtool_sTqOz6Cy 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
459 14 Dtool_sTqOuzKd 0 4 422 1314 0 14 Dtool_sTqOuzKd 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
460 14 Dtool_sTqOJEDS 0 4 423 1314 0 14 Dtool_sTqOJEDS 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
461 14 Dtool_sTqOieeQ 0 4 424 1314 0 14 Dtool_sTqOieeQ 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
462 14 Dtool_sTqOVe9I 0 4 425 1314 0 14 Dtool_sTqOVe9I 0 3 4 this 3 1351  4 axis 1 1321  3 val 1 1320  
463 14 Dtool_sTqOauSy 0 6 426 1320 0 14 Dtool_sTqOauSy 0 2 4 this 3 1424  4 axis 1 1321  
464 14 Dtool_sTqOGh9_ 0 6 427 1320 0 14 Dtool_sTqOGh9_ 0 2 4 this 3 1424  4 axis 1 1321  
465 14 Dtool_sTqOSz85 0 6 428 1320 0 14 Dtool_sTqOSz85 0 2 4 this 3 1424  4 axis 1 1321  
466 14 Dtool_sTqOjCW1 0 6 429 1320 0 14 Dtool_sTqOjCW1 0 2 4 this 3 1424  4 axis 1 1321  
467 14 Dtool_sTqOmEed 0 6 430 1320 0 14 Dtool_sTqOmEed 0 2 4 this 3 1424  4 axis 1 1321  
468 14 Dtool_sTqOSbSj 0 6 431 1320 0 14 Dtool_sTqOSbSj 0 2 4 this 3 1424  4 axis 1 1321  
469 14 Dtool_sTqOlv4G 0 6 432 1320 0 14 Dtool_sTqOlv4G 0 2 4 this 3 1424  4 axis 1 1321  
470 14 Dtool_sTqODCdB 0 6 433 1320 0 14 Dtool_sTqODCdB 0 2 4 this 3 1424  4 axis 1 1321  
471 14 Dtool_sTqOyLU2 0 6 434 1320 0 14 Dtool_sTqOyLU2 0 2 4 this 3 1424  4 axis 1 1321  
472 14 Dtool_sTqO6YwM 0 6 435 1320 0 14 Dtool_sTqO6YwM 0 2 4 this 3 1424  4 axis 1 1321  
473 14 Dtool_sTqOncPF 0 6 436 1320 0 14 Dtool_sTqOncPF 0 2 4 this 3 1424  4 axis 1 1321  
474 14 Dtool_sTqOT6Ks 0 7 437 1326 0 14 Dtool_sTqOT6Ks 0 0 
475 14 Dtool_sTqOfM0Q 0 7 439 1347 0 14 Dtool_sTqOfM0Q 0 1 5 world 1 1311  
476 14 Dtool_sTqOkrK4 0 7 439 1347 0 14 Dtool_sTqOkrK4 0 2 5 world 1 1311  11 joint_group 1 1327  
477 14 Dtool_sTqOQ9qv 0 4 440 1314 0 14 Dtool_sTqOQ9qv 0 2 4 this 3 1347  6 anchor 1 1317  
478 14 Dtool_sTqOa7Ln 0 4 440 1314 0 14 Dtool_sTqOa7Ln 491 // Filename: odeHingeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1347  1 x 1 1320  1 y 1 1320  1 z 1 1320  
479 14 Dtool_sTqOry6s 0 4 441 1314 0 14 Dtool_sTqOry6s 0 3 4 this 3 1347  6 anchor 1 1317  3 vec 1 1317  
480 14 Dtool_sTqOy9wf 0 4 441 1314 0 14 Dtool_sTqOy9wf 0 7 4 this 3 1347  1 x 1 1320  1 y 1 1320  1 z 1 1320  2 ax 1 1320  2 ay 1 1320  2 az 1 1320  
481 14 Dtool_sTqOlcqG 0 4 442 1314 0 14 Dtool_sTqOlcqG 0 2 4 this 3 1347  4 axis 1 1317  
482 14 Dtool_sTqOZIXy 0 4 442 1314 0 14 Dtool_sTqOZIXy 0 4 4 this 3 1347  1 x 1 1320  1 y 1 1320  1 z 1 1320  
483 14 Dtool_sTqOBsMf 0 4 443 1314 0 14 Dtool_sTqOBsMf 0 2 4 this 3 1347  6 torque 1 1320  
484 14 Dtool_sTqOBnc6 0 7 444 1322 0 14 Dtool_sTqOBnc6 0 1 4 this 3 1426  
485 14 Dtool_sTqOHU0M 0 7 445 1322 0 14 Dtool_sTqOHU0M 0 1 4 this 3 1426  
486 14 Dtool_sTqOa6ej 0 7 446 1322 0 14 Dtool_sTqOa6ej 0 1 4 this 3 1426  
487 14 Dtool_sTqOY2cD 0 6 447 1320 0 14 Dtool_sTqOY2cD 0 1 4 this 3 1426  
488 14 Dtool_sTqOrr56 0 6 448 1320 0 14 Dtool_sTqOrr56 0 1 4 this 3 1426  
489 14 Dtool_sTqOYOgY 0 4 449 1314 0 14 Dtool_sTqOYOgY 0 2 4 this 3 1347  3 val 1 1320  
490 14 Dtool_sTqOm95g 0 4 450 1314 0 14 Dtool_sTqOm95g 0 2 4 this 3 1347  3 val 1 1320  
491 14 Dtool_sTqOgsTY 0 4 451 1314 0 14 Dtool_sTqOgsTY 0 2 4 this 3 1347  3 val 1 1320  
492 14 Dtool_sTqONgqR 0 4 452 1314 0 14 Dtool_sTqONgqR 0 2 4 this 3 1347  3 val 1 1320  
493 14 Dtool_sTqO5RMy 0 4 453 1314 0 14 Dtool_sTqO5RMy 0 2 4 this 3 1347  3 val 1 1320  
494 14 Dtool_sTqOM1zg 0 4 454 1314 0 14 Dtool_sTqOM1zg 0 2 4 this 3 1347  3 val 1 1320  
495 14 Dtool_sTqOJntw 0 4 455 1314 0 14 Dtool_sTqOJntw 0 2 4 this 3 1347  3 val 1 1320  
496 14 Dtool_sTqOvwc4 0 4 456 1314 0 14 Dtool_sTqOvwc4 0 2 4 this 3 1347  3 val 1 1320  
497 14 Dtool_sTqOhHG8 0 4 457 1314 0 14 Dtool_sTqOhHG8 0 2 4 this 3 1347  3 val 1 1320  
498 14 Dtool_sTqOgPB_ 0 6 458 1320 0 14 Dtool_sTqOgPB_ 0 1 4 this 3 1426  
499 14 Dtool_sTqOhhaG 0 6 459 1320 0 14 Dtool_sTqOhhaG 0 1 4 this 3 1426  
500 14 Dtool_sTqO0IBM 0 6 460 1320 0 14 Dtool_sTqO0IBM 0 1 4 this 3 1426  
501 14 Dtool_sTqOFg_4 0 6 461 1320 0 14 Dtool_sTqOFg_4 0 1 4 this 3 1426  
502 14 Dtool_sTqO4TE_ 0 6 462 1320 0 14 Dtool_sTqO4TE_ 0 1 4 this 3 1426  
503 14 Dtool_sTqOZGNE 0 6 463 1320 0 14 Dtool_sTqOZGNE 0 1 4 this 3 1426  
504 14 Dtool_sTqOb_ak 0 6 464 1320 0 14 Dtool_sTqOb_ak 0 1 4 this 3 1426  
505 14 Dtool_sTqO7xqh 0 6 465 1320 0 14 Dtool_sTqO7xqh 0 1 4 this 3 1426  
506 14 Dtool_sTqO5kUl 0 6 466 1320 0 14 Dtool_sTqO5kUl 0 1 4 this 3 1426  
507 14 Dtool_sTqOimIk 0 7 467 1326 0 14 Dtool_sTqOimIk 0 0 
508 14 Dtool_sTqOgcW0 0 7 469 1428 1116 14 Dtool_sTqOgcW0 0 0 
509 14 Dtool_sTqO6fCE 0 7 469 1428 1116 14 Dtool_sTqO6fCE 0 1 4 copy 1 1429  
510 14 Dtool_sTqOvmwH 0 6 470 1428 0 14 Dtool_sTqOvmwH 0 2 4 this 3 1428  4 copy 1 1429  
511 14 Dtool_sTqOvxzZ 0 4 472 1314 0 14 Dtool_sTqOvxzZ 0 2 4 this 3 1428  5 joint 1 1337  
512 14 Dtool_sTqOOwzG 0 6 473 1315 0 14 Dtool_sTqOOwzG 0 2 4 this 3 1428  5 joint 1 1337  
513 14 Dtool_sTqO1juF 0 4 474 1314 0 14 Dtool_sTqO1juF 0 2 4 this 3 1428  5 other 1 1429  
514 14 Dtool_sTqOmEnm 0 4 475 1314 0 14 Dtool_sTqOmEnm 0 2 4 this 3 1428  5 other 1 1429  
515 14 Dtool_sTqOQUZh 0 4 476 1314 0 14 Dtool_sTqOQUZh 0 1 4 this 3 1428  
516 14 Dtool_sTqOipL4 0 6 477 1315 0 14 Dtool_sTqOipL4 0 2 4 this 3 1429  5 joint 1 1337  
517 14 Dtool_sTqOl1W8 0 4 478 1314 0 14 Dtool_sTqOl1W8 0 1 4 this 3 1428  
518 14 Dtool_sTqODtqf 0 6 479 1315 0 14 Dtool_sTqODtqf 0 1 4 this 3 1429  
519 14 Dtool_sTqOfBqm 0 6 480 1321 0 14 Dtool_sTqOfBqm 0 1 4 this 3 1429  
520 14 Dtool_sTqOMsVr 0 7 481 1336 0 14 Dtool_sTqOMsVr 0 2 4 this 3 1429  5 index 1 1321  
521 14 Dtool_sTqOHE_7 0 7 482 1336 0 14 Dtool_sTqOHE_7 0 2 4 this 3 1429  5 index 1 1321  
522 14 Dtool_sTqOBtOa 0 6 483 1321 0 14 Dtool_sTqOBtOa 333 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::size
//       Access: Published
//  Description: Returns the number of joints in the collection.  This
//               is the same thing as get_num_joints().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1429  
523 14 Dtool_sTqOvSRf 0 6 484 1428 0 14 Dtool_sTqOvSRf 279 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  5 other 1 1429  
524 14 Dtool_sTqO8PkF 0 7 485 1428 1116 14 Dtool_sTqO8PkF 324 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +
//       Access: Published
//  Description: Returns a OdeJointCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1429  5 other 1 1429  
525 14 Dtool_sTqO5DtV 0 7 487 1355 0 14 Dtool_sTqO5DtV 0 1 5 world 1 1311  
526 14 Dtool_sTqOYSGf 0 7 487 1355 0 14 Dtool_sTqOYSGf 0 2 5 world 1 1311  11 joint_group 1 1327  
527 14 Dtool_sTqOIhPc 0 4 488 1314 0 14 Dtool_sTqOIhPc 0 2 4 this 3 1355  3 num 1 1321  
528 14 Dtool_sTqO3IXR 0 4 489 1314 0 14 Dtool_sTqO3IXR 0 4 4 this 3 1355  4 anum 1 1321  3 rel 1 1321  4 axis 1 1317  
529 14 Dtool_sTqOeCSw 0 4 489 1314 0 14 Dtool_sTqOeCSw 0 6 4 this 3 1355  4 anum 1 1321  3 rel 1 1321  1 x 1 1320  1 y 1 1320  1 z 1 1320  
530 14 Dtool_sTqO1CQH 0 4 490 1314 0 14 Dtool_sTqO1CQH 0 3 4 this 3 1355  9 parameter 1 1321  5 value 1 1320  
531 14 Dtool_sTqOOpwW 0 6 491 1321 0 14 Dtool_sTqOOpwW 0 1 4 this 3 1431  
532 14 Dtool_sTqOfVAa 0 7 492 1322 0 14 Dtool_sTqOfVAa 0 2 4 this 3 1431  4 anum 1 1321  
533 14 Dtool_sTqOUAiD 0 6 493 1320 0 14 Dtool_sTqOUAiD 0 2 4 this 3 1431  9 parameter 1 1321  
534 14 Dtool_sTqOl3Gm 0 7 494 1326 0 14 Dtool_sTqOl3Gm 0 0 
535 14 Dtool_sTqO323R 0 7 496 1353 0 14 Dtool_sTqO323R 0 1 5 world 1 1311  
536 14 Dtool_sTqOc44o 0 7 496 1353 0 14 Dtool_sTqOc44o 0 2 5 world 1 1311  11 joint_group 1 1327  
537 14 Dtool_sTqOEhZD 0 7 497 1326 0 14 Dtool_sTqOEhZD 0 0 
538 14 Dtool_sTqO_I6P 0 7 499 1356 0 14 Dtool_sTqO_I6P 0 1 5 world 1 1311  
539 14 Dtool_sTqOP5XS 0 7 499 1356 0 14 Dtool_sTqOP5XS 0 2 5 world 1 1311  11 joint_group 1 1327  
540 14 Dtool_sTqOnFwY 0 4 500 1314 0 14 Dtool_sTqOnFwY 493 // Filename: odePlane2dJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1356  9 parameter 1 1321  5 value 1 1320  
541 14 Dtool_sTqOn9hi 0 4 501 1314 0 14 Dtool_sTqOn9hi 0 3 4 this 3 1356  9 parameter 1 1321  5 value 1 1320  
542 14 Dtool_sTqO4759 0 4 502 1314 0 14 Dtool_sTqO4759 0 3 4 this 3 1356  9 parameter 1 1321  5 value 1 1320  
543 14 Dtool_sTqO9i2A 0 7 503 1326 0 14 Dtool_sTqO9i2A 0 0 
544 14 Dtool_sTqOmjkN 0 7 505 1398 0 14 Dtool_sTqOmjkN 0 1 6 params 1 1433  
545 14 Dtool_sTqOYnwq 0 7 505 1398 0 14 Dtool_sTqOYnwq 0 2 5 space 1 1378  6 params 1 1433  
546 14 Dtool_sTqOs4w8 0 7 505 1398 0 14 Dtool_sTqOs4w8 0 5 5 space 1 1378  1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
547 14 Dtool_sTqOCRGY 0 7 505 1398 0 14 Dtool_sTqOCRGY 0 4 1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
548 14 Dtool_sTqO0DLj 0 4 506 1314 0 14 Dtool_sTqO0DLj 0 2 4 this 3 1398  6 params 1 1433  
549 14 Dtool_sTqO_vSr 0 4 506 1314 0 14 Dtool_sTqO_vSr 490 // Filename: odePlaneGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1398  1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
550 14 Dtool_sTqOfzg_ 0 7 507 1377 0 14 Dtool_sTqOfzg_ 0 1 4 this 3 1435  
551 14 Dtool_sTqOWeOH 0 6 508 1320 0 14 Dtool_sTqOWeOH 0 2 4 this 3 1435  1 p 1 1402  
552 14 Dtool_sTqOGPkc 0 6 508 1320 0 14 Dtool_sTqOGPkc 0 4 4 this 3 1435  1 x 1 1320  1 y 1 1320  1 z 1 1320  
553 14 Dtool_sTqOSlmS 0 7 509 1326 0 14 Dtool_sTqOSlmS 0 0 
554 14 Dtool_sTqOrKJx 0 7 511 1390 0 14 Dtool_sTqOrKJx 0 3 6 center 1 1402  7 extents 1 1317  5 depth 1 1321  
555 14 Dtool_sTqO5rmg 0 7 511 1390 0 14 Dtool_sTqO5rmg 0 4 5 space 1 1378  6 center 1 1402  7 extents 1 1317  5 depth 1 1321  
556 14 Dtool_sTqOQ4wa 0 7 512 1326 0 14 Dtool_sTqOQ4wa 0 0 
557 14 Dtool_sTqOqeCA 0 7 514 1399 0 14 Dtool_sTqOqeCA 0 2 5 space 1 1378  6 length 1 1320  
558 14 Dtool_sTqOIts7 0 7 514 1399 0 14 Dtool_sTqOIts7 0 1 6 length 1 1320  
559 14 Dtool_sTqOUVPw 0 4 515 1314 0 14 Dtool_sTqOUVPw 488 // Filename: odeRayGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1399  6 length 1 1320  
560 14 Dtool_sTqO_jaj 0 6 516 1320 0 14 Dtool_sTqO_jaj 0 1 4 this 3 1399  
561 14 Dtool_sTqOnrTu 0 4 517 1314 0 14 Dtool_sTqOnrTu 0 3 4 this 3 1399  5 start 1 1317  3 dir 1 1317  
562 14 Dtool_sTqOVXdl 0 4 517 1314 0 14 Dtool_sTqOVXdl 0 7 4 this 3 1399  2 px 1 1320  2 py 1 1320  2 pz 1 1320  2 dx 1 1320  2 dy 1 1320  2 dz 1 1320  
563 14 Dtool_sTqOPOpo 0 4 518 1314 0 14 Dtool_sTqOPOpo 0 3 4 this 3 1437  5 start 1 1322  3 dir 1 1322  
564 14 Dtool_sTqO557J 0 7 519 1322 0 14 Dtool_sTqO557J 0 1 4 this 3 1437  
565 14 Dtool_sTqO4Zrt 0 7 520 1322 0 14 Dtool_sTqO4Zrt 0 1 4 this 3 1437  
566 14 Dtool_sTqOoG1D 0 4 521 1314 0 14 Dtool_sTqOoG1D 0 3 4 this 3 1399  13 first_contact 1 1321  13 backface_cull 1 1321  
567 14 Dtool_sTqOJceH 0 6 523 1321 0 14 Dtool_sTqOJceH 0 1 4 this 3 1437  
568 14 Dtool_sTqOdAHA 0 6 524 1321 0 14 Dtool_sTqOdAHA 0 1 4 this 3 1437  
569 14 Dtool_sTqOmf4W 0 4 525 1314 0 14 Dtool_sTqOmf4W 0 2 4 this 3 1399  11 closest_hit 1 1321  
570 14 Dtool_sTqO86ea 0 6 526 1321 0 14 Dtool_sTqO86ea 0 1 4 this 3 1399  
571 14 Dtool_sTqObx9L 0 7 527 1326 0 14 Dtool_sTqObx9L 0 0 
572 14 Dtool_sTqOanNX 0 7 529 1388 0 14 Dtool_sTqOanNX 0 0 
573 14 Dtool_sTqO3oLp 0 7 529 1388 0 14 Dtool_sTqO3oLp 0 1 5 space 1 1378  
574 14 Dtool_sTqOGcQw 0 7 530 1326 0 14 Dtool_sTqOGcQw 0 0 
575 14 Dtool_sTqO4ugR 0 7 532 1348 0 14 Dtool_sTqO4ugR 0 1 5 world 1 1311  
576 14 Dtool_sTqOZI5a 0 7 532 1348 0 14 Dtool_sTqOZI5a 0 2 5 world 1 1311  11 joint_group 1 1327  
577 14 Dtool_sTqOfgOX 0 4 533 1314 0 14 Dtool_sTqOfgOX 0 2 4 this 3 1348  4 axis 1 1317  
578 14 Dtool_sTqOMn8O 0 4 533 1314 0 14 Dtool_sTqOMn8O 492 // Filename: odeSliderJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1348  1 x 1 1320  1 y 1 1320  1 z 1 1320  
579 14 Dtool_sTqOOVHP 0 4 534 1314 0 14 Dtool_sTqOOVHP 0 3 4 this 3 1348  4 axis 1 1317  3 vec 1 1317  
580 14 Dtool_sTqOLtnI 0 4 534 1314 0 14 Dtool_sTqOLtnI 0 7 4 this 3 1348  1 x 1 1320  1 y 1 1320  1 z 1 1320  2 ax 1 1320  2 ay 1 1320  2 az 1 1320  
581 14 Dtool_sTqOTFFs 0 4 535 1314 0 14 Dtool_sTqOTFFs 0 2 4 this 3 1348  5 force 1 1320  
582 14 Dtool_sTqOCxZh 0 6 536 1320 0 14 Dtool_sTqOCxZh 0 1 4 this 3 1439  
583 14 Dtool_sTqOST18 0 6 537 1320 0 14 Dtool_sTqOST18 0 1 4 this 3 1439  
584 14 Dtool_sTqONgCx 0 7 538 1322 0 14 Dtool_sTqONgCx 0 1 4 this 3 1439  
585 14 Dtool_sTqOmLeS 0 4 539 1314 0 14 Dtool_sTqOmLeS 0 2 4 this 3 1348  3 val 1 1320  
586 14 Dtool_sTqOqKJf 0 4 540 1314 0 14 Dtool_sTqOqKJf 0 2 4 this 3 1348  3 val 1 1320  
587 14 Dtool_sTqOAOYL 0 4 541 1314 0 14 Dtool_sTqOAOYL 0 2 4 this 3 1348  3 val 1 1320  
588 14 Dtool_sTqOaT52 0 4 542 1314 0 14 Dtool_sTqOaT52 0 2 4 this 3 1348  3 val 1 1320  
589 14 Dtool_sTqOMreJ 0 4 543 1314 0 14 Dtool_sTqOMreJ 0 2 4 this 3 1348  3 val 1 1320  
590 14 Dtool_sTqOlnBc 0 4 544 1314 0 14 Dtool_sTqOlnBc 0 2 4 this 3 1348  3 val 1 1320  
591 14 Dtool_sTqOIaUY 0 4 545 1314 0 14 Dtool_sTqOIaUY 0 2 4 this 3 1348  3 val 1 1320  
592 14 Dtool_sTqONU7P 0 4 546 1314 0 14 Dtool_sTqONU7P 0 2 4 this 3 1348  3 val 1 1320  
593 14 Dtool_sTqOLLyE 0 4 547 1314 0 14 Dtool_sTqOLLyE 0 2 4 this 3 1348  3 val 1 1320  
594 14 Dtool_sTqOKl_C 0 6 548 1320 0 14 Dtool_sTqOKl_C 0 1 4 this 3 1439  
595 14 Dtool_sTqO2lnP 0 6 549 1320 0 14 Dtool_sTqO2lnP 0 1 4 this 3 1439  
596 14 Dtool_sTqO8pEC 0 6 550 1320 0 14 Dtool_sTqO8pEC 0 1 4 this 3 1439  
597 14 Dtool_sTqOGPhh 0 6 551 1320 0 14 Dtool_sTqOGPhh 0 1 4 this 3 1439  
598 14 Dtool_sTqOUIDl 0 6 552 1320 0 14 Dtool_sTqOUIDl 0 1 4 this 3 1439  
599 14 Dtool_sTqO39yI 0 6 553 1320 0 14 Dtool_sTqO39yI 0 1 4 this 3 1439  
600 14 Dtool_sTqOMWAP 0 6 554 1320 0 14 Dtool_sTqOMWAP 0 1 4 this 3 1439  
601 14 Dtool_sTqOhP53 0 6 555 1320 0 14 Dtool_sTqOhP53 0 1 4 this 3 1439  
602 14 Dtool_sTqOY_xs 0 6 556 1320 0 14 Dtool_sTqOY_xs 0 1 4 this 3 1439  
603 14 Dtool_sTqOpG9F 0 7 557 1326 0 14 Dtool_sTqOpG9F 0 0 
604 14 Dtool_sTqOyzLV 0 7 559 1400 0 14 Dtool_sTqOyzLV 0 1 4 geom 1 1387  
605 14 Dtool_sTqOb_sr 0 7 559 1400 0 14 Dtool_sTqOb_sr 0 2 5 space 1 1378  6 radius 1 1320  
606 14 Dtool_sTqOV_0T 0 7 559 1400 0 14 Dtool_sTqOV_0T 0 1 6 radius 1 1320  
607 14 Dtool_sTqOXrVf 0 4 560 1314 0 14 Dtool_sTqOXrVf 491 // Filename: odeSphereGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  6 radius 1 1320  
608 14 Dtool_sTqObwFy 0 6 561 1320 0 14 Dtool_sTqObwFy 0 1 4 this 3 1441  
609 14 Dtool_sTqOUms_ 0 6 562 1320 0 14 Dtool_sTqOUms_ 0 2 4 this 3 1441  1 p 1 1402  
610 14 Dtool_sTqOmqCr 0 6 562 1320 0 14 Dtool_sTqOmqCr 0 4 4 this 3 1441  1 x 1 1320  1 y 1 1320  1 z 1 1320  
611 14 Dtool_sTqO__Wp 0 7 563 1326 0 14 Dtool_sTqO__Wp 0 0 
612 14 Dtool_sTqOWaU0 0 7 566 1446 0 14 Dtool_sTqOWaU0 137 ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////// 2 5 model 1 1443  11 use_normals 1 1315  
613 14 Dtool_sTqOqx4u 0 7 566 1446 0 14 Dtool_sTqOqx4u 137 ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////// 1 5 model 1 1443  
614 14 Dtool_sTqO9RYo 0 4 567 1314 0 14 Dtool_sTqO9RYo 0 1 4 this 3 1446  
615 14 Dtool_sTqO7eXr 0 4 568 1314 0 14 Dtool_sTqO7eXr 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 3 4 this 3 1447  3 out 1 1343  6 indent 1 1345  
616 14 Dtool_sTqOSGVZ 0 4 568 1314 0 14 Dtool_sTqOSGVZ 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 2 4 this 3 1447  3 out 1 1343  
617 14 Dtool_sTqOiAZv 0 4 568 1314 0 14 Dtool_sTqOiAZv 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 1 4 this 3 1447  
618 14 Dtool_sTqOfNl3 0 4 569 1314 0 14 Dtool_sTqOfNl3 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 2 4 this 3 1447  3 out 1 1343  
619 14 Dtool_sTqOqO9v 0 7 570 1326 0 14 Dtool_sTqOqO9v 0 0 
620 14 Dtool_sTqOwQ8d 0 7 572 1401 0 14 Dtool_sTqOwQ8d 0 2 5 space 1 1378  4 data 1 1446  
621 14 Dtool_sTqOOaZH 0 7 572 1401 0 14 Dtool_sTqOOaZH 162 /* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */ 1 4 data 1 1446  
622 14 Dtool_sTqOU_3U 0 7 572 1401 0 14 Dtool_sTqOU_3U 0 1 4 copy 1 1449  
623 14 Dtool_sTqOY90V 0 4 573 1314 0 14 Dtool_sTqOY90V 0 1 4 this 3 1401  
624 14 Dtool_sTqOOglb 0 4 574 1314 0 14 Dtool_sTqOOglb 0 2 4 this 3 1401  4 data 1 1446  
625 14 Dtool_sTqOVIJR 0 7 575 1446 0 14 Dtool_sTqOVIJR 0 1 4 this 3 1449  
626 14 Dtool_sTqO2HMT 0 4 576 1314 0 14 Dtool_sTqO2HMT 492 // Filename: odeTriMeshGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  4 data 1 1446  
627 14 Dtool_sTqOTQpZ 0 7 577 1446 0 14 Dtool_sTqOTQpZ 0 1 4 this 3 1449  
628 14 Dtool_sTqO1PsA 0 4 578 1314 0 14 Dtool_sTqO1PsA 0 3 4 this 3 1401  10 geom_class 1 1321  6 enable 1 1321  
629 14 Dtool_sTqO61Qi 0 6 579 1321 0 14 Dtool_sTqO61Qi 0 2 4 this 3 1449  10 geom_class 1 1321  
630 14 Dtool_sTqOy1OF 0 4 580 1314 0 14 Dtool_sTqOy1OF 0 2 4 this 3 1401  4 geom 1 1381  
631 14 Dtool_sTqOXfUH 0 4 581 1314 0 14 Dtool_sTqOXfUH 0 5 4 this 3 1449  10 face_index 1 1321  2 v0 1 1368  2 v1 1 1368  2 v2 1 1368  
632 14 Dtool_sTqOyBnD 0 7 582 1368 0 14 Dtool_sTqOyBnD 0 4 4 this 3 1449  10 face_index 1 1321  1 u 1 1320  1 v 1 1320  
633 14 Dtool_sTqOcqRE 0 6 583 1321 0 14 Dtool_sTqOcqRE 0 1 4 this 3 1449  
634 14 Dtool_sTqOhUZd 0 7 584 1326 0 14 Dtool_sTqOhUZd 0 0 
635 14 Dtool_sTqOFrPO 0 7 586 1350 0 14 Dtool_sTqOFrPO 0 1 5 world 1 1311  
636 14 Dtool_sTqOtIUq 0 7 586 1350 0 14 Dtool_sTqOtIUq 0 2 5 world 1 1311  11 joint_group 1 1327  
637 14 Dtool_sTqOxQ_F 0 4 587 1314 0 14 Dtool_sTqOxQ_F 0 2 4 this 3 1350  6 anchor 1 1317  
638 14 Dtool_sTqOoWc1 0 4 587 1314 0 14 Dtool_sTqOoWc1 495 // Filename: odeUniversalJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1350  1 x 1 1320  1 y 1 1320  1 z 1 1320  
639 14 Dtool_sTqOKFpG 0 4 588 1314 0 14 Dtool_sTqOKFpG 0 2 4 this 3 1350  4 axis 1 1317  
640 14 Dtool_sTqOXGHe 0 4 588 1314 0 14 Dtool_sTqOXGHe 0 4 4 this 3 1350  1 x 1 1320  1 y 1 1320  1 z 1 1320  
641 14 Dtool_sTqOTFh3 0 4 589 1314 0 14 Dtool_sTqOTFh3 0 2 4 this 3 1350  4 axis 1 1317  
642 14 Dtool_sTqOdG_O 0 4 589 1314 0 14 Dtool_sTqOdG_O 0 4 4 this 3 1350  1 x 1 1320  1 y 1 1320  1 z 1 1320  
643 14 Dtool_sTqOVgez 0 4 590 1314 0 14 Dtool_sTqOVgez 0 3 4 this 3 1350  7 torque1 1 1320  7 torque2 1 1320  
644 14 Dtool_sTqO6Lqu 0 7 591 1322 0 14 Dtool_sTqO6Lqu 0 1 4 this 3 1451  
645 14 Dtool_sTqOwuzT 0 7 592 1322 0 14 Dtool_sTqOwuzT 0 1 4 this 3 1451  
646 14 Dtool_sTqOP20D 0 7 593 1322 0 14 Dtool_sTqOP20D 0 1 4 this 3 1451  
647 14 Dtool_sTqOU2s0 0 7 594 1322 0 14 Dtool_sTqOU2s0 0 1 4 this 3 1451  
648 14 Dtool_sTqOP7Y6 0 6 595 1320 0 14 Dtool_sTqOP7Y6 0 1 4 this 3 1451  
649 14 Dtool_sTqO2_YW 0 6 596 1320 0 14 Dtool_sTqO2_YW 0 1 4 this 3 1451  
650 14 Dtool_sTqOkOSp 0 6 597 1320 0 14 Dtool_sTqOkOSp 0 1 4 this 3 1451  
651 14 Dtool_sTqOvJSF 0 6 598 1320 0 14 Dtool_sTqOvJSF 0 1 4 this 3 1451  
652 14 Dtool_sTqO2vas 0 4 599 1314 0 14 Dtool_sTqO2vas 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
653 14 Dtool_sTqO_K7k 0 4 600 1314 0 14 Dtool_sTqO_K7k 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
654 14 Dtool_sTqODmVf 0 4 601 1314 0 14 Dtool_sTqODmVf 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
655 14 Dtool_sTqO7mGj 0 4 602 1314 0 14 Dtool_sTqO7mGj 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
656 14 Dtool_sTqOEx8V 0 4 603 1314 0 14 Dtool_sTqOEx8V 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
657 14 Dtool_sTqOSFwm 0 4 604 1314 0 14 Dtool_sTqOSFwm 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
658 14 Dtool_sTqO5O28 0 4 605 1314 0 14 Dtool_sTqO5O28 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
659 14 Dtool_sTqO6BL0 0 4 606 1314 0 14 Dtool_sTqO6BL0 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
660 14 Dtool_sTqO2Yas 0 4 607 1314 0 14 Dtool_sTqO2Yas 0 3 4 this 3 1350  4 axis 1 1321  3 val 1 1320  
661 14 Dtool_sTqOCZFa 0 6 608 1320 0 14 Dtool_sTqOCZFa 0 2 4 this 3 1451  4 axis 1 1321  
662 14 Dtool_sTqO6nnS 0 6 609 1320 0 14 Dtool_sTqO6nnS 0 2 4 this 3 1451  4 axis 1 1321  
663 14 Dtool_sTqOiNA8 0 6 610 1320 0 14 Dtool_sTqOiNA8 0 2 4 this 3 1451  4 axis 1 1321  
664 14 Dtool_sTqOfz2B 0 6 611 1320 0 14 Dtool_sTqOfz2B 0 2 4 this 3 1451  4 axis 1 1321  
665 14 Dtool_sTqOHybx 0 6 612 1320 0 14 Dtool_sTqOHybx 0 2 4 this 3 1451  4 axis 1 1321  
666 14 Dtool_sTqO_0FC 0 6 613 1320 0 14 Dtool_sTqO_0FC 0 2 4 this 3 1451  4 axis 1 1321  
667 14 Dtool_sTqOvlhZ 0 6 614 1320 0 14 Dtool_sTqOvlhZ 0 2 4 this 3 1451  4 axis 1 1321  
668 14 Dtool_sTqONTmt 0 6 615 1320 0 14 Dtool_sTqONTmt 0 2 4 this 3 1451  4 axis 1 1321  
669 14 Dtool_sTqOp60l 0 6 616 1320 0 14 Dtool_sTqOp60l 0 2 4 this 3 1451  4 axis 1 1321  
670 14 Dtool_sTqO8bRh 0 7 617 1326 0 14 Dtool_sTqO8bRh 0 0 
671 14 Dtool_sTqONyab 0 7 619 1336 0 14 Dtool_sTqONyab 283 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint
//       Access: Public, Static
//  Description: Returns the joint that connects the given bodies.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1341  5 body2 1 1341  
672 14 Dtool_sTqOibpi 0 7 620 1428 1116 14 Dtool_sTqOibpi 319 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint_list
//       Access: Public, Static
//  Description: Returns a collection of joints connecting the
//               specified bodies.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1341  5 body2 1 1341  
673 14 Dtool_sTqOniRD 0 6 621 1321 0 14 Dtool_sTqOniRD 320 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint, returns 0 otherwise.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1341  5 body2 1 1341  
674 14 Dtool_sTqON05R 0 6 622 1321 0 14 Dtool_sTqON05R 733 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected_excluding
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint that does not match the given
//               joint_type, returns 0 otherwise. This is useful
//               for deciding whether to add contact joints between
//               two bodies: if they are already connected by
//               non-contact joints then it may not be appropriate
//               to add contacts, however it is okay to add more
//               contact between bodies that already have contacts.
//////////////////////////////////////////////////////////////////// 3 5 body1 1 1341  5 body2 1 1341  10 joint_type 1 1321  
675 14 Dtool_sTqO717j 0 7 623 1454 0 14 Dtool_sTqO717j 392 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
//////////////////////////////////////////////////////////////////// 3 5 geom1 1 1381  5 geom2 1 1381  12 max_contacts 1 1453  
676 14 Dtool_sTqO7_xF 0 7 623 1454 0 14 Dtool_sTqO7_xF 392 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
//////////////////////////////////////////////////////////////////// 2 5 geom1 1 1381  5 geom2 1 1381  
677 14 Dtool_sTqOux7A 0 6 624 1321 0 14 Dtool_sTqOux7A 371 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide2
//       Access: Public, Static
//  Description: Calls the callback for all potentially intersecting
//               pairs that contain one geom from geom1 and one geom
//               from geom2.
//////////////////////////////////////////////////////////////////// 4 5 geom1 1 1381  5 geom2 1 1381  3 arg 1 1371  8 callback 1 1371  
678 14 Dtool_sTqOyL0C 0 7 625 1387 0 14 Dtool_sTqOyL0C 0 1 5 space 1 1379  
679 14 Dtool_sTqOrRAh 0 6 626 1320 0 14 Dtool_sTqOrRAh 73 // RAU we can't access OC_infinity as constants are not exposed in python 0 
680 14 Dtool_sTqO3iBL 0 6 627 1321 0 14 Dtool_sTqO3iBL 0 0 
681 14 Dtool_sTqOFFo0 0 4 628 1314 0 14 Dtool_sTqOFFo0 0 1 1 s 1 1321  
194
1261 6 dxBody 0 1025 6 dxBody 6 dxBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1262 6 dxGeom 0 1025 6 dxGeom 6 dxGeom 0 0 0 0 0 0 0 0 0 0 0 0 0

1263 7 dxJoint 0 1025 7 dxJoint 7 dxJoint 0 0 0 0 0 0 0 0 0 0 0 0 0

1264 12 dxJointGroup 0 1025 12 dxJointGroup 12 dxJointGroup 0 0 0 0 0 0 0 0 0 0 0 0 0

1265 7 dxSpace 0 1025 7 dxSpace 7 dxSpace 0 0 0 0 0 0 0 0 0 0 0 0 0

1266 13 dxTriMeshData 0 1025 13 dxTriMeshData 13 dxTriMeshData 0 0 0 0 0 0 0 0 0 0 0 0 0

1267 7 dxWorld 0 1025 7 dxWorld 7 dxWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1268 8 OdeWorld 0 75777 8 OdeWorld 8 OdeWorld 0 0 0 1 682 0 0 39 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 722 0 1 721 1 0 1269 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : OdeWorld
// Description : 
////////////////////////////////////////////////////////////////////

1269 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

1270 13 OdeJointGroup 0 75777 13 OdeJointGroup 13 OdeJointGroup 0 0 0 1 723 0 0 5 724 725 726 727 728 0 0 1 0 1269 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeJointGroup
// Description : 
////////////////////////////////////////////////////////////////////

1271 16 OdeJointFeedback 0 141313 16 OdeJointFeedback 16 OdeJointFeedback 0 0 0 0 733 0 4 729 730 731 732 0 0 1 0 1272 0 0 0 0 0

1272 14 dJointFeedback 0 1025 14 dJointFeedback 14 dJointFeedback 0 0 0 0 0 0 0 0 0 0 0 0 0

1273 8 OdeJoint 0 75777 8 OdeJoint 8 OdeJoint 0 0 0 0 0 0 25 734 735 736 737 738 739 740 741 742 743 744 745 746 748 749 750 751 752 753 754 755 756 757 758 759 0 1 747 1 0 1269 0 0 0 1 1274 181
////////////////////////////////////////////////////////////////////
//       Class : OdeJoint
// Description : 
////////////////////////////////////////////////////////////////////

1274 9 JointType 0 794624 19 OdeJoint::JointType 19 OdeJoint::JointType 1273 0 0 0 0 0 0 0 0 0 12 7 JT_none 17 OdeJoint::JT_none 0 7 JT_ball 17 OdeJoint::JT_ball 1 8 JT_hinge 18 OdeJoint::JT_hinge 2 9 JT_slider 19 OdeJoint::JT_slider 3 10 JT_contact 20 OdeJoint::JT_contact 4 12 JT_universal 22 OdeJoint::JT_universal 5 9 JT_hinge2 19 OdeJoint::JT_hinge2 6 8 JT_fixed 18 OdeJoint::JT_fixed 7 7 JT_null 17 OdeJoint::JT_null 8 10 JT_a_motor 20 OdeJoint::JT_a_motor 9 10 JT_l_motor 20 OdeJoint::JT_l_motor 10 10 JT_plane2d 20 OdeJoint::JT_plane2d 11 0 18
/* or "unknown" */

1275 14 OdeAMotorJoint 0 75777 14 OdeAMotorJoint 14 OdeAMotorJoint 0 0 0 1 760 0 0 30 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 1 1455 0 1 0 1273 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeAMotorJoint
// Description : 
////////////////////////////////////////////////////////////////////

1276 12 OdeBallJoint 0 75777 12 OdeBallJoint 12 OdeBallJoint 0 0 0 1 791 0 0 5 792 793 794 795 796 0 0 1 0 1273 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdeBallJoint
// Description : 
////////////////////////////////////////////////////////////////////

1277 7 OdeMass 0 75777 7 OdeMass 7 OdeMass 0 0 0 1 797 0 0 20 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 0 0 1 0 1278 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeMass
// Description : 
////////////////////////////////////////////////////////////////////

1278 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1279 7 OdeBody 0 75777 7 OdeBody 7 OdeBody 0 0 0 1 818 0 0 58 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 876 877 1 1456 1 875 1 0 1269 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeBody
// Description : 
////////////////////////////////////////////////////////////////////

1280 8 OdeSpace 0 75777 8 OdeSpace 8 OdeSpace 0 0 0 0 0 0 38 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 903 904 905 906 907 908 909 910 911 912 913 914 915 916 0 1 902 1 0 1269 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : OdeSpace
// Description : 
////////////////////////////////////////////////////////////////////

1281 7 OdeGeom 0 75777 7 OdeGeom 7 OdeGeom 0 0 0 0 0 0 47 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 953 954 955 956 957 958 959 960 961 962 963 964 0 1 952 1 0 1269 0 0 0 1 1282 180
////////////////////////////////////////////////////////////////////
//       Class : OdeGeom
// Description : 
////////////////////////////////////////////////////////////////////

1282 9 GeomClass 0 794624 18 OdeGeom::GeomClass 18 OdeGeom::GeomClass 1281 0 0 0 0 0 0 0 0 0 10 9 GC_sphere 18 OdeGeom::GC_sphere 0 6 GC_box 15 OdeGeom::GC_box 1 18 GC_capped_cylinder 27 OdeGeom::GC_capped_cylinder 2 11 GC_cylinder 20 OdeGeom::GC_cylinder 3 8 GC_plane 17 OdeGeom::GC_plane 4 6 GC_ray 15 OdeGeom::GC_ray 5 11 GC_tri_mesh 20 OdeGeom::GC_tri_mesh 8 15 GC_simple_space 24 OdeGeom::GC_simple_space 10 13 GC_hash_space 22 OdeGeom::GC_hash_space 11 18 GC_quad_tree_space 27 OdeGeom::GC_quad_tree_space 12 0 0

1283 10 OdeBoxGeom 0 75777 10 OdeBoxGeom 10 OdeBoxGeom 0 0 0 1 965 0 0 4 966 967 968 969 0 0 1 0 1281 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeBoxGeom
// Description : 
////////////////////////////////////////////////////////////////////

1284 21 OdeCappedCylinderGeom 0 75777 21 OdeCappedCylinderGeom 21 OdeCappedCylinderGeom 0 0 0 1 970 0 0 6 971 972 973 974 975 976 0 0 1 0 1281 0 0 0 0 194
////////////////////////////////////////////////////////////////////
//       Class : OdeCappedCylinderGeom
// Description : 
////////////////////////////////////////////////////////////////////

1285 14 OdeContactGeom 0 75777 14 OdeContactGeom 14 OdeContactGeom 0 0 0 1 977 0 0 13 978 979 980 981 982 983 984 985 986 987 988 989 990 0 0 1 0 1278 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeContactGeom
// Description : 
////////////////////////////////////////////////////////////////////

1286 17 OdeCollisionEntry 0 75777 17 OdeCollisionEntry 17 OdeCollisionEntry 0 0 0 0 0 0 10 991 992 993 994 995 996 997 998 1000 1001 2 1457 1458 1 999 1 0 1278 0 0 0 0 276
////////////////////////////////////////////////////////////////////
//       Class : OdeCollisionEntry
// Description : A class used to hold information about a collision
//               that has occurred.
////////////////////////////////////////////////////////////////////

1287 20 OdeSurfaceParameters 0 75777 20 OdeSurfaceParameters 20 OdeSurfaceParameters 0 0 0 1 1002 0 0 23 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 1 0 1269 0 0 0 1 1288 193
////////////////////////////////////////////////////////////////////
//       Class : OdeSurfaceParameters
// Description : 
////////////////////////////////////////////////////////////////////

1288 9 ModeFlags 0 794624 31 OdeSurfaceParameters::ModeFlags 31 OdeSurfaceParameters::ModeFlags 1287 0 0 0 0 0 0 0 0 0 13 14 MF_contact_mu2 36 OdeSurfaceParameters::MF_contact_mu2 1 15 MF_contactFDir1 37 OdeSurfaceParameters::MF_contactFDir1 2 16 MF_contactBounce 38 OdeSurfaceParameters::MF_contactBounce 4 17 MF_contactSoftERP 39 OdeSurfaceParameters::MF_contactSoftERP 8 17 MF_contactSoftCFM 39 OdeSurfaceParameters::MF_contactSoftCFM 16 17 MF_contactMotion1 39 OdeSurfaceParameters::MF_contactMotion1 32 17 MF_contactMotion2 39 OdeSurfaceParameters::MF_contactMotion2 64 15 MF_contactSlip1 37 OdeSurfaceParameters::MF_contactSlip1 128 15 MF_contactSlip2 37 OdeSurfaceParameters::MF_contactSlip2 256 17 MF_contactApprox0 39 OdeSurfaceParameters::MF_contactApprox0 0 19 MF_contactApprox1_1 41 OdeSurfaceParameters::MF_contactApprox1_1 4096 19 MF_contactApprox1_2 41 OdeSurfaceParameters::MF_contactApprox1_2 8192 17 MF_contactApprox1 39 OdeSurfaceParameters::MF_contactApprox1 12288 0 0

1289 10 OdeContact 0 75777 10 OdeContact 10 OdeContact 0 0 0 1 1026 0 0 7 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1278 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeContact
// Description : 
////////////////////////////////////////////////////////////////////

1290 15 OdeContactJoint 0 75777 15 OdeContactJoint 15 OdeContactJoint 0 0 0 1 1034 0 0 1 1035 0 0 1 0 1273 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeContactJoint
// Description : 
////////////////////////////////////////////////////////////////////

1291 15 OdeCylinderGeom 0 75777 15 OdeCylinderGeom 15 OdeCylinderGeom 0 0 0 1 1036 0 0 5 1037 1038 1039 1040 1041 0 0 1 0 1281 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeCylinderGeom
// Description : 
////////////////////////////////////////////////////////////////////

1292 13 OdeFixedJoint 0 75777 13 OdeFixedJoint 13 OdeFixedJoint 0 0 0 1 1042 0 0 2 1043 1044 0 0 1 0 1273 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeFixedJoint
// Description : 
////////////////////////////////////////////////////////////////////

1293 12 OdeHashSpace 0 75777 12 OdeHashSpace 12 OdeHashSpace 0 0 0 1 1045 0 0 4 1046 1047 1048 1049 0 0 1 0 1280 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeHashSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1294 14 OdeHinge2Joint 0 75777 14 OdeHinge2Joint 14 OdeHinge2Joint 0 0 0 1 1050 0 0 34 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 0 0 1 0 1273 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeHinge2Joint
// Description : 
////////////////////////////////////////////////////////////////////

1295 13 OdeHingeJoint 0 75777 13 OdeHingeJoint 13 OdeHingeJoint 0 0 0 1 1085 0 0 28 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 0 0 1 0 1273 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeHingeJoint
// Description : 
////////////////////////////////////////////////////////////////////

1296 18 OdeJointCollection 0 26625 18 OdeJointCollection 18 OdeJointCollection 0 0 0 1 1114 1116 0 15 1115 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1 1459 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : OdeJointCollection
// Description : 
////////////////////////////////////////////////////////////////////

1297 14 OdeLMotorJoint 0 75777 14 OdeLMotorJoint 14 OdeLMotorJoint 0 0 0 1 1131 0 0 7 1132 1133 1134 1135 1136 1137 1138 1 1460 0 1 0 1273 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeLMotorJoint
// Description : 
////////////////////////////////////////////////////////////////////

1298 12 OdeNullJoint 0 75777 12 OdeNullJoint 12 OdeNullJoint 0 0 0 1 1139 0 0 1 1140 0 0 1 0 1273 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdeNullJoint
// Description : 
////////////////////////////////////////////////////////////////////

1299 15 OdePlane2dJoint 0 75777 15 OdePlane2dJoint 15 OdePlane2dJoint 0 0 0 1 1141 0 0 4 1142 1143 1144 1145 0 0 1 0 1273 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdePlane2dJoint
// Description : 
////////////////////////////////////////////////////////////////////

1300 12 OdePlaneGeom 0 75777 12 OdePlaneGeom 12 OdePlaneGeom 0 0 0 1 1146 0 0 4 1147 1148 1149 1150 0 0 1 0 1281 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdePlaneGeom
// Description : 
////////////////////////////////////////////////////////////////////

1301 16 OdeQuadTreeSpace 0 75777 16 OdeQuadTreeSpace 16 OdeQuadTreeSpace 0 0 0 1 1151 0 0 1 1152 0 0 1 0 1280 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : OdeQuadTreeSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1302 10 OdeRayGeom 0 75777 10 OdeRayGeom 10 OdeRayGeom 0 0 0 1 1153 0 0 13 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 0 0 1 0 1281 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeRayGeom
// Description : 
////////////////////////////////////////////////////////////////////

1303 14 OdeSimpleSpace 0 75777 14 OdeSimpleSpace 14 OdeSimpleSpace 0 0 0 1 1167 0 0 1 1168 0 0 1 0 1280 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeSimpleSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1304 14 OdeSliderJoint 0 75777 14 OdeSliderJoint 14 OdeSliderJoint 0 0 0 1 1169 0 0 25 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 0 0 1 0 1273 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeSliderJoint
// Description : 
////////////////////////////////////////////////////////////////////

1305 13 OdeSphereGeom 0 75777 13 OdeSphereGeom 13 OdeSphereGeom 0 0 0 1 1195 0 0 4 1196 1197 1198 1199 0 0 1 0 1281 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeSphereGeom
// Description : 
////////////////////////////////////////////////////////////////////

1306 14 OdeTriMeshData 0 75777 14 OdeTriMeshData 14 OdeTriMeshData 0 0 0 1 1200 0 0 4 1201 1202 1203 1204 0 0 1 0 1278 0 0 0 1 1307 187
////////////////////////////////////////////////////////////////////
//       Class : OdeTriMeshData
// Description : 
////////////////////////////////////////////////////////////////////

1307 8 DataType 0 794624 24 OdeTriMeshData::DataType 24 OdeTriMeshData::DataType 1306 0 0 0 0 0 0 0 0 0 2 15 DT_face_normals 31 OdeTriMeshData::DT_face_normals 0 22 DT_last_transformation 38 OdeTriMeshData::DT_last_transformation 1 0 0

1308 14 OdeTriMeshGeom 0 75777 14 OdeTriMeshGeom 14 OdeTriMeshGeom 0 0 0 1 1205 0 0 12 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 0 0 1 0 1281 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeTriMeshGeom
// Description : 
////////////////////////////////////////////////////////////////////

1309 17 OdeUniversalJoint 0 75777 17 OdeUniversalJoint 17 OdeUniversalJoint 0 0 0 1 1218 0 0 31 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 0 0 1 0 1273 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : OdeUniversalJoint
// Description : 
////////////////////////////////////////////////////////////////////

1310 7 OdeUtil 0 141313 7 OdeUtil 7 OdeUtil 0 0 0 0 1260 0 10 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 0 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeUtil
// Description : 
////////////////////////////////////////////////////////////////////

1311 10 OdeWorld * 0 8576 10 OdeWorld * 10 OdeWorld * 0 0 1268 0 0 0 0 0 0 0 0 0 0

1312 16 OdeWorld const * 0 8576 16 OdeWorld const * 16 OdeWorld const * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1313 14 OdeWorld const 0 8832 14 OdeWorld const 14 OdeWorld const 0 0 1268 0 0 0 0 0 0 0 0 0 0

1314 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1315 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1316 9 dxWorld * 0 8576 9 dxWorld * 9 dxWorld * 0 0 1267 0 0 0 0 0 0 0 0 0 0

1317 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1318 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1319 0 0 0 0 0 0 0 0 0 0

1319 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1320 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1321 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1322 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 1319 0 0 0 0 0 0 0 0 0 0

1323 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1324 9 OdeBody * 0 8576 9 OdeBody * 9 OdeBody * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1325 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1326 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1327 15 OdeJointGroup * 0 8576 15 OdeJointGroup * 15 OdeJointGroup * 0 0 1270 0 0 0 0 0 0 0 0 0 0

1328 21 OdeJointGroup const * 0 8576 21 OdeJointGroup const * 21 OdeJointGroup const * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1329 19 OdeJointGroup const 0 8832 19 OdeJointGroup const 19 OdeJointGroup const 0 0 1270 0 0 0 0 0 0 0 0 0 0

1330 14 dxJointGroup * 0 8576 14 dxJointGroup * 14 dxJointGroup * 0 0 1264 0 0 0 0 0 0 0 0 0 0

1331 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1332 0 0 0 0 0 0 0 0 0 0

1332 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1333 24 OdeJointFeedback const * 0 8576 24 OdeJointFeedback const * 24 OdeJointFeedback const * 0 0 1334 0 0 0 0 0 0 0 0 0 0

1334 22 OdeJointFeedback const 0 8832 22 OdeJointFeedback const 22 OdeJointFeedback const 0 0 1271 0 0 0 0 0 0 0 0 0 0

1335 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1331 0 0 0 0 0 0 0 0 0 0

1336 10 OdeJoint * 0 8576 10 OdeJoint * 10 OdeJoint * 0 0 1273 0 0 0 0 0 0 0 0 0 0

1337 16 OdeJoint const * 0 8576 16 OdeJoint const * 16 OdeJoint const * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 14 OdeJoint const 0 8832 14 OdeJoint const 14 OdeJoint const 0 0 1273 0 0 0 0 0 0 0 0 0 0

1339 9 dxJoint * 0 8576 9 dxJoint * 9 dxJoint * 0 0 1263 0 0 0 0 0 0 0 0 0 0

1340 18 OdeJointFeedback * 0 8576 18 OdeJointFeedback * 18 OdeJointFeedback * 0 0 1271 0 0 0 0 0 0 0 0 0 0

1341 15 OdeBody const * 0 8576 15 OdeBody const * 15 OdeBody const * 0 0 1342 0 0 0 0 0 0 0 0 0 0

1342 13 OdeBody const 0 8832 13 OdeBody const 13 OdeBody const 0 0 1279 0 0 0 0 0 0 0 0 0 0

1343 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1344 0 0 0 0 0 0 0 0 0 0

1344 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1345 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1346 14 OdeBallJoint * 0 8576 14 OdeBallJoint * 14 OdeBallJoint * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1347 15 OdeHingeJoint * 0 8576 15 OdeHingeJoint * 15 OdeHingeJoint * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1348 16 OdeSliderJoint * 0 8576 16 OdeSliderJoint * 16 OdeSliderJoint * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1349 17 OdeContactJoint * 0 8576 17 OdeContactJoint * 17 OdeContactJoint * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1350 19 OdeUniversalJoint * 0 8576 19 OdeUniversalJoint * 19 OdeUniversalJoint * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1351 16 OdeHinge2Joint * 0 8576 16 OdeHinge2Joint * 16 OdeHinge2Joint * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1352 15 OdeFixedJoint * 0 8576 15 OdeFixedJoint * 15 OdeFixedJoint * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1353 14 OdeNullJoint * 0 8576 14 OdeNullJoint * 14 OdeNullJoint * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1354 16 OdeAMotorJoint * 0 8576 16 OdeAMotorJoint * 16 OdeAMotorJoint * 0 0 1275 0 0 0 0 0 0 0 0 0 0

1355 16 OdeLMotorJoint * 0 8576 16 OdeLMotorJoint * 16 OdeLMotorJoint * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1356 17 OdePlane2dJoint * 0 8576 17 OdePlane2dJoint * 17 OdePlane2dJoint * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1357 22 OdeAMotorJoint const * 0 8576 22 OdeAMotorJoint const * 22 OdeAMotorJoint const * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 20 OdeAMotorJoint const 0 8832 20 OdeAMotorJoint const 20 OdeAMotorJoint const 0 0 1275 0 0 0 0 0 0 0 0 0 0

1359 20 OdeBallJoint const * 0 8576 20 OdeBallJoint const * 20 OdeBallJoint const * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1360 18 OdeBallJoint const 0 8832 18 OdeBallJoint const 18 OdeBallJoint const 0 0 1276 0 0 0 0 0 0 0 0 0 0

1361 9 OdeMass * 0 8576 9 OdeMass * 9 OdeMass * 0 0 1277 0 0 0 0 0 0 0 0 0 0

1362 15 OdeMass const * 0 8576 15 OdeMass const * 15 OdeMass const * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1363 13 OdeMass const 0 8832 13 OdeMass const 13 OdeMass const 0 0 1277 0 0 0 0 0 0 0 0 0 0

1364 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1365 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1366 0 0 0 0 0 0 0 0 0 0

1366 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1461 1462 1463 1464 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1367 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1368 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1369 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1370 8 dxBody * 0 8576 8 dxBody * 8 dxBody * 0 0 1261 0 0 0 0 0 0 0 0 0 0

1371 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1373 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1376 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1377 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1378 10 OdeSpace * 0 8576 10 OdeSpace * 10 OdeSpace * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1379 16 OdeSpace const * 0 8576 16 OdeSpace const * 16 OdeSpace const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 14 OdeSpace const 0 8832 14 OdeSpace const 14 OdeSpace const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1381 15 OdeGeom const * 0 8576 15 OdeGeom const * 15 OdeGeom const * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1382 13 OdeGeom const 0 8832 13 OdeGeom const 13 OdeGeom const 0 0 1281 0 0 0 0 0 0 0 0 0 0

1383 35 BitMask< unsigned int, 32 > const * 0 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1384 33 BitMask< unsigned int, 32 > const 0 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1385 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1386 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1387 9 OdeGeom * 0 8576 9 OdeGeom * 9 OdeGeom * 0 0 1281 0 0 0 0 0 0 0 0 0 0

1388 16 OdeSimpleSpace * 0 8576 16 OdeSimpleSpace * 16 OdeSimpleSpace * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1389 14 OdeHashSpace * 0 8576 14 OdeHashSpace * 14 OdeHashSpace * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1390 18 OdeQuadTreeSpace * 0 8576 18 OdeQuadTreeSpace * 18 OdeQuadTreeSpace * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1391 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1392 8 dxGeom * 0 8576 8 dxGeom * 8 dxGeom * 0 0 1262 0 0 0 0 0 0 0 0 0 0

1393 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1394 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1395 12 OdeBoxGeom * 0 8576 12 OdeBoxGeom * 12 OdeBoxGeom * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1396 23 OdeCappedCylinderGeom * 0 8576 23 OdeCappedCylinderGeom * 23 OdeCappedCylinderGeom * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1397 17 OdeCylinderGeom * 0 8576 17 OdeCylinderGeom * 17 OdeCylinderGeom * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1398 14 OdePlaneGeom * 0 8576 14 OdePlaneGeom * 14 OdePlaneGeom * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1399 12 OdeRayGeom * 0 8576 12 OdeRayGeom * 12 OdeRayGeom * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1400 15 OdeSphereGeom * 0 8576 15 OdeSphereGeom * 15 OdeSphereGeom * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1401 16 OdeTriMeshGeom * 0 8576 16 OdeTriMeshGeom * 16 OdeTriMeshGeom * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1402 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1403 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1404 29 OdeCappedCylinderGeom const * 0 8576 29 OdeCappedCylinderGeom const * 29 OdeCappedCylinderGeom const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 27 OdeCappedCylinderGeom const 0 8832 27 OdeCappedCylinderGeom const 27 OdeCappedCylinderGeom const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1406 16 OdeContactGeom * 0 8576 16 OdeContactGeom * 16 OdeContactGeom * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1407 22 OdeContactGeom const * 0 8576 22 OdeContactGeom const * 22 OdeContactGeom const * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 20 OdeContactGeom const 0 8832 20 OdeContactGeom const 20 OdeContactGeom const 0 0 1285 0 0 0 0 0 0 0 0 0 0

1409 25 OdeCollisionEntry const * 0 8576 25 OdeCollisionEntry const * 25 OdeCollisionEntry const * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1410 23 OdeCollisionEntry const 0 8832 23 OdeCollisionEntry const 23 OdeCollisionEntry const 0 0 1286 0 0 0 0 0 0 0 0 0 0

1411 22 OdeSurfaceParameters * 0 8576 22 OdeSurfaceParameters * 22 OdeSurfaceParameters * 0 0 1287 0 0 0 0 0 0 0 0 0 0

1412 28 OdeSurfaceParameters const * 0 8576 28 OdeSurfaceParameters const * 28 OdeSurfaceParameters const * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 26 OdeSurfaceParameters const 0 8832 26 OdeSurfaceParameters const 26 OdeSurfaceParameters const 0 0 1287 0 0 0 0 0 0 0 0 0 0

1414 12 OdeContact * 0 8576 12 OdeContact * 12 OdeContact * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1415 16 dContact const * 0 8576 16 dContact const * 16 dContact const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 14 dContact const 0 8832 14 dContact const 14 dContact const 0 0 1417 0 0 0 0 0 0 0 0 0 0

1417 8 dContact 0 1024 8 dContact 8 dContact 0 0 0 0 0 0 0 0 0 0 0 0 0

1418 18 OdeContact const * 0 8576 18 OdeContact const * 18 OdeContact const * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1419 16 OdeContact const 0 8832 16 OdeContact const 16 OdeContact const 0 0 1289 0 0 0 0 0 0 0 0 0 0

1420 23 OdeCylinderGeom const * 0 8576 23 OdeCylinderGeom const * 23 OdeCylinderGeom const * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 21 OdeCylinderGeom const 0 8832 21 OdeCylinderGeom const 21 OdeCylinderGeom const 0 0 1291 0 0 0 0 0 0 0 0 0 0

1422 20 OdeHashSpace const * 0 8576 20 OdeHashSpace const * 20 OdeHashSpace const * 0 0 1423 0 0 0 0 0 0 0 0 0 0

1423 18 OdeHashSpace const 0 8832 18 OdeHashSpace const 18 OdeHashSpace const 0 0 1293 0 0 0 0 0 0 0 0 0 0

1424 22 OdeHinge2Joint const * 0 8576 22 OdeHinge2Joint const * 22 OdeHinge2Joint const * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 20 OdeHinge2Joint const 0 8832 20 OdeHinge2Joint const 20 OdeHinge2Joint const 0 0 1294 0 0 0 0 0 0 0 0 0 0

1426 21 OdeHingeJoint const * 0 8576 21 OdeHingeJoint const * 21 OdeHingeJoint const * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 19 OdeHingeJoint const 0 8832 19 OdeHingeJoint const 19 OdeHingeJoint const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1428 20 OdeJointCollection * 0 8576 20 OdeJointCollection * 20 OdeJointCollection * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1429 26 OdeJointCollection const * 0 8576 26 OdeJointCollection const * 26 OdeJointCollection const * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 24 OdeJointCollection const 0 8832 24 OdeJointCollection const 24 OdeJointCollection const 0 0 1296 0 0 0 0 0 0 0 0 0 0

1431 22 OdeLMotorJoint const * 0 8576 22 OdeLMotorJoint const * 22 OdeLMotorJoint const * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 20 OdeLMotorJoint const 0 8832 20 OdeLMotorJoint const 20 OdeLMotorJoint const 0 0 1297 0 0 0 0 0 0 0 0 0 0

1433 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1435 20 OdePlaneGeom const * 0 8576 20 OdePlaneGeom const * 20 OdePlaneGeom const * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1436 18 OdePlaneGeom const 0 8832 18 OdePlaneGeom const 18 OdePlaneGeom const 0 0 1300 0 0 0 0 0 0 0 0 0 0

1437 18 OdeRayGeom const * 0 8576 18 OdeRayGeom const * 18 OdeRayGeom const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 16 OdeRayGeom const 0 8832 16 OdeRayGeom const 16 OdeRayGeom const 0 0 1302 0 0 0 0 0 0 0 0 0 0

1439 22 OdeSliderJoint const * 0 8576 22 OdeSliderJoint const * 22 OdeSliderJoint const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 20 OdeSliderJoint const 0 8832 20 OdeSliderJoint const 20 OdeSliderJoint const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1441 21 OdeSphereGeom const * 0 8576 21 OdeSphereGeom const * 21 OdeSphereGeom const * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 19 OdeSphereGeom const 0 8832 19 OdeSphereGeom const 19 OdeSphereGeom const 0 0 1305 0 0 0 0 0 0 0 0 0 0

1443 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1444 0 0 0 0 0 0 0 0 0 0

1444 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1465 1466 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1446 16 OdeTriMeshData * 0 8576 16 OdeTriMeshData * 16 OdeTriMeshData * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1447 22 OdeTriMeshData const * 0 8576 22 OdeTriMeshData const * 22 OdeTriMeshData const * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1448 20 OdeTriMeshData const 0 8832 20 OdeTriMeshData const 20 OdeTriMeshData const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1449 22 OdeTriMeshGeom const * 0 8576 22 OdeTriMeshGeom const * 22 OdeTriMeshGeom const * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1450 20 OdeTriMeshGeom const 0 8832 20 OdeTriMeshGeom const 20 OdeTriMeshGeom const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1451 25 OdeUniversalJoint const * 0 8576 25 OdeUniversalJoint const * 25 OdeUniversalJoint const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 23 OdeUniversalJoint const 0 8832 23 OdeUniversalJoint const 23 OdeUniversalJoint const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1453 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1454 19 OdeCollisionEntry * 0 8576 19 OdeCollisionEntry * 19 OdeCollisionEntry * 0 0 1286 0 0 0 0 0 0 0 0 0 0

0
0
12
1455 0 0 93 8 get_axes 12 get_num_axes 8 get_axis 
1456 0 0 155 10 get_joints 14 get_num_joints 9 get_joint 
1457 0 0 335 18 get_contact_points 16 get_num_contacts 17 get_contact_point 
1458 0 0 335 17 get_contact_geoms 16 get_num_contacts 16 get_contact_geom 
1459 0 0 468 10 get_joints 14 get_num_joints 9 get_joint 
1460 0 0 486 8 get_axes 12 get_num_axes 8 get_axis 
1461 0 0 817 8 get_rows 4 size 7 get_row 
1462 0 0 817 8 get_cols 4 size 7 get_col 
1463 0 0 817 9 get_col2s 4 size 8 get_col2 
1464 0 0 817 9 get_row2s 4 size 8 get_row2 
1465 0 0 1382 9 get_nodes 13 get_num_nodes 8 get_node 
1466 0 0 1382 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
