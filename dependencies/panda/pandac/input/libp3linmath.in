1365929900
2 2
12 libp3linmath 4 Ns0b 5 panda 
1161
1612 12 ~MathNumbers 0 4 2773 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1613 9 deg_2_rad 0 1 0 9 deg_2_rad 0 2 1477 1478 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

1614 9 rad_2_deg 0 1 0 9 rad_2_deg 0 2 1479 1480 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

1615 10 LVecBase2f 0 4 2774 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 1392
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

1616 10 operator = 0 4 2774 22 LVecBase2f::operator = 0 2 5 6 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

1617 12 operator new 0 4 2774 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

1618 15 operator delete 0 4 2774 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

1619 12 validate_ptr 0 4 2774 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

1620 4 zero 0 4 2774 16 LVecBase2f::zero 0 1 8 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1621 6 unit_x 0 4 2774 18 LVecBase2f::unit_x 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1622 6 unit_y 0 4 2774 18 LVecBase2f::unit_y 0 1 10 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1623 11 ~LVecBase2f 0 4 2774 23 LVecBase2f::~LVecBase2f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1624 10 __reduce__ 0 4 2774 22 LVecBase2f::__reduce__ 0 1 11 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2f::__reduce__(PyObject *self) const;

1625 11 __getattr__ 0 4 2774 23 LVecBase2f::__getattr__ 0 1 12 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase2f::__getattr__(basic_string< char > const &attr_name) const;

1626 11 __setattr__ 0 4 2774 23 LVecBase2f::__setattr__ 0 1 13 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1627 11 operator [] 0 4 2774 23 LVecBase2f::operator [] 0 2 14 15 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

1628 11 __setitem__ 0 4 2774 23 LVecBase2f::__setitem__ 0 1 16 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase2f::__setitem__(int i, float v);

1629 4 size 0 4 2774 16 LVecBase2f::size 0 1 17 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

1630 6 is_nan 0 4 2774 18 LVecBase2f::is_nan 0 1 18 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1631 8 get_cell 0 4 2774 20 LVecBase2f::get_cell 0 1 19 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1632 5 get_x 0 4 2774 17 LVecBase2f::get_x 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1633 5 get_y 0 4 2774 17 LVecBase2f::get_y 0 1 21 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1634 8 set_cell 0 4 2774 20 LVecBase2f::set_cell 0 1 22 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1635 5 set_x 0 4 2774 17 LVecBase2f::set_x 0 1 23 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1636 5 set_y 0 4 2774 17 LVecBase2f::set_y 0 1 24 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1637 11 add_to_cell 0 4 2774 23 LVecBase2f::add_to_cell 0 1 25 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1638 5 add_x 0 4 2774 17 LVecBase2f::add_x 0 1 26 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1639 5 add_y 0 4 2774 17 LVecBase2f::add_y 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1640 8 get_data 0 4 2774 20 LVecBase2f::get_data 0 1 28 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1641 18 get_num_components 0 4 2774 30 LVecBase2f::get_num_components 0 1 29 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1642 4 fill 0 4 2774 16 LVecBase2f::fill 0 1 30 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1643 3 set 0 4 2774 15 LVecBase2f::set 0 1 31 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1644 6 length 0 4 2774 18 LVecBase2f::length 0 1 32 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

1645 14 length_squared 0 4 2774 26 LVecBase2f::length_squared 0 1 33 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

1646 9 normalize 0 4 2774 21 LVecBase2f::normalize 0 1 34 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

1647 3 dot 0 4 2774 15 LVecBase2f::dot 0 1 35 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1648 7 project 0 4 2774 19 LVecBase2f::project 0 1 36 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

1649 10 operator < 0 4 2774 22 LVecBase2f::operator < 0 1 37 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1650 11 operator == 0 4 2774 23 LVecBase2f::operator == 0 1 38 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1651 11 operator != 0 4 2774 23 LVecBase2f::operator != 0 1 39 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1652 10 compare_to 0 4 2774 22 LVecBase2f::compare_to 0 2 40 41 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

1653 8 get_hash 0 4 2774 20 LVecBase2f::get_hash 0 2 42 43 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

1654 8 add_hash 0 4 2774 20 LVecBase2f::add_hash 0 2 44 45 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

1655 10 operator - 0 68 2774 22 LVecBase2f::operator - 0 1 46 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1656 10 operator + 0 4 2774 22 LVecBase2f::operator + 0 1 47 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1657 10 operator - 0 4 2774 22 LVecBase2f::operator - 0 1 48 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1658 10 operator * 0 4 2774 22 LVecBase2f::operator * 0 1 49 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1659 10 operator / 0 4 2774 22 LVecBase2f::operator / 0 1 50 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1660 11 operator += 0 4 2774 23 LVecBase2f::operator += 0 1 51 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1661 11 operator -= 0 4 2774 23 LVecBase2f::operator -= 0 1 52 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1662 11 operator *= 0 4 2774 23 LVecBase2f::operator *= 0 1 53 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator *=(float scalar);

1663 11 operator /= 0 4 2774 23 LVecBase2f::operator /= 0 1 54 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator /=(float scalar);

1664 4 fmax 0 4 2774 16 LVecBase2f::fmax 0 1 55 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other);

1665 4 fmin 0 4 2774 16 LVecBase2f::fmin 0 1 56 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other);

1666 12 almost_equal 0 4 2774 24 LVecBase2f::almost_equal 0 2 57 58 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

1667 6 output 0 4 2774 18 LVecBase2f::output 0 1 59 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1668 11 python_repr 0 4 2774 23 LVecBase2f::python_repr 0 1 60 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1669 13 generate_hash 0 4 2774 25 LVecBase2f::generate_hash 0 2 61 62 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

1670 20 write_datagram_fixed 0 4 2774 32 LVecBase2f::write_datagram_fixed 0 1 63 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2f::write_datagram_fixed(Datagram &destination) const;

1671 19 read_datagram_fixed 0 4 2774 31 LVecBase2f::read_datagram_fixed 0 1 64 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2f::read_datagram_fixed(DatagramIterator &source);

1672 14 write_datagram 0 4 2774 26 LVecBase2f::write_datagram 0 1 65 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::write_datagram(Datagram &destination) const;

1673 13 read_datagram 0 4 2774 25 LVecBase2f::read_datagram 0 1 66 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2f::read_datagram(DatagramIterator &source);

1674 14 get_class_type 0 4 2774 26 LVecBase2f::get_class_type 0 1 67 0
51
static TypeHandle LVecBase2f::get_class_type(void);

1675 10 LVecBase2d 0 4 2775 22 LVecBase2d::LVecBase2d 0 4 68 69 70 71 2786
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

1676 10 operator = 0 4 2775 22 LVecBase2d::operator = 0 2 72 73 942
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

1677 12 operator new 0 4 2775 24 LVecBase2d::operator new 0 1 74 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

1678 15 operator delete 0 4 2775 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

1679 12 validate_ptr 0 4 2775 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

1680 4 zero 0 4 2775 16 LVecBase2d::zero 0 1 75 526
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

1681 6 unit_x 0 4 2775 18 LVecBase2d::unit_x 0 1 76 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

1682 6 unit_y 0 4 2775 18 LVecBase2d::unit_y 0 1 77 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

1683 11 ~LVecBase2d 0 4 2775 23 LVecBase2d::~LVecBase2d 0 0 442
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

1684 10 __reduce__ 0 4 2775 22 LVecBase2d::__reduce__ 0 1 78 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2d::__reduce__(PyObject *self) const;

1685 11 __getattr__ 0 4 2775 23 LVecBase2d::__getattr__ 0 1 79 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase2d::__getattr__(basic_string< char > const &attr_name) const;

1686 11 __setattr__ 0 4 2775 23 LVecBase2d::__setattr__ 0 1 80 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1687 11 operator [] 0 4 2775 23 LVecBase2d::operator [] 0 2 81 82 914
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

1688 11 __setitem__ 0 4 2775 23 LVecBase2d::__setitem__ 0 1 83 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2d::__setitem__(int i, double v);

1689 4 size 0 4 2775 16 LVecBase2d::size 0 1 84 550
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

1690 6 is_nan 0 4 2775 18 LVecBase2d::is_nan 0 1 85 624
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

1691 8 get_cell 0 4 2775 20 LVecBase2d::get_cell 0 1 86 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

1692 5 get_x 0 4 2775 17 LVecBase2d::get_x 0 1 87 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

1693 5 get_y 0 4 2775 17 LVecBase2d::get_y 0 1 88 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

1694 8 set_cell 0 4 2775 20 LVecBase2d::set_cell 0 1 89 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

1695 5 set_x 0 4 2775 17 LVecBase2d::set_x 0 1 90 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

1696 5 set_y 0 4 2775 17 LVecBase2d::set_y 0 1 91 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

1697 11 add_to_cell 0 4 2775 23 LVecBase2d::add_to_cell 0 1 92 600
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

1698 5 add_x 0 4 2775 17 LVecBase2d::add_x 0 1 93 588
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

1699 5 add_y 0 4 2775 17 LVecBase2d::add_y 0 1 94 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

1700 8 get_data 0 4 2775 20 LVecBase2d::get_data 0 1 95 792
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

1701 18 get_num_components 0 4 2775 30 LVecBase2d::get_num_components 0 1 96 560
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

1702 4 fill 0 4 2775 16 LVecBase2d::fill 0 1 97 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

1703 3 set 0 4 2775 15 LVecBase2d::set 0 1 98 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

1704 6 length 0 4 2775 18 LVecBase2d::length 0 1 99 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

1705 14 length_squared 0 4 2775 26 LVecBase2d::length_squared 0 1 100 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

1706 9 normalize 0 4 2775 21 LVecBase2d::normalize 0 1 101 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

1707 3 dot 0 4 2775 15 LVecBase2d::dot 0 1 102 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

1708 7 project 0 4 2775 19 LVecBase2d::project 0 1 103 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

1709 10 operator < 0 4 2775 22 LVecBase2d::operator < 0 1 104 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

1710 11 operator == 0 4 2775 23 LVecBase2d::operator == 0 1 105 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

1711 11 operator != 0 4 2775 23 LVecBase2d::operator != 0 1 106 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

1712 10 compare_to 0 4 2775 22 LVecBase2d::compare_to 0 2 107 108 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

1713 8 get_hash 0 4 2775 20 LVecBase2d::get_hash 0 2 109 110 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

1714 8 add_hash 0 4 2775 20 LVecBase2d::add_hash 0 2 111 112 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

1715 10 operator - 0 68 2775 22 LVecBase2d::operator - 0 1 113 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LVecBase2d::operator -(void) const;

1716 10 operator + 0 4 2775 22 LVecBase2d::operator + 0 1 114 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

1717 10 operator - 0 4 2775 22 LVecBase2d::operator - 0 1 115 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

1718 10 operator * 0 4 2775 22 LVecBase2d::operator * 0 1 116 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

1719 10 operator / 0 4 2775 22 LVecBase2d::operator / 0 1 117 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

1720 11 operator += 0 4 2775 23 LVecBase2d::operator += 0 1 118 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

1721 11 operator -= 0 4 2775 23 LVecBase2d::operator -= 0 1 119 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

1722 11 operator *= 0 4 2775 23 LVecBase2d::operator *= 0 1 120 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator *=(double scalar);

1723 11 operator /= 0 4 2775 23 LVecBase2d::operator /= 0 1 121 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator /=(double scalar);

1724 4 fmax 0 4 2775 16 LVecBase2d::fmax 0 1 122 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other);

1725 4 fmin 0 4 2775 16 LVecBase2d::fmin 0 1 123 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other);

1726 12 almost_equal 0 4 2775 24 LVecBase2d::almost_equal 0 2 124 125 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

1727 6 output 0 4 2775 18 LVecBase2d::output 0 1 126 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

1728 11 python_repr 0 4 2775 23 LVecBase2d::python_repr 0 1 127 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1729 13 generate_hash 0 4 2775 25 LVecBase2d::generate_hash 0 2 128 129 1094
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

1730 20 write_datagram_fixed 0 4 2775 32 LVecBase2d::write_datagram_fixed 0 1 130 1286
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2d::write_datagram_fixed(Datagram &destination) const;

1731 19 read_datagram_fixed 0 4 2775 31 LVecBase2d::read_datagram_fixed 0 1 131 698
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2d::read_datagram_fixed(DatagramIterator &source);

1732 14 write_datagram 0 4 2775 26 LVecBase2d::write_datagram 0 1 132 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::write_datagram(Datagram &destination) const;

1733 13 read_datagram 0 4 2775 25 LVecBase2d::read_datagram 0 1 133 562
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2d::read_datagram(DatagramIterator &source);

1734 14 get_class_type 0 4 2775 26 LVecBase2d::get_class_type 0 1 134 0
51
static TypeHandle LVecBase2d::get_class_type(void);

1735 9 LVector2f 0 4 2776 20 LVector2f::LVector2f 0 4 135 136 137 138 1375
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

1736 10 operator = 0 4 2776 21 LVector2f::operator = 0 2 139 140 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

1737 11 __getattr__ 0 4 2776 22 LVector2f::__getattr__ 0 1 141 261
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector2f::__getattr__(basic_string< char > const &attr_name) const;

1738 11 __setattr__ 0 4 2776 22 LVector2f::__setattr__ 0 1 142 259
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1739 4 zero 0 4 2776 15 LVector2f::zero 0 1 143 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

1740 6 unit_x 0 4 2776 17 LVector2f::unit_x 0 1 144 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

1741 6 unit_y 0 4 2776 17 LVector2f::unit_y 0 1 145 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

1742 10 operator - 0 68 2776 21 LVector2f::operator - 0 1 146 213
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2f LVector2f::operator -(void) const;

1743 10 operator + 0 4 2776 21 LVector2f::operator + 0 2 147 148 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

1744 10 operator - 0 4 2776 21 LVector2f::operator - 0 2 149 150 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

1745 10 operator * 0 4 2776 21 LVector2f::operator * 0 1 151 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator *(float scalar) const;

1746 10 operator / 0 4 2776 21 LVector2f::operator / 0 1 152 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator /(float scalar) const;

1747 7 project 0 4 2776 18 LVector2f::project 0 1 153 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

1748 16 signed_angle_rad 0 4 2776 27 LVector2f::signed_angle_rad 0 1 154 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

1749 16 signed_angle_deg 0 4 2776 27 LVector2f::signed_angle_deg 0 1 155 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

1750 11 python_repr 0 4 2776 22 LVector2f::python_repr 0 1 156 220
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1751 14 get_class_type 0 4 2776 25 LVector2f::get_class_type 0 1 157 0
50
static TypeHandle LVector2f::get_class_type(void);

1752 10 ~LVector2f 0 4 2776 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

1753 9 LVector2d 0 4 2777 20 LVector2d::LVector2d 0 4 158 159 160 161 2752
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

1754 10 operator = 0 4 2777 21 LVector2d::operator = 0 2 162 163 914
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

1755 11 __getattr__ 0 4 2777 22 LVector2d::__getattr__ 0 1 164 261
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector2d::__getattr__(basic_string< char > const &attr_name) const;

1756 11 __setattr__ 0 4 2777 22 LVector2d::__setattr__ 0 1 165 259
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1757 4 zero 0 4 2777 15 LVector2d::zero 0 1 166 518
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

1758 6 unit_x 0 4 2777 17 LVector2d::unit_x 0 1 167 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

1759 6 unit_y 0 4 2777 17 LVector2d::unit_y 0 1 168 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

1760 10 operator - 0 68 2777 21 LVector2d::operator - 0 1 169 428
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2d LVector2d::operator -(void) const;

1761 10 operator + 0 4 2777 21 LVector2d::operator + 0 2 170 171 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

1762 10 operator - 0 4 2777 21 LVector2d::operator - 0 2 172 173 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

1763 10 operator * 0 4 2777 21 LVector2d::operator * 0 1 174 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator *(double scalar) const;

1764 10 operator / 0 4 2777 21 LVector2d::operator / 0 1 175 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator /(double scalar) const;

1765 7 project 0 4 2777 18 LVector2d::project 0 1 176 780
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

1766 16 signed_angle_rad 0 4 2777 27 LVector2d::signed_angle_rad 0 1 177 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

1767 16 signed_angle_deg 0 4 2777 27 LVector2d::signed_angle_deg 0 1 178 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

1768 11 python_repr 0 4 2777 22 LVector2d::python_repr 0 1 179 220
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1769 14 get_class_type 0 4 2777 25 LVector2d::get_class_type 0 1 180 0
50
static TypeHandle LVector2d::get_class_type(void);

1770 10 ~LVector2d 0 4 2777 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

1771 8 LPoint2f 0 4 2778 18 LPoint2f::LPoint2f 0 4 181 182 183 184 1370
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

1772 10 operator = 0 4 2778 20 LPoint2f::operator = 0 2 185 186 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

1773 11 __getattr__ 0 4 2778 21 LPoint2f::__getattr__ 0 1 187 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint2f::__getattr__(basic_string< char > const &attr_name) const;

1774 11 __setattr__ 0 4 2778 21 LPoint2f::__setattr__ 0 1 188 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1775 4 zero 0 4 2778 14 LPoint2f::zero 0 1 189 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

1776 6 unit_x 0 4 2778 16 LPoint2f::unit_x 0 1 190 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

1777 6 unit_y 0 4 2778 16 LPoint2f::unit_y 0 1 191 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

1778 10 operator - 0 68 2778 20 LPoint2f::operator - 0 1 192 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2f LPoint2f::operator -(void) const;

1779 10 operator + 0 4 2778 20 LPoint2f::operator + 0 2 193 194 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

1780 10 operator - 0 4 2778 20 LPoint2f::operator - 0 3 195 196 197 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

1781 10 operator * 0 4 2778 20 LPoint2f::operator * 0 1 198 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

1782 10 operator / 0 4 2778 20 LPoint2f::operator / 0 1 199 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

1783 7 project 0 4 2778 17 LPoint2f::project 0 1 200 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

1784 11 python_repr 0 4 2778 21 LPoint2f::python_repr 0 1 201 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1785 14 get_class_type 0 4 2778 24 LPoint2f::get_class_type 0 1 202 0
49
static TypeHandle LPoint2f::get_class_type(void);

1786 9 ~LPoint2f 0 4 2778 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

1787 8 LPoint2d 0 4 2779 18 LPoint2d::LPoint2d 0 4 203 204 205 206 2742
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

1788 10 operator = 0 4 2779 20 LPoint2d::operator = 0 2 207 208 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

1789 11 __getattr__ 0 4 2779 21 LPoint2d::__getattr__ 0 1 209 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint2d::__getattr__(basic_string< char > const &attr_name) const;

1790 11 __setattr__ 0 4 2779 21 LPoint2d::__setattr__ 0 1 210 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1791 4 zero 0 4 2779 14 LPoint2d::zero 0 1 211 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

1792 6 unit_x 0 4 2779 16 LPoint2d::unit_x 0 1 212 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

1793 6 unit_y 0 4 2779 16 LPoint2d::unit_y 0 1 213 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

1794 10 operator - 0 68 2779 20 LPoint2d::operator - 0 1 214 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2d LPoint2d::operator -(void) const;

1795 10 operator + 0 4 2779 20 LPoint2d::operator + 0 2 215 216 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

1796 10 operator - 0 4 2779 20 LPoint2d::operator - 0 3 217 218 219 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

1797 10 operator * 0 4 2779 20 LPoint2d::operator * 0 1 220 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

1798 10 operator / 0 4 2779 20 LPoint2d::operator / 0 1 221 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

1799 7 project 0 4 2779 17 LPoint2d::project 0 1 222 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

1800 11 python_repr 0 4 2779 21 LPoint2d::python_repr 0 1 223 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1801 14 get_class_type 0 4 2779 24 LPoint2d::get_class_type 0 1 224 0
49
static TypeHandle LPoint2d::get_class_type(void);

1802 9 ~LPoint2d 0 4 2779 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

1803 10 LVecBase3f 0 4 2780 22 LVecBase3f::LVecBase3f 0 4 225 226 227 228 1380
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);

1804 10 operator = 0 4 2780 22 LVecBase3f::operator = 0 2 229 230 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

1805 12 operator new 0 4 2780 24 LVecBase3f::operator new 0 1 231 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

1806 15 operator delete 0 4 2780 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

1807 12 validate_ptr 0 4 2780 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

1808 4 zero 0 4 2780 16 LVecBase3f::zero 0 1 232 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

1809 6 unit_x 0 4 2780 18 LVecBase3f::unit_x 0 1 233 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

1810 6 unit_y 0 4 2780 18 LVecBase3f::unit_y 0 1 234 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

1811 6 unit_z 0 4 2780 18 LVecBase3f::unit_z 0 1 235 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

1812 11 ~LVecBase3f 0 4 2780 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

1813 10 __reduce__ 0 4 2780 22 LVecBase3f::__reduce__ 0 1 236 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3f::__reduce__(PyObject *self) const;

1814 11 __getattr__ 0 4 2780 23 LVecBase3f::__getattr__ 0 1 237 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase3f::__getattr__(basic_string< char > const &attr_name) const;

1815 11 __setattr__ 0 4 2780 23 LVecBase3f::__setattr__ 0 1 238 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1816 11 operator [] 0 4 2780 23 LVecBase3f::operator [] 0 2 239 240 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

1817 11 __setitem__ 0 4 2780 23 LVecBase3f::__setitem__ 0 1 241 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase3f::__setitem__(int i, float v);

1818 4 size 0 4 2780 16 LVecBase3f::size 0 1 242 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

1819 6 is_nan 0 4 2780 18 LVecBase3f::is_nan 0 1 243 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

1820 8 get_cell 0 4 2780 20 LVecBase3f::get_cell 0 1 244 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

1821 5 get_x 0 4 2780 17 LVecBase3f::get_x 0 1 245 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

1822 5 get_y 0 4 2780 17 LVecBase3f::get_y 0 1 246 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

1823 5 get_z 0 4 2780 17 LVecBase3f::get_z 0 1 247 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

1824 8 set_cell 0 4 2780 20 LVecBase3f::set_cell 0 1 248 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

1825 5 set_x 0 4 2780 17 LVecBase3f::set_x 0 1 249 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

1826 5 set_y 0 4 2780 17 LVecBase3f::set_y 0 1 250 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

1827 5 set_z 0 4 2780 17 LVecBase3f::set_z 0 1 251 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

1828 6 get_xy 0 4 2780 18 LVecBase3f::get_xy 0 1 252 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

1829 6 get_xz 0 4 2780 18 LVecBase3f::get_xz 0 1 253 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

1830 6 get_yz 0 4 2780 18 LVecBase3f::get_yz 0 1 254 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

1831 11 add_to_cell 0 4 2780 23 LVecBase3f::add_to_cell 0 1 255 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

1832 5 add_x 0 4 2780 17 LVecBase3f::add_x 0 1 256 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

1833 5 add_y 0 4 2780 17 LVecBase3f::add_y 0 1 257 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

1834 5 add_z 0 4 2780 17 LVecBase3f::add_z 0 1 258 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

1835 8 get_data 0 4 2780 20 LVecBase3f::get_data 0 1 259 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

1836 18 get_num_components 0 4 2780 30 LVecBase3f::get_num_components 0 1 260 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

1837 4 fill 0 4 2780 16 LVecBase3f::fill 0 1 261 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

1838 3 set 0 4 2780 15 LVecBase3f::set 0 1 262 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

1839 6 length 0 4 2780 18 LVecBase3f::length 0 1 263 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

1840 14 length_squared 0 4 2780 26 LVecBase3f::length_squared 0 1 264 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

1841 9 normalize 0 4 2780 21 LVecBase3f::normalize 0 1 265 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

1842 3 dot 0 4 2780 15 LVecBase3f::dot 0 1 266 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

1843 5 cross 0 4 2780 17 LVecBase3f::cross 0 1 267 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

1844 7 project 0 4 2780 19 LVecBase3f::project 0 1 268 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

1845 10 operator < 0 4 2780 22 LVecBase3f::operator < 0 1 269 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

1846 11 operator == 0 4 2780 23 LVecBase3f::operator == 0 1 270 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

1847 11 operator != 0 4 2780 23 LVecBase3f::operator != 0 1 271 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

1848 20 get_standardized_hpr 0 4 2780 32 LVecBase3f::get_standardized_hpr 0 1 272 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

1849 10 compare_to 0 4 2780 22 LVecBase3f::compare_to 0 2 273 274 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

1850 8 get_hash 0 4 2780 20 LVecBase3f::get_hash 0 2 275 276 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

1851 8 add_hash 0 4 2780 20 LVecBase3f::add_hash 0 2 277 278 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

1852 10 operator - 0 68 2780 22 LVecBase3f::operator - 0 1 279 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LVecBase3f::operator -(void) const;

1853 10 operator + 0 4 2780 22 LVecBase3f::operator + 0 1 280 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

1854 10 operator - 0 4 2780 22 LVecBase3f::operator - 0 1 281 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

1855 10 operator * 0 4 2780 22 LVecBase3f::operator * 0 1 282 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

1856 10 operator / 0 4 2780 22 LVecBase3f::operator / 0 1 283 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

1857 11 operator += 0 4 2780 23 LVecBase3f::operator += 0 1 284 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

1858 11 operator -= 0 4 2780 23 LVecBase3f::operator -= 0 1 285 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

1859 11 operator *= 0 4 2780 23 LVecBase3f::operator *= 0 1 286 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator *=(float scalar);

1860 11 operator /= 0 4 2780 23 LVecBase3f::operator /= 0 1 287 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator /=(float scalar);

1861 4 fmax 0 4 2780 16 LVecBase3f::fmax 0 1 288 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other);

1862 4 fmin 0 4 2780 16 LVecBase3f::fmin 0 1 289 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other);

1863 10 cross_into 0 4 2780 22 LVecBase3f::cross_into 0 1 290 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

1864 12 almost_equal 0 4 2780 24 LVecBase3f::almost_equal 0 2 291 292 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

1865 6 output 0 4 2780 18 LVecBase3f::output 0 1 293 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

1866 11 python_repr 0 4 2780 23 LVecBase3f::python_repr 0 1 294 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1867 13 generate_hash 0 4 2780 25 LVecBase3f::generate_hash 0 2 295 296 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

1868 20 write_datagram_fixed 0 4 2780 32 LVecBase3f::write_datagram_fixed 0 1 297 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const;

1869 19 read_datagram_fixed 0 4 2780 31 LVecBase3f::read_datagram_fixed 0 1 298 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source);

1870 14 write_datagram 0 4 2780 26 LVecBase3f::write_datagram 0 1 299 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::write_datagram(Datagram &destination) const;

1871 13 read_datagram 0 4 2780 25 LVecBase3f::read_datagram 0 1 300 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3f::read_datagram(DatagramIterator &source);

1872 14 get_class_type 0 4 2780 26 LVecBase3f::get_class_type 0 1 301 0
51
static TypeHandle LVecBase3f::get_class_type(void);

1873 10 LVecBase3d 0 4 2781 22 LVecBase3d::LVecBase3d 0 4 302 303 304 305 2762
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
202
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);

1874 10 operator = 0 4 2781 22 LVecBase3d::operator = 0 2 306 307 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

1875 12 operator new 0 4 2781 24 LVecBase3d::operator new 0 1 308 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

1876 15 operator delete 0 4 2781 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

1877 12 validate_ptr 0 4 2781 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

1878 4 zero 0 4 2781 16 LVecBase3d::zero 0 1 309 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

1879 6 unit_x 0 4 2781 18 LVecBase3d::unit_x 0 1 310 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

1880 6 unit_y 0 4 2781 18 LVecBase3d::unit_y 0 1 311 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

1881 6 unit_z 0 4 2781 18 LVecBase3d::unit_z 0 1 312 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

1882 11 ~LVecBase3d 0 4 2781 23 LVecBase3d::~LVecBase3d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

1883 10 __reduce__ 0 4 2781 22 LVecBase3d::__reduce__ 0 1 313 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3d::__reduce__(PyObject *self) const;

1884 11 __getattr__ 0 4 2781 23 LVecBase3d::__getattr__ 0 1 314 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase3d::__getattr__(basic_string< char > const &attr_name) const;

1885 11 __setattr__ 0 4 2781 23 LVecBase3d::__setattr__ 0 1 315 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1886 11 operator [] 0 4 2781 23 LVecBase3d::operator [] 0 2 316 317 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

1887 11 __setitem__ 0 4 2781 23 LVecBase3d::__setitem__ 0 1 318 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3d::__setitem__(int i, double v);

1888 4 size 0 4 2781 16 LVecBase3d::size 0 1 319 544
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

1889 6 is_nan 0 4 2781 18 LVecBase3d::is_nan 0 1 320 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

1890 8 get_cell 0 4 2781 20 LVecBase3d::get_cell 0 1 321 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

1891 5 get_x 0 4 2781 17 LVecBase3d::get_x 0 1 322 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

1892 5 get_y 0 4 2781 17 LVecBase3d::get_y 0 1 323 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

1893 5 get_z 0 4 2781 17 LVecBase3d::get_z 0 1 324 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

1894 8 set_cell 0 4 2781 20 LVecBase3d::set_cell 0 1 325 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

1895 5 set_x 0 4 2781 17 LVecBase3d::set_x 0 1 326 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

1896 5 set_y 0 4 2781 17 LVecBase3d::set_y 0 1 327 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

1897 5 set_z 0 4 2781 17 LVecBase3d::set_z 0 1 328 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

1898 6 get_xy 0 4 2781 18 LVecBase3d::get_xy 0 1 329 636
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

1899 6 get_xz 0 4 2781 18 LVecBase3d::get_xz 0 1 330 646
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

1900 6 get_yz 0 4 2781 18 LVecBase3d::get_yz 0 1 331 634
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

1901 11 add_to_cell 0 4 2781 23 LVecBase3d::add_to_cell 0 1 332 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

1902 5 add_x 0 4 2781 17 LVecBase3d::add_x 0 1 333 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

1903 5 add_y 0 4 2781 17 LVecBase3d::add_y 0 1 334 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

1904 5 add_z 0 4 2781 17 LVecBase3d::add_z 0 1 335 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

1905 8 get_data 0 4 2781 20 LVecBase3d::get_data 0 1 336 800
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

1906 18 get_num_components 0 4 2781 30 LVecBase3d::get_num_components 0 1 337 558
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

1907 4 fill 0 4 2781 16 LVecBase3d::fill 0 1 338 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

1908 3 set 0 4 2781 15 LVecBase3d::set 0 1 339 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

1909 6 length 0 4 2781 18 LVecBase3d::length 0 1 340 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

1910 14 length_squared 0 4 2781 26 LVecBase3d::length_squared 0 1 341 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

1911 9 normalize 0 4 2781 21 LVecBase3d::normalize 0 1 342 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

1912 3 dot 0 4 2781 15 LVecBase3d::dot 0 1 343 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

1913 5 cross 0 4 2781 17 LVecBase3d::cross 0 1 344 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

1914 7 project 0 4 2781 19 LVecBase3d::project 0 1 345 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

1915 10 operator < 0 4 2781 22 LVecBase3d::operator < 0 1 346 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

1916 11 operator == 0 4 2781 23 LVecBase3d::operator == 0 1 347 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

1917 11 operator != 0 4 2781 23 LVecBase3d::operator != 0 1 348 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

1918 20 get_standardized_hpr 0 4 2781 32 LVecBase3d::get_standardized_hpr 0 1 349 2062
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

1919 10 compare_to 0 4 2781 22 LVecBase3d::compare_to 0 2 350 351 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

1920 8 get_hash 0 4 2781 20 LVecBase3d::get_hash 0 2 352 353 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

1921 8 add_hash 0 4 2781 20 LVecBase3d::add_hash 0 2 354 355 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

1922 10 operator - 0 68 2781 22 LVecBase3d::operator - 0 1 356 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LVecBase3d::operator -(void) const;

1923 10 operator + 0 4 2781 22 LVecBase3d::operator + 0 1 357 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

1924 10 operator - 0 4 2781 22 LVecBase3d::operator - 0 1 358 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

1925 10 operator * 0 4 2781 22 LVecBase3d::operator * 0 1 359 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

1926 10 operator / 0 4 2781 22 LVecBase3d::operator / 0 1 360 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

1927 11 operator += 0 4 2781 23 LVecBase3d::operator += 0 1 361 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

1928 11 operator -= 0 4 2781 23 LVecBase3d::operator -= 0 1 362 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

1929 11 operator *= 0 4 2781 23 LVecBase3d::operator *= 0 1 363 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator *=(double scalar);

1930 11 operator /= 0 4 2781 23 LVecBase3d::operator /= 0 1 364 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator /=(double scalar);

1931 4 fmax 0 4 2781 16 LVecBase3d::fmax 0 1 365 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other);

1932 4 fmin 0 4 2781 16 LVecBase3d::fmin 0 1 366 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other);

1933 10 cross_into 0 4 2781 22 LVecBase3d::cross_into 0 1 367 484
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

1934 12 almost_equal 0 4 2781 24 LVecBase3d::almost_equal 0 2 368 369 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

1935 6 output 0 4 2781 18 LVecBase3d::output 0 1 370 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

1936 11 python_repr 0 4 2781 23 LVecBase3d::python_repr 0 1 371 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1937 13 generate_hash 0 4 2781 25 LVecBase3d::generate_hash 0 2 372 373 1094
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

1938 20 write_datagram_fixed 0 4 2781 32 LVecBase3d::write_datagram_fixed 0 1 374 1286
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3d::write_datagram_fixed(Datagram &destination) const;

1939 19 read_datagram_fixed 0 4 2781 31 LVecBase3d::read_datagram_fixed 0 1 375 698
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3d::read_datagram_fixed(DatagramIterator &source);

1940 14 write_datagram 0 4 2781 26 LVecBase3d::write_datagram 0 1 376 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::write_datagram(Datagram &destination) const;

1941 13 read_datagram 0 4 2781 25 LVecBase3d::read_datagram 0 1 377 562
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3d::read_datagram(DatagramIterator &source);

1942 14 get_class_type 0 4 2781 26 LVecBase3d::get_class_type 0 1 378 0
51
static TypeHandle LVecBase3d::get_class_type(void);

1943 29 get_default_coordinate_system 0 1 0 29 get_default_coordinate_system 0 1 1481 0
53
CoordinateSystem get_default_coordinate_system(void);

1944 30 parse_coordinate_system_string 0 1 0 30 parse_coordinate_system_string 0 1 1482 0
81
CoordinateSystem parse_coordinate_system_string(basic_string< char > const &str);

1945 24 format_coordinate_system 0 1 0 24 format_coordinate_system 0 1 1483 0
67
basic_string< char > format_coordinate_system(CoordinateSystem cs);

1946 15 is_right_handed 0 1 0 15 is_right_handed 0 2 1484 1485 0
57
bool is_right_handed(CoordinateSystem cs = (CS_default));

1947 9 LVector3f 0 4 2783 20 LVector3f::LVector3f 0 4 379 380 381 382 1387
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
190
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);

1948 10 operator = 0 4 2783 21 LVector3f::operator = 0 2 383 384 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

1949 11 __getattr__ 0 4 2783 22 LVector3f::__getattr__ 0 1 385 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector3f::__getattr__(basic_string< char > const &attr_name) const;

1950 11 __setattr__ 0 4 2783 22 LVector3f::__setattr__ 0 1 386 259
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1951 4 zero 0 4 2783 15 LVector3f::zero 0 1 387 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

1952 6 unit_x 0 4 2783 17 LVector3f::unit_x 0 1 388 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

1953 6 unit_y 0 4 2783 17 LVector3f::unit_y 0 1 389 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

1954 6 unit_z 0 4 2783 17 LVector3f::unit_z 0 1 390 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

1955 6 get_xy 0 4 2783 17 LVector3f::get_xy 0 1 391 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

1956 6 get_xz 0 4 2783 17 LVector3f::get_xz 0 1 392 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

1957 6 get_yz 0 4 2783 17 LVector3f::get_yz 0 1 393 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

1958 10 operator - 0 68 2783 21 LVector3f::operator - 0 1 394 216
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3f LVector3f::operator -(void) const;

1959 10 operator + 0 4 2783 21 LVector3f::operator + 0 2 395 396 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

1960 10 operator - 0 4 2783 21 LVector3f::operator - 0 2 397 398 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

1961 5 cross 0 4 2783 16 LVector3f::cross 0 1 399 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

1962 7 project 0 4 2783 18 LVector3f::project 0 1 400 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

1963 9 angle_rad 0 4 2783 20 LVector3f::angle_rad 0 1 401 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

1964 9 angle_deg 0 4 2783 20 LVector3f::angle_deg 0 1 402 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

1965 16 signed_angle_rad 0 4 2783 27 LVector3f::signed_angle_rad 0 1 403 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

1966 16 signed_angle_deg 0 4 2783 27 LVector3f::signed_angle_deg 0 1 404 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

1967 18 relative_angle_rad 0 4 2783 29 LVector3f::relative_angle_rad 0 1 405 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

1968 18 relative_angle_deg 0 4 2783 29 LVector3f::relative_angle_deg 0 1 406 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

1969 10 operator * 0 4 2783 21 LVector3f::operator * 0 1 407 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator *(float scalar) const;

1970 10 operator / 0 4 2783 21 LVector3f::operator / 0 1 408 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator /(float scalar) const;

1971 2 up 0 4 2783 13 LVector3f::up 0 2 409 410 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = (CS_default));

1972 5 right 0 4 2783 16 LVector3f::right 0 2 411 412 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = (CS_default));

1973 7 forward 0 4 2783 18 LVector3f::forward 0 2 413 414 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (CS_default));

1974 4 down 0 4 2783 15 LVector3f::down 0 2 415 416 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = (CS_default));

1975 4 left 0 4 2783 15 LVector3f::left 0 2 417 418 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = (CS_default));

1976 4 back 0 4 2783 15 LVector3f::back 0 2 419 420 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = (CS_default));

1977 3 rfu 0 4 2783 14 LVector3f::rfu 0 2 421 422 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1978 11 python_repr 0 4 2783 22 LVector3f::python_repr 0 1 423 220
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1979 14 get_class_type 0 4 2783 25 LVector3f::get_class_type 0 1 424 0
50
static TypeHandle LVector3f::get_class_type(void);

1980 10 ~LVector3f 0 4 2783 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

1981 9 LVector3d 0 4 2784 20 LVector3d::LVector3d 0 4 425 426 427 428 2776
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
194
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);

1982 10 operator = 0 4 2784 21 LVector3d::operator = 0 2 429 430 926
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

1983 11 __getattr__ 0 4 2784 22 LVector3d::__getattr__ 0 1 431 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector3d::__getattr__(basic_string< char > const &attr_name) const;

1984 11 __setattr__ 0 4 2784 22 LVector3d::__setattr__ 0 1 432 259
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1985 4 zero 0 4 2784 15 LVector3d::zero 0 1 433 524
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

1986 6 unit_x 0 4 2784 17 LVector3d::unit_x 0 1 434 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

1987 6 unit_y 0 4 2784 17 LVector3d::unit_y 0 1 435 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

1988 6 unit_z 0 4 2784 17 LVector3d::unit_z 0 1 436 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

1989 6 get_xy 0 4 2784 17 LVector3d::get_xy 0 1 437 634
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

1990 6 get_xz 0 4 2784 17 LVector3d::get_xz 0 1 438 644
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

1991 6 get_yz 0 4 2784 17 LVector3d::get_yz 0 1 439 632
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

1992 10 operator - 0 68 2784 21 LVector3d::operator - 0 1 440 434
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3d LVector3d::operator -(void) const;

1993 10 operator + 0 4 2784 21 LVector3d::operator + 0 2 441 442 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

1994 10 operator - 0 4 2784 21 LVector3d::operator - 0 2 443 444 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

1995 5 cross 0 4 2784 16 LVector3d::cross 0 1 445 430
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

1996 7 project 0 4 2784 18 LVector3d::project 0 1 446 780
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

1997 9 angle_rad 0 4 2784 20 LVector3d::angle_rad 0 1 447 772
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

1998 9 angle_deg 0 4 2784 20 LVector3d::angle_deg 0 1 448 754
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

1999 16 signed_angle_rad 0 4 2784 27 LVector3d::signed_angle_rad 0 1 449 1098
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

2000 16 signed_angle_deg 0 4 2784 27 LVector3d::signed_angle_deg 0 1 450 1100
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

2001 18 relative_angle_rad 0 4 2784 29 LVector3d::relative_angle_rad 0 1 451 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

2002 18 relative_angle_deg 0 4 2784 29 LVector3d::relative_angle_deg 0 1 452 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

2003 10 operator * 0 4 2784 21 LVector3d::operator * 0 1 453 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator *(double scalar) const;

2004 10 operator / 0 4 2784 21 LVector3d::operator / 0 1 454 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator /(double scalar) const;

2005 2 up 0 4 2784 13 LVector3d::up 0 2 455 456 634
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = (CS_default));

2006 5 right 0 4 2784 16 LVector3d::right 0 2 457 458 596
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = (CS_default));

2007 7 forward 0 4 2784 18 LVector3d::forward 0 2 459 460 604
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (CS_default));

2008 4 down 0 4 2784 15 LVector3d::down 0 2 461 462 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = (CS_default));

2009 4 left 0 4 2784 15 LVector3d::left 0 2 463 464 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = (CS_default));

2010 4 back 0 4 2784 15 LVector3d::back 0 2 465 466 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = (CS_default));

2011 3 rfu 0 4 2784 14 LVector3d::rfu 0 2 467 468 980
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

2012 11 python_repr 0 4 2784 22 LVector3d::python_repr 0 1 469 220
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2013 14 get_class_type 0 4 2784 25 LVector3d::get_class_type 0 1 470 0
50
static TypeHandle LVector3d::get_class_type(void);

2014 10 ~LVector3d 0 4 2784 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

2015 8 LPoint3f 0 4 2785 18 LPoint3f::LPoint3f 0 4 471 472 473 474 1370
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
182
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);

2016 10 operator = 0 4 2785 20 LPoint3f::operator = 0 2 475 476 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

2017 11 __getattr__ 0 4 2785 21 LPoint3f::__getattr__ 0 1 477 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint3f::__getattr__(basic_string< char > const &attr_name) const;

2018 11 __setattr__ 0 4 2785 21 LPoint3f::__setattr__ 0 1 478 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2019 4 zero 0 4 2785 14 LPoint3f::zero 0 1 479 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

2020 6 unit_x 0 4 2785 16 LPoint3f::unit_x 0 1 480 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

2021 6 unit_y 0 4 2785 16 LPoint3f::unit_y 0 1 481 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

2022 6 unit_z 0 4 2785 16 LPoint3f::unit_z 0 1 482 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

2023 6 get_xy 0 4 2785 16 LPoint3f::get_xy 0 1 483 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

2024 6 get_xz 0 4 2785 16 LPoint3f::get_xz 0 1 484 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

2025 6 get_yz 0 4 2785 16 LPoint3f::get_yz 0 1 485 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

2026 10 operator - 0 68 2785 20 LPoint3f::operator - 0 1 486 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3f LPoint3f::operator -(void) const;

2027 10 operator + 0 4 2785 20 LPoint3f::operator + 0 2 487 488 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

2028 10 operator - 0 4 2785 20 LPoint3f::operator - 0 3 489 490 491 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

2029 5 cross 0 4 2785 15 LPoint3f::cross 0 1 492 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

2030 7 project 0 4 2785 17 LPoint3f::project 0 1 493 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

2031 10 operator * 0 4 2785 20 LPoint3f::operator * 0 1 494 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

2032 10 operator / 0 4 2785 20 LPoint3f::operator / 0 1 495 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

2033 6 origin 0 4 2785 16 LPoint3f::origin 0 2 496 497 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3f LPoint3f::origin(CoordinateSystem cs = (CS_default));

2034 3 rfu 0 4 2785 13 LPoint3f::rfu 0 2 498 499 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

2035 11 python_repr 0 4 2785 21 LPoint3f::python_repr 0 1 500 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2036 14 get_class_type 0 4 2785 24 LPoint3f::get_class_type 0 1 501 0
49
static TypeHandle LPoint3f::get_class_type(void);

2037 9 ~LPoint3f 0 4 2785 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

2038 8 LPoint3d 0 4 2786 18 LPoint3d::LPoint3d 0 4 502 503 504 505 2742
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);

2039 10 operator = 0 4 2786 20 LPoint3d::operator = 0 2 506 507 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

2040 11 __getattr__ 0 4 2786 21 LPoint3d::__getattr__ 0 1 508 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint3d::__getattr__(basic_string< char > const &attr_name) const;

2041 11 __setattr__ 0 4 2786 21 LPoint3d::__setattr__ 0 1 509 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2042 4 zero 0 4 2786 14 LPoint3d::zero 0 1 510 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

2043 6 unit_x 0 4 2786 16 LPoint3d::unit_x 0 1 511 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

2044 6 unit_y 0 4 2786 16 LPoint3d::unit_y 0 1 512 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

2045 6 unit_z 0 4 2786 16 LPoint3d::unit_z 0 1 513 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

2046 6 get_xy 0 4 2786 16 LPoint3d::get_xy 0 1 514 632
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

2047 6 get_xz 0 4 2786 16 LPoint3d::get_xz 0 1 515 642
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

2048 6 get_yz 0 4 2786 16 LPoint3d::get_yz 0 1 516 630
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

2049 10 operator - 0 68 2786 20 LPoint3d::operator - 0 1 517 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3d LPoint3d::operator -(void) const;

2050 10 operator + 0 4 2786 20 LPoint3d::operator + 0 2 518 519 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

2051 10 operator - 0 4 2786 20 LPoint3d::operator - 0 3 520 521 522 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

2052 5 cross 0 4 2786 15 LPoint3d::cross 0 1 523 422
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

2053 7 project 0 4 2786 17 LPoint3d::project 0 1 524 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

2054 10 operator * 0 4 2786 20 LPoint3d::operator * 0 1 525 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

2055 10 operator / 0 4 2786 20 LPoint3d::operator / 0 1 526 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

2056 6 origin 0 4 2786 16 LPoint3d::origin 0 2 527 528 931
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3d LPoint3d::origin(CoordinateSystem cs = (CS_default));

2057 3 rfu 0 4 2786 13 LPoint3d::rfu 0 2 529 530 768
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

2058 11 python_repr 0 4 2786 21 LPoint3d::python_repr 0 1 531 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2059 14 get_class_type 0 4 2786 24 LPoint3d::get_class_type 0 1 532 0
49
static TypeHandle LPoint3d::get_class_type(void);

2060 9 ~LPoint3d 0 4 2786 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

2061 10 LVecBase4f 0 4 2787 22 LVecBase4f::LVecBase4f 0 5 533 534 535 536 537 1617
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
271
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(UnalignedLVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);

2062 10 operator = 0 4 2787 22 LVecBase4f::operator = 0 3 538 539 540 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
203
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(UnalignedLVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

2063 12 operator new 0 4 2787 24 LVecBase4f::operator new 0 1 541 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

2064 15 operator delete 0 4 2787 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

2065 12 validate_ptr 0 4 2787 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

2066 4 zero 0 4 2787 16 LVecBase4f::zero 0 1 542 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

2067 6 unit_x 0 4 2787 18 LVecBase4f::unit_x 0 1 543 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

2068 6 unit_y 0 4 2787 18 LVecBase4f::unit_y 0 1 544 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

2069 6 unit_z 0 4 2787 18 LVecBase4f::unit_z 0 1 545 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

2070 6 unit_w 0 4 2787 18 LVecBase4f::unit_w 0 1 546 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

2071 11 ~LVecBase4f 0 4 2787 23 LVecBase4f::~LVecBase4f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

2072 10 __reduce__ 0 4 2787 22 LVecBase4f::__reduce__ 0 1 547 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4f::__reduce__(PyObject *self) const;

2073 11 __getattr__ 0 4 2787 23 LVecBase4f::__getattr__ 0 1 548 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase4f::__getattr__(basic_string< char > const &attr_name) const;

2074 11 __setattr__ 0 4 2787 23 LVecBase4f::__setattr__ 0 1 549 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2075 11 operator [] 0 4 2787 23 LVecBase4f::operator [] 0 2 550 551 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

2076 11 __setitem__ 0 4 2787 23 LVecBase4f::__setitem__ 0 1 552 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase4f::__setitem__(int i, float v);

2077 4 size 0 4 2787 16 LVecBase4f::size 0 1 553 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

2078 6 is_nan 0 4 2787 18 LVecBase4f::is_nan 0 1 554 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

2079 8 get_cell 0 4 2787 20 LVecBase4f::get_cell 0 1 555 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

2080 5 get_x 0 4 2787 17 LVecBase4f::get_x 0 1 556 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

2081 5 get_y 0 4 2787 17 LVecBase4f::get_y 0 1 557 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

2082 5 get_z 0 4 2787 17 LVecBase4f::get_z 0 1 558 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

2083 5 get_w 0 4 2787 17 LVecBase4f::get_w 0 1 559 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

2084 8 set_cell 0 4 2787 20 LVecBase4f::set_cell 0 1 560 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

2085 5 set_x 0 4 2787 17 LVecBase4f::set_x 0 1 561 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

2086 5 set_y 0 4 2787 17 LVecBase4f::set_y 0 1 562 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

2087 5 set_z 0 4 2787 17 LVecBase4f::set_z 0 1 563 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

2088 5 set_w 0 4 2787 17 LVecBase4f::set_w 0 1 564 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

2089 11 add_to_cell 0 4 2787 23 LVecBase4f::add_to_cell 0 1 565 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

2090 5 add_x 0 4 2787 17 LVecBase4f::add_x 0 1 566 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

2091 5 add_y 0 4 2787 17 LVecBase4f::add_y 0 1 567 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

2092 5 add_z 0 4 2787 17 LVecBase4f::add_z 0 1 568 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

2093 5 add_w 0 4 2787 17 LVecBase4f::add_w 0 1 569 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

2094 8 get_data 0 4 2787 20 LVecBase4f::get_data 0 1 570 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

2095 18 get_num_components 0 4 2787 30 LVecBase4f::get_num_components 0 1 571 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

2096 4 fill 0 4 2787 16 LVecBase4f::fill 0 1 572 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

2097 3 set 0 4 2787 15 LVecBase4f::set 0 1 573 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

2098 6 length 0 4 2787 18 LVecBase4f::length 0 1 574 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

2099 14 length_squared 0 4 2787 26 LVecBase4f::length_squared 0 1 575 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

2100 9 normalize 0 4 2787 21 LVecBase4f::normalize 0 1 576 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

2101 3 dot 0 4 2787 15 LVecBase4f::dot 0 1 577 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

2102 7 project 0 4 2787 19 LVecBase4f::project 0 1 578 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

2103 10 operator < 0 4 2787 22 LVecBase4f::operator < 0 1 579 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

2104 11 operator == 0 4 2787 23 LVecBase4f::operator == 0 1 580 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

2105 11 operator != 0 4 2787 23 LVecBase4f::operator != 0 1 581 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

2106 10 compare_to 0 4 2787 22 LVecBase4f::compare_to 0 2 582 583 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

2107 8 get_hash 0 4 2787 20 LVecBase4f::get_hash 0 2 584 585 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

2108 8 add_hash 0 4 2787 20 LVecBase4f::add_hash 0 2 586 587 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

2109 10 operator - 0 68 2787 22 LVecBase4f::operator - 0 1 588 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4f LVecBase4f::operator -(void) const;

2110 10 operator + 0 4 2787 22 LVecBase4f::operator + 0 1 589 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

2111 10 operator - 0 4 2787 22 LVecBase4f::operator - 0 1 590 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

2112 10 operator * 0 4 2787 22 LVecBase4f::operator * 0 1 591 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

2113 10 operator / 0 4 2787 22 LVecBase4f::operator / 0 1 592 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

2114 11 operator += 0 4 2787 23 LVecBase4f::operator += 0 1 593 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

2115 11 operator -= 0 4 2787 23 LVecBase4f::operator -= 0 1 594 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

2116 11 operator *= 0 4 2787 23 LVecBase4f::operator *= 0 1 595 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator *=(float scalar);

2117 11 operator /= 0 4 2787 23 LVecBase4f::operator /= 0 1 596 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator /=(float scalar);

2118 4 fmax 0 4 2787 16 LVecBase4f::fmax 0 1 597 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other);

2119 4 fmin 0 4 2787 16 LVecBase4f::fmin 0 1 598 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other);

2120 12 almost_equal 0 4 2787 24 LVecBase4f::almost_equal 0 2 599 600 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

2121 6 output 0 4 2787 18 LVecBase4f::output 0 1 601 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

2122 11 python_repr 0 4 2787 23 LVecBase4f::python_repr 0 1 602 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2123 13 generate_hash 0 4 2787 25 LVecBase4f::generate_hash 0 2 603 604 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2124 20 write_datagram_fixed 0 4 2787 32 LVecBase4f::write_datagram_fixed 0 1 605 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4f::write_datagram_fixed(Datagram &destination) const;

2125 19 read_datagram_fixed 0 4 2787 31 LVecBase4f::read_datagram_fixed 0 1 606 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4f::read_datagram_fixed(DatagramIterator &source);

2126 14 write_datagram 0 4 2787 26 LVecBase4f::write_datagram 0 1 607 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::write_datagram(Datagram &destination) const;

2127 13 read_datagram 0 4 2787 25 LVecBase4f::read_datagram 0 1 608 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::read_datagram(DatagramIterator &source);

2128 14 get_class_type 0 4 2787 26 LVecBase4f::get_class_type 0 1 609 0
51
static TypeHandle LVecBase4f::get_class_type(void);

2129 19 UnalignedLVecBase4f 0 4 2788 40 UnalignedLVecBase4f::UnalignedLVecBase4f 0 4 610 611 612 613 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
294
inline UnalignedLVecBase4f::UnalignedLVecBase4f(void);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(LVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(UnalignedLVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(float x, float y, float z, float w);

2130 10 operator = 0 4 2788 31 UnalignedLVecBase4f::operator = 0 2 614 615 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(LVecBase4f const &copy);
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(UnalignedLVecBase4f const &copy);

2131 3 set 0 4 2788 24 UnalignedLVecBase4f::set 0 1 616 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void UnalignedLVecBase4f::set(float x, float y, float z, float w);

2132 11 operator [] 0 4 2788 32 UnalignedLVecBase4f::operator [] 0 2 617 618 468
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
inline float UnalignedLVecBase4f::operator [](int i) const;
inline float &UnalignedLVecBase4f::operator [](int i);

2133 11 __setitem__ 0 4 2788 32 UnalignedLVecBase4f::__setitem__ 0 1 619 227
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void UnalignedLVecBase4f::__setitem__(int i, float v);

2134 4 size 0 4 2788 25 UnalignedLVecBase4f::size 0 1 620 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4f::size(void);

2135 8 get_data 0 4 2788 29 UnalignedLVecBase4f::get_data 0 1 621 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
62
inline float const *UnalignedLVecBase4f::get_data(void) const;

2136 18 get_num_components 0 4 2788 39 UnalignedLVecBase4f::get_num_components 0 1 622 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4f::get_num_components(void) const;

2137 14 get_class_type 0 4 2788 35 UnalignedLVecBase4f::get_class_type 0 1 623 0
60
static TypeHandle UnalignedLVecBase4f::get_class_type(void);

2138 20 ~UnalignedLVecBase4f 0 4 2788 41 UnalignedLVecBase4f::~UnalignedLVecBase4f 0 0 0
48
UnalignedLVecBase4f::~UnalignedLVecBase4f(void);

2139 10 LVecBase4d 0 4 2789 22 LVecBase4d::LVecBase4d 0 5 624 625 626 627 628 3236
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
276
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(UnalignedLVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);

2140 10 operator = 0 4 2789 22 LVecBase4d::operator = 0 3 629 630 631 1408
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(UnalignedLVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

2141 12 operator new 0 4 2789 24 LVecBase4d::operator new 0 1 632 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

2142 15 operator delete 0 4 2789 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

2143 12 validate_ptr 0 4 2789 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

2144 4 zero 0 4 2789 16 LVecBase4d::zero 0 1 633 526
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

2145 6 unit_x 0 4 2789 18 LVecBase4d::unit_x 0 1 634 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

2146 6 unit_y 0 4 2789 18 LVecBase4d::unit_y 0 1 635 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

2147 6 unit_z 0 4 2789 18 LVecBase4d::unit_z 0 1 636 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

2148 6 unit_w 0 4 2789 18 LVecBase4d::unit_w 0 1 637 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

2149 11 ~LVecBase4d 0 4 2789 23 LVecBase4d::~LVecBase4d 0 0 442
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

2150 10 __reduce__ 0 4 2789 22 LVecBase4d::__reduce__ 0 1 638 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4d::__reduce__(PyObject *self) const;

2151 11 __getattr__ 0 4 2789 23 LVecBase4d::__getattr__ 0 1 639 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase4d::__getattr__(basic_string< char > const &attr_name) const;

2152 11 __setattr__ 0 4 2789 23 LVecBase4d::__setattr__ 0 1 640 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2153 11 operator [] 0 4 2789 23 LVecBase4d::operator [] 0 2 641 642 914
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

2154 11 __setitem__ 0 4 2789 23 LVecBase4d::__setitem__ 0 1 643 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4d::__setitem__(int i, double v);

2155 4 size 0 4 2789 16 LVecBase4d::size 0 1 644 550
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

2156 6 is_nan 0 4 2789 18 LVecBase4d::is_nan 0 1 645 624
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

2157 8 get_cell 0 4 2789 20 LVecBase4d::get_cell 0 1 646 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

2158 5 get_x 0 4 2789 17 LVecBase4d::get_x 0 1 647 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

2159 5 get_y 0 4 2789 17 LVecBase4d::get_y 0 1 648 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

2160 5 get_z 0 4 2789 17 LVecBase4d::get_z 0 1 649 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

2161 5 get_w 0 4 2789 17 LVecBase4d::get_w 0 1 650 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

2162 8 set_cell 0 4 2789 20 LVecBase4d::set_cell 0 1 651 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

2163 5 set_x 0 4 2789 17 LVecBase4d::set_x 0 1 652 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

2164 5 set_y 0 4 2789 17 LVecBase4d::set_y 0 1 653 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

2165 5 set_z 0 4 2789 17 LVecBase4d::set_z 0 1 654 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

2166 5 set_w 0 4 2789 17 LVecBase4d::set_w 0 1 655 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

2167 11 add_to_cell 0 4 2789 23 LVecBase4d::add_to_cell 0 1 656 600
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

2168 5 add_x 0 4 2789 17 LVecBase4d::add_x 0 1 657 588
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

2169 5 add_y 0 4 2789 17 LVecBase4d::add_y 0 1 658 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

2170 5 add_z 0 4 2789 17 LVecBase4d::add_z 0 1 659 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

2171 5 add_w 0 4 2789 17 LVecBase4d::add_w 0 1 660 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

2172 8 get_data 0 4 2789 20 LVecBase4d::get_data 0 1 661 804
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

2173 18 get_num_components 0 4 2789 30 LVecBase4d::get_num_components 0 1 662 562
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

2174 4 fill 0 4 2789 16 LVecBase4d::fill 0 1 663 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

2175 3 set 0 4 2789 15 LVecBase4d::set 0 1 664 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

2176 6 length 0 4 2789 18 LVecBase4d::length 0 1 665 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

2177 14 length_squared 0 4 2789 26 LVecBase4d::length_squared 0 1 666 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

2178 9 normalize 0 4 2789 21 LVecBase4d::normalize 0 1 667 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

2179 3 dot 0 4 2789 15 LVecBase4d::dot 0 1 668 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

2180 7 project 0 4 2789 19 LVecBase4d::project 0 1 669 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

2181 10 operator < 0 4 2789 22 LVecBase4d::operator < 0 1 670 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

2182 11 operator == 0 4 2789 23 LVecBase4d::operator == 0 1 671 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

2183 11 operator != 0 4 2789 23 LVecBase4d::operator != 0 1 672 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

2184 10 compare_to 0 4 2789 22 LVecBase4d::compare_to 0 2 673 674 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

2185 8 get_hash 0 4 2789 20 LVecBase4d::get_hash 0 2 675 676 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

2186 8 add_hash 0 4 2789 20 LVecBase4d::add_hash 0 2 677 678 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

2187 10 operator - 0 68 2789 22 LVecBase4d::operator - 0 1 679 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4d LVecBase4d::operator -(void) const;

2188 10 operator + 0 4 2789 22 LVecBase4d::operator + 0 1 680 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

2189 10 operator - 0 4 2789 22 LVecBase4d::operator - 0 1 681 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

2190 10 operator * 0 4 2789 22 LVecBase4d::operator * 0 1 682 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

2191 10 operator / 0 4 2789 22 LVecBase4d::operator / 0 1 683 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

2192 11 operator += 0 4 2789 23 LVecBase4d::operator += 0 1 684 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

2193 11 operator -= 0 4 2789 23 LVecBase4d::operator -= 0 1 685 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

2194 11 operator *= 0 4 2789 23 LVecBase4d::operator *= 0 1 686 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator *=(double scalar);

2195 11 operator /= 0 4 2789 23 LVecBase4d::operator /= 0 1 687 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator /=(double scalar);

2196 4 fmax 0 4 2789 16 LVecBase4d::fmax 0 1 688 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other);

2197 4 fmin 0 4 2789 16 LVecBase4d::fmin 0 1 689 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other);

2198 12 almost_equal 0 4 2789 24 LVecBase4d::almost_equal 0 2 690 691 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

2199 6 output 0 4 2789 18 LVecBase4d::output 0 1 692 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

2200 11 python_repr 0 4 2789 23 LVecBase4d::python_repr 0 1 693 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2201 13 generate_hash 0 4 2789 25 LVecBase4d::generate_hash 0 2 694 695 1094
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2202 20 write_datagram_fixed 0 4 2789 32 LVecBase4d::write_datagram_fixed 0 1 696 1286
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4d::write_datagram_fixed(Datagram &destination) const;

2203 19 read_datagram_fixed 0 4 2789 31 LVecBase4d::read_datagram_fixed 0 1 697 698
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4d::read_datagram_fixed(DatagramIterator &source);

2204 14 write_datagram 0 4 2789 26 LVecBase4d::write_datagram 0 1 698 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::write_datagram(Datagram &destination) const;

2205 13 read_datagram 0 4 2789 25 LVecBase4d::read_datagram 0 1 699 562
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4d::read_datagram(DatagramIterator &source);

2206 14 get_class_type 0 4 2789 26 LVecBase4d::get_class_type 0 1 700 0
51
static TypeHandle LVecBase4d::get_class_type(void);

2207 19 UnalignedLVecBase4d 0 4 2790 40 UnalignedLVecBase4d::UnalignedLVecBase4d 0 4 701 702 703 704 1866
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
298
inline UnalignedLVecBase4d::UnalignedLVecBase4d(void);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(LVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(UnalignedLVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(double x, double y, double z, double w);

2208 10 operator = 0 4 2790 31 UnalignedLVecBase4d::operator = 0 2 705 706 966
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(LVecBase4d const &copy);
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(UnalignedLVecBase4d const &copy);

2209 3 set 0 4 2790 24 UnalignedLVecBase4d::set 0 1 707 446
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline void UnalignedLVecBase4d::set(double x, double y, double z, double w);

2210 11 operator [] 0 4 2790 32 UnalignedLVecBase4d::operator [] 0 2 708 709 938
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline double UnalignedLVecBase4d::operator [](int i) const;
inline double &UnalignedLVecBase4d::operator [](int i);

2211 11 __setitem__ 0 4 2790 32 UnalignedLVecBase4d::__setitem__ 0 1 710 227
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void UnalignedLVecBase4d::__setitem__(int i, double v);

2212 4 size 0 4 2790 25 UnalignedLVecBase4d::size 0 1 711 562
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4d::size(void);

2213 8 get_data 0 4 2790 29 UnalignedLVecBase4d::get_data 0 1 712 818
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
63
inline double const *UnalignedLVecBase4d::get_data(void) const;

2214 18 get_num_components 0 4 2790 39 UnalignedLVecBase4d::get_num_components 0 1 713 568
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4d::get_num_components(void) const;

2215 14 get_class_type 0 4 2790 35 UnalignedLVecBase4d::get_class_type 0 1 714 0
60
static TypeHandle UnalignedLVecBase4d::get_class_type(void);

2216 20 ~UnalignedLVecBase4d 0 4 2790 41 UnalignedLVecBase4d::~UnalignedLVecBase4d 0 0 0
48
UnalignedLVecBase4d::~UnalignedLVecBase4d(void);

2217 9 LVector4f 0 4 2791 20 LVector4f::LVector4f 0 4 715 716 717 718 1375
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
199
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);

2218 10 operator = 0 4 2791 21 LVector4f::operator = 0 2 719 720 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

2219 11 __getattr__ 0 4 2791 22 LVector4f::__getattr__ 0 1 721 261
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector4f::__getattr__(basic_string< char > const &attr_name) const;

2220 11 __setattr__ 0 4 2791 22 LVector4f::__setattr__ 0 1 722 259
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2221 4 zero 0 4 2791 15 LVector4f::zero 0 1 723 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2222 6 unit_x 0 4 2791 17 LVector4f::unit_x 0 1 724 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2223 6 unit_y 0 4 2791 17 LVector4f::unit_y 0 1 725 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2224 6 unit_z 0 4 2791 17 LVector4f::unit_z 0 1 726 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2225 6 unit_w 0 4 2791 17 LVector4f::unit_w 0 1 727 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2226 10 operator - 0 68 2791 21 LVector4f::operator - 0 1 728 213
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4f LVector4f::operator -(void) const;

2227 10 operator + 0 4 2791 21 LVector4f::operator + 0 2 729 730 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2228 10 operator - 0 4 2791 21 LVector4f::operator - 0 2 731 732 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2229 10 operator * 0 4 2791 21 LVector4f::operator * 0 1 733 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator *(float scalar) const;

2230 10 operator / 0 4 2791 21 LVector4f::operator / 0 1 734 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator /(float scalar) const;

2231 7 project 0 4 2791 18 LVector4f::project 0 1 735 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2232 11 python_repr 0 4 2791 22 LVector4f::python_repr 0 1 736 220
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2233 14 get_class_type 0 4 2791 25 LVector4f::get_class_type 0 1 737 0
50
static TypeHandle LVector4f::get_class_type(void);

2234 10 ~LVector4f 0 4 2791 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2235 9 LVector4d 0 4 2792 20 LVector4d::LVector4d 0 4 738 739 740 741 2752
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);

2236 10 operator = 0 4 2792 21 LVector4d::operator = 0 2 742 743 914
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2237 11 __getattr__ 0 4 2792 22 LVector4d::__getattr__ 0 1 744 261
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector4d::__getattr__(basic_string< char > const &attr_name) const;

2238 11 __setattr__ 0 4 2792 22 LVector4d::__setattr__ 0 1 745 259
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2239 4 zero 0 4 2792 15 LVector4d::zero 0 1 746 518
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2240 6 unit_x 0 4 2792 17 LVector4d::unit_x 0 1 747 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2241 6 unit_y 0 4 2792 17 LVector4d::unit_y 0 1 748 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2242 6 unit_z 0 4 2792 17 LVector4d::unit_z 0 1 749 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2243 6 unit_w 0 4 2792 17 LVector4d::unit_w 0 1 750 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2244 10 operator - 0 68 2792 21 LVector4d::operator - 0 1 751 428
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4d LVector4d::operator -(void) const;

2245 10 operator + 0 4 2792 21 LVector4d::operator + 0 2 752 753 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2246 10 operator - 0 4 2792 21 LVector4d::operator - 0 2 754 755 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2247 10 operator * 0 4 2792 21 LVector4d::operator * 0 1 756 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator *(double scalar) const;

2248 10 operator / 0 4 2792 21 LVector4d::operator / 0 1 757 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator /(double scalar) const;

2249 7 project 0 4 2792 18 LVector4d::project 0 1 758 780
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2250 11 python_repr 0 4 2792 22 LVector4d::python_repr 0 1 759 220
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2251 14 get_class_type 0 4 2792 25 LVector4d::get_class_type 0 1 760 0
50
static TypeHandle LVector4d::get_class_type(void);

2252 10 ~LVector4d 0 4 2792 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2253 8 LPoint4f 0 4 2793 18 LPoint4f::LPoint4f 0 4 761 762 763 764 1370
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
191
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);

2254 10 operator = 0 4 2793 20 LPoint4f::operator = 0 2 765 766 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

2255 11 __getattr__ 0 4 2793 21 LPoint4f::__getattr__ 0 1 767 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint4f::__getattr__(basic_string< char > const &attr_name) const;

2256 11 __setattr__ 0 4 2793 21 LPoint4f::__setattr__ 0 1 768 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2257 4 zero 0 4 2793 14 LPoint4f::zero 0 1 769 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

2258 6 unit_x 0 4 2793 16 LPoint4f::unit_x 0 1 770 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

2259 6 unit_y 0 4 2793 16 LPoint4f::unit_y 0 1 771 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

2260 6 unit_z 0 4 2793 16 LPoint4f::unit_z 0 1 772 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

2261 6 unit_w 0 4 2793 16 LPoint4f::unit_w 0 1 773 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

2262 10 operator - 0 68 2793 20 LPoint4f::operator - 0 1 774 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4f LPoint4f::operator -(void) const;

2263 10 operator + 0 4 2793 20 LPoint4f::operator + 0 2 775 776 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

2264 10 operator - 0 4 2793 20 LPoint4f::operator - 0 3 777 778 779 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

2265 10 operator * 0 4 2793 20 LPoint4f::operator * 0 1 780 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

2266 10 operator / 0 4 2793 20 LPoint4f::operator / 0 1 781 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

2267 7 project 0 4 2793 17 LPoint4f::project 0 1 782 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

2268 11 python_repr 0 4 2793 21 LPoint4f::python_repr 0 1 783 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2269 14 get_class_type 0 4 2793 24 LPoint4f::get_class_type 0 1 784 0
49
static TypeHandle LPoint4f::get_class_type(void);

2270 9 ~LPoint4f 0 4 2793 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

2271 8 LPoint4d 0 4 2794 18 LPoint4d::LPoint4d 0 4 785 786 787 788 2742
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
196
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);

2272 10 operator = 0 4 2794 20 LPoint4d::operator = 0 2 789 790 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

2273 11 __getattr__ 0 4 2794 21 LPoint4d::__getattr__ 0 1 791 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint4d::__getattr__(basic_string< char > const &attr_name) const;

2274 11 __setattr__ 0 4 2794 21 LPoint4d::__setattr__ 0 1 792 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2275 4 zero 0 4 2794 14 LPoint4d::zero 0 1 793 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

2276 6 unit_x 0 4 2794 16 LPoint4d::unit_x 0 1 794 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

2277 6 unit_y 0 4 2794 16 LPoint4d::unit_y 0 1 795 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

2278 6 unit_z 0 4 2794 16 LPoint4d::unit_z 0 1 796 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

2279 6 unit_w 0 4 2794 16 LPoint4d::unit_w 0 1 797 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

2280 10 operator - 0 68 2794 20 LPoint4d::operator - 0 1 798 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4d LPoint4d::operator -(void) const;

2281 10 operator + 0 4 2794 20 LPoint4d::operator + 0 2 799 800 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

2282 10 operator - 0 4 2794 20 LPoint4d::operator - 0 3 801 802 803 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

2283 10 operator * 0 4 2794 20 LPoint4d::operator * 0 1 804 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

2284 10 operator / 0 4 2794 20 LPoint4d::operator / 0 1 805 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

2285 7 project 0 4 2794 17 LPoint4d::project 0 1 806 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

2286 11 python_repr 0 4 2794 21 LPoint4d::python_repr 0 1 807 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2287 14 get_class_type 0 4 2794 24 LPoint4d::get_class_type 0 1 808 0
49
static TypeHandle LPoint4d::get_class_type(void);

2288 9 ~LPoint4d 0 4 2794 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

2289 11 operator [] 0 4 2796 27 LMatrix3f::Row::operator [] 0 2 918 919 910
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

2290 11 __setitem__ 0 4 2796 27 LMatrix3f::Row::__setitem__ 0 1 920 712
// Filename: lmatrix3_ext_src.I
// Created by:  rdb (02Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

2291 4 size 0 4 2796 20 LMatrix3f::Row::size 0 1 921 550
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

2292 4 ~Row 0 4 2796 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

2293 11 operator [] 0 4 2797 28 LMatrix3f::CRow::operator [] 0 1 922 456
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix3f::CRow::operator [](int i) const;

2294 4 size 0 4 2797 21 LMatrix3f::CRow::size 0 1 923 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

2295 5 ~CRow 0 4 2797 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

2296 9 LMatrix3f 0 4 2795 20 LMatrix3f::LMatrix3f 0 3 809 810 811 1356
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2297 10 operator = 0 4 2795 21 LMatrix3f::operator = 0 2 812 813 938
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

2298 12 operator new 0 4 2795 23 LMatrix3f::operator new 0 1 814 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

2299 15 operator delete 0 4 2795 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

2300 12 validate_ptr 0 4 2795 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

2301 10 __reduce__ 0 4 2795 21 LMatrix3f::__reduce__ 0 1 815 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3f::__reduce__(PyObject *self) const;

2302 4 fill 0 4 2795 15 LMatrix3f::fill 0 1 816 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

2303 3 set 0 4 2795 14 LMatrix3f::set 0 1 817 426
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2304 7 set_row 0 4 2795 18 LMatrix3f::set_row 0 2 818 819 1274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

2305 7 set_col 0 4 2795 18 LMatrix3f::set_col 0 2 820 821 1292
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

2306 7 get_row 0 4 2795 18 LMatrix3f::get_row 0 2 822 823 1245
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

2307 7 get_col 0 4 2795 18 LMatrix3f::get_col 0 1 824 612
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

2308 8 get_row2 0 4 2795 19 LMatrix3f::get_row2 0 1 825 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

2309 8 get_col2 0 4 2795 19 LMatrix3f::get_col2 0 1 826 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

2310 11 operator () 0 4 2795 22 LMatrix3f::operator () 0 2 827 828 910
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

2311 11 operator [] 0 4 2795 22 LMatrix3f::operator [] 0 2 829 830 910
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

2312 4 size 0 4 2795 15 LMatrix3f::size 0 1 831 534
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

2313 6 is_nan 0 4 2795 17 LMatrix3f::is_nan 0 1 832 622
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

2314 8 get_cell 0 4 2795 19 LMatrix3f::get_cell 0 1 833 524
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

2315 8 set_cell 0 4 2795 19 LMatrix3f::set_cell 0 1 834 524
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

2316 8 get_data 0 4 2795 19 LMatrix3f::get_data 0 1 835 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

2317 18 get_num_components 0 4 2795 29 LMatrix3f::get_num_components 0 1 836 560
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

2318 10 operator < 0 4 2795 21 LMatrix3f::operator < 0 1 837 1010
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

2319 11 operator == 0 4 2795 22 LMatrix3f::operator == 0 1 838 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

2320 11 operator != 0 4 2795 22 LMatrix3f::operator != 0 1 839 458
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

2321 10 compare_to 0 4 2795 21 LMatrix3f::compare_to 0 2 840 841 1148
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

2322 8 get_hash 0 4 2795 19 LMatrix3f::get_hash 0 2 842 843 1030
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

2323 8 add_hash 0 4 2795 19 LMatrix3f::add_hash 0 2 844 845 1030
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

2324 5 xform 0 4 2795 16 LMatrix3f::xform 0 1 846 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

2325 11 xform_point 0 4 2795 22 LMatrix3f::xform_point 0 1 847 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

2326 9 xform_vec 0 4 2795 20 LMatrix3f::xform_vec 0 2 848 849 1700
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

2327 17 xform_vec_general 0 4 2795 28 LMatrix3f::xform_vec_general 0 1 850 780
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

2328 14 xform_in_place 0 4 2795 25 LMatrix3f::xform_in_place 0 1 851 532
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3f::xform_in_place(LVecBase3f &v) const;

2329 20 xform_point_in_place 0 4 2795 31 LMatrix3f::xform_point_in_place 0 1 852 780
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3f::xform_point_in_place(LVecBase2f &v) const;

2330 18 xform_vec_in_place 0 4 2795 29 LMatrix3f::xform_vec_in_place 0 2 853 854 1610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3f::xform_vec_in_place(LVecBase2f &v) const;
inline void LMatrix3f::xform_vec_in_place(LVecBase3f &v) const;

2331 26 xform_vec_general_in_place 0 4 2795 37 LMatrix3f::xform_vec_general_in_place 0 1 855 718
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3f::xform_vec_general_in_place(LVecBase3f &v) const;

2332 8 multiply 0 4 2795 19 LMatrix3f::multiply 0 1 856 79
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

2333 10 operator * 0 4 2795 21 LMatrix3f::operator * 0 2 857 858 902
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

2334 10 operator / 0 4 2795 21 LMatrix3f::operator / 0 1 859 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

2335 11 operator += 0 4 2795 22 LMatrix3f::operator += 0 1 860 558
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

2336 11 operator -= 0 4 2795 22 LMatrix3f::operator -= 0 1 861 564
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

2337 11 operator *= 0 4 2795 22 LMatrix3f::operator *= 0 2 862 863 964
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

2338 11 operator /= 0 4 2795 22 LMatrix3f::operator /= 0 1 864 510
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

2339 11 determinant 0 4 2795 22 LMatrix3f::determinant 0 1 865 520
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

2340 14 transpose_from 0 4 2795 25 LMatrix3f::transpose_from 0 1 866 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

2341 18 transpose_in_place 0 4 2795 29 LMatrix3f::transpose_in_place 0 1 867 456
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

2342 11 invert_from 0 4 2795 22 LMatrix3f::invert_from 0 1 868 1618
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

2343 15 invert_in_place 0 4 2795 26 LMatrix3f::invert_in_place 0 1 869 730
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

2344 21 invert_transpose_from 0 4 2795 32 LMatrix3f::invert_transpose_from 0 2 870 871 1398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

2345 9 ident_mat 0 4 2795 20 LMatrix3f::ident_mat 0 1 872 784
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

2346 17 set_translate_mat 0 4 2795 28 LMatrix3f::set_translate_mat 0 1 873 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

2347 14 set_rotate_mat 0 4 2795 25 LMatrix3f::set_rotate_mat 0 3 874 875 876 1142
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
156
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2348 13 set_scale_mat 0 4 2795 24 LMatrix3f::set_scale_mat 0 2 877 878 1290
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

2349 13 translate_mat 0 4 2795 24 LMatrix3f::translate_mat 0 2 879 880 1218
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

2350 10 rotate_mat 0 4 2795 21 LMatrix3f::rotate_mat 0 3 881 882 883 1344
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
179
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2351 9 scale_mat 0 4 2795 20 LMatrix3f::scale_mat 0 4 884 885 886 887 2558
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

2352 23 set_rotate_mat_normaxis 0 4 2795 34 LMatrix3f::set_rotate_mat_normaxis 0 2 888 889 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2353 19 rotate_mat_normaxis 0 4 2795 30 LMatrix3f::rotate_mat_normaxis 0 2 890 891 818
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2354 13 set_shear_mat 0 4 2795 24 LMatrix3f::set_shear_mat 0 2 892 893 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2355 9 shear_mat 0 4 2795 20 LMatrix3f::shear_mat 0 4 894 895 896 897 1290
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2356 19 set_scale_shear_mat 0 4 2795 30 LMatrix3f::set_scale_shear_mat 0 2 898 899 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2357 15 scale_shear_mat 0 4 2795 26 LMatrix3f::scale_shear_mat 0 4 900 901 902 903 1242
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2358 11 convert_mat 0 4 2795 22 LMatrix3f::convert_mat 0 1 904 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2359 12 almost_equal 0 4 2795 23 LMatrix3f::almost_equal 0 2 905 906 1157
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

2360 6 output 0 4 2795 17 LMatrix3f::output 0 1 907 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

2361 5 write 0 4 2795 16 LMatrix3f::write 0 2 908 909 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

2362 11 python_repr 0 4 2795 22 LMatrix3f::python_repr 0 1 910 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2363 13 generate_hash 0 4 2795 24 LMatrix3f::generate_hash 0 2 911 912 817
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
161
inline void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2364 20 write_datagram_fixed 0 4 2795 31 LMatrix3f::write_datagram_fixed 0 1 913 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write_datagram_fixed(Datagram &destination) const;

2365 19 read_datagram_fixed 0 4 2795 30 LMatrix3f::read_datagram_fixed 0 1 914 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::read_datagram_fixed(DatagramIterator &scan);

2366 14 write_datagram 0 4 2795 25 LMatrix3f::write_datagram 0 1 915 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::write_datagram(Datagram &destination) const;

2367 13 read_datagram 0 4 2795 24 LMatrix3f::read_datagram 0 1 916 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3f::read_datagram(DatagramIterator &source);

2368 14 get_class_type 0 4 2795 25 LMatrix3f::get_class_type 0 1 917 0
50
static TypeHandle LMatrix3f::get_class_type(void);

2369 10 ~LMatrix3f 0 4 2795 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

2370 9 transpose 0 1 0 9 transpose 0 4 1486 1487 1488 1489 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

2371 6 invert 0 1 0 6 invert 0 6 1490 1491 1492 1493 1494 1495 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

2372 11 operator [] 0 4 2799 27 LMatrix4f::Row::operator [] 0 2 1041 1042 1366
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

2373 11 __setitem__ 0 4 2799 27 LMatrix4f::Row::__setitem__ 0 1 1043 712
// Filename: lmatrix4_ext_src.I
// Created by:  rdb (02Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

2374 4 size 0 4 2799 20 LMatrix4f::Row::size 0 1 1044 817
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

2375 4 ~Row 0 4 2799 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

2376 11 operator [] 0 4 2800 28 LMatrix4f::CRow::operator [] 0 1 1045 685
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix4f::CRow::operator [](int i) const;

2377 4 size 0 4 2800 21 LMatrix4f::CRow::size 0 1 1046 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

2378 5 ~CRow 0 4 2800 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

2379 9 LMatrix4f 0 4 2798 20 LMatrix4f::LMatrix4f 0 6 924 925 926 927 928 929 4314
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
487
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(UnalignedLMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

2380 10 operator = 0 4 2798 21 LMatrix4f::operator = 0 3 930 931 932 2095
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
197
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(UnalignedLMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

2381 12 operator new 0 4 2798 23 LMatrix4f::operator new 0 1 933 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

2382 15 operator delete 0 4 2798 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

2383 12 validate_ptr 0 4 2798 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

2384 10 __reduce__ 0 4 2798 21 LMatrix4f::__reduce__ 0 1 934 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4f::__reduce__(PyObject *self) const;

2385 4 fill 0 4 2798 15 LMatrix4f::fill 0 1 935 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

2386 3 set 0 4 2798 14 LMatrix4f::set 0 1 936 631
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2387 11 set_upper_3 0 4 2798 22 LMatrix4f::set_upper_3 0 1 937 792
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

2388 11 get_upper_3 0 4 2798 22 LMatrix4f::get_upper_3 0 1 938 807
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

2389 7 set_row 0 4 2798 18 LMatrix4f::set_row 0 2 939 940 1834
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

2390 7 set_col 0 4 2798 18 LMatrix4f::set_col 0 2 941 942 1843
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

2391 7 get_row 0 4 2798 18 LMatrix4f::get_row 0 2 943 944 1816
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

2392 7 get_col 0 4 2798 18 LMatrix4f::get_col 0 1 945 904
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

2393 8 get_row3 0 4 2798 19 LMatrix4f::get_row3 0 2 946 947 1960
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

2394 8 get_col3 0 4 2798 19 LMatrix4f::get_col3 0 1 948 976
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

2395 11 operator () 0 4 2798 22 LMatrix4f::operator () 0 2 949 950 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

2396 11 operator [] 0 4 2798 22 LMatrix4f::operator [] 0 2 951 952 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

2397 4 size 0 4 2798 15 LMatrix4f::size 0 1 953 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

2398 6 is_nan 0 4 2798 17 LMatrix4f::is_nan 0 1 954 925
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

2399 8 get_cell 0 4 2798 19 LMatrix4f::get_cell 0 1 955 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

2400 8 set_cell 0 4 2798 19 LMatrix4f::set_cell 0 1 956 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

2401 8 get_data 0 4 2798 19 LMatrix4f::get_data 0 1 957 1198
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

2402 18 get_num_components 0 4 2798 29 LMatrix4f::get_num_components 0 1 958 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

2403 5 begin 0 4 2798 16 LMatrix4f::begin 0 2 959 960 1906
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

2404 3 end 0 4 2798 14 LMatrix4f::end 0 2 961 962 1894
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

2405 10 operator < 0 4 2798 21 LMatrix4f::operator < 0 1 963 1507
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

2406 11 operator == 0 4 2798 22 LMatrix4f::operator == 0 1 964 673
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

2407 11 operator != 0 4 2798 22 LMatrix4f::operator != 0 1 965 679
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

2408 10 compare_to 0 4 2798 21 LMatrix4f::compare_to 0 2 966 967 1458
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

2409 8 get_hash 0 4 2798 19 LMatrix4f::get_hash 0 2 968 969 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

2410 8 add_hash 0 4 2798 19 LMatrix4f::add_hash 0 2 970 971 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

2411 5 xform 0 4 2798 16 LMatrix4f::xform 0 1 972 922
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

2412 11 xform_point 0 4 2798 22 LMatrix4f::xform_point 0 1 973 1204
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

2413 9 xform_vec 0 4 2798 20 LMatrix4f::xform_vec 0 1 974 1210
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

2414 17 xform_vec_general 0 4 2798 28 LMatrix4f::xform_vec_general 0 1 975 1162
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

2415 14 xform_in_place 0 4 2798 25 LMatrix4f::xform_in_place 0 1 976 949
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4f::xform_in_place(LVecBase4f &v) const;

2416 20 xform_point_in_place 0 4 2798 31 LMatrix4f::xform_point_in_place 0 1 977 1162
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4f::xform_point_in_place(LVecBase3f &v) const;

2417 18 xform_vec_in_place 0 4 2798 29 LMatrix4f::xform_vec_in_place 0 1 978 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::xform_vec_in_place(LVecBase3f &v) const;

2418 26 xform_vec_general_in_place 0 4 2798 37 LMatrix4f::xform_vec_general_in_place 0 1 979 1069
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4f::xform_vec_general_in_place(LVecBase3f &v) const;

2419 8 multiply 0 4 2798 19 LMatrix4f::multiply 0 1 980 106
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

2420 10 operator * 0 4 2798 21 LMatrix4f::operator * 0 2 981 982 1336
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

2421 10 operator / 0 4 2798 21 LMatrix4f::operator / 0 1 983 667
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

2422 11 operator += 0 4 2798 22 LMatrix4f::operator += 0 1 984 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

2423 11 operator -= 0 4 2798 22 LMatrix4f::operator -= 0 1 985 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

2424 11 operator *= 0 4 2798 22 LMatrix4f::operator *= 0 2 986 987 1342
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

2425 11 operator /= 0 4 2798 22 LMatrix4f::operator /= 0 1 988 670
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

2426 14 transpose_from 0 4 2798 25 LMatrix4f::transpose_from 0 1 989 664
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

2427 18 transpose_in_place 0 4 2798 29 LMatrix4f::transpose_in_place 0 1 990 676
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

2428 11 invert_from 0 4 2798 22 LMatrix4f::invert_from 0 1 991 2413
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

2429 18 invert_affine_from 0 4 2798 29 LMatrix4f::invert_affine_from 0 1 992 2797
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

2430 15 invert_in_place 0 4 2798 26 LMatrix4f::invert_in_place 0 1 993 1087
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

2431 10 accumulate 0 4 2798 21 LMatrix4f::accumulate 0 1 994 760
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
72
inline void LMatrix4f::accumulate(LMatrix4f const &other, float weight);

2432 9 ident_mat 0 4 2798 20 LMatrix4f::ident_mat 0 1 995 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

2433 8 ones_mat 0 4 2798 19 LMatrix4f::ones_mat 0 1 996 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

2434 9 zeros_mat 0 4 2798 20 LMatrix4f::zeros_mat 0 1 997 784
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

2435 17 set_translate_mat 0 4 2798 28 LMatrix4f::set_translate_mat 0 1 998 913
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

2436 14 set_rotate_mat 0 4 2798 25 LMatrix4f::set_rotate_mat 0 2 999 1000 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2437 23 set_rotate_mat_normaxis 0 4 2798 34 LMatrix4f::set_rotate_mat_normaxis 0 2 1001 1002 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2438 13 set_scale_mat 0 4 2798 24 LMatrix4f::set_scale_mat 0 1 1003 961
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

2439 13 set_shear_mat 0 4 2798 24 LMatrix4f::set_shear_mat 0 2 1004 1005 967
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2440 19 set_scale_shear_mat 0 4 2798 30 LMatrix4f::set_scale_shear_mat 0 2 1006 1007 955
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2441 13 translate_mat 0 4 2798 24 LMatrix4f::translate_mat 0 2 1008 1009 1810
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

2442 10 rotate_mat 0 4 2798 21 LMatrix4f::rotate_mat 0 2 1010 1011 1039
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2443 19 rotate_mat_normaxis 0 4 2798 30 LMatrix4f::rotate_mat_normaxis 0 2 1012 1013 1228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2444 9 scale_mat 0 4 2798 20 LMatrix4f::scale_mat 0 3 1014 1015 1016 2806
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

2445 9 shear_mat 0 4 2798 20 LMatrix4f::shear_mat 0 4 1017 1018 1019 1020 1918
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2446 15 scale_shear_mat 0 4 2798 26 LMatrix4f::scale_shear_mat 0 4 1021 1022 1023 1024 1846
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2447 13 y_to_z_up_mat 0 4 2798 24 LMatrix4f::y_to_z_up_mat 0 1 1025 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

2448 13 z_to_y_up_mat 0 4 2798 24 LMatrix4f::z_to_y_up_mat 0 1 1026 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

2449 11 convert_mat 0 4 2798 22 LMatrix4f::convert_mat 0 1 1027 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2450 12 almost_equal 0 4 2798 23 LMatrix4f::almost_equal 0 2 1028 1029 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

2451 6 output 0 4 2798 17 LMatrix4f::output 0 1 1030 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

2452 5 write 0 4 2798 16 LMatrix4f::write 0 2 1031 1032 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

2453 11 python_repr 0 4 2798 22 LMatrix4f::python_repr 0 1 1033 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2454 13 generate_hash 0 4 2798 24 LMatrix4f::generate_hash 0 2 1034 1035 1078
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
157
inline void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen, float scale) const;

2455 20 write_datagram_fixed 0 4 2798 31 LMatrix4f::write_datagram_fixed 0 1 1036 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write_datagram_fixed(Datagram &destination) const;

2456 19 read_datagram_fixed 0 4 2798 30 LMatrix4f::read_datagram_fixed 0 1 1037 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::read_datagram_fixed(DatagramIterator &scan);

2457 14 write_datagram 0 4 2798 25 LMatrix4f::write_datagram 0 1 1038 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::write_datagram(Datagram &destination) const;

2458 13 read_datagram 0 4 2798 24 LMatrix4f::read_datagram 0 1 1039 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4f::read_datagram(DatagramIterator &source);

2459 14 get_class_type 0 4 2798 25 LMatrix4f::get_class_type 0 1 1040 0
50
static TypeHandle LMatrix4f::get_class_type(void);

2460 10 ~LMatrix4f 0 4 2798 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

2461 18 UnalignedLMatrix4f 0 4 2801 38 UnalignedLMatrix4f::UnalignedLMatrix4f 0 4 1047 1048 1049 1050 2788
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
424
inline UnalignedLMatrix4f::UnalignedLMatrix4f(void);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(LMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(UnalignedLMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2462 10 operator = 0 4 2801 30 UnalignedLMatrix4f::operator = 0 2 1051 1052 1444
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(LMatrix4f const &copy);
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(UnalignedLMatrix4f const &copy);

2463 3 set 0 4 2801 23 UnalignedLMatrix4f::set 0 1 1053 667
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
212
inline void UnalignedLMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2464 11 operator () 0 4 2801 31 UnalignedLMatrix4f::operator () 0 2 1054 1055 1420
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
134
inline float &UnalignedLMatrix4f::operator ()(int row, int col);
inline float UnalignedLMatrix4f::operator ()(int row, int col) const;

2465 8 get_data 0 4 2801 28 UnalignedLMatrix4f::get_data 0 1 1056 1234
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
61
inline float const *UnalignedLMatrix4f::get_data(void) const;

2466 18 get_num_components 0 4 2801 38 UnalignedLMatrix4f::get_num_components 0 1 1057 877
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4f::get_num_components(void) const;

2467 14 get_class_type 0 4 2801 34 UnalignedLMatrix4f::get_class_type 0 1 1058 0
59
static TypeHandle UnalignedLMatrix4f::get_class_type(void);

2468 19 ~UnalignedLMatrix4f 0 4 2801 39 UnalignedLMatrix4f::~UnalignedLMatrix4f 0 0 0
46
UnalignedLMatrix4f::~UnalignedLMatrix4f(void);

2469 11 operator [] 0 4 2803 27 LMatrix3d::Row::operator [] 0 2 1168 1169 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

2470 11 __setitem__ 0 4 2803 27 LMatrix3d::Row::__setitem__ 0 1 1170 712
// Filename: lmatrix3_ext_src.I
// Created by:  rdb (02Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

2471 4 size 0 4 2803 20 LMatrix3d::Row::size 0 1 1171 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

2472 4 ~Row 0 4 2803 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

2473 11 operator [] 0 4 2804 28 LMatrix3d::CRow::operator [] 0 1 1172 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix3d::CRow::operator [](int i) const;

2474 4 size 0 4 2804 21 LMatrix3d::CRow::size 0 1 1173 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

2475 5 ~CRow 0 4 2804 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

2476 9 LMatrix3d 0 4 2802 20 LMatrix3d::LMatrix3d 0 3 1059 1060 1061 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2477 10 operator = 0 4 2802 21 LMatrix3d::operator = 0 2 1062 1063 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

2478 12 operator new 0 4 2802 23 LMatrix3d::operator new 0 1 1064 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

2479 15 operator delete 0 4 2802 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

2480 12 validate_ptr 0 4 2802 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

2481 10 __reduce__ 0 4 2802 21 LMatrix3d::__reduce__ 0 1 1065 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3d::__reduce__(PyObject *self) const;

2482 4 fill 0 4 2802 15 LMatrix3d::fill 0 1 1066 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

2483 3 set 0 4 2802 14 LMatrix3d::set 0 1 1067 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2484 7 set_row 0 4 2802 18 LMatrix3d::set_row 0 2 1068 1069 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

2485 7 set_col 0 4 2802 18 LMatrix3d::set_col 0 2 1070 1071 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

2486 7 get_row 0 4 2802 18 LMatrix3d::get_row 0 2 1072 1073 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

2487 7 get_col 0 4 2802 18 LMatrix3d::get_col 0 1 1074 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

2488 8 get_row2 0 4 2802 19 LMatrix3d::get_row2 0 1 1075 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

2489 8 get_col2 0 4 2802 19 LMatrix3d::get_col2 0 1 1076 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

2490 11 operator () 0 4 2802 22 LMatrix3d::operator () 0 2 1077 1078 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

2491 11 operator [] 0 4 2802 22 LMatrix3d::operator [] 0 2 1079 1080 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

2492 4 size 0 4 2802 15 LMatrix3d::size 0 1 1081 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

2493 6 is_nan 0 4 2802 17 LMatrix3d::is_nan 0 1 1082 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

2494 8 get_cell 0 4 2802 19 LMatrix3d::get_cell 0 1 1083 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

2495 8 set_cell 0 4 2802 19 LMatrix3d::set_cell 0 1 1084 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

2496 8 get_data 0 4 2802 19 LMatrix3d::get_data 0 1 1085 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

2497 18 get_num_components 0 4 2802 29 LMatrix3d::get_num_components 0 1 1086 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

2498 10 operator < 0 4 2802 21 LMatrix3d::operator < 0 1 1087 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

2499 11 operator == 0 4 2802 22 LMatrix3d::operator == 0 1 1088 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

2500 11 operator != 0 4 2802 22 LMatrix3d::operator != 0 1 1089 228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

2501 10 compare_to 0 4 2802 21 LMatrix3d::compare_to 0 2 1090 1091 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

2502 8 get_hash 0 4 2802 19 LMatrix3d::get_hash 0 2 1092 1093 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

2503 8 add_hash 0 4 2802 19 LMatrix3d::add_hash 0 2 1094 1095 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

2504 5 xform 0 4 2802 16 LMatrix3d::xform 0 1 1096 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

2505 11 xform_point 0 4 2802 22 LMatrix3d::xform_point 0 1 1097 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

2506 9 xform_vec 0 4 2802 20 LMatrix3d::xform_vec 0 2 1098 1099 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

2507 17 xform_vec_general 0 4 2802 28 LMatrix3d::xform_vec_general 0 1 1100 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

2508 14 xform_in_place 0 4 2802 25 LMatrix3d::xform_in_place 0 1 1101 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3d::xform_in_place(LVecBase3d &v) const;

2509 20 xform_point_in_place 0 4 2802 31 LMatrix3d::xform_point_in_place 0 1 1102 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3d::xform_point_in_place(LVecBase2d &v) const;

2510 18 xform_vec_in_place 0 4 2802 29 LMatrix3d::xform_vec_in_place 0 2 1103 1104 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3d::xform_vec_in_place(LVecBase2d &v) const;
inline void LMatrix3d::xform_vec_in_place(LVecBase3d &v) const;

2511 26 xform_vec_general_in_place 0 4 2802 37 LMatrix3d::xform_vec_general_in_place 0 1 1105 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3d::xform_vec_general_in_place(LVecBase3d &v) const;

2512 8 multiply 0 4 2802 19 LMatrix3d::multiply 0 1 1106 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

2513 10 operator * 0 4 2802 21 LMatrix3d::operator * 0 2 1107 1108 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

2514 10 operator / 0 4 2802 21 LMatrix3d::operator / 0 1 1109 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

2515 11 operator += 0 4 2802 22 LMatrix3d::operator += 0 1 1110 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

2516 11 operator -= 0 4 2802 22 LMatrix3d::operator -= 0 1 1111 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

2517 11 operator *= 0 4 2802 22 LMatrix3d::operator *= 0 2 1112 1113 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

2518 11 operator /= 0 4 2802 22 LMatrix3d::operator /= 0 1 1114 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

2519 11 determinant 0 4 2802 22 LMatrix3d::determinant 0 1 1115 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

2520 14 transpose_from 0 4 2802 25 LMatrix3d::transpose_from 0 1 1116 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

2521 18 transpose_in_place 0 4 2802 29 LMatrix3d::transpose_in_place 0 1 1117 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

2522 11 invert_from 0 4 2802 22 LMatrix3d::invert_from 0 1 1118 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

2523 15 invert_in_place 0 4 2802 26 LMatrix3d::invert_in_place 0 1 1119 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

2524 21 invert_transpose_from 0 4 2802 32 LMatrix3d::invert_transpose_from 0 2 1120 1121 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

2525 9 ident_mat 0 4 2802 20 LMatrix3d::ident_mat 0 1 1122 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

2526 17 set_translate_mat 0 4 2802 28 LMatrix3d::set_translate_mat 0 1 1123 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

2527 14 set_rotate_mat 0 4 2802 25 LMatrix3d::set_rotate_mat 0 3 1124 1125 1126 816
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2528 13 set_scale_mat 0 4 2802 24 LMatrix3d::set_scale_mat 0 2 1127 1128 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

2529 13 translate_mat 0 4 2802 24 LMatrix3d::translate_mat 0 2 1129 1130 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

2530 10 rotate_mat 0 4 2802 21 LMatrix3d::rotate_mat 0 3 1131 1132 1133 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
181
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2531 9 scale_mat 0 4 2802 20 LMatrix3d::scale_mat 0 4 1134 1135 1136 1137 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

2532 23 set_rotate_mat_normaxis 0 4 2802 34 LMatrix3d::set_rotate_mat_normaxis 0 2 1138 1139 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2533 19 rotate_mat_normaxis 0 4 2802 30 LMatrix3d::rotate_mat_normaxis 0 2 1140 1141 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2534 13 set_shear_mat 0 4 2802 24 LMatrix3d::set_shear_mat 0 2 1142 1143 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2535 9 shear_mat 0 4 2802 20 LMatrix3d::shear_mat 0 4 1144 1145 1146 1147 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2536 19 set_scale_shear_mat 0 4 2802 30 LMatrix3d::set_scale_shear_mat 0 2 1148 1149 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2537 15 scale_shear_mat 0 4 2802 26 LMatrix3d::scale_shear_mat 0 4 1150 1151 1152 1153 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2538 11 convert_mat 0 4 2802 22 LMatrix3d::convert_mat 0 1 1154 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2539 12 almost_equal 0 4 2802 23 LMatrix3d::almost_equal 0 2 1155 1156 813
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

2540 6 output 0 4 2802 17 LMatrix3d::output 0 1 1157 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

2541 5 write 0 4 2802 16 LMatrix3d::write 0 2 1158 1159 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

2542 11 python_repr 0 4 2802 22 LMatrix3d::python_repr 0 1 1160 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2543 13 generate_hash 0 4 2802 24 LMatrix3d::generate_hash 0 2 1161 1162 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
162
inline void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2544 20 write_datagram_fixed 0 4 2802 31 LMatrix3d::write_datagram_fixed 0 1 1163 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write_datagram_fixed(Datagram &destination) const;

2545 19 read_datagram_fixed 0 4 2802 30 LMatrix3d::read_datagram_fixed 0 1 1164 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::read_datagram_fixed(DatagramIterator &scan);

2546 14 write_datagram 0 4 2802 25 LMatrix3d::write_datagram 0 1 1165 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::write_datagram(Datagram &destination) const;

2547 13 read_datagram 0 4 2802 24 LMatrix3d::read_datagram 0 1 1166 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3d::read_datagram(DatagramIterator &source);

2548 14 get_class_type 0 4 2802 25 LMatrix3d::get_class_type 0 1 1167 0
50
static TypeHandle LMatrix3d::get_class_type(void);

2549 10 ~LMatrix3d 0 4 2802 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

2550 11 operator [] 0 4 2806 27 LMatrix4d::Row::operator [] 0 2 1291 1292 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

2551 11 __setitem__ 0 4 2806 27 LMatrix4d::Row::__setitem__ 0 1 1293 712
// Filename: lmatrix4_ext_src.I
// Created by:  rdb (02Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

2552 4 size 0 4 2806 20 LMatrix4d::Row::size 0 1 1294 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

2553 4 ~Row 0 4 2806 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

2554 11 operator [] 0 4 2807 28 LMatrix4d::CRow::operator [] 0 1 1295 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix4d::CRow::operator [](int i) const;

2555 4 size 0 4 2807 21 LMatrix4d::CRow::size 0 1 1296 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

2556 5 ~CRow 0 4 2807 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

2557 9 LMatrix4d 0 4 2805 20 LMatrix4d::LMatrix4d 0 6 1174 1175 1176 1177 1178 1179 1566
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
503
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(UnalignedLMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

2558 10 operator = 0 4 2805 21 LMatrix4d::operator = 0 3 1180 1181 1182 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(UnalignedLMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

2559 12 operator new 0 4 2805 23 LMatrix4d::operator new 0 1 1183 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

2560 15 operator delete 0 4 2805 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

2561 12 validate_ptr 0 4 2805 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

2562 10 __reduce__ 0 4 2805 21 LMatrix4d::__reduce__ 0 1 1184 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4d::__reduce__(PyObject *self) const;

2563 4 fill 0 4 2805 15 LMatrix4d::fill 0 1 1185 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

2564 3 set 0 4 2805 14 LMatrix4d::set 0 1 1186 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2565 11 set_upper_3 0 4 2805 22 LMatrix4d::set_upper_3 0 1 1187 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

2566 11 get_upper_3 0 4 2805 22 LMatrix4d::get_upper_3 0 1 1188 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

2567 7 set_row 0 4 2805 18 LMatrix4d::set_row 0 2 1189 1190 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

2568 7 set_col 0 4 2805 18 LMatrix4d::set_col 0 2 1191 1192 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

2569 7 get_row 0 4 2805 18 LMatrix4d::get_row 0 2 1193 1194 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

2570 7 get_col 0 4 2805 18 LMatrix4d::get_col 0 1 1195 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

2571 8 get_row3 0 4 2805 19 LMatrix4d::get_row3 0 2 1196 1197 674
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

2572 8 get_col3 0 4 2805 19 LMatrix4d::get_col3 0 1 1198 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

2573 11 operator () 0 4 2805 22 LMatrix4d::operator () 0 2 1199 1200 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

2574 11 operator [] 0 4 2805 22 LMatrix4d::operator [] 0 2 1201 1202 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

2575 4 size 0 4 2805 15 LMatrix4d::size 0 1 1203 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

2576 6 is_nan 0 4 2805 17 LMatrix4d::is_nan 0 1 1204 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

2577 8 get_cell 0 4 2805 19 LMatrix4d::get_cell 0 1 1205 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

2578 8 set_cell 0 4 2805 19 LMatrix4d::set_cell 0 1 1206 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

2579 8 get_data 0 4 2805 19 LMatrix4d::get_data 0 1 1207 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

2580 18 get_num_components 0 4 2805 29 LMatrix4d::get_num_components 0 1 1208 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

2581 5 begin 0 4 2805 16 LMatrix4d::begin 0 2 1209 1210 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

2582 3 end 0 4 2805 14 LMatrix4d::end 0 2 1211 1212 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

2583 10 operator < 0 4 2805 21 LMatrix4d::operator < 0 1 1213 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

2584 11 operator == 0 4 2805 22 LMatrix4d::operator == 0 1 1214 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

2585 11 operator != 0 4 2805 22 LMatrix4d::operator != 0 1 1215 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

2586 10 compare_to 0 4 2805 21 LMatrix4d::compare_to 0 2 1216 1217 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

2587 8 get_hash 0 4 2805 19 LMatrix4d::get_hash 0 2 1218 1219 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

2588 8 add_hash 0 4 2805 19 LMatrix4d::add_hash 0 2 1220 1221 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

2589 5 xform 0 4 2805 16 LMatrix4d::xform 0 1 1222 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

2590 11 xform_point 0 4 2805 22 LMatrix4d::xform_point 0 1 1223 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

2591 9 xform_vec 0 4 2805 20 LMatrix4d::xform_vec 0 1 1224 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

2592 17 xform_vec_general 0 4 2805 28 LMatrix4d::xform_vec_general 0 1 1225 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

2593 14 xform_in_place 0 4 2805 25 LMatrix4d::xform_in_place 0 1 1226 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4d::xform_in_place(LVecBase4d &v) const;

2594 20 xform_point_in_place 0 4 2805 31 LMatrix4d::xform_point_in_place 0 1 1227 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4d::xform_point_in_place(LVecBase3d &v) const;

2595 18 xform_vec_in_place 0 4 2805 29 LMatrix4d::xform_vec_in_place 0 1 1228 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4d::xform_vec_in_place(LVecBase3d &v) const;

2596 26 xform_vec_general_in_place 0 4 2805 37 LMatrix4d::xform_vec_general_in_place 0 1 1229 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4d::xform_vec_general_in_place(LVecBase3d &v) const;

2597 8 multiply 0 4 2805 19 LMatrix4d::multiply 0 1 1230 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

2598 10 operator * 0 4 2805 21 LMatrix4d::operator * 0 2 1231 1232 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

2599 10 operator / 0 4 2805 21 LMatrix4d::operator / 0 1 1233 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

2600 11 operator += 0 4 2805 22 LMatrix4d::operator += 0 1 1234 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

2601 11 operator -= 0 4 2805 22 LMatrix4d::operator -= 0 1 1235 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

2602 11 operator *= 0 4 2805 22 LMatrix4d::operator *= 0 2 1236 1237 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

2603 11 operator /= 0 4 2805 22 LMatrix4d::operator /= 0 1 1238 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

2604 14 transpose_from 0 4 2805 25 LMatrix4d::transpose_from 0 1 1239 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

2605 18 transpose_in_place 0 4 2805 29 LMatrix4d::transpose_in_place 0 1 1240 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

2606 11 invert_from 0 4 2805 22 LMatrix4d::invert_from 0 1 1241 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

2607 18 invert_affine_from 0 4 2805 29 LMatrix4d::invert_affine_from 0 1 1242 931
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

2608 15 invert_in_place 0 4 2805 26 LMatrix4d::invert_in_place 0 1 1243 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

2609 10 accumulate 0 4 2805 21 LMatrix4d::accumulate 0 1 1244 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::accumulate(LMatrix4d const &other, double weight);

2610 9 ident_mat 0 4 2805 20 LMatrix4d::ident_mat 0 1 1245 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

2611 8 ones_mat 0 4 2805 19 LMatrix4d::ones_mat 0 1 1246 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

2612 9 zeros_mat 0 4 2805 20 LMatrix4d::zeros_mat 0 1 1247 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

2613 17 set_translate_mat 0 4 2805 28 LMatrix4d::set_translate_mat 0 1 1248 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

2614 14 set_rotate_mat 0 4 2805 25 LMatrix4d::set_rotate_mat 0 2 1249 1250 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2615 23 set_rotate_mat_normaxis 0 4 2805 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1251 1252 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2616 13 set_scale_mat 0 4 2805 24 LMatrix4d::set_scale_mat 0 1 1253 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

2617 13 set_shear_mat 0 4 2805 24 LMatrix4d::set_shear_mat 0 2 1254 1255 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2618 19 set_scale_shear_mat 0 4 2805 30 LMatrix4d::set_scale_shear_mat 0 2 1256 1257 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2619 13 translate_mat 0 4 2805 24 LMatrix4d::translate_mat 0 2 1258 1259 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

2620 10 rotate_mat 0 4 2805 21 LMatrix4d::rotate_mat 0 2 1260 1261 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2621 19 rotate_mat_normaxis 0 4 2805 30 LMatrix4d::rotate_mat_normaxis 0 2 1262 1263 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2622 9 scale_mat 0 4 2805 20 LMatrix4d::scale_mat 0 3 1264 1265 1266 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

2623 9 shear_mat 0 4 2805 20 LMatrix4d::shear_mat 0 4 1267 1268 1269 1270 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2624 15 scale_shear_mat 0 4 2805 26 LMatrix4d::scale_shear_mat 0 4 1271 1272 1273 1274 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2625 13 y_to_z_up_mat 0 4 2805 24 LMatrix4d::y_to_z_up_mat 0 1 1275 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

2626 13 z_to_y_up_mat 0 4 2805 24 LMatrix4d::z_to_y_up_mat 0 1 1276 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

2627 11 convert_mat 0 4 2805 22 LMatrix4d::convert_mat 0 1 1277 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2628 12 almost_equal 0 4 2805 23 LMatrix4d::almost_equal 0 2 1278 1279 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

2629 6 output 0 4 2805 17 LMatrix4d::output 0 1 1280 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

2630 5 write 0 4 2805 16 LMatrix4d::write 0 2 1281 1282 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

2631 11 python_repr 0 4 2805 22 LMatrix4d::python_repr 0 1 1283 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2632 13 generate_hash 0 4 2805 24 LMatrix4d::generate_hash 0 2 1284 1285 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen, double scale) const;

2633 20 write_datagram_fixed 0 4 2805 31 LMatrix4d::write_datagram_fixed 0 1 1286 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write_datagram_fixed(Datagram &destination) const;

2634 19 read_datagram_fixed 0 4 2805 30 LMatrix4d::read_datagram_fixed 0 1 1287 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::read_datagram_fixed(DatagramIterator &scan);

2635 14 write_datagram 0 4 2805 25 LMatrix4d::write_datagram 0 1 1288 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::write_datagram(Datagram &destination) const;

2636 13 read_datagram 0 4 2805 24 LMatrix4d::read_datagram 0 1 1289 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4d::read_datagram(DatagramIterator &source);

2637 14 get_class_type 0 4 2805 25 LMatrix4d::get_class_type 0 1 1290 0
50
static TypeHandle LMatrix4d::get_class_type(void);

2638 10 ~LMatrix4d 0 4 2805 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

2639 18 UnalignedLMatrix4d 0 4 2808 38 UnalignedLMatrix4d::UnalignedLMatrix4d 0 4 1297 1298 1299 1300 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
440
inline UnalignedLMatrix4d::UnalignedLMatrix4d(void);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(LMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(UnalignedLMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2640 10 operator = 0 4 2808 30 UnalignedLMatrix4d::operator = 0 2 1301 1302 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(LMatrix4d const &copy);
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(UnalignedLMatrix4d const &copy);

2641 3 set 0 4 2808 23 UnalignedLMatrix4d::set 0 1 1303 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void UnalignedLMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2642 11 operator () 0 4 2808 31 UnalignedLMatrix4d::operator () 0 2 1304 1305 472
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline double &UnalignedLMatrix4d::operator ()(int row, int col);
inline double UnalignedLMatrix4d::operator ()(int row, int col) const;

2643 8 get_data 0 4 2808 28 UnalignedLMatrix4d::get_data 0 1 1306 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
62
inline double const *UnalignedLMatrix4d::get_data(void) const;

2644 18 get_num_components 0 4 2808 38 UnalignedLMatrix4d::get_num_components 0 1 1307 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4d::get_num_components(void) const;

2645 14 get_class_type 0 4 2808 34 UnalignedLMatrix4d::get_class_type 0 1 1308 0
59
static TypeHandle UnalignedLMatrix4d::get_class_type(void);

2646 19 ~UnalignedLMatrix4d 0 4 2808 39 UnalignedLMatrix4d::~UnalignedLMatrix4d 0 0 0
46
UnalignedLMatrix4d::~UnalignedLMatrix4d(void);

2647 10 operator * 0 1 0 10 operator * 0 24 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 0
1659
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix3f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LPoint4f operator *(LPoint4f const &v, LMatrix4f const &m);
inline LVector4f operator *(LVector4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix3d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LPoint4d operator *(LPoint4d const &v, LMatrix4d const &m);
inline LVector4d operator *(LVector4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

2648 11 operator *= 0 1 0 11 operator *= 0 16 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 0
941
inline void operator *=(LVecBase3f &v, LMatrix3f const &m);
inline void operator *=(LVector3f &v, LMatrix3f const &m);
inline void operator *=(LPoint3f &v, LMatrix3f const &m);
inline void operator *=(LVector2f &v, LMatrix3f const &m);
inline void operator *=(LPoint2f &v, LMatrix3f const &m);
inline void operator *=(LVecBase4f &v, LMatrix4f const &m);
inline void operator *=(LVector3f &v, LMatrix4f const &m);
inline void operator *=(LPoint3f &v, LMatrix4f const &m);
inline void operator *=(LVecBase3d &v, LMatrix3d const &m);
inline void operator *=(LVector3d &v, LMatrix3d const &m);
inline void operator *=(LPoint3d &v, LMatrix3d const &m);
inline void operator *=(LVector2d &v, LMatrix3d const &m);
inline void operator *=(LPoint2d &v, LMatrix3d const &m);
inline void operator *=(LVecBase4d &v, LMatrix4d const &m);
inline void operator *=(LVector3d &v, LMatrix4d const &m);
inline void operator *=(LPoint3d &v, LMatrix4d const &m);

2649 22 generic_write_datagram 0 1 0 22 generic_write_datagram 0 4 1536 1537 1538 1539 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

2650 21 generic_read_datagram 0 1 0 21 generic_read_datagram 0 4 1540 1541 1542 1543 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

2651 14 compose_matrix 0 1 0 14 compose_matrix 0 16 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 0
1494
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));

2652 16 decompose_matrix 0 1 0 16 decompose_matrix 0 16 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 0
1418
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));

2653 22 compose_matrix_old_hpr 0 1 0 22 compose_matrix_old_hpr 0 8 1576 1577 1578 1579 1580 1581 1582 1583 1530
// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2654 24 decompose_matrix_old_hpr 0 1 0 24 decompose_matrix_old_hpr 0 8 1584 1585 1586 1587 1588 1589 1590 1591 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2655 22 compose_matrix_new_hpr 0 1 0 22 compose_matrix_new_hpr 0 8 1592 1593 1594 1595 1596 1597 1598 1599 538
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2656 24 decompose_matrix_new_hpr 0 1 0 24 decompose_matrix_new_hpr 0 8 1600 1601 1602 1603 1604 1605 1606 1607 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2657 14 old_to_new_hpr 0 1 0 14 old_to_new_hpr 0 2 1608 1609 1012
////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

2658 14 new_to_old_hpr 0 1 0 14 new_to_old_hpr 0 2 1610 1611 1072
////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

2659 12 LQuaternionf 0 4 2809 26 LQuaternionf::LQuaternionf 0 4 1309 1310 1311 1312 1395
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

2660 14 pure_imaginary 0 4 2809 28 LQuaternionf::pure_imaginary 0 1 1313 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

2661 9 conjugate 0 4 2809 23 LQuaternionf::conjugate 0 1 1314 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

2662 5 xform 0 4 2809 19 LQuaternionf::xform 0 2 1315 1316 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

2663 8 multiply 0 4 2809 22 LQuaternionf::multiply 0 1 1317 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

2664 10 operator - 0 68 2809 24 LQuaternionf::operator - 0 1 1318 216
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaternionf LQuaternionf::operator -(void) const;

2665 10 operator + 0 4 2809 24 LQuaternionf::operator + 0 1 1319 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

2666 10 operator - 0 4 2809 24 LQuaternionf::operator - 0 1 1320 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

2667 9 angle_rad 0 4 2809 23 LQuaternionf::angle_rad 0 1 1321 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

2668 9 angle_deg 0 4 2809 23 LQuaternionf::angle_deg 0 1 1322 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

2669 10 operator * 0 4 2809 24 LQuaternionf::operator * 0 4 1323 1324 1325 1326 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

2670 10 operator / 0 4 2809 24 LQuaternionf::operator / 0 1 1327 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

2671 11 operator *= 0 4 2809 25 LQuaternionf::operator *= 0 1 1328 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

2672 12 almost_equal 0 4 2809 26 LQuaternionf::almost_equal 0 2 1329 1330 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

2673 17 is_same_direction 0 4 2809 31 LQuaternionf::is_same_direction 0 1 1331 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

2674 21 almost_same_direction 0 4 2809 35 LQuaternionf::almost_same_direction 0 1 1332 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

2675 6 output 0 4 2809 20 LQuaternionf::output 0 1 1333 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

2676 17 extract_to_matrix 0 4 2809 31 LQuaternionf::extract_to_matrix 0 2 1334 1335 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

2677 15 set_from_matrix 0 4 2809 29 LQuaternionf::set_from_matrix 0 2 1336 1337 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

2678 7 set_hpr 0 4 2809 21 LQuaternionf::set_hpr 0 2 1338 1339 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

2679 7 get_hpr 0 4 2809 21 LQuaternionf::get_hpr 0 2 1340 1341 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (CS_default)) const;

2680 8 get_axis 0 4 2809 22 LQuaternionf::get_axis 0 1 1342 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

2681 19 get_axis_normalized 0 4 2809 33 LQuaternionf::get_axis_normalized 0 1 1343 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

2682 13 get_angle_rad 0 4 2809 27 LQuaternionf::get_angle_rad 0 1 1344 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

2683 9 get_angle 0 4 2809 23 LQuaternionf::get_angle 0 1 1345 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

2684 23 set_from_axis_angle_rad 0 4 2809 37 LQuaternionf::set_from_axis_angle_rad 0 1 1346 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

2685 19 set_from_axis_angle 0 4 2809 33 LQuaternionf::set_from_axis_angle 0 1 1347 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

2686 6 get_up 0 4 2809 20 LQuaternionf::get_up 0 2 1348 1349 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (CS_default)) const;

2687 9 get_right 0 4 2809 23 LQuaternionf::get_right 0 2 1350 1351 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (CS_default)) const;

2688 11 get_forward 0 4 2809 25 LQuaternionf::get_forward 0 2 1352 1353 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (CS_default)) const;

2689 5 get_r 0 4 2809 19 LQuaternionf::get_r 0 1 1354 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

2690 5 get_i 0 4 2809 19 LQuaternionf::get_i 0 1 1355 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

2691 5 get_j 0 4 2809 19 LQuaternionf::get_j 0 1 1356 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

2692 5 get_k 0 4 2809 19 LQuaternionf::get_k 0 1 1357 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

2693 5 set_r 0 4 2809 19 LQuaternionf::set_r 0 1 1358 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

2694 5 set_i 0 4 2809 19 LQuaternionf::set_i 0 1 1359 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

2695 5 set_j 0 4 2809 19 LQuaternionf::set_j 0 1 1360 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

2696 5 set_k 0 4 2809 19 LQuaternionf::set_k 0 1 1361 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

2697 9 normalize 0 4 2809 23 LQuaternionf::normalize 0 1 1362 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

2698 14 conjugate_from 0 4 2809 28 LQuaternionf::conjugate_from 0 1 1363 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

2699 18 conjugate_in_place 0 4 2809 32 LQuaternionf::conjugate_in_place 0 1 1364 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

2700 11 invert_from 0 4 2809 25 LQuaternionf::invert_from 0 1 1365 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

2701 15 invert_in_place 0 4 2809 29 LQuaternionf::invert_in_place 0 1 1366 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

2702 11 is_identity 0 4 2809 25 LQuaternionf::is_identity 0 1 1367 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

2703 18 is_almost_identity 0 4 2809 32 LQuaternionf::is_almost_identity 0 1 1368 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

2704 10 ident_quat 0 4 2809 24 LQuaternionf::ident_quat 0 1 1369 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

2705 14 get_class_type 0 4 2809 28 LQuaternionf::get_class_type 0 1 1370 0
53
static TypeHandle LQuaternionf::get_class_type(void);

2706 13 ~LQuaternionf 0 4 2809 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

2707 12 LQuaterniond 0 4 2810 26 LQuaterniond::LQuaterniond 0 4 1371 1372 1373 1374 2792
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

2708 14 pure_imaginary 0 4 2810 28 LQuaterniond::pure_imaginary 0 1 1375 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

2709 9 conjugate 0 4 2810 23 LQuaterniond::conjugate 0 1 1376 532
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

2710 5 xform 0 4 2810 19 LQuaterniond::xform 0 2 1377 1378 1074
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

2711 8 multiply 0 4 2810 22 LQuaterniond::multiply 0 1 1379 512
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

2712 10 operator - 0 68 2810 24 LQuaterniond::operator - 0 1 1380 434
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaterniond LQuaterniond::operator -(void) const;

2713 10 operator + 0 4 2810 24 LQuaterniond::operator + 0 1 1381 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

2714 10 operator - 0 4 2810 24 LQuaterniond::operator - 0 1 1382 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

2715 9 angle_rad 0 4 2810 23 LQuaterniond::angle_rad 0 1 1383 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

2716 9 angle_deg 0 4 2810 23 LQuaterniond::angle_deg 0 1 1384 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

2717 10 operator * 0 4 2810 24 LQuaterniond::operator * 0 4 1385 1386 1387 1388 1918
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

2718 10 operator / 0 4 2810 24 LQuaterniond::operator / 0 1 1389 458
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

2719 11 operator *= 0 4 2810 25 LQuaterniond::operator *= 0 1 1390 476
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

2720 12 almost_equal 0 4 2810 26 LQuaterniond::almost_equal 0 2 1391 1392 1338
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

2721 17 is_same_direction 0 4 2810 31 LQuaterniond::is_same_direction 0 1 1393 750
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

2722 21 almost_same_direction 0 4 2810 35 LQuaterniond::almost_same_direction 0 1 1394 676
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

2723 6 output 0 4 2810 20 LQuaterniond::output 0 1 1395 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

2724 17 extract_to_matrix 0 4 2810 31 LQuaterniond::extract_to_matrix 0 2 1396 1397 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

2725 15 set_from_matrix 0 4 2810 29 LQuaterniond::set_from_matrix 0 2 1398 1399 955
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

2726 7 set_hpr 0 4 2810 21 LQuaterniond::set_hpr 0 2 1400 1401 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));

2727 7 get_hpr 0 4 2810 21 LQuaterniond::get_hpr 0 2 1402 1403 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (CS_default)) const;

2728 8 get_axis 0 4 2810 22 LQuaterniond::get_axis 0 1 1404 866
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

2729 19 get_axis_normalized 0 4 2810 33 LQuaterniond::get_axis_normalized 0 1 1405 832
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

2730 13 get_angle_rad 0 4 2810 27 LQuaterniond::get_angle_rad 0 1 1406 1292
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

2731 9 get_angle 0 4 2810 23 LQuaterniond::get_angle 0 1 1407 1284
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

2732 23 set_from_axis_angle_rad 0 4 2810 37 LQuaterniond::set_from_axis_angle_rad 0 1 1408 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

2733 19 set_from_axis_angle 0 4 2810 33 LQuaterniond::set_from_axis_angle 0 1 1409 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

2734 6 get_up 0 4 2810 20 LQuaterniond::get_up 0 2 1410 1411 632
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (CS_default)) const;

2735 9 get_right 0 4 2810 23 LQuaterniond::get_right 0 2 1412 1413 642
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (CS_default)) const;

2736 11 get_forward 0 4 2810 25 LQuaterniond::get_forward 0 2 1414 1415 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (CS_default)) const;

2737 5 get_r 0 4 2810 19 LQuaterniond::get_r 0 1 1416 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

2738 5 get_i 0 4 2810 19 LQuaterniond::get_i 0 1 1417 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

2739 5 get_j 0 4 2810 19 LQuaterniond::get_j 0 1 1418 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

2740 5 get_k 0 4 2810 19 LQuaterniond::get_k 0 1 1419 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

2741 5 set_r 0 4 2810 19 LQuaterniond::set_r 0 1 1420 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

2742 5 set_i 0 4 2810 19 LQuaterniond::set_i 0 1 1421 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

2743 5 set_j 0 4 2810 19 LQuaterniond::set_j 0 1 1422 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

2744 5 set_k 0 4 2810 19 LQuaterniond::set_k 0 1 1423 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

2745 9 normalize 0 4 2810 23 LQuaterniond::normalize 0 1 1424 438
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

2746 14 conjugate_from 0 4 2810 28 LQuaterniond::conjugate_from 0 1 1425 1636
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

2747 18 conjugate_in_place 0 4 2810 32 LQuaterniond::conjugate_in_place 0 1 1426 760
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

2748 11 invert_from 0 4 2810 25 LQuaterniond::invert_from 0 1 1427 1590
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

2749 15 invert_in_place 0 4 2810 29 LQuaterniond::invert_in_place 0 1 1428 722
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

2750 11 is_identity 0 4 2810 25 LQuaterniond::is_identity 0 1 1429 646
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

2751 18 is_almost_identity 0 4 2810 32 LQuaterniond::is_almost_identity 0 1 1430 684
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

2752 10 ident_quat 0 4 2810 24 LQuaterniond::ident_quat 0 1 1431 520
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

2753 14 get_class_type 0 4 2810 28 LQuaterniond::get_class_type 0 1 1432 0
53
static TypeHandle LQuaterniond::get_class_type(void);

2754 13 ~LQuaterniond 0 4 2810 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

2755 10 LRotationf 0 4 2811 22 LRotationf::LRotationf 0 8 1433 1434 1435 1436 1437 1438 1439 1440 2365
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

2756 10 operator * 0 4 2811 22 LRotationf::operator * 0 3 1441 1442 1443 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

2757 10 operator / 0 4 2811 22 LRotationf::operator / 0 1 1444 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator /(float scalar) const;

2758 14 get_class_type 0 4 2811 26 LRotationf::get_class_type 0 1 1445 0
51
static TypeHandle LRotationf::get_class_type(void);

2759 11 ~LRotationf 0 4 2811 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

2760 10 LRotationd 0 4 2812 22 LRotationd::LRotationd 0 8 1446 1447 1448 1449 1450 1451 1452 1453 4732
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////

// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

2761 10 operator * 0 4 2812 22 LRotationd::operator * 0 3 1454 1455 1456 1708
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

2762 10 operator / 0 4 2812 22 LRotationd::operator / 0 1 1457 450
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator /(double scalar) const;

2763 14 get_class_type 0 4 2812 26 LRotationd::get_class_type 0 1 1458 0
51
static TypeHandle LRotationd::get_class_type(void);

2764 11 ~LRotationd 0 4 2812 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

2765 13 LOrientationf 0 4 2813 28 LOrientationf::LOrientationf 0 6 1459 1460 1461 1462 1463 1464 1881
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

2766 10 operator * 0 4 2813 25 LOrientationf::operator * 0 2 1465 1466 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

2767 14 get_class_type 0 4 2813 29 LOrientationf::get_class_type 0 1 1467 0
54
static TypeHandle LOrientationf::get_class_type(void);

2768 14 ~LOrientationf 0 4 2813 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

2769 13 LOrientationd 0 4 2814 28 LOrientationd::LOrientationd 0 6 1468 1469 1470 1471 1472 1473 3764
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////

// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

2770 10 operator * 0 4 2814 25 LOrientationd::operator * 0 2 1474 1475 1334
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

2771 14 get_class_type 0 4 2814 29 LOrientationd::get_class_type 0 1 1476 0
54
static TypeHandle LOrientationd::get_class_type(void);

2772 14 ~LOrientationd 0 4 2814 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

1611
1 14 Dtool_Ns0bgaIU 0 7 6 2815 1623 14 Dtool_Ns0bgaIU 718 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_Ns0bVQfL 0 7 6 2815 1623 14 Dtool_Ns0bVQfL 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2816  
3 14 Dtool_Ns0blRq3 0 7 6 2815 1623 14 Dtool_Ns0blRq3 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
4 14 Dtool_Ns0boQsK 0 7 6 2815 1623 14 Dtool_Ns0boQsK 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2818  1 y 1 2818  
5 14 Dtool_Ns0b_ub0 0 6 7 2815 0 14 Dtool_Ns0b_ub0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  4 copy 1 2816  
6 14 Dtool_Ns0b_fng 0 6 7 2815 0 14 Dtool_Ns0b_fng 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  10 fill_value 1 2818  
7 14 Dtool_Ns0bxPnZ 0 4 8 2820 0 14 Dtool_Ns0bxPnZ 0 2 4 this 3 2815  4 size 1 2819  
8 14 Dtool_Ns0bfGvP 0 6 11 2816 0 14 Dtool_Ns0bfGvP 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_Ns0baClz 0 6 12 2816 0 14 Dtool_Ns0baClz 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_Ns0bVCzP 0 6 13 2816 0 14 Dtool_Ns0bVCzP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_Ns0btjEl 0 6 15 2821 0 14 Dtool_Ns0btjEl 0 2 4 this 3 2816  4 self 1 2821  
12 14 Dtool_Ns0bHRz6 0 6 16 2821 0 14 Dtool_Ns0bHRz6 0 2 4 this 3 2816  9 attr_name 1 2823  
13 14 Dtool_Ns0bHRo3 0 6 17 2824 0 14 Dtool_Ns0bHRo3 0 4 4 this 3 2815  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
14 14 Dtool_Ns0bY1X1 0 4 18 2820 0 14 Dtool_Ns0bY1X1 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  1 i 1 2824  
15 14 Dtool_Ns0b6qLS 0 6 18 2818 0 14 Dtool_Ns0b6qLS 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  1 i 1 2824  
16 14 Dtool_Ns0bxNZF 0 4 19 2820 0 14 Dtool_Ns0bxNZF 0 3 4 this 3 2815  1 i 1 2824  1 v 1 2818  
17 14 Dtool_Ns0boYf5 0 6 20 2824 0 14 Dtool_Ns0boYf5 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
18 14 Dtool_Ns0bI5WA 0 6 21 2825 0 14 Dtool_Ns0bI5WA 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
19 14 Dtool_Ns0by_vl 0 6 22 2818 0 14 Dtool_Ns0by_vl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  1 i 1 2824  
20 14 Dtool_Ns0buYPR 0 6 23 2818 0 14 Dtool_Ns0buYPR 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
21 14 Dtool_Ns0bu8IW 0 6 24 2818 0 14 Dtool_Ns0bu8IW 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
22 14 Dtool_Ns0bnQnT 0 4 25 2820 0 14 Dtool_Ns0bnQnT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2815  1 i 1 2824  5 value 1 2818  
23 14 Dtool_Ns0bgvpl 0 4 26 2820 0 14 Dtool_Ns0bgvpl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 value 1 2818  
24 14 Dtool_Ns0bgLiq 0 4 27 2820 0 14 Dtool_Ns0bgLiq 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 value 1 2818  
25 14 Dtool_Ns0bqznS 0 4 28 2820 0 14 Dtool_Ns0bqznS 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2815  1 i 1 2824  5 value 1 2818  
26 14 Dtool_Ns0bBpGk 0 4 29 2820 0 14 Dtool_Ns0bBpGk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 value 1 2818  
27 14 Dtool_Ns0bBN_o 0 4 30 2820 0 14 Dtool_Ns0bBN_o 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 value 1 2818  
28 14 Dtool_Ns0bMuTE 0 4 31 2820 0 14 Dtool_Ns0bMuTE 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
29 14 Dtool_Ns0bdEX3 0 6 32 2824 0 14 Dtool_Ns0bdEX3 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
30 14 Dtool_Ns0b91nF 0 4 33 2820 0 14 Dtool_Ns0b91nF 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  10 fill_value 1 2818  
31 14 Dtool_Ns0bmT_9 0 4 34 2820 0 14 Dtool_Ns0bmT_9 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2815  1 x 1 2818  1 y 1 2818  
32 14 Dtool_Ns0bvbI8 0 6 35 2818 0 14 Dtool_Ns0bvbI8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
33 14 Dtool_Ns0bIV8b 0 6 36 2818 0 14 Dtool_Ns0bIV8b 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
34 14 Dtool_Ns0b7siR 0 6 37 2825 0 14 Dtool_Ns0b7siR 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2815  
35 14 Dtool_Ns0b9RXz 0 6 38 2818 0 14 Dtool_Ns0b9RXz 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
36 14 Dtool_Ns0bkm2c 0 7 39 2815 1623 14 Dtool_Ns0bkm2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  4 onto 1 2816  
37 14 Dtool_Ns0bJkIg 0 6 40 2825 0 14 Dtool_Ns0bJkIg 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
38 14 Dtool_Ns0bssYs 0 6 41 2825 0 14 Dtool_Ns0bssYs 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
39 14 Dtool_Ns0boMAb 0 6 42 2825 0 14 Dtool_Ns0boMAb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
40 14 Dtool_Ns0bVWAg 0 6 43 2824 0 14 Dtool_Ns0bVWAg 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
41 14 Dtool_Ns0bgmxE 0 6 43 2824 0 14 Dtool_Ns0bgmxE 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2816  5 other 1 2816  9 threshold 1 2818  
42 14 Dtool_Ns0bit5w 0 6 44 2819 0 14 Dtool_Ns0bit5w 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
43 14 Dtool_Ns0bcmf3 0 6 44 2819 0 14 Dtool_Ns0bcmf3 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  9 threshold 1 2818  
44 14 Dtool_Ns0bT3v_ 0 6 45 2819 0 14 Dtool_Ns0bT3v_ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  4 hash 1 2819  
45 14 Dtool_Ns0bkEhk 0 6 45 2819 0 14 Dtool_Ns0bkEhk 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2816  4 hash 1 2819  9 threshold 1 2818  
46 14 Dtool_Ns0bWPOu 0 7 46 2815 1623 14 Dtool_Ns0bWPOu 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2816  
47 14 Dtool_Ns0bKsJ6 0 7 47 2815 1623 14 Dtool_Ns0bKsJ6 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
48 14 Dtool_Ns0bLcrN 0 7 48 2815 1623 14 Dtool_Ns0bLcrN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
49 14 Dtool_Ns0b0d1B 0 7 49 2815 1623 14 Dtool_Ns0b0d1B 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  6 scalar 1 2818  
50 14 Dtool_Ns0b01py 0 7 50 2815 1623 14 Dtool_Ns0b01py 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  6 scalar 1 2818  
51 14 Dtool_Ns0b_q3M 0 6 51 2815 0 14 Dtool_Ns0b_q3M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 other 1 2816  
52 14 Dtool_Ns0b_aZg 0 6 52 2815 0 14 Dtool_Ns0b_aZg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 other 1 2816  
53 14 Dtool_Ns0biYvI 0 6 53 2815 0 14 Dtool_Ns0biYvI 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  6 scalar 1 2818  
54 14 Dtool_Ns0bigj5 0 6 54 2815 0 14 Dtool_Ns0bigj5 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  6 scalar 1 2818  
55 14 Dtool_Ns0bKIsE 0 7 55 2815 1623 14 Dtool_Ns0bKIsE 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 other 1 2816  
56 14 Dtool_Ns0boFND 0 7 56 2815 1623 14 Dtool_Ns0boFND 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  5 other 1 2816  
57 14 Dtool_Ns0bNeTt 0 6 57 2825 0 14 Dtool_Ns0bNeTt 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  5 other 1 2816  
58 14 Dtool_Ns0bnTFd 0 6 57 2825 0 14 Dtool_Ns0bnTFd 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2816  5 other 1 2816  9 threshold 1 2818  
59 14 Dtool_Ns0bpO8G 0 4 58 2820 0 14 Dtool_Ns0bpO8G 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  3 out 1 2826  
60 14 Dtool_Ns0biNXa 0 4 59 2820 0 14 Dtool_Ns0biNXa 0 3 4 this 3 2816  3 out 1 2826  10 class_name 1 2823  
61 14 Dtool_Ns0bsW5B 0 4 60 2820 0 14 Dtool_Ns0bsW5B 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  7 hashgen 1 2828  
62 14 Dtool_Ns0biO1N 0 4 60 2820 0 14 Dtool_Ns0biO1N 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2816  7 hashgen 1 2828  9 threshold 1 2818  
63 14 Dtool_Ns0bO_h0 0 4 61 2820 0 14 Dtool_Ns0bO_h0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  11 destination 1 2830  
64 14 Dtool_Ns0bOJCx 0 4 62 2820 0 14 Dtool_Ns0bOJCx 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  6 source 1 2832  
65 14 Dtool_Ns0b2Mbx 0 4 63 2820 0 14 Dtool_Ns0b2Mbx 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2816  11 destination 1 2830  
66 14 Dtool_Ns0b3ccD 0 4 64 2820 0 14 Dtool_Ns0b3ccD 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2815  6 source 1 2832  
67 14 Dtool_Ns0bKNOA 0 7 65 2835 0 14 Dtool_Ns0bKNOA 0 0 
68 14 Dtool_Ns0bGdnQ 0 7 67 2836 1683 14 Dtool_Ns0bGdnQ 718 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
69 14 Dtool_Ns0bCUdE 0 7 67 2836 1683 14 Dtool_Ns0bCUdE 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2837  
70 14 Dtool_Ns0bi9B6 0 7 67 2836 1683 14 Dtool_Ns0bi9B6 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
71 14 Dtool_Ns0bCY0M 0 7 67 2836 1683 14 Dtool_Ns0bCY0M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2839  1 y 1 2839  
72 14 Dtool_Ns0bG77A 0 6 68 2836 0 14 Dtool_Ns0bG77A 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  4 copy 1 2837  
73 14 Dtool_Ns0bjNf2 0 6 68 2836 0 14 Dtool_Ns0bjNf2 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  10 fill_value 1 2839  
74 14 Dtool_Ns0bv7np 0 4 69 2820 0 14 Dtool_Ns0bv7np 0 2 4 this 3 2836  4 size 1 2819  
75 14 Dtool_Ns0bxrvf 0 6 72 2837 0 14 Dtool_Ns0bxrvf 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
76 14 Dtool_Ns0b52lD 0 6 73 2837 0 14 Dtool_Ns0b52lD 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
77 14 Dtool_Ns0b72zf 0 6 74 2837 0 14 Dtool_Ns0b72zf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
78 14 Dtool_Ns0bPOE1 0 6 76 2821 0 14 Dtool_Ns0bPOE1 0 2 4 this 3 2837  4 self 1 2821  
79 14 Dtool_Ns0b5eyK 0 6 77 2821 0 14 Dtool_Ns0b5eyK 0 2 4 this 3 2837  9 attr_name 1 2823  
80 14 Dtool_Ns0bpLpH 0 6 78 2824 0 14 Dtool_Ns0bpLpH 0 4 4 this 3 2836  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
81 14 Dtool_Ns0b5ZXF 0 4 79 2820 0 14 Dtool_Ns0b5ZXF 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  1 i 1 2824  
82 14 Dtool_Ns0bcHLi 0 6 79 2839 0 14 Dtool_Ns0bcHLi 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 i 1 2824  
83 14 Dtool_Ns0bJisN 0 4 80 2820 0 14 Dtool_Ns0bJisN 0 3 4 this 3 2836  1 i 1 2824  1 v 1 2839  
84 14 Dtool_Ns0bP1fJ 0 6 81 2824 0 14 Dtool_Ns0bP1fJ 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
85 14 Dtool_Ns0bmuWQ 0 6 82 2825 0 14 Dtool_Ns0bmuWQ 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
86 14 Dtool_Ns0bUrv1 0 6 83 2839 0 14 Dtool_Ns0bUrv1 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 i 1 2824  
87 14 Dtool_Ns0bQsPh 0 6 84 2839 0 14 Dtool_Ns0bQsPh 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
88 14 Dtool_Ns0bQIIm 0 6 85 2839 0 14 Dtool_Ns0bQIIm 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
89 14 Dtool_Ns0b3_g8 0 4 86 2820 0 14 Dtool_Ns0b3_g8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2836  1 i 1 2824  5 value 1 2839  
90 14 Dtool_Ns0bKZlY 0 4 87 2820 0 14 Dtool_Ns0bKZlY 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 value 1 2839  
91 14 Dtool_Ns0bK9dd 0 4 88 2820 0 14 Dtool_Ns0bK9dd 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 value 1 2839  
92 14 Dtool_Ns0b0P6a 0 4 89 2820 0 14 Dtool_Ns0b0P6a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2836  1 i 1 2824  5 value 1 2839  
93 14 Dtool_Ns0brQCX 0 4 90 2820 0 14 Dtool_Ns0brQCX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 value 1 2839  
94 14 Dtool_Ns0br06b 0 4 91 2820 0 14 Dtool_Ns0br06b 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 value 1 2839  
95 14 Dtool_Ns0bu9TU 0 4 92 2820 0 14 Dtool_Ns0bu9TU 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
96 14 Dtool_Ns0b8xWH 0 6 93 2824 0 14 Dtool_Ns0b8xWH 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
97 14 Dtool_Ns0bsasc 0 4 94 2820 0 14 Dtool_Ns0bsasc 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  10 fill_value 1 2839  
98 14 Dtool_Ns0bbAy_ 0 4 95 2820 0 14 Dtool_Ns0bbAy_ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2836  1 x 1 2839  1 y 1 2839  
99 14 Dtool_Ns0bMHIM 0 6 96 2839 0 14 Dtool_Ns0bMHIM 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
100 14 Dtool_Ns0bqI8r 0 6 97 2839 0 14 Dtool_Ns0bqI8r 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
101 14 Dtool_Ns0bZAih 0 6 98 2825 0 14 Dtool_Ns0bZAih 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
102 14 Dtool_Ns0bcCJC 0 6 99 2839 0 14 Dtool_Ns0bcCJC 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
103 14 Dtool_Ns0bmCxs 0 7 100 2836 1683 14 Dtool_Ns0bmCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  4 onto 1 2837  
104 14 Dtool_Ns0bLeos 0 6 101 2825 0 14 Dtool_Ns0bLeos 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
105 14 Dtool_Ns0bgLYM 0 6 102 2825 0 14 Dtool_Ns0bgLYM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
106 14 Dtool_Ns0btrA7 0 6 103 2825 0 14 Dtool_Ns0btrA7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
107 14 Dtool_Ns0bcKgs 0 6 104 2824 0 14 Dtool_Ns0bcKgs 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
108 14 Dtool_Ns0be1W3 0 6 104 2824 0 14 Dtool_Ns0be1W3 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2837  5 other 1 2837  9 threshold 1 2839  
109 14 Dtool_Ns0bF_5A 0 6 105 2819 0 14 Dtool_Ns0bF_5A 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
110 14 Dtool_Ns0b1_3f 0 6 105 2819 0 14 Dtool_Ns0b1_3f 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  9 threshold 1 2839  
111 14 Dtool_Ns0bwrvP 0 6 106 2819 0 14 Dtool_Ns0bwrvP 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  4 hash 1 2819  
112 14 Dtool_Ns0b_Zma 0 6 106 2819 0 14 Dtool_Ns0b_Zma 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2837  4 hash 1 2819  9 threshold 1 2839  
113 14 Dtool_Ns0b4yP_ 0 7 107 2836 1683 14 Dtool_Ns0b4yP_ 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
114 14 Dtool_Ns0bFWpG 0 7 108 2836 1683 14 Dtool_Ns0bFWpG 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
115 14 Dtool_Ns0bFmLa 0 7 109 2836 1683 14 Dtool_Ns0bFmLa 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
116 14 Dtool_Ns0bP52U 0 7 110 2836 1683 14 Dtool_Ns0bP52U 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  6 scalar 1 2839  
117 14 Dtool_Ns0bIRtF 0 7 111 2836 1683 14 Dtool_Ns0bIRtF 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  6 scalar 1 2839  
118 14 Dtool_Ns0bzz2s 0 6 112 2836 0 14 Dtool_Ns0bzz2s 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 other 1 2837  
119 14 Dtool_Ns0b8DYA 0 6 113 2836 0 14 Dtool_Ns0b8DYA 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 other 1 2837  
120 14 Dtool_Ns0bWC3U 0 6 114 2836 0 14 Dtool_Ns0bWC3U 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  6 scalar 1 2839  
121 14 Dtool_Ns0bX6rF 0 6 115 2836 0 14 Dtool_Ns0bX6rF 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  6 scalar 1 2839  
122 14 Dtool_Ns0bmSot 0 7 116 2836 1683 14 Dtool_Ns0bmSot 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 other 1 2837  
123 14 Dtool_Ns0bEfJs 0 7 117 2836 1683 14 Dtool_Ns0bEfJs 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  5 other 1 2837  
124 14 Dtool_Ns0bnTK9 0 6 118 2825 0 14 Dtool_Ns0bnTK9 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  5 other 1 2837  
125 14 Dtool_Ns0b_OqN 0 6 118 2825 0 14 Dtool_Ns0b_OqN 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2837  5 other 1 2837  9 threshold 1 2839  
126 14 Dtool_Ns0bSB9W 0 4 119 2820 0 14 Dtool_Ns0bSB9W 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  3 out 1 2826  
127 14 Dtool_Ns0bHCWq 0 4 120 2820 0 14 Dtool_Ns0bHCWq 0 3 4 this 3 2837  3 out 1 2826  10 class_name 1 2823  
128 14 Dtool_Ns0bC65R 0 4 121 2820 0 14 Dtool_Ns0bC65R 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  7 hashgen 1 2828  
129 14 Dtool_Ns0b1h_1 0 4 121 2820 0 14 Dtool_Ns0b1h_1 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2837  7 hashgen 1 2828  9 threshold 1 2839  
130 14 Dtool_Ns0bvThE 0 4 122 2820 0 14 Dtool_Ns0bvThE 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  11 destination 1 2830  
131 14 Dtool_Ns0bvkCB 0 4 123 2820 0 14 Dtool_Ns0bvkCB 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  6 source 1 2832  
132 14 Dtool_Ns0bYKaB 0 4 124 2820 0 14 Dtool_Ns0bYKaB 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  11 destination 1 2830  
133 14 Dtool_Ns0bYCdT 0 4 125 2820 0 14 Dtool_Ns0bYCdT 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2836  6 source 1 2832  
134 14 Dtool_Ns0bvAPQ 0 7 126 2835 0 14 Dtool_Ns0bvAPQ 0 0 
135 14 Dtool_Ns0bQv_8 0 7 128 2840 1752 14 Dtool_Ns0bQv_8 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
136 14 Dtool_Ns0b_wFf 0 7 128 2840 1752 14 Dtool_Ns0b_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2816  
137 14 Dtool_Ns0btvIb 0 7 128 2840 1752 14 Dtool_Ns0btvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
138 14 Dtool_Ns0bOs00 0 7 128 2840 1752 14 Dtool_Ns0bOs00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2818  1 y 1 2818  
139 14 Dtool_Ns0brg1b 0 6 129 2840 0 14 Dtool_Ns0brg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2840  4 copy 1 2816  
140 14 Dtool_Ns0bOfPd 0 6 129 2840 0 14 Dtool_Ns0bOfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2840  10 fill_value 1 2818  
141 14 Dtool_Ns0bs393 0 6 130 2821 0 14 Dtool_Ns0bs393 0 2 4 this 3 2841  9 attr_name 1 2823  
142 14 Dtool_Ns0brq0B 0 6 131 2824 0 14 Dtool_Ns0brq0B 0 4 4 this 3 2840  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
143 14 Dtool_Ns0bMCtA 0 6 132 2841 0 14 Dtool_Ns0bMCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
144 14 Dtool_Ns0byI1V 0 6 133 2841 0 14 Dtool_Ns0byI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
145 14 Dtool_Ns0bykua 0 6 134 2841 0 14 Dtool_Ns0bykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
146 14 Dtool_Ns0bVMph 0 7 135 2840 1752 14 Dtool_Ns0bVMph 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2841  
147 14 Dtool_Ns0bJC_P 0 7 136 2815 1623 14 Dtool_Ns0bJC_P 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2816  
148 14 Dtool_Ns0bjfKg 0 7 136 2840 1752 14 Dtool_Ns0bjfKg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2841  
149 14 Dtool_Ns0bpPmQ 0 7 137 2815 1623 14 Dtool_Ns0bpPmQ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2816  
150 14 Dtool_Ns0bDbxg 0 7 137 2840 1752 14 Dtool_Ns0bDbxg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2841  
151 14 Dtool_Ns0bdPP0 0 7 138 2840 1752 14 Dtool_Ns0bdPP0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  6 scalar 1 2818  
152 14 Dtool_Ns0btnx1 0 7 139 2840 1752 14 Dtool_Ns0btnx1 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  6 scalar 1 2818  
153 14 Dtool_Ns0bpiFZ 0 7 140 2840 1752 14 Dtool_Ns0bpiFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  4 onto 1 2816  
154 14 Dtool_Ns0be9_x 0 6 141 2818 0 14 Dtool_Ns0be9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2841  
155 14 Dtool_Ns0b_avu 0 6 142 2818 0 14 Dtool_Ns0b_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 other 1 2841  
156 14 Dtool_Ns0bfA9I 0 4 143 2820 0 14 Dtool_Ns0bfA9I 0 3 4 this 3 2841  3 out 1 2826  10 class_name 1 2823  
157 14 Dtool_Ns0bhYMy 0 7 144 2835 0 14 Dtool_Ns0bhYMy 0 0 
158 14 Dtool_Ns0bwcd5 0 7 147 2843 1770 14 Dtool_Ns0bwcd5 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
159 14 Dtool_Ns0bqdIZ 0 7 147 2843 1770 14 Dtool_Ns0bqdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2837  
160 14 Dtool_Ns0beGDk 0 7 147 2843 1770 14 Dtool_Ns0beGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
161 14 Dtool_Ns0bAy7S 0 7 147 2843 1770 14 Dtool_Ns0bAy7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2839  1 y 1 2839  
162 14 Dtool_Ns0bzhOK 0 6 148 2843 0 14 Dtool_Ns0bzhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2843  4 copy 1 2837  
163 14 Dtool_Ns0b2_5n 0 6 148 2843 0 14 Dtool_Ns0b2_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2843  10 fill_value 1 2839  
164 14 Dtool_Ns0bH0d0 0 6 149 2821 0 14 Dtool_Ns0bH0d0 0 2 4 this 3 2844  9 attr_name 1 2823  
165 14 Dtool_Ns0bzrU_ 0 6 150 2824 0 14 Dtool_Ns0bzrU_ 0 4 4 this 3 2843  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
166 14 Dtool_Ns0b0FN9 0 6 151 2844 0 14 Dtool_Ns0b0FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
167 14 Dtool_Ns0bpXVS 0 6 152 2844 0 14 Dtool_Ns0bpXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
168 14 Dtool_Ns0bp7OX 0 6 153 2844 0 14 Dtool_Ns0bp7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
169 14 Dtool_Ns0bONJe 0 7 154 2843 1770 14 Dtool_Ns0bONJe 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
170 14 Dtool_Ns0bgDY_ 0 7 155 2836 1683 14 Dtool_Ns0bgDY_ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2837  
171 14 Dtool_Ns0bKsOa 0 7 155 2843 1770 14 Dtool_Ns0bKsOa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2844  
172 14 Dtool_Ns0bAO__ 0 7 156 2836 1683 14 Dtool_Ns0bAO__ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2837  
173 14 Dtool_Ns0bqo1a 0 7 156 2843 1770 14 Dtool_Ns0bqo1a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2844  
174 14 Dtool_Ns0b_Z18 0 7 157 2843 1770 14 Dtool_Ns0b_Z18 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 scalar 1 2839  
175 14 Dtool_Ns0bvwW_ 0 7 158 2843 1770 14 Dtool_Ns0bvwW_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 scalar 1 2839  
176 14 Dtool_Ns0bYmkd 0 7 159 2843 1770 14 Dtool_Ns0bYmkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  4 onto 1 2837  
177 14 Dtool_Ns0bH_RS 0 6 160 2839 0 14 Dtool_Ns0bH_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2844  
178 14 Dtool_Ns0boZBP 0 6 161 2839 0 14 Dtool_Ns0boZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2844  
179 14 Dtool_Ns0b2DdF 0 4 162 2820 0 14 Dtool_Ns0b2DdF 0 3 4 this 3 2844  3 out 1 2826  10 class_name 1 2823  
180 14 Dtool_Ns0b4Zsu 0 7 163 2835 0 14 Dtool_Ns0b4Zsu 0 0 
181 14 Dtool_Ns0bzKKY 0 7 166 2846 1786 14 Dtool_Ns0bzKKY 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
182 14 Dtool_Ns0btY8N 0 7 166 2846 1786 14 Dtool_Ns0btY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2816  
183 14 Dtool_Ns0bCtvQ 0 7 166 2846 1786 14 Dtool_Ns0bCtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
184 14 Dtool_Ns0bqlQB 0 7 166 2846 1786 14 Dtool_Ns0bqlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2818  1 y 1 2818  
185 14 Dtool_Ns0b_egO 0 6 167 2846 0 14 Dtool_Ns0b_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2846  4 copy 1 2816  
186 14 Dtool_Ns0bqvjK 0 6 167 2846 0 14 Dtool_Ns0bqvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2846  10 fill_value 1 2818  
187 14 Dtool_Ns0bP_UN 0 6 168 2821 0 14 Dtool_Ns0bP_UN 0 2 4 this 3 2847  9 attr_name 1 2823  
188 14 Dtool_Ns0bbAlh 0 6 169 2824 0 14 Dtool_Ns0bbAlh 0 4 4 this 3 2846  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
189 14 Dtool_Ns0bqnt3 0 6 170 2847 0 14 Dtool_Ns0bqnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_Ns0bCGWE 0 6 171 2847 0 14 Dtool_Ns0bCGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
191 14 Dtool_Ns0baRgE 0 6 172 2847 0 14 Dtool_Ns0baRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
192 14 Dtool_Ns0b01sU 0 7 173 2846 1786 14 Dtool_Ns0b01sU 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
193 14 Dtool_Ns0bsVHw 0 7 174 2815 1623 14 Dtool_Ns0bsVHw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  5 other 1 2816  
194 14 Dtool_Ns0bf_os 0 7 174 2846 1786 14 Dtool_Ns0bf_os 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  5 other 1 2841  
195 14 Dtool_Ns0bYCqi 0 7 175 2840 1752 14 Dtool_Ns0bYCqi 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  5 other 1 2847  
196 14 Dtool_Ns0b3nIw 0 7 175 2815 1623 14 Dtool_Ns0b3nIw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  5 other 1 2816  
197 14 Dtool_Ns0bggps 0 7 175 2846 1786 14 Dtool_Ns0bggps 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  5 other 1 2841  
198 14 Dtool_Ns0bULR7 0 7 176 2846 1786 14 Dtool_Ns0bULR7 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  6 scalar 1 2818  
199 14 Dtool_Ns0brFUb 0 7 177 2846 1786 14 Dtool_Ns0brFUb 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  6 scalar 1 2818  
200 14 Dtool_Ns0bP_bo 0 7 178 2846 1786 14 Dtool_Ns0bP_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  4 onto 1 2816  
201 14 Dtool_Ns0bFi0t 0 4 179 2820 0 14 Dtool_Ns0bFi0t 0 3 4 this 3 2847  3 out 1 2826  10 class_name 1 2823  
202 14 Dtool_Ns0bntNT 0 7 180 2835 0 14 Dtool_Ns0bntNT 0 0 
203 14 Dtool_Ns0btKnR 0 7 183 2849 1802 14 Dtool_Ns0btKnR 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
204 14 Dtool_Ns0bkCZP 0 7 183 2849 1802 14 Dtool_Ns0bkCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2837  
205 14 Dtool_Ns0b38Ro 0 7 183 2849 1802 14 Dtool_Ns0b38Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
206 14 Dtool_Ns0bVLaV 0 7 183 2849 1802 14 Dtool_Ns0bVLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2839  1 y 1 2839  
207 14 Dtool_Ns0b9M99 0 6 184 2849 0 14 Dtool_Ns0b9M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  4 copy 1 2837  
208 14 Dtool_Ns0bMH4I 0 6 184 2849 0 14 Dtool_Ns0bMH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  10 fill_value 1 2839  
209 14 Dtool_Ns0bx_N_ 0 6 185 2821 0 14 Dtool_Ns0bx_N_ 0 2 4 this 3 2850  9 attr_name 1 2823  
210 14 Dtool_Ns0baAeT 0 6 186 2824 0 14 Dtool_Ns0baAeT 0 4 4 this 3 2849  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
211 14 Dtool_Ns0brnmp 0 6 187 2850 0 14 Dtool_Ns0brnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
212 14 Dtool_Ns0bAGP2 0 6 188 2850 0 14 Dtool_Ns0bAGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
213 14 Dtool_Ns0bYRZ2 0 6 189 2850 0 14 Dtool_Ns0bYRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
214 14 Dtool_Ns0b11lG 0 7 190 2849 1802 14 Dtool_Ns0b11lG 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2850  
215 14 Dtool_Ns0bvLkf 0 7 191 2836 1683 14 Dtool_Ns0bvLkf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  5 other 1 2837  
216 14 Dtool_Ns0bCmce 0 7 191 2849 1802 14 Dtool_Ns0bCmce 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  5 other 1 2844  
217 14 Dtool_Ns0bNGic 0 7 192 2843 1770 14 Dtool_Ns0bNGic 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  5 other 1 2850  
218 14 Dtool_Ns0b0Vlf 0 7 192 2836 1683 14 Dtool_Ns0b0Vlf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  5 other 1 2837  
219 14 Dtool_Ns0bFode 0 7 192 2849 1802 14 Dtool_Ns0bFode 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  5 other 1 2844  
220 14 Dtool_Ns0brAiF 0 7 193 2849 1802 14 Dtool_Ns0brAiF 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  6 scalar 1 2839  
221 14 Dtool_Ns0b6Vkl 0 7 194 2849 1802 14 Dtool_Ns0b6Vkl 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  6 scalar 1 2839  
222 14 Dtool_Ns0bi_k4 0 7 195 2849 1802 14 Dtool_Ns0bi_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  4 onto 1 2837  
223 14 Dtool_Ns0bEitf 0 4 196 2820 0 14 Dtool_Ns0bEitf 0 3 4 this 3 2850  3 out 1 2826  10 class_name 1 2823  
224 14 Dtool_Ns0bmtGF 0 7 197 2835 0 14 Dtool_Ns0bmtGF 0 0 
225 14 Dtool_Ns0b9GM2 0 7 200 2852 1812 14 Dtool_Ns0b9GM2 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
226 14 Dtool_Ns0bRRmU 0 7 200 2852 1812 14 Dtool_Ns0bRRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2853  
227 14 Dtool_Ns0bBPuZ 0 7 200 2852 1812 14 Dtool_Ns0bBPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
228 14 Dtool_Ns0bnj6v 0 7 200 2852 1812 14 Dtool_Ns0bnj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2818  1 y 1 2818  1 z 1 2818  
229 14 Dtool_Ns0bqOP9 0 6 201 2852 0 14 Dtool_Ns0bqOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  4 copy 1 2853  
230 14 Dtool_Ns0brfXC 0 6 201 2852 0 14 Dtool_Ns0brfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  10 fill_value 1 2818  
231 14 Dtool_Ns0bkPX7 0 4 202 2820 0 14 Dtool_Ns0bkPX7 0 2 4 this 3 2852  4 size 1 2819  
232 14 Dtool_Ns0bKGfx 0 6 205 2853 0 14 Dtool_Ns0bKGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
233 14 Dtool_Ns0bmCVV 0 6 206 2853 0 14 Dtool_Ns0bmCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
234 14 Dtool_Ns0bgCjx 0 6 207 2853 0 14 Dtool_Ns0bgCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
235 14 Dtool_Ns0bjCxN 0 6 208 2853 0 14 Dtool_Ns0bjCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_Ns0bBi0G 0 6 210 2821 0 14 Dtool_Ns0bBi0G 0 2 4 this 3 2853  4 self 1 2821  
237 14 Dtool_Ns0brQjc 0 6 211 2821 0 14 Dtool_Ns0brQjc 0 2 4 this 3 2853  9 attr_name 1 2823  
238 14 Dtool_Ns0bbRYZ 0 6 212 2824 0 14 Dtool_Ns0bbRYZ 0 4 4 this 3 2852  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
239 14 Dtool_Ns0b01HX 0 4 213 2820 0 14 Dtool_Ns0b01HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 i 1 2824  
240 14 Dtool_Ns0bnq7z 0 6 213 2818 0 14 Dtool_Ns0bnq7z 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  1 i 1 2824  
241 14 Dtool_Ns0bCMJn 0 4 214 2820 0 14 Dtool_Ns0bCMJn 0 3 4 this 3 2852  1 i 1 2824  1 v 1 2818  
242 14 Dtool_Ns0bEZPb 0 6 215 2824 0 14 Dtool_Ns0bEZPb 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
243 14 Dtool_Ns0bd5Gi 0 6 216 2825 0 14 Dtool_Ns0bd5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
244 14 Dtool_Ns0bO_fH 0 6 217 2818 0 14 Dtool_Ns0bO_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  1 i 1 2824  
245 14 Dtool_Ns0bdY_y 0 6 218 2818 0 14 Dtool_Ns0bdY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
246 14 Dtool_Ns0bd843 0 6 219 2818 0 14 Dtool_Ns0bd843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
247 14 Dtool_Ns0bdQw8 0 6 220 2818 0 14 Dtool_Ns0bdQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
248 14 Dtool_Ns0bUQX1 0 4 221 2820 0 14 Dtool_Ns0bUQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2852  1 i 1 2824  5 value 1 2818  
249 14 Dtool_Ns0bcuZH 0 4 222 2820 0 14 Dtool_Ns0bcuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
250 14 Dtool_Ns0bcKSM 0 4 223 2820 0 14 Dtool_Ns0bcKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
251 14 Dtool_Ns0bcWKR 0 4 224 2820 0 14 Dtool_Ns0bcWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
252 14 Dtool_Ns0bWJYp 0 7 225 2815 1623 14 Dtool_Ns0bWJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
253 14 Dtool_Ns0bbJmF 0 7 226 2815 1623 14 Dtool_Ns0bbJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
254 14 Dtool_Ns0bbleK 0 7 227 2815 1623 14 Dtool_Ns0bbleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
255 14 Dtool_Ns0bHyX0 0 4 228 2820 0 14 Dtool_Ns0bHyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2852  1 i 1 2824  5 value 1 2818  
256 14 Dtool_Ns0b1m2F 0 4 229 2820 0 14 Dtool_Ns0b1m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
257 14 Dtool_Ns0b1CvK 0 4 230 2820 0 14 Dtool_Ns0b1CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
258 14 Dtool_Ns0b1unP 0 4 231 2820 0 14 Dtool_Ns0b1unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 value 1 2818  
259 14 Dtool_Ns0bjRCm 0 4 232 2820 0 14 Dtool_Ns0bjRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
260 14 Dtool_Ns0bpFHZ 0 6 233 2824 0 14 Dtool_Ns0bpFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
261 14 Dtool_Ns0bq1Xn 0 4 234 2820 0 14 Dtool_Ns0bq1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  10 fill_value 1 2818  
262 14 Dtool_Ns0bOavy 0 4 235 2820 0 14 Dtool_Ns0bOavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2852  1 x 1 2818  1 y 1 2818  1 z 1 2818  
263 14 Dtool_Ns0bbb4d 0 6 236 2818 0 14 Dtool_Ns0bbb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
264 14 Dtool_Ns0blUs9 0 6 237 2818 0 14 Dtool_Ns0blUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
265 14 Dtool_Ns0bOsSz 0 6 238 2825 0 14 Dtool_Ns0bOsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
266 14 Dtool_Ns0baDIV 0 6 239 2818 0 14 Dtool_Ns0baDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
267 14 Dtool_Ns0baJ6l 0 7 240 2852 1812 14 Dtool_Ns0baJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
268 14 Dtool_Ns0bQhma 0 7 241 2852 1812 14 Dtool_Ns0bQhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  4 onto 1 2853  
269 14 Dtool_Ns0bdE8o 0 6 242 2825 0 14 Dtool_Ns0bdE8o 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
270 14 Dtool_Ns0bFt4v 0 6 243 2825 0 14 Dtool_Ns0bFt4v 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
271 14 Dtool_Ns0bBNge 0 6 244 2825 0 14 Dtool_Ns0bBNge 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
272 14 Dtool_Ns0bW_5p 0 7 245 2852 1812 14 Dtool_Ns0bW_5p 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
273 14 Dtool_Ns0b53zo 0 6 246 2824 0 14 Dtool_Ns0b53zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
274 14 Dtool_Ns0b8GlN 0 6 246 2824 0 14 Dtool_Ns0b8GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2853  5 other 1 2853  9 threshold 1 2818  
275 14 Dtool_Ns0bOipS 0 6 247 2819 0 14 Dtool_Ns0bOipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
276 14 Dtool_Ns0bgnPZ 0 6 247 2819 0 14 Dtool_Ns0bgnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  9 threshold 1 2818  
277 14 Dtool_Ns0bH3fh 0 6 248 2819 0 14 Dtool_Ns0bH3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  4 hash 1 2819  
278 14 Dtool_Ns0bwERG 0 6 248 2819 0 14 Dtool_Ns0bwERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2853  4 hash 1 2819  9 threshold 1 2818  
279 14 Dtool_Ns0biO_P 0 7 249 2852 1812 14 Dtool_Ns0biO_P 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2853  
280 14 Dtool_Ns0bfM9C 0 7 250 2852 1812 14 Dtool_Ns0bfM9C 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
281 14 Dtool_Ns0bf8eW 0 7 251 2852 1812 14 Dtool_Ns0bf8eW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
282 14 Dtool_Ns0bHdlj 0 7 252 2852 1812 14 Dtool_Ns0bHdlj 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  6 scalar 1 2818  
283 14 Dtool_Ns0bY1ZU 0 7 253 2852 1812 14 Dtool_Ns0bY1ZU 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  6 scalar 1 2818  
284 14 Dtool_Ns0bGqXQ 0 6 254 2852 0 14 Dtool_Ns0bGqXQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2853  
285 14 Dtool_Ns0bGa5j 0 6 255 2852 0 14 Dtool_Ns0bGa5j 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2853  
286 14 Dtool_Ns0bPZfq 0 6 256 2852 0 14 Dtool_Ns0bPZfq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 scalar 1 2818  
287 14 Dtool_Ns0bOhTb 0 6 257 2852 0 14 Dtool_Ns0bOhTb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 scalar 1 2818  
288 14 Dtool_Ns0bXVDn 0 7 258 2852 1812 14 Dtool_Ns0bXVDn 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2853  
289 14 Dtool_Ns0b1Bkl 0 7 259 2852 1812 14 Dtool_Ns0b1Bkl 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2853  
290 14 Dtool_Ns0bvCKa 0 4 260 2820 0 14 Dtool_Ns0bvCKa 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2853  
291 14 Dtool_Ns0b2ADH 0 6 261 2825 0 14 Dtool_Ns0b2ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  5 other 1 2853  
292 14 Dtool_Ns0bjJ12 0 6 261 2825 0 14 Dtool_Ns0bjJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2853  5 other 1 2853  9 threshold 1 2818  
293 14 Dtool_Ns0b8Oso 0 4 262 2820 0 14 Dtool_Ns0b8Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  3 out 1 2826  
294 14 Dtool_Ns0bRMH8 0 4 263 2820 0 14 Dtool_Ns0bRMH8 0 3 4 this 3 2853  3 out 1 2826  10 class_name 1 2823  
295 14 Dtool_Ns0bZWpj 0 4 264 2820 0 14 Dtool_Ns0bZWpj 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  7 hashgen 1 2828  
296 14 Dtool_Ns0bRJlv 0 4 264 2820 0 14 Dtool_Ns0bRJlv 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2853  7 hashgen 1 2828  9 threshold 1 2818  
297 14 Dtool_Ns0bi_RW 0 4 265 2820 0 14 Dtool_Ns0bi_RW 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  11 destination 1 2830  
298 14 Dtool_Ns0baJyS 0 4 266 2820 0 14 Dtool_Ns0baJyS 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 source 1 2832  
299 14 Dtool_Ns0bqMLT 0 4 267 2820 0 14 Dtool_Ns0bqMLT 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2853  11 destination 1 2830  
300 14 Dtool_Ns0bKcMl 0 4 268 2820 0 14 Dtool_Ns0bKcMl 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 source 1 2832  
301 14 Dtool_Ns0bdN_h 0 7 269 2835 0 14 Dtool_Ns0bdN_h 0 0 
302 14 Dtool_Ns0bjiry 0 7 271 2855 1882 14 Dtool_Ns0bjiry 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
303 14 Dtool_Ns0buakN 0 7 271 2855 1882 14 Dtool_Ns0buakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2856  
304 14 Dtool_Ns0b_fFc 0 7 271 2855 1882 14 Dtool_Ns0b_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
305 14 Dtool_Ns0bpccq 0 7 271 2855 1882 14 Dtool_Ns0bpccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2839  1 y 1 2839  1 z 1 2839  
306 14 Dtool_Ns0byavJ 0 6 272 2855 0 14 Dtool_Ns0byavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  4 copy 1 2856  
307 14 Dtool_Ns0b_NPY 0 6 272 2855 0 14 Dtool_Ns0b_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  10 fill_value 1 2839  
308 14 Dtool_Ns0bD6XL 0 4 273 2820 0 14 Dtool_Ns0bD6XL 0 2 4 this 3 2855  4 size 1 2819  
309 14 Dtool_Ns0btrfB 0 6 276 2856 0 14 Dtool_Ns0btrfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
310 14 Dtool_Ns0bExVl 0 6 277 2856 0 14 Dtool_Ns0bExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
311 14 Dtool_Ns0bHxjB 0 6 278 2856 0 14 Dtool_Ns0bHxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
312 14 Dtool_Ns0bBxxd 0 6 279 2856 0 14 Dtool_Ns0bBxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
313 14 Dtool_Ns0bjO0W 0 6 281 2821 0 14 Dtool_Ns0bjO0W 0 2 4 this 3 2856  4 self 1 2821  
314 14 Dtool_Ns0bMeis 0 6 282 2821 0 14 Dtool_Ns0bMeis 0 2 4 this 3 2856  9 attr_name 1 2823  
315 14 Dtool_Ns0b8LZp 0 6 283 2824 0 14 Dtool_Ns0b8LZp 0 4 4 this 3 2855  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
316 14 Dtool_Ns0bKmHn 0 4 284 2820 0 14 Dtool_Ns0bKmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  1 i 1 2824  
317 14 Dtool_Ns0bIH7D 0 6 284 2839 0 14 Dtool_Ns0bIH7D 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  1 i 1 2824  
318 14 Dtool_Ns0bUicv 0 4 285 2820 0 14 Dtool_Ns0bUicv 0 3 4 this 3 2855  1 i 1 2824  1 v 1 2839  
319 14 Dtool_Ns0b61Pr 0 6 286 2824 0 14 Dtool_Ns0b61Pr 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
320 14 Dtool_Ns0b7uGy 0 6 287 2825 0 14 Dtool_Ns0b7uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
321 14 Dtool_Ns0bgqfX 0 6 288 2839 0 14 Dtool_Ns0bgqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  1 i 1 2824  
322 14 Dtool_Ns0b8t_C 0 6 289 2839 0 14 Dtool_Ns0b8t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
323 14 Dtool_Ns0b8J4H 0 6 290 2839 0 14 Dtool_Ns0b8J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
324 14 Dtool_Ns0b8lwM 0 6 291 2839 0 14 Dtool_Ns0b8lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
325 14 Dtool_Ns0bj_Qe 0 4 292 2820 0 14 Dtool_Ns0bj_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2855  1 i 1 2824  5 value 1 2839  
326 14 Dtool_Ns0bfZV6 0 4 293 2820 0 14 Dtool_Ns0bfZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
327 14 Dtool_Ns0bf9N_ 0 4 294 2820 0 14 Dtool_Ns0bf9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
328 14 Dtool_Ns0beBGE 0 4 295 2820 0 14 Dtool_Ns0beBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
329 14 Dtool_Ns0bwlZ5 0 7 296 2836 1683 14 Dtool_Ns0bwlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
330 14 Dtool_Ns0b1lnV 0 7 297 2836 1683 14 Dtool_Ns0b1lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
331 14 Dtool_Ns0b1Jfa 0 7 298 2836 1683 14 Dtool_Ns0b1Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
332 14 Dtool_Ns0bLMq8 0 4 299 2820 0 14 Dtool_Ns0bLMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2855  1 i 1 2824  5 value 1 2839  
333 14 Dtool_Ns0b0Qy4 0 4 300 2820 0 14 Dtool_Ns0b0Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
334 14 Dtool_Ns0b00q9 0 4 301 2820 0 14 Dtool_Ns0b00q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
335 14 Dtool_Ns0b3YjC 0 4 302 2820 0 14 Dtool_Ns0b3YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 value 1 2839  
336 14 Dtool_Ns0bd9D2 0 4 303 2820 0 14 Dtool_Ns0bd9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
337 14 Dtool_Ns0bLxGp 0 6 304 2824 0 14 Dtool_Ns0bLxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
338 14 Dtool_Ns0bxac_ 0 4 305 2820 0 14 Dtool_Ns0bxac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  10 fill_value 1 2839  
339 14 Dtool_Ns0bL816 0 4 306 2820 0 14 Dtool_Ns0bL816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2855  1 x 1 2839  1 y 1 2839  1 z 1 2839  
340 14 Dtool_Ns0b5E4t 0 6 307 2839 0 14 Dtool_Ns0b5E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
341 14 Dtool_Ns0bGIsN 0 6 308 2839 0 14 Dtool_Ns0bGIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
342 14 Dtool_Ns0btBSD 0 6 309 2825 0 14 Dtool_Ns0btBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2855  
343 14 Dtool_Ns0b4N6j 0 6 310 2839 0 14 Dtool_Ns0b4N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
344 14 Dtool_Ns0bvmLU 0 7 311 2855 1882 14 Dtool_Ns0bvmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
345 14 Dtool_Ns0ba8hq 0 7 312 2855 1882 14 Dtool_Ns0ba8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  4 onto 1 2856  
346 14 Dtool_Ns0bf_c1 0 6 313 2825 0 14 Dtool_Ns0bf_c1 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
347 14 Dtool_Ns0b5E4P 0 6 314 2825 0 14 Dtool_Ns0b5E4P 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
348 14 Dtool_Ns0bCkg_ 0 6 315 2825 0 14 Dtool_Ns0bCkg_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
349 14 Dtool_Ns0bwK45 0 7 316 2855 1882 14 Dtool_Ns0bwK45 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
350 14 Dtool_Ns0bAqT1 0 6 317 2824 0 14 Dtool_Ns0bAqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
351 14 Dtool_Ns0bDVKA 0 6 317 2824 0 14 Dtool_Ns0bDVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2856  5 other 1 2856  9 threshold 1 2839  
352 14 Dtool_Ns0bQ_pi 0 6 318 2819 0 14 Dtool_Ns0bQ_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
353 14 Dtool_Ns0bBwnB 0 6 318 2819 0 14 Dtool_Ns0bBwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  9 threshold 1 2839  
354 14 Dtool_Ns0blrfx 0 6 319 2819 0 14 Dtool_Ns0blrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  4 hash 1 2819  
355 14 Dtool_Ns0bjZW8 0 6 319 2819 0 14 Dtool_Ns0bjZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2856  4 hash 1 2819  9 threshold 1 2839  
356 14 Dtool_Ns0bEy_f 0 7 320 2855 1882 14 Dtool_Ns0bEy_f 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
357 14 Dtool_Ns0bZ2dP 0 7 321 2855 1882 14 Dtool_Ns0bZ2dP 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
358 14 Dtool_Ns0bZG_i 0 7 322 2855 1882 14 Dtool_Ns0bZG_i 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
359 14 Dtool_Ns0b6_m2 0 7 323 2855 1882 14 Dtool_Ns0b6_m2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  6 scalar 1 2839  
360 14 Dtool_Ns0b7Wdn 0 7 324 2855 1882 14 Dtool_Ns0b7Wdn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  6 scalar 1 2839  
361 14 Dtool_Ns0bazWw 0 6 325 2855 0 14 Dtool_Ns0bazWw 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2856  
362 14 Dtool_Ns0bbD4D 0 6 326 2855 0 14 Dtool_Ns0bbD4D 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2856  
363 14 Dtool_Ns0bFCn2 0 6 327 2855 0 14 Dtool_Ns0bFCn2 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 scalar 1 2839  
364 14 Dtool_Ns0bK6bn 0 6 328 2855 0 14 Dtool_Ns0bK6bn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 scalar 1 2839  
365 14 Dtool_Ns0byw_P 0 7 329 2855 1882 14 Dtool_Ns0byw_P 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2856  
366 14 Dtool_Ns0bQkhO 0 7 330 2855 1882 14 Dtool_Ns0bQkhO 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2856  
367 14 Dtool_Ns0bmWqm 0 4 331 2820 0 14 Dtool_Ns0bmWqm 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2856  
368 14 Dtool_Ns0bgl6W 0 6 332 2825 0 14 Dtool_Ns0bgl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  5 other 1 2856  
369 14 Dtool_Ns0b6Cbn 0 6 332 2825 0 14 Dtool_Ns0b6Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2856  5 other 1 2856  9 threshold 1 2839  
370 14 Dtool_Ns0bhBt4 0 4 333 2820 0 14 Dtool_Ns0bhBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  3 out 1 2826  
371 14 Dtool_Ns0brCGM 0 4 334 2820 0 14 Dtool_Ns0brCGM 0 3 4 this 3 2856  3 out 1 2826  10 class_name 1 2823  
372 14 Dtool_Ns0b_lpz 0 4 335 2820 0 14 Dtool_Ns0b_lpz 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  7 hashgen 1 2828  
373 14 Dtool_Ns0bhhvX 0 4 335 2820 0 14 Dtool_Ns0bhhvX 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2856  7 hashgen 1 2828  9 threshold 1 2839  
374 14 Dtool_Ns0b8TRm 0 4 336 2820 0 14 Dtool_Ns0b8TRm 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  11 destination 1 2830  
375 14 Dtool_Ns0b4kyi 0 4 337 2820 0 14 Dtool_Ns0b4kyi 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 source 1 2832  
376 14 Dtool_Ns0bPKKj 0 4 338 2820 0 14 Dtool_Ns0bPKKj 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2856  11 destination 1 2830  
377 14 Dtool_Ns0bkPM1 0 4 339 2820 0 14 Dtool_Ns0bkPM1 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 source 1 2832  
378 14 Dtool_Ns0byA_x 0 7 340 2835 0 14 Dtool_Ns0byA_x 0 0 
379 14 Dtool_Ns0bhACr 0 7 347 2858 1980 14 Dtool_Ns0bhACr 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
380 14 Dtool_Ns0bZ8LN 0 7 347 2858 1980 14 Dtool_Ns0bZ8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2853  
381 14 Dtool_Ns0b6OMJ 0 7 347 2858 1980 14 Dtool_Ns0b6OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
382 14 Dtool_Ns0bhp6I 0 7 347 2858 1980 14 Dtool_Ns0bhp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2818  1 y 1 2818  1 z 1 2818  
383 14 Dtool_Ns0bqZGE 0 6 348 2858 0 14 Dtool_Ns0bqZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  4 copy 1 2853  
384 14 Dtool_Ns0bR_QE 0 6 348 2858 0 14 Dtool_Ns0bR_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  10 fill_value 1 2818  
385 14 Dtool_Ns0bvXBf 0 6 349 2821 0 14 Dtool_Ns0bvXBf 0 2 4 this 3 2859  9 attr_name 1 2823  
386 14 Dtool_Ns0brK3o 0 6 350 2824 0 14 Dtool_Ns0brK3o 0 4 4 this 3 2858  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
387 14 Dtool_Ns0bMixn 0 6 351 2859 0 14 Dtool_Ns0bMixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
388 14 Dtool_Ns0byo58 0 6 352 2859 0 14 Dtool_Ns0byo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
389 14 Dtool_Ns0bxExB 0 6 353 2859 0 14 Dtool_Ns0bxExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
390 14 Dtool_Ns0bxgqG 0 6 354 2859 0 14 Dtool_Ns0bxgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
391 14 Dtool_Ns0b8jfB 0 7 355 2840 1752 14 Dtool_Ns0b8jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2859  
392 14 Dtool_Ns0b8PYG 0 7 356 2840 1752 14 Dtool_Ns0b8PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2859  
393 14 Dtool_Ns0bE_hG 0 7 357 2840 1752 14 Dtool_Ns0bE_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2859  
394 14 Dtool_Ns0bWstI 0 7 358 2858 1980 14 Dtool_Ns0bWstI 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2859  
395 14 Dtool_Ns0bJrR4 0 7 359 2852 1812 14 Dtool_Ns0bJrR4 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2853  
396 14 Dtool_Ns0bciQH 0 7 359 2858 1980 14 Dtool_Ns0bciQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
397 14 Dtool_Ns0bpo44 0 7 360 2852 1812 14 Dtool_Ns0bpo44 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2853  
398 14 Dtool_Ns0b8f3H 0 7 360 2858 1980 14 Dtool_Ns0b8f3H 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
399 14 Dtool_Ns0bXSXn 0 7 361 2858 1980 14 Dtool_Ns0bXSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2853  
400 14 Dtool_Ns0bzCBx 0 7 362 2858 1980 14 Dtool_Ns0bzCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  4 onto 1 2853  
401 14 Dtool_Ns0bi1_1 0 6 363 2818 0 14 Dtool_Ns0bi1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
402 14 Dtool_Ns0bSe7m 0 6 364 2818 0 14 Dtool_Ns0bSe7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
403 14 Dtool_Ns0bqxe0 0 6 365 2818 0 14 Dtool_Ns0bqxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2859  5 other 1 2859  3 ref 1 2859  
404 14 Dtool_Ns0bDYOx 0 6 366 2818 0 14 Dtool_Ns0bDYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2859  5 other 1 2859  3 ref 1 2859  
405 14 Dtool_Ns0b_dvn 0 6 367 2818 0 14 Dtool_Ns0b_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
406 14 Dtool_Ns0bzM2t 0 6 368 2818 0 14 Dtool_Ns0bzM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  5 other 1 2859  
407 14 Dtool_Ns0bcvTb 0 7 369 2858 1980 14 Dtool_Ns0bcvTb 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  6 scalar 1 2818  
408 14 Dtool_Ns0bsH0c 0 7 370 2858 1980 14 Dtool_Ns0bsH0c 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2859  6 scalar 1 2818  
409 14 Dtool_Ns0blOZo 0 7 371 2858 1980 14 Dtool_Ns0blOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
410 14 Dtool_Ns0bz_MF 0 7 371 2858 1980 14 Dtool_Ns0bz_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
411 14 Dtool_Ns0b3sup 0 7 372 2858 1980 14 Dtool_Ns0b3sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
412 14 Dtool_Ns0bYM3h 0 7 372 2858 1980 14 Dtool_Ns0bYM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
413 14 Dtool_Ns0bn621 0 7 373 2858 1980 14 Dtool_Ns0bn621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
414 14 Dtool_Ns0boQbv 0 7 373 2858 1980 14 Dtool_Ns0boQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
415 14 Dtool_Ns0b5s4e 0 7 374 2858 1980 14 Dtool_Ns0b5s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
416 14 Dtool_Ns0bjBqg 0 7 374 2858 1980 14 Dtool_Ns0bjBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
417 14 Dtool_Ns0bvT2J 0 7 375 2858 1980 14 Dtool_Ns0bvT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
418 14 Dtool_Ns0b1_pL 0 7 375 2858 1980 14 Dtool_Ns0b1_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
419 14 Dtool_Ns0bxPd_ 0 7 376 2858 1980 14 Dtool_Ns0bxPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
420 14 Dtool_Ns0bUzPA 0 7 376 2858 1980 14 Dtool_Ns0bUzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
421 14 Dtool_Ns0bhSqR 0 7 377 2858 1980 14 Dtool_Ns0bhSqR 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2818  3 fwd 1 2818  2 up 1 2818  2 cs 1 2782  
422 14 Dtool_Ns0bUW9c 0 7 377 2858 1980 14 Dtool_Ns0bUW9c 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2818  3 fwd 1 2818  2 up 1 2818  
423 14 Dtool_Ns0bfg_v 0 4 378 2820 0 14 Dtool_Ns0bfg_v 0 3 4 this 3 2859  3 out 1 2826  10 class_name 1 2823  
424 14 Dtool_Ns0bg4QZ 0 7 379 2835 0 14 Dtool_Ns0bg4QZ 0 0 
425 14 Dtool_Ns0bDyhn 0 7 382 2861 2014 14 Dtool_Ns0bDyhn 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
426 14 Dtool_Ns0bvfOH 0 7 382 2861 2014 14 Dtool_Ns0bvfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2856  
427 14 Dtool_Ns0bvhGS 0 7 382 2861 2014 14 Dtool_Ns0bvhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
428 14 Dtool_Ns0b_Wm1 0 7 382 2861 2014 14 Dtool_Ns0b_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2839  1 y 1 2839  1 z 1 2839  
429 14 Dtool_Ns0bzYfy 0 6 383 2861 0 14 Dtool_Ns0bzYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  4 copy 1 2856  
430 14 Dtool_Ns0bpe8O 0 6 383 2861 0 14 Dtool_Ns0bpe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  10 fill_value 1 2839  
431 14 Dtool_Ns0bGUhb 0 6 384 2821 0 14 Dtool_Ns0bGUhb 0 2 4 this 3 2862  9 attr_name 1 2823  
432 14 Dtool_Ns0bwLXl 0 6 385 2824 0 14 Dtool_Ns0bwLXl 0 4 4 this 3 2861  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
433 14 Dtool_Ns0b3lRk 0 6 386 2862 0 14 Dtool_Ns0b3lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
434 14 Dtool_Ns0bp3Z5 0 6 387 2862 0 14 Dtool_Ns0bp3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_Ns0bpbR_ 0 6 388 2862 0 14 Dtool_Ns0bpbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
436 14 Dtool_Ns0bo_KD 0 6 389 2862 0 14 Dtool_Ns0bo_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
437 14 Dtool_Ns0bUj_9 0 7 390 2843 1770 14 Dtool_Ns0bUj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2862  
438 14 Dtool_Ns0bVP4C 0 7 391 2843 1770 14 Dtool_Ns0bVP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2862  
439 14 Dtool_Ns0bt_BD 0 7 392 2843 1770 14 Dtool_Ns0bt_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2862  
440 14 Dtool_Ns0bPtNF 0 7 393 2861 2014 14 Dtool_Ns0bPtNF 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2862  
441 14 Dtool_Ns0bhqqm 0 7 394 2855 1882 14 Dtool_Ns0bhqqm 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2856  
442 14 Dtool_Ns0bzxUB 0 7 394 2861 2014 14 Dtool_Ns0bzxUB 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
443 14 Dtool_Ns0bBpRn 0 7 395 2855 1882 14 Dtool_Ns0bBpRn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2856  
444 14 Dtool_Ns0bTs7B 0 7 395 2861 2014 14 Dtool_Ns0bTs7B 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
445 14 Dtool_Ns0bPzz8 0 7 396 2861 2014 14 Dtool_Ns0bPzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2856  
446 14 Dtool_Ns0biGg1 0 7 397 2861 2014 14 Dtool_Ns0biGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  4 onto 1 2856  
447 14 Dtool_Ns0b_6Zy 0 6 398 2839 0 14 Dtool_Ns0b_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
448 14 Dtool_Ns0blnWj 0 6 399 2839 0 14 Dtool_Ns0blnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
449 14 Dtool_Ns0bI_w4 0 6 400 2839 0 14 Dtool_Ns0bI_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2862  5 other 1 2862  3 ref 1 2862  
450 14 Dtool_Ns0blWg1 0 6 401 2839 0 14 Dtool_Ns0blWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2862  5 other 1 2862  3 ref 1 2862  
451 14 Dtool_Ns0bl1PE 0 6 402 2839 0 14 Dtool_Ns0bl1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
452 14 Dtool_Ns0bZkXK 0 6 403 2839 0 14 Dtool_Ns0bZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 other 1 2862  
453 14 Dtool_Ns0b_54j 0 7 404 2861 2014 14 Dtool_Ns0b_54j 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  6 scalar 1 2839  
454 14 Dtool_Ns0buQal 0 7 405 2861 2014 14 Dtool_Ns0buQal 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  6 scalar 1 2839  
455 14 Dtool_Ns0b8N5k 0 7 406 2861 2014 14 Dtool_Ns0b8N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
456 14 Dtool_Ns0bI8sB 0 7 406 2861 2014 14 Dtool_Ns0bI8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_Ns0bQtOm 0 7 407 2861 2014 14 Dtool_Ns0bQtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
458 14 Dtool_Ns0bxMXe 0 7 407 2861 2014 14 Dtool_Ns0bxMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
459 14 Dtool_Ns0b8FXy 0 7 408 2861 2014 14 Dtool_Ns0b8FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
460 14 Dtool_Ns0bPT7r 0 7 408 2861 2014 14 Dtool_Ns0bPT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
461 14 Dtool_Ns0bgtYb 0 7 409 2861 2014 14 Dtool_Ns0bgtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
462 14 Dtool_Ns0bKBKd 0 7 409 2861 2014 14 Dtool_Ns0bKBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
463 14 Dtool_Ns0b2UWG 0 7 410 2861 2014 14 Dtool_Ns0b2UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
464 14 Dtool_Ns0bcxJI 0 7 410 2861 2014 14 Dtool_Ns0bcxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
465 14 Dtool_Ns0bWP96 0 7 411 2861 2014 14 Dtool_Ns0bWP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
466 14 Dtool_Ns0bMyv8 0 7 411 2861 2014 14 Dtool_Ns0bMyv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
467 14 Dtool_Ns0buPAa 0 7 412 2861 2014 14 Dtool_Ns0buPAa 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2839  3 fwd 1 2839  2 up 1 2839  2 cs 1 2782  
468 14 Dtool_Ns0bnVMh 0 7 412 2861 2014 14 Dtool_Ns0bnVMh 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2839  3 fwd 1 2839  2 up 1 2839  
469 14 Dtool_Ns0b2jes 0 4 413 2820 0 14 Dtool_Ns0b2jes 0 3 4 this 3 2862  3 out 1 2826  10 class_name 1 2823  
470 14 Dtool_Ns0bH5wV 0 7 414 2835 0 14 Dtool_Ns0bH5wV 0 0 
471 14 Dtool_Ns0bz3Qe 0 7 417 2864 2037 14 Dtool_Ns0bz3Qe 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
472 14 Dtool_Ns0bb_6E 0 7 417 2864 2037 14 Dtool_Ns0bb_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2853  
473 14 Dtool_Ns0bCO2W 0 7 417 2864 2037 14 Dtool_Ns0bCO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
474 14 Dtool_Ns0bMxu6 0 7 417 2864 2037 14 Dtool_Ns0bMxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2818  1 y 1 2818  1 z 1 2818  
475 14 Dtool_Ns0bJ6xP 0 6 418 2864 0 14 Dtool_Ns0bJ6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  4 copy 1 2853  
476 14 Dtool_Ns0bqkxL 0 6 418 2864 0 14 Dtool_Ns0bqkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  10 fill_value 1 2818  
477 14 Dtool_Ns0bPEjO 0 6 419 2821 0 14 Dtool_Ns0bPEjO 0 2 4 this 3 2865  9 attr_name 1 2823  
478 14 Dtool_Ns0bbPzi 0 6 420 2824 0 14 Dtool_Ns0bbPzi 0 4 4 this 3 2864  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
479 14 Dtool_Ns0bqu74 0 6 421 2865 0 14 Dtool_Ns0bqu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
480 14 Dtool_Ns0bCPkF 0 6 422 2865 0 14 Dtool_Ns0bCPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
481 14 Dtool_Ns0baeuF 0 6 423 2865 0 14 Dtool_Ns0baeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
482 14 Dtool_Ns0bSp3F 0 6 424 2865 0 14 Dtool_Ns0bSp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
483 14 Dtool_Ns0bxis3 0 7 425 2846 1786 14 Dtool_Ns0bxis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
484 14 Dtool_Ns0bpT23 0 7 426 2846 1786 14 Dtool_Ns0bpT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
485 14 Dtool_Ns0bLH2n 0 7 427 2846 1786 14 Dtool_Ns0bLH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
486 14 Dtool_Ns0b0M7V 0 7 428 2864 2037 14 Dtool_Ns0b0M7V 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
487 14 Dtool_Ns0b_4Xx 0 7 429 2852 1812 14 Dtool_Ns0b_4Xx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2853  
488 14 Dtool_Ns0bg12J 0 7 429 2864 2037 14 Dtool_Ns0bg12J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2859  
489 14 Dtool_Ns0bSFwU 0 7 430 2858 1980 14 Dtool_Ns0bSFwU 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2865  
490 14 Dtool_Ns0bBLZx 0 7 430 2852 1812 14 Dtool_Ns0bBLZx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2853  
491 14 Dtool_Ns0bfn3J 0 7 430 2864 2037 14 Dtool_Ns0bfn3J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2859  
492 14 Dtool_Ns0b3m20 0 7 431 2864 2037 14 Dtool_Ns0b3m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 other 1 2853  
493 14 Dtool_Ns0bPmL9 0 7 432 2864 2037 14 Dtool_Ns0bPmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  4 onto 1 2853  
494 14 Dtool_Ns0bUCf8 0 7 433 2864 2037 14 Dtool_Ns0bUCf8 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  6 scalar 1 2818  
495 14 Dtool_Ns0brOic 0 7 434 2864 2037 14 Dtool_Ns0brOic 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  6 scalar 1 2818  
496 14 Dtool_Ns0bVRyH 0 7 435 2864 2037 14 Dtool_Ns0bVRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
497 14 Dtool_Ns0bM16_ 0 7 435 2864 2037 14 Dtool_Ns0bM16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
498 14 Dtool_Ns0bkaIy 0 7 436 2864 2037 14 Dtool_Ns0bkaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2818  3 fwd 1 2818  2 up 1 2818  2 cs 1 2782  
499 14 Dtool_Ns0b2tjk 0 7 436 2864 2037 14 Dtool_Ns0b2tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2818  3 fwd 1 2818  2 up 1 2818  
500 14 Dtool_Ns0bFpCv 0 4 437 2820 0 14 Dtool_Ns0bFpCv 0 3 4 this 3 2865  3 out 1 2826  10 class_name 1 2823  
501 14 Dtool_Ns0bnkbU 0 7 438 2835 0 14 Dtool_Ns0bnkbU 0 0 
502 14 Dtool_Ns0bt3tX 0 7 441 2867 2060 14 Dtool_Ns0bt3tX 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
503 14 Dtool_Ns0bSkXG 0 7 441 2867 2060 14 Dtool_Ns0bSkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2856  
504 14 Dtool_Ns0b3ZYu 0 7 441 2867 2060 14 Dtool_Ns0b3ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
505 14 Dtool_Ns0bk1qU 0 7 441 2867 2060 14 Dtool_Ns0bk1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2839  1 y 1 2839  1 z 1 2839  
506 14 Dtool_Ns0bLoO_ 0 6 442 2867 0 14 Dtool_Ns0bLoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  4 copy 1 2856  
507 14 Dtool_Ns0bMIGK 0 6 442 2867 0 14 Dtool_Ns0bMIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  10 fill_value 1 2839  
508 14 Dtool_Ns0bOEcA 0 6 443 2821 0 14 Dtool_Ns0bOEcA 0 2 4 this 3 2868  9 attr_name 1 2823  
509 14 Dtool_Ns0baPsU 0 6 444 2824 0 14 Dtool_Ns0baPsU 0 4 4 this 3 2867  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
510 14 Dtool_Ns0bru0q 0 6 445 2868 0 14 Dtool_Ns0bru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
511 14 Dtool_Ns0bAPd3 0 6 446 2868 0 14 Dtool_Ns0bAPd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
512 14 Dtool_Ns0bYen3 0 6 447 2868 0 14 Dtool_Ns0bYen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
513 14 Dtool_Ns0bQpw3 0 6 448 2868 0 14 Dtool_Ns0bQpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
514 14 Dtool_Ns0bOilp 0 7 449 2849 1802 14 Dtool_Ns0bOilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
515 14 Dtool_Ns0bWTvp 0 7 450 2849 1802 14 Dtool_Ns0bWTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
516 14 Dtool_Ns0bIHvZ 0 7 451 2849 1802 14 Dtool_Ns0bIHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
517 14 Dtool_Ns0b1M0H 0 7 452 2867 2060 14 Dtool_Ns0b1M0H 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
518 14 Dtool_Ns0b9u0g 0 7 453 2855 1882 14 Dtool_Ns0b9u0g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2856  
519 14 Dtool_Ns0b6tq7 0 7 453 2867 2060 14 Dtool_Ns0b6tq7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2862  
520 14 Dtool_Ns0bHBoO 0 7 454 2861 2014 14 Dtool_Ns0bHBoO 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2868  
521 14 Dtool_Ns0bC51g 0 7 454 2855 1882 14 Dtool_Ns0bC51g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2856  
522 14 Dtool_Ns0b9fr7 0 7 454 2867 2060 14 Dtool_Ns0b9fr7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2862  
523 14 Dtool_Ns0bwvhl 0 7 455 2867 2060 14 Dtool_Ns0bwvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  5 other 1 2856  
524 14 Dtool_Ns0bjmUN 0 7 456 2867 2060 14 Dtool_Ns0bjmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  4 onto 1 2856  
525 14 Dtool_Ns0brZwG 0 7 457 2867 2060 14 Dtool_Ns0brZwG 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  6 scalar 1 2839  
526 14 Dtool_Ns0b6cym 0 7 458 2867 2060 14 Dtool_Ns0b6cym 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  6 scalar 1 2839  
527 14 Dtool_Ns0bXRr5 0 7 459 2867 2060 14 Dtool_Ns0bXRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2782  
528 14 Dtool_Ns0bN1zx 0 7 459 2867 2060 14 Dtool_Ns0bN1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
529 14 Dtool_Ns0bx8Y0 0 7 460 2867 2060 14 Dtool_Ns0bx8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2839  3 fwd 1 2839  2 up 1 2839  2 cs 1 2782  
530 14 Dtool_Ns0bs_qG 0 7 460 2867 2060 14 Dtool_Ns0bs_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2839  3 fwd 1 2839  2 up 1 2839  
531 14 Dtool_Ns0bEp7g 0 4 461 2820 0 14 Dtool_Ns0bEp7g 0 3 4 this 3 2868  3 out 1 2826  10 class_name 1 2823  
532 14 Dtool_Ns0bmkUG 0 7 462 2835 0 14 Dtool_Ns0bmkUG 0 0 
533 14 Dtool_Ns0b5kRY 0 7 465 2870 2071 14 Dtool_Ns0b5kRY 718 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
534 14 Dtool_Ns0bdTtd 0 7 465 2870 2071 14 Dtool_Ns0bdTtd 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
535 14 Dtool_Ns0baF0L 0 7 465 2870 2071 14 Dtool_Ns0baF0L 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2873  
536 14 Dtool_Ns0bity7 0 7 465 2870 2071 14 Dtool_Ns0bity7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
537 14 Dtool_Ns0bDRvG 0 7 465 2870 2071 14 Dtool_Ns0bDRvG 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
538 14 Dtool_Ns0bXuCG 0 6 466 2870 0 14 Dtool_Ns0bXuCG 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  4 copy 1 2871  
539 14 Dtool_Ns0bURI0 0 6 466 2870 0 14 Dtool_Ns0bURI0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  4 copy 1 2873  
540 14 Dtool_Ns0bGYHk 0 6 466 2870 0 14 Dtool_Ns0bGYHk 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  10 fill_value 1 2818  
541 14 Dtool_Ns0bYOHd 0 4 467 2820 0 14 Dtool_Ns0bYOHd 0 2 4 this 3 2870  4 size 1 2819  
542 14 Dtool_Ns0bmHPT 0 6 470 2871 0 14 Dtool_Ns0bmHPT 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
543 14 Dtool_Ns0bxCF3 0 6 471 2871 0 14 Dtool_Ns0bxCF3 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
544 14 Dtool_Ns0bMdTT 0 6 472 2871 0 14 Dtool_Ns0bMdTT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
545 14 Dtool_Ns0bOdhv 0 6 473 2871 0 14 Dtool_Ns0bOdhv 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
546 14 Dtool_Ns0b3C3a 0 6 474 2871 0 14 Dtool_Ns0b3C3a 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
547 14 Dtool_Ns0b2iko 0 6 476 2821 0 14 Dtool_Ns0b2iko 0 2 4 this 3 2871  4 self 1 2821  
548 14 Dtool_Ns0b_QT_ 0 6 477 2821 0 14 Dtool_Ns0b_QT_ 0 2 4 this 3 2871  9 attr_name 1 2823  
549 14 Dtool_Ns0buRI7 0 6 478 2824 0 14 Dtool_Ns0buRI7 0 4 4 this 3 2870  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
550 14 Dtool_Ns0bBy34 0 4 479 2820 0 14 Dtool_Ns0bBy34 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  1 i 1 2824  
551 14 Dtool_Ns0bTrrV 0 6 479 2818 0 14 Dtool_Ns0bTrrV 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  1 i 1 2824  
552 14 Dtool_Ns0bWM5I 0 4 480 2820 0 14 Dtool_Ns0bWM5I 0 3 4 this 3 2870  1 i 1 2824  1 v 1 2818  
553 14 Dtool_Ns0b3Z_8 0 6 481 2824 0 14 Dtool_Ns0b3Z_8 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
554 14 Dtool_Ns0bx62D 0 6 482 2825 0 14 Dtool_Ns0bx62D 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
555 14 Dtool_Ns0bd_Pp 0 6 483 2818 0 14 Dtool_Ns0bd_Pp 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  1 i 1 2824  
556 14 Dtool_Ns0bJYvU 0 6 484 2818 0 14 Dtool_Ns0bJYvU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
557 14 Dtool_Ns0bJ8oZ 0 6 485 2818 0 14 Dtool_Ns0bJ8oZ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
558 14 Dtool_Ns0bJQge 0 6 486 2818 0 14 Dtool_Ns0bJQge 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
559 14 Dtool_Ns0bJE3P 0 6 487 2818 0 14 Dtool_Ns0bJE3P 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
560 14 Dtool_Ns0bAQHX 0 4 488 2820 0 14 Dtool_Ns0bAQHX 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2870  1 i 1 2824  5 value 1 2818  
561 14 Dtool_Ns0bJuJp 0 4 489 2820 0 14 Dtool_Ns0bJuJp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
562 14 Dtool_Ns0bJKCu 0 4 490 2820 0 14 Dtool_Ns0bJKCu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
563 14 Dtool_Ns0bJW6y 0 4 491 2820 0 14 Dtool_Ns0bJW6y 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
564 14 Dtool_Ns0bJCRk 0 4 492 2820 0 14 Dtool_Ns0bJCRk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
565 14 Dtool_Ns0bzyHW 0 4 493 2820 0 14 Dtool_Ns0bzyHW 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2870  1 i 1 2824  5 value 1 2818  
566 14 Dtool_Ns0bmmmn 0 4 494 2820 0 14 Dtool_Ns0bmmmn 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
567 14 Dtool_Ns0bmCfs 0 4 495 2820 0 14 Dtool_Ns0bmCfs 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
568 14 Dtool_Ns0bmuXx 0 4 496 2820 0 14 Dtool_Ns0bmuXx 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
569 14 Dtool_Ns0bmaui 0 4 497 2820 0 14 Dtool_Ns0bmaui 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 value 1 2818  
570 14 Dtool_Ns0bXRyH 0 4 498 2820 0 14 Dtool_Ns0bXRyH 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
571 14 Dtool_Ns0b0F36 0 6 499 2824 0 14 Dtool_Ns0b0F36 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
572 14 Dtool_Ns0bW1HJ 0 4 500 2820 0 14 Dtool_Ns0bW1HJ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  10 fill_value 1 2818  
573 14 Dtool_Ns0b__rX 0 4 501 2820 0 14 Dtool_Ns0b__rX 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2870  1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
574 14 Dtool_Ns0b0Yo_ 0 6 502 2818 0 14 Dtool_Ns0b0Yo_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
575 14 Dtool_Ns0bxUcf 0 6 503 2818 0 14 Dtool_Ns0bxUcf 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
576 14 Dtool_Ns0bSsCV 0 6 504 2825 0 14 Dtool_Ns0bSsCV 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2870  
577 14 Dtool_Ns0b2052 0 6 505 2818 0 14 Dtool_Ns0b2052 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
578 14 Dtool_Ns0bMsWY 0 7 506 2870 2071 14 Dtool_Ns0bMsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  4 onto 1 2871  
579 14 Dtool_Ns0bxlvx 0 6 507 2825 0 14 Dtool_Ns0bxlvx 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
580 14 Dtool_Ns0bauYz 0 6 508 2825 0 14 Dtool_Ns0bauYz 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
581 14 Dtool_Ns0bmNAi 0 6 509 2825 0 14 Dtool_Ns0bmNAi 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
582 14 Dtool_Ns0btXnx 0 6 510 2824 0 14 Dtool_Ns0btXnx 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
583 14 Dtool_Ns0bIZYW 0 6 510 2824 0 14 Dtool_Ns0bIZYW 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2871  5 other 1 2871  9 threshold 1 2818  
584 14 Dtool_Ns0bdiZ0 0 6 511 2819 0 14 Dtool_Ns0bdiZ0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
585 14 Dtool_Ns0bzn_6 0 6 511 2819 0 14 Dtool_Ns0bzn_6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  9 threshold 1 2818  
586 14 Dtool_Ns0br3PD 0 6 512 2819 0 14 Dtool_Ns0br3PD 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  4 hash 1 2819  
587 14 Dtool_Ns0bNEBo 0 6 512 2819 0 14 Dtool_Ns0bNEBo 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2871  4 hash 1 2819  9 threshold 1 2818  
588 14 Dtool_Ns0bPOux 0 7 513 2870 2071 14 Dtool_Ns0bPOux 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
589 14 Dtool_Ns0bztwL 0 7 514 2870 2071 14 Dtool_Ns0bztwL 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
590 14 Dtool_Ns0bzdSf 0 7 515 2870 2071 14 Dtool_Ns0bzdSf 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
591 14 Dtool_Ns0breVF 0 7 516 2870 2071 14 Dtool_Ns0breVF 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  6 scalar 1 2818  
592 14 Dtool_Ns0br2J2 0 7 517 2870 2071 14 Dtool_Ns0br2J2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  6 scalar 1 2818  
593 14 Dtool_Ns0btr3T 0 6 518 2870 0 14 Dtool_Ns0btr3T 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2871  
594 14 Dtool_Ns0btbZn 0 6 519 2870 0 14 Dtool_Ns0btbZn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2871  
595 14 Dtool_Ns0b7ZPM 0 6 520 2870 0 14 Dtool_Ns0b7ZPM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 scalar 1 2818  
596 14 Dtool_Ns0b7hD9 0 6 521 2870 0 14 Dtool_Ns0b7hD9 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 scalar 1 2818  
597 14 Dtool_Ns0bjRaJ 0 7 522 2870 2071 14 Dtool_Ns0bjRaJ 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2871  
598 14 Dtool_Ns0bBC7H 0 7 523 2870 2071 14 Dtool_Ns0bBC7H 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2871  
599 14 Dtool_Ns0byKzg 0 6 524 2825 0 14 Dtool_Ns0byKzg 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  5 other 1 2871  
600 14 Dtool_Ns0b__lQ 0 6 524 2825 0 14 Dtool_Ns0b__lQ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2871  5 other 1 2871  9 threshold 1 2818  
601 14 Dtool_Ns0bQPcK 0 4 525 2820 0 14 Dtool_Ns0bQPcK 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  3 out 1 2826  
602 14 Dtool_Ns0bFM3d 0 4 526 2820 0 14 Dtool_Ns0bFM3d 0 3 4 this 3 2871  3 out 1 2826  10 class_name 1 2823  
603 14 Dtool_Ns0b1RZF 0 4 527 2820 0 14 Dtool_Ns0b1RZF 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  7 hashgen 1 2828  
604 14 Dtool_Ns0b9JVR 0 4 527 2820 0 14 Dtool_Ns0b9JVR 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2871  7 hashgen 1 2828  9 threshold 1 2818  
605 14 Dtool_Ns0b3_B4 0 4 528 2820 0 14 Dtool_Ns0b3_B4 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  11 destination 1 2830  
606 14 Dtool_Ns0b3Ii0 0 4 529 2820 0 14 Dtool_Ns0b3Ii0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 source 1 2832  
607 14 Dtool_Ns0bZM70 0 4 530 2820 0 14 Dtool_Ns0bZM70 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  11 destination 1 2830  
608 14 Dtool_Ns0bec8G 0 4 531 2820 0 14 Dtool_Ns0bec8G 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 source 1 2832  
609 14 Dtool_Ns0bhKuD 0 7 532 2835 0 14 Dtool_Ns0bhKuD 0 0 
610 14 Dtool_Ns0bfbHX 0 7 534 2875 2138 14 Dtool_Ns0bfbHX 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
611 14 Dtool_Ns0bVhK6 0 7 534 2875 2138 14 Dtool_Ns0bVhK6 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
612 14 Dtool_Ns0bgd2S 0 7 534 2875 2138 14 Dtool_Ns0bgd2S 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2873  
613 14 Dtool_Ns0bl_vc 0 7 534 2875 2138 14 Dtool_Ns0bl_vc 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
614 14 Dtool_Ns0beh2_ 0 6 535 2875 0 14 Dtool_Ns0beh2_ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  4 copy 1 2871  
615 14 Dtool_Ns0bL5oF 0 6 535 2875 0 14 Dtool_Ns0bL5oF 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  4 copy 1 2873  
616 14 Dtool_Ns0bDDFq 0 4 536 2820 0 14 Dtool_Ns0bDDFq 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2875  1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
617 14 Dtool_Ns0b_xRe 0 4 537 2820 0 14 Dtool_Ns0b_xRe 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  1 i 1 2824  
618 14 Dtool_Ns0b2P3h 0 6 537 2818 0 14 Dtool_Ns0b2P3h 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  1 i 1 2824  
619 14 Dtool_Ns0bU4PA 0 4 538 2820 0 14 Dtool_Ns0bU4PA 0 3 4 this 3 2875  1 i 1 2824  1 v 1 2818  
620 14 Dtool_Ns0btqyW 0 6 539 2824 0 14 Dtool_Ns0btqyW 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
621 14 Dtool_Ns0b7GHI 0 4 540 2820 0 14 Dtool_Ns0b7GHI 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
622 14 Dtool_Ns0bfmbG 0 6 541 2824 0 14 Dtool_Ns0bfmbG 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
623 14 Dtool_Ns0bIBnP 0 7 542 2835 0 14 Dtool_Ns0bIBnP 0 0 
624 14 Dtool_Ns0bfAuU 0 7 545 2876 2149 14 Dtool_Ns0bfAuU 718 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
625 14 Dtool_Ns0bKfrW 0 7 545 2876 2149 14 Dtool_Ns0bKfrW 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
626 14 Dtool_Ns0b6Q3P 0 7 545 2876 2149 14 Dtool_Ns0b6Q3P 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
627 14 Dtool_Ns0b5BJ_ 0 7 545 2876 2149 14 Dtool_Ns0b5BJ_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
628 14 Dtool_Ns0bGENf 0 7 545 2876 2149 14 Dtool_Ns0bGENf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
629 14 Dtool_Ns0be6iS 0 6 546 2876 0 14 Dtool_Ns0be6iS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  4 copy 1 2877  
630 14 Dtool_Ns0by8tL 0 6 546 2876 0 14 Dtool_Ns0by8tL 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  4 copy 1 2879  
631 14 Dtool_Ns0bIM_5 0 6 546 2876 0 14 Dtool_Ns0bIM_5 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  10 fill_value 1 2839  
632 14 Dtool_Ns0b26Ht 0 4 547 2820 0 14 Dtool_Ns0b26Ht 0 2 4 this 3 2876  4 size 1 2819  
633 14 Dtool_Ns0bYrPj 0 6 550 2877 0 14 Dtool_Ns0bYrPj 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
634 14 Dtool_Ns0bQxFH 0 6 551 2877 0 14 Dtool_Ns0bQxFH 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
635 14 Dtool_Ns0bSxTj 0 6 552 2877 0 14 Dtool_Ns0bSxTj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
636 14 Dtool_Ns0bsxh_ 0 6 553 2877 0 14 Dtool_Ns0bsxh_ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
637 14 Dtool_Ns0bVx3q 0 6 554 2877 0 14 Dtool_Ns0bVx3q 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
638 14 Dtool_Ns0bQxk4 0 6 556 2821 0 14 Dtool_Ns0bQxk4 0 2 4 this 3 2877  4 self 1 2821  
639 14 Dtool_Ns0bQeSO 0 6 557 2821 0 14 Dtool_Ns0bQeSO 0 2 4 this 3 2877  9 attr_name 1 2823  
640 14 Dtool_Ns0bQMJL 0 6 558 2824 0 14 Dtool_Ns0bQMJL 0 4 4 this 3 2876  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
641 14 Dtool_Ns0bmm3I 0 4 559 2820 0 14 Dtool_Ns0bmm3I 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  1 i 1 2824  
642 14 Dtool_Ns0b1Hrl 0 6 559 2839 0 14 Dtool_Ns0b1Hrl 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  1 i 1 2824  
643 14 Dtool_Ns0bglMR 0 4 560 2820 0 14 Dtool_Ns0bglMR 0 3 4 this 3 2876  1 i 1 2824  1 v 1 2839  
644 14 Dtool_Ns0bWK_M 0 6 561 2824 0 14 Dtool_Ns0bWK_M 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
645 14 Dtool_Ns0bPu2T 0 6 562 2825 0 14 Dtool_Ns0bPu2T 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
646 14 Dtool_Ns0b_qP5 0 6 563 2839 0 14 Dtool_Ns0b_qP5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  1 i 1 2824  
647 14 Dtool_Ns0brtvk 0 6 564 2839 0 14 Dtool_Ns0brtvk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
648 14 Dtool_Ns0brJop 0 6 565 2839 0 14 Dtool_Ns0brJop 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
649 14 Dtool_Ns0brlgu 0 6 566 2839 0 14 Dtool_Ns0brlgu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
650 14 Dtool_Ns0brx3f 0 6 567 2839 0 14 Dtool_Ns0brx3f 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
651 14 Dtool_Ns0bf_AA 0 4 568 2820 0 14 Dtool_Ns0bf_AA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2876  1 i 1 2824  5 value 1 2839  
652 14 Dtool_Ns0bjGFc 0 4 569 2820 0 14 Dtool_Ns0bjGFc 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
653 14 Dtool_Ns0bji9g 0 4 570 2820 0 14 Dtool_Ns0bji9g 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
654 14 Dtool_Ns0bje2l 0 4 571 2820 0 14 Dtool_Ns0bje2l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
655 14 Dtool_Ns0bjqMX 0 4 572 2820 0 14 Dtool_Ns0bjqMX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
656 14 Dtool_Ns0bfMae 0 4 573 2820 0 14 Dtool_Ns0bfMae 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2876  1 i 1 2824  5 value 1 2839  
657 14 Dtool_Ns0bARia 0 4 574 2820 0 14 Dtool_Ns0bARia 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
658 14 Dtool_Ns0bA1af 0 4 575 2820 0 14 Dtool_Ns0bA1af 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
659 14 Dtool_Ns0bAZTk 0 4 576 2820 0 14 Dtool_Ns0bAZTk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
660 14 Dtool_Ns0bANqV 0 4 577 2820 0 14 Dtool_Ns0bANqV 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 value 1 2839  
661 14 Dtool_Ns0bx8zX 0 4 578 2820 0 14 Dtool_Ns0bx8zX 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
662 14 Dtool_Ns0bXx2K 0 6 579 2824 0 14 Dtool_Ns0bXx2K 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
663 14 Dtool_Ns0bFbMg 0 4 580 2820 0 14 Dtool_Ns0bFbMg 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  10 fill_value 1 2839  
664 14 Dtool_Ns0bdT7O 0 4 581 2820 0 14 Dtool_Ns0bdT7O 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2876  1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
665 14 Dtool_Ns0bVEoP 0 6 582 2839 0 14 Dtool_Ns0bVEoP 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
666 14 Dtool_Ns0bTIcv 0 6 583 2839 0 14 Dtool_Ns0bTIcv 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
667 14 Dtool_Ns0bwBCl 0 6 584 2825 0 14 Dtool_Ns0bwBCl 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
668 14 Dtool_Ns0bVfrF 0 6 585 2839 0 14 Dtool_Ns0bVfrF 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
669 14 Dtool_Ns0bO3Ro 0 7 586 2876 2149 14 Dtool_Ns0bO3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  4 onto 1 2877  
670 14 Dtool_Ns0bzfP_ 0 6 587 2825 0 14 Dtool_Ns0bzfP_ 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
671 14 Dtool_Ns0beFYT 0 6 588 2825 0 14 Dtool_Ns0beFYT 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
672 14 Dtool_Ns0balAC 0 6 589 2825 0 14 Dtool_Ns0balAC 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
673 14 Dtool_Ns0b0LH_ 0 6 590 2824 0 14 Dtool_Ns0b0LH_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
674 14 Dtool_Ns0b319I 0 6 590 2824 0 14 Dtool_Ns0b319I 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2877  5 other 1 2877  9 threshold 1 2839  
675 14 Dtool_Ns0b8_ZE 0 6 591 2819 0 14 Dtool_Ns0b8_ZE 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
676 14 Dtool_Ns0bSwXj 0 6 591 2819 0 14 Dtool_Ns0bSwXj 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  9 threshold 1 2839  
677 14 Dtool_Ns0bJoPT 0 6 592 2819 0 14 Dtool_Ns0bJoPT 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  4 hash 1 2819  
678 14 Dtool_Ns0bXZGe 0 6 592 2819 0 14 Dtool_Ns0bXZGe 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2877  4 hash 1 2819  9 threshold 1 2839  
679 14 Dtool_Ns0bQyvB 0 7 593 2876 2149 14 Dtool_Ns0bQyvB 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2877  
680 14 Dtool_Ns0btXQY 0 7 594 2876 2149 14 Dtool_Ns0btXQY 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
681 14 Dtool_Ns0btnyr 0 7 595 2876 2149 14 Dtool_Ns0btnyr 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
682 14 Dtool_Ns0bW_WY 0 7 596 2876 2149 14 Dtool_Ns0bW_WY 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  6 scalar 1 2839  
683 14 Dtool_Ns0bXWNJ 0 7 597 2876 2149 14 Dtool_Ns0bXWNJ 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  6 scalar 1 2839  
684 14 Dtool_Ns0bhw2z 0 6 598 2876 0 14 Dtool_Ns0bhw2z 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2877  
685 14 Dtool_Ns0biAYH 0 6 599 2876 0 14 Dtool_Ns0biAYH 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2877  
686 14 Dtool_Ns0b5DXY 0 6 600 2876 0 14 Dtool_Ns0b5DXY 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 scalar 1 2839  
687 14 Dtool_Ns0b_7LJ 0 6 601 2876 0 14 Dtool_Ns0b_7LJ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 scalar 1 2839  
688 14 Dtool_Ns0b_0Xy 0 7 602 2876 2149 14 Dtool_Ns0b_0Xy 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2877  
689 14 Dtool_Ns0bdn2w 0 7 603 2876 2149 14 Dtool_Ns0bdn2w 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2877  
690 14 Dtool_Ns0bcoqw 0 6 604 2825 0 14 Dtool_Ns0bcoqw 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  5 other 1 2877  
691 14 Dtool_Ns0b9ILB 0 6 604 2825 0 14 Dtool_Ns0b9ILB 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2877  5 other 1 2877  9 threshold 1 2839  
692 14 Dtool_Ns0b1Bda 0 4 605 2820 0 14 Dtool_Ns0b1Bda 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  3 out 1 2826  
693 14 Dtool_Ns0beB2t 0 4 606 2820 0 14 Dtool_Ns0beB2t 0 3 4 this 3 2877  3 out 1 2826  10 class_name 1 2823  
694 14 Dtool_Ns0brlZV 0 4 607 2820 0 14 Dtool_Ns0brlZV 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  7 hashgen 1 2828  
695 14 Dtool_Ns0bMhf5 0 4 607 2820 0 14 Dtool_Ns0bMhf5 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2877  7 hashgen 1 2828  9 threshold 1 2839  
696 14 Dtool_Ns0bQsBI 0 4 608 2820 0 14 Dtool_Ns0bQsBI 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  11 destination 1 2830  
697 14 Dtool_Ns0bUkiE 0 4 609 2820 0 14 Dtool_Ns0bUkiE 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 source 1 2832  
698 14 Dtool_Ns0bjJ6E 0 4 610 2820 0 14 Dtool_Ns0bjJ6E 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2877  11 destination 1 2830  
699 14 Dtool_Ns0b4P8W 0 4 611 2820 0 14 Dtool_Ns0b4P8W 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 source 1 2832  
700 14 Dtool_Ns0bGAvT 0 7 612 2835 0 14 Dtool_Ns0bGAvT 0 0 
701 14 Dtool_Ns0bj4zI 0 7 614 2881 2216 14 Dtool_Ns0bj4zI 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
702 14 Dtool_Ns0bKsyE 0 7 614 2881 2216 14 Dtool_Ns0bKsyE 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
703 14 Dtool_Ns0b1Rq_ 0 7 614 2881 2216 14 Dtool_Ns0b1Rq_ 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
704 14 Dtool_Ns0bKT22 0 7 614 2881 2216 14 Dtool_Ns0bKT22 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
705 14 Dtool_Ns0b5na5 0 6 615 2881 0 14 Dtool_Ns0b5na5 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2881  4 copy 1 2877  
706 14 Dtool_Ns0b0fkQ 0 6 615 2881 0 14 Dtool_Ns0b0fkQ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2881  4 copy 1 2879  
707 14 Dtool_Ns0bB49g 0 4 616 2820 0 14 Dtool_Ns0bB49g 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2881  1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
708 14 Dtool_Ns0bT8QQ 0 4 617 2820 0 14 Dtool_Ns0bT8QQ 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2881  1 i 1 2824  
709 14 Dtool_Ns0bSI3T 0 6 617 2839 0 14 Dtool_Ns0bSI3T 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 i 1 2824  
710 14 Dtool_Ns0bsMSh 0 4 618 2820 0 14 Dtool_Ns0bsMSh 0 3 4 this 3 2881  1 i 1 2824  1 v 1 2839  
711 14 Dtool_Ns0bYnzI 0 6 619 2824 0 14 Dtool_Ns0bYnzI 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
712 14 Dtool_Ns0bY7H6 0 4 620 2820 0 14 Dtool_Ns0bY7H6 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
713 14 Dtool_Ns0bihb4 0 6 621 2824 0 14 Dtool_Ns0bihb4 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
714 14 Dtool_Ns0bkDnB 0 7 622 2835 0 14 Dtool_Ns0bkDnB 0 0 
715 14 Dtool_Ns0b2hGZ 0 7 625 2882 2234 14 Dtool_Ns0b2hGZ 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
716 14 Dtool_Ns0b55R7 0 7 625 2882 2234 14 Dtool_Ns0b55R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
717 14 Dtool_Ns0bIgP3 0 7 625 2882 2234 14 Dtool_Ns0bIgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
718 14 Dtool_Ns0bGLX9 0 7 625 2882 2234 14 Dtool_Ns0bGLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
719 14 Dtool_Ns0bq2Ys 0 6 626 2882 0 14 Dtool_Ns0bq2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2882  4 copy 1 2871  
720 14 Dtool_Ns0bRfUr 0 6 626 2882 0 14 Dtool_Ns0bRfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2882  10 fill_value 1 2818  
721 14 Dtool_Ns0bu3EG 0 6 627 2821 0 14 Dtool_Ns0bu3EG 0 2 4 this 3 2883  9 attr_name 1 2823  
722 14 Dtool_Ns0boq7P 0 6 628 2824 0 14 Dtool_Ns0boq7P 0 4 4 this 3 2882  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
723 14 Dtool_Ns0bPC0O 0 6 629 2883 0 14 Dtool_Ns0bPC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
724 14 Dtool_Ns0bxI8j 0 6 630 2883 0 14 Dtool_Ns0bxI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
725 14 Dtool_Ns0bxk1o 0 6 631 2883 0 14 Dtool_Ns0bxk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
726 14 Dtool_Ns0bxAtt 0 6 632 2883 0 14 Dtool_Ns0bxAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
727 14 Dtool_Ns0bxsEf 0 6 633 2883 0 14 Dtool_Ns0bxsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_Ns0bWMwv 0 7 634 2882 2234 14 Dtool_Ns0bWMwv 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
729 14 Dtool_Ns0bWUig 0 7 635 2870 2071 14 Dtool_Ns0bWUig 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  5 other 1 2871  
730 14 Dtool_Ns0bOmWu 0 7 635 2882 2234 14 Dtool_Ns0bOmWu 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  5 other 1 2883  
731 14 Dtool_Ns0b2RJh 0 7 636 2870 2071 14 Dtool_Ns0b2RJh 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  5 other 1 2871  
732 14 Dtool_Ns0buj9u 0 7 636 2882 2234 14 Dtool_Ns0buj9u 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  5 other 1 2883  
733 14 Dtool_Ns0bTPWC 0 7 637 2882 2234 14 Dtool_Ns0bTPWC 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  6 scalar 1 2818  
734 14 Dtool_Ns0bjn4D 0 7 638 2882 2234 14 Dtool_Ns0bjn4D 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  6 scalar 1 2818  
735 14 Dtool_Ns0bGh8I 0 7 639 2882 2234 14 Dtool_Ns0bGh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  4 onto 1 2871  
736 14 Dtool_Ns0beACX 0 4 640 2820 0 14 Dtool_Ns0beACX 0 3 4 this 3 2883  3 out 1 2826  10 class_name 1 2823  
737 14 Dtool_Ns0bvYTA 0 7 641 2835 0 14 Dtool_Ns0bvYTA 0 0 
738 14 Dtool_Ns0bSTkV 0 7 644 2885 2252 14 Dtool_Ns0bSTkV 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
739 14 Dtool_Ns0brcU1 0 7 644 2885 2252 14 Dtool_Ns0brcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
740 14 Dtool_Ns0b8AKA 0 7 644 2885 2252 14 Dtool_Ns0b8AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
741 14 Dtool_Ns0b72XI 0 7 644 2885 2252 14 Dtool_Ns0b72XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
742 14 Dtool_Ns0by3xa 0 6 645 2885 0 14 Dtool_Ns0by3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  4 copy 1 2877  
743 14 Dtool_Ns0bp_A2 0 6 645 2885 0 14 Dtool_Ns0bp_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  10 fill_value 1 2839  
744 14 Dtool_Ns0bJ0kC 0 6 646 2821 0 14 Dtool_Ns0bJ0kC 0 2 4 this 3 2886  9 attr_name 1 2823  
745 14 Dtool_Ns0bxrbM 0 6 647 2824 0 14 Dtool_Ns0bxrbM 0 4 4 this 3 2885  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
746 14 Dtool_Ns0b2FUL 0 6 648 2886 0 14 Dtool_Ns0b2FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
747 14 Dtool_Ns0boXcg 0 6 649 2886 0 14 Dtool_Ns0boXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
748 14 Dtool_Ns0bo7Vl 0 6 650 2886 0 14 Dtool_Ns0bo7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
749 14 Dtool_Ns0bofNq 0 6 651 2886 0 14 Dtool_Ns0bofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
750 14 Dtool_Ns0bozkb 0 6 652 2886 0 14 Dtool_Ns0bozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
751 14 Dtool_Ns0bPNQs 0 7 653 2885 2252 14 Dtool_Ns0bPNQs 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2886  
752 14 Dtool_Ns0buV7O 0 7 654 2876 2149 14 Dtool_Ns0buV7O 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  5 other 1 2877  
753 14 Dtool_Ns0bh1ao 0 7 654 2885 2252 14 Dtool_Ns0bh1ao 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  5 other 1 2886  
754 14 Dtool_Ns0bOQiP 0 7 655 2876 2149 14 Dtool_Ns0bOQiP 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  5 other 1 2877  
755 14 Dtool_Ns0bBwBp 0 7 655 2885 2252 14 Dtool_Ns0bBwBp 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  5 other 1 2886  
756 14 Dtool_Ns0b9Z8K 0 7 656 2885 2252 14 Dtool_Ns0b9Z8K 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  6 scalar 1 2839  
757 14 Dtool_Ns0btwdM 0 7 657 2885 2252 14 Dtool_Ns0btwdM 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  6 scalar 1 2839  
758 14 Dtool_Ns0b1mdN 0 7 658 2885 2252 14 Dtool_Ns0b1mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  4 onto 1 2877  
759 14 Dtool_Ns0bxDiT 0 4 659 2820 0 14 Dtool_Ns0bxDiT 0 3 4 this 3 2886  3 out 1 2826  10 class_name 1 2823  
760 14 Dtool_Ns0bHZz8 0 7 660 2835 0 14 Dtool_Ns0bHZz8 0 0 
761 14 Dtool_Ns0bzUXk 0 7 663 2888 2270 14 Dtool_Ns0bzUXk 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
762 14 Dtool_Ns0bSD57 0 7 663 2888 2270 14 Dtool_Ns0bSD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
763 14 Dtool_Ns0bCj8c 0 7 663 2888 2270 14 Dtool_Ns0bCj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2818  
764 14 Dtool_Ns0bzr8M 0 7 663 2888 2270 14 Dtool_Ns0bzr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2818  1 y 1 2818  1 z 1 2818  1 w 1 2818  
765 14 Dtool_Ns0bbZBR 0 6 664 2888 0 14 Dtool_Ns0bbZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2888  4 copy 1 2871  
766 14 Dtool_Ns0bqdAN 0 6 664 2888 0 14 Dtool_Ns0bqdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2888  10 fill_value 1 2818  
767 14 Dtool_Ns0bPNxP 0 6 665 2821 0 14 Dtool_Ns0bPNxP 0 2 4 this 3 2889  9 attr_name 1 2823  
768 14 Dtool_Ns0bbWBk 0 6 666 2824 0 14 Dtool_Ns0bbWBk 0 4 4 this 3 2888  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
769 14 Dtool_Ns0bq1J6 0 6 667 2889 0 14 Dtool_Ns0bq1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_Ns0bC0yG 0 6 668 2889 0 14 Dtool_Ns0bC0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
771 14 Dtool_Ns0baH8G 0 6 669 2889 0 14 Dtool_Ns0baH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
772 14 Dtool_Ns0bSWGH 0 6 670 2889 0 14 Dtool_Ns0bSWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
773 14 Dtool_Ns0bKloG 0 6 671 2889 0 14 Dtool_Ns0bKloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
774 14 Dtool_Ns0b0LJX 0 7 672 2888 2270 14 Dtool_Ns0b0LJX 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2889  
775 14 Dtool_Ns0bIcoy 0 7 673 2870 2071 14 Dtool_Ns0bIcoy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  5 other 1 2871  
776 14 Dtool_Ns0bopEn 0 7 673 2888 2270 14 Dtool_Ns0bopEn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  5 other 1 2883  
777 14 Dtool_Ns0bMM2G 0 7 674 2882 2234 14 Dtool_Ns0bMM2G 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  5 other 1 2889  
778 14 Dtool_Ns0bTupy 0 7 674 2870 2071 14 Dtool_Ns0bTupy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  5 other 1 2871  
779 14 Dtool_Ns0bXbFn 0 7 674 2888 2270 14 Dtool_Ns0bXbFn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  5 other 1 2883  
780 14 Dtool_Ns0bUdt9 0 7 675 2888 2270 14 Dtool_Ns0bUdt9 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  6 scalar 1 2818  
781 14 Dtool_Ns0brXwd 0 7 676 2888 2270 14 Dtool_Ns0brXwd 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  6 scalar 1 2818  
782 14 Dtool_Ns0bIt7R 0 7 677 2888 2270 14 Dtool_Ns0bIt7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  4 onto 1 2871  
783 14 Dtool_Ns0bFwQw 0 4 678 2820 0 14 Dtool_Ns0bFwQw 0 3 4 this 3 2889  3 out 1 2826  10 class_name 1 2823  
784 14 Dtool_Ns0bnbpV 0 7 679 2835 0 14 Dtool_Ns0bnbpV 0 0 
785 14 Dtool_Ns0btU0d 0 7 682 2891 2288 14 Dtool_Ns0btU0d 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
786 14 Dtool_Ns0bJZW9 0 7 682 2891 2288 14 Dtool_Ns0bJZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
787 14 Dtool_Ns0b36e0 0 7 682 2891 2288 14 Dtool_Ns0b36e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2839  
788 14 Dtool_Ns0bCpeG 0 7 682 2891 2288 14 Dtool_Ns0bCpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2839  1 y 1 2839  1 z 1 2839  1 w 1 2839  
789 14 Dtool_Ns0bYHeA 0 6 683 2891 0 14 Dtool_Ns0bYHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  4 copy 1 2877  
790 14 Dtool_Ns0bMxVL 0 6 683 2891 0 14 Dtool_Ns0bMxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  10 fill_value 1 2839  
791 14 Dtool_Ns0bONqB 0 6 684 2821 0 14 Dtool_Ns0bONqB 0 2 4 this 3 2892  9 attr_name 1 2823  
792 14 Dtool_Ns0baW6V 0 6 685 2824 0 14 Dtool_Ns0baW6V 0 4 4 this 3 2891  4 self 1 2821  9 attr_name 1 2823  6 assign 1 2821  
793 14 Dtool_Ns0br1Cs 0 6 686 2892 0 14 Dtool_Ns0br1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
794 14 Dtool_Ns0bA0r4 0 6 687 2892 0 14 Dtool_Ns0bA0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
795 14 Dtool_Ns0bYH14 0 6 688 2892 0 14 Dtool_Ns0bYH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
796 14 Dtool_Ns0bQW_4 0 6 689 2892 0 14 Dtool_Ns0bQW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
797 14 Dtool_Ns0bIlh4 0 6 690 2892 0 14 Dtool_Ns0bIlh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
798 14 Dtool_Ns0b1LCJ 0 7 691 2891 2288 14 Dtool_Ns0b1LCJ 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2892  
799 14 Dtool_Ns0bLSFi 0 7 692 2876 2149 14 Dtool_Ns0bLSFi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  5 other 1 2877  
800 14 Dtool_Ns0bzh4Y 0 7 692 2891 2288 14 Dtool_Ns0bzh4Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  5 other 1 2886  
801 14 Dtool_Ns0bxIuA 0 7 693 2885 2252 14 Dtool_Ns0bxIuA 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  5 other 1 2892  
802 14 Dtool_Ns0bQcGi 0 7 693 2876 2149 14 Dtool_Ns0bQcGi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  5 other 1 2877  
803 14 Dtool_Ns0b0T5Y 0 7 693 2891 2288 14 Dtool_Ns0b0T5Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  5 other 1 2886  
804 14 Dtool_Ns0bre_H 0 7 694 2891 2288 14 Dtool_Ns0bre_H 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  6 scalar 1 2839  
805 14 Dtool_Ns0b6DAo 0 7 695 2891 2288 14 Dtool_Ns0b6DAo 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  6 scalar 1 2839  
806 14 Dtool_Ns0bjtEi 0 7 696 2891 2288 14 Dtool_Ns0bjtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2892  4 onto 1 2877  
807 14 Dtool_Ns0bEwJi 0 4 697 2820 0 14 Dtool_Ns0bEwJi 0 3 4 this 3 2892  3 out 1 2826  10 class_name 1 2823  
808 14 Dtool_Ns0bmbiH 0 7 698 2835 0 14 Dtool_Ns0bmbiH 0 0 
809 14 Dtool_Ns0bl0PU 0 7 710 2894 2369 14 Dtool_Ns0bl0PU 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
810 14 Dtool_Ns0bsN2u 0 7 710 2894 2369 14 Dtool_Ns0bsN2u 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2895  
811 14 Dtool_Ns0bQz8c 0 7 710 2894 2369 14 Dtool_Ns0bQz8c 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  
812 14 Dtool_Ns0bWGVN 0 6 711 2894 0 14 Dtool_Ns0bWGVN 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
813 14 Dtool_Ns0bOZp_ 0 6 711 2894 0 14 Dtool_Ns0bOZp_ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  10 fill_value 1 2818  
814 14 Dtool_Ns0bxIaw 0 4 712 2820 0 14 Dtool_Ns0bxIaw 0 2 4 this 3 2894  4 size 1 2819  
815 14 Dtool_Ns0b74w_ 0 6 715 2821 0 14 Dtool_Ns0b74w_ 0 2 4 this 3 2895  4 self 1 2821  
816 14 Dtool_Ns0bgH0z 0 4 716 2820 0 14 Dtool_Ns0bgH0z 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  10 fill_value 1 2818  
817 14 Dtool_Ns0bz3qU 0 4 717 2820 0 14 Dtool_Ns0bz3qU 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2894  3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  
818 14 Dtool_Ns0bN5w9 0 4 718 2820 0 14 Dtool_Ns0bN5w9 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  3 row 1 2824  1 v 1 2816  
819 14 Dtool_Ns0b55gf 0 4 718 2820 0 14 Dtool_Ns0b55gf 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  3 row 1 2824  1 v 1 2853  
820 14 Dtool_Ns0bvDEF 0 4 719 2820 0 14 Dtool_Ns0bvDEF 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  3 col 1 2824  1 v 1 2816  
821 14 Dtool_Ns0bac0m 0 4 719 2820 0 14 Dtool_Ns0bac0m 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  3 col 1 2824  1 v 1 2853  
822 14 Dtool_Ns0bdfDX 0 4 720 2820 0 14 Dtool_Ns0bdfDX 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  10 result_vec 1 2852  3 row 1 2824  
823 14 Dtool_Ns0bwROZ 0 7 720 2852 1812 14 Dtool_Ns0bwROZ 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 row 1 2824  
824 14 Dtool_Ns0bFuhg 0 7 721 2852 1812 14 Dtool_Ns0bFuhg 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 col 1 2824  
825 14 Dtool_Ns0b7qSI 0 7 722 2815 1623 14 Dtool_Ns0b7qSI 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 row 1 2824  
826 14 Dtool_Ns0bWJmP 0 7 723 2815 1623 14 Dtool_Ns0bWJmP 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 col 1 2824  
827 14 Dtool_Ns0bHBvR 0 4 724 2820 0 14 Dtool_Ns0bHBvR 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  3 row 1 2824  3 col 1 2824  
828 14 Dtool_Ns0b_Fgz 0 6 724 2818 0 14 Dtool_Ns0b_Fgz 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  3 row 1 2824  3 col 1 2824  
829 14 Dtool_Ns0bn3T3 0 7 725 2897 2292 14 Dtool_Ns0bn3T3 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  1 i 1 2824  
830 14 Dtool_Ns0bcUMI 0 7 725 2898 2295 14 Dtool_Ns0bcUMI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 i 1 2824  
831 14 Dtool_Ns0bkTdF 0 6 726 2824 0 14 Dtool_Ns0bkTdF 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
832 14 Dtool_Ns0bR3pT 0 6 727 2825 0 14 Dtool_Ns0bR3pT 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
833 14 Dtool_Ns0bH4Zy 0 6 728 2818 0 14 Dtool_Ns0bH4Zy 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  3 row 1 2824  3 col 1 2824  
834 14 Dtool_Ns0bl0_H 0 4 729 2820 0 14 Dtool_Ns0bl0_H 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2894  3 row 1 2824  3 col 1 2824  5 value 1 2818  
835 14 Dtool_Ns0bWvxR 0 4 730 2820 0 14 Dtool_Ns0bWvxR 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
836 14 Dtool_Ns0bbMUR 0 6 731 2824 0 14 Dtool_Ns0bbMUR 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
837 14 Dtool_Ns0bvhzu 0 6 732 2825 0 14 Dtool_Ns0bvhzu 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
838 14 Dtool_Ns0bJQr_ 0 6 733 2825 0 14 Dtool_Ns0bJQr_ 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
839 14 Dtool_Ns0bJhJ3 0 6 734 2825 0 14 Dtool_Ns0bJhJ3 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
840 14 Dtool_Ns0bKM0m 0 6 735 2824 0 14 Dtool_Ns0bKM0m 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
841 14 Dtool_Ns0bxCZj 0 6 735 2824 0 14 Dtool_Ns0bxCZj 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  5 other 1 2895  9 threshold 1 2818  
842 14 Dtool_Ns0bW4In 0 6 736 2819 0 14 Dtool_Ns0bW4In 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
843 14 Dtool_Ns0bG8W5 0 6 736 2819 0 14 Dtool_Ns0bG8W5 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  9 threshold 1 2818  
844 14 Dtool_Ns0bpcnj 0 6 737 2819 0 14 Dtool_Ns0bpcnj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  4 hash 1 2819  
845 14 Dtool_Ns0bGmv2 0 6 737 2819 0 14 Dtool_Ns0bGmv2 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  4 hash 1 2819  9 threshold 1 2818  
846 14 Dtool_Ns0bHzw6 0 7 738 2852 1812 14 Dtool_Ns0bHzw6 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2853  
847 14 Dtool_Ns0bE0BQ 0 7 739 2815 1623 14 Dtool_Ns0bE0BQ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2816  
848 14 Dtool_Ns0bI3MJ 0 7 740 2815 1623 14 Dtool_Ns0bI3MJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2816  
849 14 Dtool_Ns0babOJ 0 7 740 2852 1812 14 Dtool_Ns0babOJ 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2853  
850 14 Dtool_Ns0bJ0pj 0 7 741 2852 1812 14 Dtool_Ns0bJ0pj 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2853  
851 14 Dtool_Ns0bBsdm 0 4 742 2820 0 14 Dtool_Ns0bBsdm 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2852  
852 14 Dtool_Ns0bWmBi 0 4 743 2820 0 14 Dtool_Ns0bWmBi 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2815  
853 14 Dtool_Ns0b3Y53 0 4 744 2820 0 14 Dtool_Ns0b3Y53 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2815  
854 14 Dtool_Ns0bV04n 0 4 744 2820 0 14 Dtool_Ns0bV04n 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2852  
855 14 Dtool_Ns0bYYwa 0 4 745 2820 0 14 Dtool_Ns0bYYwa 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  1 v 1 2852  
856 14 Dtool_Ns0bSR6_ 0 4 746 2820 0 14 Dtool_Ns0bSR6_ 25 // this = other1 * other2 3 4 this 3 2894  6 other1 1 2895  6 other2 1 2895  
857 14 Dtool_Ns0bPBTp 0 7 747 2894 2369 14 Dtool_Ns0bPBTp 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
858 14 Dtool_Ns0bcFqV 0 7 747 2894 2369 14 Dtool_Ns0bcFqV 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  6 scalar 1 2818  
859 14 Dtool_Ns0bMqMX 0 7 748 2894 2369 14 Dtool_Ns0bMqMX 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  6 scalar 1 2818  
860 14 Dtool_Ns0bE0iA 0 6 749 2894 0 14 Dtool_Ns0bE0iA 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
861 14 Dtool_Ns0bkIJB 0 6 750 2894 0 14 Dtool_Ns0bkIJB 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
862 14 Dtool_Ns0b0XOA 0 6 751 2894 0 14 Dtool_Ns0b0XOA 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
863 14 Dtool_Ns0bMH5p 0 6 751 2894 0 14 Dtool_Ns0bMH5p 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  6 scalar 1 2818  
864 14 Dtool_Ns0bc8ar 0 6 752 2894 0 14 Dtool_Ns0bc8ar 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  6 scalar 1 2818  
865 14 Dtool_Ns0b3zlL 0 6 753 2818 0 14 Dtool_Ns0b3zlL 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
866 14 Dtool_Ns0blS3s 0 4 754 2820 0 14 Dtool_Ns0blS3s 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
867 14 Dtool_Ns0b8Ojo 0 4 755 2820 0 14 Dtool_Ns0b8Ojo 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2894  
868 14 Dtool_Ns0bUKZ2 0 6 756 2825 0 14 Dtool_Ns0bUKZ2 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
869 14 Dtool_Ns0bhuLY 0 6 757 2825 0 14 Dtool_Ns0bhuLY 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2894  
870 14 Dtool_Ns0bKfCp 0 6 758 2825 0 14 Dtool_Ns0bKfCp 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2895  
871 14 Dtool_Ns0bKD6t 0 6 758 2825 0 14 Dtool_Ns0bKD6t 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2899  
872 14 Dtool_Ns0bq8vo 0 6 759 2895 0 14 Dtool_Ns0bq8vo 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
873 14 Dtool_Ns0boByR 0 4 760 2820 0 14 Dtool_Ns0boByR 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 trans 1 2816  
874 14 Dtool_Ns0bd4J2 0 4 761 2820 0 14 Dtool_Ns0bd4J2 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 angle 1 2818  
875 14 Dtool_Ns0bPymL 0 4 761 2820 0 14 Dtool_Ns0bPymL 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2894  5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
876 14 Dtool_Ns0bdiBV 0 4 761 2820 0 14 Dtool_Ns0bdiBV 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  5 angle 1 2818  4 axis 1 2853  
877 14 Dtool_Ns0bSAXQ 0 4 762 2820 0 14 Dtool_Ns0bSAXQ 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 scale 1 2816  
878 14 Dtool_Ns0bB2WI 0 4 762 2820 0 14 Dtool_Ns0bB2WI 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 scale 1 2853  
879 14 Dtool_Ns0b9Yv7 0 7 763 2894 2369 14 Dtool_Ns0b9Yv7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2816  
880 14 Dtool_Ns0b1aHR 0 7 763 2894 2369 14 Dtool_Ns0b1aHR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2818  2 ty 1 2818  
881 14 Dtool_Ns0bwS2A 0 7 764 2894 2369 14 Dtool_Ns0bwS2A 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2818  
882 14 Dtool_Ns0bzgNZ 0 7 764 2894 2369 14 Dtool_Ns0bzgNZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
883 14 Dtool_Ns0by0rv 0 7 764 2894 2369 14 Dtool_Ns0by0rv 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2818  4 axis 1 2853  
884 14 Dtool_Ns0bfF2k 0 7 765 2894 2369 14 Dtool_Ns0bfF2k 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2816  
885 14 Dtool_Ns0bNp4k 0 7 765 2894 2369 14 Dtool_Ns0bNp4k 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2853  
886 14 Dtool_Ns0bKKk6 0 7 765 2894 2369 14 Dtool_Ns0bKKk6 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2818  2 sy 1 2818  
887 14 Dtool_Ns0bx6ng 0 7 765 2894 2369 14 Dtool_Ns0bx6ng 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  
888 14 Dtool_Ns0bA7ca 0 4 766 2820 0 14 Dtool_Ns0bA7ca 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2894  5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
889 14 Dtool_Ns0biLqT 0 4 766 2820 0 14 Dtool_Ns0biLqT 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  5 angle 1 2818  4 axis 1 2853  
890 14 Dtool_Ns0bSl9G 0 7 767 2894 2369 14 Dtool_Ns0bSl9G 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
891 14 Dtool_Ns0bif2Z 0 7 767 2894 2369 14 Dtool_Ns0bif2Z 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2818  4 axis 1 2853  
892 14 Dtool_Ns0b_oI_ 0 4 768 2820 0 14 Dtool_Ns0b_oI_ 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  5 shear 1 2853  2 cs 1 2782  
893 14 Dtool_Ns0b5pyk 0 4 768 2820 0 14 Dtool_Ns0b5pyk 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 shear 1 2853  
894 14 Dtool_Ns0b4aMC 0 7 769 2894 2369 14 Dtool_Ns0b4aMC 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2853  2 cs 1 2782  
895 14 Dtool_Ns0bKUWr 0 7 769 2894 2369 14 Dtool_Ns0bKUWr 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2853  
896 14 Dtool_Ns0biw5Z 0 7 769 2894 2369 14 Dtool_Ns0biw5Z 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  2 cs 1 2782  
897 14 Dtool_Ns0bwRFn 0 7 769 2894 2369 14 Dtool_Ns0bwRFn 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  
898 14 Dtool_Ns0bZjM_ 0 4 770 2820 0 14 Dtool_Ns0bZjM_ 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2894  5 scale 1 2853  5 shear 1 2853  2 cs 1 2782  
899 14 Dtool_Ns0bFn4k 0 4 770 2820 0 14 Dtool_Ns0bFn4k 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2894  5 scale 1 2853  5 shear 1 2853  
900 14 Dtool_Ns0baF0T 0 7 771 2894 2369 14 Dtool_Ns0baF0T 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2853  5 shear 1 2853  2 cs 1 2782  
901 14 Dtool_Ns0b_Jjt 0 7 771 2894 2369 14 Dtool_Ns0b_Jjt 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2853  5 shear 1 2853  
902 14 Dtool_Ns0biFf9 0 7 771 2894 2369 14 Dtool_Ns0biFf9 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  2 cs 1 2782  
903 14 Dtool_Ns0bie6G 0 7 771 2894 2369 14 Dtool_Ns0bie6G 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  
904 14 Dtool_Ns0bjv0p 0 6 772 2895 0 14 Dtool_Ns0bjv0p 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2782  2 to 1 2782  
905 14 Dtool_Ns0b5LZV 0 6 773 2825 0 14 Dtool_Ns0b5LZV 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  5 other 1 2895  
906 14 Dtool_Ns0bjSL6 0 6 773 2825 0 14 Dtool_Ns0bjSL6 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  5 other 1 2895  9 threshold 1 2818  
907 14 Dtool_Ns0bzE1n 0 4 774 2820 0 14 Dtool_Ns0bzE1n 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 out 1 2826  
908 14 Dtool_Ns0bxi6e 0 4 775 2820 0 14 Dtool_Ns0bxi6e 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  3 out 1 2826  12 indent_level 1 2824  
909 14 Dtool_Ns0bt5Vo 0 4 775 2820 0 14 Dtool_Ns0bt5Vo 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  3 out 1 2826  
910 14 Dtool_Ns0bf4Xq 0 4 776 2820 0 14 Dtool_Ns0bf4Xq 0 3 4 this 3 2895  3 out 1 2826  10 class_name 1 2823  
911 14 Dtool_Ns0bOVov 0 4 777 2820 0 14 Dtool_Ns0bOVov 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  7 hashgen 1 2828  
912 14 Dtool_Ns0bm__V 0 4 777 2820 0 14 Dtool_Ns0bm__V 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  7 hashgen 1 2828  9 threshold 1 2818  
913 14 Dtool_Ns0brNOZ 0 4 778 2820 0 14 Dtool_Ns0brNOZ 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  11 destination 1 2830  
914 14 Dtool_Ns0bhdF9 0 4 779 2820 0 14 Dtool_Ns0bhdF9 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  4 scan 1 2832  
915 14 Dtool_Ns0bZmJJ 0 4 780 2820 0 14 Dtool_Ns0bZmJJ 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2895  11 destination 1 2830  
916 14 Dtool_Ns0b4drJ 0 4 781 2820 0 14 Dtool_Ns0b4drJ 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  6 source 1 2832  
917 14 Dtool_Ns0bIXnT 0 7 782 2835 0 14 Dtool_Ns0bIXnT 0 0 
918 14 Dtool_Ns0bsICl 0 4 702 2820 0 14 Dtool_Ns0bsICl 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  1 i 1 2824  
919 14 Dtool_Ns0bUN1G 0 6 702 2818 0 14 Dtool_Ns0bUN1G 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2901  1 i 1 2824  
920 14 Dtool_Ns0bg9AW 0 4 703 2820 0 14 Dtool_Ns0bg9AW 0 3 4 this 3 2897  1 i 1 2824  1 v 1 2818  
921 14 Dtool_Ns0bOlSB 0 6 704 2824 0 14 Dtool_Ns0bOlSB 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
922 14 Dtool_Ns0bKWHJ 0 6 707 2818 0 14 Dtool_Ns0bKWHJ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 i 1 2824  
923 14 Dtool_Ns0bS_uX 0 6 708 2824 0 14 Dtool_Ns0bS_uX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
924 14 Dtool_Ns0b0VSC 0 7 796 2905 2460 14 Dtool_Ns0b0VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
925 14 Dtool_Ns0bfs5c 0 7 796 2905 2460 14 Dtool_Ns0bfs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2895  
926 14 Dtool_Ns0b6_z9 0 7 796 2905 2460 14 Dtool_Ns0b6_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2895  5 trans 1 2853  
927 14 Dtool_Ns0bX354 0 7 796 2905 2460 14 Dtool_Ns0bX354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2899  
928 14 Dtool_Ns0b2Ai0 0 7 796 2905 2460 14 Dtool_Ns0b2Ai0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2906  
929 14 Dtool_Ns0bkfiq 0 7 796 2905 2460 14 Dtool_Ns0bkfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e03 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e13 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  3 e23 1 2818  3 e30 1 2818  3 e31 1 2818  3 e32 1 2818  3 e33 1 2818  
930 14 Dtool_Ns0bkLb0 0 6 797 2905 0 14 Dtool_Ns0bkLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
931 14 Dtool_Ns0b2l3p 0 6 797 2905 0 14 Dtool_Ns0b2l3p 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2906  
932 14 Dtool_Ns0bJ5tl 0 6 797 2905 0 14 Dtool_Ns0bJ5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  10 fill_value 1 2818  
933 14 Dtool_Ns0b2oeX 0 4 798 2820 0 14 Dtool_Ns0b2oeX 0 2 4 this 3 2905  4 size 1 2819  
934 14 Dtool_Ns0b4Yzl 0 6 801 2821 0 14 Dtool_Ns0b4Yzl 0 2 4 this 3 2899  4 self 1 2821  
935 14 Dtool_Ns0bhn3a 0 4 802 2820 0 14 Dtool_Ns0bhn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  10 fill_value 1 2818  
936 14 Dtool_Ns0bb_Gk 0 4 803 2820 0 14 Dtool_Ns0bb_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2905  3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e03 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e13 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  3 e23 1 2818  3 e30 1 2818  3 e31 1 2818  3 e32 1 2818  3 e33 1 2818  
937 14 Dtool_Ns0bQITa 0 4 804 2820 0 14 Dtool_Ns0bQITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  6 upper3 1 2895  
938 14 Dtool_Ns0b1ZhQ 0 7 805 2894 2369 14 Dtool_Ns0b1ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
939 14 Dtool_Ns0b2ZkG 0 4 806 2820 0 14 Dtool_Ns0b2ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  3 row 1 2824  1 v 1 2853  
940 14 Dtool_Ns0blZUo 0 4 806 2820 0 14 Dtool_Ns0blZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  3 row 1 2824  1 v 1 2871  
941 14 Dtool_Ns0bb83N 0 4 807 2820 0 14 Dtool_Ns0bb83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  3 col 1 2824  1 v 1 2853  
942 14 Dtool_Ns0b28nv 0 4 807 2820 0 14 Dtool_Ns0b28nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  3 col 1 2824  1 v 1 2871  
943 14 Dtool_Ns0bn__u 0 4 808 2820 0 14 Dtool_Ns0bn__u 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  10 result_vec 1 2870  3 row 1 2824  
944 14 Dtool_Ns0bxxRA 0 7 808 2870 2071 14 Dtool_Ns0bxxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 row 1 2824  
945 14 Dtool_Ns0bCOlH 0 7 809 2870 2071 14 Dtool_Ns0bCOlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 col 1 2824  
946 14 Dtool_Ns0bdF7x 0 4 810 2820 0 14 Dtool_Ns0bdF7x 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  10 result_vec 1 2852  3 row 1 2824  
947 14 Dtool_Ns0bJMW2 0 7 810 2852 1812 14 Dtool_Ns0bJMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 row 1 2824  
948 14 Dtool_Ns0bkop9 0 7 811 2852 1812 14 Dtool_Ns0bkop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 col 1 2824  
949 14 Dtool_Ns0bHhy4 0 4 812 2820 0 14 Dtool_Ns0bHhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  3 row 1 2824  3 col 1 2824  
950 14 Dtool_Ns0b_lka 0 6 812 2818 0 14 Dtool_Ns0b_lka 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  3 row 1 2824  3 col 1 2824  
951 14 Dtool_Ns0bkXWe 0 7 813 2908 2375 14 Dtool_Ns0bkXWe 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  1 i 1 2824  
952 14 Dtool_Ns0bc0Pv 0 7 813 2909 2378 14 Dtool_Ns0bc0Pv 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 i 1 2824  
953 14 Dtool_Ns0bkzgs 0 6 814 2824 0 14 Dtool_Ns0bkzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
954 14 Dtool_Ns0bRXs6 0 6 815 2825 0 14 Dtool_Ns0bRXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
955 14 Dtool_Ns0bGYcZ 0 6 816 2818 0 14 Dtool_Ns0bGYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  3 row 1 2824  3 col 1 2824  
956 14 Dtool_Ns0blUBv 0 4 817 2820 0 14 Dtool_Ns0blUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2905  3 row 1 2824  3 col 1 2824  5 value 1 2818  
957 14 Dtool_Ns0bWP14 0 4 818 2820 0 14 Dtool_Ns0bWP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
958 14 Dtool_Ns0bbsX4 0 6 819 2824 0 14 Dtool_Ns0bbsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
959 14 Dtool_Ns0bKK3S 0 4 820 2820 0 14 Dtool_Ns0bKK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2905  
960 14 Dtool_Ns0bBQDa 0 4 820 2820 0 14 Dtool_Ns0bBQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
961 14 Dtool_Ns0bm_kL 0 4 821 2820 0 14 Dtool_Ns0bm_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2905  
962 14 Dtool_Ns0bgxNr 0 4 821 2820 0 14 Dtool_Ns0bgxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
963 14 Dtool_Ns0b8l5V 0 6 822 2825 0 14 Dtool_Ns0b8l5V 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
964 14 Dtool_Ns0bI59n 0 6 823 2825 0 14 Dtool_Ns0bI59n 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
965 14 Dtool_Ns0bIOaf 0 6 824 2825 0 14 Dtool_Ns0bIOaf 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
966 14 Dtool_Ns0bzB6N 0 6 825 2824 0 14 Dtool_Ns0bzB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
967 14 Dtool_Ns0bmOfK 0 6 825 2824 0 14 Dtool_Ns0bmOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  5 other 1 2899  9 threshold 1 2818  
968 14 Dtool_Ns0bVYMO 0 6 826 2819 0 14 Dtool_Ns0bVYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2899  
969 14 Dtool_Ns0bFcZg 0 6 826 2819 0 14 Dtool_Ns0bFcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  9 threshold 1 2818  
970 14 Dtool_Ns0bo8oK 0 6 827 2819 0 14 Dtool_Ns0bo8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  4 hash 1 2819  
971 14 Dtool_Ns0bJGyd 0 6 827 2819 0 14 Dtool_Ns0bJGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  4 hash 1 2819  9 threshold 1 2818  
972 14 Dtool_Ns0bmWbi 0 7 828 2870 2071 14 Dtool_Ns0bmWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2871  
973 14 Dtool_Ns0bF0Ie 0 7 829 2852 1812 14 Dtool_Ns0bF0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2853  
974 14 Dtool_Ns0ba7Sw 0 7 830 2852 1812 14 Dtool_Ns0ba7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2853  
975 14 Dtool_Ns0bIUtK 0 7 831 2852 1812 14 Dtool_Ns0bIUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2853  
976 14 Dtool_Ns0buEmN 0 4 832 2820 0 14 Dtool_Ns0buEmN 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2870  
977 14 Dtool_Ns0bXa9N 0 4 833 2820 0 14 Dtool_Ns0bXa9N 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2852  
978 14 Dtool_Ns0bUU8O 0 4 834 2820 0 14 Dtool_Ns0bUU8O 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2852  
979 14 Dtool_Ns0bf4zB 0 4 835 2820 0 14 Dtool_Ns0bf4zB 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  1 v 1 2852  
980 14 Dtool_Ns0bcv3G 0 4 836 2820 0 14 Dtool_Ns0bcv3G 25 // this = other1 * other2 3 4 this 3 2905  6 other1 1 2899  6 other2 1 2899  
981 14 Dtool_Ns0bcFZQ 0 7 837 2905 2460 14 Dtool_Ns0bcFZQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
982 14 Dtool_Ns0bclu8 0 7 837 2905 2460 14 Dtool_Ns0bclu8 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  6 scalar 1 2818  
983 14 Dtool_Ns0bMKP_ 0 7 838 2905 2460 14 Dtool_Ns0bMKP_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  6 scalar 1 2818  
984 14 Dtool_Ns0bEv0o 0 6 839 2905 0 14 Dtool_Ns0bEv0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
985 14 Dtool_Ns0bkjbp 0 6 840 2905 0 14 Dtool_Ns0bkjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
986 14 Dtool_Ns0b0Ogo 0 6 841 2905 0 14 Dtool_Ns0b0Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
987 14 Dtool_Ns0bNn8Q 0 6 841 2905 0 14 Dtool_Ns0bNn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  6 scalar 1 2818  
988 14 Dtool_Ns0bdceS 0 6 842 2905 0 14 Dtool_Ns0bdceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  6 scalar 1 2818  
989 14 Dtool_Ns0brI6L 0 4 843 2820 0 14 Dtool_Ns0brI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
990 14 Dtool_Ns0b9umP 0 4 844 2820 0 14 Dtool_Ns0b9umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2905  
991 14 Dtool_Ns0bVtqe 0 6 845 2825 0 14 Dtool_Ns0bVtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 other 1 2899  
992 14 Dtool_Ns0bKvHn 0 6 846 2825 0 14 Dtool_Ns0bKvHn 931 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2905  5 other 1 2899  
993 14 Dtool_Ns0bhOP_ 0 6 847 2825 0 14 Dtool_Ns0bhOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2905  
994 14 Dtool_Ns0bWTTf 0 4 848 2820 0 14 Dtool_Ns0bWTTf 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  5 other 1 2899  6 weight 1 2818  
995 14 Dtool_Ns0brczP 0 6 849 2899 0 14 Dtool_Ns0brczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
996 14 Dtool_Ns0bmxV_ 0 6 850 2899 0 14 Dtool_Ns0bmxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
997 14 Dtool_Ns0bLEvk 0 6 851 2899 0 14 Dtool_Ns0bLEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
998 14 Dtool_Ns0bTiW8 0 4 852 2820 0 14 Dtool_Ns0bTiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 trans 1 2853  
999 14 Dtool_Ns0bPSpy 0 4 853 2820 0 14 Dtool_Ns0bPSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2905  5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
1000 14 Dtool_Ns0bdCF8 0 4 853 2820 0 14 Dtool_Ns0bdCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  5 angle 1 2818  4 axis 1 2853  
1001 14 Dtool_Ns0bBbgB 0 4 854 2820 0 14 Dtool_Ns0bBbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2905  5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
1002 14 Dtool_Ns0biru6 0 4 854 2820 0 14 Dtool_Ns0biru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  5 angle 1 2818  4 axis 1 2853  
1003 14 Dtool_Ns0bBWav 0 4 855 2820 0 14 Dtool_Ns0bBWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 scale 1 2853  
1004 14 Dtool_Ns0b_IMl 0 4 856 2820 0 14 Dtool_Ns0b_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  5 shear 1 2853  2 cs 1 2782  
1005 14 Dtool_Ns0b6J2L 0 4 856 2820 0 14 Dtool_Ns0b6J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  5 shear 1 2853  
1006 14 Dtool_Ns0baDQm 0 4 857 2820 0 14 Dtool_Ns0baDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2905  5 scale 1 2853  5 shear 1 2853  2 cs 1 2782  
1007 14 Dtool_Ns0bCH7L 0 4 857 2820 0 14 Dtool_Ns0bCH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2905  5 scale 1 2853  5 shear 1 2853  
1008 14 Dtool_Ns0bjyza 0 7 858 2905 2460 14 Dtool_Ns0bjyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2853  
1009 14 Dtool_Ns0bQ9hS 0 7 858 2905 2460 14 Dtool_Ns0bQ9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2818  2 ty 1 2818  2 tz 1 2818  
1010 14 Dtool_Ns0b8AQA 0 7 859 2905 2460 14 Dtool_Ns0b8AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
1011 14 Dtool_Ns0bzUuW 0 7 859 2905 2460 14 Dtool_Ns0bzUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2818  4 axis 1 2853  
1012 14 Dtool_Ns0bSFBu 0 7 860 2905 2460 14 Dtool_Ns0bSFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2818  4 axis 1 2853  2 cs 1 2782  
1013 14 Dtool_Ns0bl_5A 0 7 860 2905 2460 14 Dtool_Ns0bl_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2818  4 axis 1 2853  
1014 14 Dtool_Ns0bOJ8L 0 7 861 2905 2460 14 Dtool_Ns0bOJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2853  
1015 14 Dtool_Ns0bgj9H 0 7 861 2905 2460 14 Dtool_Ns0bgj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2818  
1016 14 Dtool_Ns0bwaqH 0 7 861 2905 2460 14 Dtool_Ns0bwaqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  
1017 14 Dtool_Ns0b46Pp 0 7 862 2905 2460 14 Dtool_Ns0b46Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2853  2 cs 1 2782  
1018 14 Dtool_Ns0bJ0aS 0 7 862 2905 2460 14 Dtool_Ns0bJ0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2853  
1019 14 Dtool_Ns0blQ9A 0 7 862 2905 2460 14 Dtool_Ns0blQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  2 cs 1 2782  
1020 14 Dtool_Ns0bxxJO 0 7 862 2905 2460 14 Dtool_Ns0bxxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  
1021 14 Dtool_Ns0bal56 0 7 863 2905 2460 14 Dtool_Ns0bal56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2853  5 shear 1 2853  2 cs 1 2782  
1022 14 Dtool_Ns0bgpnU 0 7 863 2905 2460 14 Dtool_Ns0bgpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2853  5 shear 1 2853  
1023 14 Dtool_Ns0b9lik 0 7 863 2905 2460 14 Dtool_Ns0b9lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  2 cs 1 2782  
1024 14 Dtool_Ns0bi__t 0 7 863 2905 2460 14 Dtool_Ns0bi__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2818  2 sy 1 2818  2 sz 1 2818  4 shxy 1 2818  4 shxz 1 2818  4 shyz 1 2818  
1025 14 Dtool_Ns0blIST 0 6 864 2899 0 14 Dtool_Ns0blIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1026 14 Dtool_Ns0blG2Q 0 6 865 2899 0 14 Dtool_Ns0blG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1027 14 Dtool_Ns0bgP4Q 0 6 866 2899 0 14 Dtool_Ns0bgP4Q 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2782  2 to 1 2782  
1028 14 Dtool_Ns0b4Lgj 0 6 867 2825 0 14 Dtool_Ns0b4Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  5 other 1 2899  
1029 14 Dtool_Ns0b9SSI 0 6 867 2825 0 14 Dtool_Ns0b9SSI 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  5 other 1 2899  9 threshold 1 2818  
1030 14 Dtool_Ns0b0k4O 0 4 868 2820 0 14 Dtool_Ns0b0k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 out 1 2826  
1031 14 Dtool_Ns0bwC_F 0 4 869 2820 0 14 Dtool_Ns0bwC_F 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  3 out 1 2826  12 indent_level 1 2824  
1032 14 Dtool_Ns0bsZZP 0 4 869 2820 0 14 Dtool_Ns0bsZZP 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  3 out 1 2826  
1033 14 Dtool_Ns0beYaR 0 4 870 2820 0 14 Dtool_Ns0beYaR 0 3 4 this 3 2899  3 out 1 2826  10 class_name 1 2823  
1034 14 Dtool_Ns0bJ1rW 0 4 871 2820 0 14 Dtool_Ns0bJ1rW 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  7 hashgen 1 2828  
1035 14 Dtool_Ns0bmfB9 0 4 871 2820 0 14 Dtool_Ns0bmfB9 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2899  7 hashgen 1 2828  5 scale 1 2818  
1036 14 Dtool_Ns0bstRA 0 4 872 2820 0 14 Dtool_Ns0bstRA 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  11 destination 1 2830  
1037 14 Dtool_Ns0bg9Jk 0 4 873 2820 0 14 Dtool_Ns0bg9Jk 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  4 scan 1 2832  
1038 14 Dtool_Ns0bZGNw 0 4 874 2820 0 14 Dtool_Ns0bZGNw 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  11 destination 1 2830  
1039 14 Dtool_Ns0b49vw 0 4 875 2820 0 14 Dtool_Ns0b49vw 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  6 source 1 2832  
1040 14 Dtool_Ns0bI3r6 0 7 876 2835 0 14 Dtool_Ns0bI3r6 0 0 
1041 14 Dtool_Ns0broGM 0 4 788 2820 0 14 Dtool_Ns0broGM 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2908  1 i 1 2824  
1042 14 Dtool_Ns0bUt2t 0 6 788 2818 0 14 Dtool_Ns0bUt2t 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2910  1 i 1 2824  
1043 14 Dtool_Ns0bgdD9 0 4 789 2820 0 14 Dtool_Ns0bgdD9 0 3 4 this 3 2908  1 i 1 2824  1 v 1 2818  
1044 14 Dtool_Ns0bOFWo 0 6 790 2824 0 14 Dtool_Ns0bOFWo 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1045 14 Dtool_Ns0bK2Kw 0 6 793 2818 0 14 Dtool_Ns0bK2Kw 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2912  1 i 1 2824  
1046 14 Dtool_Ns0bSfy_ 0 6 794 2824 0 14 Dtool_Ns0bSfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1047 14 Dtool_Ns0bcyhV 0 7 879 2914 2468 14 Dtool_Ns0bcyhV 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1048 14 Dtool_Ns0b7kWw 0 7 879 2914 2468 14 Dtool_Ns0b7kWw 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2899  
1049 14 Dtool_Ns0bFuRt 0 7 879 2914 2468 14 Dtool_Ns0bFuRt 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2906  
1050 14 Dtool_Ns0bS52S 0 7 879 2914 2468 14 Dtool_Ns0bS52S 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e03 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e13 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  3 e23 1 2818  3 e30 1 2818  3 e31 1 2818  3 e32 1 2818  3 e33 1 2818  
1051 14 Dtool_Ns0bs_r9 0 6 880 2914 0 14 Dtool_Ns0bs_r9 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2914  4 copy 1 2899  
1052 14 Dtool_Ns0bdaVs 0 6 880 2914 0 14 Dtool_Ns0bdaVs 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2914  4 copy 1 2906  
1053 14 Dtool_Ns0bkKYz 0 4 881 2820 0 14 Dtool_Ns0bkKYz 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2914  3 e00 1 2818  3 e01 1 2818  3 e02 1 2818  3 e03 1 2818  3 e10 1 2818  3 e11 1 2818  3 e12 1 2818  3 e13 1 2818  3 e20 1 2818  3 e21 1 2818  3 e22 1 2818  3 e23 1 2818  3 e30 1 2818  3 e31 1 2818  3 e32 1 2818  3 e33 1 2818  
1054 14 Dtool_Ns0biXNG 0 4 882 2820 0 14 Dtool_Ns0biXNG 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2914  3 row 1 2824  3 col 1 2824  
1055 14 Dtool_Ns0b6Ka6 0 6 882 2818 0 14 Dtool_Ns0b6Ka6 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2906  3 row 1 2824  3 col 1 2824  
1056 14 Dtool_Ns0bk_OW 0 4 883 2820 0 14 Dtool_Ns0bk_OW 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2906  
1057 14 Dtool_Ns0biJJW 0 6 884 2824 0 14 Dtool_Ns0biJJW 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2906  
1058 14 Dtool_Ns0bX_d_ 0 7 885 2835 0 14 Dtool_Ns0bX_d_ 0 0 
1059 14 Dtool_Ns0bHKtQ 0 7 897 2915 2549 14 Dtool_Ns0bHKtQ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1060 14 Dtool_Ns0bgwPr 0 7 897 2915 2549 14 Dtool_Ns0bgwPr 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2916  
1061 14 Dtool_Ns0b1oPv 0 7 897 2915 2549 14 Dtool_Ns0b1oPv 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  
1062 14 Dtool_Ns0b9QZH 0 6 898 2915 0 14 Dtool_Ns0b9QZH 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1063 14 Dtool_Ns0bByUJ 0 6 898 2915 0 14 Dtool_Ns0bByUJ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  10 fill_value 1 2839  
1064 14 Dtool_Ns0beI6s 0 4 899 2820 0 14 Dtool_Ns0beI6s 0 2 4 this 3 2915  4 size 1 2819  
1065 14 Dtool_Ns0bQ4Q7 0 6 902 2821 0 14 Dtool_Ns0bQ4Q7 0 2 4 this 3 2916  4 self 1 2821  
1066 14 Dtool_Ns0btMiW 0 4 903 2820 0 14 Dtool_Ns0btMiW 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  10 fill_value 1 2839  
1067 14 Dtool_Ns0bYSjO 0 4 904 2820 0 14 Dtool_Ns0bYSjO 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2915  3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  
1068 14 Dtool_Ns0bMjRK 0 4 905 2820 0 14 Dtool_Ns0bMjRK 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  3 row 1 2824  1 v 1 2837  
1069 14 Dtool_Ns0b7jBs 0 4 905 2820 0 14 Dtool_Ns0b7jBs 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  3 row 1 2824  1 v 1 2856  
1070 14 Dtool_Ns0bhFlR 0 4 906 2820 0 14 Dtool_Ns0bhFlR 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  3 col 1 2824  1 v 1 2837  
1071 14 Dtool_Ns0bcGVz 0 4 906 2820 0 14 Dtool_Ns0bcGVz 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  3 col 1 2824  1 v 1 2856  
1072 14 Dtool_Ns0bFRjb 0 4 907 2820 0 14 Dtool_Ns0bFRjb 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  10 result_vec 1 2855  3 row 1 2824  
1073 14 Dtool_Ns0bpQuV 0 7 907 2855 1882 14 Dtool_Ns0bpQuV 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 row 1 2824  
1074 14 Dtool_Ns0bqvBd 0 7 908 2855 1882 14 Dtool_Ns0bqvBd 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 col 1 2824  
1075 14 Dtool_Ns0bCqyE 0 7 909 2836 1683 14 Dtool_Ns0bCqyE 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 row 1 2824  
1076 14 Dtool_Ns0bxKGM 0 7 910 2836 1683 14 Dtool_Ns0bxKGM 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 col 1 2824  
1077 14 Dtool_Ns0bYAPO 0 4 911 2820 0 14 Dtool_Ns0bYAPO 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  3 row 1 2824  3 col 1 2824  
1078 14 Dtool_Ns0bnEAw 0 6 911 2839 0 14 Dtool_Ns0bnEAw 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  3 row 1 2824  3 col 1 2824  
1079 14 Dtool_Ns0b80zz 0 7 912 2918 2472 14 Dtool_Ns0b80zz 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  1 i 1 2824  
1080 14 Dtool_Ns0b1LsE 0 7 912 2919 2475 14 Dtool_Ns0b1LsE 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 i 1 2824  
1081 14 Dtool_Ns0bDT9B 0 6 913 2824 0 14 Dtool_Ns0bDT9B 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1082 14 Dtool_Ns0bu3JQ 0 6 914 2825 0 14 Dtool_Ns0bu3JQ 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
1083 14 Dtool_Ns0bu75u 0 6 915 2839 0 14 Dtool_Ns0bu75u 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  3 row 1 2824  3 col 1 2824  
1084 14 Dtool_Ns0bYWBO 0 4 916 2820 0 14 Dtool_Ns0bYWBO 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2915  3 row 1 2824  3 col 1 2824  5 value 1 2839  
1085 14 Dtool_Ns0btvRO 0 4 917 2820 0 14 Dtool_Ns0btvRO 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
1086 14 Dtool_Ns0bwP0N 0 6 918 2824 0 14 Dtool_Ns0bwP0N 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
1087 14 Dtool_Ns0bGv3o 0 6 919 2825 0 14 Dtool_Ns0bGv3o 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1088 14 Dtool_Ns0bRREu 0 6 920 2825 0 14 Dtool_Ns0bRREu 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1089 14 Dtool_Ns0bRgil 0 6 921 2825 0 14 Dtool_Ns0bRgil 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1090 14 Dtool_Ns0bt_3g 0 6 922 2824 0 14 Dtool_Ns0bt_3g 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1091 14 Dtool_Ns0bSbnp 0 6 922 2824 0 14 Dtool_Ns0bSbnp 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  5 other 1 2916  9 threshold 1 2839  
1092 14 Dtool_Ns0bt7oj 0 6 923 2819 0 14 Dtool_Ns0bt7oj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
1093 14 Dtool_Ns0bACnK 0 6 923 2819 0 14 Dtool_Ns0bACnK 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  9 threshold 1 2839  
1094 14 Dtool_Ns0bQfHg 0 6 924 2819 0 14 Dtool_Ns0bQfHg 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  4 hash 1 2819  
1095 14 Dtool_Ns0be2a4 0 6 924 2819 0 14 Dtool_Ns0be2a4 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  4 hash 1 2819  9 threshold 1 2839  
1096 14 Dtool_Ns0buQNQ 0 7 925 2855 1882 14 Dtool_Ns0buQNQ 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2856  
1097 14 Dtool_Ns0bS1BJ 0 7 926 2836 1683 14 Dtool_Ns0bS1BJ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2837  
1098 14 Dtool_Ns0bRGPD 0 7 927 2836 1683 14 Dtool_Ns0bRGPD 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2837  
1099 14 Dtool_Ns0bDiSD 0 7 927 2855 1882 14 Dtool_Ns0bDiSD 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2856  
1100 14 Dtool_Ns0bsKJA 0 7 928 2855 1882 14 Dtool_Ns0bsKJA 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2856  
1101 14 Dtool_Ns0bqJFe 0 4 929 2820 0 14 Dtool_Ns0bqJFe 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2855  
1102 14 Dtool_Ns0bqhFm 0 4 930 2820 0 14 Dtool_Ns0bqhFm 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2836  
1103 14 Dtool_Ns0bu6G0 0 4 931 2820 0 14 Dtool_Ns0bu6G0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2836  
1104 14 Dtool_Ns0bMVHk 0 4 931 2820 0 14 Dtool_Ns0bMVHk 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2855  
1105 14 Dtool_Ns0bhQR7 0 4 932 2820 0 14 Dtool_Ns0bhQR7 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 v 1 2855  
1106 14 Dtool_Ns0bZ5GD 0 4 933 2820 0 14 Dtool_Ns0bZ5GD 25 // this = other1 * other2 3 4 this 3 2915  6 other1 1 2916  6 other2 1 2916  
1107 14 Dtool_Ns0bmPXj 0 7 934 2915 2549 14 Dtool_Ns0bmPXj 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1108 14 Dtool_Ns0b_fQe 0 7 934 2915 2549 14 Dtool_Ns0b_fQe 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  6 scalar 1 2839  
1109 14 Dtool_Ns0bOoxf 0 7 935 2915 2549 14 Dtool_Ns0bOoxf 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  6 scalar 1 2839  
1110 14 Dtool_Ns0b_07u 0 6 936 2915 0 14 Dtool_Ns0b_07u 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1111 14 Dtool_Ns0bfIiv 0 6 937 2915 0 14 Dtool_Ns0bfIiv 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1112 14 Dtool_Ns0bPXnu 0 6 938 2915 0 14 Dtool_Ns0bPXnu 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1113 14 Dtool_Ns0bX0Qs 0 6 938 2915 0 14 Dtool_Ns0bX0Qs 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  6 scalar 1 2839  
1114 14 Dtool_Ns0bndyt 0 6 939 2915 0 14 Dtool_Ns0bndyt 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  6 scalar 1 2839  
1115 14 Dtool_Ns0bsyFI 0 6 940 2839 0 14 Dtool_Ns0bsyFI 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
1116 14 Dtool_Ns0baONp 0 4 941 2820 0 14 Dtool_Ns0baONp 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1117 14 Dtool_Ns0blPDl 0 4 942 2820 0 14 Dtool_Ns0blPDl 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2915  
1118 14 Dtool_Ns0bMJyk 0 6 943 2825 0 14 Dtool_Ns0bMJyk 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1119 14 Dtool_Ns0bIurU 0 6 944 2825 0 14 Dtool_Ns0bIurU 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2915  
1120 14 Dtool_Ns0bmeGt 0 6 945 2825 0 14 Dtool_Ns0bmeGt 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2916  
1121 14 Dtool_Ns0bmC_x 0 6 945 2825 0 14 Dtool_Ns0bmC_x 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 other 1 2920  
1122 14 Dtool_Ns0bD_Pl 0 6 946 2916 0 14 Dtool_Ns0bD_Pl 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1123 14 Dtool_Ns0b9pSu 0 4 947 2820 0 14 Dtool_Ns0b9pSu 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 trans 1 2837  
1124 14 Dtool_Ns0b9uiL 0 4 948 2820 0 14 Dtool_Ns0b9uiL 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 angle 1 2839  
1125 14 Dtool_Ns0b58U8 0 4 948 2820 0 14 Dtool_Ns0b58U8 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2915  5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1126 14 Dtool_Ns0bHjMp 0 4 948 2820 0 14 Dtool_Ns0bHjMp 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  5 angle 1 2839  4 axis 1 2856  
1127 14 Dtool_Ns0bhzuM 0 4 949 2820 0 14 Dtool_Ns0bhzuM 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 scale 1 2837  
1128 14 Dtool_Ns0bwFvE 0 4 949 2820 0 14 Dtool_Ns0bwFvE 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 scale 1 2856  
1129 14 Dtool_Ns0bcpG4 0 7 950 2915 2549 14 Dtool_Ns0bcpG4 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2837  
1130 14 Dtool_Ns0bZis7 0 7 950 2915 2549 14 Dtool_Ns0bZis7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2839  2 ty 1 2839  
1131 14 Dtool_Ns0bB6hL 0 7 951 2915 2549 14 Dtool_Ns0bB6hL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2839  
1132 14 Dtool_Ns0baFgZ 0 7 951 2915 2549 14 Dtool_Ns0baFgZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1133 14 Dtool_Ns0bz6sm 0 7 951 2915 2549 14 Dtool_Ns0bz6sm 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2839  4 axis 1 2856  
1134 14 Dtool_Ns0bkw5e 0 7 952 2915 2549 14 Dtool_Ns0bkw5e 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2837  
1135 14 Dtool_Ns0b2c8e 0 7 952 2915 2549 14 Dtool_Ns0b2c8e 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2856  
1136 14 Dtool_Ns0bKYtY 0 7 952 2915 2549 14 Dtool_Ns0bKYtY 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2839  2 sy 1 2839  
1137 14 Dtool_Ns0bXTVN 0 7 952 2915 2549 14 Dtool_Ns0bXTVN 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  
1138 14 Dtool_Ns0boZc9 0 4 953 2820 0 14 Dtool_Ns0boZc9 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2915  5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1139 14 Dtool_Ns0br2Hj 0 4 953 2820 0 14 Dtool_Ns0br2Hj 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  5 angle 1 2839  4 axis 1 2856  
1140 14 Dtool_Ns0byh6r 0 7 954 2915 2549 14 Dtool_Ns0byh6r 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1141 14 Dtool_Ns0bYlqF 0 7 954 2915 2549 14 Dtool_Ns0bYlqF 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2839  4 axis 1 2856  
1142 14 Dtool_Ns0bf5e6 0 4 955 2820 0 14 Dtool_Ns0bf5e6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  5 shear 1 2856  2 cs 1 2782  
1143 14 Dtool_Ns0ba_Ih 0 4 955 2820 0 14 Dtool_Ns0ba_Ih 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  5 shear 1 2856  
1144 14 Dtool_Ns0bQoP8 0 7 956 2915 2549 14 Dtool_Ns0bQoP8 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2856  2 cs 1 2782  
1145 14 Dtool_Ns0bxJal 0 7 956 2915 2549 14 Dtool_Ns0bxJal 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2856  
1146 14 Dtool_Ns0b1tYK 0 7 956 2915 2549 14 Dtool_Ns0b1tYK 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  2 cs 1 2782  
1147 14 Dtool_Ns0bn6zT 0 7 956 2915 2549 14 Dtool_Ns0bn6zT 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  
1148 14 Dtool_Ns0bon65 0 4 957 2820 0 14 Dtool_Ns0bon65 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2915  5 scale 1 2856  5 shear 1 2856  2 cs 1 2782  
1149 14 Dtool_Ns0b9Qnf 0 4 957 2820 0 14 Dtool_Ns0b9Qnf 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2915  5 scale 1 2856  5 shear 1 2856  
1150 14 Dtool_Ns0bipF0 0 7 958 2915 2549 14 Dtool_Ns0bipF0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2856  5 shear 1 2856  2 cs 1 2782  
1151 14 Dtool_Ns0bEtzN 0 7 958 2915 2549 14 Dtool_Ns0bEtzN 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2856  5 shear 1 2856  
1152 14 Dtool_Ns0berao 0 7 958 2915 2549 14 Dtool_Ns0berao 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  2 cs 1 2782  
1153 14 Dtool_Ns0bkqKC 0 7 958 2915 2549 14 Dtool_Ns0bkqKC 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  
1154 14 Dtool_Ns0b4uUm 0 6 959 2916 0 14 Dtool_Ns0b4uUm 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2782  2 to 1 2782  
1155 14 Dtool_Ns0brIZO 0 6 960 2825 0 14 Dtool_Ns0brIZO 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  5 other 1 2916  
1156 14 Dtool_Ns0bpOQZ 0 6 960 2825 0 14 Dtool_Ns0bpOQZ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  5 other 1 2916  9 threshold 1 2839  
1157 14 Dtool_Ns0bcEVk 0 4 961 2820 0 14 Dtool_Ns0bcEVk 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 out 1 2826  
1158 14 Dtool_Ns0bIhab 0 4 962 2820 0 14 Dtool_Ns0bIhab 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  3 out 1 2826  12 indent_level 1 2824  
1159 14 Dtool_Ns0bU41k 0 4 962 2820 0 14 Dtool_Ns0bU41k 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  3 out 1 2826  
1160 14 Dtool_Ns0b253m 0 4 963 2820 0 14 Dtool_Ns0b253m 0 3 4 this 3 2916  3 out 1 2826  10 class_name 1 2823  
1161 14 Dtool_Ns0bRKIs 0 4 964 2820 0 14 Dtool_Ns0bRKIs 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  7 hashgen 1 2828  
1162 14 Dtool_Ns0bjVPD 0 4 964 2820 0 14 Dtool_Ns0bjVPD 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2916  7 hashgen 1 2828  9 threshold 1 2839  
1163 14 Dtool_Ns0b0SuV 0 4 965 2820 0 14 Dtool_Ns0b0SuV 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  11 destination 1 2830  
1164 14 Dtool_Ns0bYdl5 0 4 966 2820 0 14 Dtool_Ns0bYdl5 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  4 scan 1 2832  
1165 14 Dtool_Ns0bAnpF 0 4 967 2820 0 14 Dtool_Ns0bAnpF 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  11 destination 1 2830  
1166 14 Dtool_Ns0bTdLG 0 4 968 2820 0 14 Dtool_Ns0bTdLG 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  6 source 1 2832  
1167 14 Dtool_Ns0bnXHQ 0 7 969 2835 0 14 Dtool_Ns0bnXHQ 0 0 
1168 14 Dtool_Ns0bDIih 0 4 889 2820 0 14 Dtool_Ns0bDIih 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2918  1 i 1 2824  
1169 14 Dtool_Ns0b7NVD 0 6 889 2839 0 14 Dtool_Ns0b7NVD 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2922  1 i 1 2824  
1170 14 Dtool_Ns0brNBq 0 4 890 2820 0 14 Dtool_Ns0brNBq 0 3 4 this 3 2918  1 i 1 2824  1 v 1 2839  
1171 14 Dtool_Ns0bmly9 0 6 891 2824 0 14 Dtool_Ns0bmly9 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1172 14 Dtool_Ns0bjWnF 0 6 894 2839 0 14 Dtool_Ns0bjWnF 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 i 1 2824  
1173 14 Dtool_Ns0b98OU 0 6 895 2824 0 14 Dtool_Ns0b98OU 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1174 14 Dtool_Ns0bVrx_ 0 7 981 2926 2638 14 Dtool_Ns0bVrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1175 14 Dtool_Ns0bRSTZ 0 7 981 2926 2638 14 Dtool_Ns0bRSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2916  
1176 14 Dtool_Ns0by2xB 0 7 981 2926 2638 14 Dtool_Ns0by2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2916  5 trans 1 2856  
1177 14 Dtool_Ns0bpOT1 0 7 981 2926 2638 14 Dtool_Ns0bpOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2920  
1178 14 Dtool_Ns0baNAR 0 7 981 2926 2638 14 Dtool_Ns0baNAR 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2927  
1179 14 Dtool_Ns0bLfZS 0 7 981 2926 2638 14 Dtool_Ns0bLfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e03 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e13 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  3 e23 1 2839  3 e30 1 2839  3 e31 1 2839  3 e32 1 2839  3 e33 1 2839  
1180 14 Dtool_Ns0bPVfu 0 6 982 2926 0 14 Dtool_Ns0bPVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1181 14 Dtool_Ns0bPKEm 0 6 982 2926 0 14 Dtool_Ns0bPKEm 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2927  
1182 14 Dtool_Ns0bBSXw 0 6 982 2926 0 14 Dtool_Ns0bBSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  10 fill_value 1 2839  
1183 14 Dtool_Ns0bfo_T 0 4 983 2820 0 14 Dtool_Ns0bfo_T 0 2 4 this 3 2926  4 size 1 2819  
1184 14 Dtool_Ns0bRYTi 0 6 986 2821 0 14 Dtool_Ns0bRYTi 0 2 4 this 3 2920  4 self 1 2821  
1185 14 Dtool_Ns0btsm9 0 4 987 2820 0 14 Dtool_Ns0btsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  10 fill_value 1 2839  
1186 14 Dtool_Ns0bE5Uz 0 4 988 2820 0 14 Dtool_Ns0bE5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2926  3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e03 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e13 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  3 e23 1 2839  3 e30 1 2839  3 e31 1 2839  3 e32 1 2839  3 e33 1 2839  
1187 14 Dtool_Ns0b4JsI 0 4 989 2820 0 14 Dtool_Ns0b4JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  6 upper3 1 2916  
1188 14 Dtool_Ns0bcZBN 0 7 990 2915 2549 14 Dtool_Ns0bcZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1189 14 Dtool_Ns0b4DFT 0 4 991 2820 0 14 Dtool_Ns0b4DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  3 row 1 2824  1 v 1 2856  
1190 14 Dtool_Ns0bnD10 0 4 991 2820 0 14 Dtool_Ns0bnD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  3 row 1 2824  1 v 1 2877  
1191 14 Dtool_Ns0bdmWa 0 4 992 2820 0 14 Dtool_Ns0bdmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  3 col 1 2824  1 v 1 2856  
1192 14 Dtool_Ns0bImG8 0 4 992 2820 0 14 Dtool_Ns0bImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  3 col 1 2824  1 v 1 2877  
1193 14 Dtool_Ns0bPxez 0 4 993 2820 0 14 Dtool_Ns0bPxez 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  10 result_vec 1 2876  3 row 1 2824  
1194 14 Dtool_Ns0bpwx8 0 7 993 2876 2149 14 Dtool_Ns0bpwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 row 1 2824  
1195 14 Dtool_Ns0brPFE 0 7 994 2876 2149 14 Dtool_Ns0brPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 col 1 2824  
1196 14 Dtool_Ns0beTWu 0 4 995 2820 0 14 Dtool_Ns0beTWu 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  10 result_vec 1 2855  3 row 1 2824  
1197 14 Dtool_Ns0bQL2y 0 7 995 2855 1882 14 Dtool_Ns0bQL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 row 1 2824  
1198 14 Dtool_Ns0b_pJ6 0 7 996 2855 1882 14 Dtool_Ns0b_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 col 1 2824  
1199 14 Dtool_Ns0bYgS1 0 4 997 2820 0 14 Dtool_Ns0bYgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  3 row 1 2824  3 col 1 2824  
1200 14 Dtool_Ns0bgkEX 0 6 997 2839 0 14 Dtool_Ns0bgkEX 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  3 row 1 2824  3 col 1 2824  
1201 14 Dtool_Ns0b9U2a 0 7 998 2929 2553 14 Dtool_Ns0b9U2a 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  1 i 1 2824  
1202 14 Dtool_Ns0b1rvr 0 7 998 2930 2556 14 Dtool_Ns0b1rvr 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 i 1 2824  
1203 14 Dtool_Ns0bDzAp 0 6 999 2824 0 14 Dtool_Ns0bDzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1204 14 Dtool_Ns0buXM3 0 6 1000 2825 0 14 Dtool_Ns0buXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1205 14 Dtool_Ns0btb8V 0 6 1001 2839 0 14 Dtool_Ns0btb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  3 row 1 2824  3 col 1 2824  
1206 14 Dtool_Ns0bY2F1 0 4 1002 2820 0 14 Dtool_Ns0bY2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2926  3 row 1 2824  3 col 1 2824  5 value 1 2839  
1207 14 Dtool_Ns0btPV1 0 4 1003 2820 0 14 Dtool_Ns0btPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1208 14 Dtool_Ns0bwv30 0 6 1004 2824 0 14 Dtool_Ns0bwv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1209 14 Dtool_Ns0bjKXP 0 4 1005 2820 0 14 Dtool_Ns0bjKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2926  
1210 14 Dtool_Ns0bmQjW 0 4 1005 2820 0 14 Dtool_Ns0bmQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1211 14 Dtool_Ns0bPBFI 0 4 1006 2820 0 14 Dtool_Ns0bPBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2926  
1212 14 Dtool_Ns0b5wtn 0 4 1006 2820 0 14 Dtool_Ns0b5wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1213 14 Dtool_Ns0bXz9P 0 6 1007 2825 0 14 Dtool_Ns0bXz9P 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1214 14 Dtool_Ns0bQ4WW 0 6 1008 2825 0 14 Dtool_Ns0bQ4WW 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1215 14 Dtool_Ns0bQPzN 0 6 1009 2825 0 14 Dtool_Ns0bQPzN 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1216 14 Dtool_Ns0baz9H 0 6 1010 2824 0 14 Dtool_Ns0baz9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1217 14 Dtool_Ns0blGtQ 0 6 1010 2824 0 14 Dtool_Ns0blGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  5 other 1 2920  9 threshold 1 2839  
1218 14 Dtool_Ns0bsbsK 0 6 1011 2819 0 14 Dtool_Ns0bsbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2920  
1219 14 Dtool_Ns0bAiqx 0 6 1011 2819 0 14 Dtool_Ns0bAiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  9 threshold 1 2839  
1220 14 Dtool_Ns0bT_IH 0 6 1012 2819 0 14 Dtool_Ns0bT_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  4 hash 1 2819  
1221 14 Dtool_Ns0bdWef 0 6 1012 2819 0 14 Dtool_Ns0bdWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  4 hash 1 2819  9 threshold 1 2839  
1222 14 Dtool_Ns0bO133 0 7 1013 2876 2149 14 Dtool_Ns0bO133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2877  
1223 14 Dtool_Ns0bT1IX 0 7 1014 2855 1882 14 Dtool_Ns0bT1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2856  
1224 14 Dtool_Ns0bDCVq 0 7 1015 2855 1882 14 Dtool_Ns0bDCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2856  
1225 14 Dtool_Ns0bsqNn 0 7 1016 2855 1882 14 Dtool_Ns0bsqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2856  
1226 14 Dtool_Ns0bHhNF 0 4 1017 2820 0 14 Dtool_Ns0bHhNF 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2876  
1227 14 Dtool_Ns0brdBS 0 4 1018 2820 0 14 Dtool_Ns0brdBS 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2855  
1228 14 Dtool_Ns0bL1IL 0 4 1019 2820 0 14 Dtool_Ns0bL1IL 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2855  
1229 14 Dtool_Ns0bgwSi 0 4 1020 2820 0 14 Dtool_Ns0bgwSi 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 v 1 2855  
1230 14 Dtool_Ns0bU8DL 0 4 1021 2820 0 14 Dtool_Ns0bU8DL 25 // this = other1 * other2 3 4 this 3 2926  6 other1 1 2920  6 other2 1 2920  
1231 14 Dtool_Ns0b3TdK 0 7 1022 2926 2638 14 Dtool_Ns0b3TdK 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1232 14 Dtool_Ns0b9_TF 0 7 1022 2926 2638 14 Dtool_Ns0b9_TF 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  6 scalar 1 2839  
1233 14 Dtool_Ns0bNI1G 0 7 1023 2926 2638 14 Dtool_Ns0bNI1G 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  6 scalar 1 2839  
1234 14 Dtool_Ns0b8vNX 0 6 1024 2926 0 14 Dtool_Ns0b8vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1235 14 Dtool_Ns0bcj0X 0 6 1025 2926 0 14 Dtool_Ns0bcj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1236 14 Dtool_Ns0bMO5W 0 6 1026 2926 0 14 Dtool_Ns0bMO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1237 14 Dtool_Ns0bWUUT 0 6 1026 2926 0 14 Dtool_Ns0bWUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  6 scalar 1 2839  
1238 14 Dtool_Ns0bm93U 0 6 1027 2926 0 14 Dtool_Ns0bm93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  6 scalar 1 2839  
1239 14 Dtool_Ns0boYQI 0 4 1028 2820 0 14 Dtool_Ns0boYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1240 14 Dtool_Ns0bivGM 0 4 1029 2820 0 14 Dtool_Ns0bivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2926  
1241 14 Dtool_Ns0bNuDN 0 6 1030 2825 0 14 Dtool_Ns0bNuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 other 1 2920  
1242 14 Dtool_Ns0bg2mD 0 6 1031 2825 0 14 Dtool_Ns0bg2mD 931 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2926  5 other 1 2920  
1243 14 Dtool_Ns0bIOv7 0 6 1032 2825 0 14 Dtool_Ns0bIOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2926  
1244 14 Dtool_Ns0brA3w 0 4 1033 2820 0 14 Dtool_Ns0brA3w 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  5 other 1 2920  6 weight 1 2839  
1245 14 Dtool_Ns0bAfTM 0 6 1034 2920 0 14 Dtool_Ns0bAfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1246 14 Dtool_Ns0bNy16 0 6 1035 2920 0 14 Dtool_Ns0bNy16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1247 14 Dtool_Ns0bQFPh 0 6 1036 2920 0 14 Dtool_Ns0bQFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1248 14 Dtool_Ns0blK2Y 0 4 1037 2820 0 14 Dtool_Ns0blK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 trans 1 2856  
1249 14 Dtool_Ns0b4cXj 0 4 1038 2820 0 14 Dtool_Ns0b4cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2926  5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1250 14 Dtool_Ns0bEDQQ 0 4 1038 2820 0 14 Dtool_Ns0bEDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  5 angle 1 2839  4 axis 1 2856  
1251 14 Dtool_Ns0br5fk 0 4 1039 2820 0 14 Dtool_Ns0br5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2926  5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1252 14 Dtool_Ns0bqWLK 0 4 1039 2820 0 14 Dtool_Ns0bqWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  5 angle 1 2839  4 axis 1 2856  
1253 14 Dtool_Ns0bwlwr 0 4 1040 2820 0 14 Dtool_Ns0bwlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 scale 1 2856  
1254 14 Dtool_Ns0bcZih 0 4 1041 2820 0 14 Dtool_Ns0bcZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  5 shear 1 2856  2 cs 1 2782  
1255 14 Dtool_Ns0bbfMI 0 4 1041 2820 0 14 Dtool_Ns0bbfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  5 shear 1 2856  
1256 14 Dtool_Ns0bpH_g 0 4 1042 2820 0 14 Dtool_Ns0bpH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2926  5 scale 1 2856  5 shear 1 2856  2 cs 1 2782  
1257 14 Dtool_Ns0b6wrG 0 4 1042 2820 0 14 Dtool_Ns0b6wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2926  5 scale 1 2856  5 shear 1 2856  
1258 14 Dtool_Ns0bSDJX 0 7 1043 2926 2638 14 Dtool_Ns0bSDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2856  
1259 14 Dtool_Ns0btfAu 0 7 1043 2926 2638 14 Dtool_Ns0btfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2839  2 ty 1 2839  2 tz 1 2839  
1260 14 Dtool_Ns0bblkA 0 7 1044 2926 2638 14 Dtool_Ns0bblkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1261 14 Dtool_Ns0byawN 0 7 1044 2926 2638 14 Dtool_Ns0byawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2839  4 axis 1 2856  
1262 14 Dtool_Ns0b9B_S 0 7 1045 2926 2638 14 Dtool_Ns0b9B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2839  4 axis 1 2856  2 cs 1 2782  
1263 14 Dtool_Ns0bYFts 0 7 1045 2926 2638 14 Dtool_Ns0bYFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2839  4 axis 1 2856  
1264 14 Dtool_Ns0b38_F 0 7 1046 2926 2638 14 Dtool_Ns0b38_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2856  
1265 14 Dtool_Ns0bH84Q 0 7 1046 2926 2638 14 Dtool_Ns0bH84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2839  
1266 14 Dtool_Ns0bXzZ0 0 7 1046 2926 2638 14 Dtool_Ns0bXzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  
1267 14 Dtool_Ns0bfITj 0 7 1047 2926 2638 14 Dtool_Ns0bfITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2856  2 cs 1 2782  
1268 14 Dtool_Ns0bwpeM 0 7 1047 2926 2638 14 Dtool_Ns0bwpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2856  
1269 14 Dtool_Ns0b1Nbx 0 7 1047 2926 2638 14 Dtool_Ns0b1Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  2 cs 1 2782  
1270 14 Dtool_Ns0bna36 0 7 1047 2926 2638 14 Dtool_Ns0bna36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  
1271 14 Dtool_Ns0bjJJb 0 7 1048 2926 2638 14 Dtool_Ns0bjJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2856  5 shear 1 2856  2 cs 1 2782  
1272 14 Dtool_Ns0bEN20 0 7 1048 2926 2638 14 Dtool_Ns0bEN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2856  5 shear 1 2856  
1273 14 Dtool_Ns0bfLeP 0 7 1048 2926 2638 14 Dtool_Ns0bfLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  2 cs 1 2782  
1274 14 Dtool_Ns0bkKNp 0 7 1048 2926 2638 14 Dtool_Ns0bkKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2839  2 sy 1 2839  2 sz 1 2839  4 shxy 1 2839  4 shxz 1 2839  4 shyz 1 2839  
1275 14 Dtool_Ns0bMIyP 0 6 1049 2920 0 14 Dtool_Ns0bMIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1276 14 Dtool_Ns0bMGWN 0 6 1050 2920 0 14 Dtool_Ns0bMGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1277 14 Dtool_Ns0b5OYN 0 6 1051 2920 0 14 Dtool_Ns0b5OYN 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2782  2 to 1 2782  
1278 14 Dtool_Ns0bqIgc 0 6 1052 2825 0 14 Dtool_Ns0bqIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  5 other 1 2920  
1279 14 Dtool_Ns0boOXn 0 6 1052 2825 0 14 Dtool_Ns0boOXn 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  5 other 1 2920  9 threshold 1 2839  
1280 14 Dtool_Ns0bdkYL 0 4 1053 2820 0 14 Dtool_Ns0bdkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 out 1 2826  
1281 14 Dtool_Ns0bXBeC 0 4 1054 2820 0 14 Dtool_Ns0bXBeC 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  3 out 1 2826  12 indent_level 1 2824  
1282 14 Dtool_Ns0bXY5L 0 4 1054 2820 0 14 Dtool_Ns0bXY5L 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  3 out 1 2826  
1283 14 Dtool_Ns0b5Z6N 0 4 1055 2820 0 14 Dtool_Ns0b5Z6N 0 3 4 this 3 2920  3 out 1 2826  10 class_name 1 2823  
1284 14 Dtool_Ns0bQqLT 0 4 1056 2820 0 14 Dtool_Ns0bQqLT 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  7 hashgen 1 2828  
1285 14 Dtool_Ns0bj1Tq 0 4 1056 2820 0 14 Dtool_Ns0bj1Tq 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2920  7 hashgen 1 2828  5 scale 1 2839  
1286 14 Dtool_Ns0b0yx8 0 4 1057 2820 0 14 Dtool_Ns0b0yx8 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  11 destination 1 2830  
1287 14 Dtool_Ns0bb9pg 0 4 1058 2820 0 14 Dtool_Ns0bb9pg 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  4 scan 1 2832  
1288 14 Dtool_Ns0bAHts 0 4 1059 2820 0 14 Dtool_Ns0bAHts 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  11 destination 1 2830  
1289 14 Dtool_Ns0bT9Pt 0 4 1060 2820 0 14 Dtool_Ns0bT9Pt 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  6 source 1 2832  
1290 14 Dtool_Ns0bn3L3 0 7 1061 2835 0 14 Dtool_Ns0bn3L3 0 0 
1291 14 Dtool_Ns0bComI 0 4 973 2820 0 14 Dtool_Ns0bComI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2929  1 i 1 2824  
1292 14 Dtool_Ns0b7tWq 0 6 973 2839 0 14 Dtool_Ns0b7tWq 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2931  1 i 1 2824  
1293 14 Dtool_Ns0bstFR 0 4 974 2820 0 14 Dtool_Ns0bstFR 0 3 4 this 3 2929  1 i 1 2824  1 v 1 2839  
1294 14 Dtool_Ns0blF2k 0 6 975 2824 0 14 Dtool_Ns0blF2k 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1295 14 Dtool_Ns0bj2qs 0 6 978 2839 0 14 Dtool_Ns0bj2qs 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2933  1 i 1 2824  
1296 14 Dtool_Ns0b9cS7 0 6 979 2824 0 14 Dtool_Ns0b9cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1297 14 Dtool_Ns0bz1FW 0 7 1064 2935 2646 14 Dtool_Ns0bz1FW 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1298 14 Dtool_Ns0bGu6U 0 7 1064 2935 2646 14 Dtool_Ns0bGu6U 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2920  
1299 14 Dtool_Ns0b_vVq 0 7 1064 2935 2646 14 Dtool_Ns0b_vVq 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2927  
1300 14 Dtool_Ns0bF1Im 0 7 1064 2935 2646 14 Dtool_Ns0bF1Im 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e03 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e13 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  3 e23 1 2839  3 e30 1 2839  3 e31 1 2839  3 e32 1 2839  3 e33 1 2839  
1301 14 Dtool_Ns0b4c8E 0 6 1065 2935 0 14 Dtool_Ns0b4c8E 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2935  4 copy 1 2920  
1302 14 Dtool_Ns0byn3z 0 6 1065 2935 0 14 Dtool_Ns0byn3z 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2935  4 copy 1 2927  
1303 14 Dtool_Ns0bn_Mt 0 4 1066 2820 0 14 Dtool_Ns0bn_Mt 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2935  3 e00 1 2839  3 e01 1 2839  3 e02 1 2839  3 e03 1 2839  3 e10 1 2839  3 e11 1 2839  3 e12 1 2839  3 e13 1 2839  3 e20 1 2839  3 e21 1 2839  3 e22 1 2839  3 e23 1 2839  3 e30 1 2839  3 e31 1 2839  3 e32 1 2839  3 e33 1 2839  
1304 14 Dtool_Ns0bnXxN 0 4 1067 2820 0 14 Dtool_Ns0bnXxN 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2935  3 row 1 2824  3 col 1 2824  
1305 14 Dtool_Ns0b_K_B 0 6 1067 2839 0 14 Dtool_Ns0b_K_B 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2927  3 row 1 2824  3 col 1 2824  
1306 14 Dtool_Ns0bf_yd 0 4 1068 2820 0 14 Dtool_Ns0bf_yd 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2927  
1307 14 Dtool_Ns0blJtd 0 6 1069 2824 0 14 Dtool_Ns0blJtd 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2927  
1308 14 Dtool_Ns0br_BG 0 7 1070 2835 0 14 Dtool_Ns0br_BG 0 0 
1309 14 Dtool_Ns0brtd_ 0 7 1085 2936 2706 14 Dtool_Ns0brtd_ 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1310 14 Dtool_Ns0bvDxK 0 7 1085 2936 2706 14 Dtool_Ns0bvDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
1311 14 Dtool_Ns0bM1Wm 0 7 1085 2936 2706 14 Dtool_Ns0bM1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2818  4 copy 1 2853  
1312 14 Dtool_Ns0bzNTV 0 7 1085 2936 2706 14 Dtool_Ns0bzNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2818  6 param1 0 2818  6 param2 0 2818  6 param3 0 2818  
1313 14 Dtool_Ns0bQoeb 0 7 1086 2936 2706 14 Dtool_Ns0bQoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2859  
1314 14 Dtool_Ns0b_F9y 0 7 1087 2936 2706 14 Dtool_Ns0b_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1315 14 Dtool_Ns0brkOj 0 7 1088 2852 1812 14 Dtool_Ns0brkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  1 v 1 2853  
1316 14 Dtool_Ns0bjhO_ 0 7 1088 2870 2071 14 Dtool_Ns0bjhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  1 v 1 2871  
1317 14 Dtool_Ns0beJuF 0 7 1089 2936 2706 14 Dtool_Ns0beJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  3 rhs 1 2937  
1318 14 Dtool_Ns0bXaQp 0 7 1090 2936 2706 14 Dtool_Ns0bXaQp 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1319 14 Dtool_Ns0bI56X 0 7 1091 2936 2706 14 Dtool_Ns0bI56X 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1320 14 Dtool_Ns0bb27z 0 7 1092 2936 2706 14 Dtool_Ns0bb27z 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1321 14 Dtool_Ns0b3Uhy 0 6 1093 2818 0 14 Dtool_Ns0b3Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1322 14 Dtool_Ns0bmSn_ 0 6 1094 2818 0 14 Dtool_Ns0bmSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1323 14 Dtool_Ns0bj8YK 0 7 1095 2894 2369 14 Dtool_Ns0bj8YK 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 param0 0 2895  
1324 14 Dtool_Ns0be9Is 0 7 1095 2905 2460 14 Dtool_Ns0be9Is 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 param0 0 2899  
1325 14 Dtool_Ns0bU_6J 0 7 1095 2936 2706 14 Dtool_Ns0bU_6J 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  6 param0 0 2937  
1326 14 Dtool_Ns0bppqj 0 7 1095 2936 2706 14 Dtool_Ns0bppqj 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  6 scalar 1 2818  
1327 14 Dtool_Ns0be9qp 0 7 1096 2936 2706 14 Dtool_Ns0be9qp 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  6 scalar 1 2818  
1328 14 Dtool_Ns0bMJVd 0 6 1097 2936 0 14 Dtool_Ns0bMJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 param0 0 2937  
1329 14 Dtool_Ns0brHMU 0 6 1098 2825 0 14 Dtool_Ns0brHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1330 14 Dtool_Ns0blDKH 0 6 1098 2825 0 14 Dtool_Ns0blDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2937  5 other 1 2937  9 threshold 1 2818  
1331 14 Dtool_Ns0bi2zi 0 6 1099 2825 0 14 Dtool_Ns0bi2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  5 other 1 2937  
1332 14 Dtool_Ns0bgEa5 0 6 1100 2825 0 14 Dtool_Ns0bgEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2937  5 other 1 2937  9 threshold 1 2818  
1333 14 Dtool_Ns0bclzP 0 4 1101 2820 0 14 Dtool_Ns0bclzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  6 param0 0 2826  
1334 14 Dtool_Ns0bQnH2 0 4 1102 2820 0 14 Dtool_Ns0bQnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  1 m 1 2894  
1335 14 Dtool_Ns0bIWR2 0 4 1102 2820 0 14 Dtool_Ns0bIWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  1 m 1 2905  
1336 14 Dtool_Ns0badwD 0 4 1103 2820 0 14 Dtool_Ns0badwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 m 1 2895  
1337 14 Dtool_Ns0b1eQH 0 4 1103 2820 0 14 Dtool_Ns0b1eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 m 1 2899  
1338 14 Dtool_Ns0bRc8G 0 4 1104 2820 0 14 Dtool_Ns0bRc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2936  3 hpr 1 2853  2 cs 1 2782  
1339 14 Dtool_Ns0bghkq 0 4 1104 2820 0 14 Dtool_Ns0bghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  3 hpr 1 2853  
1340 14 Dtool_Ns0bWRZg 0 7 1105 2852 1812 14 Dtool_Ns0bWRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  2 cs 1 2782  
1341 14 Dtool_Ns0bO1A0 0 7 1105 2852 1812 14 Dtool_Ns0bO1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1342 14 Dtool_Ns0bYcKh 0 7 1106 2858 1980 14 Dtool_Ns0bYcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1343 14 Dtool_Ns0bNIeK 0 7 1107 2858 1980 14 Dtool_Ns0bNIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1344 14 Dtool_Ns0bZTUN 0 6 1108 2818 0 14 Dtool_Ns0bZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1345 14 Dtool_Ns0beAIg 0 6 1109 2818 0 14 Dtool_Ns0beAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1346 14 Dtool_Ns0byPe0 0 4 1110 2820 0 14 Dtool_Ns0byPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2936  9 angle_rad 1 2818  4 axis 1 2859  
1347 14 Dtool_Ns0bYkah 0 4 1111 2820 0 14 Dtool_Ns0bYkah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2936  9 angle_deg 1 2818  4 axis 1 2859  
1348 14 Dtool_Ns0b3KoZ 0 7 1112 2858 1980 14 Dtool_Ns0b3KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  2 cs 1 2782  
1349 14 Dtool_Ns0brwSS 0 7 1112 2858 1980 14 Dtool_Ns0brwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1350 14 Dtool_Ns0bMxzz 0 7 1113 2858 1980 14 Dtool_Ns0bMxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  2 cs 1 2782  
1351 14 Dtool_Ns0b86me 0 7 1113 2858 1980 14 Dtool_Ns0b86me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1352 14 Dtool_Ns0b6X_p 0 7 1114 2858 1980 14 Dtool_Ns0b6X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  2 cs 1 2782  
1353 14 Dtool_Ns0bIjTb 0 7 1114 2858 1980 14 Dtool_Ns0bIjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1354 14 Dtool_Ns0bk8aD 0 6 1115 2818 0 14 Dtool_Ns0bk8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1355 14 Dtool_Ns0bjxaE 0 6 1116 2818 0 14 Dtool_Ns0bjxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1356 14 Dtool_Ns0b1yaL 0 6 1117 2818 0 14 Dtool_Ns0b1yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1357 14 Dtool_Ns0bH0aS 0 6 1118 2818 0 14 Dtool_Ns0bH0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1358 14 Dtool_Ns0b3PLX 0 4 1119 2820 0 14 Dtool_Ns0b3PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 r 1 2818  
1359 14 Dtool_Ns0b04KY 0 4 1120 2820 0 14 Dtool_Ns0b04KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 i 1 2818  
1360 14 Dtool_Ns0bm5Kf 0 4 1121 2820 0 14 Dtool_Ns0bm5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 j 1 2818  
1361 14 Dtool_Ns0bYGLm 0 4 1122 2820 0 14 Dtool_Ns0bYGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  1 k 1 2818  
1362 14 Dtool_Ns0baBWQ 0 6 1123 2825 0 14 Dtool_Ns0baBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
1363 14 Dtool_Ns0bMknV 0 6 1124 2825 0 14 Dtool_Ns0bMknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  5 other 1 2937  
1364 14 Dtool_Ns0bDgwh 0 6 1125 2825 0 14 Dtool_Ns0bDgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
1365 14 Dtool_Ns0bed84 0 6 1126 2825 0 14 Dtool_Ns0bed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  5 other 1 2937  
1366 14 Dtool_Ns0bvLqt 0 6 1127 2825 0 14 Dtool_Ns0bvLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
1367 14 Dtool_Ns0bJkak 0 6 1128 2825 0 14 Dtool_Ns0bJkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2937  
1368 14 Dtool_Ns0b4P4N 0 6 1129 2825 0 14 Dtool_Ns0b4P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  9 tolerance 1 2818  
1369 14 Dtool_Ns0bmmMR 0 6 1130 2937 0 14 Dtool_Ns0bmmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1370 14 Dtool_Ns0bndKd 0 7 1131 2835 0 14 Dtool_Ns0bndKd 0 0 
1371 14 Dtool_Ns0brOX4 0 7 1134 2939 2754 14 Dtool_Ns0brOX4 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1372 14 Dtool_Ns0bwmdo 0 7 1134 2939 2754 14 Dtool_Ns0bwmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
1373 14 Dtool_Ns0bBaVV 0 7 1134 2939 2754 14 Dtool_Ns0bBaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2839  4 copy 1 2856  
1374 14 Dtool_Ns0b6Z6w 0 7 1134 2939 2754 14 Dtool_Ns0b6Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2839  6 param1 0 2839  6 param2 0 2839  6 param3 0 2839  
1375 14 Dtool_Ns0bOPmP 0 7 1135 2939 2754 14 Dtool_Ns0bOPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2862  
1376 14 Dtool_Ns0b_hFu 0 7 1136 2939 2754 14 Dtool_Ns0b_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1377 14 Dtool_Ns0bPTTe 0 7 1137 2855 1882 14 Dtool_Ns0bPTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  1 v 1 2856  
1378 14 Dtool_Ns0bHWT6 0 7 1137 2876 2149 14 Dtool_Ns0bHWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  1 v 1 2877  
1379 14 Dtool_Ns0bGGsA 0 7 1138 2939 2754 14 Dtool_Ns0bGGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  3 rhs 1 2940  
1380 14 Dtool_Ns0bX_Xk 0 7 1139 2939 2754 14 Dtool_Ns0bX_Xk 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1381 14 Dtool_Ns0bPV02 0 7 1140 2939 2754 14 Dtool_Ns0bPV02 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1382 14 Dtool_Ns0bZa1S 0 7 1141 2939 2754 14 Dtool_Ns0bZa1S 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1383 14 Dtool_Ns0b3sxo 0 6 1142 2839 0 14 Dtool_Ns0b3sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1384 14 Dtool_Ns0bmq30 0 6 1143 2839 0 14 Dtool_Ns0bmq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1385 14 Dtool_Ns0bBNgV 0 7 1144 2915 2549 14 Dtool_Ns0bBNgV 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  6 param0 0 2916  
1386 14 Dtool_Ns0b8NQ3 0 7 1144 2926 2638 14 Dtool_Ns0b8NQ3 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  6 param0 0 2920  
1387 14 Dtool_Ns0brQ0o 0 7 1144 2939 2754 14 Dtool_Ns0brQ0o 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  6 param0 0 2940  
1388 14 Dtool_Ns0bA0TI 0 7 1144 2939 2754 14 Dtool_Ns0bA0TI 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  6 scalar 1 2839  
1389 14 Dtool_Ns0bPASO 0 7 1145 2939 2754 14 Dtool_Ns0bPASO 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  6 scalar 1 2839  
1390 14 Dtool_Ns0b6vdR 0 6 1146 2939 0 14 Dtool_Ns0b6vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  6 param0 0 2940  
1391 14 Dtool_Ns0bsATv 0 6 1147 2825 0 14 Dtool_Ns0bsATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1392 14 Dtool_Ns0bKRVo 0 6 1147 2825 0 14 Dtool_Ns0bKRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2940  5 other 1 2940  9 threshold 1 2839  
1393 14 Dtool_Ns0bZg5d 0 6 1148 2825 0 14 Dtool_Ns0bZg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  5 other 1 2940  
1394 14 Dtool_Ns0bUNTJ 0 6 1149 2825 0 14 Dtool_Ns0bUNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2940  5 other 1 2940  9 threshold 1 2839  
1395 14 Dtool_Ns0bcZ7K 0 4 1150 2820 0 14 Dtool_Ns0bcZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  6 param0 0 2826  
1396 14 Dtool_Ns0bQLcn 0 4 1151 2820 0 14 Dtool_Ns0bQLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  1 m 1 2915  
1397 14 Dtool_Ns0bI6nn 0 4 1151 2820 0 14 Dtool_Ns0bI6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  1 m 1 2926  
1398 14 Dtool_Ns0bea4e 0 4 1152 2820 0 14 Dtool_Ns0bea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 m 1 2916  
1399 14 Dtool_Ns0b5bYi 0 4 1152 2820 0 14 Dtool_Ns0b5bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 m 1 2920  
1400 14 Dtool_Ns0bX48z 0 4 1153 2820 0 14 Dtool_Ns0bX48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2939  3 hpr 1 2856  2 cs 1 2782  
1401 14 Dtool_Ns0bhFnX 0 4 1153 2820 0 14 Dtool_Ns0bhFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  3 hpr 1 2856  
1402 14 Dtool_Ns0bW1gb 0 7 1154 2855 1882 14 Dtool_Ns0bW1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  2 cs 1 2782  
1403 14 Dtool_Ns0bORIv 0 7 1154 2855 1882 14 Dtool_Ns0bORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1404 14 Dtool_Ns0bY4Rc 0 7 1155 2861 2014 14 Dtool_Ns0bY4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1405 14 Dtool_Ns0bNkmF 0 7 1156 2861 2014 14 Dtool_Ns0bNkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1406 14 Dtool_Ns0bZ_bI 0 6 1157 2839 0 14 Dtool_Ns0bZ_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1407 14 Dtool_Ns0be8Rb 0 6 1158 2839 0 14 Dtool_Ns0be8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1408 14 Dtool_Ns0bZ91x 0 4 1159 2820 0 14 Dtool_Ns0bZ91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2939  9 angle_rad 1 2839  4 axis 1 2862  
1409 14 Dtool_Ns0bVKOA 0 4 1160 2820 0 14 Dtool_Ns0bVKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2939  9 angle_deg 1 2839  4 axis 1 2862  
1410 14 Dtool_Ns0b3uwU 0 7 1161 2861 2014 14 Dtool_Ns0b3uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  2 cs 1 2782  
1411 14 Dtool_Ns0brsaN 0 7 1161 2861 2014 14 Dtool_Ns0brsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1412 14 Dtool_Ns0bMt7u 0 7 1162 2861 2014 14 Dtool_Ns0bMt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  2 cs 1 2782  
1413 14 Dtool_Ns0b8etZ 0 7 1162 2861 2014 14 Dtool_Ns0b8etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1414 14 Dtool_Ns0b6zHl 0 7 1163 2861 2014 14 Dtool_Ns0b6zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  2 cs 1 2782  
1415 14 Dtool_Ns0bIPaW 0 7 1163 2861 2014 14 Dtool_Ns0bIPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1416 14 Dtool_Ns0blYi_ 0 6 1164 2839 0 14 Dtool_Ns0blYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1417 14 Dtool_Ns0bkVi_ 0 6 1165 2839 0 14 Dtool_Ns0bkVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1418 14 Dtool_Ns0b1WiG 0 6 1166 2839 0 14 Dtool_Ns0b1WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1419 14 Dtool_Ns0bHQiN 0 6 1167 2839 0 14 Dtool_Ns0bHQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1420 14 Dtool_Ns0b2srU 0 4 1168 2820 0 14 Dtool_Ns0b2srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 r 1 2839  
1421 14 Dtool_Ns0b3hrV 0 4 1169 2820 0 14 Dtool_Ns0b3hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 i 1 2839  
1422 14 Dtool_Ns0b5irc 0 4 1170 2820 0 14 Dtool_Ns0b5irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 j 1 2839  
1423 14 Dtool_Ns0bLjrj 0 4 1171 2820 0 14 Dtool_Ns0bLjrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 k 1 2839  
1424 14 Dtool_Ns0baleL 0 6 1172 2825 0 14 Dtool_Ns0baleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2939  
1425 14 Dtool_Ns0bMw_G 0 6 1173 2825 0 14 Dtool_Ns0bMw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  5 other 1 2940  
1426 14 Dtool_Ns0bDM3c 0 6 1174 2825 0 14 Dtool_Ns0bDM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2939  
1427 14 Dtool_Ns0bIgEt 0 6 1175 2825 0 14 Dtool_Ns0bIgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  5 other 1 2940  
1428 14 Dtool_Ns0bv3zo 0 6 1176 2825 0 14 Dtool_Ns0bv3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2939  
1429 14 Dtool_Ns0bJIif 0 6 1177 2825 0 14 Dtool_Ns0bJIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
1430 14 Dtool_Ns0bZ4KV 0 6 1178 2825 0 14 Dtool_Ns0bZ4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  9 tolerance 1 2839  
1431 14 Dtool_Ns0bmaTM 0 6 1179 2940 0 14 Dtool_Ns0bmaTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1432 14 Dtool_Ns0bnxRY 0 7 1180 2835 0 14 Dtool_Ns0bnxRY 0 0 
1433 14 Dtool_Ns0b1ufs 0 7 1183 2942 2759 14 Dtool_Ns0b1ufs 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1434 14 Dtool_Ns0boHWm 0 7 1183 2942 2759 14 Dtool_Ns0boHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2895  
1435 14 Dtool_Ns0boMkn 0 7 1183 2942 2759 14 Dtool_Ns0boMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2899  
1436 14 Dtool_Ns0bdC6k 0 7 1183 2942 2759 14 Dtool_Ns0bdC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2937  
1437 14 Dtool_Ns0bZE8x 0 7 1183 2942 2759 14 Dtool_Ns0bZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2871  
1438 14 Dtool_Ns0bzssT 0 7 1183 2942 2759 14 Dtool_Ns0bzssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2859  6 param1 0 2818  
1439 14 Dtool_Ns0bLwNm 0 7 1183 2942 2759 14 Dtool_Ns0bLwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2818  6 param1 0 2818  6 param2 0 2818  
1440 14 Dtool_Ns0b6t_a 0 7 1183 2942 2759 14 Dtool_Ns0b6t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2818  6 param1 0 2818  6 param2 0 2818  6 param3 0 2818  
1441 14 Dtool_Ns0bcT59 0 7 1184 2936 2706 14 Dtool_Ns0bcT59 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  5 other 1 2937  
1442 14 Dtool_Ns0bttc8 0 7 1184 2942 2759 14 Dtool_Ns0bttc8 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  5 other 1 2943  
1443 14 Dtool_Ns0bmMpJ 0 7 1184 2942 2759 14 Dtool_Ns0bmMpJ 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  6 scalar 1 2818  
1444 14 Dtool_Ns0bmkd6 0 7 1185 2942 2759 14 Dtool_Ns0bmkd6 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  6 scalar 1 2818  
1445 14 Dtool_Ns0bscCI 0 7 1186 2835 0 14 Dtool_Ns0bscCI 0 0 
1446 14 Dtool_Ns0bXT9o 0 7 1189 2945 2764 14 Dtool_Ns0bXT9o 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1447 14 Dtool_Ns0b1jtU 0 7 1189 2945 2764 14 Dtool_Ns0b1jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2916  
1448 14 Dtool_Ns0b1o7V 0 7 1189 2945 2764 14 Dtool_Ns0b1o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2920  
1449 14 Dtool_Ns0b71Oh 0 7 1189 2945 2764 14 Dtool_Ns0b71Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2940  
1450 14 Dtool_Ns0bbq7q 0 7 1189 2945 2764 14 Dtool_Ns0bbq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2877  
1451 14 Dtool_Ns0bLdpy 0 7 1189 2945 2764 14 Dtool_Ns0bLdpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2862  6 param1 0 2839  
1452 14 Dtool_Ns0b4Iug 0 7 1189 2945 2764 14 Dtool_Ns0b4Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2839  6 param1 0 2839  6 param2 0 2839  
1453 14 Dtool_Ns0bA9cz 0 7 1189 2945 2764 14 Dtool_Ns0bA9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2839  6 param1 0 2839  6 param2 0 2839  6 param3 0 2839  
1454 14 Dtool_Ns0bukuN 0 7 1190 2939 2754 14 Dtool_Ns0bukuN 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2946  5 other 1 2940  
1455 14 Dtool_Ns0b1Z8I 0 7 1190 2945 2764 14 Dtool_Ns0b1Z8I 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2946  5 other 1 2946  
1456 14 Dtool_Ns0by_rc 0 7 1190 2945 2764 14 Dtool_Ns0by_rc 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2946  6 scalar 1 2839  
1457 14 Dtool_Ns0bzWgN 0 7 1191 2945 2764 14 Dtool_Ns0bzWgN 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2946  6 scalar 1 2839  
1458 14 Dtool_Ns0bKPCY 0 7 1192 2835 0 14 Dtool_Ns0bKPCY 0 0 
1459 14 Dtool_Ns0bcX4n 0 7 1195 2948 2768 14 Dtool_Ns0bcX4n 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1460 14 Dtool_Ns0bkodg 0 7 1195 2948 2768 14 Dtool_Ns0bkodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2895  
1461 14 Dtool_Ns0bloku 0 7 1195 2948 2768 14 Dtool_Ns0bloku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2899  
1462 14 Dtool_Ns0b_eNF 0 7 1195 2948 2768 14 Dtool_Ns0b_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2937  
1463 14 Dtool_Ns0bOs13 0 7 1195 2948 2768 14 Dtool_Ns0bOs13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2859  6 param1 0 2818  
1464 14 Dtool_Ns0bWFbK 0 7 1195 2948 2768 14 Dtool_Ns0bWFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2818  6 param1 0 2818  6 param2 0 2818  6 param3 0 2818  
1465 14 Dtool_Ns0b1nPz 0 7 1196 2948 2768 14 Dtool_Ns0b1nPz 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2949  5 other 1 2937  
1466 14 Dtool_Ns0byr_X 0 7 1196 2948 2768 14 Dtool_Ns0byr_X 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2949  5 other 1 2943  
1467 14 Dtool_Ns0byKEa 0 7 1197 2835 0 14 Dtool_Ns0byKEa 0 0 
1468 14 Dtool_Ns0b2Y6p 0 7 1200 2951 2772 14 Dtool_Ns0b2Y6p 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1469 14 Dtool_Ns0bYrfb 0 7 1200 2951 2772 14 Dtool_Ns0bYrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2916  
1470 14 Dtool_Ns0bZrmp 0 7 1200 2951 2772 14 Dtool_Ns0bZrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2920  
1471 14 Dtool_Ns0bRFe9 0 7 1200 2951 2772 14 Dtool_Ns0bRFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2940  
1472 14 Dtool_Ns0byi3y 0 7 1200 2951 2772 14 Dtool_Ns0byi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2862  6 param1 0 2818  
1473 14 Dtool_Ns0bQOxM 0 7 1200 2951 2772 14 Dtool_Ns0bQOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2839  6 param1 0 2839  6 param2 0 2839  6 param3 0 2839  
1474 14 Dtool_Ns0blgBQ 0 7 1201 2951 2772 14 Dtool_Ns0blgBQ 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2952  5 other 1 2940  
1475 14 Dtool_Ns0b9P52 0 7 1201 2951 2772 14 Dtool_Ns0b9P52 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2952  5 other 1 2946  
1476 14 Dtool_Ns0bxK29 0 7 1202 2835 0 14 Dtool_Ns0bxK29 0 0 
1477 14 Dtool_Ns0baTo4 0 6 3 2839 0 14 Dtool_Ns0baTo4 0 1 1 f 1 2839  
1478 14 Dtool_Ns0bRKCI 0 6 3 2818 0 14 Dtool_Ns0bRKCI 0 1 1 f 1 2818  
1479 14 Dtool_Ns0bgpRs 0 6 4 2839 0 14 Dtool_Ns0bgpRs 0 1 1 f 1 2839  
1480 14 Dtool_Ns0bIbq7 0 6 4 2818 0 14 Dtool_Ns0bIbq7 0 1 1 f 1 2818  
1481 14 Dtool_Ns0bt1jy 0 6 342 2782 0 14 Dtool_Ns0bt1jy 0 0 
1482 14 Dtool_Ns0bVyE0 0 6 343 2782 0 14 Dtool_Ns0bVyE0 0 1 3 str 1 2823  
1483 14 Dtool_Ns0bblcZ 0 6 344 2823 0 14 Dtool_Ns0bblcZ 0 1 2 cs 1 2782  
1484 14 Dtool_Ns0b14II 0 6 345 2825 0 14 Dtool_Ns0b14II 0 1 2 cs 1 2782  
1485 14 Dtool_Ns0bvd7J 0 6 345 2825 0 14 Dtool_Ns0bvd7J 0 0 
1486 14 Dtool_Ns0bp_eQ 0 7 784 2915 2549 14 Dtool_Ns0bp_eQ 0 1 1 a 1 2916  
1487 14 Dtool_Ns0bN4ee 0 7 784 2894 2369 14 Dtool_Ns0bN4ee 0 1 1 a 1 2895  
1488 14 Dtool_Ns0bn_ss 0 7 784 2926 2638 14 Dtool_Ns0bn_ss 0 1 1 a 1 2920  
1489 14 Dtool_Ns0bL4s6 0 7 784 2905 2460 14 Dtool_Ns0bL4s6 0 1 1 a 1 2899  
1490 14 Dtool_Ns0b9Gem 0 7 785 2915 2549 14 Dtool_Ns0b9Gem 0 1 1 a 1 2916  
1491 14 Dtool_Ns0bNgym 0 7 785 2894 2369 14 Dtool_Ns0bNgym 0 1 1 a 1 2895  
1492 14 Dtool_Ns0bYJfW 0 7 785 2926 2638 14 Dtool_Ns0bYJfW 0 1 1 a 1 2920  
1493 14 Dtool_Ns0borzW 0 7 785 2905 2460 14 Dtool_Ns0borzW 0 1 1 a 1 2899  
1494 14 Dtool_Ns0bG8wm 0 7 785 2939 2754 14 Dtool_Ns0bG8wm 0 1 1 a 1 2940  
1495 14 Dtool_Ns0bqBx0 0 7 785 2936 2706 14 Dtool_Ns0bqBx0 0 1 1 a 1 2937  
1496 14 Dtool_Ns0bDzjX 0 7 1072 2915 2549 14 Dtool_Ns0bDzjX 0 2 1 m 1 2916  1 q 1 2940  
1497 14 Dtool_Ns0bkolH 0 7 1072 2894 2369 14 Dtool_Ns0bkolH 0 2 1 m 1 2895  1 q 1 2937  
1498 14 Dtool_Ns0bRsje 0 7 1072 2926 2638 14 Dtool_Ns0bRsje 0 2 1 m 1 2920  1 q 1 2940  
1499 14 Dtool_Ns0bqplO 0 7 1072 2905 2460 14 Dtool_Ns0bqplO 0 2 1 m 1 2899  1 q 1 2937  
1500 14 Dtool_Ns0byfKI 0 7 1072 2849 1802 14 Dtool_Ns0byfKI 0 2 1 v 1 2850  1 m 1 2916  
1501 14 Dtool_Ns0bSCRW 0 7 1072 2846 1786 14 Dtool_Ns0bSCRW 0 2 1 v 1 2847  1 m 1 2895  
1502 14 Dtool_Ns0bwfYk 0 7 1072 2867 2060 14 Dtool_Ns0bwfYk 0 2 1 v 1 2868  1 m 1 2916  
1503 14 Dtool_Ns0bmWZA 0 7 1072 2867 2060 14 Dtool_Ns0bmWZA 0 2 1 v 1 2868  1 m 1 2920  
1504 14 Dtool_Ns0bQCfy 0 7 1072 2864 2037 14 Dtool_Ns0bQCfy 0 2 1 v 1 2865  1 m 1 2895  
1505 14 Dtool_Ns0beNeO 0 7 1072 2864 2037 14 Dtool_Ns0beNeO 0 2 1 v 1 2865  1 m 1 2899  
1506 14 Dtool_Ns0bkWnc 0 7 1072 2891 2288 14 Dtool_Ns0bkWnc 0 2 1 v 1 2892  1 m 1 2920  
1507 14 Dtool_Ns0bcNsq 0 7 1072 2888 2270 14 Dtool_Ns0bcNsq 0 2 1 v 1 2889  1 m 1 2899  
1508 14 Dtool_Ns0b6f4W 0 7 1072 2855 1882 14 Dtool_Ns0b6f4W 0 2 1 v 1 2856  1 m 1 2916  
1509 14 Dtool_Ns0bZSml 0 7 1072 2852 1812 14 Dtool_Ns0bZSml 0 2 1 v 1 2853  1 m 1 2895  
1510 14 Dtool_Ns0bHpH4 0 7 1072 2876 2149 14 Dtool_Ns0bHpH4 0 2 1 v 1 2877  1 m 1 2920  
1511 14 Dtool_Ns0blt1G 0 7 1072 2870 2071 14 Dtool_Ns0blt1G 0 2 1 v 1 2871  1 m 1 2899  
1512 14 Dtool_Ns0bQlWf 0 7 1072 2843 1770 14 Dtool_Ns0bQlWf 0 2 1 v 1 2844  1 m 1 2916  
1513 14 Dtool_Ns0bfZ0h 0 7 1072 2840 1752 14 Dtool_Ns0bfZ0h 0 2 1 v 1 2841  1 m 1 2895  
1514 14 Dtool_Ns0bmnWm 0 7 1072 2861 2014 14 Dtool_Ns0bmnWm 0 2 1 v 1 2862  1 m 1 2916  
1515 14 Dtool_Ns0bwbZm 0 7 1072 2861 2014 14 Dtool_Ns0bwbZm 0 2 1 v 1 2862  1 m 1 2920  
1516 14 Dtool_Ns0bpb0o 0 7 1072 2858 1980 14 Dtool_Ns0bpb0o 0 2 1 v 1 2859  1 m 1 2895  
1517 14 Dtool_Ns0b7_2o 0 7 1072 2858 1980 14 Dtool_Ns0b7_2o 0 2 1 v 1 2859  1 m 1 2899  
1518 14 Dtool_Ns0biUZt 0 7 1072 2885 2252 14 Dtool_Ns0biUZt 0 2 1 v 1 2886  1 m 1 2920  
1519 14 Dtool_Ns0bpw2v 0 7 1072 2882 2234 14 Dtool_Ns0bpw2v 0 2 1 v 1 2883  1 m 1 2899  
1520 14 Dtool_Ns0blh4s 0 4 1073 2820 0 14 Dtool_Ns0blh4s 0 2 1 v 1 2849  1 m 1 2916  
1521 14 Dtool_Ns0bHtbw 0 4 1073 2820 0 14 Dtool_Ns0bHtbw 0 2 1 v 1 2846  1 m 1 2895  
1522 14 Dtool_Ns0bXi4z 0 4 1073 2820 0 14 Dtool_Ns0bXi4z 0 2 1 v 1 2867  1 m 1 2916  
1523 14 Dtool_Ns0bUC8a 0 4 1073 2820 0 14 Dtool_Ns0bUC8a 0 2 1 v 1 2867  1 m 1 2920  
1524 14 Dtool_Ns0bVsb3 0 4 1073 2820 0 14 Dtool_Ns0bVsb3 0 2 1 v 1 2864  1 m 1 2895  
1525 14 Dtool_Ns0bUMfe 0 4 1073 2820 0 14 Dtool_Ns0bUMfe 0 2 1 v 1 2864  1 m 1 2899  
1526 14 Dtool_Ns0bbnYb 0 4 1073 2820 0 14 Dtool_Ns0bbnYb 0 2 1 v 1 2855  1 m 1 2916  
1527 14 Dtool_Ns0bTAEv 0 4 1073 2820 0 14 Dtool_Ns0bTAEv 0 2 1 v 1 2852  1 m 1 2895  
1528 14 Dtool_Ns0b6LsT 0 4 1073 2820 0 14 Dtool_Ns0b6LsT 0 2 1 v 1 2876  1 m 1 2920  
1529 14 Dtool_Ns0byoXn 0 4 1073 2820 0 14 Dtool_Ns0byoXn 0 2 1 v 1 2870  1 m 1 2899  
1530 14 Dtool_Ns0bSP7Z 0 4 1073 2820 0 14 Dtool_Ns0bSP7Z 0 2 1 v 1 2843  1 m 1 2916  
1531 14 Dtool_Ns0bQFiK 0 4 1073 2820 0 14 Dtool_Ns0bQFiK 0 2 1 v 1 2840  1 m 1 2895  
1532 14 Dtool_Ns0bXk75 0 4 1073 2820 0 14 Dtool_Ns0bXk75 0 2 1 v 1 2861  1 m 1 2916  
1533 14 Dtool_Ns0b7krb 0 4 1073 2820 0 14 Dtool_Ns0b7krb 0 2 1 v 1 2861  1 m 1 2920  
1534 14 Dtool_Ns0bVsiq 0 4 1073 2820 0 14 Dtool_Ns0bVsiq 0 2 1 v 1 2858  1 m 1 2895  
1535 14 Dtool_Ns0b5tSM 0 4 1073 2820 0 14 Dtool_Ns0b5tSM 0 2 1 v 1 2858  1 m 1 2899  
1536 14 Dtool_Ns0bJ63D 0 4 1074 2820 0 14 Dtool_Ns0bJ63D 0 2 4 dest 1 2830  5 value 1 2916  
1537 14 Dtool_Ns0bQo4D 0 4 1074 2820 0 14 Dtool_Ns0bQo4D 0 2 4 dest 1 2830  5 value 1 2895  
1538 14 Dtool_Ns0bb53K 0 4 1074 2820 0 14 Dtool_Ns0bb53K 0 2 4 dest 1 2830  5 value 1 2920  
1539 14 Dtool_Ns0bCr4K 0 4 1074 2820 0 14 Dtool_Ns0bCr4K 0 2 4 dest 1 2830  5 value 1 2899  
1540 14 Dtool_Ns0bG74L 0 4 1075 2820 0 14 Dtool_Ns0bG74L 0 2 6 result 1 2915  6 source 1 2832  
1541 14 Dtool_Ns0bGpUO 0 4 1075 2820 0 14 Dtool_Ns0bGpUO 0 2 6 result 1 2894  6 source 1 2832  
1542 14 Dtool_Ns0b0f6L 0 4 1075 2820 0 14 Dtool_Ns0b0f6L 0 2 6 result 1 2926  6 source 1 2832  
1543 14 Dtool_Ns0b0NWO 0 4 1075 2820 0 14 Dtool_Ns0b0NWO 0 2 6 result 1 2905  6 source 1 2832  
1544 14 Dtool_Ns0byVzC 0 4 1076 2820 0 14 Dtool_Ns0byVzC 0 4 3 mat 1 2915  5 scale 1 2856  3 hpr 1 2856  2 cs 1 2782  
1545 14 Dtool_Ns0bhQb3 0 4 1076 2820 0 14 Dtool_Ns0bhQb3 0 3 3 mat 1 2915  5 scale 1 2856  3 hpr 1 2856  
1546 14 Dtool_Ns0b3KHb 0 4 1076 2820 0 14 Dtool_Ns0b3KHb 0 5 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  2 cs 1 2782  
1547 14 Dtool_Ns0bRK2_ 0 4 1076 2820 0 14 Dtool_Ns0bRK2_ 0 4 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  
1548 14 Dtool_Ns0b4aBn 0 4 1076 2820 0 14 Dtool_Ns0b4aBn 0 4 3 mat 1 2894  5 scale 1 2853  3 hpr 1 2853  2 cs 1 2782  
1549 14 Dtool_Ns0b6xpb 0 4 1076 2820 0 14 Dtool_Ns0b6xpb 0 3 3 mat 1 2894  5 scale 1 2853  3 hpr 1 2853  
1550 14 Dtool_Ns0bs_WG 0 4 1076 2820 0 14 Dtool_Ns0bs_WG 0 5 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  2 cs 1 2782  
1551 14 Dtool_Ns0bk7Er 0 4 1076 2820 0 14 Dtool_Ns0bk7Er 0 4 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  
1552 14 Dtool_Ns0b8KjT 0 4 1076 2820 0 14 Dtool_Ns0b8KjT 0 5 3 mat 1 2926  5 scale 1 2856  3 hpr 1 2856  9 translate 1 2856  2 cs 1 2782  
1553 14 Dtool_Ns0bUKS4 0 4 1076 2820 0 14 Dtool_Ns0bUKS4 0 4 3 mat 1 2926  5 scale 1 2856  3 hpr 1 2856  9 translate 1 2856  
1554 14 Dtool_Ns0boQjw 0 4 1076 2820 0 14 Dtool_Ns0boQjw 0 6 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  2 cs 1 2782  
1555 14 Dtool_Ns0b9vLl 0 4 1076 2820 0 14 Dtool_Ns0b9vLl 0 5 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  
1556 14 Dtool_Ns0bQ_y_ 0 4 1076 2820 0 14 Dtool_Ns0bQ_y_ 0 5 3 mat 1 2905  5 scale 1 2853  3 hpr 1 2853  9 translate 1 2853  2 cs 1 2782  
1557 14 Dtool_Ns0b77gj 0 4 1076 2820 0 14 Dtool_Ns0b77gj 0 4 3 mat 1 2905  5 scale 1 2853  3 hpr 1 2853  9 translate 1 2853  
1558 14 Dtool_Ns0b1X_c 0 4 1076 2820 0 14 Dtool_Ns0b1X_c 0 6 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  2 cs 1 2782  
1559 14 Dtool_Ns0bCknR 0 4 1076 2820 0 14 Dtool_Ns0bCknR 0 5 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  
1560 14 Dtool_Ns0brGAD 0 6 1077 2825 0 14 Dtool_Ns0brGAD 0 4 3 mat 1 2916  5 scale 1 2855  3 hpr 1 2855  2 cs 1 2782  
1561 14 Dtool_Ns0bVxX2 0 6 1077 2825 0 14 Dtool_Ns0bVxX2 0 3 3 mat 1 2916  5 scale 1 2855  3 hpr 1 2855  
1562 14 Dtool_Ns0bwk1_ 0 6 1077 2825 0 14 Dtool_Ns0bwk1_ 0 5 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  2 cs 1 2782  
1563 14 Dtool_Ns0bsyts 0 6 1077 2825 0 14 Dtool_Ns0bsyts 0 4 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  
1564 14 Dtool_Ns0bKI_s 0 6 1077 2825 0 14 Dtool_Ns0bKI_s 0 4 3 mat 1 2895  5 scale 1 2852  3 hpr 1 2852  2 cs 1 2782  
1565 14 Dtool_Ns0bzJVg 0 6 1077 2825 0 14 Dtool_Ns0bzJVg 0 3 3 mat 1 2895  5 scale 1 2852  3 hpr 1 2852  
1566 14 Dtool_Ns0bb5Pi 0 6 1077 2825 0 14 Dtool_Ns0bb5Pi 0 5 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  2 cs 1 2782  
1567 14 Dtool_Ns0bFoHP 0 6 1077 2825 0 14 Dtool_Ns0bFoHP 0 4 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  
1568 14 Dtool_Ns0b7y0_ 0 6 1077 2825 0 14 Dtool_Ns0b7y0_ 0 5 3 mat 1 2920  5 scale 1 2855  3 hpr 1 2855  9 translate 1 2855  2 cs 1 2782  
1569 14 Dtool_Ns0b1gus 0 6 1077 2825 0 14 Dtool_Ns0b1gus 0 4 3 mat 1 2920  5 scale 1 2855  3 hpr 1 2855  9 translate 1 2855  
1570 14 Dtool_Ns0bFy__ 0 6 1077 2825 0 14 Dtool_Ns0bFy__ 0 6 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  2 cs 1 2782  
1571 14 Dtool_Ns0bioSK 0 6 1077 2825 0 14 Dtool_Ns0bioSK 0 5 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  
1572 14 Dtool_Ns0bQLRi 0 6 1077 2825 0 14 Dtool_Ns0bQLRi 0 5 3 mat 1 2899  5 scale 1 2852  3 hpr 1 2852  9 translate 1 2852  2 cs 1 2782  
1573 14 Dtool_Ns0bcmIP 0 6 1077 2825 0 14 Dtool_Ns0bcmIP 0 4 3 mat 1 2899  5 scale 1 2852  3 hpr 1 2852  9 translate 1 2852  
1574 14 Dtool_Ns0bt1gv 0 6 1077 2825 0 14 Dtool_Ns0bt1gv 0 6 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  2 cs 1 2782  
1575 14 Dtool_Ns0bJlz6 0 6 1077 2825 0 14 Dtool_Ns0bJlz6 0 5 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  
1576 14 Dtool_Ns0b5kiD 0 4 1078 2820 0 14 Dtool_Ns0b5kiD 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  2 cs 1 2782  
1577 14 Dtool_Ns0bTMeM 0 4 1078 2820 0 14 Dtool_Ns0bTMeM 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  
1578 14 Dtool_Ns0bURso 0 4 1078 2820 0 14 Dtool_Ns0bURso 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  2 cs 1 2782  
1579 14 Dtool_Ns0b_Rpx 0 4 1078 2820 0 14 Dtool_Ns0b_Rpx 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  
1580 14 Dtool_Ns0baU0J 0 4 1078 2820 0 14 Dtool_Ns0baU0J 0 6 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  2 cs 1 2782  
1581 14 Dtool_Ns0b_LGV 0 4 1078 2820 0 14 Dtool_Ns0b_LGV 0 5 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  
1582 14 Dtool_Ns0bXr_e 0 4 1078 2820 0 14 Dtool_Ns0bXr_e 0 6 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  2 cs 1 2782  
1583 14 Dtool_Ns0bgMRq 0 4 1078 2820 0 14 Dtool_Ns0bgMRq 0 5 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  
1584 14 Dtool_Ns0btC1N 0 6 1079 2825 0 14 Dtool_Ns0btC1N 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  2 cs 1 2782  
1585 14 Dtool_Ns0bz5DH 0 6 1079 2825 0 14 Dtool_Ns0bz5DH 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  
1586 14 Dtool_Ns0bPOdX 0 6 1079 2825 0 14 Dtool_Ns0bPOdX 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  2 cs 1 2782  
1587 14 Dtool_Ns0bRWrQ 0 6 1079 2825 0 14 Dtool_Ns0bRWrQ 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  
1588 14 Dtool_Ns0bvhAZ 0 6 1079 2825 0 14 Dtool_Ns0bvhAZ 0 6 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  2 cs 1 2782  
1589 14 Dtool_Ns0bPJWn 0 6 1079 2825 0 14 Dtool_Ns0bPJWn 0 5 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  
1590 14 Dtool_Ns0bST9i 0 6 1079 2825 0 14 Dtool_Ns0bST9i 0 6 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  2 cs 1 2782  
1591 14 Dtool_Ns0b95Tx 0 6 1079 2825 0 14 Dtool_Ns0b95Tx 0 5 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  
1592 14 Dtool_Ns0b2yX5 0 4 1080 2820 0 14 Dtool_Ns0b2yX5 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  2 cs 1 2782  
1593 14 Dtool_Ns0bZHTC 0 4 1080 2820 0 14 Dtool_Ns0bZHTC 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2915  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  
1594 14 Dtool_Ns0bSFhe 0 4 1080 2820 0 14 Dtool_Ns0bSFhe 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  2 cs 1 2782  
1595 14 Dtool_Ns0b1Zen 0 4 1080 2820 0 14 Dtool_Ns0b1Zen 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2894  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  
1596 14 Dtool_Ns0bXOp_ 0 4 1080 2820 0 14 Dtool_Ns0bXOp_ 0 6 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  2 cs 1 2782  
1597 14 Dtool_Ns0bIA7K 0 4 1080 2820 0 14 Dtool_Ns0bIA7K 0 5 3 mat 1 2926  5 scale 1 2856  5 shear 1 2856  3 hpr 1 2856  9 translate 1 2856  
1598 14 Dtool_Ns0bR3yU 0 4 1080 2820 0 14 Dtool_Ns0bR3yU 0 6 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  2 cs 1 2782  
1599 14 Dtool_Ns0bKHGg 0 4 1080 2820 0 14 Dtool_Ns0bKHGg 0 5 3 mat 1 2905  5 scale 1 2853  5 shear 1 2853  3 hpr 1 2853  9 translate 1 2853  
1600 14 Dtool_Ns0b0nyg 0 6 1081 2825 0 14 Dtool_Ns0b0nyg 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  2 cs 1 2782  
1601 14 Dtool_Ns0bWfBa 0 6 1081 2825 0 14 Dtool_Ns0bWfBa 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2916  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  
1602 14 Dtool_Ns0bSuaq 0 6 1081 2825 0 14 Dtool_Ns0bSuaq 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  2 cs 1 2782  
1603 14 Dtool_Ns0b7noj 0 6 1081 2825 0 14 Dtool_Ns0b7noj 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2895  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  
1604 14 Dtool_Ns0bBw_r 0 6 1081 2825 0 14 Dtool_Ns0bBw_r 0 6 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  2 cs 1 2782  
1605 14 Dtool_Ns0b1_T6 0 6 1081 2825 0 14 Dtool_Ns0b1_T6 0 5 3 mat 1 2920  5 scale 1 2855  5 shear 1 2855  3 hpr 1 2855  9 translate 1 2855  
1606 14 Dtool_Ns0b3x61 0 6 1081 2825 0 14 Dtool_Ns0b3x61 0 6 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  2 cs 1 2782  
1607 14 Dtool_Ns0bGpPE 0 6 1081 2825 0 14 Dtool_Ns0bGpPE 0 5 3 mat 1 2899  5 scale 1 2852  5 shear 1 2852  3 hpr 1 2852  9 translate 1 2852  
1608 14 Dtool_Ns0b2peC 0 7 1082 2855 1882 14 Dtool_Ns0b2peC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2856  
1609 14 Dtool_Ns0bI0gC 0 7 1082 2852 1812 14 Dtool_Ns0bI0gC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2853  
1610 14 Dtool_Ns0bPgfc 0 7 1083 2855 1882 14 Dtool_Ns0bPgfc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2856  
1611 14 Dtool_Ns0bZEhc 0 7 1083 2852 1812 14 Dtool_Ns0bZEhc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2853  
181
2773 11 MathNumbers 0 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1612 0 0 0 0 0 0 0 0

2774 10 LVecBase2f 0 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1615 1623 0 58 1616 1617 1618 1619 1620 1621 1622 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2775 10 LVecBase2d 0 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 1675 1683 0 58 1676 1677 1678 1679 1680 1681 1682 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2776 9 LVector2f 0 141313 9 LVector2f 9 LVector2f 0 0 0 1 1735 1752 0 16 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 0 0 1 0 2774 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2777 9 LVector2d 0 141313 9 LVector2d 9 LVector2d 0 0 0 1 1753 1770 0 16 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 0 0 1 0 2775 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2778 8 LPoint2f 0 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 1771 1786 0 14 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 0 0 1 0 2774 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2779 8 LPoint2d 0 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 1787 1802 0 14 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 0 0 1 0 2775 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2780 10 LVecBase3f 0 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 1803 1812 0 68 1804 1805 1806 1807 1808 1809 1810 1811 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2781 10 LVecBase3d 0 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 1873 1882 0 68 1874 1875 1876 1877 1878 1879 1880 1881 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2782 16 CoordinateSystem 0 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2783 9 LVector3f 0 141313 9 LVector3f 9 LVector3f 0 0 0 1 1947 1980 0 32 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 0 0 1 0 2780 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2784 9 LVector3d 0 141313 9 LVector3d 9 LVector3d 0 0 0 1 1981 2014 0 32 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 0 0 1 0 2781 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2785 8 LPoint3f 0 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 2015 2037 0 21 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 0 0 1 0 2780 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2786 8 LPoint3d 0 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 2038 2060 0 21 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 0 0 1 0 2781 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2787 10 LVecBase4f 0 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 2061 2071 0 66 2062 2063 2064 2065 2066 2067 2068 2069 2070 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2788 19 UnalignedLVecBase4f 0 141313 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 1 2129 2138 0 8 2130 2131 2132 2133 2134 2135 2136 2137 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2789 10 LVecBase4d 0 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 2139 2149 0 66 2140 2141 2142 2143 2144 2145 2146 2147 2148 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2790 19 UnalignedLVecBase4d 0 141313 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 1 2207 2216 0 8 2208 2209 2210 2211 2212 2213 2214 2215 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2791 9 LVector4f 0 141313 9 LVector4f 9 LVector4f 0 0 0 1 2217 2234 0 16 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 0 0 1 0 2787 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2792 9 LVector4d 0 141313 9 LVector4d 9 LVector4d 0 0 0 1 2235 2252 0 16 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 0 0 1 0 2789 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2793 8 LPoint4f 0 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 2253 2270 0 16 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 0 0 1 0 2787 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2794 8 LPoint4d 0 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 2271 2288 0 16 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 0 0 1 0 2789 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2795 9 LMatrix3f 0 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 2296 2369 0 72 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 4 2954 2955 2956 2957 0 0 0 2 2796 2797 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2796 3 Row 0 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 2795 0 0 0 2292 0 3 2289 2290 2291 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2797 4 CRow 0 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 2795 0 0 0 2295 0 2 2293 2294 0 0 0 0 0 0

2798 9 LMatrix4f 0 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 2379 2460 0 80 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 3 2958 2959 2960 0 0 0 2 2799 2800 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2799 3 Row 0 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 2798 0 0 0 2375 0 3 2372 2373 2374 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2800 4 CRow 0 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 2798 0 0 0 2378 0 2 2376 2377 0 0 0 0 0 0

2801 18 UnalignedLMatrix4f 0 141313 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 1 2461 2468 0 6 2462 2463 2464 2465 2466 2467 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2802 9 LMatrix3d 0 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 2476 2549 0 72 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 4 2961 2962 2963 2964 0 0 0 2 2803 2804 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2803 3 Row 0 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 2802 0 0 0 2472 0 3 2469 2470 2471 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2804 4 CRow 0 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 2802 0 0 0 2475 0 2 2473 2474 0 0 0 0 0 0

2805 9 LMatrix4d 0 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 2557 2638 0 80 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 3 2965 2966 2967 0 0 0 2 2806 2807 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2806 3 Row 0 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 2805 0 0 0 2553 0 3 2550 2551 2552 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2807 4 CRow 0 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 2805 0 0 0 2556 0 2 2554 2555 0 0 0 0 0 0

2808 18 UnalignedLMatrix4d 0 141313 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 1 2639 2646 0 6 2640 2641 2642 2643 2644 2645 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2809 12 LQuaternionf 0 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 2659 2706 0 46 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 0 0 1 0 2787 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2810 12 LQuaterniond 0 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 2707 2754 0 46 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 0 0 1 0 2789 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2811 10 LRotationf 0 141313 10 LRotationf 10 LRotationf 0 0 0 1 2755 2759 0 3 2756 2757 2758 0 0 1 0 2809 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2812 10 LRotationd 0 141313 10 LRotationd 10 LRotationd 0 0 0 1 2760 2764 0 3 2761 2762 2763 0 0 1 0 2810 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2813 13 LOrientationf 0 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 2765 2768 0 2 2766 2767 0 0 1 0 2809 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2814 13 LOrientationd 0 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 2769 2772 0 2 2770 2771 0 0 1 0 2810 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2815 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 2774 0 0 0 0 0 0 0 0 0 0

2816 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2817 0 0 0 0 0 0 0 0 0 0

2817 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2774 0 0 0 0 0 0 0 0 0 0

2818 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2819 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2820 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2821 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2822 0 0 0 0 0 0 0 0 0 0

2822 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2823 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2824 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2825 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2826 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2827 0 0 0 0 0 0 0 0 0 0

2827 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2828 23 ChecksumHashGenerator * 0 8576 23 ChecksumHashGenerator * 23 ChecksumHashGenerator * 0 0 2829 0 0 0 0 0 0 0 0 0 0

2829 21 ChecksumHashGenerator 0 2048 21 ChecksumHashGenerator 21 ChecksumHashGenerator 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ChecksumHashGenerator
// Description : This is a specific kind of HashGenerator that simply
//               adds up all of the ints.  Nothing fancy, and pretty
//               quick.
////////////////////////////////////////////////////////////////////

2830 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2831 0 0 0 0 0 0 0 0 0 0

2831 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2832 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2833 0 0 0 0 0 0 0 0 0 0

2833 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

2834 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2835 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2834 0 0 0 0 0 0 0 0 0 0

2836 12 LVecBase2d * 0 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 2775 0 0 0 0 0 0 0 0 0 0

2837 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2838 0 0 0 0 0 0 0 0 0 0

2838 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2775 0 0 0 0 0 0 0 0 0 0

2839 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2840 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 2776 0 0 0 0 0 0 0 0 0 0

2841 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 2842 0 0 0 0 0 0 0 0 0 0

2842 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 2776 0 0 0 0 0 0 0 0 0 0

2843 11 LVector2d * 0 8576 11 LVector2d * 11 LVector2d * 0 0 2777 0 0 0 0 0 0 0 0 0 0

2844 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 2845 0 0 0 0 0 0 0 0 0 0

2845 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 2777 0 0 0 0 0 0 0 0 0 0

2846 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 2778 0 0 0 0 0 0 0 0 0 0

2847 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 2848 0 0 0 0 0 0 0 0 0 0

2848 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 2778 0 0 0 0 0 0 0 0 0 0

2849 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 2779 0 0 0 0 0 0 0 0 0 0

2850 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2851 0 0 0 0 0 0 0 0 0 0

2851 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 2779 0 0 0 0 0 0 0 0 0 0

2852 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 2780 0 0 0 0 0 0 0 0 0 0

2853 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2854 0 0 0 0 0 0 0 0 0 0

2854 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2780 0 0 0 0 0 0 0 0 0 0

2855 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 2781 0 0 0 0 0 0 0 0 0 0

2856 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2857 0 0 0 0 0 0 0 0 0 0

2857 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2781 0 0 0 0 0 0 0 0 0 0

2858 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 2783 0 0 0 0 0 0 0 0 0 0

2859 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 2860 0 0 0 0 0 0 0 0 0 0

2860 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 2783 0 0 0 0 0 0 0 0 0 0

2861 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 2784 0 0 0 0 0 0 0 0 0 0

2862 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 2863 0 0 0 0 0 0 0 0 0 0

2863 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 2784 0 0 0 0 0 0 0 0 0 0

2864 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 2785 0 0 0 0 0 0 0 0 0 0

2865 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 2866 0 0 0 0 0 0 0 0 0 0

2866 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 2785 0 0 0 0 0 0 0 0 0 0

2867 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 2786 0 0 0 0 0 0 0 0 0 0

2868 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2869 0 0 0 0 0 0 0 0 0 0

2869 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 2786 0 0 0 0 0 0 0 0 0 0

2870 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2787 0 0 0 0 0 0 0 0 0 0

2871 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2872 0 0 0 0 0 0 0 0 0 0

2872 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2787 0 0 0 0 0 0 0 0 0 0

2873 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 2874 0 0 0 0 0 0 0 0 0 0

2874 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 2788 0 0 0 0 0 0 0 0 0 0

2875 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 2788 0 0 0 0 0 0 0 0 0 0

2876 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 2789 0 0 0 0 0 0 0 0 0 0

2877 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2878 0 0 0 0 0 0 0 0 0 0

2878 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2789 0 0 0 0 0 0 0 0 0 0

2879 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 2880 0 0 0 0 0 0 0 0 0 0

2880 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 2790 0 0 0 0 0 0 0 0 0 0

2881 21 UnalignedLVecBase4d * 0 8576 21 UnalignedLVecBase4d * 21 UnalignedLVecBase4d * 0 0 2790 0 0 0 0 0 0 0 0 0 0

2882 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 2791 0 0 0 0 0 0 0 0 0 0

2883 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 2884 0 0 0 0 0 0 0 0 0 0

2884 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 2791 0 0 0 0 0 0 0 0 0 0

2885 11 LVector4d * 0 8576 11 LVector4d * 11 LVector4d * 0 0 2792 0 0 0 0 0 0 0 0 0 0

2886 17 LVector4d const * 0 8576 17 LVector4d const * 17 LVector4d const * 0 0 2887 0 0 0 0 0 0 0 0 0 0

2887 15 LVector4d const 0 8832 15 LVector4d const 15 LVector4d const 0 0 2792 0 0 0 0 0 0 0 0 0 0

2888 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 2793 0 0 0 0 0 0 0 0 0 0

2889 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 2890 0 0 0 0 0 0 0 0 0 0

2890 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 2793 0 0 0 0 0 0 0 0 0 0

2891 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 2794 0 0 0 0 0 0 0 0 0 0

2892 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2893 0 0 0 0 0 0 0 0 0 0

2893 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 2794 0 0 0 0 0 0 0 0 0 0

2894 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 2795 0 0 0 0 0 0 0 0 0 0

2895 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2896 0 0 0 0 0 0 0 0 0 0

2896 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2795 0 0 0 0 0 0 0 0 0 0

2897 5 Row * 0 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 2796 0 0 0 0 0 0 0 0 0 0

2898 6 CRow * 0 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 2797 0 0 0 0 0 0 0 0 0 0

2899 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2900 0 0 0 0 0 0 0 0 0 0

2900 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2798 0 0 0 0 0 0 0 0 0 0

2901 11 Row const * 0 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 2902 0 0 0 0 0 0 0 0 0 0

2902 9 Row const 0 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 2796 0 0 0 0 0 0 0 0 0 0

2903 12 CRow const * 0 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 2904 0 0 0 0 0 0 0 0 0 0

2904 10 CRow const 0 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 2797 0 0 0 0 0 0 0 0 0 0

2905 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 2798 0 0 0 0 0 0 0 0 0 0

2906 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 2907 0 0 0 0 0 0 0 0 0 0

2907 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 2801 0 0 0 0 0 0 0 0 0 0

2908 5 Row * 0 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 2799 0 0 0 0 0 0 0 0 0 0

2909 6 CRow * 0 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 2800 0 0 0 0 0 0 0 0 0 0

2910 11 Row const * 0 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 2911 0 0 0 0 0 0 0 0 0 0

2911 9 Row const 0 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 2799 0 0 0 0 0 0 0 0 0 0

2912 12 CRow const * 0 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 2913 0 0 0 0 0 0 0 0 0 0

2913 10 CRow const 0 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 2800 0 0 0 0 0 0 0 0 0 0

2914 20 UnalignedLMatrix4f * 0 8576 20 UnalignedLMatrix4f * 20 UnalignedLMatrix4f * 0 0 2801 0 0 0 0 0 0 0 0 0 0

2915 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2802 0 0 0 0 0 0 0 0 0 0

2916 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2917 0 0 0 0 0 0 0 0 0 0

2917 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2802 0 0 0 0 0 0 0 0 0 0

2918 5 Row * 0 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 2803 0 0 0 0 0 0 0 0 0 0

2919 6 CRow * 0 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 2804 0 0 0 0 0 0 0 0 0 0

2920 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2921 0 0 0 0 0 0 0 0 0 0

2921 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2805 0 0 0 0 0 0 0 0 0 0

2922 11 Row const * 0 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 2923 0 0 0 0 0 0 0 0 0 0

2923 9 Row const 0 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 2803 0 0 0 0 0 0 0 0 0 0

2924 12 CRow const * 0 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 2925 0 0 0 0 0 0 0 0 0 0

2925 10 CRow const 0 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 2804 0 0 0 0 0 0 0 0 0 0

2926 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2805 0 0 0 0 0 0 0 0 0 0

2927 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 2928 0 0 0 0 0 0 0 0 0 0

2928 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 2808 0 0 0 0 0 0 0 0 0 0

2929 5 Row * 0 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 2806 0 0 0 0 0 0 0 0 0 0

2930 6 CRow * 0 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 2807 0 0 0 0 0 0 0 0 0 0

2931 11 Row const * 0 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 2932 0 0 0 0 0 0 0 0 0 0

2932 9 Row const 0 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 2806 0 0 0 0 0 0 0 0 0 0

2933 12 CRow const * 0 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 2934 0 0 0 0 0 0 0 0 0 0

2934 10 CRow const 0 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 2807 0 0 0 0 0 0 0 0 0 0

2935 20 UnalignedLMatrix4d * 0 8576 20 UnalignedLMatrix4d * 20 UnalignedLMatrix4d * 0 0 2808 0 0 0 0 0 0 0 0 0 0

2936 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2809 0 0 0 0 0 0 0 0 0 0

2937 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 2938 0 0 0 0 0 0 0 0 0 0

2938 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 2809 0 0 0 0 0 0 0 0 0 0

2939 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2810 0 0 0 0 0 0 0 0 0 0

2940 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2941 0 0 0 0 0 0 0 0 0 0

2941 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2810 0 0 0 0 0 0 0 0 0 0

2942 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 2811 0 0 0 0 0 0 0 0 0 0

2943 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 2944 0 0 0 0 0 0 0 0 0 0

2944 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 2811 0 0 0 0 0 0 0 0 0 0

2945 12 LRotationd * 0 8576 12 LRotationd * 12 LRotationd * 0 0 2812 0 0 0 0 0 0 0 0 0 0

2946 18 LRotationd const * 0 8576 18 LRotationd const * 18 LRotationd const * 0 0 2947 0 0 0 0 0 0 0 0 0 0

2947 16 LRotationd const 0 8832 16 LRotationd const 16 LRotationd const 0 0 2812 0 0 0 0 0 0 0 0 0 0

2948 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 2813 0 0 0 0 0 0 0 0 0 0

2949 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 2950 0 0 0 0 0 0 0 0 0 0

2950 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 2813 0 0 0 0 0 0 0 0 0 0

2951 15 LOrientationd * 0 8576 15 LOrientationd * 15 LOrientationd * 0 0 2814 0 0 0 0 0 0 0 0 0 0

2952 21 LOrientationd const * 0 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 2953 0 0 0 0 0 0 0 0 0 0

2953 19 LOrientationd const 0 8832 19 LOrientationd const 19 LOrientationd const 0 0 2814 0 0 0 0 0 0 0 0 0 0

0
0
14
2954 0 0 700 8 get_rows 4 size 7 get_row 
2955 0 0 700 8 get_cols 4 size 7 get_col 
2956 0 0 700 9 get_col2s 4 size 8 get_col2 
2957 0 0 700 9 get_row2s 4 size 8 get_row2 
2958 0 0 786 8 get_rows 4 size 7 get_row 
2959 0 0 786 8 get_cols 4 size 7 get_col 
2960 0 0 786 9 get_row3s 4 size 8 get_row3 
2961 0 0 887 8 get_rows 4 size 7 get_row 
2962 0 0 887 8 get_cols 4 size 7 get_col 
2963 0 0 887 9 get_col2s 4 size 8 get_col2 
2964 0 0 887 9 get_row2s 4 size 8 get_row2 
2965 0 0 971 8 get_rows 4 size 7 get_row 
2966 0 0 971 8 get_cols 4 size 7 get_col 
2967 0 0 971 9 get_row3s 4 size 8 get_row3 
