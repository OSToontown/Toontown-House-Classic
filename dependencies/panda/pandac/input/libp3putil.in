1365929839
2 2
10 libp3putil 4 xqRv 5 panda 
781
829 5 clear 0 4 1612 68 PointerToBase< ReferenceCountedVector< unsigned short int > >::clear 0 1 10 0
89
inline void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::clear(void);

830 6 output 0 4 1612 69 PointerToBase< ReferenceCountedVector< unsigned short int > >::output 0 1 11 0
97
void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::output(ostream &out) const;

831 19 ~PointerToArrayBase 0 4 1611 61 PointerToArrayBase< unsigned short int >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< unsigned short int >::~PointerToArrayBase(void);

832 19 ConstPointerToArray 0 4 1610 62 ConstPointerToArray< unsigned short int >::ConstPointerToArray 0 2 1 2 0
250
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(PointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(ConstPointerToArray< unsigned short int > const &copy);

833 4 size 0 4 1610 47 ConstPointerToArray< unsigned short int >::size 0 1 3 0
82
inline unsigned int ::ConstPointerToArray< unsigned short int >::size(void) const;

834 11 get_element 0 4 1610 54 ConstPointerToArray< unsigned short int >::get_element 0 1 4 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::get_element(unsigned int n) const;

835 11 __getitem__ 0 4 1610 54 ConstPointerToArray< unsigned short int >::__getitem__ 0 1 5 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

836 8 get_data 0 4 1610 51 ConstPointerToArray< unsigned short int >::get_data 0 1 6 0
94
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_data(void) const;

837 11 get_subdata 0 4 1610 54 ConstPointerToArray< unsigned short int >::get_subdata 0 1 7 0
127
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

838 13 get_ref_count 0 4 1610 56 ConstPointerToArray< unsigned short int >::get_ref_count 0 1 8 0
82
inline int ::ConstPointerToArray< unsigned short int >::get_ref_count(void) const;

839 18 get_node_ref_count 0 4 1610 61 ConstPointerToArray< unsigned short int >::get_node_ref_count 0 1 9 0
87
inline int ::ConstPointerToArray< unsigned short int >::get_node_ref_count(void) const;

840 20 ~ConstPointerToArray 0 4 1610 63 ConstPointerToArray< unsigned short int >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< unsigned short int >::~ConstPointerToArray(void);

841 13 DoubleBitMask 0 4 1614 59 DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask 0 2 12 13 0
203
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(void);
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

842 10 operator = 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator = 0 1 14 0
170
inline DoubleBitMask< BitMask< unsigned int, 32 > > &::DoubleBitMask< BitMask< unsigned int, 32 > >::operator =(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

843 6 all_on 0 4 1614 52 DoubleBitMask< BitMask< unsigned int, 32 > >::all_on 0 1 15 0
120
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_on(void);

844 7 all_off 0 4 1614 53 DoubleBitMask< BitMask< unsigned int, 32 > >::all_off 0 1 16 0
121
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_off(void);

845 8 lower_on 0 4 1614 54 DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on 0 1 17 0
129
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on(int on_bits);

846 3 bit 0 4 1614 49 DoubleBitMask< BitMask< unsigned int, 32 > >::bit 0 1 18 0
122
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::bit(int index);

847 5 range 0 4 1614 51 DoubleBitMask< BitMask< unsigned int, 32 > >::range 0 1 19 0
136
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::range(int low_bit, int size);

848 14 ~DoubleBitMask 0 4 1614 60 DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask 0 0 0
76
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask(void);

849 16 has_max_num_bits 0 4 1614 62 DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits 0 1 20 0
90
static inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits(void);

850 16 get_max_num_bits 0 4 1614 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits 0 1 21 0
89
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits(void);

851 12 get_num_bits 0 4 1614 58 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits 0 1 22 0
85
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits(void);

852 7 get_bit 0 4 1614 53 DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit 0 1 23 0
85
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit(int index) const;

853 7 set_bit 0 4 1614 53 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit 0 1 24 0
79
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit(int index);

854 9 clear_bit 0 4 1614 55 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit 0 1 25 0
81
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit(int index);

855 10 set_bit_to 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to 0 1 26 0
94
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to(int index, bool value);

856 7 is_zero 0 4 1614 53 DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero 0 1 27 0
80
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero(void) const;

857 9 is_all_on 0 4 1614 55 DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on 0 1 28 0
82
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on(void) const;

858 7 extract 0 4 1614 53 DoubleBitMask< BitMask< unsigned int, 32 > >::extract 0 1 29 0
105
inline unsigned int ::DoubleBitMask< BitMask< unsigned int, 32 > >::extract(int low_bit, int size) const;

859 5 store 0 4 1614 51 DoubleBitMask< BitMask< unsigned int, 32 > >::store 0 1 30 0
109
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::store(unsigned int value, int low_bit, int size);

860 10 has_any_of 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of 0 1 31 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of(int low_bit, int size) const;

861 10 has_all_of 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of 0 1 32 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of(int low_bit, int size) const;

862 9 set_range 0 4 1614 55 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range 0 1 33 0
93
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range(int low_bit, int size);

863 11 clear_range 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range 0 1 34 0
95
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range(int low_bit, int size);

864 12 set_range_to 0 4 1614 58 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to 0 1 35 0
108
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to(bool value, int low_bit, int size);

865 15 get_num_on_bits 0 4 1614 61 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits 0 1 36 0
87
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits(void) const;

866 16 get_num_off_bits 0 4 1614 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits 0 1 37 0
88
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits(void) const;

867 17 get_lowest_on_bit 0 4 1614 63 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit 0 1 38 0
89
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit(void) const;

868 18 get_lowest_off_bit 0 4 1614 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit 0 1 39 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit(void) const;

869 18 get_highest_on_bit 0 4 1614 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit 0 1 40 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit(void) const;

870 19 get_highest_off_bit 0 4 1614 65 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit 0 1 41 0
91
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit(void) const;

871 29 get_next_higher_different_bit 0 4 1614 75 DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit 0 1 42 0
108
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit(int low_bit) const;

872 15 invert_in_place 0 4 1614 61 DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place 0 1 43 0
82
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place(void);

873 18 has_bits_in_common 0 4 1614 64 DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common 0 1 44 0
144
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

874 5 clear 0 4 1614 51 DoubleBitMask< BitMask< unsigned int, 32 > >::clear 0 1 45 0
72
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear(void);

875 6 output 0 4 1614 52 DoubleBitMask< BitMask< unsigned int, 32 > >::output 0 1 46 0
80
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output(ostream &out) const;

876 13 output_binary 0 4 1614 59 DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary 0 2 47 48 0
111
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary(ostream &out, int spaces_every = (4)) const;

877 10 output_hex 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex 0 2 49 50 0
108
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex(ostream &out, int spaces_every = (4)) const;

878 5 write 0 4 1614 51 DoubleBitMask< BitMask< unsigned int, 32 > >::write 0 2 51 52 0
103
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::write(ostream &out, int indent_level = (0)) const;

879 11 operator == 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator == 0 1 53 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ==(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

880 11 operator != 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator != 0 1 54 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator !=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

881 10 operator < 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator < 0 1 55 0
136
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

882 10 compare_to 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to 0 1 56 0
135
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

883 10 operator & 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator & 0 1 57 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

884 10 operator | 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator | 0 1 58 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

885 10 operator ^ 0 4 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^ 0 1 59 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

886 10 operator ~ 0 68 1614 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~ 0 1 60 0
123
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~(void) const;

887 11 operator << 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator << 0 1 61 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<(int shift) const;

888 11 operator >> 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >> 0 1 62 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>(int shift) const;

889 11 operator &= 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator &= 0 1 63 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

890 11 operator |= 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator |= 0 1 64 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

891 11 operator ^= 0 4 1614 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^= 0 1 65 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

892 12 operator <<= 0 4 1614 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<= 0 1 66 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<=(int shift);

893 12 operator >>= 0 4 1614 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>= 0 1 67 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>=(int shift);

894 14 get_class_type 0 4 1614 60 DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type 0 1 68 0
87
static TypeHandle ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type(void);

895 13 DoubleBitMask 0 4 1615 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask 0 2 69 70 0
254
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(void);
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

896 10 operator = 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator = 0 1 71 0
221
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > &::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator =(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

897 6 all_on 0 4 1615 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on 0 1 72 0
154
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on(void);

898 7 all_off 0 4 1615 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off 0 1 73 0
155
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off(void);

899 8 lower_on 0 4 1615 71 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on 0 1 74 0
163
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on(int on_bits);

900 3 bit 0 4 1615 66 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit 0 1 75 0
156
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit(int index);

901 5 range 0 4 1615 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range 0 1 76 0
170
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range(int low_bit, int size);

902 14 ~DoubleBitMask 0 4 1615 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask 0 0 0
93
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask(void);

903 16 has_max_num_bits 0 4 1615 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits 0 1 77 0
107
static inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits(void);

904 16 get_max_num_bits 0 4 1615 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits 0 1 78 0
106
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits(void);

905 12 get_num_bits 0 4 1615 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits 0 1 79 0
102
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits(void);

906 7 get_bit 0 4 1615 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit 0 1 80 0
102
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit(int index) const;

907 7 set_bit 0 4 1615 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit 0 1 81 0
96
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit(int index);

908 9 clear_bit 0 4 1615 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit 0 1 82 0
98
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit(int index);

909 10 set_bit_to 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to 0 1 83 0
111
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to(int index, bool value);

910 7 is_zero 0 4 1615 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero 0 1 84 0
97
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero(void) const;

911 9 is_all_on 0 4 1615 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on 0 1 85 0
99
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on(void) const;

912 7 extract 0 4 1615 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract 0 1 86 0
122
inline unsigned int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract(int low_bit, int size) const;

913 5 store 0 4 1615 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store 0 1 87 0
126
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store(unsigned int value, int low_bit, int size);

914 10 has_any_of 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of 0 1 88 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of(int low_bit, int size) const;

915 10 has_all_of 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of 0 1 89 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of(int low_bit, int size) const;

916 9 set_range 0 4 1615 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range 0 1 90 0
110
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range(int low_bit, int size);

917 11 clear_range 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range 0 1 91 0
112
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range(int low_bit, int size);

918 12 set_range_to 0 4 1615 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to 0 1 92 0
125
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to(bool value, int low_bit, int size);

919 15 get_num_on_bits 0 4 1615 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits 0 1 93 0
104
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits(void) const;

920 16 get_num_off_bits 0 4 1615 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits 0 1 94 0
105
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits(void) const;

921 17 get_lowest_on_bit 0 4 1615 80 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit 0 1 95 0
106
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit(void) const;

922 18 get_lowest_off_bit 0 4 1615 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit 0 1 96 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit(void) const;

923 18 get_highest_on_bit 0 4 1615 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit 0 1 97 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit(void) const;

924 19 get_highest_off_bit 0 4 1615 82 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit 0 1 98 0
108
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit(void) const;

925 29 get_next_higher_different_bit 0 4 1615 92 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit 0 1 99 0
125
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit(int low_bit) const;

926 15 invert_in_place 0 4 1615 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place 0 1 100 0
99
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place(void);

927 18 has_bits_in_common 0 4 1615 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common 0 1 101 0
178
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

928 5 clear 0 4 1615 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear 0 1 102 0
89
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear(void);

929 6 output 0 4 1615 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output 0 1 103 0
97
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output(ostream &out) const;

930 13 output_binary 0 4 1615 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary 0 2 104 105 0
128
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary(ostream &out, int spaces_every = (4)) const;

931 10 output_hex 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex 0 2 106 107 0
125
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex(ostream &out, int spaces_every = (4)) const;

932 5 write 0 4 1615 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write 0 2 108 109 0
120
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write(ostream &out, int indent_level = (0)) const;

933 11 operator == 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator == 0 1 110 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ==(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

934 11 operator != 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator != 0 1 111 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator !=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

935 10 operator < 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator < 0 1 112 0
170
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

936 10 compare_to 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to 0 1 113 0
169
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

937 10 operator & 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator & 0 1 114 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

938 10 operator | 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator | 0 1 115 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

939 10 operator ^ 0 4 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^ 0 1 116 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

940 10 operator ~ 0 68 1615 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~ 0 1 117 0
157
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~(void) const;

941 11 operator << 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator << 0 1 118 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<(int shift) const;

942 11 operator >> 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >> 0 1 119 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>(int shift) const;

943 11 operator &= 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &= 0 1 120 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

944 11 operator |= 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |= 0 1 121 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

945 11 operator ^= 0 4 1615 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^= 0 1 122 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

946 12 operator <<= 0 4 1615 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<= 0 1 123 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<=(int shift);

947 12 operator >>= 0 4 1615 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>= 0 1 124 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>=(int shift);

948 14 get_class_type 0 4 1615 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type 0 1 125 0
104
static TypeHandle ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type(void);

949 14 PointerToArray 0 4 1616 52 PointerToArray< unsigned short int >::PointerToArray 0 4 126 127 128 129 0
347
inline ::PointerToArray< unsigned short int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));
inline ::PointerToArray< unsigned short int >::PointerToArray(PointerToArray< unsigned short int > const &copy);
::PointerToArray< unsigned short int >::PointerToArray(PyObject *self, PyObject *sequence);

950 11 empty_array 0 4 1616 49 PointerToArray< unsigned short int >::empty_array 0 2 130 131 0
199
static inline PointerToArray< unsigned short int > ::PointerToArray< unsigned short int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));

951 4 size 0 4 1616 42 PointerToArray< unsigned short int >::size 0 1 132 0
77
inline unsigned int ::PointerToArray< unsigned short int >::size(void) const;

952 9 push_back 0 4 1616 47 PointerToArray< unsigned short int >::push_back 0 1 133 0
91
inline void ::PointerToArray< unsigned short int >::push_back(unsigned short int const &x);

953 8 pop_back 0 4 1616 46 PointerToArray< unsigned short int >::pop_back 0 1 134 0
67
inline void ::PointerToArray< unsigned short int >::pop_back(void);

954 11 get_element 0 4 1616 49 PointerToArray< unsigned short int >::get_element 0 1 135 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::get_element(unsigned int n) const;

955 11 set_element 0 4 1616 49 PointerToArray< unsigned short int >::set_element 0 1 136 0
113
inline void ::PointerToArray< unsigned short int >::set_element(unsigned int n, unsigned short int const &value);

956 11 __getitem__ 0 4 1616 49 PointerToArray< unsigned short int >::__getitem__ 0 1 137 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

957 11 __setitem__ 0 4 1616 49 PointerToArray< unsigned short int >::__setitem__ 0 1 138 0
113
inline void ::PointerToArray< unsigned short int >::__setitem__(unsigned int n, unsigned short int const &value);

958 8 get_data 0 4 1616 46 PointerToArray< unsigned short int >::get_data 0 1 139 0
89
inline basic_string< char > ::PointerToArray< unsigned short int >::get_data(void) const;

959 8 set_data 0 4 1616 46 PointerToArray< unsigned short int >::set_data 0 1 140 0
95
inline void ::PointerToArray< unsigned short int >::set_data(basic_string< char > const &data);

960 11 get_subdata 0 4 1616 49 PointerToArray< unsigned short int >::get_subdata 0 1 141 0
122
inline basic_string< char > ::PointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

961 11 set_subdata 0 4 1616 49 PointerToArray< unsigned short int >::set_subdata 0 1 142 0
134
inline void ::PointerToArray< unsigned short int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

962 13 get_ref_count 0 4 1616 51 PointerToArray< unsigned short int >::get_ref_count 0 1 143 0
77
inline int ::PointerToArray< unsigned short int >::get_ref_count(void) const;

963 18 get_node_ref_count 0 4 1616 56 PointerToArray< unsigned short int >::get_node_ref_count 0 1 144 0
82
inline int ::PointerToArray< unsigned short int >::get_node_ref_count(void) const;

964 15 ~PointerToArray 0 4 1616 53 PointerToArray< unsigned short int >::~PointerToArray 0 0 0
62
::PointerToArray< unsigned short int >::~PointerToArray(void);

965 14 ~AnimInterface 0 4 1618 29 AnimInterface::~AnimInterface 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual AnimInterface::~AnimInterface(void);

966 4 play 0 4 1618 19 AnimInterface::play 0 2 145 146 1521
// Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
////////////////////////////////////////////////////////////////////
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

967 4 loop 0 4 1618 19 AnimInterface::loop 0 2 147 148 898
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

968 8 pingpong 0 4 1618 23 AnimInterface::pingpong 0 2 149 150 886
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
////////////////////////////////////////////////////////////////////
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

969 4 stop 0 4 1618 19 AnimInterface::stop 0 1 151 369
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
////////////////////////////////////////////////////////////////////
38
inline void AnimInterface::stop(void);

970 4 pose 0 4 1618 19 AnimInterface::pose 0 1 152 297
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
////////////////////////////////////////////////////////////////////
46
inline void AnimInterface::pose(double frame);

971 13 set_play_rate 0 4 1618 28 AnimInterface::set_play_rate 0 1 153 519
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
////////////////////////////////////////////////////////////////////
59
inline void AnimInterface::set_play_rate(double play_rate);

972 13 get_play_rate 0 4 1618 28 AnimInterface::get_play_rate 0 1 154 313
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
////////////////////////////////////////////////////////////////////
55
inline double AnimInterface::get_play_rate(void) const;

973 14 get_frame_rate 0 4 1618 29 AnimInterface::get_frame_rate 0 1 155 514
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
////////////////////////////////////////////////////////////////////
56
inline double AnimInterface::get_frame_rate(void) const;

974 14 get_num_frames 0 4 1618 29 AnimInterface::get_num_frames 0 1 156 581
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
54
virtual int AnimInterface::get_num_frames(void) const;

975 9 get_frame 0 4 1618 24 AnimInterface::get_frame 0 1 157 359
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
////////////////////////////////////////////////////////////////////
48
inline int AnimInterface::get_frame(void) const;

976 14 get_next_frame 0 4 1618 29 AnimInterface::get_next_frame 0 1 158 638
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_next_frame(void) const;

977 8 get_frac 0 4 1618 23 AnimInterface::get_frac 0 1 159 598
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
////////////////////////////////////////////////////////////////////
50
inline double AnimInterface::get_frac(void) const;

978 14 get_full_frame 0 4 1618 29 AnimInterface::get_full_frame 0 1 160 693
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_full_frame(void) const;

979 15 get_full_fframe 0 4 1618 30 AnimInterface::get_full_fframe 0 1 161 841
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
////////////////////////////////////////////////////////////////////
57
inline double AnimInterface::get_full_fframe(void) const;

980 10 is_playing 0 4 1618 25 AnimInterface::is_playing 0 1 162 466
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
////////////////////////////////////////////////////////////////////
50
inline bool AnimInterface::is_playing(void) const;

981 6 output 0 4 1618 21 AnimInterface::output 0 1 163 230
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void AnimInterface::output(ostream &out) const;

982 14 get_class_type 0 4 1618 29 AnimInterface::get_class_type 0 1 164 0
54
static TypeHandle AnimInterface::get_class_type(void);

983 9 UpdateSeq 0 4 1620 20 UpdateSeq::UpdateSeq 0 2 165 166 987
// Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

984 7 initial 0 4 1620 18 UpdateSeq::initial 0 1 167 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////
49
static inline UpdateSeq UpdateSeq::initial(void);

985 3 old 0 4 1620 14 UpdateSeq::old 0 1 168 282
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
////////////////////////////////////////////////////////////////////
45
static inline UpdateSeq UpdateSeq::old(void);

986 5 fresh 0 4 1620 16 UpdateSeq::fresh 0 1 169 286
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
////////////////////////////////////////////////////////////////////
47
static inline UpdateSeq UpdateSeq::fresh(void);

987 10 operator = 0 4 1620 21 UpdateSeq::operator = 0 1 170 234
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

988 5 clear 0 4 1620 16 UpdateSeq::clear 0 1 171 260
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
////////////////////////////////////////////////////////////////////
35
inline void UpdateSeq::clear(void);

989 10 is_initial 0 4 1620 21 UpdateSeq::is_initial 0 1 172 294
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_initial(void) const;

990 6 is_old 0 4 1620 17 UpdateSeq::is_old 0 1 173 269
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
////////////////////////////////////////////////////////////////////
42
inline bool UpdateSeq::is_old(void) const;

991 8 is_fresh 0 4 1620 19 UpdateSeq::is_fresh 0 1 174 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
////////////////////////////////////////////////////////////////////
44
inline bool UpdateSeq::is_fresh(void) const;

992 10 is_special 0 4 1620 21 UpdateSeq::is_special 0 1 175 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_special(void) const;

993 11 operator == 0 4 1620 22 UpdateSeq::operator == 0 1 176 227
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

994 11 operator != 0 4 1620 22 UpdateSeq::operator != 0 1 177 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

995 10 operator < 0 4 1620 21 UpdateSeq::operator < 0 1 178 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

996 11 operator <= 0 4 1620 22 UpdateSeq::operator <= 0 1 179 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

997 10 operator > 0 4 1620 21 UpdateSeq::operator > 0 1 180 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

998 11 operator >= 0 4 1620 22 UpdateSeq::operator >= 0 1 181 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

999 11 operator ++ 0 68 1620 22 UpdateSeq::operator ++ 0 1 182 231
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(void);

1000 11 operator ++ 0 4 1620 22 UpdateSeq::operator ++ 0 1 183 232
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(int );

1001 6 output 0 4 1620 17 UpdateSeq::output 0 1 184 216
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void UpdateSeq::output(ostream &out) const;

1002 10 ~UpdateSeq 0 4 1620 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

1003 17 mark_bam_modified 0 4 1621 32 TypedWritable::mark_bam_modified 0 1 185 653
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
////////////////////////////////////////////////////////////////////
51
inline void TypedWritable::mark_bam_modified(void);

1004 16 get_bam_modified 0 4 1621 31 TypedWritable::get_bam_modified 0 1 186 388
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
////////////////////////////////////////////////////////////////////
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

1005 10 __reduce__ 0 4 1621 25 TypedWritable::__reduce__ 0 1 187 492
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
////////////////////////////////////////////////////////////////////
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

1006 18 __reduce_persist__ 0 4 1621 33 TypedWritable::__reduce_persist__ 0 1 188 709
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
////////////////////////////////////////////////////////////////////
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

1007 20 encode_to_bam_stream 0 4 1621 35 TypedWritable::encode_to_bam_stream 0 3 189 190 191 1543
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////
187
inline basic_string< char > TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(basic_string< char > &data, BamWriter *writer = ((void *)(0))) const;

1008 26 decode_raw_from_bam_stream 0 4 1621 41 TypedWritable::decode_raw_from_bam_stream 0 0 1476
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::decode_raw_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts the single
//               object on that string.  Returns true on success,
//               false on on error.
//
//               This variant sets the TypedWritable and
//               ReferenceCount pointers separately; both are pointers
//               to the same object.  The reference count is not
//               incremented; it is the caller's responsibility to
//               manage the reference count.
//
//               Note that this method cannot be used to retrieve
//               objects that do not inherit from ReferenceCount,
//               because these objects cannot persist beyond the
//               lifetime of the BamReader that reads them.  To
//               retrieve these objects from a bam stream, you must
//               construct a BamReader directly.
//
//               If you happen to know that the particular object in
//               question inherits from TypedWritableReferenceCount or
//               PandaNode, consider calling the variant of
//               decode_from_bam_stream() defined for those methods,
//               which presents a simpler interface.
////////////////////////////////////////////////////////////////////
170
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1009 14 get_class_type 0 4 1621 29 TypedWritable::get_class_type 0 1 192 0
54
static TypeHandle TypedWritable::get_class_type(void);

1010 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 821 493
////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
////////////////////////////////////////////////////////////////////
106
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, basic_string< char > const &data);

1011 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 822 756
////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This is similar to
//               py_decode_TypedWritable_from_bam_stream, but it
//               provides additional support for the missing
//               persistent-state object needed to properly support
//               self-referential BAM objects written to the pickle
//               stream.  This hooks into the pickle and cPickle
//               modules implemented in direct/src/stdpy.
////////////////////////////////////////////////////////////////////
135
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, basic_string< char > const &data);

1012 23 upcast_to_TypedWritable 0 12 1623 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 196 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

1013 39 downcast_to_TypedWritableReferenceCount 0 12 1621 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 197 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

1014 24 upcast_to_ReferenceCount 0 12 1623 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 198 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

1015 39 downcast_to_TypedWritableReferenceCount 0 12 1624 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 199 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1016 22 decode_from_bam_stream 0 4 1623 51 TypedWritableReferenceCount::decode_from_bam_stream 0 2 193 194 872
////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
////////////////////////////////////////////////////////////////////
169
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1017 14 get_class_type 0 4 1623 43 TypedWritableReferenceCount::get_class_type 0 1 195 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1018 28 ~TypedWritableReferenceCount 0 4 1623 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1019 37 upcast_to_TypedWritableReferenceCount 0 12 1625 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 219 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1020 26 downcast_to_BamCacheRecord 0 12 1623 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 220 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1021 24 upcast_to_LinkedListNode 0 12 1625 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1022 26 downcast_to_BamCacheRecord 0 12 1626 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1023 15 ~BamCacheRecord 0 4 1625 31 BamCacheRecord::~BamCacheRecord 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual BamCacheRecord::~BamCacheRecord(void);

1024 9 make_copy 0 4 1625 25 BamCacheRecord::make_copy 0 1 200 928
// Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
////////////////////////////////////////////////////////////////////
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1025 11 operator == 0 4 1625 27 BamCacheRecord::operator == 0 1 201 396
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
////////////////////////////////////////////////////////////////////
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1026 19 get_source_pathname 0 4 1625 35 BamCacheRecord::get_source_pathname 0 1 202 523
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
////////////////////////////////////////////////////////////////////
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1027 18 get_cache_filename 0 4 1625 34 BamCacheRecord::get_cache_filename 0 1 203 516
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
////////////////////////////////////////////////////////////////////
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1028 17 get_recorded_time 0 4 1625 33 BamCacheRecord::get_recorded_time 0 1 204 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
////////////////////////////////////////////////////////////////////
66
inline unsigned int BamCacheRecord::get_recorded_time(void) const;

1029 23 get_num_dependent_files 0 4 1625 39 BamCacheRecord::get_num_dependent_files 0 1 205 320
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
////////////////////////////////////////////////////////////////////
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1030 22 get_dependent_pathname 0 4 1625 38 BamCacheRecord::get_dependent_pathname 0 1 206 335
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
////////////////////////////////////////////////////////////////////
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1031 20 dependents_unchanged 0 4 1625 36 BamCacheRecord::dependents_unchanged 0 1 207 380
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool BamCacheRecord::dependents_unchanged(void) const;

1032 21 clear_dependent_files 0 4 1625 37 BamCacheRecord::clear_dependent_files 0 1 208 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
////////////////////////////////////////////////////////////////////
49
void BamCacheRecord::clear_dependent_files(void);

1033 18 add_dependent_file 0 4 1625 34 BamCacheRecord::add_dependent_file 0 1 209 509
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
////////////////////////////////////////////////////////////////////
66
void BamCacheRecord::add_dependent_file(Filename const &pathname);

1034 8 has_data 0 4 1625 24 BamCacheRecord::has_data 0 1 210 373
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
////////////////////////////////////////////////////////////////////
49
inline bool BamCacheRecord::has_data(void) const;

1035 10 clear_data 0 4 1625 26 BamCacheRecord::clear_data 0 1 211 394
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
////////////////////////////////////////////////////////////////////
45
inline void BamCacheRecord::clear_data(void);

1036 8 get_data 0 4 1625 24 BamCacheRecord::get_data 0 1 212 383
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
////////////////////////////////////////////////////////////////////
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1037 12 extract_data 0 4 1625 28 BamCacheRecord::extract_data 0 0 737
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::extract_data
//       Access: Published
//  Description: Fills ptr and ref_ptr with the two different-typed
//               pointers to the same object, the data stored within
//               this record.  This transfers ownership of the data
//               pointer; the caller will be responsible for managing
//               the reference counts on this object subsequently.
//
//               Returns true if the record contained any data (and
//               the pointers have been filled), false if it didn't
//               (and the pointers are NULL).
////////////////////////////////////////////////////////////////////
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1038 8 set_data 0 4 1625 24 BamCacheRecord::set_data 0 2 213 214 1279
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
////////////////////////////////////////////////////////////////////
151
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1039 6 output 0 4 1625 22 BamCacheRecord::output 0 1 215 222
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void BamCacheRecord::output(ostream &out) const;

1040 5 write 0 4 1625 21 BamCacheRecord::write 0 2 216 217 221
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void BamCacheRecord::write(ostream &out, int indent_level = (0)) const;

1041 14 get_class_type 0 4 1625 30 BamCacheRecord::get_class_type 0 1 218 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1042 8 BamCache 0 4 1627 18 BamCache::BamCache 0 1 221 220
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
25
BamCache::BamCache(void);

1043 9 ~BamCache 0 4 1627 19 BamCache::~BamCache 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
26
BamCache::~BamCache(void);

1044 10 set_active 0 4 1627 20 BamCache::set_active 0 1 222 1130
// Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
44
inline void BamCache::set_active(bool flag);

1045 10 get_active 0 4 1627 20 BamCache::get_active 0 1 223 695
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
45
inline bool BamCache::get_active(void) const;

1046 16 set_cache_models 0 4 1627 26 BamCache::set_cache_models 0 1 224 346
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
////////////////////////////////////////////////////////////////////
50
inline void BamCache::set_cache_models(bool flag);

1047 16 get_cache_models 0 4 1627 26 BamCache::get_cache_models 0 1 225 414
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
51
inline bool BamCache::get_cache_models(void) const;

1048 18 set_cache_textures 0 4 1627 28 BamCache::set_cache_textures 0 1 226 332
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
////////////////////////////////////////////////////////////////////
52
inline void BamCache::set_cache_textures(bool flag);

1049 18 get_cache_textures 0 4 1627 28 BamCache::get_cache_textures 0 1 227 418
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
53
inline bool BamCache::get_cache_textures(void) const;

1050 29 set_cache_compressed_textures 0 4 1627 39 BamCache::set_cache_compressed_textures 0 1 228 1143
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
////////////////////////////////////////////////////////////////////
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1051 29 get_cache_compressed_textures 0 4 1627 39 BamCache::get_cache_compressed_textures 0 1 229 475
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1052 8 set_root 0 4 1627 18 BamCache::set_root 0 1 230 665
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
////////////////////////////////////////////////////////////////////
46
void BamCache::set_root(Filename const &root);

1053 8 get_root 0 4 1627 18 BamCache::get_root 0 1 231 299
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
////////////////////////////////////////////////////////////////////
47
inline Filename BamCache::get_root(void) const;

1054 14 set_flush_time 0 4 1627 24 BamCache::set_flush_time 0 1 232 316
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
53
inline void BamCache::set_flush_time(int flush_time);

1055 14 get_flush_time 0 4 1627 24 BamCache::get_flush_time 0 1 233 314
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
48
inline int BamCache::get_flush_time(void) const;

1056 20 set_cache_max_kbytes 0 4 1627 30 BamCache::set_cache_max_kbytes 0 1 234 767
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
////////////////////////////////////////////////////////////////////
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1057 20 get_cache_max_kbytes 0 4 1627 30 BamCache::get_cache_max_kbytes 0 1 235 371
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
////////////////////////////////////////////////////////////////////
54
inline int BamCache::get_cache_max_kbytes(void) const;

1058 13 set_read_only 0 4 1627 23 BamCache::set_read_only 0 1 236 523
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
////////////////////////////////////////////////////////////////////
45
inline void BamCache::set_read_only(bool ro);

1059 13 get_read_only 0 4 1627 23 BamCache::get_read_only 0 1 237 503
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
////////////////////////////////////////////////////////////////////
48
inline bool BamCache::get_read_only(void) const;

1060 6 lookup 0 4 1627 16 BamCache::lookup 0 1 238 1211
////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
////////////////////////////////////////////////////////////////////
123
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, basic_string< char > const &cache_extension);

1061 5 store 0 4 1627 15 BamCache::store 0 1 239 478
////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////
45
bool BamCache::store(BamCacheRecord *record);

1062 20 consider_flush_index 0 4 1627 30 BamCache::consider_flush_index 0 1 240 325
////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
////////////////////////////////////////////////////////////////////
42
void BamCache::consider_flush_index(void);

1063 11 flush_index 0 4 1627 21 BamCache::flush_index 0 1 241 258
////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
////////////////////////////////////////////////////////////////////
33
void BamCache::flush_index(void);

1064 14 get_global_ptr 0 4 1627 24 BamCache::get_global_ptr 0 1 242 376
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
////////////////////////////////////////////////////////////////////
55
static inline BamCache *BamCache::get_global_ptr(void);

1065 9 ~BamEnums 0 4 1628 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1066 13 LoaderOptions 0 4 1632 28 LoaderOptions::LoaderOptions 0 4 243 244 245 246 1173
// Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
206
LoaderOptions::LoaderOptions(int flags = ((LF_search | LF_report_errors)));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1067 10 operator = 0 4 1632 25 LoaderOptions::operator = 0 1 247 238
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1068 9 set_flags 0 4 1632 24 LoaderOptions::set_flags 0 1 248 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LoaderOptions::set_flags(int flags);

1069 9 get_flags 0 4 1632 24 LoaderOptions::get_flags 0 1 249 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int LoaderOptions::get_flags(void) const;

1070 17 set_texture_flags 0 4 1632 32 LoaderOptions::set_texture_flags 0 1 250 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LoaderOptions::set_texture_flags(int flags);

1071 17 get_texture_flags 0 4 1632 32 LoaderOptions::get_texture_flags 0 1 251 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline int LoaderOptions::get_texture_flags(void) const;

1072 21 set_texture_num_views 0 4 1632 36 LoaderOptions::set_texture_num_views 0 1 252 767
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
////////////////////////////////////////////////////////////////////
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1073 21 get_texture_num_views 0 4 1632 36 LoaderOptions::get_texture_num_views 0 1 253 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
////////////////////////////////////////////////////////////////////
60
inline int LoaderOptions::get_texture_num_views(void) const;

1074 22 set_auto_texture_scale 0 4 1632 37 LoaderOptions::set_auto_texture_scale 0 1 254 480
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
////////////////////////////////////////////////////////////////////
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1075 22 get_auto_texture_scale 0 4 1632 37 LoaderOptions::get_auto_texture_scale 0 1 255 266
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
////////////////////////////////////////////////////////////////////
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1076 6 output 0 4 1632 21 LoaderOptions::output 0 1 256 221
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void LoaderOptions::output(ostream &out) const;

1077 14 ~LoaderOptions 0 4 1632 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1078 9 BamReader 0 4 1635 20 BamReader::BamReader 0 2 257 258 261
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
BamReader::BamReader(DatagramGenerator *source = ((void *)(0)));

1079 10 ~BamReader 0 4 1635 21 BamReader::~BamReader 0 0 260
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamReader::~BamReader(void);

1080 10 set_source 0 4 1635 21 BamReader::set_source 0 1 259 383
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
////////////////////////////////////////////////////////////////////
54
void BamReader::set_source(DatagramGenerator *source);

1081 10 get_source 0 4 1635 21 BamReader::get_source 0 1 260 324
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
////////////////////////////////////////////////////////////////////
54
inline DatagramGenerator *BamReader::get_source(void);

1082 4 init 0 4 1635 15 BamReader::init 0 1 261 474
////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamReader::init(void);

1083 12 set_aux_data 0 4 1635 23 BamReader::set_aux_data 0 1 262 1496
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
////////////////////////////////////////////////////////////////////
109
void BamReader::set_aux_data(TypedWritable *obj, basic_string< char > const &name, BamReader::AuxData *data);

1084 12 get_aux_data 0 4 1635 23 BamReader::get_aux_data 0 1 263 413
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
////////////////////////////////////////////////////////////////////
104
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, basic_string< char > const &name) const;

1085 12 get_filename 0 4 1635 23 BamReader::get_filename 0 1 264 457
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamReader::get_filename(void) const;

1086 18 get_loader_options 0 4 1635 29 BamReader::get_loader_options 0 1 265 330
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1087 18 set_loader_options 0 4 1635 29 BamReader::set_loader_options 0 1 266 276
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
////////////////////////////////////////////////////////////////////
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1088 11 read_object 0 4 1635 22 BamReader::read_object 0 1 267 2207
////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  
//
//               This flavor of read_object() returns both a
//               TypedWritable and a ReferenceCount pointer to the
//               same object, so the reference count may be tracked
//               reliably, without having to know precisely what type
//               of object we have.  It returns true on success, or
//               false on failure.
////////////////////////////////////////////////////////////////////
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1089 6 is_eof 0 4 1635 17 BamReader::is_eof 0 1 268 375
////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
42
inline bool BamReader::is_eof(void) const;

1090 7 resolve 0 4 1635 18 BamReader::resolve 0 1 269 935
////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
////////////////////////////////////////////////////////////////////
30
bool BamReader::resolve(void);

1091 14 change_pointer 0 4 1635 25 BamReader::change_pointer 0 1 270 724
////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
////////////////////////////////////////////////////////////////////
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1092 18 get_file_major_ver 0 4 1635 29 BamReader::get_file_major_ver 0 1 271 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_major_ver(void) const;

1093 18 get_file_minor_ver 0 4 1635 29 BamReader::get_file_minor_ver 0 1 272 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_minor_ver(void) const;

1094 15 get_file_endian 0 4 1635 26 BamReader::get_file_endian 0 1 273 528
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1095 24 get_file_stdfloat_double 0 4 1635 35 BamReader::get_file_stdfloat_double 0 1 274 489
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1096 21 get_current_major_ver 0 4 1635 32 BamReader::get_current_major_ver 0 1 275 440
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_major_ver(void) const;

1097 21 get_current_minor_ver 0 4 1635 32 BamReader::get_current_minor_ver 0 1 276 450
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_minor_ver(void) const;

1098 9 BamWriter 0 4 1636 20 BamWriter::BamWriter 0 2 277 278 221
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
BamWriter::BamWriter(DatagramSink *target = ((void *)(0)));

1099 10 ~BamWriter 0 4 1636 21 BamWriter::~BamWriter 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamWriter::~BamWriter(void);

1100 10 set_target 0 4 1636 21 BamWriter::set_target 0 1 279 394
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
////////////////////////////////////////////////////////////////////
49
void BamWriter::set_target(DatagramSink *target);

1101 10 get_target 0 4 1636 21 BamWriter::get_target 0 1 280 809
// Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
////////////////////////////////////////////////////////////////////
49
inline DatagramSink *BamWriter::get_target(void);

1102 4 init 0 4 1636 15 BamWriter::init 0 1 281 483
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamWriter::init(void);

1103 12 get_filename 0 4 1636 23 BamWriter::get_filename 0 1 282 455
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamWriter::get_filename(void) const;

1104 12 write_object 0 4 1636 23 BamWriter::write_object 0 1 283 1153
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BamWriter::write_object(TypedWritable const *obj);

1105 10 has_object 0 4 1636 21 BamWriter::has_object 0 1 284 408
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
////////////////////////////////////////////////////////////////////
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1106 5 flush 0 4 1636 16 BamWriter::flush 0 1 285 307
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
////////////////////////////////////////////////////////////////////
28
void BamWriter::flush(void);

1107 15 get_file_endian 0 4 1636 26 BamWriter::get_file_endian 0 1 286 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1108 24 get_file_stdfloat_double 0 4 1636 35 BamWriter::get_file_stdfloat_double 0 1 287 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1109 21 get_file_texture_mode 0 4 1636 32 BamWriter::get_file_texture_mode 0 1 288 462
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1110 21 set_file_texture_mode 0 4 1636 32 BamWriter::set_file_texture_mode 0 1 289 453
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1111 7 BitMask 0 4 1637 42 BitMask< unsigned short int, 16 >::BitMask 0 3 290 291 292 0
242
inline ::BitMask< unsigned short int, 16 >::BitMask(void);
inline ::BitMask< unsigned short int, 16 >::BitMask(unsigned short int init_value);
inline ::BitMask< unsigned short int, 16 >::BitMask(BitMask< unsigned short int, 16 > const &copy);

1112 10 operator = 0 4 1637 45 BitMask< unsigned short int, 16 >::operator = 0 1 293 0
137
inline BitMask< unsigned short int, 16 > &::BitMask< unsigned short int, 16 >::operator =(BitMask< unsigned short int, 16 > const &copy);

1113 6 all_on 0 4 1637 41 BitMask< unsigned short int, 16 >::all_on 0 1 294 0
98
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_on(void);

1114 7 all_off 0 4 1637 42 BitMask< unsigned short int, 16 >::all_off 0 1 295 0
99
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_off(void);

1115 8 lower_on 0 4 1637 43 BitMask< unsigned short int, 16 >::lower_on 0 1 296 0
107
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::lower_on(int on_bits);

1116 3 bit 0 4 1637 38 BitMask< unsigned short int, 16 >::bit 0 1 297 0
100
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::bit(int index);

1117 5 range 0 4 1637 40 BitMask< unsigned short int, 16 >::range 0 1 298 0
114
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::range(int low_bit, int size);

1118 8 ~BitMask 0 4 1637 43 BitMask< unsigned short int, 16 >::~BitMask 0 0 0
59
inline ::BitMask< unsigned short int, 16 >::~BitMask(void);

1119 16 has_max_num_bits 0 4 1637 51 BitMask< unsigned short int, 16 >::has_max_num_bits 0 1 299 0
79
static inline bool ::BitMask< unsigned short int, 16 >::has_max_num_bits(void);

1120 16 get_max_num_bits 0 4 1637 51 BitMask< unsigned short int, 16 >::get_max_num_bits 0 1 300 0
78
static inline int ::BitMask< unsigned short int, 16 >::get_max_num_bits(void);

1121 12 get_num_bits 0 4 1637 47 BitMask< unsigned short int, 16 >::get_num_bits 0 1 301 0
74
static inline int ::BitMask< unsigned short int, 16 >::get_num_bits(void);

1122 7 get_bit 0 4 1637 42 BitMask< unsigned short int, 16 >::get_bit 0 1 302 0
74
inline bool ::BitMask< unsigned short int, 16 >::get_bit(int index) const;

1123 7 set_bit 0 4 1637 42 BitMask< unsigned short int, 16 >::set_bit 0 1 303 0
68
inline void ::BitMask< unsigned short int, 16 >::set_bit(int index);

1124 9 clear_bit 0 4 1637 44 BitMask< unsigned short int, 16 >::clear_bit 0 1 304 0
70
inline void ::BitMask< unsigned short int, 16 >::clear_bit(int index);

1125 10 set_bit_to 0 4 1637 45 BitMask< unsigned short int, 16 >::set_bit_to 0 1 305 0
83
inline void ::BitMask< unsigned short int, 16 >::set_bit_to(int index, bool value);

1126 7 is_zero 0 4 1637 42 BitMask< unsigned short int, 16 >::is_zero 0 1 306 0
69
inline bool ::BitMask< unsigned short int, 16 >::is_zero(void) const;

1127 9 is_all_on 0 4 1637 44 BitMask< unsigned short int, 16 >::is_all_on 0 1 307 0
71
inline bool ::BitMask< unsigned short int, 16 >::is_all_on(void) const;

1128 7 extract 0 4 1637 42 BitMask< unsigned short int, 16 >::extract 0 1 308 0
100
inline unsigned short int ::BitMask< unsigned short int, 16 >::extract(int low_bit, int size) const;

1129 5 store 0 4 1637 40 BitMask< unsigned short int, 16 >::store 0 1 309 0
104
inline void ::BitMask< unsigned short int, 16 >::store(unsigned short int value, int low_bit, int size);

1130 10 has_any_of 0 4 1637 45 BitMask< unsigned short int, 16 >::has_any_of 0 1 310 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_any_of(int low_bit, int size) const;

1131 10 has_all_of 0 4 1637 45 BitMask< unsigned short int, 16 >::has_all_of 0 1 311 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_all_of(int low_bit, int size) const;

1132 9 set_range 0 4 1637 44 BitMask< unsigned short int, 16 >::set_range 0 1 312 0
82
inline void ::BitMask< unsigned short int, 16 >::set_range(int low_bit, int size);

1133 11 clear_range 0 4 1637 46 BitMask< unsigned short int, 16 >::clear_range 0 1 313 0
84
inline void ::BitMask< unsigned short int, 16 >::clear_range(int low_bit, int size);

1134 12 set_range_to 0 4 1637 47 BitMask< unsigned short int, 16 >::set_range_to 0 1 314 0
97
inline void ::BitMask< unsigned short int, 16 >::set_range_to(bool value, int low_bit, int size);

1135 8 get_word 0 4 1637 43 BitMask< unsigned short int, 16 >::get_word 0 1 315 0
84
inline unsigned short int ::BitMask< unsigned short int, 16 >::get_word(void) const;

1136 8 set_word 0 4 1637 43 BitMask< unsigned short int, 16 >::set_word 0 1 316 0
84
inline void ::BitMask< unsigned short int, 16 >::set_word(unsigned short int value);

1137 15 get_num_on_bits 0 4 1637 50 BitMask< unsigned short int, 16 >::get_num_on_bits 0 1 317 0
76
inline int ::BitMask< unsigned short int, 16 >::get_num_on_bits(void) const;

1138 16 get_num_off_bits 0 4 1637 51 BitMask< unsigned short int, 16 >::get_num_off_bits 0 1 318 0
77
inline int ::BitMask< unsigned short int, 16 >::get_num_off_bits(void) const;

1139 17 get_lowest_on_bit 0 4 1637 52 BitMask< unsigned short int, 16 >::get_lowest_on_bit 0 1 319 0
78
inline int ::BitMask< unsigned short int, 16 >::get_lowest_on_bit(void) const;

1140 18 get_lowest_off_bit 0 4 1637 53 BitMask< unsigned short int, 16 >::get_lowest_off_bit 0 1 320 0
79
inline int ::BitMask< unsigned short int, 16 >::get_lowest_off_bit(void) const;

1141 18 get_highest_on_bit 0 4 1637 53 BitMask< unsigned short int, 16 >::get_highest_on_bit 0 1 321 0
79
inline int ::BitMask< unsigned short int, 16 >::get_highest_on_bit(void) const;

1142 19 get_highest_off_bit 0 4 1637 54 BitMask< unsigned short int, 16 >::get_highest_off_bit 0 1 322 0
80
inline int ::BitMask< unsigned short int, 16 >::get_highest_off_bit(void) const;

1143 29 get_next_higher_different_bit 0 4 1637 64 BitMask< unsigned short int, 16 >::get_next_higher_different_bit 0 1 323 0
97
inline int ::BitMask< unsigned short int, 16 >::get_next_higher_different_bit(int low_bit) const;

1144 15 invert_in_place 0 4 1637 50 BitMask< unsigned short int, 16 >::invert_in_place 0 1 324 0
71
inline void ::BitMask< unsigned short int, 16 >::invert_in_place(void);

1145 18 has_bits_in_common 0 4 1637 53 BitMask< unsigned short int, 16 >::has_bits_in_common 0 1 325 0
122
inline bool ::BitMask< unsigned short int, 16 >::has_bits_in_common(BitMask< unsigned short int, 16 > const &other) const;

1146 5 clear 0 4 1637 40 BitMask< unsigned short int, 16 >::clear 0 1 326 0
61
inline void ::BitMask< unsigned short int, 16 >::clear(void);

1147 6 output 0 4 1637 41 BitMask< unsigned short int, 16 >::output 0 1 327 0
69
void ::BitMask< unsigned short int, 16 >::output(ostream &out) const;

1148 13 output_binary 0 4 1637 48 BitMask< unsigned short int, 16 >::output_binary 0 2 328 329 0
100
void ::BitMask< unsigned short int, 16 >::output_binary(ostream &out, int spaces_every = (4)) const;

1149 10 output_hex 0 4 1637 45 BitMask< unsigned short int, 16 >::output_hex 0 2 330 331 0
97
void ::BitMask< unsigned short int, 16 >::output_hex(ostream &out, int spaces_every = (4)) const;

1150 5 write 0 4 1637 40 BitMask< unsigned short int, 16 >::write 0 2 332 333 0
92
void ::BitMask< unsigned short int, 16 >::write(ostream &out, int indent_level = (0)) const;

1151 11 operator == 0 4 1637 46 BitMask< unsigned short int, 16 >::operator == 0 1 334 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator ==(BitMask< unsigned short int, 16 > const &other) const;

1152 11 operator != 0 4 1637 46 BitMask< unsigned short int, 16 >::operator != 0 1 335 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator !=(BitMask< unsigned short int, 16 > const &other) const;

1153 10 operator < 0 4 1637 45 BitMask< unsigned short int, 16 >::operator < 0 1 336 0
114
inline bool ::BitMask< unsigned short int, 16 >::operator <(BitMask< unsigned short int, 16 > const &other) const;

1154 10 compare_to 0 4 1637 45 BitMask< unsigned short int, 16 >::compare_to 0 1 337 0
113
inline int ::BitMask< unsigned short int, 16 >::compare_to(BitMask< unsigned short int, 16 > const &other) const;

1155 10 operator & 0 4 1637 45 BitMask< unsigned short int, 16 >::operator & 0 1 338 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator &(BitMask< unsigned short int, 16 > const &other) const;

1156 10 operator | 0 4 1637 45 BitMask< unsigned short int, 16 >::operator | 0 1 339 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator |(BitMask< unsigned short int, 16 > const &other) const;

1157 10 operator ^ 0 4 1637 45 BitMask< unsigned short int, 16 >::operator ^ 0 1 340 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ^(BitMask< unsigned short int, 16 > const &other) const;

1158 10 operator ~ 0 68 1637 45 BitMask< unsigned short int, 16 >::operator ~ 0 1 341 0
101
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ~(void) const;

1159 11 operator << 0 4 1637 46 BitMask< unsigned short int, 16 >::operator << 0 1 342 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator <<(int shift) const;

1160 11 operator >> 0 4 1637 46 BitMask< unsigned short int, 16 >::operator >> 0 1 343 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator >>(int shift) const;

1161 11 operator &= 0 4 1637 46 BitMask< unsigned short int, 16 >::operator &= 0 1 344 0
109
inline void ::BitMask< unsigned short int, 16 >::operator &=(BitMask< unsigned short int, 16 > const &other);

1162 11 operator |= 0 4 1637 46 BitMask< unsigned short int, 16 >::operator |= 0 1 345 0
109
inline void ::BitMask< unsigned short int, 16 >::operator |=(BitMask< unsigned short int, 16 > const &other);

1163 11 operator ^= 0 4 1637 46 BitMask< unsigned short int, 16 >::operator ^= 0 1 346 0
109
inline void ::BitMask< unsigned short int, 16 >::operator ^=(BitMask< unsigned short int, 16 > const &other);

1164 12 operator <<= 0 4 1637 47 BitMask< unsigned short int, 16 >::operator <<= 0 1 347 0
73
inline void ::BitMask< unsigned short int, 16 >::operator <<=(int shift);

1165 12 operator >>= 0 4 1637 47 BitMask< unsigned short int, 16 >::operator >>= 0 1 348 0
73
inline void ::BitMask< unsigned short int, 16 >::operator >>=(int shift);

1166 19 flood_down_in_place 0 4 1637 54 BitMask< unsigned short int, 16 >::flood_down_in_place 0 1 349 0
75
inline void ::BitMask< unsigned short int, 16 >::flood_down_in_place(void);

1167 17 flood_up_in_place 0 4 1637 52 BitMask< unsigned short int, 16 >::flood_up_in_place 0 1 350 0
73
inline void ::BitMask< unsigned short int, 16 >::flood_up_in_place(void);

1168 15 flood_bits_down 0 4 1637 50 BitMask< unsigned short int, 16 >::flood_bits_down 0 1 351 0
106
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_down(void) const;

1169 13 flood_bits_up 0 4 1637 48 BitMask< unsigned short int, 16 >::flood_bits_up 0 1 352 0
104
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_up(void) const;

1170 21 keep_next_highest_bit 0 4 1637 56 BitMask< unsigned short int, 16 >::keep_next_highest_bit 0 3 353 354 355 0
385
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(BitMask< unsigned short int, 16 > const &other) const;

1171 20 keep_next_lowest_bit 0 4 1637 55 BitMask< unsigned short int, 16 >::keep_next_lowest_bit 0 3 356 357 358 0
382
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(BitMask< unsigned short int, 16 > const &other) const;

1172 7 get_key 0 4 1637 42 BitMask< unsigned short int, 16 >::get_key 0 1 359 0
68
inline int ::BitMask< unsigned short int, 16 >::get_key(void) const;

1173 14 get_class_type 0 4 1637 49 BitMask< unsigned short int, 16 >::get_class_type 0 1 360 0
76
static TypeHandle ::BitMask< unsigned short int, 16 >::get_class_type(void);

1174 7 BitMask 0 4 1638 36 BitMask< unsigned int, 32 >::BitMask 0 3 361 362 363 0
212
inline ::BitMask< unsigned int, 32 >::BitMask(void);
inline ::BitMask< unsigned int, 32 >::BitMask(unsigned int init_value);
inline ::BitMask< unsigned int, 32 >::BitMask(BitMask< unsigned int, 32 > const &copy);

1175 10 operator = 0 4 1638 39 BitMask< unsigned int, 32 >::operator = 0 1 364 0
119
inline BitMask< unsigned int, 32 > &::BitMask< unsigned int, 32 >::operator =(BitMask< unsigned int, 32 > const &copy);

1176 6 all_on 0 4 1638 35 BitMask< unsigned int, 32 >::all_on 0 1 365 0
86
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_on(void);

1177 7 all_off 0 4 1638 36 BitMask< unsigned int, 32 >::all_off 0 1 366 0
87
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_off(void);

1178 8 lower_on 0 4 1638 37 BitMask< unsigned int, 32 >::lower_on 0 1 367 0
95
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::lower_on(int on_bits);

1179 3 bit 0 4 1638 32 BitMask< unsigned int, 32 >::bit 0 1 368 0
88
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::bit(int index);

1180 5 range 0 4 1638 34 BitMask< unsigned int, 32 >::range 0 1 369 0
102
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::range(int low_bit, int size);

1181 8 ~BitMask 0 4 1638 37 BitMask< unsigned int, 32 >::~BitMask 0 0 0
53
inline ::BitMask< unsigned int, 32 >::~BitMask(void);

1182 16 has_max_num_bits 0 4 1638 45 BitMask< unsigned int, 32 >::has_max_num_bits 0 1 370 0
73
static inline bool ::BitMask< unsigned int, 32 >::has_max_num_bits(void);

1183 16 get_max_num_bits 0 4 1638 45 BitMask< unsigned int, 32 >::get_max_num_bits 0 1 371 0
72
static inline int ::BitMask< unsigned int, 32 >::get_max_num_bits(void);

1184 12 get_num_bits 0 4 1638 41 BitMask< unsigned int, 32 >::get_num_bits 0 1 372 0
68
static inline int ::BitMask< unsigned int, 32 >::get_num_bits(void);

1185 7 get_bit 0 4 1638 36 BitMask< unsigned int, 32 >::get_bit 0 1 373 0
68
inline bool ::BitMask< unsigned int, 32 >::get_bit(int index) const;

1186 7 set_bit 0 4 1638 36 BitMask< unsigned int, 32 >::set_bit 0 1 374 0
62
inline void ::BitMask< unsigned int, 32 >::set_bit(int index);

1187 9 clear_bit 0 4 1638 38 BitMask< unsigned int, 32 >::clear_bit 0 1 375 0
64
inline void ::BitMask< unsigned int, 32 >::clear_bit(int index);

1188 10 set_bit_to 0 4 1638 39 BitMask< unsigned int, 32 >::set_bit_to 0 1 376 0
77
inline void ::BitMask< unsigned int, 32 >::set_bit_to(int index, bool value);

1189 7 is_zero 0 4 1638 36 BitMask< unsigned int, 32 >::is_zero 0 1 377 0
63
inline bool ::BitMask< unsigned int, 32 >::is_zero(void) const;

1190 9 is_all_on 0 4 1638 38 BitMask< unsigned int, 32 >::is_all_on 0 1 378 0
65
inline bool ::BitMask< unsigned int, 32 >::is_all_on(void) const;

1191 7 extract 0 4 1638 36 BitMask< unsigned int, 32 >::extract 0 1 379 0
88
inline unsigned int ::BitMask< unsigned int, 32 >::extract(int low_bit, int size) const;

1192 5 store 0 4 1638 34 BitMask< unsigned int, 32 >::store 0 1 380 0
92
inline void ::BitMask< unsigned int, 32 >::store(unsigned int value, int low_bit, int size);

1193 10 has_any_of 0 4 1638 39 BitMask< unsigned int, 32 >::has_any_of 0 1 381 0
83
inline bool ::BitMask< unsigned int, 32 >::has_any_of(int low_bit, int size) const;

1194 10 has_all_of 0 4 1638 39 BitMask< unsigned int, 32 >::has_all_of 0 1 382 0
83
inline bool ::BitMask< unsigned int, 32 >::has_all_of(int low_bit, int size) const;

1195 9 set_range 0 4 1638 38 BitMask< unsigned int, 32 >::set_range 0 1 383 0
76
inline void ::BitMask< unsigned int, 32 >::set_range(int low_bit, int size);

1196 11 clear_range 0 4 1638 40 BitMask< unsigned int, 32 >::clear_range 0 1 384 0
78
inline void ::BitMask< unsigned int, 32 >::clear_range(int low_bit, int size);

1197 12 set_range_to 0 4 1638 41 BitMask< unsigned int, 32 >::set_range_to 0 1 385 0
91
inline void ::BitMask< unsigned int, 32 >::set_range_to(bool value, int low_bit, int size);

1198 8 get_word 0 4 1638 37 BitMask< unsigned int, 32 >::get_word 0 1 386 0
72
inline unsigned int ::BitMask< unsigned int, 32 >::get_word(void) const;

1199 8 set_word 0 4 1638 37 BitMask< unsigned int, 32 >::set_word 0 1 387 0
72
inline void ::BitMask< unsigned int, 32 >::set_word(unsigned int value);

1200 15 get_num_on_bits 0 4 1638 44 BitMask< unsigned int, 32 >::get_num_on_bits 0 1 388 0
70
inline int ::BitMask< unsigned int, 32 >::get_num_on_bits(void) const;

1201 16 get_num_off_bits 0 4 1638 45 BitMask< unsigned int, 32 >::get_num_off_bits 0 1 389 0
71
inline int ::BitMask< unsigned int, 32 >::get_num_off_bits(void) const;

1202 17 get_lowest_on_bit 0 4 1638 46 BitMask< unsigned int, 32 >::get_lowest_on_bit 0 1 390 0
72
inline int ::BitMask< unsigned int, 32 >::get_lowest_on_bit(void) const;

1203 18 get_lowest_off_bit 0 4 1638 47 BitMask< unsigned int, 32 >::get_lowest_off_bit 0 1 391 0
73
inline int ::BitMask< unsigned int, 32 >::get_lowest_off_bit(void) const;

1204 18 get_highest_on_bit 0 4 1638 47 BitMask< unsigned int, 32 >::get_highest_on_bit 0 1 392 0
73
inline int ::BitMask< unsigned int, 32 >::get_highest_on_bit(void) const;

1205 19 get_highest_off_bit 0 4 1638 48 BitMask< unsigned int, 32 >::get_highest_off_bit 0 1 393 0
74
inline int ::BitMask< unsigned int, 32 >::get_highest_off_bit(void) const;

1206 29 get_next_higher_different_bit 0 4 1638 58 BitMask< unsigned int, 32 >::get_next_higher_different_bit 0 1 394 0
91
inline int ::BitMask< unsigned int, 32 >::get_next_higher_different_bit(int low_bit) const;

1207 15 invert_in_place 0 4 1638 44 BitMask< unsigned int, 32 >::invert_in_place 0 1 395 0
65
inline void ::BitMask< unsigned int, 32 >::invert_in_place(void);

1208 18 has_bits_in_common 0 4 1638 47 BitMask< unsigned int, 32 >::has_bits_in_common 0 1 396 0
110
inline bool ::BitMask< unsigned int, 32 >::has_bits_in_common(BitMask< unsigned int, 32 > const &other) const;

1209 5 clear 0 4 1638 34 BitMask< unsigned int, 32 >::clear 0 1 397 0
55
inline void ::BitMask< unsigned int, 32 >::clear(void);

1210 6 output 0 4 1638 35 BitMask< unsigned int, 32 >::output 0 1 398 0
63
void ::BitMask< unsigned int, 32 >::output(ostream &out) const;

1211 13 output_binary 0 4 1638 42 BitMask< unsigned int, 32 >::output_binary 0 2 399 400 0
94
void ::BitMask< unsigned int, 32 >::output_binary(ostream &out, int spaces_every = (4)) const;

1212 10 output_hex 0 4 1638 39 BitMask< unsigned int, 32 >::output_hex 0 2 401 402 0
91
void ::BitMask< unsigned int, 32 >::output_hex(ostream &out, int spaces_every = (4)) const;

1213 5 write 0 4 1638 34 BitMask< unsigned int, 32 >::write 0 2 403 404 0
86
void ::BitMask< unsigned int, 32 >::write(ostream &out, int indent_level = (0)) const;

1214 11 operator == 0 4 1638 40 BitMask< unsigned int, 32 >::operator == 0 1 405 0
103
inline bool ::BitMask< unsigned int, 32 >::operator ==(BitMask< unsigned int, 32 > const &other) const;

1215 11 operator != 0 4 1638 40 BitMask< unsigned int, 32 >::operator != 0 1 406 0
103
inline bool ::BitMask< unsigned int, 32 >::operator !=(BitMask< unsigned int, 32 > const &other) const;

1216 10 operator < 0 4 1638 39 BitMask< unsigned int, 32 >::operator < 0 1 407 0
102
inline bool ::BitMask< unsigned int, 32 >::operator <(BitMask< unsigned int, 32 > const &other) const;

1217 10 compare_to 0 4 1638 39 BitMask< unsigned int, 32 >::compare_to 0 1 408 0
101
inline int ::BitMask< unsigned int, 32 >::compare_to(BitMask< unsigned int, 32 > const &other) const;

1218 10 operator & 0 4 1638 39 BitMask< unsigned int, 32 >::operator & 0 1 409 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator &(BitMask< unsigned int, 32 > const &other) const;

1219 10 operator | 0 4 1638 39 BitMask< unsigned int, 32 >::operator | 0 1 410 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator |(BitMask< unsigned int, 32 > const &other) const;

1220 10 operator ^ 0 4 1638 39 BitMask< unsigned int, 32 >::operator ^ 0 1 411 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ^(BitMask< unsigned int, 32 > const &other) const;

1221 10 operator ~ 0 68 1638 39 BitMask< unsigned int, 32 >::operator ~ 0 1 412 0
89
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ~(void) const;

1222 11 operator << 0 4 1638 40 BitMask< unsigned int, 32 >::operator << 0 1 413 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator <<(int shift) const;

1223 11 operator >> 0 4 1638 40 BitMask< unsigned int, 32 >::operator >> 0 1 414 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator >>(int shift) const;

1224 11 operator &= 0 4 1638 40 BitMask< unsigned int, 32 >::operator &= 0 1 415 0
97
inline void ::BitMask< unsigned int, 32 >::operator &=(BitMask< unsigned int, 32 > const &other);

1225 11 operator |= 0 4 1638 40 BitMask< unsigned int, 32 >::operator |= 0 1 416 0
97
inline void ::BitMask< unsigned int, 32 >::operator |=(BitMask< unsigned int, 32 > const &other);

1226 11 operator ^= 0 4 1638 40 BitMask< unsigned int, 32 >::operator ^= 0 1 417 0
97
inline void ::BitMask< unsigned int, 32 >::operator ^=(BitMask< unsigned int, 32 > const &other);

1227 12 operator <<= 0 4 1638 41 BitMask< unsigned int, 32 >::operator <<= 0 1 418 0
67
inline void ::BitMask< unsigned int, 32 >::operator <<=(int shift);

1228 12 operator >>= 0 4 1638 41 BitMask< unsigned int, 32 >::operator >>= 0 1 419 0
67
inline void ::BitMask< unsigned int, 32 >::operator >>=(int shift);

1229 19 flood_down_in_place 0 4 1638 48 BitMask< unsigned int, 32 >::flood_down_in_place 0 1 420 0
69
inline void ::BitMask< unsigned int, 32 >::flood_down_in_place(void);

1230 17 flood_up_in_place 0 4 1638 46 BitMask< unsigned int, 32 >::flood_up_in_place 0 1 421 0
67
inline void ::BitMask< unsigned int, 32 >::flood_up_in_place(void);

1231 15 flood_bits_down 0 4 1638 44 BitMask< unsigned int, 32 >::flood_bits_down 0 1 422 0
94
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_down(void) const;

1232 13 flood_bits_up 0 4 1638 42 BitMask< unsigned int, 32 >::flood_bits_up 0 1 423 0
92
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_up(void) const;

1233 21 keep_next_highest_bit 0 4 1638 50 BitMask< unsigned int, 32 >::keep_next_highest_bit 0 3 424 425 426 0
343
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(BitMask< unsigned int, 32 > const &other) const;

1234 20 keep_next_lowest_bit 0 4 1638 49 BitMask< unsigned int, 32 >::keep_next_lowest_bit 0 3 427 428 429 0
340
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(BitMask< unsigned int, 32 > const &other) const;

1235 7 get_key 0 4 1638 36 BitMask< unsigned int, 32 >::get_key 0 1 430 0
62
inline int ::BitMask< unsigned int, 32 >::get_key(void) const;

1236 14 get_class_type 0 4 1638 43 BitMask< unsigned int, 32 >::get_class_type 0 1 431 0
70
static TypeHandle ::BitMask< unsigned int, 32 >::get_class_type(void);

1237 7 BitMask 0 4 1639 40 BitMask< unsigned __int64, 64 >::BitMask 0 3 432 433 434 0
232
inline ::BitMask< unsigned __int64, 64 >::BitMask(void);
inline ::BitMask< unsigned __int64, 64 >::BitMask(unsigned __int64 init_value);
inline ::BitMask< unsigned __int64, 64 >::BitMask(BitMask< unsigned __int64, 64 > const &copy);

1238 10 operator = 0 4 1639 43 BitMask< unsigned __int64, 64 >::operator = 0 1 435 0
131
inline BitMask< unsigned __int64, 64 > &::BitMask< unsigned __int64, 64 >::operator =(BitMask< unsigned __int64, 64 > const &copy);

1239 6 all_on 0 4 1639 39 BitMask< unsigned __int64, 64 >::all_on 0 1 436 0
94
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_on(void);

1240 7 all_off 0 4 1639 40 BitMask< unsigned __int64, 64 >::all_off 0 1 437 0
95
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_off(void);

1241 8 lower_on 0 4 1639 41 BitMask< unsigned __int64, 64 >::lower_on 0 1 438 0
103
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::lower_on(int on_bits);

1242 3 bit 0 4 1639 36 BitMask< unsigned __int64, 64 >::bit 0 1 439 0
96
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::bit(int index);

1243 5 range 0 4 1639 38 BitMask< unsigned __int64, 64 >::range 0 1 440 0
110
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::range(int low_bit, int size);

1244 8 ~BitMask 0 4 1639 41 BitMask< unsigned __int64, 64 >::~BitMask 0 0 0
57
inline ::BitMask< unsigned __int64, 64 >::~BitMask(void);

1245 16 has_max_num_bits 0 4 1639 49 BitMask< unsigned __int64, 64 >::has_max_num_bits 0 1 441 0
77
static inline bool ::BitMask< unsigned __int64, 64 >::has_max_num_bits(void);

1246 16 get_max_num_bits 0 4 1639 49 BitMask< unsigned __int64, 64 >::get_max_num_bits 0 1 442 0
76
static inline int ::BitMask< unsigned __int64, 64 >::get_max_num_bits(void);

1247 12 get_num_bits 0 4 1639 45 BitMask< unsigned __int64, 64 >::get_num_bits 0 1 443 0
72
static inline int ::BitMask< unsigned __int64, 64 >::get_num_bits(void);

1248 7 get_bit 0 4 1639 40 BitMask< unsigned __int64, 64 >::get_bit 0 1 444 0
72
inline bool ::BitMask< unsigned __int64, 64 >::get_bit(int index) const;

1249 7 set_bit 0 4 1639 40 BitMask< unsigned __int64, 64 >::set_bit 0 1 445 0
66
inline void ::BitMask< unsigned __int64, 64 >::set_bit(int index);

1250 9 clear_bit 0 4 1639 42 BitMask< unsigned __int64, 64 >::clear_bit 0 1 446 0
68
inline void ::BitMask< unsigned __int64, 64 >::clear_bit(int index);

1251 10 set_bit_to 0 4 1639 43 BitMask< unsigned __int64, 64 >::set_bit_to 0 1 447 0
81
inline void ::BitMask< unsigned __int64, 64 >::set_bit_to(int index, bool value);

1252 7 is_zero 0 4 1639 40 BitMask< unsigned __int64, 64 >::is_zero 0 1 448 0
67
inline bool ::BitMask< unsigned __int64, 64 >::is_zero(void) const;

1253 9 is_all_on 0 4 1639 42 BitMask< unsigned __int64, 64 >::is_all_on 0 1 449 0
69
inline bool ::BitMask< unsigned __int64, 64 >::is_all_on(void) const;

1254 7 extract 0 4 1639 40 BitMask< unsigned __int64, 64 >::extract 0 1 450 0
96
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::extract(int low_bit, int size) const;

1255 5 store 0 4 1639 38 BitMask< unsigned __int64, 64 >::store 0 1 451 0
100
inline void ::BitMask< unsigned __int64, 64 >::store(unsigned __int64 value, int low_bit, int size);

1256 10 has_any_of 0 4 1639 43 BitMask< unsigned __int64, 64 >::has_any_of 0 1 452 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_any_of(int low_bit, int size) const;

1257 10 has_all_of 0 4 1639 43 BitMask< unsigned __int64, 64 >::has_all_of 0 1 453 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_all_of(int low_bit, int size) const;

1258 9 set_range 0 4 1639 42 BitMask< unsigned __int64, 64 >::set_range 0 1 454 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_range(int low_bit, int size);

1259 11 clear_range 0 4 1639 44 BitMask< unsigned __int64, 64 >::clear_range 0 1 455 0
82
inline void ::BitMask< unsigned __int64, 64 >::clear_range(int low_bit, int size);

1260 12 set_range_to 0 4 1639 45 BitMask< unsigned __int64, 64 >::set_range_to 0 1 456 0
95
inline void ::BitMask< unsigned __int64, 64 >::set_range_to(bool value, int low_bit, int size);

1261 8 get_word 0 4 1639 41 BitMask< unsigned __int64, 64 >::get_word 0 1 457 0
80
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::get_word(void) const;

1262 8 set_word 0 4 1639 41 BitMask< unsigned __int64, 64 >::set_word 0 1 458 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_word(unsigned __int64 value);

1263 15 get_num_on_bits 0 4 1639 48 BitMask< unsigned __int64, 64 >::get_num_on_bits 0 1 459 0
74
inline int ::BitMask< unsigned __int64, 64 >::get_num_on_bits(void) const;

1264 16 get_num_off_bits 0 4 1639 49 BitMask< unsigned __int64, 64 >::get_num_off_bits 0 1 460 0
75
inline int ::BitMask< unsigned __int64, 64 >::get_num_off_bits(void) const;

1265 17 get_lowest_on_bit 0 4 1639 50 BitMask< unsigned __int64, 64 >::get_lowest_on_bit 0 1 461 0
76
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_on_bit(void) const;

1266 18 get_lowest_off_bit 0 4 1639 51 BitMask< unsigned __int64, 64 >::get_lowest_off_bit 0 1 462 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_off_bit(void) const;

1267 18 get_highest_on_bit 0 4 1639 51 BitMask< unsigned __int64, 64 >::get_highest_on_bit 0 1 463 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_highest_on_bit(void) const;

1268 19 get_highest_off_bit 0 4 1639 52 BitMask< unsigned __int64, 64 >::get_highest_off_bit 0 1 464 0
78
inline int ::BitMask< unsigned __int64, 64 >::get_highest_off_bit(void) const;

1269 29 get_next_higher_different_bit 0 4 1639 62 BitMask< unsigned __int64, 64 >::get_next_higher_different_bit 0 1 465 0
95
inline int ::BitMask< unsigned __int64, 64 >::get_next_higher_different_bit(int low_bit) const;

1270 15 invert_in_place 0 4 1639 48 BitMask< unsigned __int64, 64 >::invert_in_place 0 1 466 0
69
inline void ::BitMask< unsigned __int64, 64 >::invert_in_place(void);

1271 18 has_bits_in_common 0 4 1639 51 BitMask< unsigned __int64, 64 >::has_bits_in_common 0 1 467 0
118
inline bool ::BitMask< unsigned __int64, 64 >::has_bits_in_common(BitMask< unsigned __int64, 64 > const &other) const;

1272 5 clear 0 4 1639 38 BitMask< unsigned __int64, 64 >::clear 0 1 468 0
59
inline void ::BitMask< unsigned __int64, 64 >::clear(void);

1273 6 output 0 4 1639 39 BitMask< unsigned __int64, 64 >::output 0 1 469 0
67
void ::BitMask< unsigned __int64, 64 >::output(ostream &out) const;

1274 13 output_binary 0 4 1639 46 BitMask< unsigned __int64, 64 >::output_binary 0 2 470 471 0
98
void ::BitMask< unsigned __int64, 64 >::output_binary(ostream &out, int spaces_every = (4)) const;

1275 10 output_hex 0 4 1639 43 BitMask< unsigned __int64, 64 >::output_hex 0 2 472 473 0
95
void ::BitMask< unsigned __int64, 64 >::output_hex(ostream &out, int spaces_every = (4)) const;

1276 5 write 0 4 1639 38 BitMask< unsigned __int64, 64 >::write 0 2 474 475 0
90
void ::BitMask< unsigned __int64, 64 >::write(ostream &out, int indent_level = (0)) const;

1277 11 operator == 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator == 0 1 476 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator ==(BitMask< unsigned __int64, 64 > const &other) const;

1278 11 operator != 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator != 0 1 477 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator !=(BitMask< unsigned __int64, 64 > const &other) const;

1279 10 operator < 0 4 1639 43 BitMask< unsigned __int64, 64 >::operator < 0 1 478 0
110
inline bool ::BitMask< unsigned __int64, 64 >::operator <(BitMask< unsigned __int64, 64 > const &other) const;

1280 10 compare_to 0 4 1639 43 BitMask< unsigned __int64, 64 >::compare_to 0 1 479 0
109
inline int ::BitMask< unsigned __int64, 64 >::compare_to(BitMask< unsigned __int64, 64 > const &other) const;

1281 10 operator & 0 4 1639 43 BitMask< unsigned __int64, 64 >::operator & 0 1 480 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator &(BitMask< unsigned __int64, 64 > const &other) const;

1282 10 operator | 0 4 1639 43 BitMask< unsigned __int64, 64 >::operator | 0 1 481 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator |(BitMask< unsigned __int64, 64 > const &other) const;

1283 10 operator ^ 0 4 1639 43 BitMask< unsigned __int64, 64 >::operator ^ 0 1 482 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ^(BitMask< unsigned __int64, 64 > const &other) const;

1284 10 operator ~ 0 68 1639 43 BitMask< unsigned __int64, 64 >::operator ~ 0 1 483 0
97
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ~(void) const;

1285 11 operator << 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator << 0 1 484 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator <<(int shift) const;

1286 11 operator >> 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator >> 0 1 485 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator >>(int shift) const;

1287 11 operator &= 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator &= 0 1 486 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator &=(BitMask< unsigned __int64, 64 > const &other);

1288 11 operator |= 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator |= 0 1 487 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator |=(BitMask< unsigned __int64, 64 > const &other);

1289 11 operator ^= 0 4 1639 44 BitMask< unsigned __int64, 64 >::operator ^= 0 1 488 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator ^=(BitMask< unsigned __int64, 64 > const &other);

1290 12 operator <<= 0 4 1639 45 BitMask< unsigned __int64, 64 >::operator <<= 0 1 489 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator <<=(int shift);

1291 12 operator >>= 0 4 1639 45 BitMask< unsigned __int64, 64 >::operator >>= 0 1 490 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator >>=(int shift);

1292 19 flood_down_in_place 0 4 1639 52 BitMask< unsigned __int64, 64 >::flood_down_in_place 0 1 491 0
73
inline void ::BitMask< unsigned __int64, 64 >::flood_down_in_place(void);

1293 17 flood_up_in_place 0 4 1639 50 BitMask< unsigned __int64, 64 >::flood_up_in_place 0 1 492 0
71
inline void ::BitMask< unsigned __int64, 64 >::flood_up_in_place(void);

1294 15 flood_bits_down 0 4 1639 48 BitMask< unsigned __int64, 64 >::flood_bits_down 0 1 493 0
102
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_down(void) const;

1295 13 flood_bits_up 0 4 1639 46 BitMask< unsigned __int64, 64 >::flood_bits_up 0 1 494 0
100
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_up(void) const;

1296 21 keep_next_highest_bit 0 4 1639 54 BitMask< unsigned __int64, 64 >::keep_next_highest_bit 0 3 495 496 497 0
371
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1297 20 keep_next_lowest_bit 0 4 1639 53 BitMask< unsigned __int64, 64 >::keep_next_lowest_bit 0 3 498 499 500 0
368
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1298 7 get_key 0 4 1639 40 BitMask< unsigned __int64, 64 >::get_key 0 1 501 0
66
inline int ::BitMask< unsigned __int64, 64 >::get_key(void) const;

1299 14 get_class_type 0 4 1639 47 BitMask< unsigned __int64, 64 >::get_class_type 0 1 502 0
74
static TypeHandle ::BitMask< unsigned __int64, 64 >::get_class_type(void);

1300 8 BitArray 0 4 1640 18 BitArray::BitArray 0 4 503 504 505 506 1394
// Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
178
inline BitArray::BitArray(void);
inline BitArray::BitArray(unsigned int init_value);
inline BitArray::BitArray(BitArray const &copy);
BitArray::BitArray(SparseArray const &from);

1301 10 operator = 0 4 1640 20 BitArray::operator = 0 1 507 233
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline BitArray &BitArray::operator =(BitArray const &copy);

1302 6 all_on 0 4 1640 16 BitArray::all_on 0 1 508 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
46
static inline BitArray BitArray::all_on(void);

1303 7 all_off 0 4 1640 17 BitArray::all_off 0 1 509 284
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
////////////////////////////////////////////////////////////////////
47
static inline BitArray BitArray::all_off(void);

1304 8 lower_on 0 4 1640 18 BitArray::lower_on 0 1 510 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
55
static inline BitArray BitArray::lower_on(int on_bits);

1305 3 bit 0 4 1640 13 BitArray::bit 0 1 511 289
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
48
static inline BitArray BitArray::bit(int index);

1306 5 range 0 4 1640 15 BitArray::range 0 1 512 323
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
62
static inline BitArray BitArray::range(int low_bit, int size);

1307 9 ~BitArray 0 4 1640 19 BitArray::~BitArray 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline BitArray::~BitArray(void);

1308 16 has_max_num_bits 0 4 1640 26 BitArray::has_max_num_bits 0 1 513 714
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
////////////////////////////////////////////////////////////////////
52
static inline bool BitArray::has_max_num_bits(void);

1309 16 get_max_num_bits 0 4 1640 26 BitArray::get_max_num_bits 0 1 514 749
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
////////////////////////////////////////////////////////////////////
51
static inline int BitArray::get_max_num_bits(void);

1310 21 get_num_bits_per_word 0 4 1640 31 BitArray::get_num_bits_per_word 0 1 515 476
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
////////////////////////////////////////////////////////////////////
56
static inline int BitArray::get_num_bits_per_word(void);

1311 12 get_num_bits 0 4 1640 22 BitArray::get_num_bits 0 1 516 604
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
46
inline int BitArray::get_num_bits(void) const;

1312 7 get_bit 0 4 1640 17 BitArray::get_bit 0 1 517 442
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
47
inline bool BitArray::get_bit(int index) const;

1313 7 set_bit 0 4 1640 17 BitArray::set_bit 0 1 518 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
41
inline void BitArray::set_bit(int index);

1314 9 clear_bit 0 4 1640 19 BitArray::clear_bit 0 1 519 320
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
43
inline void BitArray::clear_bit(int index);

1315 10 set_bit_to 0 4 1640 20 BitArray::set_bit_to 0 1 520 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
56
inline void BitArray::set_bit_to(int index, bool value);

1316 16 get_highest_bits 0 4 1640 26 BitArray::get_highest_bits 0 1 521 364
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
51
inline bool BitArray::get_highest_bits(void) const;

1317 7 is_zero 0 4 1640 17 BitArray::is_zero 0 1 522 294
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool BitArray::is_zero(void) const;

1318 9 is_all_on 0 4 1640 19 BitArray::is_all_on 0 1 523 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
37
bool BitArray::is_all_on(void) const;

1319 7 extract 0 4 1640 17 BitArray::extract 0 1 524 438
////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
////////////////////////////////////////////////////////////////////
67
inline unsigned int BitArray::extract(int low_bit, int size) const;

1320 5 store 0 4 1640 15 BitArray::store 0 1 525 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
////////////////////////////////////////////////////////////////////
71
inline void BitArray::store(unsigned int value, int low_bit, int size);

1321 10 has_any_of 0 4 1640 20 BitArray::has_any_of 0 1 526 308
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_any_of(int low_bit, int size) const;

1322 10 has_all_of 0 4 1640 20 BitArray::has_all_of 0 1 527 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_all_of(int low_bit, int size) const;

1323 9 set_range 0 4 1640 19 BitArray::set_range 0 1 528 255
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
48
void BitArray::set_range(int low_bit, int size);

1324 11 clear_range 0 4 1640 21 BitArray::clear_range 0 1 529 258
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
50
void BitArray::clear_range(int low_bit, int size);

1325 12 set_range_to 0 4 1640 22 BitArray::set_range_to 0 1 530 275
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1326 15 get_num_on_bits 0 4 1640 25 BitArray::get_num_on_bits 0 1 531 372
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
42
int BitArray::get_num_on_bits(void) const;

1327 16 get_num_off_bits 0 4 1640 26 BitArray::get_num_off_bits 0 1 532 373
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
43
int BitArray::get_num_off_bits(void) const;

1328 17 get_lowest_on_bit 0 4 1640 27 BitArray::get_lowest_on_bit 0 1 533 330
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
////////////////////////////////////////////////////////////////////
44
int BitArray::get_lowest_on_bit(void) const;

1329 18 get_lowest_off_bit 0 4 1640 28 BitArray::get_lowest_off_bit 0 1 534 331
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_lowest_off_bit(void) const;

1330 18 get_highest_on_bit 0 4 1640 28 BitArray::get_highest_on_bit 0 1 535 390
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_highest_on_bit(void) const;

1331 19 get_highest_off_bit 0 4 1640 29 BitArray::get_highest_off_bit 0 1 536 391
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
46
int BitArray::get_highest_off_bit(void) const;

1332 29 get_next_higher_different_bit 0 4 1640 39 BitArray::get_next_higher_different_bit 0 1 537 591
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1333 13 get_num_words 0 4 1640 23 BitArray::get_num_words 0 1 538 304
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
////////////////////////////////////////////////////////////////////
47
inline int BitArray::get_num_words(void) const;

1334 8 get_word 0 4 1640 18 BitArray::get_word 0 1 539 410
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
////////////////////////////////////////////////////////////////////
67
inline BitMask< unsigned int, 32 > BitArray::get_word(int n) const;

1335 8 set_word 0 4 1640 18 BitArray::set_word 0 1 540 351
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
////////////////////////////////////////////////////////////////////
73
inline void BitArray::set_word(int n, BitMask< unsigned int, 32 > value);

1336 15 invert_in_place 0 4 1640 25 BitArray::invert_in_place 0 1 541 318
////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
37
void BitArray::invert_in_place(void);

1337 18 has_bits_in_common 0 4 1640 28 BitArray::has_bits_in_common 0 1 542 440
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1338 5 clear 0 4 1640 15 BitArray::clear 0 1 543 253
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
////////////////////////////////////////////////////////////////////
34
inline void BitArray::clear(void);

1339 6 output 0 4 1640 16 BitArray::output 0 1 544 443
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
////////////////////////////////////////////////////////////////////
42
void BitArray::output(ostream &out) const;

1340 13 output_binary 0 4 1640 23 BitArray::output_binary 0 2 545 546 312
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
////////////////////////////////////////////////////////////////////
73
void BitArray::output_binary(ostream &out, int spaces_every = (4)) const;

1341 10 output_hex 0 4 1640 20 BitArray::output_hex 0 2 547 548 316
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
////////////////////////////////////////////////////////////////////
70
void BitArray::output_hex(ostream &out, int spaces_every = (4)) const;

1342 5 write 0 4 1640 15 BitArray::write 0 2 549 550 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
////////////////////////////////////////////////////////////////////
65
void BitArray::write(ostream &out, int indent_level = (0)) const;

1343 11 operator == 0 4 1640 21 BitArray::operator == 0 1 551 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator ==(BitArray const &other) const;

1344 11 operator != 0 4 1640 21 BitArray::operator != 0 1 552 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator !=(BitArray const &other) const;

1345 10 operator < 0 4 1640 20 BitArray::operator < 0 1 553 381
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool BitArray::operator <(BitArray const &other) const;

1346 10 compare_to 0 4 1640 20 BitArray::compare_to 0 1 554 487
////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
////////////////////////////////////////////////////////////////////
54
int BitArray::compare_to(BitArray const &other) const;

1347 10 operator & 0 4 1640 20 BitArray::operator & 0 1 555 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1348 10 operator | 0 4 1640 20 BitArray::operator | 0 1 556 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1349 10 operator ^ 0 4 1640 20 BitArray::operator ^ 0 1 557 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1350 10 operator ~ 0 68 1640 20 BitArray::operator ~ 0 1 558 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline BitArray BitArray::operator ~(void) const;

1351 11 operator << 0 4 1640 21 BitArray::operator << 0 1 559 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator <<(int shift) const;

1352 11 operator >> 0 4 1640 21 BitArray::operator >> 0 1 560 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator >>(int shift) const;

1353 11 operator &= 0 4 1640 21 BitArray::operator &= 0 1 561 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator &=(BitArray const &other);

1354 11 operator |= 0 4 1640 21 BitArray::operator |= 0 1 562 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator |=(BitArray const &other);

1355 11 operator ^= 0 4 1640 21 BitArray::operator ^= 0 1 563 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator ^=(BitArray const &other);

1356 12 operator <<= 0 4 1640 22 BitArray::operator <<= 0 1 564 399
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator <<=(int shift);

1357 12 operator >>= 0 4 1640 22 BitArray::operator >>= 0 1 565 449
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator >>=(int shift);

1358 14 get_class_type 0 4 1640 24 BitArray::get_class_type 0 1 566 0
49
static TypeHandle BitArray::get_class_type(void);

1359 12 ButtonHandle 0 4 1641 26 ButtonHandle::ButtonHandle 0 2 567 568 1659
// Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline ButtonHandle::ButtonHandle(void);
inline ButtonHandle::ButtonHandle(int index);

1360 8 get_name 0 4 1641 22 ButtonHandle::get_name 0 1 569 250
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
////////////////////////////////////////////////////////////////////
56
basic_string< char > ButtonHandle::get_name(void) const;

1361 20 has_ascii_equivalent 0 4 1641 34 ButtonHandle::has_ascii_equivalent 0 1 570 375
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
////////////////////////////////////////////////////////////////////
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1362 20 get_ascii_equivalent 0 4 1641 34 ButtonHandle::get_ascii_equivalent 0 1 571 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
////////////////////////////////////////////////////////////////////
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1363 9 get_alias 0 4 1641 23 ButtonHandle::get_alias 0 1 572 692
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
////////////////////////////////////////////////////////////////////
49
ButtonHandle ButtonHandle::get_alias(void) const;

1364 7 matches 0 4 1641 21 ButtonHandle::matches 0 1 573 532
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
////////////////////////////////////////////////////////////////////
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1365 9 get_index 0 4 1641 23 ButtonHandle::get_index 0 1 574 664
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
////////////////////////////////////////////////////////////////////
47
inline int ButtonHandle::get_index(void) const;

1366 6 output 0 4 1641 20 ButtonHandle::output 0 1 575 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void ButtonHandle::output(ostream &out) const;

1367 4 none 0 4 1641 18 ButtonHandle::none 0 1 576 321
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
////////////////////////////////////////////////////////////////////
52
static inline ButtonHandle ButtonHandle::none(void);

1368 14 get_class_type 0 4 1641 28 ButtonHandle::get_class_type 0 1 577 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1369 13 ~ButtonHandle 0 4 1641 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1370 10 get_button 0 4 1642 26 ButtonRegistry::get_button 0 1 578 396
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
////////////////////////////////////////////////////////////////////
74
ButtonHandle ButtonRegistry::get_button(basic_string< char > const &name);

1371 17 find_ascii_button 0 4 1642 33 ButtonRegistry::find_ascii_button 0 1 579 419
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1372 5 write 0 4 1642 21 ButtonRegistry::write 0 1 580 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void ButtonRegistry::write(ostream &out) const;

1373 3 ptr 0 4 1642 19 ButtonRegistry::ptr 0 1 581 367
// ptr() returns the pointer to the global ButtonRegistry object.

////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
////////////////////////////////////////////////////////////////////
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1374 15 ~ButtonRegistry 0 4 1642 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1375 6 output 0 4 1643 22 CallbackObject::output 0 1 582 230
////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CallbackObject::output(ostream &out) const;

1376 14 get_class_type 0 4 1643 30 CallbackObject::get_class_type 0 1 583 0
55
static TypeHandle CallbackObject::get_class_type(void);

1377 15 ~CallbackObject 0 4 1643 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1378 19 get_cache_ref_count 0 4 1645 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 584 290
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1379 9 cache_ref 0 4 1645 44 CachedTypedWritableReferenceCount::cache_ref 0 1 585 355
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1380 11 cache_unref 0 4 1645 46 CachedTypedWritableReferenceCount::cache_unref 0 1 586 479
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1381 24 test_ref_count_integrity 0 4 1645 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 587 359
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1382 14 get_class_type 0 4 1645 49 CachedTypedWritableReferenceCount::get_class_type 0 1 588 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1383 6 output 0 4 1646 20 CallbackData::output 0 1 589 228
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
54
virtual void CallbackData::output(ostream &out) const;

1384 6 upcall 0 4 1646 20 CallbackData::upcall 0 1 590 408
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
////////////////////////////////////////////////////////////////////
40
virtual void CallbackData::upcall(void);

1385 14 get_class_type 0 4 1646 28 CallbackData::get_class_type 0 1 591 0
53
static TypeHandle CallbackData::get_class_type(void);

1386 13 ~CallbackData 0 4 1646 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1387 7 TimeVal 0 4 1647 16 TimeVal::TimeVal 0 1 592 218
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline TimeVal::TimeVal(void);

1388 7 get_sec 0 4 1647 16 TimeVal::get_sec 0 1 593 215
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline unsigned long int TimeVal::get_sec(void) const;

1389 8 get_usec 0 4 1647 17 TimeVal::get_usec 0 1 594 216
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline unsigned long int TimeVal::get_usec(void) const;

1390 8 ~TimeVal 0 4 1647 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1391 11 ClockObject 0 4 1648 24 ClockObject::ClockObject 0 2 595 596 454
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1392 8 set_mode 0 4 1648 21 ClockObject::set_mode 0 1 597 2596
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
////////////////////////////////////////////////////////////////////
51
void ClockObject::set_mode(ClockObject::Mode mode);

1393 8 get_mode 0 4 1648 21 ClockObject::get_mode 0 1 598 293
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
////////////////////////////////////////////////////////////////////
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1394 14 get_frame_time 0 4 1648 27 ClockObject::get_frame_time 0 2 599 600 656
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
////////////////////////////////////////////////////////////////////
99
inline double ClockObject::get_frame_time(Thread *current_thread = ((get_current_thread()))) const;

1395 13 get_real_time 0 4 1648 26 ClockObject::get_real_time 0 1 601 769
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_real_time(void) const;

1396 13 get_long_time 0 4 1648 26 ClockObject::get_long_time 0 1 602 773
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_long_time(void) const;

1397 5 reset 0 4 1648 18 ClockObject::reset 0 1 603 299
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
////////////////////////////////////////////////////////////////////
37
inline void ClockObject::reset(void);

1398 13 set_real_time 0 4 1648 26 ClockObject::set_real_time 0 1 604 607
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
////////////////////////////////////////////////////////////////////
45
void ClockObject::set_real_time(double time);

1399 14 set_frame_time 0 4 1648 27 ClockObject::set_frame_time 0 2 605 606 477
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
////////////////////////////////////////////////////////////////////
97
void ClockObject::set_frame_time(double time, Thread *current_thread = ((get_current_thread())));

1400 15 set_frame_count 0 4 1648 28 ClockObject::set_frame_count 0 2 607 608 380
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
////////////////////////////////////////////////////////////////////
102
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ((get_current_thread())));

1401 15 get_frame_count 0 4 1648 28 ClockObject::get_frame_count 0 2 609 610 457
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
////////////////////////////////////////////////////////////////////
97
inline int ClockObject::get_frame_count(Thread *current_thread = ((get_current_thread()))) const;

1402 18 get_net_frame_rate 0 4 1648 31 ClockObject::get_net_frame_rate 0 2 611 612 523
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
103
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1403 6 get_dt 0 4 1648 19 ClockObject::get_dt 0 2 613 614 369
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
////////////////////////////////////////////////////////////////////
91
inline double ClockObject::get_dt(Thread *current_thread = ((get_current_thread()))) const;

1404 6 set_dt 0 4 1648 19 ClockObject::set_dt 0 1 615 575
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
////////////////////////////////////////////////////////////////////
36
void ClockObject::set_dt(double dt);

1405 14 set_frame_rate 0 4 1648 27 ClockObject::set_frame_rate 0 1 616 583
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
////////////////////////////////////////////////////////////////////
52
void ClockObject::set_frame_rate(double frame_rate);

1406 10 get_max_dt 0 4 1648 23 ClockObject::get_max_dt 0 1 617 333
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
////////////////////////////////////////////////////////////////////
50
inline double ClockObject::get_max_dt(void) const;

1407 10 set_max_dt 0 4 1648 23 ClockObject::set_max_dt 0 1 618 872
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
////////////////////////////////////////////////////////////////////
51
inline void ClockObject::set_max_dt(double max_dt);

1408 18 get_degrade_factor 0 4 1648 31 ClockObject::get_degrade_factor 0 1 619 544
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
58
inline double ClockObject::get_degrade_factor(void) const;

1409 18 set_degrade_factor 0 4 1648 31 ClockObject::set_degrade_factor 0 1 620 541
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1410 31 set_average_frame_rate_interval 0 4 1648 44 ClockObject::set_average_frame_rate_interval 0 1 621 729
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
////////////////////////////////////////////////////////////////////
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1411 31 get_average_frame_rate_interval 0 4 1648 44 ClockObject::get_average_frame_rate_interval 0 1 622 423
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
////////////////////////////////////////////////////////////////////
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1412 22 get_average_frame_rate 0 4 1648 35 ClockObject::get_average_frame_rate 0 2 623 624 500
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_average_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1413 22 get_max_frame_duration 0 4 1648 35 ClockObject::get_max_frame_duration 0 2 625 626 343
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_max_frame_duration(Thread *current_thread = ((get_current_thread()))) const;

1414 25 calc_frame_rate_deviation 0 4 1648 38 ClockObject::calc_frame_rate_deviation 0 2 627 628 915
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
////////////////////////////////////////////////////////////////////
103
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ((get_current_thread()))) const;

1415 4 tick 0 4 1648 17 ClockObject::tick 0 2 629 630 566
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
////////////////////////////////////////////////////////////////////
74
void ClockObject::tick(Thread *current_thread = ((get_current_thread())));

1416 15 sync_frame_time 0 4 1648 28 ClockObject::sync_frame_time 0 2 631 632 756
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
////////////////////////////////////////////////////////////////////
85
void ClockObject::sync_frame_time(Thread *current_thread = ((get_current_thread())));

1417 12 check_errors 0 4 1648 25 ClockObject::check_errors 0 1 633 609
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
////////////////////////////////////////////////////////////////////
62
inline bool ClockObject::check_errors(Thread *current_thread);

1418 16 get_global_clock 0 4 1648 29 ClockObject::get_global_clock 0 1 634 408
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
////////////////////////////////////////////////////////////////////
63
static inline ClockObject *ClockObject::get_global_clock(void);

1419 14 get_class_type 0 4 1648 27 ClockObject::get_class_type 0 1 635 0
52
static TypeHandle ClockObject::get_class_type(void);

1420 14 get_model_path 0 1 0 14 get_model_path 0 1 823 387
// Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false);
47
ConfigVariableSearchPath &get_model_path(void);

1421 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 824 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1422 9 cache_ref 0 4 1650 28 CopyOnWriteObject::cache_ref 0 1 636 279
////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
////////////////////////////////////////////////////////////////////
53
inline void CopyOnWriteObject::cache_ref(void) const;

1423 14 get_class_type 0 4 1650 33 CopyOnWriteObject::get_class_type 0 1 637 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1424 18 ~CopyOnWriteObject 0 4 1650 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1425 17 DatagramInputFile 0 4 1651 36 DatagramInputFile::DatagramInputFile 0 1 638 722
// Filename: datagramInputFile.I
// Created by:  drose (30Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline DatagramInputFile::DatagramInputFile(void);

1426 4 open 0 4 1651 23 DatagramInputFile::open 0 4 639 640 641 642 1158
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
////////////////////////////////////////////////////////////////////
197
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = ((())));

1427 10 get_stream 0 4 1651 29 DatagramInputFile::get_stream 0 1 643 279
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
////////////////////////////////////////////////////////////////////
52
inline istream &DatagramInputFile::get_stream(void);

1428 5 close 0 4 1651 24 DatagramInputFile::close 0 1 644 325
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
////////////////////////////////////////////////////////////////////
36
void DatagramInputFile::close(void);

1429 11 read_header 0 4 1651 30 DatagramInputFile::read_header 0 1 645 535
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
////////////////////////////////////////////////////////////////////
90
bool DatagramInputFile::read_header(basic_string< char > &header, unsigned int num_bytes);

1430 9 ascii_key 0 4 1653 25 KeyboardButton::ascii_key 0 2 646 647 864
////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////
162
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);
static ButtonHandle KeyboardButton::ascii_key(basic_string< char > const &ascii_equivalent);

1431 5 space 0 4 1653 21 KeyboardButton::space 0 1 648 0
48
static ButtonHandle KeyboardButton::space(void);

1432 9 backspace 0 4 1653 25 KeyboardButton::backspace 0 1 649 0
52
static ButtonHandle KeyboardButton::backspace(void);

1433 3 tab 0 4 1653 19 KeyboardButton::tab 0 1 650 0
46
static ButtonHandle KeyboardButton::tab(void);

1434 5 enter 0 4 1653 21 KeyboardButton::enter 0 1 651 0
48
static ButtonHandle KeyboardButton::enter(void);

1435 6 escape 0 4 1653 22 KeyboardButton::escape 0 1 652 0
49
static ButtonHandle KeyboardButton::escape(void);

1436 2 f1 0 4 1653 18 KeyboardButton::f1 0 1 653 0
45
static ButtonHandle KeyboardButton::f1(void);

1437 2 f2 0 4 1653 18 KeyboardButton::f2 0 1 654 0
45
static ButtonHandle KeyboardButton::f2(void);

1438 2 f3 0 4 1653 18 KeyboardButton::f3 0 1 655 0
45
static ButtonHandle KeyboardButton::f3(void);

1439 2 f4 0 4 1653 18 KeyboardButton::f4 0 1 656 0
45
static ButtonHandle KeyboardButton::f4(void);

1440 2 f5 0 4 1653 18 KeyboardButton::f5 0 1 657 0
45
static ButtonHandle KeyboardButton::f5(void);

1441 2 f6 0 4 1653 18 KeyboardButton::f6 0 1 658 0
45
static ButtonHandle KeyboardButton::f6(void);

1442 2 f7 0 4 1653 18 KeyboardButton::f7 0 1 659 0
45
static ButtonHandle KeyboardButton::f7(void);

1443 2 f8 0 4 1653 18 KeyboardButton::f8 0 1 660 0
45
static ButtonHandle KeyboardButton::f8(void);

1444 2 f9 0 4 1653 18 KeyboardButton::f9 0 1 661 0
45
static ButtonHandle KeyboardButton::f9(void);

1445 3 f10 0 4 1653 19 KeyboardButton::f10 0 1 662 0
46
static ButtonHandle KeyboardButton::f10(void);

1446 3 f11 0 4 1653 19 KeyboardButton::f11 0 1 663 0
46
static ButtonHandle KeyboardButton::f11(void);

1447 3 f12 0 4 1653 19 KeyboardButton::f12 0 1 664 0
46
static ButtonHandle KeyboardButton::f12(void);

1448 3 f13 0 4 1653 19 KeyboardButton::f13 0 1 665 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1449 3 f14 0 4 1653 19 KeyboardButton::f14 0 1 666 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f14(void);

1450 3 f15 0 4 1653 19 KeyboardButton::f15 0 1 667 0
46
static ButtonHandle KeyboardButton::f15(void);

1451 3 f16 0 4 1653 19 KeyboardButton::f16 0 1 668 0
46
static ButtonHandle KeyboardButton::f16(void);

1452 4 left 0 4 1653 20 KeyboardButton::left 0 1 669 0
47
static ButtonHandle KeyboardButton::left(void);

1453 5 right 0 4 1653 21 KeyboardButton::right 0 1 670 0
48
static ButtonHandle KeyboardButton::right(void);

1454 2 up 0 4 1653 18 KeyboardButton::up 0 1 671 0
45
static ButtonHandle KeyboardButton::up(void);

1455 4 down 0 4 1653 20 KeyboardButton::down 0 1 672 0
47
static ButtonHandle KeyboardButton::down(void);

1456 7 page_up 0 4 1653 23 KeyboardButton::page_up 0 1 673 0
50
static ButtonHandle KeyboardButton::page_up(void);

1457 9 page_down 0 4 1653 25 KeyboardButton::page_down 0 1 674 0
52
static ButtonHandle KeyboardButton::page_down(void);

1458 4 home 0 4 1653 20 KeyboardButton::home 0 1 675 0
47
static ButtonHandle KeyboardButton::home(void);

1459 3 end 0 4 1653 19 KeyboardButton::end 0 1 676 0
46
static ButtonHandle KeyboardButton::end(void);

1460 6 insert 0 4 1653 22 KeyboardButton::insert 0 1 677 0
49
static ButtonHandle KeyboardButton::insert(void);

1461 3 del 0 4 1653 19 KeyboardButton::del 0 1 678 0
46
static ButtonHandle KeyboardButton::del(void);

1462 4 help 0 4 1653 20 KeyboardButton::help 0 1 679 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1463 5 shift 0 4 1653 21 KeyboardButton::shift 0 1 680 0
48
static ButtonHandle KeyboardButton::shift(void);

1464 7 control 0 4 1653 23 KeyboardButton::control 0 1 681 0
50
static ButtonHandle KeyboardButton::control(void);

1465 3 alt 0 4 1653 19 KeyboardButton::alt 0 1 682 0
46
static ButtonHandle KeyboardButton::alt(void);

1466 4 meta 0 4 1653 20 KeyboardButton::meta 0 1 683 0
47
static ButtonHandle KeyboardButton::meta(void);

1467 9 caps_lock 0 4 1653 25 KeyboardButton::caps_lock 0 1 684 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1468 10 shift_lock 0 4 1653 26 KeyboardButton::shift_lock 0 1 685 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1469 8 num_lock 0 4 1653 24 KeyboardButton::num_lock 0 1 686 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1470 11 scroll_lock 0 4 1653 27 KeyboardButton::scroll_lock 0 1 687 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1471 12 print_screen 0 4 1653 28 KeyboardButton::print_screen 0 1 688 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1472 5 pause 0 4 1653 21 KeyboardButton::pause 0 1 689 0
48
static ButtonHandle KeyboardButton::pause(void);

1473 6 lshift 0 4 1653 22 KeyboardButton::lshift 0 1 690 0
49
static ButtonHandle KeyboardButton::lshift(void);

1474 6 rshift 0 4 1653 22 KeyboardButton::rshift 0 1 691 0
49
static ButtonHandle KeyboardButton::rshift(void);

1475 8 lcontrol 0 4 1653 24 KeyboardButton::lcontrol 0 1 692 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1476 8 rcontrol 0 4 1653 24 KeyboardButton::rcontrol 0 1 693 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1477 4 lalt 0 4 1653 20 KeyboardButton::lalt 0 1 694 0
47
static ButtonHandle KeyboardButton::lalt(void);

1478 4 ralt 0 4 1653 20 KeyboardButton::ralt 0 1 695 0
47
static ButtonHandle KeyboardButton::ralt(void);

1479 15 ~KeyboardButton 0 4 1653 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1480 10 LineStream 0 4 1654 22 LineStream::LineStream 0 1 696 705
// Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LineStream::LineStream(void);

1481 17 is_text_available 0 4 1654 29 LineStream::is_text_available 0 1 697 458
////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
////////////////////////////////////////////////////////////////////
54
inline bool LineStream::is_text_available(void) const;

1482 8 get_line 0 4 1654 20 LineStream::get_line 0 1 698 540
////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
////////////////////////////////////////////////////////////////////
55
inline basic_string< char > LineStream::get_line(void);

1483 11 has_newline 0 4 1654 23 LineStream::has_newline 0 1 699 460
////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
////////////////////////////////////////////////////////////////////
48
inline bool LineStream::has_newline(void) const;

1484 11 ~LineStream 0 4 1654 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1485 13 load_prc_file 0 1 0 13 load_prc_file 0 1 825 1916
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////
52
ConfigPage *load_prc_file(Filename const &filename);

1486 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 826 1362
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////
99
ConfigPage *load_prc_file_data(basic_string< char > const &name, basic_string< char > const &data);

1487 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 827 1142
////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////
39
bool unload_prc_file(ConfigPage *page);

1488 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 828 692
////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////
39
void hash_prc_variables(HashVal &hash);

1489 15 ModifierButtons 0 4 1656 32 ModifierButtons::ModifierButtons 0 2 700 701 461
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1490 16 ~ModifierButtons 0 4 1656 33 ModifierButtons::~ModifierButtons 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
ModifierButtons::~ModifierButtons(void);

1491 10 operator = 0 4 1656 27 ModifierButtons::operator = 0 1 702 731
// Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1492 11 operator == 0 4 1656 28 ModifierButtons::operator == 0 1 703 546
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1493 11 operator != 0 4 1656 28 ModifierButtons::operator != 0 1 704 235
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1494 10 operator < 0 4 1656 27 ModifierButtons::operator < 0 1 705 233
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1495 10 operator & 0 4 1656 27 ModifierButtons::operator & 0 1 706 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1496 10 operator | 0 4 1656 27 ModifierButtons::operator | 0 1 707 527
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1497 11 operator &= 0 4 1656 28 ModifierButtons::operator &= 0 1 708 338
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1498 11 operator |= 0 4 1656 28 ModifierButtons::operator |= 0 1 709 437
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1499 15 set_button_list 0 4 1656 32 ModifierButtons::set_button_list 0 1 710 698
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
////////////////////////////////////////////////////////////////////
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1500 7 matches 0 4 1656 24 ModifierButtons::matches 0 1 711 504
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
////////////////////////////////////////////////////////////////////
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1501 10 add_button 0 4 1656 27 ModifierButtons::add_button 0 1 712 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
////////////////////////////////////////////////////////////////////
54
bool ModifierButtons::add_button(ButtonHandle button);

1502 10 has_button 0 4 1656 27 ModifierButtons::has_button 0 1 713 339
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1503 13 remove_button 0 4 1656 30 ModifierButtons::remove_button 0 1 714 623
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
////////////////////////////////////////////////////////////////////
57
bool ModifierButtons::remove_button(ButtonHandle button);

1504 15 get_num_buttons 0 4 1656 32 ModifierButtons::get_num_buttons 0 1 715 394
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
////////////////////////////////////////////////////////////////////
56
inline int ModifierButtons::get_num_buttons(void) const;

1505 10 get_button 0 4 1656 27 ModifierButtons::get_button 0 1 716 446
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
////////////////////////////////////////////////////////////////////
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1506 11 button_down 0 4 1656 28 ModifierButtons::button_down 0 1 717 597
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
55
bool ModifierButtons::button_down(ButtonHandle button);

1507 9 button_up 0 4 1656 26 ModifierButtons::button_up 0 1 718 596
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
53
bool ModifierButtons::button_up(ButtonHandle button);

1508 14 all_buttons_up 0 4 1656 31 ModifierButtons::all_buttons_up 0 1 719 303
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
////////////////////////////////////////////////////////////////////
50
inline void ModifierButtons::all_buttons_up(void);

1509 7 is_down 0 4 1656 24 ModifierButtons::is_down 0 2 720 721 735
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
////////////////////////////////////////////////////////////////////
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1510 11 is_any_down 0 4 1656 28 ModifierButtons::is_any_down 0 1 722 340
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
////////////////////////////////////////////////////////////////////
53
inline bool ModifierButtons::is_any_down(void) const;

1511 10 get_prefix 0 4 1656 27 ModifierButtons::get_prefix 0 1 723 397
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
////////////////////////////////////////////////////////////////////
61
basic_string< char > ModifierButtons::get_prefix(void) const;

1512 6 output 0 4 1656 23 ModifierButtons::output 0 1 724 298
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
////////////////////////////////////////////////////////////////////
49
void ModifierButtons::output(ostream &out) const;

1513 5 write 0 4 1656 22 ModifierButtons::write 0 1 725 365
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
////////////////////////////////////////////////////////////////////
48
void ModifierButtons::write(ostream &out) const;

1514 6 button 0 4 1657 19 MouseButton::button 0 1 726 424
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
////////////////////////////////////////////////////////////////////
59
static ButtonHandle MouseButton::button(int button_number);

1515 3 one 0 4 1657 16 MouseButton::one 0 1 727 302
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::one(void);

1516 3 two 0 4 1657 16 MouseButton::two 0 1 728 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::two(void);

1517 5 three 0 4 1657 18 MouseButton::three 0 1 729 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
////////////////////////////////////////////////////////////////////
45
static ButtonHandle MouseButton::three(void);

1518 4 four 0 4 1657 17 MouseButton::four 0 1 730 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::four(void);

1519 4 five 0 4 1657 17 MouseButton::five 0 1 731 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::five(void);

1520 8 wheel_up 0 4 1657 21 MouseButton::wheel_up 0 1 732 327
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
////////////////////////////////////////////////////////////////////
48
static ButtonHandle MouseButton::wheel_up(void);

1521 10 wheel_down 0 4 1657 23 MouseButton::wheel_down 0 1 733 331
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_down(void);

1522 10 wheel_left 0 4 1657 23 MouseButton::wheel_left 0 1 734 396
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_left(void);

1523 11 wheel_right 0 4 1657 24 MouseButton::wheel_right 0 1 735 398
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
51
static ButtonHandle MouseButton::wheel_right(void);

1524 15 is_mouse_button 0 4 1657 28 MouseButton::is_mouse_button 0 1 736 353
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
////////////////////////////////////////////////////////////////////
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1525 12 ~MouseButton 0 4 1657 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1526 9 MouseData 0 4 1658 20 MouseData::MouseData 0 2 737 738 934
// Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1527 10 operator = 0 4 1658 21 MouseData::operator = 0 1 739 234
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void MouseData::operator =(MouseData const &copy);

1528 5 get_x 0 4 1658 16 MouseData::get_x 0 1 740 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline int MouseData::get_x(void) const;

1529 5 get_y 0 4 1658 16 MouseData::get_y 0 1 741 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline int MouseData::get_y(void) const;

1530 13 get_in_window 0 4 1658 24 MouseData::get_in_window 0 1 742 223
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool MouseData::get_in_window(void) const;

1531 6 output 0 4 1658 17 MouseData::output 0 1 743 216
////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void MouseData::output(ostream &out) const;

1532 10 ~MouseData 0 4 1658 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1533 18 get_node_ref_count 0 4 1659 44 NodeCachedReferenceCount::get_node_ref_count 0 1 744 280
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1534 8 node_ref 0 4 1659 34 NodeCachedReferenceCount::node_ref 0 1 745 662
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1535 10 node_unref 0 4 1659 36 NodeCachedReferenceCount::node_unref 0 1 746 468
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1536 24 test_ref_count_integrity 0 4 1659 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 747 350
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1537 19 get_referenced_bits 0 4 1659 45 NodeCachedReferenceCount::get_referenced_bits 0 1 748 600
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
////////////////////////////////////////////////////////////////////
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1538 14 get_class_type 0 4 1659 40 NodeCachedReferenceCount::get_class_type 0 1 749 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1539 11 SparseArray 0 4 1661 24 SparseArray::SparseArray 0 3 750 751 752 1181
// Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
144
inline SparseArray::SparseArray(void);
inline SparseArray::SparseArray(SparseArray const &copy);
SparseArray::SparseArray(BitArray const &from);

1540 10 operator = 0 4 1661 23 SparseArray::operator = 0 1 753 236
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline SparseArray &SparseArray::operator =(SparseArray const &copy);

1541 6 all_on 0 4 1661 19 SparseArray::all_on 0 1 754 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
52
static inline SparseArray SparseArray::all_on(void);

1542 7 all_off 0 4 1661 20 SparseArray::all_off 0 1 755 290
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
////////////////////////////////////////////////////////////////////
53
static inline SparseArray SparseArray::all_off(void);

1543 8 lower_on 0 4 1661 21 SparseArray::lower_on 0 1 756 301
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1544 3 bit 0 4 1661 16 SparseArray::bit 0 1 757 295
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
54
static inline SparseArray SparseArray::bit(int index);

1545 5 range 0 4 1661 18 SparseArray::range 0 1 758 329
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1546 12 ~SparseArray 0 4 1661 25 SparseArray::~SparseArray 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline SparseArray::~SparseArray(void);

1547 16 has_max_num_bits 0 4 1661 29 SparseArray::has_max_num_bits 0 1 759 723
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
55
static inline bool SparseArray::has_max_num_bits(void);

1548 16 get_max_num_bits 0 4 1661 29 SparseArray::get_max_num_bits 0 1 760 758
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
54
static inline int SparseArray::get_max_num_bits(void);

1549 12 get_num_bits 0 4 1661 25 SparseArray::get_num_bits 0 1 761 607
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
49
inline int SparseArray::get_num_bits(void) const;

1550 7 get_bit 0 4 1661 20 SparseArray::get_bit 0 1 762 445
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
50
inline bool SparseArray::get_bit(int index) const;

1551 7 set_bit 0 4 1661 20 SparseArray::set_bit 0 1 763 320
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
44
inline void SparseArray::set_bit(int index);

1552 9 clear_bit 0 4 1661 22 SparseArray::clear_bit 0 1 764 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
46
inline void SparseArray::clear_bit(int index);

1553 10 set_bit_to 0 4 1661 23 SparseArray::set_bit_to 0 1 765 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
59
inline void SparseArray::set_bit_to(int index, bool value);

1554 16 get_highest_bits 0 4 1661 29 SparseArray::get_highest_bits 0 1 766 367
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
54
inline bool SparseArray::get_highest_bits(void) const;

1555 7 is_zero 0 4 1661 20 SparseArray::is_zero 0 1 767 297
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool SparseArray::is_zero(void) const;

1556 9 is_all_on 0 4 1661 22 SparseArray::is_all_on 0 1 768 298
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool SparseArray::is_all_on(void) const;

1557 10 has_any_of 0 4 1661 23 SparseArray::has_any_of 0 1 769 311
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1558 10 has_all_of 0 4 1661 23 SparseArray::has_all_of 0 1 770 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1559 9 set_range 0 4 1661 22 SparseArray::set_range 0 1 771 258
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
58
inline void SparseArray::set_range(int low_bit, int size);

1560 11 clear_range 0 4 1661 24 SparseArray::clear_range 0 1 772 261
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
60
inline void SparseArray::clear_range(int low_bit, int size);

1561 12 set_range_to 0 4 1661 25 SparseArray::set_range_to 0 1 773 278
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1562 15 get_num_on_bits 0 4 1661 28 SparseArray::get_num_on_bits 0 1 774 375
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
45
int SparseArray::get_num_on_bits(void) const;

1563 16 get_num_off_bits 0 4 1661 29 SparseArray::get_num_off_bits 0 1 775 376
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
46
int SparseArray::get_num_off_bits(void) const;

1564 17 get_lowest_on_bit 0 4 1661 30 SparseArray::get_lowest_on_bit 0 1 776 395
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
47
int SparseArray::get_lowest_on_bit(void) const;

1565 18 get_lowest_off_bit 0 4 1661 31 SparseArray::get_lowest_off_bit 0 1 777 396
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_lowest_off_bit(void) const;

1566 18 get_highest_on_bit 0 4 1661 31 SparseArray::get_highest_on_bit 0 1 778 393
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_highest_on_bit(void) const;

1567 19 get_highest_off_bit 0 4 1661 32 SparseArray::get_highest_off_bit 0 1 779 394
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
49
int SparseArray::get_highest_off_bit(void) const;

1568 29 get_next_higher_different_bit 0 4 1661 42 SparseArray::get_next_higher_different_bit 0 1 780 594
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1569 15 invert_in_place 0 4 1661 28 SparseArray::invert_in_place 0 1 781 324
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
47
inline void SparseArray::invert_in_place(void);

1570 18 has_bits_in_common 0 4 1661 31 SparseArray::has_bits_in_common 0 1 782 446
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1571 5 clear 0 4 1661 18 SparseArray::clear 0 1 783 259
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
////////////////////////////////////////////////////////////////////
37
inline void SparseArray::clear(void);

1572 6 output 0 4 1661 19 SparseArray::output 0 1 784 219
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SparseArray::output(ostream &out) const;

1573 11 operator == 0 4 1661 24 SparseArray::operator == 0 1 785 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1574 11 operator != 0 4 1661 24 SparseArray::operator != 0 1 786 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1575 10 operator < 0 4 1661 23 SparseArray::operator < 0 1 787 387
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1576 10 compare_to 0 4 1661 23 SparseArray::compare_to 0 1 788 513
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
////////////////////////////////////////////////////////////////////
60
int SparseArray::compare_to(SparseArray const &other) const;

1577 10 operator & 0 4 1661 23 SparseArray::operator & 0 1 789 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1578 10 operator | 0 4 1661 23 SparseArray::operator | 0 1 790 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1579 10 operator ^ 0 4 1661 23 SparseArray::operator ^ 0 1 791 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1580 10 operator ~ 0 68 1661 23 SparseArray::operator ~ 0 1 792 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline SparseArray SparseArray::operator ~(void) const;

1581 11 operator << 0 4 1661 24 SparseArray::operator << 0 1 793 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator <<(int shift) const;

1582 11 operator >> 0 4 1661 24 SparseArray::operator >> 0 1 794 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator >>(int shift) const;

1583 11 operator &= 0 4 1661 24 SparseArray::operator &= 0 1 795 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator &=(SparseArray const &other);

1584 11 operator |= 0 4 1661 24 SparseArray::operator |= 0 1 796 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator |=(SparseArray const &other);

1585 11 operator ^= 0 4 1661 24 SparseArray::operator ^= 0 1 797 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator ^=(SparseArray const &other);

1586 12 operator <<= 0 4 1661 25 SparseArray::operator <<= 0 1 798 406
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator <<=(int shift);

1587 12 operator >>= 0 4 1661 25 SparseArray::operator >>= 0 1 799 412
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator >>=(int shift);

1588 10 is_inverse 0 4 1661 23 SparseArray::is_inverse 0 1 800 614
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
////////////////////////////////////////////////////////////////////
48
inline bool SparseArray::is_inverse(void) const;

1589 17 get_num_subranges 0 4 1661 30 SparseArray::get_num_subranges 0 1 801 515
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_num_subranges(void) const;

1590 18 get_subrange_begin 0 4 1661 31 SparseArray::get_subrange_begin 0 1 802 345
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
56
inline int SparseArray::get_subrange_begin(int n) const;

1591 16 get_subrange_end 0 4 1661 29 SparseArray::get_subrange_end 0 1 803 353
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_subrange_end(int n) const;

1592 14 get_class_type 0 4 1661 27 SparseArray::get_class_type 0 1 804 0
52
static TypeHandle SparseArray::get_class_type(void);

1593 20 PythonCallbackObject 0 4 1662 42 PythonCallbackObject::PythonCallbackObject 0 2 805 806 232
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
PythonCallbackObject::PythonCallbackObject(PyObject *function = (Py_None));

1594 12 operator new 0 4 1662 34 PythonCallbackObject::operator new 0 1 807 0
146
inline void *PythonCallbackObject::operator new(unsigned int size);
inline void *PythonCallbackObject::operator new(unsigned int size, void *ptr);

1595 15 operator delete 0 4 1662 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1596 12 validate_ptr 0 4 1662 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1597 12 set_function 0 4 1662 34 PythonCallbackObject::set_function 0 1 808 379
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
////////////////////////////////////////////////////////////////////
60
void PythonCallbackObject::set_function(PyObject *function);

1598 12 get_function 0 4 1662 34 PythonCallbackObject::get_function 0 1 809 287
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
////////////////////////////////////////////////////////////////////
51
PyObject *PythonCallbackObject::get_function(void);

1599 14 get_class_type 0 4 1662 36 PythonCallbackObject::get_class_type 0 1 810 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1600 14 get_class_type 0 4 1663 36 WritableConfigurable::get_class_type 0 1 811 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1601 21 ~WritableConfigurable 0 4 1663 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1602 17 UniqueIdAllocator 0 4 1664 36 UniqueIdAllocator::UniqueIdAllocator 0 3 812 813 814 275
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
////////////////////////////////////////////////////////////////////
86
UniqueIdAllocator::UniqueIdAllocator(unsigned int min = (0), unsigned int max = (20));

1603 18 ~UniqueIdAllocator 0 4 1664 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1604 8 allocate 0 4 1664 27 UniqueIdAllocator::allocate 0 1 815 381
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
////////////////////////////////////////////////////////////////////
47
unsigned int UniqueIdAllocator::allocate(void);

1605 18 initial_reserve_id 0 4 1664 37 UniqueIdAllocator::initial_reserve_id 0 1 816 893
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
////////////////////////////////////////////////////////////////////
60
void UniqueIdAllocator::initial_reserve_id(unsigned int id);

1606 4 free 0 4 1664 23 UniqueIdAllocator::free 0 1 817 338
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
////////////////////////////////////////////////////////////////////
49
void UniqueIdAllocator::free(unsigned int index);

1607 13 fraction_used 0 4 1664 32 UniqueIdAllocator::fraction_used 0 1 818 350
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
////////////////////////////////////////////////////////////////////
51
float UniqueIdAllocator::fraction_used(void) const;

1608 6 output 0 4 1664 25 UniqueIdAllocator::output 0 1 819 256
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
51
void UniqueIdAllocator::output(ostream &out) const;

1609 5 write 0 4 1664 24 UniqueIdAllocator::write 0 1 820 255
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
50
void UniqueIdAllocator::write(ostream &out) const;

828
1 14 Dtool_xqRvX63M 0 7 8 1667 840 14 Dtool_xqRvX63M 0 1 4 copy 1 1665  
2 14 Dtool_xqRv1HLX 0 7 8 1667 840 14 Dtool_xqRv1HLX 0 1 4 copy 1 1668  
3 14 Dtool_xqRvsFvc 0 6 9 1670 0 14 Dtool_xqRvsFvc 0 1 4 this 3 1665  
4 14 Dtool_xqRv_r_f 0 6 10 1671 0 14 Dtool_xqRv_r_f 0 2 4 this 3 1665  1 n 1 1670  
5 14 Dtool_xqRvyg6O 0 6 11 1671 0 14 Dtool_xqRvyg6O 0 2 4 this 3 1665  1 n 1 1670  
6 14 Dtool_xqRvFXK9 0 6 12 1672 0 14 Dtool_xqRvFXK9 0 1 4 this 3 1665  
7 14 Dtool_xqRvgZO_ 0 6 13 1672 0 14 Dtool_xqRvgZO_ 0 3 4 this 3 1665  1 n 1 1670  5 count 1 1670  
8 14 Dtool_xqRvyoll 0 6 14 1673 0 14 Dtool_xqRvyoll 0 1 4 this 3 1665  
9 14 Dtool_xqRvAXXF 0 6 15 1673 0 14 Dtool_xqRvAXXF 0 1 4 this 3 1665  
10 14 Dtool_xqRvwEyO 0 4 5 1675 0 14 Dtool_xqRvwEyO 0 1 4 this 3 1674  
11 14 Dtool_xqRvh3jh 0 4 6 1675 0 14 Dtool_xqRvh3jh 0 2 4 this 3 1676  3 out 1 1678  
12 14 Dtool_xqRv8B9l 0 7 18 1679 848 14 Dtool_xqRv8B9l 0 0 
13 14 Dtool_xqRvsm_Z 0 7 18 1679 848 14 Dtool_xqRvsm_Z 0 1 4 copy 1 1680  
14 14 Dtool_xqRvkq1x 0 6 19 1679 0 14 Dtool_xqRvkq1x 0 2 4 this 3 1679  4 copy 1 1680  
15 14 Dtool_xqRvVHPu 0 7 20 1679 848 14 Dtool_xqRvVHPu 0 0 
16 14 Dtool_xqRvkrT6 0 7 21 1679 848 14 Dtool_xqRvkrT6 0 0 
17 14 Dtool_xqRvPteB 0 7 22 1679 848 14 Dtool_xqRvPteB 0 1 7 on_bits 1 1673  
18 14 Dtool_xqRvEES9 0 7 23 1679 848 14 Dtool_xqRvEES9 0 1 5 index 1 1673  
19 14 Dtool_xqRv2jZV 0 7 24 1679 848 14 Dtool_xqRv2jZV 0 2 7 low_bit 1 1673  4 size 1 1673  
20 14 Dtool_xqRvrw_P 0 6 26 1682 0 14 Dtool_xqRvrw_P 0 0 
21 14 Dtool_xqRvkA7l 0 6 27 1673 0 14 Dtool_xqRvkA7l 0 0 
22 14 Dtool_xqRvn_6E 0 6 28 1673 0 14 Dtool_xqRvn_6E 0 0 
23 14 Dtool_xqRvNI0e 0 6 29 1682 0 14 Dtool_xqRvNI0e 0 2 4 this 3 1680  5 index 1 1673  
24 14 Dtool_xqRvbA_k 0 4 30 1675 0 14 Dtool_xqRvbA_k 0 2 4 this 3 1679  5 index 1 1673  
25 14 Dtool_xqRvTA34 0 4 31 1675 0 14 Dtool_xqRvTA34 0 2 4 this 3 1679  5 index 1 1673  
26 14 Dtool_xqRvN6Cn 0 4 32 1675 0 14 Dtool_xqRvN6Cn 0 3 4 this 3 1679  5 index 1 1673  5 value 1 1682  
27 14 Dtool_xqRvADmV 0 6 33 1682 0 14 Dtool_xqRvADmV 0 1 4 this 3 1680  
28 14 Dtool_xqRv3P9m 0 6 34 1682 0 14 Dtool_xqRv3P9m 0 1 4 this 3 1680  
29 14 Dtool_xqRvxFld 0 6 35 1670 0 14 Dtool_xqRvxFld 0 3 4 this 3 1680  7 low_bit 1 1673  4 size 1 1673  
30 14 Dtool_xqRvZDj3 0 4 36 1675 0 14 Dtool_xqRvZDj3 0 4 4 this 3 1679  5 value 1 1670  7 low_bit 1 1673  4 size 1 1673  
31 14 Dtool_xqRvyIIs 0 6 37 1682 0 14 Dtool_xqRvyIIs 0 3 4 this 3 1680  7 low_bit 1 1673  4 size 1 1673  
32 14 Dtool_xqRvOfMc 0 6 38 1682 0 14 Dtool_xqRvOfMc 0 3 4 this 3 1680  7 low_bit 1 1673  4 size 1 1673  
33 14 Dtool_xqRvPdea 0 4 39 1675 0 14 Dtool_xqRvPdea 0 3 4 this 3 1679  7 low_bit 1 1673  4 size 1 1673  
34 14 Dtool_xqRveZzC 0 4 40 1675 0 14 Dtool_xqRveZzC 0 3 4 this 3 1679  7 low_bit 1 1673  4 size 1 1673  
35 14 Dtool_xqRvwG5f 0 4 41 1675 0 14 Dtool_xqRvwG5f 0 4 4 this 3 1679  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
36 14 Dtool_xqRvImLX 0 6 42 1673 0 14 Dtool_xqRvImLX 0 1 4 this 3 1680  
37 14 Dtool_xqRvL6nV 0 6 43 1673 0 14 Dtool_xqRvL6nV 0 1 4 this 3 1680  
38 14 Dtool_xqRvEGfL 0 6 44 1673 0 14 Dtool_xqRvEGfL 0 1 4 this 3 1680  
39 14 Dtool_xqRvVvnV 0 6 45 1673 0 14 Dtool_xqRvVvnV 0 1 4 this 3 1680  
40 14 Dtool_xqRvNZDs 0 6 46 1673 0 14 Dtool_xqRvNZDs 0 1 4 this 3 1680  
41 14 Dtool_xqRv1q3w 0 6 47 1673 0 14 Dtool_xqRv1q3w 0 1 4 this 3 1680  
42 14 Dtool_xqRvvM6M 0 6 48 1673 0 14 Dtool_xqRvvM6M 0 2 4 this 3 1680  7 low_bit 1 1673  
43 14 Dtool_xqRvW1u9 0 4 49 1675 0 14 Dtool_xqRvW1u9 0 1 4 this 3 1679  
44 14 Dtool_xqRvfWTS 0 6 50 1682 0 14 Dtool_xqRvfWTS 0 2 4 this 3 1680  5 other 1 1680  
45 14 Dtool_xqRvsPqY 0 4 51 1675 0 14 Dtool_xqRvsPqY 0 1 4 this 3 1679  
46 14 Dtool_xqRvtsUG 0 4 52 1675 0 14 Dtool_xqRvtsUG 0 2 4 this 3 1680  3 out 1 1678  
47 14 Dtool_xqRvi8A6 0 4 53 1675 0 14 Dtool_xqRvi8A6 0 3 4 this 3 1680  3 out 1 1678  12 spaces_every 1 1673  
48 14 Dtool_xqRvida8 0 4 53 1675 0 14 Dtool_xqRvida8 0 2 4 this 3 1680  3 out 1 1678  
49 14 Dtool_xqRvGkzd 0 4 54 1675 0 14 Dtool_xqRvGkzd 0 3 4 this 3 1680  3 out 1 1678  12 spaces_every 1 1673  
50 14 Dtool_xqRvRW_f 0 4 54 1675 0 14 Dtool_xqRvRW_f 0 2 4 this 3 1680  3 out 1 1678  
51 14 Dtool_xqRvatxG 0 4 55 1675 0 14 Dtool_xqRvatxG 0 3 4 this 3 1680  3 out 1 1678  12 indent_level 1 1673  
52 14 Dtool_xqRvL_2n 0 4 55 1675 0 14 Dtool_xqRvL_2n 0 2 4 this 3 1680  3 out 1 1678  
53 14 Dtool_xqRvRqjr 0 6 56 1682 0 14 Dtool_xqRvRqjr 0 2 4 this 3 1680  5 other 1 1680  
54 14 Dtool_xqRvFbfL 0 6 57 1682 0 14 Dtool_xqRvFbfL 0 2 4 this 3 1680  5 other 1 1680  
55 14 Dtool_xqRvdImb 0 6 58 1682 0 14 Dtool_xqRvdImb 0 2 4 this 3 1680  5 other 1 1680  
56 14 Dtool_xqRvw6Ce 0 6 59 1673 0 14 Dtool_xqRvw6Ce 0 2 4 this 3 1680  5 other 1 1680  
57 14 Dtool_xqRvjYjL 0 7 60 1679 848 14 Dtool_xqRvjYjL 0 2 4 this 3 1680  5 other 1 1680  
58 14 Dtool_xqRvF7xb 0 7 61 1679 848 14 Dtool_xqRvF7xb 0 2 4 this 3 1680  5 other 1 1680  
59 14 Dtool_xqRvS1rL 0 7 62 1679 848 14 Dtool_xqRvS1rL 0 2 4 this 3 1680  5 other 1 1680  
60 14 Dtool_xqRvlqQk 0 7 63 1679 848 14 Dtool_xqRvlqQk 0 1 4 this 3 1680  
61 14 Dtool_xqRvfKAq 0 7 64 1679 848 14 Dtool_xqRvfKAq 0 2 4 this 3 1680  5 shift 1 1673  
62 14 Dtool_xqRvAlKa 0 7 65 1679 848 14 Dtool_xqRvAlKa 0 2 4 this 3 1680  5 shift 1 1673  
63 14 Dtool_xqRvva1p 0 6 66 1679 0 14 Dtool_xqRvva1p 0 2 4 this 3 1679  5 other 1 1680  
64 14 Dtool_xqRvUoD6 0 6 67 1679 0 14 Dtool_xqRvUoD6 0 2 4 this 3 1679  5 other 1 1680  
65 14 Dtool_xqRve0_p 0 6 68 1679 0 14 Dtool_xqRve0_p 0 2 4 this 3 1679  5 other 1 1680  
66 14 Dtool_xqRv1MmK 0 6 69 1679 0 14 Dtool_xqRv1MmK 0 2 4 this 3 1679  5 shift 1 1673  
67 14 Dtool_xqRvsqx6 0 6 70 1679 0 14 Dtool_xqRvsqx6 0 2 4 this 3 1679  5 shift 1 1673  
68 14 Dtool_xqRvIpt7 0 7 71 1684 0 14 Dtool_xqRvIpt7 0 0 
69 14 Dtool_xqRvQ4t2 0 7 73 1685 902 14 Dtool_xqRvQ4t2 0 0 
70 14 Dtool_xqRvBKTk 0 7 73 1685 902 14 Dtool_xqRvBKTk 0 1 4 copy 1 1686  
71 14 Dtool_xqRvZK2I 0 6 74 1685 0 14 Dtool_xqRvZK2I 0 2 4 this 3 1685  4 copy 1 1686  
72 14 Dtool_xqRvtdgp 0 7 75 1685 902 14 Dtool_xqRvtdgp 0 0 
73 14 Dtool_xqRvRxDj 0 7 76 1685 902 14 Dtool_xqRvRxDj 0 0 
74 14 Dtool_xqRvnApV 0 7 77 1685 902 14 Dtool_xqRvnApV 0 1 7 on_bits 1 1673  
75 14 Dtool_xqRvl_fN 0 7 78 1685 902 14 Dtool_xqRvl_fN 0 1 5 index 1 1673  
76 14 Dtool_xqRvhu4K 0 7 79 1685 902 14 Dtool_xqRvhu4K 0 2 7 low_bit 1 1673  4 size 1 1673  
77 14 Dtool_xqRvV293 0 6 81 1682 0 14 Dtool_xqRvV293 0 0 
78 14 Dtool_xqRvfhwX 0 6 82 1673 0 14 Dtool_xqRvfhwX 0 0 
79 14 Dtool_xqRvc9oV 0 6 83 1673 0 14 Dtool_xqRvc9oV 0 0 
80 14 Dtool_xqRvQkKR 0 6 84 1682 0 14 Dtool_xqRvQkKR 0 2 4 this 3 1686  5 index 1 1673  
81 14 Dtool_xqRvWhDJ 0 4 85 1675 0 14 Dtool_xqRvWhDJ 0 2 4 this 3 1685  5 index 1 1673  
82 14 Dtool_xqRvapyc 0 4 86 1675 0 14 Dtool_xqRvapyc 0 2 4 this 3 1685  5 index 1 1673  
83 14 Dtool_xqRvtnCt 0 4 87 1675 0 14 Dtool_xqRvtnCt 0 3 4 this 3 1685  5 index 1 1673  5 value 1 1682  
84 14 Dtool_xqRvNDBe 0 6 88 1682 0 14 Dtool_xqRvNDBe 0 1 4 this 3 1686  
85 14 Dtool_xqRvSm0S 0 6 89 1682 0 14 Dtool_xqRvSm0S 0 1 4 this 3 1686  
86 14 Dtool_xqRvk2VC 0 6 90 1670 0 14 Dtool_xqRvk2VC 0 3 4 this 3 1686  7 low_bit 1 1673  4 size 1 1673  
87 14 Dtool_xqRvQI03 0 4 91 1675 0 14 Dtool_xqRvQI03 0 4 4 this 3 1685  5 value 1 1670  7 low_bit 1 1673  4 size 1 1673  
88 14 Dtool_xqRvvZI1 0 6 92 1682 0 14 Dtool_xqRvvZI1 0 3 4 this 3 1686  7 low_bit 1 1673  4 size 1 1673  
89 14 Dtool_xqRv4rQO 0 6 93 1682 0 14 Dtool_xqRv4rQO 0 3 4 this 3 1686  7 low_bit 1 1673  4 size 1 1673  
90 14 Dtool_xqRvce2Y 0 4 94 1675 0 14 Dtool_xqRvce2Y 0 3 4 this 3 1685  7 low_bit 1 1673  4 size 1 1673  
91 14 Dtool_xqRvouj3 0 4 95 1675 0 14 Dtool_xqRvouj3 0 3 4 this 3 1685  7 low_bit 1 1673  4 size 1 1673  
92 14 Dtool_xqRvtybc 0 4 96 1675 0 14 Dtool_xqRvtybc 0 4 4 this 3 1685  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
93 14 Dtool_xqRvjXq9 0 6 97 1673 0 14 Dtool_xqRvjXq9 0 1 4 this 3 1686  
94 14 Dtool_xqRv14ol 0 6 98 1673 0 14 Dtool_xqRv14ol 0 1 4 this 3 1686  
95 14 Dtool_xqRvYTi7 0 6 99 1673 0 14 Dtool_xqRvYTi7 0 1 4 this 3 1686  
96 14 Dtool_xqRvu2rJ 0 6 100 1673 0 14 Dtool_xqRvu2rJ 0 1 4 this 3 1686  
97 14 Dtool_xqRvMqdg 0 6 101 1673 0 14 Dtool_xqRvMqdg 0 1 4 this 3 1686  
98 14 Dtool_xqRvTBnk 0 6 102 1673 0 14 Dtool_xqRvTBnk 0 1 4 this 3 1686  
99 14 Dtool_xqRvpm5E 0 6 103 1673 0 14 Dtool_xqRvpm5E 0 2 4 this 3 1686  7 low_bit 1 1673  
100 14 Dtool_xqRvBa0l 0 4 104 1675 0 14 Dtool_xqRvBa0l 0 1 4 this 3 1685  
101 14 Dtool_xqRvXKrM 0 6 105 1682 0 14 Dtool_xqRvXKrM 0 2 4 this 3 1686  5 other 1 1686  
102 14 Dtool_xqRv4mX_ 0 4 106 1675 0 14 Dtool_xqRv4mX_ 0 1 4 this 3 1685  
103 14 Dtool_xqRvoXIR 0 4 107 1675 0 14 Dtool_xqRvoXIR 0 2 4 this 3 1686  3 out 1 1678  
104 14 Dtool_xqRvb9kN 0 4 108 1675 0 14 Dtool_xqRvb9kN 0 3 4 this 3 1686  3 out 1 1678  12 spaces_every 1 1673  
105 14 Dtool_xqRvjx6v 0 4 108 1675 0 14 Dtool_xqRvjx6v 0 2 4 this 3 1686  3 out 1 1678  
106 14 Dtool_xqRv52R1 0 4 109 1675 0 14 Dtool_xqRv52R1 0 3 4 this 3 1686  3 out 1 1678  12 spaces_every 1 1673  
107 14 Dtool_xqRvmM4l 0 4 109 1675 0 14 Dtool_xqRvmM4l 0 2 4 this 3 1686  3 out 1 1678  
108 14 Dtool_xqRvKmrX 0 4 110 1675 0 14 Dtool_xqRvKmrX 0 3 4 this 3 1686  3 out 1 1678  12 indent_level 1 1673  
109 14 Dtool_xqRvJx_v 0 4 110 1675 0 14 Dtool_xqRvJx_v 0 2 4 this 3 1686  3 out 1 1678  
110 14 Dtool_xqRvDBQ_ 0 6 111 1682 0 14 Dtool_xqRvDBQ_ 0 2 4 this 3 1686  5 other 1 1686  
111 14 Dtool_xqRv7Bfc 0 6 112 1682 0 14 Dtool_xqRv7Bfc 0 2 4 this 3 1686  5 other 1 1686  
112 14 Dtool_xqRvPse8 0 6 113 1682 0 14 Dtool_xqRvPse8 0 2 4 this 3 1686  5 other 1 1686  
113 14 Dtool_xqRvHtQ8 0 6 114 1673 0 14 Dtool_xqRvHtQ8 0 2 4 this 3 1686  5 other 1 1686  
114 14 Dtool_xqRv1z5O 0 7 115 1685 902 14 Dtool_xqRv1z5O 0 2 4 this 3 1686  5 other 1 1686  
115 14 Dtool_xqRvbsOe 0 7 116 1685 902 14 Dtool_xqRvbsOe 0 2 4 this 3 1686  5 other 1 1686  
116 14 Dtool_xqRvEMaU 0 7 117 1685 902 14 Dtool_xqRvEMaU 0 2 4 this 3 1686  5 other 1 1686  
117 14 Dtool_xqRv1NZN 0 7 118 1685 902 14 Dtool_xqRv1NZN 0 1 4 this 3 1686  
118 14 Dtool_xqRvavX9 0 7 119 1685 902 14 Dtool_xqRvavX9 0 2 4 this 3 1686  5 shift 1 1673  
119 14 Dtool_xqRv3PLG 0 7 120 1685 902 14 Dtool_xqRv3PLG 0 2 4 this 3 1686  5 shift 1 1673  
120 14 Dtool_xqRv_0dX 0 6 121 1685 0 14 Dtool_xqRv_0dX 0 2 4 this 3 1685  5 other 1 1686  
121 14 Dtool_xqRvYUzm 0 6 122 1685 0 14 Dtool_xqRvYUzm 0 2 4 this 3 1685  5 other 1 1686  
122 14 Dtool_xqRvR0_c 0 6 123 1685 0 14 Dtool_xqRvR0_c 0 2 4 this 3 1685  5 other 1 1686  
123 14 Dtool_xqRvq_L4 0 6 124 1685 0 14 Dtool_xqRvq_L4 0 2 4 this 3 1685  5 shift 1 1673  
124 14 Dtool_xqRvFe_A 0 6 125 1685 0 14 Dtool_xqRvFe_A 0 2 4 this 3 1685  5 shift 1 1673  
125 14 Dtool_xqRv2usD 0 7 126 1684 0 14 Dtool_xqRv2usD 0 0 
126 14 Dtool_xqRvDVLW 0 7 128 1688 964 14 Dtool_xqRvDVLW 0 1 4 copy 1 1668  
127 14 Dtool_xqRvF0NH 0 7 128 1688 964 14 Dtool_xqRvF0NH 0 2 4 self 1 1689  8 sequence 1 1689  
128 14 Dtool_xqRv1rpQ 0 7 128 1688 964 14 Dtool_xqRv1rpQ 0 1 11 type_handle 1 1684  
129 14 Dtool_xqRv8OP5 0 7 128 1688 964 14 Dtool_xqRv8OP5 0 0 
130 14 Dtool_xqRv7V4I 0 7 129 1688 964 14 Dtool_xqRv7V4I 0 2 1 n 1 1670  11 type_handle 1 1684  
131 14 Dtool_xqRvJ8ub 0 7 129 1688 964 14 Dtool_xqRvJ8ub 0 1 1 n 1 1670  
132 14 Dtool_xqRvI3xs 0 6 130 1670 0 14 Dtool_xqRvI3xs 0 1 4 this 3 1668  
133 14 Dtool_xqRv_7ej 0 4 131 1675 0 14 Dtool_xqRv_7ej 0 2 4 this 3 1688  1 x 1 1671  
134 14 Dtool_xqRvxujU 0 4 132 1675 0 14 Dtool_xqRvxujU 0 1 4 this 3 1688  
135 14 Dtool_xqRvC1Wu 0 6 133 1671 0 14 Dtool_xqRvC1Wu 0 2 4 this 3 1668  1 n 1 1670  
136 14 Dtool_xqRv04Y4 0 4 134 1675 0 14 Dtool_xqRv04Y4 0 3 4 this 3 1688  1 n 1 1670  5 value 1 1671  
137 14 Dtool_xqRvuw0l 0 6 135 1671 0 14 Dtool_xqRvuw0l 0 2 4 this 3 1668  1 n 1 1670  
138 14 Dtool_xqRvy_QJ 0 4 136 1675 0 14 Dtool_xqRvy_QJ 0 3 4 this 3 1688  1 n 1 1670  5 value 1 1671  
139 14 Dtool_xqRvnE_c 0 6 137 1672 0 14 Dtool_xqRvnE_c 0 1 4 this 3 1668  
140 14 Dtool_xqRvbfhi 0 4 138 1675 0 14 Dtool_xqRvbfhi 0 2 4 this 3 1688  4 data 1 1672  
141 14 Dtool_xqRvlO9d 0 6 139 1672 0 14 Dtool_xqRvlO9d 0 3 4 this 3 1668  1 n 1 1670  5 count 1 1670  
142 14 Dtool_xqRv6EdM 0 4 140 1675 0 14 Dtool_xqRv6EdM 0 4 4 this 3 1688  1 n 1 1670  5 count 1 1670  4 data 1 1672  
143 14 Dtool_xqRvyVLR 0 6 141 1673 0 14 Dtool_xqRvyVLR 0 1 4 this 3 1668  
144 14 Dtool_xqRv8hDB 0 6 142 1673 0 14 Dtool_xqRv8hDB 0 1 4 this 3 1668  
145 14 Dtool_xqRvBhAH 0 4 147 1675 0 14 Dtool_xqRvBhAH 783 // Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1691  
146 14 Dtool_xqRvNKyB 0 4 147 1675 0 14 Dtool_xqRvNKyB 736 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1691  4 from 1 1692  2 to 1 1692  
147 14 Dtool_xqRvblrP 0 4 148 1675 0 14 Dtool_xqRvblrP 405 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  7 restart 1 1682  
148 14 Dtool_xqRvub22 0 4 148 1675 0 14 Dtool_xqRvub22 491 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1691  7 restart 1 1682  4 from 1 1692  2 to 1 1692  
149 14 Dtool_xqRvFEBu 0 4 149 1675 0 14 Dtool_xqRvFEBu 498 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  7 restart 1 1682  
150 14 Dtool_xqRvA7bg 0 4 149 1675 0 14 Dtool_xqRvA7bg 386 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1691  7 restart 1 1682  4 from 1 1692  2 to 1 1692  
151 14 Dtool_xqRvEmm6 0 4 150 1675 0 14 Dtool_xqRvEmm6 369 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1691  
152 14 Dtool_xqRvUH7a 0 4 151 1675 0 14 Dtool_xqRvUH7a 297 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  5 frame 1 1692  
153 14 Dtool_xqRvTzzJ 0 4 152 1675 0 14 Dtool_xqRvTzzJ 519 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  9 play_rate 1 1692  
154 14 Dtool_xqRvHfNF 0 6 153 1692 0 14 Dtool_xqRvHfNF 313 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
155 14 Dtool_xqRv1MDt 0 6 154 1692 0 14 Dtool_xqRv1MDt 514 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
156 14 Dtool_xqRv38Tm 0 6 155 1673 0 14 Dtool_xqRv38Tm 581 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
157 14 Dtool_xqRvFJm1 0 6 156 1673 0 14 Dtool_xqRvFJm1 359 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
158 14 Dtool_xqRvL6yq 0 6 157 1673 0 14 Dtool_xqRvL6yq 638 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
159 14 Dtool_xqRvc9m_ 0 6 158 1692 0 14 Dtool_xqRvc9m_ 598 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
160 14 Dtool_xqRvu_72 0 6 159 1673 0 14 Dtool_xqRvu_72 693 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
161 14 Dtool_xqRviZK4 0 6 160 1692 0 14 Dtool_xqRviZK4 841 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
162 14 Dtool_xqRveUtV 0 6 161 1682 0 14 Dtool_xqRveUtV 466 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1693  
163 14 Dtool_xqRvjJYM 0 4 162 1675 0 14 Dtool_xqRvjJYM 230 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1693  3 out 1 1678  
164 14 Dtool_xqRv3PK3 0 7 163 1684 0 14 Dtool_xqRv3PK3 0 0 
165 14 Dtool_xqRveAZ3 0 7 166 1695 1002 14 Dtool_xqRveAZ3 759 // Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
166 14 Dtool_xqRvTpCm 0 7 166 1695 1002 14 Dtool_xqRvTpCm 226 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1696  
167 14 Dtool_xqRvXroR 0 7 167 1695 1002 14 Dtool_xqRvXroR 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
168 14 Dtool_xqRvnK4u 0 7 168 1695 1002 14 Dtool_xqRvnK4u 282 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
//////////////////////////////////////////////////////////////////// 0 
169 14 Dtool_xqRv9eRT 0 7 169 1695 1002 14 Dtool_xqRv9eRT 286 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
//////////////////////////////////////////////////////////////////// 0 
170 14 Dtool_xqRvGswc 0 6 170 1695 0 14 Dtool_xqRvGswc 234 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1695  4 copy 1 1696  
171 14 Dtool_xqRv0_vY 0 4 171 1675 0 14 Dtool_xqRv0_vY 260 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1695  
172 14 Dtool_xqRvT1E2 0 6 172 1682 0 14 Dtool_xqRvT1E2 294 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1696  
173 14 Dtool_xqRvLeqi 0 6 173 1682 0 14 Dtool_xqRvLeqi 269 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1696  
174 14 Dtool_xqRvWsUb 0 6 174 1682 0 14 Dtool_xqRvWsUb 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1696  
175 14 Dtool_xqRv6gLj 0 6 175 1682 0 14 Dtool_xqRv6gLj 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1696  
176 14 Dtool_xqRvgvS2 0 6 176 1682 0 14 Dtool_xqRvgvS2 227 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
177 14 Dtool_xqRvgevt 0 6 177 1682 0 14 Dtool_xqRvgevt 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
178 14 Dtool_xqRvNGO_ 0 6 178 1682 0 14 Dtool_xqRvNGO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
179 14 Dtool_xqRvwJ_1 0 6 179 1682 0 14 Dtool_xqRvwJ_1 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
180 14 Dtool_xqRvt52_ 0 6 180 1682 0 14 Dtool_xqRvt52_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
181 14 Dtool_xqRvQMl2 0 6 181 1682 0 14 Dtool_xqRvQMl2 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  5 other 1 1696  
182 14 Dtool_xqRvkAFl 0 7 182 1695 1002 14 Dtool_xqRvkAFl 231 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1695  
183 14 Dtool_xqRvqToO 0 7 183 1695 1002 14 Dtool_xqRvqToO 232 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1695  6 param0 0 1673  
184 14 Dtool_xqRvHG_1 0 4 184 1675 0 14 Dtool_xqRvHG_1 216 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  3 out 1 1678  
185 14 Dtool_xqRvh86d 0 4 188 1675 0 14 Dtool_xqRvh86d 653 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1698  
186 14 Dtool_xqRvA1uu 0 7 189 1695 1002 14 Dtool_xqRvA1uu 388 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1699  
187 14 Dtool_xqRvuMCB 0 6 190 1689 0 14 Dtool_xqRvuMCB 492 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1699  4 self 1 1689  
188 14 Dtool_xqRvPnhF 0 6 191 1689 0 14 Dtool_xqRvPnhF 709 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1699  4 self 1 1689  7 pickler 1 1689  
189 14 Dtool_xqRvSud2 0 6 192 1672 0 14 Dtool_xqRvSud2 756 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1699  
190 14 Dtool_xqRv91zQ 0 6 192 1682 0 14 Dtool_xqRv91zQ 785 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1699  4 data 1 1701  6 writer 1 1702  
191 14 Dtool_xqRv_CTI 0 6 192 1682 0 14 Dtool_xqRv_CTI 785 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1699  4 data 1 1701  
192 14 Dtool_xqRvTBaO 0 7 194 1684 0 14 Dtool_xqRvTBaO 0 0 
193 14 Dtool_xqRvEJGP 0 7 203 1704 1018 14 Dtool_xqRvEJGP 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 1672  6 reader 1 1703  
194 14 Dtool_xqRvtU54 0 7 203 1704 1018 14 Dtool_xqRvtU54 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 1 4 data 1 1672  
195 14 Dtool_xqRv5oCX 0 7 204 1684 0 14 Dtool_xqRv5oCX 0 0 
196 14 Dtool_xqRvb50R 0 6 198 1698 0 14 Dtool_xqRvb50R 0 1 4 this 3 1704  
197 14 Dtool_xqRvIu02 0 7 199 1704 1018 14 Dtool_xqRvIu02 0 1 4 this 3 1698  
198 14 Dtool_xqRvkcf_ 0 7 201 1705 0 14 Dtool_xqRvkcf_ 0 1 4 this 3 1704  
199 14 Dtool_xqRvGHue 0 7 202 1704 1018 14 Dtool_xqRvGHue 0 1 4 this 3 1705  
200 14 Dtool_xqRv5zcI 0 7 213 1708 1023 14 Dtool_xqRv5zcI 928 // Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
201 14 Dtool_xqRvRs2_ 0 6 214 1682 0 14 Dtool_xqRvRs2_ 396 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  5 other 1 1706  
202 14 Dtool_xqRv5cIS 0 6 215 1709 0 14 Dtool_xqRv5cIS 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
203 14 Dtool_xqRvPDd1 0 6 216 1709 0 14 Dtool_xqRvPDd1 516 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
204 14 Dtool_xqRv3ULN 0 6 217 1670 0 14 Dtool_xqRv3ULN 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
205 14 Dtool_xqRvfk9J 0 6 218 1673 0 14 Dtool_xqRvfk9J 320 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
206 14 Dtool_xqRvtgta 0 6 219 1709 0 14 Dtool_xqRvtgta 335 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  1 n 1 1673  
207 14 Dtool_xqRv_q0S 0 6 220 1682 0 14 Dtool_xqRv_q0S 380 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
208 14 Dtool_xqRvorWD 0 4 221 1675 0 14 Dtool_xqRvorWD 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1708  
209 14 Dtool_xqRvt_BK 0 4 222 1675 0 14 Dtool_xqRvt_BK 509 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1708  8 pathname 1 1709  
210 14 Dtool_xqRvmwOq 0 6 223 1682 0 14 Dtool_xqRvmwOq 373 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
211 14 Dtool_xqRv_CEW 0 4 224 1675 0 14 Dtool_xqRv_CEW 394 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1708  
212 14 Dtool_xqRv_VOd 0 6 225 1698 0 14 Dtool_xqRv_VOd 383 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
213 14 Dtool_xqRvY08g 0 4 227 1675 0 14 Dtool_xqRvY08g 935 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1708  3 ptr 1 1698  7 ref_ptr 1 1705  
214 14 Dtool_xqRvhwxq 0 4 227 1675 0 14 Dtool_xqRvhwxq 342 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1708  3 ptr 1 1698  5 dummy 1 1673  
215 14 Dtool_xqRvFvYJ 0 4 228 1675 0 14 Dtool_xqRvFvYJ 222 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  3 out 1 1678  
216 14 Dtool_xqRvE3j3 0 4 229 1675 0 14 Dtool_xqRvE3j3 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1706  3 out 1 1678  12 indent_level 1 1673  
217 14 Dtool_xqRvUKVK 0 4 229 1675 0 14 Dtool_xqRvUKVK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  3 out 1 1678  
218 14 Dtool_xqRv5Y_g 0 7 230 1684 0 14 Dtool_xqRv5Y_g 0 0 
219 14 Dtool_xqRvhSD0 0 7 207 1704 1018 14 Dtool_xqRvhSD0 0 1 4 this 3 1708  
220 14 Dtool_xqRvCxca 0 7 208 1708 1023 14 Dtool_xqRvCxca 0 1 4 this 3 1704  
221 14 Dtool_xqRvF6go 0 7 232 1712 1043 14 Dtool_xqRvF6go 220 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
222 14 Dtool_xqRvLJj3 0 4 234 1675 0 14 Dtool_xqRvLJj3 1130 // Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  4 flag 1 1682  
223 14 Dtool_xqRvov3M 0 6 235 1682 0 14 Dtool_xqRvov3M 695 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
224 14 Dtool_xqRvRUjp 0 4 236 1675 0 14 Dtool_xqRvRUjp 346 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  4 flag 1 1682  
225 14 Dtool_xqRvPFL2 0 6 237 1682 0 14 Dtool_xqRvPFL2 414 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
226 14 Dtool_xqRvoUbM 0 4 238 1675 0 14 Dtool_xqRvoUbM 332 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  4 flag 1 1682  
227 14 Dtool_xqRvtUl1 0 6 239 1682 0 14 Dtool_xqRvtUl1 418 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
228 14 Dtool_xqRvqUmd 0 4 240 1675 0 14 Dtool_xqRvqUmd 1143 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  4 flag 1 1682  
229 14 Dtool_xqRvMfxn 0 6 241 1682 0 14 Dtool_xqRvMfxn 475 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
230 14 Dtool_xqRvSDrp 0 4 242 1675 0 14 Dtool_xqRvSDrp 665 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  4 root 1 1709  
231 14 Dtool_xqRvDaLL 0 7 243 1715 0 14 Dtool_xqRvDaLL 299 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
232 14 Dtool_xqRvFO7v 0 4 244 1675 0 14 Dtool_xqRvFO7v 316 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  10 flush_time 1 1673  
233 14 Dtool_xqRvzd6A 0 6 245 1673 0 14 Dtool_xqRvzd6A 314 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
234 14 Dtool_xqRvBePF 0 4 246 1675 0 14 Dtool_xqRvBePF 767 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  10 max_kbytes 1 1673  
235 14 Dtool_xqRvbqs_ 0 6 247 1673 0 14 Dtool_xqRvbqs_ 371 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
236 14 Dtool_xqRvPgHj 0 4 248 1675 0 14 Dtool_xqRvPgHj 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  2 ro 1 1682  
237 14 Dtool_xqRvD7P3 0 6 249 1682 0 14 Dtool_xqRvD7P3 503 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
238 14 Dtool_xqRvamUZ 0 7 250 1708 1023 14 Dtool_xqRvamUZ 1211 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1712  15 source_filename 1 1709  15 cache_extension 1 1672  
239 14 Dtool_xqRvztlT 0 6 251 1682 0 14 Dtool_xqRvztlT 478 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  6 record 1 1708  
240 14 Dtool_xqRvoxHn 0 4 252 1675 0 14 Dtool_xqRvoxHn 325 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
241 14 Dtool_xqRvUv8K 0 4 253 1675 0 14 Dtool_xqRvUv8K 258 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
242 14 Dtool_xqRvA5ij 0 6 254 1712 0 14 Dtool_xqRvA5ij 376 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
//////////////////////////////////////////////////////////////////// 0 
243 14 Dtool_xqRv5YaZ 0 7 263 1718 1077 14 Dtool_xqRv5YaZ 230 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1716  
244 14 Dtool_xqRv19et 0 7 263 1718 1077 14 Dtool_xqRv19et 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 flags 1 1673  
245 14 Dtool_xqRvMYtK 0 7 263 1718 1077 14 Dtool_xqRvMYtK 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
246 14 Dtool_xqRvkRhb 0 7 263 1718 1077 14 Dtool_xqRvkRhb 714 // Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 flags 1 1673  13 texture_flags 1 1673  
247 14 Dtool_xqRvERe5 0 6 264 1718 0 14 Dtool_xqRvERe5 238 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1718  4 copy 1 1716  
248 14 Dtool_xqRvGDaf 0 4 265 1675 0 14 Dtool_xqRvGDaf 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1718  5 flags 1 1673  
249 14 Dtool_xqRvjYev 0 6 266 1673 0 14 Dtool_xqRvjYev 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1716  
250 14 Dtool_xqRvedgq 0 4 267 1675 0 14 Dtool_xqRvedgq 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1718  5 flags 1 1673  
251 14 Dtool_xqRvWo93 0 6 268 1673 0 14 Dtool_xqRvWo93 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1716  
252 14 Dtool_xqRvloHl 0 4 269 1675 0 14 Dtool_xqRvloHl 767 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1718  9 num_views 1 1673  
253 14 Dtool_xqRvLOQ8 0 6 270 1673 0 14 Dtool_xqRvLOQ8 264 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1716  
254 14 Dtool_xqRvOzo7 0 4 271 1675 0 14 Dtool_xqRvOzo7 480 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1718  5 scale 1 1619  
255 14 Dtool_xqRvxpJO 0 6 272 1619 0 14 Dtool_xqRvxpJO 266 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1716  
256 14 Dtool_xqRv0FtW 0 4 273 1675 0 14 Dtool_xqRv0FtW 221 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1716  3 out 1 1678  
257 14 Dtool_xqRvyofV 0 7 276 1703 1079 14 Dtool_xqRvyofV 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 source 1 1719  
258 14 Dtool_xqRvswJK 0 7 276 1703 1079 14 Dtool_xqRvswJK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
259 14 Dtool_xqRvykLj 0 4 278 1675 0 14 Dtool_xqRvykLj 383 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1703  6 source 1 1719  
260 14 Dtool_xqRvjVTZ 0 6 279 1719 0 14 Dtool_xqRvjVTZ 324 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1703  
261 14 Dtool_xqRvOowx 0 6 280 1682 0 14 Dtool_xqRvOowx 474 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1703  
262 14 Dtool_xqRv7KNc 0 4 281 1675 0 14 Dtool_xqRv7KNc 1496 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
//////////////////////////////////////////////////////////////////// 4 4 this 3 1703  3 obj 1 1698  4 name 1 1672  4 data 1 1720  
263 14 Dtool_xqRvGGPG 0 7 282 1720 0 14 Dtool_xqRvGGPG 413 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1722  3 obj 1 1698  4 name 1 1672  
264 14 Dtool_xqRvlMp4 0 6 283 1709 0 14 Dtool_xqRvlMp4 457 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
265 14 Dtool_xqRvQgUs 0 6 284 1716 0 14 Dtool_xqRvQgUs 330 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
266 14 Dtool_xqRvoG4k 0 4 285 1675 0 14 Dtool_xqRvoG4k 276 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1703  7 options 1 1716  
267 14 Dtool_xqRvkEg5 0 6 286 1698 0 14 Dtool_xqRvkEg5 1569 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1703  
268 14 Dtool_xqRvdeRo 0 6 287 1682 0 14 Dtool_xqRvdeRo 375 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
269 14 Dtool_xqRvkMdY 0 6 288 1682 0 14 Dtool_xqRvkMdY 935 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1703  
270 14 Dtool_xqRv7ine 0 6 289 1682 0 14 Dtool_xqRv7ine 724 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 1703  12 orig_pointer 1 1699  11 new_pointer 1 1699  
271 14 Dtool_xqRvHY9j 0 6 290 1673 0 14 Dtool_xqRvHY9j 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
272 14 Dtool_xqRvyH0T 0 6 291 1673 0 14 Dtool_xqRvyH0T 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
273 14 Dtool_xqRvTPGP 0 6 292 1629 0 14 Dtool_xqRvTPGP 528 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
274 14 Dtool_xqRvIek2 0 6 293 1682 0 14 Dtool_xqRvIek2 489 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
275 14 Dtool_xqRvDBcf 0 6 294 1673 0 14 Dtool_xqRvDBcf 440 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
276 14 Dtool_xqRvbCCi 0 6 295 1673 0 14 Dtool_xqRvbCCi 450 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1722  
277 14 Dtool_xqRv8uzO 0 7 297 1702 1099 14 Dtool_xqRv8uzO 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 target 1 1724  
278 14 Dtool_xqRvpd8a 0 7 297 1702 1099 14 Dtool_xqRvpd8a 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
279 14 Dtool_xqRvpGaG 0 4 299 1675 0 14 Dtool_xqRvpGaG 394 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1702  6 target 1 1724  
280 14 Dtool_xqRvcRQs 0 6 300 1724 0 14 Dtool_xqRvcRQs 809 // Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1702  
281 14 Dtool_xqRvyJ_l 0 6 301 1682 0 14 Dtool_xqRvyJ_l 483 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1702  
282 14 Dtool_xqRv2a2s 0 6 302 1709 0 14 Dtool_xqRv2a2s 455 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1726  
283 14 Dtool_xqRvaCkL 0 6 303 1682 0 14 Dtool_xqRvaCkL 1153 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1702  3 obj 1 1699  
284 14 Dtool_xqRvgrPZ 0 6 304 1682 0 14 Dtool_xqRvgrPZ 408 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1726  3 obj 1 1699  
285 14 Dtool_xqRvyWRG 0 4 305 1675 0 14 Dtool_xqRvyWRG 307 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1702  
286 14 Dtool_xqRvAdVD 0 6 306 1629 0 14 Dtool_xqRvAdVD 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1726  
287 14 Dtool_xqRvroyq 0 6 307 1682 0 14 Dtool_xqRvroyq 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1726  
288 14 Dtool_xqRvvXrV 0 6 308 1631 0 14 Dtool_xqRvvXrV 462 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1726  
289 14 Dtool_xqRveMfu 0 4 309 1675 0 14 Dtool_xqRveMfu 453 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1702  17 file_texture_mode 1 1631  
290 14 Dtool_xqRvY8n1 0 7 311 1728 1118 14 Dtool_xqRvY8n1 0 0 
291 14 Dtool_xqRvd8dF 0 7 311 1728 1118 14 Dtool_xqRvd8dF 0 1 4 copy 1 1729  
292 14 Dtool_xqRvQKNp 0 7 311 1728 1118 14 Dtool_xqRvQKNp 0 1 10 init_value 1 1671  
293 14 Dtool_xqRvJZTb 0 6 312 1728 0 14 Dtool_xqRvJZTb 0 2 4 this 3 1728  4 copy 1 1729  
294 14 Dtool_xqRvXYNA 0 7 313 1728 1118 14 Dtool_xqRvXYNA 0 0 
295 14 Dtool_xqRvYhyY 0 7 314 1728 1118 14 Dtool_xqRvYhyY 0 0 
296 14 Dtool_xqRvj81C 0 7 315 1728 1118 14 Dtool_xqRvj81C 0 1 7 on_bits 1 1673  
297 14 Dtool_xqRvv20_ 0 7 316 1728 1118 14 Dtool_xqRvv20_ 0 1 5 index 1 1673  
298 14 Dtool_xqRv29fW 0 7 317 1728 1118 14 Dtool_xqRv29fW 0 2 7 low_bit 1 1673  4 size 1 1673  
299 14 Dtool_xqRvjM9n 0 6 319 1682 0 14 Dtool_xqRvjM9n 0 0 
300 14 Dtool_xqRvLPok 0 6 320 1673 0 14 Dtool_xqRvLPok 0 0 
301 14 Dtool_xqRvLMWC 0 6 321 1673 0 14 Dtool_xqRvLMWC 0 0 
302 14 Dtool_xqRvoZD7 0 6 322 1682 0 14 Dtool_xqRvoZD7 0 2 4 this 3 1729  5 index 1 1673  
303 14 Dtool_xqRvHvH5 0 4 323 1675 0 14 Dtool_xqRvHvH5 0 2 4 this 3 1728  5 index 1 1673  
304 14 Dtool_xqRvDlS1 0 4 324 1675 0 14 Dtool_xqRvDlS1 0 2 4 this 3 1728  5 index 1 1673  
305 14 Dtool_xqRvwyI5 0 4 325 1675 0 14 Dtool_xqRvwyI5 0 3 4 this 3 1728  5 index 1 1673  5 value 1 1682  
306 14 Dtool_xqRvpD_I 0 6 326 1682 0 14 Dtool_xqRvpD_I 0 1 4 this 3 1729  
307 14 Dtool_xqRvrRHW 0 6 327 1682 0 14 Dtool_xqRvrRHW 0 1 4 this 3 1729  
308 14 Dtool_xqRvvAiO 0 6 328 1671 0 14 Dtool_xqRvvAiO 0 3 4 this 3 1729  7 low_bit 1 1673  4 size 1 1673  
309 14 Dtool_xqRvhlDh 0 4 329 1675 0 14 Dtool_xqRvhlDh 0 4 4 this 3 1728  5 value 1 1671  7 low_bit 1 1673  4 size 1 1673  
310 14 Dtool_xqRvrEJ7 0 6 330 1682 0 14 Dtool_xqRvrEJ7 0 3 4 this 3 1729  7 low_bit 1 1673  4 size 1 1673  
311 14 Dtool_xqRvVXDN 0 6 331 1682 0 14 Dtool_xqRvVXDN 0 3 4 this 3 1729  7 low_bit 1 1673  4 size 1 1673  
312 14 Dtool_xqRvDfi2 0 4 332 1675 0 14 Dtool_xqRvDfi2 0 3 4 this 3 1728  7 low_bit 1 1673  4 size 1 1673  
313 14 Dtool_xqRvTDVh 0 4 333 1675 0 14 Dtool_xqRvTDVh 0 3 4 this 3 1728  7 low_bit 1 1673  4 size 1 1673  
314 14 Dtool_xqRv3CAw 0 4 334 1675 0 14 Dtool_xqRv3CAw 0 4 4 this 3 1728  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
315 14 Dtool_xqRvKtug 0 6 335 1671 0 14 Dtool_xqRvKtug 0 1 4 this 3 1729  
316 14 Dtool_xqRvqWNx 0 4 336 1675 0 14 Dtool_xqRvqWNx 0 2 4 this 3 1728  5 value 1 1671  
317 14 Dtool_xqRvwNdD 0 6 337 1673 0 14 Dtool_xqRvwNdD 0 1 4 this 3 1729  
318 14 Dtool_xqRvNq9C 0 6 338 1673 0 14 Dtool_xqRvNq9C 0 1 4 this 3 1729  
319 14 Dtool_xqRvPG3h 0 6 339 1673 0 14 Dtool_xqRvPG3h 0 1 4 this 3 1729  
320 14 Dtool_xqRvyV9D 0 6 340 1673 0 14 Dtool_xqRvyV9D 0 1 4 this 3 1729  
321 14 Dtool_xqRv0xJw 0 6 341 1673 0 14 Dtool_xqRv0xJw 0 1 4 this 3 1729  
322 14 Dtool_xqRvpjpy 0 6 342 1673 0 14 Dtool_xqRvpjpy 0 1 4 this 3 1729  
323 14 Dtool_xqRvTJ13 0 6 343 1673 0 14 Dtool_xqRvTJ13 0 2 4 this 3 1729  7 low_bit 1 1673  
324 14 Dtool_xqRvGlyF 0 4 344 1675 0 14 Dtool_xqRvGlyF 0 1 4 this 3 1728  
325 14 Dtool_xqRvdBzV 0 6 345 1682 0 14 Dtool_xqRvdBzV 0 2 4 this 3 1729  5 other 1 1729  
326 14 Dtool_xqRvYjCO 0 4 346 1675 0 14 Dtool_xqRvYjCO 0 1 4 this 3 1728  
327 14 Dtool_xqRvCJ36 0 4 347 1675 0 14 Dtool_xqRvCJ36 0 2 4 this 3 1729  3 out 1 1678  
328 14 Dtool_xqRvKhMC 0 4 348 1675 0 14 Dtool_xqRvKhMC 0 3 4 this 3 1729  3 out 1 1678  12 spaces_every 1 1673  
329 14 Dtool_xqRvYovn 0 4 348 1675 0 14 Dtool_xqRvYovn 0 2 4 this 3 1729  3 out 1 1678  
330 14 Dtool_xqRvwLf9 0 4 349 1675 0 14 Dtool_xqRvwLf9 0 3 4 this 3 1729  3 out 1 1678  12 spaces_every 1 1673  
331 14 Dtool_xqRvN0AH 0 4 349 1675 0 14 Dtool_xqRvN0AH 0 2 4 this 3 1729  3 out 1 1678  
332 14 Dtool_xqRv4_Uj 0 4 350 1675 0 14 Dtool_xqRv4_Uj 0 3 4 this 3 1729  3 out 1 1678  12 indent_level 1 1673  
333 14 Dtool_xqRvK9Ho 0 4 350 1675 0 14 Dtool_xqRvK9Ho 0 2 4 this 3 1729  3 out 1 1678  
334 14 Dtool_xqRv_rYC 0 6 351 1682 0 14 Dtool_xqRv_rYC 0 2 4 this 3 1729  5 other 1 1729  
335 14 Dtool_xqRvnpIW 0 6 352 1682 0 14 Dtool_xqRvnpIW 0 2 4 this 3 1729  5 other 1 1729  
336 14 Dtool_xqRvbyVY 0 6 353 1682 0 14 Dtool_xqRvbyVY 0 2 4 this 3 1729  5 other 1 1729  
337 14 Dtool_xqRvKgVU 0 6 354 1673 0 14 Dtool_xqRvKgVU 0 2 4 this 3 1729  5 other 1 1729  
338 14 Dtool_xqRvvwt_ 0 7 355 1728 1118 14 Dtool_xqRvvwt_ 0 2 4 this 3 1729  5 other 1 1729  
339 14 Dtool_xqRvD3V0 0 7 356 1728 1118 14 Dtool_xqRvD3V0 0 2 4 this 3 1729  5 other 1 1729  
340 14 Dtool_xqRvx0NX 0 7 357 1728 1118 14 Dtool_xqRvx0NX 0 2 4 this 3 1729  5 other 1 1729  
341 14 Dtool_xqRvdjF_ 0 7 358 1728 1118 14 Dtool_xqRvdjF_ 0 1 4 this 3 1729  
342 14 Dtool_xqRvGBn_ 0 7 359 1728 1118 14 Dtool_xqRvGBn_ 0 2 4 this 3 1729  5 shift 1 1673  
343 14 Dtool_xqRvBEfL 0 7 360 1728 1118 14 Dtool_xqRvBEfL 0 2 4 this 3 1729  5 shift 1 1673  
344 14 Dtool_xqRv8phA 0 6 361 1728 0 14 Dtool_xqRv8phA 0 2 4 this 3 1728  5 other 1 1729  
345 14 Dtool_xqRvfgJ2 0 6 362 1728 0 14 Dtool_xqRvfgJ2 0 2 4 this 3 1728  5 other 1 1729  
346 14 Dtool_xqRvNmBZ 0 6 363 1728 0 14 Dtool_xqRvNmBZ 0 2 4 this 3 1728  5 other 1 1729  
347 14 Dtool_xqRvQIZr 0 6 364 1728 0 14 Dtool_xqRvQIZr 0 2 4 this 3 1728  5 shift 1 1673  
348 14 Dtool_xqRveTR4 0 6 365 1728 0 14 Dtool_xqRveTR4 0 2 4 this 3 1728  5 shift 1 1673  
349 14 Dtool_xqRvZhUs 0 4 366 1675 0 14 Dtool_xqRvZhUs 0 1 4 this 3 1728  
350 14 Dtool_xqRv6S0S 0 4 367 1675 0 14 Dtool_xqRv6S0S 0 1 4 this 3 1728  
351 14 Dtool_xqRvccAh 0 7 368 1728 1118 14 Dtool_xqRvccAh 0 1 4 this 3 1729  
352 14 Dtool_xqRv3HQS 0 7 369 1728 1118 14 Dtool_xqRv3HQS 0 1 4 this 3 1729  
353 14 Dtool_xqRvuOp5 0 7 370 1728 1118 14 Dtool_xqRvuOp5 0 1 4 this 3 1729  
354 14 Dtool_xqRvdxsS 0 7 370 1728 1118 14 Dtool_xqRvdxsS 0 2 4 this 3 1729  5 other 1 1729  
355 14 Dtool_xqRvOp9c 0 7 370 1728 1118 14 Dtool_xqRvOp9c 0 2 4 this 3 1729  5 index 1 1673  
356 14 Dtool_xqRvjXNC 0 7 371 1728 1118 14 Dtool_xqRvjXNC 0 1 4 this 3 1729  
357 14 Dtool_xqRvl87a 0 7 371 1728 1118 14 Dtool_xqRvl87a 0 2 4 this 3 1729  5 other 1 1729  
358 14 Dtool_xqRv5AUL 0 7 371 1728 1118 14 Dtool_xqRv5AUL 0 2 4 this 3 1729  5 index 1 1673  
359 14 Dtool_xqRvEmuv 0 6 372 1673 0 14 Dtool_xqRvEmuv 0 1 4 this 3 1729  
360 14 Dtool_xqRvf5Rj 0 7 373 1684 0 14 Dtool_xqRvf5Rj 0 0 
361 14 Dtool_xqRvnVQd 0 7 375 1731 1181 14 Dtool_xqRvnVQd 0 0 
362 14 Dtool_xqRv7gMO 0 7 375 1731 1181 14 Dtool_xqRv7gMO 0 1 4 copy 1 1732  
363 14 Dtool_xqRv0eoo 0 7 375 1731 1181 14 Dtool_xqRv0eoo 0 1 10 init_value 1 1670  
364 14 Dtool_xqRvCaYM 0 6 376 1731 0 14 Dtool_xqRvCaYM 0 2 4 this 3 1731  4 copy 1 1732  
365 14 Dtool_xqRvRObZ 0 7 377 1731 1181 14 Dtool_xqRvRObZ 0 0 
366 14 Dtool_xqRvjEzX 0 7 378 1731 1181 14 Dtool_xqRvjEzX 0 0 
367 14 Dtool_xqRvIQak 0 7 379 1731 1181 14 Dtool_xqRvIQak 0 1 7 on_bits 1 1673  
368 14 Dtool_xqRvsGZS 0 7 380 1731 1181 14 Dtool_xqRvsGZS 0 1 5 index 1 1673  
369 14 Dtool_xqRvOgvR 0 7 381 1731 1181 14 Dtool_xqRvOgvR 0 2 7 low_bit 1 1673  4 size 1 1673  
370 14 Dtool_xqRv6pB9 0 6 383 1682 0 14 Dtool_xqRv6pB9 0 0 
371 14 Dtool_xqRvyO9U 0 6 384 1673 0 14 Dtool_xqRvyO9U 0 0 
372 14 Dtool_xqRvR9aU 0 6 385 1673 0 14 Dtool_xqRvR9aU 0 0 
373 14 Dtool_xqRve0SD 0 6 386 1682 0 14 Dtool_xqRve0SD 0 2 4 this 3 1732  5 index 1 1673  
374 14 Dtool_xqRvd8Sx 0 4 387 1675 0 14 Dtool_xqRvd8Sx 0 2 4 this 3 1731  5 index 1 1673  
375 14 Dtool_xqRveFOW 0 4 388 1675 0 14 Dtool_xqRveFOW 0 2 4 this 3 1731  5 index 1 1673  
376 14 Dtool_xqRvdoR6 0 4 389 1675 0 14 Dtool_xqRvdoR6 0 3 4 this 3 1731  5 index 1 1673  5 value 1 1682  
377 14 Dtool_xqRvJyi2 0 6 390 1682 0 14 Dtool_xqRvJyi2 0 1 4 this 3 1732  
378 14 Dtool_xqRvKdtD 0 6 391 1682 0 14 Dtool_xqRvKdtD 0 1 4 this 3 1732  
379 14 Dtool_xqRvvCn_ 0 6 392 1670 0 14 Dtool_xqRvvCn_ 0 3 4 this 3 1732  7 low_bit 1 1673  4 size 1 1673  
380 14 Dtool_xqRvVp78 0 4 393 1675 0 14 Dtool_xqRvVp78 0 4 4 this 3 1731  5 value 1 1670  7 low_bit 1 1673  4 size 1 1673  
381 14 Dtool_xqRv5NS8 0 6 394 1682 0 14 Dtool_xqRv5NS8 0 3 4 this 3 1732  7 low_bit 1 1673  4 size 1 1673  
382 14 Dtool_xqRv7Fky 0 6 395 1682 0 14 Dtool_xqRv7Fky 0 3 4 this 3 1732  7 low_bit 1 1673  4 size 1 1673  
383 14 Dtool_xqRvDAOF 0 4 396 1675 0 14 Dtool_xqRvDAOF 0 3 4 this 3 1731  7 low_bit 1 1673  4 size 1 1673  
384 14 Dtool_xqRvU65s 0 4 397 1675 0 14 Dtool_xqRvU65s 0 3 4 this 3 1731  7 low_bit 1 1673  4 size 1 1673  
385 14 Dtool_xqRvDZHW 0 4 398 1675 0 14 Dtool_xqRvDZHW 0 4 4 this 3 1731  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
386 14 Dtool_xqRviD5O 0 6 399 1670 0 14 Dtool_xqRviD5O 0 1 4 this 3 1732  
387 14 Dtool_xqRvERWc 0 4 400 1675 0 14 Dtool_xqRvERWc 0 2 4 this 3 1731  5 value 1 1670  
388 14 Dtool_xqRvb3be 0 6 401 1673 0 14 Dtool_xqRvb3be 0 1 4 this 3 1732  
389 14 Dtool_xqRvKHao 0 6 402 1673 0 14 Dtool_xqRvKHao 0 1 4 this 3 1732  
390 14 Dtool_xqRvRr4t 0 6 403 1673 0 14 Dtool_xqRvRr4t 0 1 4 this 3 1732  
391 14 Dtool_xqRvxYbh 0 6 404 1673 0 14 Dtool_xqRvxYbh 0 1 4 this 3 1732  
392 14 Dtool_xqRv_tIX 0 6 405 1673 0 14 Dtool_xqRv_tIX 0 1 4 this 3 1732  
393 14 Dtool_xqRvRLKI 0 6 406 1673 0 14 Dtool_xqRvRLKI 0 1 4 this 3 1732  
394 14 Dtool_xqRvgFMA 0 6 407 1673 0 14 Dtool_xqRvgFMA 0 2 4 this 3 1732  7 low_bit 1 1673  
395 14 Dtool_xqRvLld4 0 4 408 1675 0 14 Dtool_xqRvLld4 0 1 4 this 3 1731  
396 14 Dtool_xqRvjIgk 0 6 409 1682 0 14 Dtool_xqRvjIgk 0 2 4 this 3 1732  5 other 1 1732  
397 14 Dtool_xqRvYEpe 0 4 410 1675 0 14 Dtool_xqRvYEpe 0 1 4 this 3 1731  
398 14 Dtool_xqRv3eSz 0 4 411 1675 0 14 Dtool_xqRv3eSz 0 2 4 this 3 1732  3 out 1 1678  
399 14 Dtool_xqRvBOXy 0 4 412 1675 0 14 Dtool_xqRvBOXy 0 3 4 this 3 1732  3 out 1 1678  12 spaces_every 1 1673  
400 14 Dtool_xqRv8596 0 4 412 1675 0 14 Dtool_xqRv8596 0 2 4 this 3 1732  3 out 1 1678  
401 14 Dtool_xqRvHJUc 0 4 413 1675 0 14 Dtool_xqRvHJUc 0 3 4 this 3 1732  3 out 1 1678  12 spaces_every 1 1673  
402 14 Dtool_xqRv6TeI 0 4 413 1675 0 14 Dtool_xqRv6TeI 0 2 4 this 3 1732  3 out 1 1678  
403 14 Dtool_xqRvB_7k 0 4 414 1675 0 14 Dtool_xqRvB_7k 0 3 4 this 3 1732  3 out 1 1678  12 indent_level 1 1673  
404 14 Dtool_xqRvHvA7 0 4 414 1675 0 14 Dtool_xqRvHvA7 0 2 4 this 3 1732  3 out 1 1678  
405 14 Dtool_xqRvmOwJ 0 6 415 1682 0 14 Dtool_xqRvmOwJ 0 2 4 this 3 1732  5 other 1 1732  
406 14 Dtool_xqRvk_DB 0 6 416 1682 0 14 Dtool_xqRvk_DB 0 2 4 this 3 1732  5 other 1 1732  
407 14 Dtool_xqRvj58v 0 6 417 1682 0 14 Dtool_xqRvj58v 0 2 4 this 3 1732  5 other 1 1732  
408 14 Dtool_xqRvp_4v 0 6 418 1673 0 14 Dtool_xqRvp_4v 0 2 4 this 3 1732  5 other 1 1732  
409 14 Dtool_xqRvgBiE 0 7 419 1731 1181 14 Dtool_xqRvgBiE 0 2 4 this 3 1732  5 other 1 1732  
410 14 Dtool_xqRvm5Yo 0 7 420 1731 1181 14 Dtool_xqRvm5Yo 0 2 4 this 3 1732  5 other 1 1732  
411 14 Dtool_xqRvkh7V 0 7 421 1731 1181 14 Dtool_xqRvkh7V 0 2 4 this 3 1732  5 other 1 1732  
412 14 Dtool_xqRv0pXy 0 7 422 1731 1181 14 Dtool_xqRv0pXy 0 1 4 this 3 1732  
413 14 Dtool_xqRv8uW_ 0 7 423 1731 1181 14 Dtool_xqRv8uW_ 0 2 4 this 3 1732  5 shift 1 1673  
414 14 Dtool_xqRv62jA 0 7 424 1731 1181 14 Dtool_xqRv62jA 0 2 4 this 3 1732  5 shift 1 1673  
415 14 Dtool_xqRvRRDL 0 6 425 1731 0 14 Dtool_xqRvRRDL 0 2 4 this 3 1731  5 other 1 1732  
416 14 Dtool_xqRvfJ5u 0 6 426 1731 0 14 Dtool_xqRvfJ5u 0 2 4 this 3 1731  5 other 1 1732  
417 14 Dtool_xqRvdxcc 0 6 427 1731 0 14 Dtool_xqRvdxcc 0 2 4 this 3 1731  5 other 1 1732  
418 14 Dtool_xqRvP4Dt 0 6 428 1731 0 14 Dtool_xqRvP4Dt 0 2 4 this 3 1731  5 shift 1 1673  
419 14 Dtool_xqRvIwQv 0 6 429 1731 0 14 Dtool_xqRvIwQv 0 2 4 this 3 1731  5 shift 1 1673  
420 14 Dtool_xqRv_AEu 0 4 430 1675 0 14 Dtool_xqRv_AEu 0 1 4 this 3 1731  
421 14 Dtool_xqRvXFrF 0 4 431 1675 0 14 Dtool_xqRvXFrF 0 1 4 this 3 1731  
422 14 Dtool_xqRvYU4u 0 7 432 1731 1181 14 Dtool_xqRvYU4u 0 1 4 this 3 1732  
423 14 Dtool_xqRv5nqX 0 7 433 1731 1181 14 Dtool_xqRv5nqX 0 1 4 this 3 1732  
424 14 Dtool_xqRvWEPP 0 7 434 1731 1181 14 Dtool_xqRvWEPP 0 1 4 this 3 1732  
425 14 Dtool_xqRvHbN9 0 7 434 1731 1181 14 Dtool_xqRvHbN9 0 2 4 this 3 1732  5 other 1 1732  
426 14 Dtool_xqRvDpyT 0 7 434 1731 1181 14 Dtool_xqRvDpyT 0 2 4 this 3 1732  5 index 1 1673  
427 14 Dtool_xqRveUY6 0 7 435 1731 1181 14 Dtool_xqRveUY6 0 1 4 this 3 1732  
428 14 Dtool_xqRvyau5 0 7 435 1731 1181 14 Dtool_xqRvyau5 0 2 4 this 3 1732  5 other 1 1732  
429 14 Dtool_xqRviRhU 0 7 435 1731 1181 14 Dtool_xqRviRhU 0 2 4 this 3 1732  5 index 1 1673  
430 14 Dtool_xqRvGYJg 0 6 436 1673 0 14 Dtool_xqRvGYJg 0 1 4 this 3 1732  
431 14 Dtool_xqRvq17v 0 7 437 1684 0 14 Dtool_xqRvq17v 0 0 
432 14 Dtool_xqRvU9bE 0 7 439 1734 1244 14 Dtool_xqRvU9bE 0 0 
433 14 Dtool_xqRv5ezH 0 7 439 1734 1244 14 Dtool_xqRv5ezH 0 1 4 copy 1 1735  
434 14 Dtool_xqRvTcCB 0 7 439 1734 1244 14 Dtool_xqRvTcCB 0 1 10 init_value 1 1737  
435 14 Dtool_xqRv62Cv 0 6 440 1734 0 14 Dtool_xqRv62Cv 0 2 4 this 3 1734  4 copy 1 1735  
436 14 Dtool_xqRv6XLs 0 7 441 1734 1244 14 Dtool_xqRv6XLs 0 0 
437 14 Dtool_xqRvj7E0 0 7 442 1734 1244 14 Dtool_xqRvj7E0 0 0 
438 14 Dtool_xqRvRJ3I 0 7 443 1734 1244 14 Dtool_xqRvRJ3I 0 1 7 on_bits 1 1673  
439 14 Dtool_xqRvfjxv 0 7 444 1734 1244 14 Dtool_xqRvfjxv 0 1 5 index 1 1673  
440 14 Dtool_xqRv6MsD 0 7 445 1734 1244 14 Dtool_xqRv6MsD 0 2 7 low_bit 1 1673  4 size 1 1673  
441 14 Dtool_xqRv3EZO 0 6 447 1682 0 14 Dtool_xqRv3EZO 0 0 
442 14 Dtool_xqRvDK5H 0 6 448 1673 0 14 Dtool_xqRvDK5H 0 0 
443 14 Dtool_xqRvgs2D 0 6 449 1673 0 14 Dtool_xqRvgs2D 0 0 
444 14 Dtool_xqRvC4y6 0 6 450 1682 0 14 Dtool_xqRvC4y6 0 2 4 this 3 1735  5 index 1 1673  
445 14 Dtool_xqRvZ9qJ 0 4 451 1675 0 14 Dtool_xqRvZ9qJ 0 2 4 this 3 1734  5 index 1 1673  
446 14 Dtool_xqRvPD_7 0 4 452 1675 0 14 Dtool_xqRvPD_7 0 2 4 this 3 1734  5 index 1 1673  
447 14 Dtool_xqRveONW 0 4 453 1675 0 14 Dtool_xqRveONW 0 3 4 this 3 1734  5 index 1 1673  5 value 1 1682  
448 14 Dtool_xqRv88_Z 0 6 454 1682 0 14 Dtool_xqRv88_Z 0 1 4 this 3 1735  
449 14 Dtool_xqRvS_1K 0 6 455 1682 0 14 Dtool_xqRvS_1K 0 1 4 this 3 1735  
450 14 Dtool_xqRvDBje 0 6 456 1737 0 14 Dtool_xqRvDBje 0 3 4 this 3 1735  7 low_bit 1 1673  4 size 1 1673  
451 14 Dtool_xqRvu4q5 0 4 457 1675 0 14 Dtool_xqRvu4q5 0 4 4 this 3 1734  5 value 1 1737  7 low_bit 1 1673  4 size 1 1673  
452 14 Dtool_xqRvdWSm 0 6 458 1682 0 14 Dtool_xqRvdWSm 0 3 4 this 3 1735  7 low_bit 1 1673  4 size 1 1673  
453 14 Dtool_xqRv9utt 0 6 459 1682 0 14 Dtool_xqRv9utt 0 3 4 this 3 1735  7 low_bit 1 1673  4 size 1 1673  
454 14 Dtool_xqRv1U5K 0 4 460 1675 0 14 Dtool_xqRv1U5K 0 3 4 this 3 1734  7 low_bit 1 1673  4 size 1 1673  
455 14 Dtool_xqRvbjY5 0 4 461 1675 0 14 Dtool_xqRvbjY5 0 3 4 this 3 1734  7 low_bit 1 1673  4 size 1 1673  
456 14 Dtool_xqRvgM5H 0 4 462 1675 0 14 Dtool_xqRvgM5H 0 4 4 this 3 1734  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
457 14 Dtool_xqRv8DhL 0 6 463 1737 0 14 Dtool_xqRv8DhL 0 1 4 this 3 1735  
458 14 Dtool_xqRvqVn_ 0 4 464 1675 0 14 Dtool_xqRvqVn_ 0 2 4 this 3 1734  5 value 1 1737  
459 14 Dtool_xqRv4Wds 0 6 465 1673 0 14 Dtool_xqRv4Wds 0 1 4 this 3 1735  
460 14 Dtool_xqRvjQFl 0 6 466 1673 0 14 Dtool_xqRvjQFl 0 1 4 this 3 1735  
461 14 Dtool_xqRve7aR 0 6 467 1673 0 14 Dtool_xqRve7aR 0 1 4 this 3 1735  
462 14 Dtool_xqRvCwok 0 6 468 1673 0 14 Dtool_xqRvCwok 0 1 4 this 3 1735  
463 14 Dtool_xqRvBx_b 0 6 469 1673 0 14 Dtool_xqRvBx_b 0 1 4 this 3 1735  
464 14 Dtool_xqRvT2DD 0 6 470 1673 0 14 Dtool_xqRvT2DD 0 1 4 this 3 1735  
465 14 Dtool_xqRvF8hO 0 6 471 1673 0 14 Dtool_xqRvF8hO 0 2 4 this 3 1735  7 low_bit 1 1673  
466 14 Dtool_xqRvZ9Iu 0 4 472 1675 0 14 Dtool_xqRvZ9Iu 0 1 4 this 3 1734  
467 14 Dtool_xqRvSAaD 0 6 473 1682 0 14 Dtool_xqRvSAaD 0 2 4 this 3 1735  5 other 1 1735  
468 14 Dtool_xqRvoQig 0 4 474 1675 0 14 Dtool_xqRvoQig 0 1 4 this 3 1734  
469 14 Dtool_xqRvT6y9 0 4 475 1675 0 14 Dtool_xqRvT6y9 0 2 4 this 3 1735  3 out 1 1678  
470 14 Dtool_xqRvEmrZ 0 4 476 1675 0 14 Dtool_xqRvEmrZ 0 3 4 this 3 1735  3 out 1 1678  12 spaces_every 1 1673  
471 14 Dtool_xqRv8bPK 0 4 476 1675 0 14 Dtool_xqRv8bPK 0 2 4 this 3 1735  3 out 1 1678  
472 14 Dtool_xqRv9ET8 0 4 477 1675 0 14 Dtool_xqRv9ET8 0 3 4 this 3 1735  3 out 1 1678  12 spaces_every 1 1673  
473 14 Dtool_xqRvFAEP 0 4 477 1675 0 14 Dtool_xqRvFAEP 0 2 4 this 3 1735  3 out 1 1678  
474 14 Dtool_xqRvZH30 0 4 478 1675 0 14 Dtool_xqRvZH30 0 3 4 this 3 1735  3 out 1 1678  12 indent_level 1 1673  
475 14 Dtool_xqRvG1R_ 0 4 478 1675 0 14 Dtool_xqRvG1R_ 0 2 4 this 3 1735  3 out 1 1678  
476 14 Dtool_xqRvHeST 0 6 479 1682 0 14 Dtool_xqRvHeST 0 2 4 this 3 1735  5 other 1 1735  
477 14 Dtool_xqRvHPvK 0 6 480 1682 0 14 Dtool_xqRvHPvK 0 2 4 this 3 1735  5 other 1 1735  
478 14 Dtool_xqRvVunG 0 6 481 1682 0 14 Dtool_xqRvVunG 0 2 4 this 3 1735  5 other 1 1735  
479 14 Dtool_xqRvSDp_ 0 6 482 1673 0 14 Dtool_xqRvSDp_ 0 2 4 this 3 1735  5 other 1 1735  
480 14 Dtool_xqRv2H5_ 0 7 483 1734 1244 14 Dtool_xqRv2H5_ 0 2 4 this 3 1735  5 other 1 1735  
481 14 Dtool_xqRvV_Ja 0 7 484 1734 1244 14 Dtool_xqRvV_Ja 0 2 4 this 3 1735  5 other 1 1735  
482 14 Dtool_xqRv1p_Q 0 7 485 1734 1244 14 Dtool_xqRv1p_Q 0 2 4 this 3 1735  5 other 1 1735  
483 14 Dtool_xqRvYbux 0 7 486 1734 1244 14 Dtool_xqRvYbux 0 1 4 this 3 1735  
484 14 Dtool_xqRvjLeS 0 7 487 1734 1244 14 Dtool_xqRvjLeS 0 2 4 this 3 1735  5 shift 1 1673  
485 14 Dtool_xqRvD4nm 0 7 488 1734 1244 14 Dtool_xqRvD4nm 0 2 4 this 3 1735  5 shift 1 1673  
486 14 Dtool_xqRvywOP 0 6 489 1734 0 14 Dtool_xqRvywOP 0 2 4 this 3 1734  5 other 1 1735  
487 14 Dtool_xqRvSGep 0 6 490 1734 0 14 Dtool_xqRvSGep 0 2 4 this 3 1734  5 other 1 1735  
488 14 Dtool_xqRvySUg 0 6 491 1734 0 14 Dtool_xqRvySUg 0 2 4 this 3 1734  5 other 1 1735  
489 14 Dtool_xqRvDSbd 0 6 492 1734 0 14 Dtool_xqRvDSbd 0 2 4 this 3 1734  5 shift 1 1673  
490 14 Dtool_xqRvjHix 0 6 493 1734 0 14 Dtool_xqRvjHix 0 2 4 this 3 1734  5 shift 1 1673  
491 14 Dtool_xqRvojcd 0 4 494 1675 0 14 Dtool_xqRvojcd 0 1 4 this 3 1734  
492 14 Dtool_xqRvtB6e 0 4 495 1675 0 14 Dtool_xqRvtB6e 0 1 4 this 3 1734  
493 14 Dtool_xqRvoufB 0 7 496 1734 1244 14 Dtool_xqRvoufB 0 1 4 this 3 1735  
494 14 Dtool_xqRv4rCk 0 7 497 1734 1244 14 Dtool_xqRv4rCk 0 1 4 this 3 1735  
495 14 Dtool_xqRvXbfv 0 7 498 1734 1244 14 Dtool_xqRvXbfv 0 1 4 this 3 1735  
496 14 Dtool_xqRvol__ 0 7 498 1734 1244 14 Dtool_xqRvol__ 0 2 4 this 3 1735  5 other 1 1735  
497 14 Dtool_xqRv_Axj 0 7 498 1734 1244 14 Dtool_xqRv_Axj 0 2 4 this 3 1735  5 index 1 1673  
498 14 Dtool_xqRv_rNa 0 7 499 1734 1244 14 Dtool_xqRv_rNa 0 1 4 this 3 1735  
499 14 Dtool_xqRvumm_ 0 7 499 1734 1244 14 Dtool_xqRvumm_ 0 2 4 this 3 1735  5 other 1 1735  
500 14 Dtool_xqRvTV1H 0 7 499 1734 1244 14 Dtool_xqRvTV1H 0 2 4 this 3 1735  5 index 1 1673  
501 14 Dtool_xqRvhnlk 0 6 500 1673 0 14 Dtool_xqRvhnlk 0 1 4 this 3 1735  
502 14 Dtool_xqRvOQlp 0 7 501 1684 0 14 Dtool_xqRvOQlp 0 0 
503 14 Dtool_xqRvGMUp 0 7 503 1738 1307 14 Dtool_xqRvGMUp 704 // Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
504 14 Dtool_xqRvbrvy 0 7 503 1738 1307 14 Dtool_xqRvbrvy 225 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1739  
505 14 Dtool_xqRvShJd 0 7 503 1738 1307 14 Dtool_xqRvShJd 239 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1741  
506 14 Dtool_xqRvQUAC 0 7 503 1738 1307 14 Dtool_xqRvQUAC 0 1 10 init_value 1 1670  
507 14 Dtool_xqRve8C3 0 6 504 1738 0 14 Dtool_xqRve8C3 233 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  4 copy 1 1739  
508 14 Dtool_xqRvbBX6 0 7 505 1738 1307 14 Dtool_xqRvbBX6 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
509 14 Dtool_xqRvGQnq 0 7 506 1738 1307 14 Dtool_xqRvGQnq 284 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
510 14 Dtool_xqRvK3PH 0 7 507 1738 1307 14 Dtool_xqRvK3PH 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1673  
511 14 Dtool_xqRvX0f2 0 7 508 1738 1307 14 Dtool_xqRvX0f2 289 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1673  
512 14 Dtool_xqRvPjFX 0 7 509 1738 1307 14 Dtool_xqRvPjFX 323 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1673  4 size 1 1673  
513 14 Dtool_xqRvDxaB 0 6 511 1682 0 14 Dtool_xqRvDxaB 714 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
514 14 Dtool_xqRv_yNZ 0 6 512 1673 0 14 Dtool_xqRv_yNZ 749 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
515 14 Dtool_xqRvSGW6 0 6 513 1673 0 14 Dtool_xqRvSGW6 476 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
//////////////////////////////////////////////////////////////////// 0 
516 14 Dtool_xqRvlwdi 0 6 514 1673 0 14 Dtool_xqRvlwdi 604 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
517 14 Dtool_xqRvLvz8 0 6 515 1682 0 14 Dtool_xqRvLvz8 442 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 index 1 1673  
518 14 Dtool_xqRvrNRV 0 4 516 1675 0 14 Dtool_xqRvrNRV 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 index 1 1673  
519 14 Dtool_xqRv541k 0 4 517 1675 0 14 Dtool_xqRv541k 320 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 index 1 1673  
520 14 Dtool_xqRvQgnd 0 4 518 1675 0 14 Dtool_xqRvQgnd 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1738  5 index 1 1673  5 value 1 1682  
521 14 Dtool_xqRvHjU1 0 6 519 1682 0 14 Dtool_xqRvHjU1 364 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
522 14 Dtool_xqRvT0xX 0 6 520 1682 0 14 Dtool_xqRvT0xX 294 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
523 14 Dtool_xqRvr4Sd 0 6 521 1682 0 14 Dtool_xqRvr4Sd 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
524 14 Dtool_xqRvPS63 0 6 522 1670 0 14 Dtool_xqRvPS63 438 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  7 low_bit 1 1673  4 size 1 1673  
525 14 Dtool_xqRvAQuf 0 4 523 1675 0 14 Dtool_xqRvAQuf 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1738  5 value 1 1670  7 low_bit 1 1673  4 size 1 1673  
526 14 Dtool_xqRvBUJy 0 6 524 1682 0 14 Dtool_xqRvBUJy 308 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  7 low_bit 1 1673  4 size 1 1673  
527 14 Dtool_xqRvybWy 0 6 525 1682 0 14 Dtool_xqRvybWy 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  7 low_bit 1 1673  4 size 1 1673  
528 14 Dtool_xqRvv8Tr 0 4 526 1675 0 14 Dtool_xqRvv8Tr 255 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1738  7 low_bit 1 1673  4 size 1 1673  
529 14 Dtool_xqRvfuvM 0 4 527 1675 0 14 Dtool_xqRvfuvM 258 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1738  7 low_bit 1 1673  4 size 1 1673  
530 14 Dtool_xqRvAEMB 0 4 528 1675 0 14 Dtool_xqRvAEMB 275 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1738  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
531 14 Dtool_xqRvO1Ve 0 6 529 1673 0 14 Dtool_xqRvO1Ve 372 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
532 14 Dtool_xqRvsqGY 0 6 530 1673 0 14 Dtool_xqRvsqGY 373 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
533 14 Dtool_xqRvbpfv 0 6 531 1673 0 14 Dtool_xqRvbpfv 330 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
534 14 Dtool_xqRviKFY 0 6 532 1673 0 14 Dtool_xqRviKFY 331 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
535 14 Dtool_xqRvstzx 0 6 533 1673 0 14 Dtool_xqRvstzx 390 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
536 14 Dtool_xqRvEmCF 0 6 534 1673 0 14 Dtool_xqRvEmCF 391 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
537 14 Dtool_xqRv_eW1 0 6 535 1673 0 14 Dtool_xqRv_eW1 591 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  7 low_bit 1 1673  
538 14 Dtool_xqRvVjn8 0 6 536 1673 0 14 Dtool_xqRvVjn8 304 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
539 14 Dtool_xqRv85dk 0 7 537 1731 1181 14 Dtool_xqRv85dk 410 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  1 n 1 1673  
540 14 Dtool_xqRvPLIH 0 4 538 1675 0 14 Dtool_xqRvPLIH 351 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1738  1 n 1 1673  5 value 1 1731  
541 14 Dtool_xqRvhGZ4 0 4 539 1675 0 14 Dtool_xqRvhGZ4 318 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1738  
542 14 Dtool_xqRvseqE 0 6 540 1682 0 14 Dtool_xqRvseqE 440 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
543 14 Dtool_xqRvKXAk 0 4 541 1675 0 14 Dtool_xqRvKXAk 253 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1738  
544 14 Dtool_xqRvgv5a 0 4 542 1675 0 14 Dtool_xqRvgv5a 443 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  3 out 1 1678  
545 14 Dtool_xqRvk9tp 0 4 543 1675 0 14 Dtool_xqRvk9tp 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  3 out 1 1678  12 spaces_every 1 1673  
546 14 Dtool_xqRvLRPz 0 4 543 1675 0 14 Dtool_xqRvLRPz 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  3 out 1 1678  
547 14 Dtool_xqRvMpy4 0 4 544 1675 0 14 Dtool_xqRvMpy4 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  3 out 1 1678  12 spaces_every 1 1673  
548 14 Dtool_xqRvxwaB 0 4 544 1675 0 14 Dtool_xqRvxwaB 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  3 out 1 1678  
549 14 Dtool_xqRvWflc 0 4 545 1675 0 14 Dtool_xqRvWflc 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1739  3 out 1 1678  12 indent_level 1 1673  
550 14 Dtool_xqRvVe5g 0 4 545 1675 0 14 Dtool_xqRvVe5g 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  3 out 1 1678  
551 14 Dtool_xqRv5zlA 0 6 546 1682 0 14 Dtool_xqRv5zlA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
552 14 Dtool_xqRvbpSA 0 6 547 1682 0 14 Dtool_xqRvbpSA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
553 14 Dtool_xqRvbO7u 0 6 548 1682 0 14 Dtool_xqRvbO7u 381 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
554 14 Dtool_xqRvzJr4 0 6 549 1673 0 14 Dtool_xqRvzJr4 487 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
555 14 Dtool_xqRvoqtu 0 7 550 1738 1307 14 Dtool_xqRvoqtu 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
556 14 Dtool_xqRv7Jiv 0 7 551 1738 1307 14 Dtool_xqRv7Jiv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
557 14 Dtool_xqRvk9Pv 0 7 552 1738 1307 14 Dtool_xqRvk9Pv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 other 1 1739  
558 14 Dtool_xqRvD0gS 0 7 553 1738 1307 14 Dtool_xqRvD0gS 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1739  
559 14 Dtool_xqRvphhp 0 7 554 1738 1307 14 Dtool_xqRvphhp 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 shift 1 1673  
560 14 Dtool_xqRvwzJq 0 7 555 1738 1307 14 Dtool_xqRvwzJq 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1739  5 shift 1 1673  
561 14 Dtool_xqRvvQVj 0 6 556 1738 0 14 Dtool_xqRvvQVj 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 other 1 1739  
562 14 Dtool_xqRv6_Jk 0 6 557 1738 0 14 Dtool_xqRv6_Jk 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 other 1 1739  
563 14 Dtool_xqRvjr3j 0 6 558 1738 0 14 Dtool_xqRvjr3j 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 other 1 1739  
564 14 Dtool_xqRv9z5r 0 6 559 1738 0 14 Dtool_xqRv9z5r 399 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 shift 1 1673  
565 14 Dtool_xqRvUhhs 0 6 560 1738 0 14 Dtool_xqRvUhhs 449 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1738  5 shift 1 1673  
566 14 Dtool_xqRv1IRw 0 7 561 1684 0 14 Dtool_xqRv1IRw 0 0 
567 14 Dtool_xqRv40bO 0 7 563 1743 1369 14 Dtool_xqRv40bO 1027 // Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
568 14 Dtool_xqRv53AF 0 7 563 1743 1369 14 Dtool_xqRv53AF 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
//////////////////////////////////////////////////////////////////// 1 5 index 1 1673  
569 14 Dtool_xqRvoq06 0 6 564 1672 0 14 Dtool_xqRvoq06 250 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
570 14 Dtool_xqRv2_MD 0 6 565 1682 0 14 Dtool_xqRv2_MD 375 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
571 14 Dtool_xqRvvhsY 0 6 566 1746 0 14 Dtool_xqRvvhsY 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
572 14 Dtool_xqRvTr0x 0 7 567 1743 1369 14 Dtool_xqRvTr0x 692 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
573 14 Dtool_xqRvpu5Z 0 6 568 1682 0 14 Dtool_xqRvpu5Z 532 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1744  5 other 1 1744  
574 14 Dtool_xqRviajp 0 6 569 1673 0 14 Dtool_xqRviajp 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
575 14 Dtool_xqRv6vL2 0 4 570 1675 0 14 Dtool_xqRv6vL2 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1744  3 out 1 1678  
576 14 Dtool_xqRvXMlV 0 7 571 1743 1369 14 Dtool_xqRvXMlV 321 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
//////////////////////////////////////////////////////////////////// 0 
577 14 Dtool_xqRvmThD 0 7 572 1684 0 14 Dtool_xqRvmThD 0 0 
578 14 Dtool_xqRvKZsi 0 7 575 1743 1369 14 Dtool_xqRvKZsi 396 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  4 name 1 1672  
579 14 Dtool_xqRvuc8u 0 7 576 1743 1369 14 Dtool_xqRvuc8u 419 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1748  16 ascii_equivalent 1 1746  
580 14 Dtool_xqRv_iXj 0 4 577 1675 0 14 Dtool_xqRv_iXj 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1748  3 out 1 1678  
581 14 Dtool_xqRvdgyc 0 6 578 1747 0 14 Dtool_xqRvdgyc 300 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
582 14 Dtool_xqRvNGJJ 0 4 582 1675 0 14 Dtool_xqRvNGJJ 230 ////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1750  3 out 1 1678  
583 14 Dtool_xqRvtUug 0 7 583 1684 0 14 Dtool_xqRvtUug 0 0 
584 14 Dtool_xqRv3cWf 0 6 586 1673 0 14 Dtool_xqRv3cWf 290 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1752  
585 14 Dtool_xqRvEGtE 0 4 587 1675 0 14 Dtool_xqRvEGtE 355 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1752  
586 14 Dtool_xqRvC2Hz 0 6 588 1682 0 14 Dtool_xqRvC2Hz 479 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1752  
587 14 Dtool_xqRvbkjU 0 6 589 1682 0 14 Dtool_xqRvbkjU 359 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1752  
588 14 Dtool_xqRvXAeA 0 7 590 1684 0 14 Dtool_xqRvXAeA 0 0 
589 14 Dtool_xqRvykHH 0 4 592 1675 0 14 Dtool_xqRvykHH 228 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  3 out 1 1678  
590 14 Dtool_xqRvJxUp 0 4 593 1675 0 14 Dtool_xqRvJxUp 408 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1756  
591 14 Dtool_xqRvfdeU 0 7 594 1684 0 14 Dtool_xqRvfdeU 0 0 
592 14 Dtool_xqRvZzSC 0 7 597 1757 1390 14 Dtool_xqRvZzSC 218 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
593 14 Dtool_xqRv2ZxR 0 6 598 1760 0 14 Dtool_xqRv2ZxR 215 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
594 14 Dtool_xqRvalc7 0 6 599 1760 0 14 Dtool_xqRvalc7 216 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
595 14 Dtool_xqRvwP2R 0 7 604 1761 0 14 Dtool_xqRvwP2R 223 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
596 14 Dtool_xqRvDhry 0 7 604 1761 0 14 Dtool_xqRvDhry 229 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1762  
597 14 Dtool_xqRvsf6_ 0 4 605 1675 0 14 Dtool_xqRvsf6_ 2596 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  4 mode 1 1649  
598 14 Dtool_xqRvC0lD 0 6 606 1649 0 14 Dtool_xqRvC0lD 293 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
599 14 Dtool_xqRvIvyW 0 6 607 1692 0 14 Dtool_xqRvIvyW 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
600 14 Dtool_xqRvQ13s 0 6 607 1692 0 14 Dtool_xqRvQ13s 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
601 14 Dtool_xqRv94v7 0 6 608 1692 0 14 Dtool_xqRv94v7 769 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
602 14 Dtool_xqRv8RD3 0 6 609 1692 0 14 Dtool_xqRv8RD3 773 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
603 14 Dtool_xqRvVWd9 0 4 610 1675 0 14 Dtool_xqRvVWd9 299 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1761  
604 14 Dtool_xqRvx4ev 0 4 611 1675 0 14 Dtool_xqRvx4ev 607 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  4 time 1 1692  
605 14 Dtool_xqRvJ8vm 0 4 612 1675 0 14 Dtool_xqRvJ8vm 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1761  4 time 1 1692  14 current_thread 1 1764  
606 14 Dtool_xqRv2d9O 0 4 612 1675 0 14 Dtool_xqRv2d9O 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  4 time 1 1692  
607 14 Dtool_xqRvT6Z9 0 4 613 1675 0 14 Dtool_xqRvT6Z9 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1761  11 frame_count 1 1673  14 current_thread 1 1764  
608 14 Dtool_xqRvc2uN 0 4 613 1675 0 14 Dtool_xqRvc2uN 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  11 frame_count 1 1673  
609 14 Dtool_xqRv7u4X 0 6 614 1673 0 14 Dtool_xqRv7u4X 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
610 14 Dtool_xqRvmz0Y 0 6 614 1673 0 14 Dtool_xqRvmz0Y 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
611 14 Dtool_xqRvhgnR 0 6 615 1692 0 14 Dtool_xqRvhgnR 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
612 14 Dtool_xqRviXAn 0 6 615 1692 0 14 Dtool_xqRviXAn 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
613 14 Dtool_xqRvNolu 0 6 616 1692 0 14 Dtool_xqRvNolu 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
614 14 Dtool_xqRvsvG2 0 6 616 1692 0 14 Dtool_xqRvsvG2 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
615 14 Dtool_xqRvMQK2 0 4 617 1675 0 14 Dtool_xqRvMQK2 575 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  2 dt 1 1692  
616 14 Dtool_xqRv3_E3 0 4 618 1675 0 14 Dtool_xqRv3_E3 583 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  10 frame_rate 1 1692  
617 14 Dtool_xqRva66A 0 6 619 1692 0 14 Dtool_xqRva66A 333 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
618 14 Dtool_xqRv_bSs 0 4 620 1675 0 14 Dtool_xqRv_bSs 872 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  6 max_dt 1 1692  
619 14 Dtool_xqRvYmhR 0 6 621 1692 0 14 Dtool_xqRvYmhR 544 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
620 14 Dtool_xqRvTHAP 0 4 622 1675 0 14 Dtool_xqRvTHAP 541 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  14 degrade_factor 1 1692  
621 14 Dtool_xqRvh4_P 0 4 623 1675 0 14 Dtool_xqRvh4_P 729 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  4 time 1 1692  
622 14 Dtool_xqRv1N1j 0 6 624 1692 0 14 Dtool_xqRv1N1j 423 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
623 14 Dtool_xqRv7sfw 0 6 625 1692 0 14 Dtool_xqRv7sfw 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
624 14 Dtool_xqRvBu1t 0 6 625 1692 0 14 Dtool_xqRvBu1t 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
625 14 Dtool_xqRvHcI3 0 6 626 1692 0 14 Dtool_xqRvHcI3 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
626 14 Dtool_xqRv55e0 0 6 626 1692 0 14 Dtool_xqRv55e0 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
627 14 Dtool_xqRvt0YZ 0 6 627 1692 0 14 Dtool_xqRvt0YZ 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  14 current_thread 1 1764  
628 14 Dtool_xqRvELKd 0 6 627 1692 0 14 Dtool_xqRvELKd 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1762  
629 14 Dtool_xqRvo_ml 0 4 628 1675 0 14 Dtool_xqRvo_ml 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  14 current_thread 1 1764  
630 14 Dtool_xqRvnDUl 0 4 628 1675 0 14 Dtool_xqRvnDUl 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1761  
631 14 Dtool_xqRv__EV 0 4 629 1675 0 14 Dtool_xqRv__EV 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  14 current_thread 1 1764  
632 14 Dtool_xqRvA_dx 0 4 629 1675 0 14 Dtool_xqRvA_dx 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1761  
633 14 Dtool_xqRvUzG_ 0 6 630 1682 0 14 Dtool_xqRvUzG_ 609 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  14 current_thread 1 1764  
634 14 Dtool_xqRvb_iD 0 7 631 1761 0 14 Dtool_xqRvb_iD 408 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
//////////////////////////////////////////////////////////////////// 0 
635 14 Dtool_xqRv9oIg 0 7 632 1684 0 14 Dtool_xqRv9oIg 0 0 
636 14 Dtool_xqRvPniS 0 4 636 1675 0 14 Dtool_xqRvPniS 279 ////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1766  
637 14 Dtool_xqRv8TRR 0 7 637 1684 0 14 Dtool_xqRv8TRR 0 0 
638 14 Dtool_xqRvk62i 0 7 641 1768 0 14 Dtool_xqRvk62i 722 // Filename: datagramInputFile.I
// Created by:  drose (30Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
639 14 Dtool_xqRvy35T 0 6 642 1682 0 14 Dtool_xqRvy35T 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1768  4 file 1 1769  
640 14 Dtool_xqRv4uPI 0 6 642 1682 0 14 Dtool_xqRv4uPI 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1768  8 filename 1 1709  
641 14 Dtool_xqRv__gR 0 6 642 1682 0 14 Dtool_xqRv__gR 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1768  2 in 1 1772  8 filename 1 1709  
642 14 Dtool_xqRvD1q2 0 6 642 1682 0 14 Dtool_xqRvD1q2 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1768  2 in 1 1772  
643 14 Dtool_xqRvQgeb 0 6 643 1772 0 14 Dtool_xqRvQgeb 279 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
644 14 Dtool_xqRvIdsK 0 4 644 1675 0 14 Dtool_xqRvIdsK 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
645 14 Dtool_xqRv0u9G 0 6 645 1682 0 14 Dtool_xqRv0u9G 535 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1768  6 header 1 1701  9 num_bytes 1 1670  
646 14 Dtool_xqRvubDB 0 7 647 1743 1369 14 Dtool_xqRvubDB 468 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1672  
647 14 Dtool_xqRvf5oq 0 7 647 1743 1369 14 Dtool_xqRvf5oq 394 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1746  
648 14 Dtool_xqRvwvOd 0 7 648 1743 1369 14 Dtool_xqRvwvOd 0 0 
649 14 Dtool_xqRvwFyx 0 7 649 1743 1369 14 Dtool_xqRvwFyx 0 0 
650 14 Dtool_xqRvJuf_ 0 7 650 1743 1369 14 Dtool_xqRvJuf_ 0 0 
651 14 Dtool_xqRvjDap 0 7 651 1743 1369 14 Dtool_xqRvjDap 0 0 
652 14 Dtool_xqRvrLDY 0 7 652 1743 1369 14 Dtool_xqRvrLDY 0 0 
653 14 Dtool_xqRv1OGt 0 7 653 1743 1369 14 Dtool_xqRv1OGt 0 0 
654 14 Dtool_xqRv2OUJ 0 7 654 1743 1369 14 Dtool_xqRv2OUJ 0 0 
655 14 Dtool_xqRvwOil 0 7 655 1743 1369 14 Dtool_xqRvwOil 0 0 
656 14 Dtool_xqRv9OwB 0 7 656 1743 1369 14 Dtool_xqRv9OwB 0 0 
657 14 Dtool_xqRv_O_d 0 7 657 1743 1369 14 Dtool_xqRv_O_d 0 0 
658 14 Dtool_xqRv5OM6 0 7 658 1743 1369 14 Dtool_xqRv5OM6 0 0 
659 14 Dtool_xqRv6OaW 0 7 659 1743 1369 14 Dtool_xqRv6OaW 0 0 
660 14 Dtool_xqRvkOoy 0 7 660 1743 1369 14 Dtool_xqRvkOoy 0 0 
661 14 Dtool_xqRvhO2O 0 7 661 1743 1369 14 Dtool_xqRvhO2O 0 0 
662 14 Dtool_xqRvLFnR 0 7 662 1743 1369 14 Dtool_xqRvLFnR 0 0 
663 14 Dtool_xqRvZanY 0 7 663 1743 1369 14 Dtool_xqRvZanY 0 0 
664 14 Dtool_xqRvvbnf 0 7 664 1743 1369 14 Dtool_xqRvvbnf 0 0 
665 14 Dtool_xqRv9Ynm 0 7 665 1743 1369 14 Dtool_xqRv9Ynm 59 // PC keyboards don't have these four buttons, but Macs do. 0 
666 14 Dtool_xqRvDent 0 7 666 1743 1369 14 Dtool_xqRvDent 59 // PC keyboards don't have these four buttons, but Macs do. 0 
667 14 Dtool_xqRvRfn0 0 7 667 1743 1369 14 Dtool_xqRvRfn0 0 0 
668 14 Dtool_xqRvncn7 0 7 668 1743 1369 14 Dtool_xqRvncn7 0 0 
669 14 Dtool_xqRvgrB1 0 7 669 1743 1369 14 Dtool_xqRvgrB1 0 0 
670 14 Dtool_xqRvbHch 0 7 670 1743 1369 14 Dtool_xqRvbHch 0 0 
671 14 Dtool_xqRvuoHo 0 7 671 1743 1369 14 Dtool_xqRvuoHo 0 0 
672 14 Dtool_xqRvf_Gf 0 7 672 1743 1369 14 Dtool_xqRvf_Gf 0 0 
673 14 Dtool_xqRv7XIX 0 7 673 1743 1369 14 Dtool_xqRv7XIX 0 0 
674 14 Dtool_xqRvQsHF 0 7 674 1743 1369 14 Dtool_xqRvQsHF 0 0 
675 14 Dtool_xqRvr4iM 0 7 675 1743 1369 14 Dtool_xqRvr4iM 0 0 
676 14 Dtool_xqRv1_Fy 0 7 676 1743 1369 14 Dtool_xqRv1_Fy 0 0 
677 14 Dtool_xqRvImkh 0 7 677 1743 1369 14 Dtool_xqRvImkh 0 0 
678 14 Dtool_xqRvYsPn 0 7 678 1743 1369 14 Dtool_xqRvYsPn 0 0 
679 14 Dtool_xqRvDudL 0 7 679 1743 1369 14 Dtool_xqRvDudL 27 // delete is a C++ keyword. 0 
680 14 Dtool_xqRv0QFY 0 7 680 1743 1369 14 Dtool_xqRv0QFY 0 0 
681 14 Dtool_xqRvn_Xd 0 7 681 1743 1369 14 Dtool_xqRvn_Xd 0 0 
682 14 Dtool_xqRvaaIW 0 7 682 1743 1369 14 Dtool_xqRvaaIW 0 0 
683 14 Dtool_xqRvvAt7 0 7 683 1743 1369 14 Dtool_xqRvvAt7 0 0 
684 14 Dtool_xqRvnQ06 0 7 684 1743 1369 14 Dtool_xqRvnQ06 0 0 
685 14 Dtool_xqRvKGms 0 7 685 1743 1369 14 Dtool_xqRvKGms 0 0 
686 14 Dtool_xqRvUJca 0 7 686 1743 1369 14 Dtool_xqRvUJca 0 0 
687 14 Dtool_xqRvk1PW 0 7 687 1743 1369 14 Dtool_xqRvk1PW 0 0 
688 14 Dtool_xqRvetDN 0 7 688 1743 1369 14 Dtool_xqRvetDN 0 0 
689 14 Dtool_xqRvTidz 0 7 689 1743 1369 14 Dtool_xqRvTidz 0 0 
690 14 Dtool_xqRv20qs 0 7 690 1743 1369 14 Dtool_xqRv20qs 0 0 
691 14 Dtool_xqRv1s_J 0 7 691 1743 1369 14 Dtool_xqRv1s_J 0 0 
692 14 Dtool_xqRvja3V 0 7 692 1743 1369 14 Dtool_xqRvja3V 0 0 
693 14 Dtool_xqRvjiKz 0 7 693 1743 1369 14 Dtool_xqRvjiKz 0 0 
694 14 Dtool_xqRv3iJu 0 7 694 1743 1369 14 Dtool_xqRv3iJu 0 0 
695 14 Dtool_xqRv0acL 0 7 695 1743 1369 14 Dtool_xqRv0acL 0 0 
696 14 Dtool_xqRvXztw 0 7 699 1774 1484 14 Dtool_xqRvXztw 705 // Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
697 14 Dtool_xqRvrsxw 0 6 700 1682 0 14 Dtool_xqRvrsxw 458 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1775  
698 14 Dtool_xqRv1ylt 0 6 701 1672 0 14 Dtool_xqRv1ylt 540 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
699 14 Dtool_xqRvTJFM 0 6 702 1682 0 14 Dtool_xqRvTJFM 460 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1775  
700 14 Dtool_xqRvUVR4 0 7 709 1777 1490 14 Dtool_xqRvUVR4 227 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
701 14 Dtool_xqRvPxfU 0 7 709 1777 1490 14 Dtool_xqRvPxfU 232 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1778  
702 14 Dtool_xqRvfwyS 0 6 711 1777 0 14 Dtool_xqRvfwyS 731 // Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  4 copy 1 1778  
703 14 Dtool_xqRvahow 0 6 712 1682 0 14 Dtool_xqRvahow 546 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
704 14 Dtool_xqRvig3N 0 6 713 1682 0 14 Dtool_xqRvig3N 235 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
705 14 Dtool_xqRvzaOV 0 6 714 1682 0 14 Dtool_xqRvzaOV 233 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
706 14 Dtool_xqRv46nn 0 7 715 1777 1490 14 Dtool_xqRv46nn 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
707 14 Dtool_xqRvea_2 0 7 716 1777 1490 14 Dtool_xqRvea_2 527 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
708 14 Dtool_xqRv1hOw 0 6 717 1777 0 14 Dtool_xqRv1hOw 338 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  5 other 1 1778  
709 14 Dtool_xqRvLBn_ 0 6 718 1777 0 14 Dtool_xqRvLBn_ 437 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  5 other 1 1778  
710 14 Dtool_xqRv_tdp 0 4 719 1675 0 14 Dtool_xqRv_tdp 698 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  5 other 1 1778  
711 14 Dtool_xqRvzNfr 0 6 720 1682 0 14 Dtool_xqRvzNfr 504 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 other 1 1778  
712 14 Dtool_xqRvTLZg 0 6 721 1682 0 14 Dtool_xqRvTLZg 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  6 button 1 1743  
713 14 Dtool_xqRvMHRl 0 6 722 1682 0 14 Dtool_xqRvMHRl 339 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  6 button 1 1743  
714 14 Dtool_xqRviuBm 0 6 723 1682 0 14 Dtool_xqRviuBm 623 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  6 button 1 1743  
715 14 Dtool_xqRvw9C5 0 6 724 1673 0 14 Dtool_xqRvw9C5 394 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
716 14 Dtool_xqRvKJca 0 7 725 1743 1369 14 Dtool_xqRvKJca 446 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 index 1 1673  
717 14 Dtool_xqRvigE5 0 6 726 1682 0 14 Dtool_xqRvigE5 597 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  6 button 1 1743  
718 14 Dtool_xqRv3WnW 0 6 727 1682 0 14 Dtool_xqRv3WnW 596 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  6 button 1 1743  
719 14 Dtool_xqRveJ_1 0 4 728 1675 0 14 Dtool_xqRveJ_1 303 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1777  
720 14 Dtool_xqRv6vCj 0 6 729 1682 0 14 Dtool_xqRv6vCj 401 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  6 button 1 1743  
721 14 Dtool_xqRvucQV 0 6 729 1682 0 14 Dtool_xqRvucQV 332 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 index 1 1673  
722 14 Dtool_xqRvS0db 0 6 730 1682 0 14 Dtool_xqRvS0db 340 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
723 14 Dtool_xqRv9FCN 0 6 731 1672 0 14 Dtool_xqRv9FCN 397 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
724 14 Dtool_xqRvbeaY 0 4 732 1675 0 14 Dtool_xqRvbeaY 298 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  3 out 1 1678  
725 14 Dtool_xqRvDRR3 0 4 733 1675 0 14 Dtool_xqRvDRR3 365 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  3 out 1 1678  
726 14 Dtool_xqRva24C 0 7 735 1743 1369 14 Dtool_xqRva24C 424 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
//////////////////////////////////////////////////////////////////// 1 13 button_number 1 1673  
727 14 Dtool_xqRvRfhO 0 7 736 1743 1369 14 Dtool_xqRvRfhO 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_xqRv6jlR 0 7 737 1743 1369 14 Dtool_xqRv6jlR 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
//////////////////////////////////////////////////////////////////// 0 
729 14 Dtool_xqRvhxQB 0 7 738 1743 1369 14 Dtool_xqRvhxQB 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
//////////////////////////////////////////////////////////////////// 0 
730 14 Dtool_xqRvQnfN 0 7 739 1743 1369 14 Dtool_xqRvQnfN 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
//////////////////////////////////////////////////////////////////// 0 
731 14 Dtool_xqRvBJKu 0 7 740 1743 1369 14 Dtool_xqRvBJKu 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
//////////////////////////////////////////////////////////////////// 0 
732 14 Dtool_xqRvCrvD 0 7 741 1743 1369 14 Dtool_xqRvCrvD 327 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
//////////////////////////////////////////////////////////////////// 0 
733 14 Dtool_xqRvFLlN 0 7 742 1743 1369 14 Dtool_xqRvFLlN 331 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
//////////////////////////////////////////////////////////////////// 0 
734 14 Dtool_xqRvrYQ3 0 7 743 1743 1369 14 Dtool_xqRvrYQ3 396 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
735 14 Dtool_xqRvxvFe 0 7 744 1743 1369 14 Dtool_xqRvxvFe 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
736 14 Dtool_xqRvLqpQ 0 6 745 1682 0 14 Dtool_xqRvLqpQ 353 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
//////////////////////////////////////////////////////////////////// 1 6 button 1 1743  
737 14 Dtool_xqRvgWcW 0 7 748 1780 1532 14 Dtool_xqRvgWcW 706 // Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
738 14 Dtool_xqRvja_u 0 7 748 1780 1532 14 Dtool_xqRvja_u 226 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1781  
739 14 Dtool_xqRvqtbu 0 6 749 1780 0 14 Dtool_xqRvqtbu 234 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1780  4 copy 1 1781  
740 14 Dtool_xqRvRo5w 0 6 750 1673 0 14 Dtool_xqRvRo5w 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1781  
741 14 Dtool_xqRvp4Dx 0 6 751 1673 0 14 Dtool_xqRvp4Dx 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1781  
742 14 Dtool_xqRv370X 0 6 752 1682 0 14 Dtool_xqRv370X 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1781  
743 14 Dtool_xqRvlQkK 0 4 753 1675 0 14 Dtool_xqRvlQkK 216 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1781  3 out 1 1678  
744 14 Dtool_xqRvHv2I 0 6 756 1673 0 14 Dtool_xqRvHv2I 280 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1783  
745 14 Dtool_xqRvC_qZ 0 4 757 1675 0 14 Dtool_xqRvC_qZ 662 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1783  
746 14 Dtool_xqRv35Q1 0 6 758 1682 0 14 Dtool_xqRv35Q1 468 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1783  
747 14 Dtool_xqRv6xUo 0 6 759 1682 0 14 Dtool_xqRv6xUo 350 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1783  
748 14 Dtool_xqRvwI10 0 6 761 1673 0 14 Dtool_xqRvwI10 600 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1783  
749 14 Dtool_xqRv_DaH 0 7 762 1684 0 14 Dtool_xqRv_DaH 0 0 
750 14 Dtool_xqRvZthJ 0 7 764 1785 1546 14 Dtool_xqRvZthJ 710 // Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
751 14 Dtool_xqRvbAWk 0 7 764 1785 1546 14 Dtool_xqRvbAWk 239 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1739  
752 14 Dtool_xqRvtTb_ 0 7 764 1785 1546 14 Dtool_xqRvtTb_ 228 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1741  
753 14 Dtool_xqRv4Q2p 0 6 765 1785 0 14 Dtool_xqRv4Q2p 236 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  4 copy 1 1741  
754 14 Dtool_xqRveCtD 0 7 766 1785 1546 14 Dtool_xqRveCtD 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
755 14 Dtool_xqRvSVTc 0 7 767 1785 1546 14 Dtool_xqRvSVTc 290 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
756 14 Dtool_xqRvbAVG 0 7 768 1785 1546 14 Dtool_xqRvbAVG 301 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1673  
757 14 Dtool_xqRvHLUD 0 7 769 1785 1546 14 Dtool_xqRvHLUD 295 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1673  
758 14 Dtool_xqRvviAa 0 7 770 1785 1546 14 Dtool_xqRvviAa 329 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1673  4 size 1 1673  
759 14 Dtool_xqRvyhdr 0 6 772 1682 0 14 Dtool_xqRvyhdr 723 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
760 14 Dtool_xqRvIjIo 0 6 773 1673 0 14 Dtool_xqRvIjIo 758 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
761 14 Dtool_xqRvK3uW 0 6 774 1673 0 14 Dtool_xqRvK3uW 607 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
762 14 Dtool_xqRv5yj_ 0 6 775 1682 0 14 Dtool_xqRv5yj_ 445 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 index 1 1673  
763 14 Dtool_xqRvuAn8 0 4 776 1675 0 14 Dtool_xqRvuAn8 320 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 index 1 1673  
764 14 Dtool_xqRvSHy4 0 4 777 1675 0 14 Dtool_xqRvSHy4 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 index 1 1673  
765 14 Dtool_xqRvHYp8 0 4 778 1675 0 14 Dtool_xqRvHYp8 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1785  5 index 1 1673  5 value 1 1682  
766 14 Dtool_xqRvyw5L 0 6 779 1682 0 14 Dtool_xqRvyw5L 367 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
767 14 Dtool_xqRvRZfM 0 6 780 1682 0 14 Dtool_xqRvRZfM 297 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
768 14 Dtool_xqRv6InZ 0 6 781 1682 0 14 Dtool_xqRv6InZ 298 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
769 14 Dtool_xqRvq1o_ 0 6 782 1682 0 14 Dtool_xqRvq1o_ 311 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1741  7 low_bit 1 1673  4 size 1 1673  
770 14 Dtool_xqRvVHiQ 0 6 783 1682 0 14 Dtool_xqRvVHiQ 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1741  7 low_bit 1 1673  4 size 1 1673  
771 14 Dtool_xqRvygC6 0 4 784 1675 0 14 Dtool_xqRvygC6 258 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1785  7 low_bit 1 1673  4 size 1 1673  
772 14 Dtool_xqRvbx1k 0 4 785 1675 0 14 Dtool_xqRvbx1k 261 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1785  7 low_bit 1 1673  4 size 1 1673  
773 14 Dtool_xqRvnzgz 0 4 786 1675 0 14 Dtool_xqRvnzgz 278 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1785  5 value 1 1682  7 low_bit 1 1673  4 size 1 1673  
774 14 Dtool_xqRvHz9G 0 6 787 1673 0 14 Dtool_xqRvHz9G 375 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
775 14 Dtool_xqRvkQdG 0 6 788 1673 0 14 Dtool_xqRvkQdG 376 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
776 14 Dtool_xqRvWgXl 0 6 789 1673 0 14 Dtool_xqRvWgXl 395 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
777 14 Dtool_xqRvBWcH 0 6 790 1673 0 14 Dtool_xqRvBWcH 396 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
778 14 Dtool_xqRv2kpz 0 6 791 1673 0 14 Dtool_xqRv2kpz 393 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
779 14 Dtool_xqRvVaJ2 0 6 792 1673 0 14 Dtool_xqRvVaJ2 394 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
780 14 Dtool_xqRvgUV7 0 6 793 1673 0 14 Dtool_xqRvgUV7 594 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  7 low_bit 1 1673  
781 14 Dtool_xqRvUZSJ 0 4 794 1675 0 14 Dtool_xqRvUZSJ 324 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1785  
782 14 Dtool_xqRv_DNe 0 6 795 1682 0 14 Dtool_xqRv_DNe 446 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
783 14 Dtool_xqRvbfjR 0 4 796 1675 0 14 Dtool_xqRvbfjR 259 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1785  
784 14 Dtool_xqRvYNW_ 0 4 797 1675 0 14 Dtool_xqRvYNW_ 219 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  3 out 1 1678  
785 14 Dtool_xqRv0ws5 0 6 798 1682 0 14 Dtool_xqRv0ws5 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
786 14 Dtool_xqRv8_cN 0 6 799 1682 0 14 Dtool_xqRv8_cN 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
787 14 Dtool_xqRvjHgr 0 6 800 1682 0 14 Dtool_xqRvjHgr 387 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
788 14 Dtool_xqRv7lhn 0 6 801 1673 0 14 Dtool_xqRv7lhn 513 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
789 14 Dtool_xqRvYF4R 0 7 802 1785 1546 14 Dtool_xqRvYF4R 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
790 14 Dtool_xqRv8cgH 0 7 803 1785 1546 14 Dtool_xqRv8cgH 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
791 14 Dtool_xqRvJBYq 0 7 804 1785 1546 14 Dtool_xqRvJBYq 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 other 1 1741  
792 14 Dtool_xqRvV3mC 0 7 805 1785 1546 14 Dtool_xqRvV3mC 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
793 14 Dtool_xqRvQZHC 0 7 806 1785 1546 14 Dtool_xqRvQZHC 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 shift 1 1673  
794 14 Dtool_xqRvun_O 0 7 807 1785 1546 14 Dtool_xqRvun_O 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  5 shift 1 1673  
795 14 Dtool_xqRvrxEk 0 6 808 1785 0 14 Dtool_xqRvrxEk 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 other 1 1741  
796 14 Dtool_xqRvP4sZ 0 6 809 1785 0 14 Dtool_xqRvP4sZ 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 other 1 1741  
797 14 Dtool_xqRv81k8 0 6 810 1785 0 14 Dtool_xqRv81k8 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 other 1 1741  
798 14 Dtool_xqRvDi5u 0 6 811 1785 0 14 Dtool_xqRvDi5u 406 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 shift 1 1673  
799 14 Dtool_xqRvFnx7 0 6 812 1785 0 14 Dtool_xqRvFnx7 412 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  5 shift 1 1673  
800 14 Dtool_xqRv3i80 0 6 813 1682 0 14 Dtool_xqRv3i80 614 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
801 14 Dtool_xqRv2RsJ 0 6 814 1673 0 14 Dtool_xqRv2RsJ 515 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1741  
802 14 Dtool_xqRveaXN 0 6 815 1673 0 14 Dtool_xqRveaXN 345 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  1 n 1 1673  
803 14 Dtool_xqRvMLp6 0 6 816 1673 0 14 Dtool_xqRvMLp6 353 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1741  1 n 1 1673  
804 14 Dtool_xqRvGFxm 0 7 817 1684 0 14 Dtool_xqRvGFxm 0 0 
805 14 Dtool_xqRvh3eL 0 7 819 1786 1377 14 Dtool_xqRvh3eL 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 function 1 1689  
806 14 Dtool_xqRv1FzO 0 7 819 1786 1377 14 Dtool_xqRv1FzO 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
807 14 Dtool_xqRv6nqB 0 4 820 1675 0 14 Dtool_xqRv6nqB 0 2 4 this 3 1786  4 size 1 1670  
808 14 Dtool_xqRvLBAq 0 4 823 1675 0 14 Dtool_xqRvLBAq 379 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1786  8 function 1 1689  
809 14 Dtool_xqRvKUDV 0 6 824 1689 0 14 Dtool_xqRvKUDV 287 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1786  
810 14 Dtool_xqRvk9Cc 0 7 825 1684 0 14 Dtool_xqRvk9Cc 0 0 
811 14 Dtool_xqRvQ2Tm 0 7 827 1684 0 14 Dtool_xqRvQ2Tm 0 0 
812 14 Dtool_xqRvEGE_ 0 7 830 1787 1603 14 Dtool_xqRvEGE_ 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 2 3 min 1 1670  3 max 1 1670  
813 14 Dtool_xqRv168y 0 7 830 1787 1603 14 Dtool_xqRv168y 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 1 3 min 1 1670  
814 14 Dtool_xqRvK9nc 0 7 830 1787 1603 14 Dtool_xqRvK9nc 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 0 
815 14 Dtool_xqRvD7pt 0 6 832 1670 0 14 Dtool_xqRvD7pt 381 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1787  
816 14 Dtool_xqRv8_oT 0 4 833 1675 0 14 Dtool_xqRv8_oT 893 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1787  2 id 1 1670  
817 14 Dtool_xqRvGQCz 0 4 834 1675 0 14 Dtool_xqRvGQCz 338 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1787  5 index 1 1670  
818 14 Dtool_xqRvAmoe 0 6 835 1790 0 14 Dtool_xqRvAmoe 350 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1788  
819 14 Dtool_xqRvMD2Z 0 4 836 1675 0 14 Dtool_xqRvMD2Z 256 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1788  3 out 1 1678  
820 14 Dtool_xqRvVAnq 0 4 837 1675 0 14 Dtool_xqRvVAnq 255 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1788  3 out 1 1678  
821 14 Dtool_xqRvWDKL 0 6 195 1689 0 14 Dtool_xqRvWDKL 493 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
//////////////////////////////////////////////////////////////////// 2 10 this_class 1 1689  4 data 1 1672  
822 14 Dtool_xqRvoZ4w 0 6 196 1689 0 14 Dtool_xqRvoZ4w 756 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This is similar to
//               py_decode_TypedWritable_from_bam_stream, but it
//               provides additional support for the missing
//               persistent-state object needed to properly support
//               self-referential BAM objects written to the pickle
//               stream.  This hooks into the pickle and cPickle
//               modules implemented in direct/src/stdpy.
//////////////////////////////////////////////////////////////////// 3 9 unpickler 1 1689  10 this_class 1 1689  4 data 1 1672  
823 14 Dtool_xqRv26dg 0 6 633 1791 0 14 Dtool_xqRv26dg 387 // Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false); 0 
824 14 Dtool_xqRvwVkD 0 6 634 1791 0 14 Dtool_xqRvwVkD 0 0 
825 14 Dtool_xqRvYTce 0 6 704 1793 0 14 Dtool_xqRvYTce 957 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1709  
826 14 Dtool_xqRvDEXZ 0 6 705 1793 0 14 Dtool_xqRvDEXZ 680 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
//////////////////////////////////////////////////////////////////// 2 4 name 1 1672  4 data 1 1672  
827 14 Dtool_xqRvw809 0 6 706 1682 0 14 Dtool_xqRvw809 570 ////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
//////////////////////////////////////////////////////////////////// 1 4 page 1 1793  
828 14 Dtool_xqRv3gn0 0 4 707 1675 0 14 Dtool_xqRv3gn0 345 ////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
//////////////////////////////////////////////////////////////////// 1 4 hash 1 1795  
187
1610 11 CPTA_ushort 0 141313 41 ConstPointerToArray< unsigned short int > 41 ConstPointerToArray< unsigned short int > 0 0 0 1 832 840 0 7 833 834 835 836 837 838 839 0 0 1 0 1611 0 0 0 0 0

1611 40 PointerToArrayBase< unsigned short int > 0 26625 40 PointerToArrayBase< unsigned short int > 40 PointerToArrayBase< unsigned short int > 0 0 0 0 831 0 0 0 0 1 0 1612 0 0 0 0 0

1612 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 43009 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 0 0 0 0 0 2 829 830 0 0 1 0 1613 0 0 0 0 0

1613 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1614 19 DoubleBitMaskNative 0 26625 44 DoubleBitMask< BitMask< unsigned int, 32 > > 44 DoubleBitMask< BitMask< unsigned int, 32 > > 0 0 0 1 841 848 0 52 842 843 844 845 846 847 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 0 0 0 0 0 0

1615 17 QuadBitMaskNative 0 26625 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 0 0 0 1 895 902 0 52 896 897 898 899 900 901 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 0 0 0 0 0 0

1616 10 PTA_ushort 0 141313 36 PointerToArray< unsigned short int > 36 PointerToArray< unsigned short int > 0 0 0 1 949 964 0 14 950 951 952 953 954 955 956 957 958 959 960 961 962 963 0 0 1 0 1611 0 0 0 0 0

1617 7 CString 0 1050625 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1618 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 965 0 17 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

1619 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0 8 ATS_down 8 ATS_down 1 6 ATS_up 6 ATS_up 2 7 ATS_pad 7 ATS_pad 3 15 ATS_unspecified 15 ATS_unspecified 4 0 0

1620 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 983 1002 0 18 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

1621 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 7 1003 1004 1005 1006 1007 1008 1009 0 0 1 0 1622 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1622 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

1623 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1018 0 2 1016 1017 0 0 2 3 1621 1012 1013 3 1624 1014 1015 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1624 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1625 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1023 0 18 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 0 0 2 3 1623 1019 1020 3 1626 1021 1022 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

1626 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

1627 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1042 1043 0 21 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 0 0 0 0 0 948
////////////////////////////////////////////////////////////////////
//       Class : BamCache
// Description : This class maintains a cache of Bam and/or Txo
//               objects generated from model files and texture images
//               (as well as possibly other kinds of loadable objects
//               that can be stored in bam file format).
//
//               This class also maintains a persistent index that
//               lists all of the cached objects (see BamCacheIndex).
//               We go through some considerable effort to make sure
//               this index gets saved correctly to disk, even in the
//               presence of multiple different processes writing to
//               the same index, and without relying too heavily on
//               low-level os-provided file locks (which work poorly
//               with C++ iostreams).
////////////////////////////////////////////////////////////////////

1628 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 0 1065 0 0 0 0 0 0 3 1629 1630 1631 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

1629 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1628 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0 15 BE_littleendian 25 BamEnums::BE_littleendian 1 9 BE_native 19 BamEnums::BE_native 1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

1630 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1628 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0 7 BOC_pop 17 BamEnums::BOC_pop 1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 2 10 BOC_remove 20 BamEnums::BOC_remove 3 13 BOC_file_data 23 BamEnums::BOC_file_data 4 0 565
// This is the code written along with each object.  It is used to
// control object scoping.  A BOC_push includes an object
// definition, and will always be eventually paired with a BOC_pop
// (which does not).  A BOC_adjunct includes an object definition
// but does not push the level; it is associated with the current
// level.  BOC_remove lists object ID's that have been deallocated
// on the sender end.  BOC_file_data may appear at any level and
// indicates the following datagram contains auxiliary file data
// that may be referenced by a later object.

1631 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1628 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 1 12 BTM_relative 22 BamEnums::BTM_relative 2 12 BTM_basename 22 BamEnums::BTM_basename 3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 4 0 76
// This enum is used to control how textures are written to a bam
// stream.

1632 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1066 1077 0 10 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 0 0 0 0 2 1633 1634 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

1633 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1632 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 128 0 33
// Flags for loading model files.

1634 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1632 0 0 0 0 0 0 0 0 0 5 10 TF_preload 25 LoaderOptions::TF_preload 4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 32 12 TF_multiview 27 LoaderOptions::TF_multiview 64 0 35
// Flags for loading texture files.

1635 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1078 1079 0 18 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 0 0 1 0 1628 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1636 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1098 1099 0 11 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 0 0 1 0 1628 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1637 9 BitMask16 0 26625 33 BitMask< unsigned short int, 16 > 33 BitMask< unsigned short int, 16 > 0 0 0 1 1111 1118 0 61 1112 1113 1114 1115 1116 1117 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 0 0 0 0 0 0

1638 9 BitMask32 0 26625 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 1 1174 1181 0 61 1175 1176 1177 1178 1179 1180 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 0 0 0 0 0 0

1639 9 BitMask64 0 26625 31 BitMask< unsigned __int64, 64 > 31 BitMask< unsigned __int64, 64 > 0 0 0 1 1237 1244 0 61 1238 1239 1240 1241 1242 1243 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 0 0 0 0 0 0

1640 8 BitArray 0 26625 8 BitArray 8 BitArray 0 0 0 1 1300 1307 0 57 1301 1302 1303 1304 1305 1306 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : BitArray
// Description : A dynamic array with an unlimited number of bits.
//
//               This is similar to a BitMask, except it appears to
//               contain an infinite number of bits.  You can use it
//               very much as you would use a BitMask.
////////////////////////////////////////////////////////////////////

1641 12 ButtonHandle 0 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1359 1369 0 9 1360 1361 1362 1363 1364 1365 1366 1367 1368 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1642 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 0 1374 0 4 1370 1371 1372 1373 0 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : ButtonRegistry
// Description : The ButtonRegistry class maintains all the assigned
//               ButtonHandles in a given system.  There should be only
//               one ButtonRegistry class during the lifetime of the
//               application.
////////////////////////////////////////////////////////////////////

1643 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 0 1377 0 2 1375 1376 0 0 1 0 1644 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1644 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1645 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 0 5 1378 1379 1380 1381 1382 0 0 1 0 1623 0 0 0 0 1112
////////////////////////////////////////////////////////////////////
//       Class : CachedTypedWritableReferenceCount
// Description : This is a special extension to ReferenceCount that
//               includes dual reference counts: the standard
//               reference count number, which includes all references
//               to the object, and a separate number (the cache
//               reference count) that counts the number of references
//               to the object just within its cache alone.  When
//               get_ref_count() == get_cache_ref_count(), the object
//               is not referenced outside the cache.
//
//               The cache refs must be explicitly maintained; there
//               is no PointerTo<> class to maintain the cache
//               reference counts automatically.  The cache reference
//               count is automatically included in the overall
//               reference count: calling cache_ref() and
//               cache_unref() automatically calls ref() and unref().
////////////////////////////////////////////////////////////////////

1646 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1386 0 3 1383 1384 1385 0 0 1 0 1622 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1647 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1387 1390 0 2 1388 1389 0 0 0 0 0 0

1648 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1391 0 0 28 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 0 0 1 0 1624 0 0 0 1 1649 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

1649 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1648 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0 15 M_non_real_time 28 ClockObject::M_non_real_time 1 8 M_forced 21 ClockObject::M_forced 2 9 M_degrade 22 ClockObject::M_degrade 3 7 M_slave 20 ClockObject::M_slave 4 9 M_limited 22 ClockObject::M_limited 5 9 M_integer 22 ClockObject::M_integer 6 17 M_integer_limited 30 ClockObject::M_integer_limited 7 0 0

1650 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1424 0 2 1422 1423 0 0 1 0 1645 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

1651 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1425 0 0 4 1426 1427 1428 1429 0 0 1 0 1652 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramInputFile
// Description : This class can be used to read a binary file that
//               consists of an arbitrary header followed by a number
//               of datagrams.
////////////////////////////////////////////////////////////////////

1652 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net.
////////////////////////////////////////////////////////////////////

1653 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 0 1479 0 49 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 0 0 0 0 0 369
////////////////////////////////////////////////////////////////////
//       Class : KeyboardButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard keyboard keys.
////////////////////////////////////////////////////////////////////

1654 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1480 1484 0 3 1481 1482 1483 0 0 1 0 1655 0 0 0 0 761
////////////////////////////////////////////////////////////////////
//       Class : LineStream
// Description : This is a special ostream that writes to a memory
//               buffer, like ostrstream.  However, its contents can
//               be continuously extracted as a sequence of lines of
//               text.
//
//               Unlike ostrstream, which can only be extracted from
//               once (and then the buffer freezes and it can no
//               longer be written to), the LineStream is not
//               otherwise affected when a line of text is extracted.
//               More text can still be written to it and continuously
//               extracted.
////////////////////////////////////////////////////////////////////

1655 7 ostream 0 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1656 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1489 1490 0 23 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1 1797 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

1657 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 0 1525 0 11 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 0 0 0 0 0 366
////////////////////////////////////////////////////////////////////
//       Class : MouseButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard mouse buttons.
////////////////////////////////////////////////////////////////////

1658 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1526 1532 0 5 1527 1528 1529 1530 1531 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1659 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1533 1534 1535 1536 1537 1538 0 0 1 0 1645 0 0 0 1 1660 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

1660 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1659 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 1 7 R_cache 33 NodeCachedReferenceCount::R_cache 2 0 0

1661 11 SparseArray 0 26625 11 SparseArray 11 SparseArray 0 0 0 1 1539 1546 0 52 1540 1541 1542 1543 1544 1545 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 0 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : SparseArray
// Description : This class records a set of integers, where each
//               integer is either present or not present in the set.
//
//               It is similar in principle and in interface to a
//               BitArray (which can be thought of as a set of
//               integers, one integer corresponding to each different
//               bit position), but the SparseArray is implemented as
//               a list of min/max subrange lists, rather than as a
//               bitmask.  
//
//               This makes it particularly efficient for storing sets
//               which consist of large sections of consecutively
//               included or consecutively excluded elements, with
//               arbitrarily large integers, but particularly
//               inefficient for doing boolean operations such as & or
//               |.
//
//               Also, unlike BitArray, the SparseArray can store
//               negative integers.
////////////////////////////////////////////////////////////////////

1662 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1593 1377 0 6 1594 1595 1596 1597 1598 1599 0 0 1 0 1643 0 0 0 0 371
////////////////////////////////////////////////////////////////////
//       Class : PythonCallbackObject
// Description : This is a specialization on CallbackObject to allow
//               a callback to directly call an arbitarary Python
//               function.  Powerful!  But use with caution.
////////////////////////////////////////////////////////////////////

1663 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1601 0 1 1600 0 0 1 0 1621 0 0 0 0 815
////////////////////////////////////////////////////////////////////
// Defines
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : WritableConfigurable
// Description : Defined as a fix to allow creating Configurable and
//               Writable objects.  Otherwise the compiler gets
//               confused since both TypedWritable and Configurable
//               inherit from TypedObject.
//
//               An object that has data or parameters that are set
//               less frequently (at least occasionally) than every
//               frame.  We can cache the configuration info by
//               by using the "dirty" flag.
////////////////////////////////////////////////////////////////////

1664 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1602 1603 0 6 1604 1605 1606 1607 1608 1609 0 0 0 0 0 1207
////////////////////////////////////////////////////////////////////
//       Class : UniqueIdAllocator
// Description : Manage a set of ID values from min to max inclusive.
//               The ID numbers that are freed will be allocated
//               (reused) in the same order.  I.e. the oldest ID numbers
//               will be allocated.
//
//               This implementation will use 4 bytes per id number,
//               plus a few bytes of management data.  e.g. 10,000
//               ID numbers will use 40KB.
//
//               Also be advised that ID -1 and -2 are used internally by
//               the allocator.  If allocate returns IndexEnd (-1) then
//               the allocator is out of free ID numbers.
//
//               There are other implementations that can better leverage
//               runs of used or unused IDs or use bit arrays for the
//               IDs.  But, it takes extra work to track the age of
//               freed IDs, which is required for what we wanted.  If
//               you would like to kick around other implementation
//               ideas, please contact Schuyler.
////////////////////////////////////////////////////////////////////

1665 49 ConstPointerToArray< unsigned short int > const * 0 8576 49 ConstPointerToArray< unsigned short int > const * 49 ConstPointerToArray< unsigned short int > const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 47 ConstPointerToArray< unsigned short int > const 0 8832 47 ConstPointerToArray< unsigned short int > const 47 ConstPointerToArray< unsigned short int > const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1667 43 ConstPointerToArray< unsigned short int > * 0 8576 43 ConstPointerToArray< unsigned short int > * 43 ConstPointerToArray< unsigned short int > * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1668 44 PointerToArray< unsigned short int > const * 0 8576 44 PointerToArray< unsigned short int > const * 44 PointerToArray< unsigned short int > const * 0 0 1669 0 0 0 0 0 0 0 0 0 0

1669 42 PointerToArray< unsigned short int > const 0 8832 42 PointerToArray< unsigned short int > const 42 PointerToArray< unsigned short int > const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1670 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1671 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1672 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1673 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1674 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 8576 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 0 1612 0 0 0 0 0 0 0 0 0 0

1675 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1676 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 8832 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 0 1612 0 0 0 0 0 0 0 0 0 0

1678 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1679 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 8576 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1680 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 8576 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 8832 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1682 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1683 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1684 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1685 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 8576 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1686 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 8576 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 8832 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 0 1615 0 0 0 0 0 0 0 0 0 0

1688 38 PointerToArray< unsigned short int > * 0 8576 38 PointerToArray< unsigned short int > * 38 PointerToArray< unsigned short int > * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1689 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1691 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1692 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1693 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1694 0 0 0 0 0 0 0 0 0 0

1694 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1695 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1696 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1620 0 0 0 0 0 0 0 0 0 0

1698 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1699 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1700 0 0 0 0 0 0 0 0 0 0

1700 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1621 0 0 0 0 0 0 0 0 0 0

1701 22 basic_string< char > * 0 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1702 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1703 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1704 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1623 0 0 0 0 0 0 0 0 0 0

1705 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1706 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1707 0 0 0 0 0 0 0 0 0 0

1707 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1708 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1709 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1710 0 0 0 0 0 0 0 0 0 0

1710 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1712 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1713 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1627 0 0 0 0 0 0 0 0 0 0

1715 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1716 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1717 0 0 0 0 0 0 0 0 0 0

1717 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1632 0 0 0 0 0 0 0 0 0 0

1718 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1632 0 0 0 0 0 0 0 0 0 0

1719 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1652 0 0 0 0 0 0 0 0 0 0

1720 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1635 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on
// the bamReader (via set_aux_data() and get_aux_data()) for any
// particular objects during the bam reading process.

1722 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1635 0 0 0 0 0 0 0 0 0 0

1724 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

1726 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1727 0 0 0 0 0 0 0 0 0 0

1727 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1636 0 0 0 0 0 0 0 0 0 0

1728 35 BitMask< unsigned short int, 16 > * 0 8576 35 BitMask< unsigned short int, 16 > * 35 BitMask< unsigned short int, 16 > * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1729 41 BitMask< unsigned short int, 16 > const * 0 8576 41 BitMask< unsigned short int, 16 > const * 41 BitMask< unsigned short int, 16 > const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 39 BitMask< unsigned short int, 16 > const 0 8832 39 BitMask< unsigned short int, 16 > const 39 BitMask< unsigned short int, 16 > const 0 0 1637 0 0 0 0 0 0 0 0 0 0

1731 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1638 0 0 0 0 0 0 0 0 0 0

1732 35 BitMask< unsigned int, 32 > const * 0 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 33 BitMask< unsigned int, 32 > const 0 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1638 0 0 0 0 0 0 0 0 0 0

1734 33 BitMask< unsigned __int64, 64 > * 0 8576 33 BitMask< unsigned __int64, 64 > * 33 BitMask< unsigned __int64, 64 > * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1735 39 BitMask< unsigned __int64, 64 > const * 0 8576 39 BitMask< unsigned __int64, 64 > const * 39 BitMask< unsigned __int64, 64 > const * 0 0 1736 0 0 0 0 0 0 0 0 0 0

1736 37 BitMask< unsigned __int64, 64 > const 0 8832 37 BitMask< unsigned __int64, 64 > const 37 BitMask< unsigned __int64, 64 > const 0 0 1639 0 0 0 0 0 0 0 0 0 0

1737 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1738 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1640 0 0 0 0 0 0 0 0 0 0

1739 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1640 0 0 0 0 0 0 0 0 0 0

1741 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 1742 0 0 0 0 0 0 0 0 0 0

1742 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1661 0 0 0 0 0 0 0 0 0 0

1743 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1744 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1641 0 0 0 0 0 0 0 0 0 0

1746 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1747 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1748 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1642 0 0 0 0 0 0 0 0 0 0

1750 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 1751 0 0 0 0 0 0 0 0 0 0

1751 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1643 0 0 0 0 0 0 0 0 0 0

1752 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1645 0 0 0 0 0 0 0 0 0 0

1754 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1646 0 0 0 0 0 0 0 0 0 0

1756 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1757 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1758 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1647 0 0 0 0 0 0 0 0 0 0

1760 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1761 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1762 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1648 0 0 0 0 0 0 0 0 0 0

1764 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1765 0 0 0 0 0 0 0 0 0 0

1765 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1766 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 1767 0 0 0 0 0 0 0 0 0 0

1767 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1650 0 0 0 0 0 0 0 0 0 0

1768 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1651 0 0 0 0 0 0 0 0 0 0

1769 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1770 0 0 0 0 0 0 0 0 0 0

1770 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : FileReference
// Description : Keeps a reference-counted pointer to a file on disk.
//               As long as the FileReference is held, someone
//               presumably has a use for this file.
////////////////////////////////////////////////////////////////////

1772 9 istream * 0 8576 9 istream * 9 istream * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1774 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 1654 0 0 0 0 0 0 0 0 0 0

1775 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 1776 0 0 0 0 0 0 0 0 0 0

1776 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 1654 0 0 0 0 0 0 0 0 0 0

1777 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1778 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 1779 0 0 0 0 0 0 0 0 0 0

1779 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1656 0 0 0 0 0 0 0 0 0 0

1780 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1658 0 0 0 0 0 0 0 0 0 0

1781 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1658 0 0 0 0 0 0 0 0 0 0

1783 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1659 0 0 0 0 0 0 0 0 0 0

1785 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1661 0 0 0 0 0 0 0 0 0 0

1786 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1787 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1788 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 1789 0 0 0 0 0 0 0 0 0 0

1789 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1664 0 0 0 0 0 0 0 0 0 0

1790 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1791 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

1793 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 1794 0 0 0 0 0 0 0 0 0 0

1794 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

1795 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

0
0
1
1797 0 0 708 11 get_buttons 15 get_num_buttons 10 get_button 
