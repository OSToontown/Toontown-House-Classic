1365933906
2 2
12 libp3physics 4 1Scs 12 pandaphysics 
218
295 13 PhysicsObject 0 4 513 28 PhysicsObject::PhysicsObject 0 2 1 2 463
////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
92
PhysicsObject::PhysicsObject(void);
PhysicsObject::PhysicsObject(PhysicsObject const &copy);

296 10 operator = 0 4 513 25 PhysicsObject::operator = 0 1 3 218
////////////////////////////////////////////////////////////////////
//     Function : Assignment operator
//       Access : Public
//  Description :
////////////////////////////////////////////////////////////////////
75
PhysicsObject const &PhysicsObject::operator =(PhysicsObject const &other);

297 10 set_active 0 4 513 25 PhysicsObject::set_active 0 1 4 230
////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
// Description : Process Flag assignment
////////////////////////////////////////////////////////////////////
49
inline void PhysicsObject::set_active(bool flag);

298 10 get_active 0 4 513 25 PhysicsObject::get_active 0 1 5 225
////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
// Description : Process Flag Query
////////////////////////////////////////////////////////////////////
50
inline bool PhysicsObject::get_active(void) const;

299 8 set_mass 0 4 513 23 PhysicsObject::set_mass 0 1 6 733
// Filename: physicsObject.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_mass
//      Access : Public
// Description : Set the mass in slugs (or kilograms).
////////////////////////////////////////////////////////////////////
44
inline void PhysicsObject::set_mass(float );

300 8 get_mass 0 4 513 23 PhysicsObject::get_mass 0 1 7 242
////////////////////////////////////////////////////////////////////
//    Function : get_mass
//      Access : Public
// Description : Get the mass in slugs (or kilograms).
////////////////////////////////////////////////////////////////////
49
inline float PhysicsObject::get_mass(void) const;

301 12 set_position 0 4 513 27 PhysicsObject::set_position 0 2 8 9 681
//INLINE void set_center_of_mass(const LPoint3 &pos); use set_position.

//INLINE void set_center_of_mass(const LPoint3 &pos); use set_position.

////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Vector position assignment.  This is also used as
//               the center of mass.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Piecewise position assignment
////////////////////////////////////////////////////////////////////
129
inline void PhysicsObject::set_position(LPoint3f const &pos);
inline void PhysicsObject::set_position(float x, float y, float z);

302 12 get_position 0 4 513 27 PhysicsObject::get_position 0 1 10 223
////////////////////////////////////////////////////////////////////
//    Function : get_position
//      Access : Public
// Description : Position Query
////////////////////////////////////////////////////////////////////
56
inline LPoint3f PhysicsObject::get_position(void) const;

303 14 reset_position 0 4 513 29 PhysicsObject::reset_position 0 1 11 349
////////////////////////////////////////////////////////////////////
//    Function : reset_position
//      Access : Public
// Description : use this to place an object in a completely new
//               position, that has nothing to do with its last
//               position.
////////////////////////////////////////////////////////////////////
63
inline void PhysicsObject::reset_position(LPoint3f const &pos);

304 17 set_last_position 0 4 513 32 PhysicsObject::set_last_position 0 1 12 238
////////////////////////////////////////////////////////////////////
//    Function : set_last_position
//      Access : Public
// Description : Last position assignment
////////////////////////////////////////////////////////////////////
66
inline void PhysicsObject::set_last_position(LPoint3f const &pos);

305 17 get_last_position 0 4 513 32 PhysicsObject::get_last_position 0 1 13 313
////////////////////////////////////////////////////////////////////
//    Function : get_last_position
//      Access : Public
// Description : Get the position of the physics object at the start
//               of the most recent do_physics.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f PhysicsObject::get_last_position(void) const;

306 12 set_velocity 0 4 513 27 PhysicsObject::set_velocity 0 2 14 15 475
////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Vector velocity assignment
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Piecewise velocity assignment
////////////////////////////////////////////////////////////////////
130
inline void PhysicsObject::set_velocity(LVector3f const &vel);
inline void PhysicsObject::set_velocity(float x, float y, float z);

307 12 get_velocity 0 4 513 27 PhysicsObject::get_velocity 0 1 16 234
////////////////////////////////////////////////////////////////////
//    Function : get_velocity
//      Access : Public
// Description : Velocity Query per second
////////////////////////////////////////////////////////////////////
57
inline LVector3f PhysicsObject::get_velocity(void) const;

308 21 get_implicit_velocity 0 4 513 36 PhysicsObject::get_implicit_velocity 0 1 17 249
////////////////////////////////////////////////////////////////////
//    Function : get_implicit_velocity
//      Access : Public
// Description : Velocity Query over the last dt
////////////////////////////////////////////////////////////////////
66
inline LVector3f PhysicsObject::get_implicit_velocity(void) const;

309 10 add_torque 0 4 513 25 PhysicsObject::add_torque 0 1 18 477
// Global instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
////////////////////////////////////////////////////////////////////
64
inline void PhysicsObject::add_torque(LRotationf const &torque);

310 11 add_impulse 0 4 513 26 PhysicsObject::add_impulse 0 1 19 463
// Global instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
////////////////////////////////////////////////////////////////////
65
inline void PhysicsObject::add_impulse(LVector3f const &impulse);

311 10 add_impact 0 4 513 25 PhysicsObject::add_impact 0 1 20 656
////////////////////////////////////////////////////////////////////
//    Function : add_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in global (or parent) coordinates.
////////////////////////////////////////////////////////////////////
109
virtual void PhysicsObject::add_impact(LPoint3f const &offset_from_center_of_mass, LVector3f const &impulse);

312 16 add_local_torque 0 4 513 31 PhysicsObject::add_local_torque 0 1 21 482
// Local instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_local_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
////////////////////////////////////////////////////////////////////
70
inline void PhysicsObject::add_local_torque(LRotationf const &torque);

313 17 add_local_impulse 0 4 513 32 PhysicsObject::add_local_impulse 0 1 22 468
// Local instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_local_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
////////////////////////////////////////////////////////////////////
71
inline void PhysicsObject::add_local_impulse(LVector3f const &impulse);

314 16 add_local_impact 0 4 513 31 PhysicsObject::add_local_impact 0 1 23 649
////////////////////////////////////////////////////////////////////
//    Function : add_local_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in local coordinates.
////////////////////////////////////////////////////////////////////
115
virtual void PhysicsObject::add_local_impact(LPoint3f const &offset_from_center_of_mass, LVector3f const &impulse);

315 21 set_terminal_velocity 0 4 513 36 PhysicsObject::set_terminal_velocity 0 1 24 231
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity
//      Access : Public
// Description : tv assignment
////////////////////////////////////////////////////////////////////
59
inline void PhysicsObject::set_terminal_velocity(float tv);

316 21 get_terminal_velocity 0 4 513 36 PhysicsObject::get_terminal_velocity 0 1 25 226
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity
//      Access : Public
// Description : tv query
////////////////////////////////////////////////////////////////////
62
inline float PhysicsObject::get_terminal_velocity(void) const;

317 12 set_oriented 0 4 513 27 PhysicsObject::set_oriented 0 1 26 334
////////////////////////////////////////////////////////////////////
//    Function : set_oriented
//      Access : Public
// Description : Set flag to determine whether this object should do
//               any rotation or orientation calculations.  Optimization.
////////////////////////////////////////////////////////////////////
51
inline void PhysicsObject::set_oriented(bool flag);

318 12 get_oriented 0 4 513 27 PhysicsObject::get_oriented 0 1 27 228
////////////////////////////////////////////////////////////////////
//    Function : get_oriented
//      Access : Public
// Description : See set_oriented().
////////////////////////////////////////////////////////////////////
52
inline bool PhysicsObject::get_oriented(void) const;

319 15 set_orientation 0 4 513 30 PhysicsObject::set_orientation 0 1 28 211
////////////////////////////////////////////////////////////////////
//    Function : set_orientation
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
77
inline void PhysicsObject::set_orientation(LOrientationf const &orientation);

320 15 get_orientation 0 4 513 30 PhysicsObject::get_orientation 0 1 29 236
////////////////////////////////////////////////////////////////////
//    Function : get_orientation
//      Access : Public
// Description : get current orientation.
////////////////////////////////////////////////////////////////////
64
inline LOrientationf PhysicsObject::get_orientation(void) const;

321 17 reset_orientation 0 4 513 32 PhysicsObject::reset_orientation 0 1 30 288
////////////////////////////////////////////////////////////////////
//    Function : reset_orientation
//      Access : Public
// Description : set the orientation while clearing the rotation
//               velocity.
////////////////////////////////////////////////////////////////////
79
inline void PhysicsObject::reset_orientation(LOrientationf const &orientation);

322 12 set_rotation 0 4 513 27 PhysicsObject::set_rotation 0 1 31 255
////////////////////////////////////////////////////////////////////
//    Function : set_rotation
//      Access : Public
// Description : set rotation as a quaternion delta per second.
////////////////////////////////////////////////////////////////////
68
inline void PhysicsObject::set_rotation(LRotationf const &rotation);

323 12 get_rotation 0 4 513 27 PhysicsObject::get_rotation 0 1 32 233
////////////////////////////////////////////////////////////////////
//    Function : get_rotation
//      Access : Public
// Description : get rotation per second.
////////////////////////////////////////////////////////////////////
58
inline LRotationf PhysicsObject::get_rotation(void) const;

324 19 get_inertial_tensor 0 4 513 34 PhysicsObject::get_inertial_tensor 0 1 33 318
////////////////////////////////////////////////////////////////////
//     Function : get_inertial_tensor
//       Access : Public
//  Description : returns a transform matrix that represents the
//                object's willingness to be forced.
////////////////////////////////////////////////////////////////////
65
virtual LMatrix4f PhysicsObject::get_inertial_tensor(void) const;

325 7 get_lcs 0 4 513 22 PhysicsObject::get_lcs 0 1 34 293
////////////////////////////////////////////////////////////////////
//     Function : get_lcs
//       Access : Public
//  Description : returns a transform matrix to this object's
//                local coordinate system.
////////////////////////////////////////////////////////////////////
53
virtual LMatrix4f PhysicsObject::get_lcs(void) const;

326 9 make_copy 0 4 513 24 PhysicsObject::make_copy 0 1 35 231
////////////////////////////////////////////////////////////////////
//     Function : make_copy
//       Access : Public, virtual
//  Description : dynamic copy.
////////////////////////////////////////////////////////////////////
60
virtual PhysicsObject *PhysicsObject::make_copy(void) const;

327 8 set_name 0 4 513 23 PhysicsObject::set_name 0 1 36 0
63
void PhysicsObject::set_name(basic_string< char > const &name);

328 8 get_name 0 4 513 23 PhysicsObject::get_name 0 1 37 0
58
basic_string< char > const &PhysicsObject::get_name(void);

329 6 output 0 4 513 21 PhysicsObject::output 0 1 38 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
55
virtual void PhysicsObject::output(ostream &out) const;

330 5 write 0 4 513 20 PhysicsObject::write 0 2 39 40 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
81
virtual void PhysicsObject::write(ostream &out, unsigned int indent = (0)) const;

331 14 get_class_type 0 4 513 29 PhysicsObject::get_class_type 0 1 41 0
54
static TypeHandle PhysicsObject::get_class_type(void);

332 23 PhysicsObjectCollection 0 4 515 48 PhysicsObjectCollection::PhysicsObjectCollection 0 2 42 43 477
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
PhysicsObjectCollection::PhysicsObjectCollection(void);
PhysicsObjectCollection::PhysicsObjectCollection(PhysicsObjectCollection const &copy);

333 10 operator = 0 4 515 35 PhysicsObjectCollection::operator = 0 1 44 248
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
void PhysicsObjectCollection::operator =(PhysicsObjectCollection const &copy);

334 24 ~PhysicsObjectCollection 0 4 515 49 PhysicsObjectCollection::~PhysicsObjectCollection 0 0 736
// Filename: physicsObjectCollection.I
// Created by:  joswilso (12Jul06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline PhysicsObjectCollection::~PhysicsObjectCollection(void);

335 18 add_physics_object 0 4 515 43 PhysicsObjectCollection::add_physics_object 0 1 45 286
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_object
//       Access: Published
//  Description: Adds a new PhysicsObject to the collection.
////////////////////////////////////////////////////////////////////
92
void PhysicsObjectCollection::add_physics_object(PointerTo< PhysicsObject > physics_object);

336 21 remove_physics_object 0 4 515 46 PhysicsObjectCollection::remove_physics_object 0 1 46 432
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_object
//       Access: Published
//  Description: Removes the indicated PhysicsObject from the collection.
//               Returns true if the physics_object was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
95
bool PhysicsObjectCollection::remove_physics_object(PointerTo< PhysicsObject > physics_object);

337 24 add_physics_objects_from 0 4 515 49 PhysicsObjectCollection::add_physics_objects_from 0 1 47 537
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_objects_from
//       Access: Published
//  Description: Adds all the PhysicsObjects indicated in the other
//               collection to this collection.  The other 
//               physics_objects are simply appended to the end of 
//               the physics_objects in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
93
void PhysicsObjectCollection::add_physics_objects_from(PhysicsObjectCollection const &other);

338 27 remove_physics_objects_from 0 4 515 52 PhysicsObjectCollection::remove_physics_objects_from 0 1 48 355
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_objects_from
//       Access: Published
//  Description: Removes from this collection all of the PhysicsObjects
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
96
void PhysicsObjectCollection::remove_physics_objects_from(PhysicsObjectCollection const &other);

339 32 remove_duplicate_physics_objects 0 4 515 57 PhysicsObjectCollection::remove_duplicate_physics_objects 0 1 49 498
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_duplicate_physics_objects
//       Access: Published
//  Description: Removes any duplicate entries of the same PhysicsObjects
//               on this collection.  If a PhysicsObject appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
69
void PhysicsObjectCollection::remove_duplicate_physics_objects(void);

340 18 has_physics_object 0 4 515 43 PhysicsObjectCollection::has_physics_object 0 1 50 348
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::has_physics_object
//       Access: Published
//  Description: Returns true if the indicated PhysicsObject appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
98
bool PhysicsObjectCollection::has_physics_object(PointerTo< PhysicsObject > physics_object) const;

341 5 clear 0 4 515 30 PhysicsObjectCollection::clear 0 1 51 277
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::clear
//       Access: Published
//  Description: Removes all PhysicsObjects from the collection.
////////////////////////////////////////////////////////////////////
42
void PhysicsObjectCollection::clear(void);

342 8 is_empty 0 4 515 33 PhysicsObjectCollection::is_empty 0 1 52 329
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no PhysicsObjects in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool PhysicsObjectCollection::is_empty(void) const;

343 23 get_num_physics_objects 0 4 515 48 PhysicsObjectCollection::get_num_physics_objects 0 1 53 303
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_num_physics_objects
//       Access: Published
//  Description: Returns the number of PhysicsObjects in the collection.
////////////////////////////////////////////////////////////////////
65
int PhysicsObjectCollection::get_num_physics_objects(void) const;

344 18 get_physics_object 0 4 515 43 PhysicsObjectCollection::get_physics_object 0 1 54 291
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_physics_object
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.
////////////////////////////////////////////////////////////////////
88
PointerTo< PhysicsObject > PhysicsObjectCollection::get_physics_object(int index) const;

345 11 operator [] 0 4 515 36 PhysicsObjectCollection::operator [] 0 1 55 411
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator []
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.  This is
//               the same as get_physics_object(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
81
PointerTo< PhysicsObject > PhysicsObjectCollection::operator [](int index) const;

346 4 size 0 4 515 29 PhysicsObjectCollection::size 0 1 56 373
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::size
//       Access: Published
//  Description: Returns the number of physics objects in the
//               collection.  This is the same thing as
//               get_num_physics_objects().
////////////////////////////////////////////////////////////////////
46
int PhysicsObjectCollection::size(void) const;

347 11 operator += 0 4 515 36 PhysicsObjectCollection::operator += 0 1 57 284
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
87
inline void PhysicsObjectCollection::operator +=(PhysicsObjectCollection const &other);

348 10 operator + 0 4 515 35 PhysicsObjectCollection::operator + 0 1 58 334
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +
//       Access: Published
//  Description: Returns a PhysicsObjectCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
111
inline PhysicsObjectCollection PhysicsObjectCollection::operator +(PhysicsObjectCollection const &other) const;

349 6 output 0 4 515 31 PhysicsObjectCollection::output 0 1 59 346
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               PhysicsObjectCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
57
void PhysicsObjectCollection::output(ostream &out) const;

350 5 write 0 4 515 30 PhysicsObjectCollection::write 0 2 60 61 350
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
80
void PhysicsObjectCollection::write(ostream &out, int indent_level = (0)) const;

351 10 get_active 0 4 516 21 BaseForce::get_active 0 1 62 189
////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
////////////////////////////////////////////////////////////////////
46
inline bool BaseForce::get_active(void) const;

352 10 set_active 0 4 516 21 BaseForce::set_active 0 1 63 189
////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
////////////////////////////////////////////////////////////////////
47
inline void BaseForce::set_active(bool active);

353 9 is_linear 0 4 516 20 BaseForce::is_linear 0 1 64 0
50
virtual bool BaseForce::is_linear(void) const = 0;

354 14 get_force_node 0 4 516 25 BaseForce::get_force_node 0 1 65 680
// Filename: baseForce.I
// Created by:  charles (08Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_force_node
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline ForceNode *BaseForce::get_force_node(void) const;

355 19 get_force_node_path 0 4 516 30 BaseForce::get_force_node_path 0 1 66 198
////////////////////////////////////////////////////////////////////
//    Function : get_force_node_path
//      Access : Public
////////////////////////////////////////////////////////////////////
59
inline NodePath BaseForce::get_force_node_path(void) const;

356 6 output 0 4 516 17 BaseForce::output 0 1 67 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
51
virtual void BaseForce::output(ostream &out) const;

357 5 write 0 4 516 16 BaseForce::write 0 2 68 69 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
74
virtual void BaseForce::write(ostream &out, int indent_level = (0)) const;

358 14 get_class_type 0 4 516 25 BaseForce::get_class_type 0 1 70 0
50
static TypeHandle BaseForce::get_class_type(void);

359 13 set_amplitude 0 4 517 26 LinearForce::set_amplitude 0 1 71 681
// Filename: linearForce.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
////////////////////////////////////////////////////////////////////
54
inline void LinearForce::set_amplitude(float const a);

360 18 set_mass_dependent 0 4 517 31 LinearForce::set_mass_dependent 0 1 72 197
////////////////////////////////////////////////////////////////////
//    Function : set_mass_Dependent
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline void LinearForce::set_mass_dependent(bool m);

361 13 get_amplitude 0 4 517 26 LinearForce::get_amplitude 0 1 73 192
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline float LinearForce::get_amplitude(void) const;

362 18 get_mass_dependent 0 4 517 31 LinearForce::get_mass_dependent 0 1 74 197
////////////////////////////////////////////////////////////////////
//    Function : get_mass_dependent
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline bool LinearForce::get_mass_dependent(void) const;

363 16 set_vector_masks 0 4 517 29 LinearForce::set_vector_masks 0 1 75 195
////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
////////////////////////////////////////////////////////////////////
66
inline void LinearForce::set_vector_masks(bool x, bool y, bool z);

364 16 get_vector_masks 0 4 517 29 LinearForce::get_vector_masks 0 1 76 195
////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline LVector3f LinearForce::get_vector_masks(void);

365 10 get_vector 0 4 517 23 LinearForce::get_vector 0 1 77 189
////////////////////////////////////////////////////////////////////
//    Function : get_vector
//      Access : Public
////////////////////////////////////////////////////////////////////
59
LVector3f LinearForce::get_vector(PhysicsObject const *po);

366 9 make_copy 0 4 517 22 LinearForce::make_copy 0 1 78 0
54
virtual LinearForce *LinearForce::make_copy(void) = 0;

367 5 write 0 4 517 18 LinearForce::write 0 2 79 80 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
79
virtual void LinearForce::write(ostream &out, unsigned int indent = (0)) const;

368 14 get_class_type 0 4 517 27 LinearForce::get_class_type 0 1 81 0
52
static TypeHandle LinearForce::get_class_type(void);

369 9 make_copy 0 4 518 23 AngularForce::make_copy 0 1 82 0
62
virtual AngularForce *AngularForce::make_copy(void) const = 0;

370 8 get_quat 0 4 518 22 AngularForce::get_quat 0 1 83 217
////////////////////////////////////////////////////////////////////
//    Function : get_quat
//      Access : public
// Description : access query
////////////////////////////////////////////////////////////////////
59
LRotationf AngularForce::get_quat(PhysicsObject const *po);

371 5 write 0 4 518 19 AngularForce::write 0 2 84 85 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void AngularForce::write(ostream &out, unsigned int indent = (0)) const;

372 14 get_class_type 0 4 518 28 AngularForce::get_class_type 0 1 86 0
53
static TypeHandle AngularForce::get_class_type(void);

373 8 Physical 0 4 519 18 Physical::Physical 0 4 87 88 89 90 1257
////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : copy constructor (note- does deep copy of pn's)
//                but does NOT attach itself to its template's
//                physicsmanager.
////////////////////////////////////////////////////////////////////
108
Physical::Physical(int total_objects = (1), bool pre_alloc = (0));
Physical::Physical(Physical const &copy);

374 19 get_physics_manager 0 4 519 29 Physical::get_physics_manager 0 1 91 210
// helpers

////////////////////////////////////////////////////////////////////
//    Function : get_physics_manager
//      Access : Public
////////////////////////////////////////////////////////////////////
65
inline PhysicsManager *Physical::get_physics_manager(void) const;

375 17 get_physical_node 0 4 519 27 Physical::get_physical_node 0 1 92 208
// helpers

////////////////////////////////////////////////////////////////////
//    Function : get_physical_node
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline PhysicalNode *Physical::get_physical_node(void) const;

376 22 get_physical_node_path 0 4 519 32 Physical::get_physical_node_path 0 1 93 201
////////////////////////////////////////////////////////////////////
//    Function : get_physical_node_path
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline NodePath Physical::get_physical_node_path(void) const;

377 13 get_phys_body 0 4 519 23 Physical::get_phys_body 0 1 94 192
////////////////////////////////////////////////////////////////////
//    Function : get_phys_body
//      Access : Public
////////////////////////////////////////////////////////////////////
58
inline PhysicsObject *Physical::get_phys_body(void) const;

378 19 clear_linear_forces 0 4 519 29 Physical::clear_linear_forces 0 1 95 244
////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Erases the linear force list
////////////////////////////////////////////////////////////////////
48
inline void Physical::clear_linear_forces(void);

379 20 clear_angular_forces 0 4 519 30 Physical::clear_angular_forces 0 1 96 246
////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Erases the angular force list
////////////////////////////////////////////////////////////////////
49
inline void Physical::clear_angular_forces(void);

380 21 clear_physics_objects 0 4 519 31 Physical::clear_physics_objects 0 1 97 240
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_objects
//      Access : Public
// Description : Erases the object list
////////////////////////////////////////////////////////////////////
50
inline void Physical::clear_physics_objects(void);

381 16 add_linear_force 0 4 519 26 Physical::add_linear_force 0 1 98 250
////////////////////////////////////////////////////////////////////
//    Function : add_linear_force
//      Access : Public
// Description : Adds a linear force to the force list
////////////////////////////////////////////////////////////////////
55
inline void Physical::add_linear_force(LinearForce *f);

382 17 add_angular_force 0 4 519 27 Physical::add_angular_force 0 1 99 253
////////////////////////////////////////////////////////////////////
//    Function : add_angular_force
//      Access : Public
// Description : Adds an angular force to the force list
////////////////////////////////////////////////////////////////////
57
inline void Physical::add_angular_force(AngularForce *f);

383 18 add_physics_object 0 4 519 28 Physical::add_physics_object 0 1 100 258
////////////////////////////////////////////////////////////////////
//    Function : add_physics_object
//      Access : Public
// Description : Adds an object to the physics object vector
////////////////////////////////////////////////////////////////////
60
inline void Physical::add_physics_object(PhysicsObject *po);

384 19 remove_linear_force 0 4 519 29 Physical::remove_linear_force 0 1 101 258
////////////////////////////////////////////////////////////////////
//    Function : remove_linear_force
//      Access : Public
// Description : removes a linear force from the force list
////////////////////////////////////////////////////////////////////
58
inline void Physical::remove_linear_force(LinearForce *f);

385 20 remove_angular_force 0 4 519 30 Physical::remove_angular_force 0 1 102 261
////////////////////////////////////////////////////////////////////
//    Function : remove_angular_force
//      Access : Public
// Description : removes an angular force from the force list
////////////////////////////////////////////////////////////////////
60
inline void Physical::remove_angular_force(AngularForce *f);

386 21 get_num_linear_forces 0 4 519 31 Physical::get_num_linear_forces 0 1 103 200
////////////////////////////////////////////////////////////////////
//    Function : get_num_linear_forces
//      Access : Public
////////////////////////////////////////////////////////////////////
55
inline int Physical::get_num_linear_forces(void) const;

387 16 get_linear_force 0 4 519 26 Physical::get_linear_force 0 1 104 195
////////////////////////////////////////////////////////////////////
//    Function : get_linear_force
//      Access : Public
////////////////////////////////////////////////////////////////////
76
inline PointerTo< LinearForce > Physical::get_linear_force(int index) const;

388 22 get_num_angular_forces 0 4 519 32 Physical::get_num_angular_forces 0 1 105 201
////////////////////////////////////////////////////////////////////
//    Function : get_num_angular_forces
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline int Physical::get_num_angular_forces(void) const;

389 17 get_angular_force 0 4 519 27 Physical::get_angular_force 0 1 106 196
////////////////////////////////////////////////////////////////////
//    Function : get_angular_force
//      Access : Public
////////////////////////////////////////////////////////////////////
78
inline PointerTo< AngularForce > Physical::get_angular_force(int index) const;

390 13 set_viscosity 0 4 519 23 Physical::set_viscosity 0 1 107 234
////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the local viscosity.
////////////////////////////////////////////////////////////////////
53
inline void Physical::set_viscosity(float viscosity);

391 13 get_viscosity 0 4 519 23 Physical::get_viscosity 0 1 108 234
////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the local viscosity.
////////////////////////////////////////////////////////////////////
49
inline float Physical::get_viscosity(void) const;

392 11 get_objects 0 4 519 21 Physical::get_objects 0 1 109 190
////////////////////////////////////////////////////////////////////
//    Function : get_objects
//      Access : Public
////////////////////////////////////////////////////////////////////
64
PhysicsObjectCollection const Physical::get_objects(void) const;

393 6 output 0 4 519 16 Physical::output 0 2 110 111 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
59
virtual void Physical::output(ostream &out = (cout)) const;

394 21 write_physics_objects 0 4 519 31 Physical::write_physics_objects 0 3 112 113 114 295
////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
101
virtual void Physical::write_physics_objects(ostream &out = (cout), unsigned int indent = (0)) const;

395 19 write_linear_forces 0 4 519 29 Physical::write_linear_forces 0 3 115 116 117 293
////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
99
virtual void Physical::write_linear_forces(ostream &out = (cout), unsigned int indent = (0)) const;

396 20 write_angular_forces 0 4 519 30 Physical::write_angular_forces 0 3 118 119 120 294
////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
100
virtual void Physical::write_angular_forces(ostream &out = (cout), unsigned int indent = (0)) const;

397 5 write 0 4 519 15 Physical::write 0 3 121 122 123 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
85
virtual void Physical::write(ostream &out = (cout), unsigned int indent = (0)) const;

398 14 get_class_type 0 4 519 24 Physical::get_class_type 0 1 124 0
49
static TypeHandle Physical::get_class_type(void);

399 12 PhysicalNode 0 4 520 26 PhysicalNode::PhysicalNode 0 1 125 464
////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : public
//  Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : protected
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
61
PhysicalNode::PhysicalNode(basic_string< char > const &name);

400 5 clear 0 4 520 19 PhysicalNode::clear 0 1 126 670
// Filename: physicalNode.I
// Created by:  charles (01Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
////////////////////////////////////////////////////////////////////
38
inline void PhysicalNode::clear(void);

401 12 get_physical 0 4 520 26 PhysicalNode::get_physical 0 1 127 187
////////////////////////////////////////////////////////////////////
//  Function : get_physical
//    Access : public
////////////////////////////////////////////////////////////////////
61
inline Physical *PhysicalNode::get_physical(int index) const;

402 17 get_num_physicals 0 4 520 31 PhysicalNode::get_num_physicals 0 1 128 192
////////////////////////////////////////////////////////////////////
//  Function : get_num_physicals
//    Access : public
////////////////////////////////////////////////////////////////////
55
inline int PhysicalNode::get_num_physicals(void) const;

403 12 add_physical 0 4 520 26 PhysicalNode::add_physical 0 1 129 187
////////////////////////////////////////////////////////////////////
//  Function : add_physical
//    Access : public
////////////////////////////////////////////////////////////////////
59
inline void PhysicalNode::add_physical(Physical *physical);

404 18 add_physicals_from 0 4 520 32 PhysicalNode::add_physicals_from 0 1 130 234
////////////////////////////////////////////////////////////////////
//     Function : add_physicals_from
//       Access : public
//  Description : append operation
////////////////////////////////////////////////////////////////////
65
void PhysicalNode::add_physicals_from(PhysicalNode const &other);

405 15 remove_physical 0 4 520 29 PhysicalNode::remove_physical 0 2 131 132 464
////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////
102
void PhysicalNode::remove_physical(Physical *physical);
void PhysicalNode::remove_physical(int index);

406 5 write 0 4 520 19 PhysicalNode::write 0 2 133 134 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void PhysicalNode::write(ostream &out, unsigned int indent = (0)) const;

407 14 get_class_type 0 4 520 28 PhysicalNode::get_class_type 0 1 135 0
53
static TypeHandle PhysicalNode::get_class_type(void);

408 9 ActorNode 0 4 522 20 ActorNode::ActorNode 0 3 136 137 138 448
////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Copy Constructor.
////////////////////////////////////////////////////////////////////
107
ActorNode::ActorNode(basic_string< char > const &name = (""));
ActorNode::ActorNode(ActorNode const &copy);

409 18 get_physics_object 0 4 522 29 ActorNode::get_physics_object 0 1 139 0
51
PhysicsObject *ActorNode::get_physics_object(void);

410 18 set_contact_vector 0 4 522 29 ActorNode::set_contact_vector 0 1 140 702
// Filename: actorNode.I
// Created by:  charles (07Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_contact_vector
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
68
void ActorNode::set_contact_vector(LVector3f const &contact_vector);

411 18 get_contact_vector 0 4 522 29 ActorNode::get_contact_vector 0 1 141 215
////////////////////////////////////////////////////////////////////
//    Function : get_contact_vector
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
59
LVector3f const &ActorNode::get_contact_vector(void) const;

412 16 update_transform 0 4 522 27 ActorNode::update_transform 0 1 142 510
// update the parent scene graph node with PhysicsObject information
// i.e. copy from PhysicsObject to PandaNode

////////////////////////////////////////////////////////////////////
//     Function : update_transform
//       Access : public
//  Description : this sets the transform generated by the contained
//                Physical, moving the node and subsequent geometry.
//                i.e. copy from PhysicsObject to PandaNode
////////////////////////////////////////////////////////////////////
39
void ActorNode::update_transform(void);

413 19 set_transform_limit 0 4 522 30 ActorNode::set_transform_limit 0 1 143 0
49
void ActorNode::set_transform_limit(float limit);

414 14 get_class_type 0 4 522 25 ActorNode::get_class_type 0 1 144 0
50
static TypeHandle ActorNode::get_class_type(void);

415 6 output 0 4 523 22 BaseIntegrator::output 0 1 145 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
56
virtual void BaseIntegrator::output(ostream &out) const;

416 33 write_precomputed_linear_matrices 0 4 523 49 BaseIntegrator::write_precomputed_linear_matrices 0 2 146 147 307
////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
110
virtual void BaseIntegrator::write_precomputed_linear_matrices(ostream &out, unsigned int indent = (0)) const;

417 34 write_precomputed_angular_matrices 0 4 523 50 BaseIntegrator::write_precomputed_angular_matrices 0 2 148 149 308
////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
111
virtual void BaseIntegrator::write_precomputed_angular_matrices(ostream &out, unsigned int indent = (0)) const;

418 5 write 0 4 523 21 BaseIntegrator::write 0 2 150 151 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
82
virtual void BaseIntegrator::write(ostream &out, unsigned int indent = (0)) const;

419 22 AngularEulerIntegrator 0 4 526 46 AngularEulerIntegrator::AngularEulerIntegrator 0 1 152 233
////////////////////////////////////////////////////////////////////
//     Function : AngularEulerIntegrator
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////
53
AngularEulerIntegrator::AngularEulerIntegrator(void);

420 18 AngularVectorForce 0 4 527 38 AngularVectorForce::AngularVectorForce 0 3 153 154 155 687
////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
202
AngularVectorForce::AngularVectorForce(LRotationf const &quat);
AngularVectorForce::AngularVectorForce(float h, float p, float r);
AngularVectorForce::AngularVectorForce(AngularVectorForce const &copy);

421 8 set_quat 0 4 527 28 AngularVectorForce::set_quat 0 1 156 677
// Filename: angularVectorForce.I
// Created by:  charles (09Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_quat
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline void AngularVectorForce::set_quat(LRotationf const &quat);

422 7 set_hpr 0 4 527 27 AngularVectorForce::set_hpr 0 1 157 180
////////////////////////////////////////////////////////////////////
// Function : set_hpr
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline void AngularVectorForce::set_hpr(float h, float p, float r);

423 14 get_local_quat 0 4 527 34 AngularVectorForce::get_local_quat 0 1 158 187
////////////////////////////////////////////////////////////////////
// Function : get_local_quat
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline LRotationf AngularVectorForce::get_local_quat(void) const;

424 14 get_class_type 0 4 527 34 AngularVectorForce::get_class_type 0 1 159 0
59
static TypeHandle AngularVectorForce::get_class_type(void);

425 9 ForceNode 0 4 528 20 ForceNode::ForceNode 0 1 160 458
////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : public
//  Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : protected
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
55
ForceNode::ForceNode(basic_string< char > const &name);

426 5 clear 0 4 528 16 ForceNode::clear 0 1 161 667
// Filename: forceNode.I
// Created by:  charles (02Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
////////////////////////////////////////////////////////////////////
35
inline void ForceNode::clear(void);

427 9 get_force 0 4 528 20 ForceNode::get_force 0 1 162 184
////////////////////////////////////////////////////////////////////
//  Function : get_force
//    Access : public
////////////////////////////////////////////////////////////////////
56
inline BaseForce *ForceNode::get_force(int index) const;

428 14 get_num_forces 0 4 528 25 ForceNode::get_num_forces 0 1 163 189
////////////////////////////////////////////////////////////////////
//  Function : get_num_forces
//    Access : public
////////////////////////////////////////////////////////////////////
49
inline int ForceNode::get_num_forces(void) const;

429 9 add_force 0 4 528 20 ForceNode::add_force 0 1 164 184
////////////////////////////////////////////////////////////////////
//  Function : add_force
//    Access : public
////////////////////////////////////////////////////////////////////
51
inline void ForceNode::add_force(BaseForce *force);

430 15 add_forces_from 0 4 528 26 ForceNode::add_forces_from 0 1 165 231
////////////////////////////////////////////////////////////////////
//     Function : add_forces_from
//       Access : public
//  Description : append operation
////////////////////////////////////////////////////////////////////
56
void ForceNode::add_forces_from(ForceNode const &other);

431 12 remove_force 0 4 528 23 ForceNode::remove_force 0 2 166 167 458
////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////
84
void ForceNode::remove_force(BaseForce *f);
void ForceNode::remove_force(int index);

432 12 write_forces 0 4 528 23 ForceNode::write_forces 0 2 168 169 293
////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
84
virtual void ForceNode::write_forces(ostream &out, unsigned int indent = (0)) const;

433 5 write 0 4 528 16 ForceNode::write 0 2 170 171 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
77
virtual void ForceNode::write(ostream &out, unsigned int indent = (0)) const;

434 14 get_class_type 0 4 528 25 ForceNode::get_class_type 0 1 172 0
50
static TypeHandle ForceNode::get_class_type(void);

435 18 LinearControlForce 0 4 529 38 LinearControlForce::LinearControlForce 0 5 173 174 175 176 177 472
////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Copy Constructor
////////////////////////////////////////////////////////////////////
174
LinearControlForce::LinearControlForce(PhysicsObject const *po = (0), float a = (1), bool mass = (0));
LinearControlForce::LinearControlForce(LinearControlForce const &copy);

436 20 clear_physics_object 0 4 529 40 LinearControlForce::clear_physics_object 0 1 178 736
// Filename: linearControlForce.I
// Created by: Dave Schuyler (2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_object
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////
59
inline void LinearControlForce::clear_physics_object(void);

437 18 set_physics_object 0 4 529 38 LinearControlForce::set_physics_object 0 1 179 236
////////////////////////////////////////////////////////////////////
//    Function : set_physics_object
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////
76
inline void LinearControlForce::set_physics_object(PhysicsObject const *po);

438 18 get_physics_object 0 4 529 38 LinearControlForce::get_physics_object 0 1 180 246
////////////////////////////////////////////////////////////////////
//    Function : get_physics_object
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
90
inline ConstPointerTo< PhysicsObject > LinearControlForce::get_physics_object(void) const;

439 10 set_vector 0 4 529 30 LinearControlForce::set_vector 0 2 181 182 468
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
134
inline void LinearControlForce::set_vector(LVector3f const &v);
inline void LinearControlForce::set_vector(float x, float y, float z);

440 16 get_local_vector 0 4 529 36 LinearControlForce::get_local_vector 0 1 183 212
////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
66
inline LVector3f LinearControlForce::get_local_vector(void) const;

441 14 get_class_type 0 4 529 34 LinearControlForce::get_class_type 0 1 184 0
59
static TypeHandle LinearControlForce::get_class_type(void);

442 25 LinearCylinderVortexForce 0 4 530 52 LinearCylinderVortexForce::LinearCylinderVortexForce 0 7 185 186 187 188 189 190 191 480
////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : copy Constructor
////////////////////////////////////////////////////////////////////
234
LinearCylinderVortexForce::LinearCylinderVortexForce(float radius = (1), float length = (0), float coef = (1), float a = (1), bool md = (0));
LinearCylinderVortexForce::LinearCylinderVortexForce(LinearCylinderVortexForce const &copy);

443 8 set_coef 0 4 530 35 LinearCylinderVortexForce::set_coef 0 1 192 181
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
////////////////////////////////////////////////////////////////////
60
inline void LinearCylinderVortexForce::set_coef(float coef);

444 8 get_coef 0 4 530 35 LinearCylinderVortexForce::get_coef 0 1 193 181
////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
////////////////////////////////////////////////////////////////////
61
inline float LinearCylinderVortexForce::get_coef(void) const;

445 10 set_radius 0 4 530 37 LinearCylinderVortexForce::set_radius 0 1 194 686
// Filename: linearCylinderVortexForce.I
// Created by:  charles (24Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_radius
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline void LinearCylinderVortexForce::set_radius(float radius);

446 10 get_radius 0 4 530 37 LinearCylinderVortexForce::get_radius 0 1 195 183
////////////////////////////////////////////////////////////////////
// Function : get_radius
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float LinearCylinderVortexForce::get_radius(void) const;

447 10 set_length 0 4 530 37 LinearCylinderVortexForce::set_length 0 1 196 183
////////////////////////////////////////////////////////////////////
// Function : set_length
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline void LinearCylinderVortexForce::set_length(float length);

448 10 get_length 0 4 530 37 LinearCylinderVortexForce::get_length 0 1 197 183
////////////////////////////////////////////////////////////////////
// Function : get_length
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float LinearCylinderVortexForce::get_length(void) const;

449 14 get_class_type 0 4 530 41 LinearCylinderVortexForce::get_class_type 0 1 198 0
66
static TypeHandle LinearCylinderVortexForce::get_class_type(void);

450 10 set_radius 0 4 531 31 LinearDistanceForce::set_radius 0 1 199 221
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : set the radius
////////////////////////////////////////////////////////////////////
53
inline void LinearDistanceForce::set_radius(float r);

451 16 set_falloff_type 0 4 531 37 LinearDistanceForce::set_falloff_type 0 1 200 741
// Filename: linearDistanceForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_falloff_type
//      Access : Public
// Description : falloff_type encapsulating wrap
////////////////////////////////////////////////////////////////////
87
inline void LinearDistanceForce::set_falloff_type(LinearDistanceForce::FalloffType ft);

452 16 set_force_center 0 4 531 37 LinearDistanceForce::set_force_center 0 1 201 233
////////////////////////////////////////////////////////////////////
//    Function : set_force_center
//      Access : Public
// Description : set the force center
////////////////////////////////////////////////////////////////////
69
inline void LinearDistanceForce::set_force_center(LPoint3f const &p);

453 10 get_radius 0 4 531 31 LinearDistanceForce::get_radius 0 1 202 219
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius query
////////////////////////////////////////////////////////////////////
57
inline float LinearDistanceForce::get_radius(void) const;

454 16 get_falloff_type 0 4 531 37 LinearDistanceForce::get_falloff_type 0 1 203 231
////////////////////////////////////////////////////////////////////
//    Function : get_falloff_type
//      Access : public
// Description : falloff_type query
////////////////////////////////////////////////////////////////////
90
inline LinearDistanceForce::FalloffType LinearDistanceForce::get_falloff_type(void) const;

455 16 get_force_center 0 4 531 37 LinearDistanceForce::get_force_center 0 1 204 231
////////////////////////////////////////////////////////////////////
//    Function : get_force_center
//      Access : public
// Description : force_center query
////////////////////////////////////////////////////////////////////
66
inline LPoint3f LinearDistanceForce::get_force_center(void) const;

456 15 get_scalar_term 0 4 531 36 LinearDistanceForce::get_scalar_term 0 1 205 248
////////////////////////////////////////////////////////////////////
//    Function : get_scalar_term
//      Access : private
// Description : calculate the term based on falloff
////////////////////////////////////////////////////////////////////
62
inline float LinearDistanceForce::get_scalar_term(void) const;

457 14 get_class_type 0 4 531 35 LinearDistanceForce::get_class_type 0 1 206 0
60
static TypeHandle LinearDistanceForce::get_class_type(void);

458 21 LinearEulerIntegrator 0 4 534 44 LinearEulerIntegrator::LinearEulerIntegrator 0 1 207 232
////////////////////////////////////////////////////////////////////
//     Function : LinearEulerIntegrator
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////
51
LinearEulerIntegrator::LinearEulerIntegrator(void);

459 19 LinearFrictionForce 0 4 535 40 LinearFrictionForce::LinearFrictionForce 0 5 208 209 210 211 212 461
////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
163
LinearFrictionForce::LinearFrictionForce(float coef = (1), float a = (1), bool m = (0));
LinearFrictionForce::LinearFrictionForce(LinearFrictionForce const &copy);

460 8 set_coef 0 4 535 29 LinearFrictionForce::set_coef 0 1 213 678
// Filename: linearFrictionForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
////////////////////////////////////////////////////////////////////
54
inline void LinearFrictionForce::set_coef(float coef);

461 8 get_coef 0 4 535 29 LinearFrictionForce::get_coef 0 1 214 181
////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
////////////////////////////////////////////////////////////////////
55
inline float LinearFrictionForce::get_coef(void) const;

462 14 get_class_type 0 4 535 35 LinearFrictionForce::get_class_type 0 1 215 0
60
static TypeHandle LinearFrictionForce::get_class_type(void);

463 14 get_class_type 0 4 536 33 LinearRandomForce::get_class_type 0 1 216 0
58
static TypeHandle LinearRandomForce::get_class_type(void);

464 17 LinearJitterForce 0 4 537 36 LinearJitterForce::LinearJitterForce 0 4 217 218 219 220 457
////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
135
LinearJitterForce::LinearJitterForce(float a = (1), bool m = (0));
LinearJitterForce::LinearJitterForce(LinearJitterForce const &copy);

465 14 get_class_type 0 4 537 33 LinearJitterForce::get_class_type 0 1 221 0
58
static TypeHandle LinearJitterForce::get_class_type(void);

466 16 LinearNoiseForce 0 4 538 34 LinearNoiseForce::LinearNoiseForce 0 4 222 223 224 225 461
////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
130
LinearNoiseForce::LinearNoiseForce(float a = (1), bool m = (0));
LinearNoiseForce::LinearNoiseForce(LinearNoiseForce const &copy);

467 14 get_class_type 0 4 538 32 LinearNoiseForce::get_class_type 0 1 226 0
57
static TypeHandle LinearNoiseForce::get_class_type(void);

468 15 LinearSinkForce 0 4 539 32 LinearSinkForce::LinearSinkForce 0 5 227 228 229 230 231 692
////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
229
LinearSinkForce::LinearSinkForce(LPoint3f const &p, LinearDistanceForce::FalloffType f, float r, float a = (1), bool m = (1));
LinearSinkForce::LinearSinkForce(void);
LinearSinkForce::LinearSinkForce(LinearSinkForce const &copy);

469 14 get_class_type 0 4 539 31 LinearSinkForce::get_class_type 0 1 232 0
56
static TypeHandle LinearSinkForce::get_class_type(void);

470 17 LinearSourceForce 0 4 540 36 LinearSourceForce::LinearSourceForce 0 5 233 234 235 236 237 698
////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
246
LinearSourceForce::LinearSourceForce(LPoint3f const &p, LinearDistanceForce::FalloffType f, float r, float a = (1), bool mass = (1));
LinearSourceForce::LinearSourceForce(void);
LinearSourceForce::LinearSourceForce(LinearSourceForce const &copy);

471 14 get_class_type 0 4 540 33 LinearSourceForce::get_class_type 0 1 238 0
58
static TypeHandle LinearSourceForce::get_class_type(void);

472 22 LinearUserDefinedForce 0 4 541 46 LinearUserDefinedForce::LinearUserDefinedForce 0 2 239 240 467
////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
219
LinearUserDefinedForce::LinearUserDefinedForce(LVector3f (*proc)(PhysicsObject const *) = ((void *)(0)), float a = (1), bool md = (0));
LinearUserDefinedForce::LinearUserDefinedForce(LinearUserDefinedForce const &copy);

473 8 set_proc 0 4 541 32 LinearUserDefinedForce::set_proc 0 0 681
// Filename: linearUserDefinedForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_proc
//   Access : public
////////////////////////////////////////////////////////////////////
87
inline void LinearUserDefinedForce::set_proc(LVector3f (*proc)(PhysicsObject const *));

474 14 get_class_type 0 4 541 38 LinearUserDefinedForce::get_class_type 0 1 241 0
63
static TypeHandle LinearUserDefinedForce::get_class_type(void);

475 17 LinearVectorForce 0 4 542 36 LinearVectorForce::LinearVectorForce 0 10 242 243 244 245 246 247 248 249 250 251 718
////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Copy Constructor
////////////////////////////////////////////////////////////////////
275
LinearVectorForce::LinearVectorForce(LVector3f const &vec, float a = (1), bool mass = (0));
LinearVectorForce::LinearVectorForce(LinearVectorForce const &copy);
LinearVectorForce::LinearVectorForce(float x = (0), float y = (0), float z = (0), float a = (1), bool mass = (0));

476 10 set_vector 0 4 542 29 LinearVectorForce::set_vector 0 2 252 253 963
// Filename: linearVectorForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
132
inline void LinearVectorForce::set_vector(LVector3f const &v);
inline void LinearVectorForce::set_vector(float x, float y, float z);

477 16 get_local_vector 0 4 542 35 LinearVectorForce::get_local_vector 0 1 254 212
////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
65
inline LVector3f LinearVectorForce::get_local_vector(void) const;

478 14 get_class_type 0 4 542 33 LinearVectorForce::get_class_type 0 1 255 0
58
static TypeHandle LinearVectorForce::get_class_type(void);

479 23 PhysicsCollisionHandler 0 4 543 48 PhysicsCollisionHandler::PhysicsCollisionHandler 0 1 256 232
////////////////////////////////////////////////////////////////////
//     Function: PhysicsCollisionHandler::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
PhysicsCollisionHandler::PhysicsCollisionHandler(void);

480 27 set_almost_stationary_speed 0 4 543 52 PhysicsCollisionHandler::set_almost_stationary_speed 0 1 257 48
// These setters and getter are a bit of a hack:
78
inline void PhysicsCollisionHandler::set_almost_stationary_speed(float speed);

481 27 get_almost_stationary_speed 0 4 543 52 PhysicsCollisionHandler::get_almost_stationary_speed 0 1 258 48
// These setters and getter are a bit of a hack:
72
inline float PhysicsCollisionHandler::get_almost_stationary_speed(void);

482 24 set_static_friction_coef 0 4 543 49 PhysicsCollisionHandler::set_static_friction_coef 0 1 259 0
74
inline void PhysicsCollisionHandler::set_static_friction_coef(float coef);

483 24 get_static_friction_coef 0 4 543 49 PhysicsCollisionHandler::get_static_friction_coef 0 1 260 0
69
inline float PhysicsCollisionHandler::get_static_friction_coef(void);

484 25 set_dynamic_friction_coef 0 4 543 50 PhysicsCollisionHandler::set_dynamic_friction_coef 0 1 261 0
75
inline void PhysicsCollisionHandler::set_dynamic_friction_coef(float coef);

485 25 get_dynamic_friction_coef 0 4 543 50 PhysicsCollisionHandler::get_dynamic_friction_coef 0 1 262 0
70
inline float PhysicsCollisionHandler::get_dynamic_friction_coef(void);

486 14 get_class_type 0 4 543 39 PhysicsCollisionHandler::get_class_type 0 1 263 0
64
static TypeHandle PhysicsCollisionHandler::get_class_type(void);

487 14 PhysicsManager 0 4 545 30 PhysicsManager::PhysicsManager 0 1 264 300
////////////////////////////////////////////////////////////////////
//     Function : PhysicsManager
//       Access : Public
//  Description : Default Constructor.  NOTE: EulerIntegrator is
//                the standard default.
////////////////////////////////////////////////////////////////////
37
PhysicsManager::PhysicsManager(void);

488 15 ~PhysicsManager 0 4 545 31 PhysicsManager::~PhysicsManager 0 0 232
////////////////////////////////////////////////////////////////////
//     Function : ~PhysicsManager
//       Access : Public
//  Description : Simple Destructor
////////////////////////////////////////////////////////////////////
46
virtual PhysicsManager::~PhysicsManager(void);

489 24 attach_linear_integrator 0 4 545 40 PhysicsManager::attach_linear_integrator 0 1 265 263
////////////////////////////////////////////////////////////////////
//    Function : attach_linear_integrator
//      Access : Public
// Description : Hooks a linear integrator into the manager
////////////////////////////////////////////////////////////////////
74
inline void PhysicsManager::attach_linear_integrator(LinearIntegrator *i);

490 25 attach_angular_integrator 0 4 545 41 PhysicsManager::attach_angular_integrator 0 1 266 266
////////////////////////////////////////////////////////////////////
//    Function : attach_angular_integrator
//      Access : Public
// Description : Hooks an angular integrator into the manager
////////////////////////////////////////////////////////////////////
76
inline void PhysicsManager::attach_angular_integrator(AngularIntegrator *i);

491 15 attach_physical 0 4 545 31 PhysicsManager::attach_physical 0 1 267 747
// Filename: physicsManager.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : attach_physical
//      Access : Public
// Description : Registers a Physical class with the manager
////////////////////////////////////////////////////////////////////
57
inline void PhysicsManager::attach_physical(Physical *p);

492 19 attach_physicalnode 0 4 545 35 PhysicsManager::attach_physicalnode 0 1 268 257
////////////////////////////////////////////////////////////////////
//    Function : attach_physicalnode
//      Access : Public
// Description : Please call attach_physical_node instead.
////////////////////////////////////////////////////////////////////
65
inline void PhysicsManager::attach_physicalnode(PhysicalNode *p);

493 20 attach_physical_node 0 4 545 36 PhysicsManager::attach_physical_node 0 1 269 296
// use attach_physical_node instead.

////////////////////////////////////////////////////////////////////
//    Function : attach_physical_node
//      Access : Public
// Description : Registers a physicalnode with the manager
////////////////////////////////////////////////////////////////////
66
inline void PhysicsManager::attach_physical_node(PhysicalNode *p);

494 16 add_linear_force 0 4 545 32 PhysicsManager::add_linear_force 0 1 270 303
// use attach_physical_node instead.

////////////////////////////////////////////////////////////////////
//    Function : attach_linear_force
//      Access : Public
// Description : Adds a global linear force to the physics manager
////////////////////////////////////////////////////////////////////
61
inline void PhysicsManager::add_linear_force(LinearForce *f);

495 17 add_angular_force 0 4 545 33 PhysicsManager::add_angular_force 0 1 271 267
////////////////////////////////////////////////////////////////////
//    Function : attach_angular_force
//      Access : Public
// Description : Adds a global angular force to the physics manager
////////////////////////////////////////////////////////////////////
63
inline void PhysicsManager::add_angular_force(AngularForce *f);

496 19 clear_linear_forces 0 4 545 35 PhysicsManager::clear_linear_forces 0 1 272 255
////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Resets the physics manager force vector
////////////////////////////////////////////////////////////////////
54
inline void PhysicsManager::clear_linear_forces(void);

497 20 clear_angular_forces 0 4 545 36 PhysicsManager::clear_angular_forces 0 1 273 256
////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Resets the physics manager force vector
////////////////////////////////////////////////////////////////////
55
inline void PhysicsManager::clear_angular_forces(void);

498 15 clear_physicals 0 4 545 31 PhysicsManager::clear_physicals 0 1 274 253
////////////////////////////////////////////////////////////////////
//    Function : clear_physicals
//      Access : Public
// Description : Resets the physics manager objects vector
////////////////////////////////////////////////////////////////////
50
inline void PhysicsManager::clear_physicals(void);

499 13 set_viscosity 0 4 545 29 PhysicsManager::set_viscosity 0 1 275 235
////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the global viscosity.
////////////////////////////////////////////////////////////////////
59
inline void PhysicsManager::set_viscosity(float viscosity);

500 13 get_viscosity 0 4 545 29 PhysicsManager::get_viscosity 0 1 276 235
////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the global viscosity.
////////////////////////////////////////////////////////////////////
55
inline float PhysicsManager::get_viscosity(void) const;

501 15 remove_physical 0 4 545 31 PhysicsManager::remove_physical 0 1 277 254
////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : Public
//  Description : takes a physical out of the object list
////////////////////////////////////////////////////////////////////
50
void PhysicsManager::remove_physical(Physical *p);

502 20 remove_physical_node 0 4 545 36 PhysicsManager::remove_physical_node 0 1 278 256
////////////////////////////////////////////////////////////////////
//    Function : remove_physical_node
//      Access : Public
// Description : Removes a physicalnode from the manager
////////////////////////////////////////////////////////////////////
59
void PhysicsManager::remove_physical_node(PhysicalNode *p);

503 19 remove_linear_force 0 4 545 35 PhysicsManager::remove_linear_force 0 1 279 263
////////////////////////////////////////////////////////////////////
//     Function : remove_linear_force
//       Access : Public
//  Description : takes a linear force out of the physics list
////////////////////////////////////////////////////////////////////
57
void PhysicsManager::remove_linear_force(LinearForce *f);

504 20 remove_angular_force 0 4 545 36 PhysicsManager::remove_angular_force 0 1 280 266
////////////////////////////////////////////////////////////////////
//     Function : remove_angular_force
//       Access : Public
//  Description : takes an angular force out of the physics list
////////////////////////////////////////////////////////////////////
59
void PhysicsManager::remove_angular_force(AngularForce *f);

505 10 do_physics 0 4 545 26 PhysicsManager::do_physics 0 2 281 282 688
////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on every attached Physical.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on a single physical.  Make sure its 
//                associated forces are active.
////////////////////////////////////////////////////////////////////
98
void PhysicsManager::do_physics(float dt);
void PhysicsManager::do_physics(float dt, Physical *p);

506 16 init_random_seed 0 4 545 32 PhysicsManager::init_random_seed 0 1 283 388
////////////////////////////////////////////////////////////////////
//     Function : InitRandomSeed
//       Access : Public
//  Description : One-time config function, sets up the random seed
//                used by the physics and particle systems.
//                For synchronizing across distributed computers
////////////////////////////////////////////////////////////////////
44
void PhysicsManager::init_random_seed(void);

507 6 output 0 4 545 22 PhysicsManager::output 0 1 284 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
56
virtual void PhysicsManager::output(ostream &out) const;

508 15 write_physicals 0 4 545 31 PhysicsManager::write_physicals 0 2 285 286 289
////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
92
virtual void PhysicsManager::write_physicals(ostream &out, unsigned int indent = (0)) const;

509 19 write_linear_forces 0 4 545 35 PhysicsManager::write_linear_forces 0 2 287 288 286
////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
96
virtual void PhysicsManager::write_linear_forces(ostream &out, unsigned int indent = (0)) const;

510 20 write_angular_forces 0 4 545 36 PhysicsManager::write_angular_forces 0 2 289 290 294
////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
97
virtual void PhysicsManager::write_angular_forces(ostream &out, unsigned int indent = (0)) const;

511 5 write 0 4 545 21 PhysicsManager::write 0 2 291 292 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
82
virtual void PhysicsManager::write(ostream &out, unsigned int indent = (0)) const;

512 12 debug_output 0 4 545 28 PhysicsManager::debug_output 0 2 293 294 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
89
virtual void PhysicsManager::debug_output(ostream &out, unsigned int indent = (0)) const;

294
1 14 Dtool_1Scs19Dv 0 7 3 546 0 14 Dtool_1Scs19Dv 232 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_1ScsniDU 0 7 3 546 0 14 Dtool_1ScsniDU 229 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 547  
3 14 Dtool_1ScsK_qc 0 7 4 546 0 14 Dtool_1ScsK_qc 218 ////////////////////////////////////////////////////////////////////
//     Function : Assignment operator
//       Access : Public
//  Description :
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  5 other 1 547  
4 14 Dtool_1Scsk3K1 0 4 5 550 0 14 Dtool_1Scsk3K1 230 ////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
// Description : Process Flag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  4 flag 1 549  
5 14 Dtool_1ScsA4xf 0 6 6 549 0 14 Dtool_1ScsA4xf 225 ////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
// Description : Process Flag Query
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
6 14 Dtool_1Scs7Zyt 0 4 7 550 0 14 Dtool_1Scs7Zyt 733 // Filename: physicsObject.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_mass
//      Access : Public
// Description : Set the mass in slugs (or kilograms).
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  6 param0 0 551  
7 14 Dtool_1Scs4psm 0 6 8 551 0 14 Dtool_1Scs4psm 242 ////////////////////////////////////////////////////////////////////
//    Function : get_mass
//      Access : Public
// Description : Get the mass in slugs (or kilograms).
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
8 14 Dtool_1ScsxgAg 0 4 9 550 0 14 Dtool_1ScsxgAg 295 ////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Vector position assignment.  This is also used as
//               the center of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 pos 1 552  
9 14 Dtool_1Scs2VGQ 0 4 9 550 0 14 Dtool_1Scs2VGQ 238 ////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Piecewise position assignment
//////////////////////////////////////////////////////////////////// 4 4 this 3 546  1 x 1 551  1 y 1 551  1 z 1 551  
10 14 Dtool_1Scs2Mf1 0 7 10 555 0 14 Dtool_1Scs2Mf1 223 ////////////////////////////////////////////////////////////////////
//    Function : get_position
//      Access : Public
// Description : Position Query
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
11 14 Dtool_1ScsrXx9 0 4 11 550 0 14 Dtool_1ScsrXx9 349 ////////////////////////////////////////////////////////////////////
//    Function : reset_position
//      Access : Public
// Description : use this to place an object in a completely new
//               position, that has nothing to do with its last
//               position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 pos 1 552  
12 14 Dtool_1Scsy9P2 0 4 12 550 0 14 Dtool_1Scsy9P2 238 ////////////////////////////////////////////////////////////////////
//    Function : set_last_position
//      Access : Public
// Description : Last position assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 pos 1 552  
13 14 Dtool_1ScsfPBj 0 7 13 555 0 14 Dtool_1ScsfPBj 313 ////////////////////////////////////////////////////////////////////
//    Function : get_last_position
//      Access : Public
// Description : Get the position of the physics object at the start
//               of the most recent do_physics.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
14 14 Dtool_1ScsZTzH 0 4 14 550 0 14 Dtool_1ScsZTzH 235 ////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Vector velocity assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 vel 1 556  
15 14 Dtool_1ScsAJOH 0 4 14 550 0 14 Dtool_1ScsAJOH 238 ////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Piecewise velocity assignment
//////////////////////////////////////////////////////////////////// 4 4 this 3 546  1 x 1 551  1 y 1 551  1 z 1 551  
16 14 Dtool_1ScsYDns 0 7 15 559 0 14 Dtool_1ScsYDns 234 ////////////////////////////////////////////////////////////////////
//    Function : get_velocity
//      Access : Public
// Description : Velocity Query per second
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
17 14 Dtool_1Scsm1Ut 0 7 16 559 0 14 Dtool_1Scsm1Ut 249 ////////////////////////////////////////////////////////////////////
//    Function : get_implicit_velocity
//      Access : Public
// Description : Velocity Query over the last dt
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
18 14 Dtool_1ScsfYuT 0 4 17 550 0 14 Dtool_1ScsfYuT 445 ////////////////////////////////////////////////////////////////////
//    Function : add_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  6 torque 1 560  
19 14 Dtool_1ScsuEW4 0 4 18 550 0 14 Dtool_1ScsuEW4 431 ////////////////////////////////////////////////////////////////////
//    Function : add_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  7 impulse 1 556  
20 14 Dtool_1Scspp9_ 0 4 19 550 0 14 Dtool_1Scspp9_ 656 ////////////////////////////////////////////////////////////////////
//    Function : add_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in global (or parent) coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 546  26 offset_from_center_of_mass 1 552  7 impulse 1 556  
21 14 Dtool_1ScsQTAy 0 4 20 550 0 14 Dtool_1ScsQTAy 451 ////////////////////////////////////////////////////////////////////
//    Function : add_local_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  6 torque 1 560  
22 14 Dtool_1ScsyfsY 0 4 21 550 0 14 Dtool_1ScsyfsY 437 ////////////////////////////////////////////////////////////////////
//    Function : add_local_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  7 impulse 1 556  
23 14 Dtool_1Scs4miC 0 4 22 550 0 14 Dtool_1Scs4miC 649 ////////////////////////////////////////////////////////////////////
//    Function : add_local_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in local coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 546  26 offset_from_center_of_mass 1 552  7 impulse 1 556  
24 14 Dtool_1ScscEdt 0 4 23 550 0 14 Dtool_1ScscEdt 231 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity
//      Access : Public
// Description : tv assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  2 tv 1 551  
25 14 Dtool_1ScsVEE2 0 6 24 551 0 14 Dtool_1ScsVEE2 226 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity
//      Access : Public
// Description : tv query
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
26 14 Dtool_1Scs_NXG 0 4 25 550 0 14 Dtool_1Scs_NXG 334 ////////////////////////////////////////////////////////////////////
//    Function : set_oriented
//      Access : Public
// Description : Set flag to determine whether this object should do
//               any rotation or orientation calculations.  Optimization.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  4 flag 1 549  
27 14 Dtool_1Scseb01 0 6 26 549 0 14 Dtool_1Scseb01 228 ////////////////////////////////////////////////////////////////////
//    Function : get_oriented
//      Access : Public
// Description : See set_oriented().
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
28 14 Dtool_1ScsQXq_ 0 4 27 550 0 14 Dtool_1ScsQXq_ 211 ////////////////////////////////////////////////////////////////////
//    Function : set_orientation
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  11 orientation 1 563  
29 14 Dtool_1ScsLaE6 0 7 28 566 0 14 Dtool_1ScsLaE6 236 ////////////////////////////////////////////////////////////////////
//    Function : get_orientation
//      Access : Public
// Description : get current orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
30 14 Dtool_1ScsueOQ 0 4 29 550 0 14 Dtool_1ScsueOQ 288 ////////////////////////////////////////////////////////////////////
//    Function : reset_orientation
//      Access : Public
// Description : set the orientation while clearing the rotation
//               velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  11 orientation 1 563  
31 14 Dtool_1ScsnwCa 0 4 30 550 0 14 Dtool_1ScsnwCa 255 ////////////////////////////////////////////////////////////////////
//    Function : set_rotation
//      Access : Public
// Description : set rotation as a quaternion delta per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  8 rotation 1 560  
32 14 Dtool_1ScsYNx7 0 7 31 567 0 14 Dtool_1ScsYNx7 233 ////////////////////////////////////////////////////////////////////
//    Function : get_rotation
//      Access : Public
// Description : get rotation per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
33 14 Dtool_1Scs2KW7 0 7 32 569 0 14 Dtool_1Scs2KW7 318 ////////////////////////////////////////////////////////////////////
//     Function : get_inertial_tensor
//       Access : Public
//  Description : returns a transform matrix that represents the
//                object's willingness to be forced.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
34 14 Dtool_1Scsj4Kt 0 7 33 569 0 14 Dtool_1Scsj4Kt 293 ////////////////////////////////////////////////////////////////////
//     Function : get_lcs
//       Access : Public
//  Description : returns a transform matrix to this object's
//                local coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
35 14 Dtool_1ScsWP2J 0 7 34 546 0 14 Dtool_1ScsWP2J 231 ////////////////////////////////////////////////////////////////////
//     Function : make_copy
//       Access : Public, virtual
//  Description : dynamic copy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
36 14 Dtool_1Scs0yLq 0 4 35 550 0 14 Dtool_1Scs0yLq 0 2 4 this 3 546  4 name 1 570  
37 14 Dtool_1ScsXpFK 0 6 36 570 0 14 Dtool_1ScsXpFK 0 1 4 this 3 546  
38 14 Dtool_1Scskx3h 0 4 37 550 0 14 Dtool_1Scskx3h 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  3 out 1 571  
39 14 Dtool_1ScsygbI 0 4 38 550 0 14 Dtool_1ScsygbI 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 547  3 out 1 571  6 indent 1 573  
40 14 Dtool_1Scsax5t 0 4 38 550 0 14 Dtool_1Scsax5t 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  3 out 1 571  
41 14 Dtool_1ScsbfoM 0 7 39 575 0 14 Dtool_1ScsbfoM 0 0 
42 14 Dtool_1ScsyOhw 0 7 41 576 334 14 Dtool_1ScsyOhw 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
43 14 Dtool_1Scsc5Rv 0 7 41 576 334 14 Dtool_1Scsc5Rv 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 577  
44 14 Dtool_1ScsWCBo 0 6 42 576 0 14 Dtool_1ScsWCBo 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  4 copy 1 577  
45 14 Dtool_1Scs37uu 0 4 44 550 0 14 Dtool_1Scs37uu 286 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_object
//       Access: Published
//  Description: Adds a new PhysicsObject to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  14 physics_object 1 546  
46 14 Dtool_1Scsq7HH 0 6 45 549 0 14 Dtool_1Scsq7HH 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_object
//       Access: Published
//  Description: Removes the indicated PhysicsObject from the collection.
//               Returns true if the physics_object was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  14 physics_object 1 546  
47 14 Dtool_1ScsZbIx 0 4 46 550 0 14 Dtool_1ScsZbIx 537 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_objects_from
//       Access: Published
//  Description: Adds all the PhysicsObjects indicated in the other
//               collection to this collection.  The other 
//               physics_objects are simply appended to the end of 
//               the physics_objects in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  5 other 1 577  
48 14 Dtool_1Scs7olt 0 4 47 550 0 14 Dtool_1Scs7olt 355 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_objects_from
//       Access: Published
//  Description: Removes from this collection all of the PhysicsObjects
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  5 other 1 577  
49 14 Dtool_1Scs5KRU 0 4 48 550 0 14 Dtool_1Scs5KRU 498 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_duplicate_physics_objects
//       Access: Published
//  Description: Removes any duplicate entries of the same PhysicsObjects
//               on this collection.  If a PhysicsObject appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
50 14 Dtool_1ScsmH8j 0 6 49 549 0 14 Dtool_1ScsmH8j 348 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::has_physics_object
//       Access: Published
//  Description: Returns true if the indicated PhysicsObject appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  14 physics_object 1 546  
51 14 Dtool_1ScsRYCU 0 4 50 550 0 14 Dtool_1ScsRYCU 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::clear
//       Access: Published
//  Description: Removes all PhysicsObjects from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
52 14 Dtool_1ScsShsa 0 6 51 549 0 14 Dtool_1ScsShsa 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no PhysicsObjects in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
53 14 Dtool_1Scs_B6j 0 6 52 579 0 14 Dtool_1Scs_B6j 303 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_num_physics_objects
//       Access: Published
//  Description: Returns the number of PhysicsObjects in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
54 14 Dtool_1Scs0X4b 0 7 53 546 0 14 Dtool_1Scs0X4b 291 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_physics_object
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  5 index 1 579  
55 14 Dtool_1ScsSyZT 0 7 54 546 0 14 Dtool_1ScsSyZT 411 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator []
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.  This is
//               the same as get_physics_object(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  5 index 1 579  
56 14 Dtool_1Scs2SyP 0 6 55 579 0 14 Dtool_1Scs2SyP 373 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::size
//       Access: Published
//  Description: Returns the number of physics objects in the
//               collection.  This is the same thing as
//               get_num_physics_objects().
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
57 14 Dtool_1ScsOZH9 0 6 56 576 0 14 Dtool_1ScsOZH9 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  5 other 1 577  
58 14 Dtool_1ScsyMtg 0 7 57 576 334 14 Dtool_1ScsyMtg 334 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +
//       Access: Published
//  Description: Returns a PhysicsObjectCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  5 other 1 577  
59 14 Dtool_1Scs8PTL 0 4 58 550 0 14 Dtool_1Scs8PTL 346 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  3 out 1 571  
60 14 Dtool_1ScsD0FZ 0 4 59 550 0 14 Dtool_1ScsD0FZ 350 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 577  3 out 1 571  12 indent_level 1 579  
61 14 Dtool_1ScsTrb7 0 4 59 550 0 14 Dtool_1ScsTrb7 350 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  3 out 1 571  
62 14 Dtool_1ScskE3t 0 6 61 549 0 14 Dtool_1ScskE3t 189 ////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
63 14 Dtool_1ScsQQYE 0 4 62 550 0 14 Dtool_1ScsQQYE 189 ////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  6 active 1 549  
64 14 Dtool_1Scsw2t9 0 6 63 549 0 14 Dtool_1Scsw2t9 0 1 4 this 3 580  
65 14 Dtool_1Scs_1U0 0 7 64 583 0 14 Dtool_1Scs_1U0 680 // Filename: baseForce.I
// Created by:  charles (08Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_force_node
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
66 14 Dtool_1ScsGFR8 0 7 65 585 0 14 Dtool_1ScsGFR8 198 ////////////////////////////////////////////////////////////////////
//    Function : get_force_node_path
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
67 14 Dtool_1Scsbo8P 0 4 66 550 0 14 Dtool_1Scsbo8P 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  3 out 1 571  
68 14 Dtool_1ScsVFBH 0 4 67 550 0 14 Dtool_1ScsVFBH 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 580  3 out 1 571  12 indent_level 1 579  
69 14 Dtool_1ScseSbQ 0 4 67 550 0 14 Dtool_1ScseSbQ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  3 out 1 571  
70 14 Dtool_1Scs1Xv7 0 7 68 575 0 14 Dtool_1Scs1Xv7 0 0 
71 14 Dtool_1Scsak2L 0 4 70 550 0 14 Dtool_1Scsak2L 0 2 4 this 3 586  1 a 1 551  
72 14 Dtool_1ScsK6uI 0 4 71 550 0 14 Dtool_1ScsK6uI 197 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_Dependent
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 586  1 m 1 549  
73 14 Dtool_1ScsUWPK 0 6 72 551 0 14 Dtool_1ScsUWPK 192 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
74 14 Dtool_1ScsbO05 0 6 73 549 0 14 Dtool_1ScsbO05 197 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_dependent
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
75 14 Dtool_1ScsI9tL 0 4 74 550 0 14 Dtool_1ScsI9tL 195 ////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
//////////////////////////////////////////////////////////////////// 4 4 this 3 586  1 x 1 549  1 y 1 549  1 z 1 549  
76 14 Dtool_1Scs0NvV 0 7 75 559 0 14 Dtool_1Scs0NvV 195 ////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 586  
77 14 Dtool_1ScsVARA 0 7 76 559 0 14 Dtool_1ScsVARA 189 ////////////////////////////////////////////////////////////////////
//    Function : get_vector
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 586  2 po 1 547  
78 14 Dtool_1ScsyEgT 0 7 77 586 0 14 Dtool_1ScsyEgT 0 1 4 this 3 586  
79 14 Dtool_1ScsPD_f 0 4 78 550 0 14 Dtool_1ScsPD_f 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  3 out 1 571  6 indent 1 573  
80 14 Dtool_1ScsKRkx 0 4 78 550 0 14 Dtool_1ScsKRkx 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 571  
81 14 Dtool_1ScsEdvs 0 7 79 575 0 14 Dtool_1ScsEdvs 0 0 
82 14 Dtool_1ScsqGln 0 7 81 591 0 14 Dtool_1ScsqGln 0 1 4 this 3 589  
83 14 Dtool_1ScsGNn4 0 7 82 567 0 14 Dtool_1ScsGNn4 217 ////////////////////////////////////////////////////////////////////
//    Function : get_quat
//      Access : public
// Description : access query
//////////////////////////////////////////////////////////////////// 2 4 this 3 591  2 po 1 547  
84 14 Dtool_1ScsIedN 0 4 83 550 0 14 Dtool_1ScsIedN 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 589  3 out 1 571  6 indent 1 573  
85 14 Dtool_1Scsj8r_ 0 4 83 550 0 14 Dtool_1Scsj8r_ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  3 out 1 571  
86 14 Dtool_1ScslQpj 0 7 84 575 0 14 Dtool_1ScslQpj 0 0 
87 14 Dtool_1ScsrW30 0 7 86 594 0 14 Dtool_1ScsrW30 352 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : copy constructor (note- does deep copy of pn's)
//                but does NOT attach itself to its template's
//                physicsmanager.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 592  
88 14 Dtool_1ScsvRxK 0 7 86 594 0 14 Dtool_1ScsvRxK 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 2 13 total_objects 1 579  9 pre_alloc 1 549  
89 14 Dtool_1Scs36xJ 0 7 86 594 0 14 Dtool_1Scs36xJ 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 1 13 total_objects 1 579  
90 14 Dtool_1ScsSZEx 0 7 86 594 0 14 Dtool_1ScsSZEx 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 0 
91 14 Dtool_1ScsGnHU 0 6 87 595 0 14 Dtool_1ScsGnHU 198 ////////////////////////////////////////////////////////////////////
//    Function : get_physics_manager
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
92 14 Dtool_1Scs_v4Q 0 7 88 596 0 14 Dtool_1Scs_v4Q 196 ////////////////////////////////////////////////////////////////////
//    Function : get_physical_node
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
93 14 Dtool_1Scsgd4c 0 7 89 585 0 14 Dtool_1Scsgd4c 201 ////////////////////////////////////////////////////////////////////
//    Function : get_physical_node_path
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
94 14 Dtool_1ScsQp7H 0 7 90 546 0 14 Dtool_1ScsQp7H 192 ////////////////////////////////////////////////////////////////////
//    Function : get_phys_body
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
95 14 Dtool_1ScskJZ_ 0 4 91 550 0 14 Dtool_1ScskJZ_ 244 ////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Erases the linear force list
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
96 14 Dtool_1ScsY7oN 0 4 92 550 0 14 Dtool_1ScsY7oN 246 ////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Erases the angular force list
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
97 14 Dtool_1ScsJunY 0 4 93 550 0 14 Dtool_1ScsJunY 240 ////////////////////////////////////////////////////////////////////
//    Function : clear_physics_objects
//      Access : Public
// Description : Erases the object list
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
98 14 Dtool_1ScsYy0c 0 4 94 550 0 14 Dtool_1ScsYy0c 250 ////////////////////////////////////////////////////////////////////
//    Function : add_linear_force
//      Access : Public
// Description : Adds a linear force to the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 f 1 586  
99 14 Dtool_1ScsoNNk 0 4 95 550 0 14 Dtool_1ScsoNNk 253 ////////////////////////////////////////////////////////////////////
//    Function : add_angular_force
//      Access : Public
// Description : Adds an angular force to the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 f 1 591  
100 14 Dtool_1ScsGrhr 0 4 96 550 0 14 Dtool_1ScsGrhr 258 ////////////////////////////////////////////////////////////////////
//    Function : add_physics_object
//      Access : Public
// Description : Adds an object to the physics object vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  2 po 1 546  
101 14 Dtool_1ScslkU3 0 4 97 550 0 14 Dtool_1ScslkU3 258 ////////////////////////////////////////////////////////////////////
//    Function : remove_linear_force
//      Access : Public
// Description : removes a linear force from the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 f 1 586  
102 14 Dtool_1Scs3L9H 0 4 98 550 0 14 Dtool_1Scs3L9H 261 ////////////////////////////////////////////////////////////////////
//    Function : remove_angular_force
//      Access : Public
// Description : removes an angular force from the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 f 1 591  
103 14 Dtool_1Scs5ygv 0 6 99 579 0 14 Dtool_1Scs5ygv 200 ////////////////////////////////////////////////////////////////////
//    Function : get_num_linear_forces
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
104 14 Dtool_1ScsPUJj 0 7 100 586 0 14 Dtool_1ScsPUJj 195 ////////////////////////////////////////////////////////////////////
//    Function : get_linear_force
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  5 index 1 579  
105 14 Dtool_1ScsJtUr 0 6 101 579 0 14 Dtool_1ScsJtUr 201 ////////////////////////////////////////////////////////////////////
//    Function : get_num_angular_forces
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
106 14 Dtool_1ScsBVLw 0 7 102 591 0 14 Dtool_1ScsBVLw 196 ////////////////////////////////////////////////////////////////////
//    Function : get_angular_force
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  5 index 1 579  
107 14 Dtool_1ScsPcA4 0 4 103 550 0 14 Dtool_1ScsPcA4 234 ////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the local viscosity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  9 viscosity 1 551  
108 14 Dtool_1ScsNx2x 0 6 104 551 0 14 Dtool_1ScsNx2x 234 ////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the local viscosity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
109 14 Dtool_1Scs5O8k 0 7 105 577 0 14 Dtool_1Scs5O8k 190 ////////////////////////////////////////////////////////////////////
//    Function : get_objects
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
110 14 Dtool_1Scs9XnP 0 4 106 550 0 14 Dtool_1Scs9XnP 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  3 out 1 571  
111 14 Dtool_1ScsqVpa 0 4 106 550 0 14 Dtool_1ScsqVpa 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
112 14 Dtool_1ScsPTed 0 4 107 550 0 14 Dtool_1ScsPTed 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 592  3 out 1 571  6 indent 1 573  
113 14 Dtool_1Scs0ZIV 0 4 107 550 0 14 Dtool_1Scs0ZIV 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  3 out 1 571  
114 14 Dtool_1ScsfDUt 0 4 107 550 0 14 Dtool_1ScsfDUt 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
115 14 Dtool_1ScsclJe 0 4 108 550 0 14 Dtool_1ScsclJe 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 592  3 out 1 571  6 indent 1 573  
116 14 Dtool_1ScsW_4i 0 4 108 550 0 14 Dtool_1ScsW_4i 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  3 out 1 571  
117 14 Dtool_1Scs_CeX 0 4 108 550 0 14 Dtool_1Scs_CeX 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
118 14 Dtool_1ScsHy5h 0 4 109 550 0 14 Dtool_1ScsHy5h 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 592  3 out 1 571  6 indent 1 573  
119 14 Dtool_1ScsXdr3 0 4 109 550 0 14 Dtool_1ScsXdr3 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  3 out 1 571  
120 14 Dtool_1Scs_tdK 0 4 109 550 0 14 Dtool_1Scs_tdK 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
121 14 Dtool_1Scsq83C 0 4 110 550 0 14 Dtool_1Scsq83C 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 592  3 out 1 571  6 indent 1 573  
122 14 Dtool_1ScsTZoV 0 4 110 550 0 14 Dtool_1ScsTZoV 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  3 out 1 571  
123 14 Dtool_1Scs1xAo 0 4 110 550 0 14 Dtool_1Scs1xAo 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
124 14 Dtool_1Scs4K_k 0 7 111 575 0 14 Dtool_1Scs4K_k 0 0 
125 14 Dtool_1ScsQNir 0 7 114 596 0 14 Dtool_1ScsQNir 231 ////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : public
//  Description : default constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 570  
126 14 Dtool_1ScsvC_W 0 4 115 550 0 14 Dtool_1ScsvC_W 670 // Filename: physicalNode.I
// Created by:  charles (01Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
127 14 Dtool_1ScsGi58 0 7 116 594 0 14 Dtool_1ScsGi58 187 ////////////////////////////////////////////////////////////////////
//  Function : get_physical
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  5 index 1 579  
128 14 Dtool_1ScsHtda 0 6 117 579 0 14 Dtool_1ScsHtda 192 ////////////////////////////////////////////////////////////////////
//  Function : get_num_physicals
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
129 14 Dtool_1Scsmr3_ 0 4 118 550 0 14 Dtool_1Scsmr3_ 187 ////////////////////////////////////////////////////////////////////
//  Function : add_physical
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  8 physical 1 594  
130 14 Dtool_1ScsG36z 0 4 119 550 0 14 Dtool_1ScsG36z 234 ////////////////////////////////////////////////////////////////////
//     Function : add_physicals_from
//       Access : public
//  Description : append operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  5 other 1 597  
131 14 Dtool_1Scsz6iS 0 4 120 550 0 14 Dtool_1Scsz6iS 231 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  8 physical 1 594  
132 14 Dtool_1ScsOXfn 0 4 120 550 0 14 Dtool_1ScsOXfn 231 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  5 index 1 579  
133 14 Dtool_1ScsXwip 0 4 121 550 0 14 Dtool_1ScsXwip 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 597  3 out 1 571  6 indent 1 573  
134 14 Dtool_1ScsOEwa 0 4 121 550 0 14 Dtool_1ScsOEwa 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  3 out 1 571  
135 14 Dtool_1Scsohu_ 0 7 122 575 0 14 Dtool_1Scsohu_ 0 0 
136 14 Dtool_1ScsGS52 0 7 124 601 0 14 Dtool_1ScsGS52 226 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Copy Constructor.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 599  
137 14 Dtool_1Scsy4dn 0 7 124 601 0 14 Dtool_1Scsy4dn 220 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 570  
138 14 Dtool_1ScsI6QP 0 7 124 601 0 14 Dtool_1ScsI6QP 220 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
//////////////////////////////////////////////////////////////////// 0 
139 14 Dtool_1ScsDMRz 0 7 125 546 0 14 Dtool_1ScsDMRz 0 1 4 this 3 601  
140 14 Dtool_1ScsYUGc 0 4 126 550 0 14 Dtool_1ScsYUGc 702 // Filename: actorNode.I
// Created by:  charles (07Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_contact_vector
//      Access : Public
// Description : 
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  14 contact_vector 1 556  
141 14 Dtool_1ScsjR9_ 0 6 127 556 0 14 Dtool_1ScsjR9_ 215 ////////////////////////////////////////////////////////////////////
//    Function : get_contact_vector
//      Access : Public
// Description : 
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
142 14 Dtool_1Scs__bD 0 4 128 550 0 14 Dtool_1Scs__bD 395 ////////////////////////////////////////////////////////////////////
//     Function : update_transform
//       Access : public
//  Description : this sets the transform generated by the contained
//                Physical, moving the node and subsequent geometry.
//                i.e. copy from PhysicsObject to PandaNode
//////////////////////////////////////////////////////////////////// 1 4 this 3 601  
143 14 Dtool_1ScsTfin 0 4 129 550 0 14 Dtool_1ScsTfin 0 2 4 this 3 601  5 limit 1 551  
144 14 Dtool_1Scs2_Zr 0 7 130 575 0 14 Dtool_1Scs2_Zr 0 0 
145 14 Dtool_1Scs_Q1a 0 4 133 550 0 14 Dtool_1Scs_Q1a 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  3 out 1 571  
146 14 Dtool_1ScsVRhD 0 4 134 550 0 14 Dtool_1ScsVRhD 307 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 602  3 out 1 571  6 indent 1 573  
147 14 Dtool_1ScsUQbO 0 4 134 550 0 14 Dtool_1ScsUQbO 307 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  3 out 1 571  
148 14 Dtool_1ScsiHWM 0 4 135 550 0 14 Dtool_1ScsiHWM 308 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 602  3 out 1 571  6 indent 1 573  
149 14 Dtool_1ScslQLo 0 4 135 550 0 14 Dtool_1ScslQLo 308 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  3 out 1 571  
150 14 Dtool_1ScsZf2t 0 4 136 550 0 14 Dtool_1ScsZf2t 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 602  3 out 1 571  6 indent 1 573  
151 14 Dtool_1Scs_kyb 0 4 136 550 0 14 Dtool_1Scs_kyb 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  3 out 1 571  
152 14 Dtool_1Scs4P7V 0 7 139 604 0 14 Dtool_1Scs4P7V 233 ////////////////////////////////////////////////////////////////////
//     Function : AngularEulerIntegrator
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
153 14 Dtool_1ScsaKTX 0 7 141 607 0 14 Dtool_1ScsaKTX 231 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 605  
154 14 Dtool_1ScsfSG2 0 7 141 607 0 14 Dtool_1ScsfSG2 226 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 4 quat 1 560  
155 14 Dtool_1ScsW9fj 0 7 141 607 0 14 Dtool_1ScsW9fj 226 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 3 1 h 1 551  1 p 1 551  1 r 1 551  
156 14 Dtool_1ScszyUf 0 4 142 550 0 14 Dtool_1ScszyUf 677 // Filename: angularVectorForce.I
// Created by:  charles (09Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_quat
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 607  4 quat 1 560  
157 14 Dtool_1Scsl6zM 0 4 143 550 0 14 Dtool_1Scsl6zM 180 ////////////////////////////////////////////////////////////////////
// Function : set_hpr
//   Access : public
//////////////////////////////////////////////////////////////////// 4 4 this 3 607  1 h 1 551  1 p 1 551  1 r 1 551  
158 14 Dtool_1ScslqTY 0 7 144 567 0 14 Dtool_1ScslqTY 187 ////////////////////////////////////////////////////////////////////
// Function : get_local_quat
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
159 14 Dtool_1Scsu8B7 0 7 145 575 0 14 Dtool_1Scsu8B7 0 0 
160 14 Dtool_1ScsPBy9 0 7 147 583 0 14 Dtool_1ScsPBy9 228 ////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : public
//  Description : default constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 570  
161 14 Dtool_1ScscXNM 0 4 148 550 0 14 Dtool_1ScscXNM 667 // Filename: forceNode.I
// Created by:  charles (02Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
162 14 Dtool_1ScsRzsU 0 7 149 582 0 14 Dtool_1ScsRzsU 184 ////////////////////////////////////////////////////////////////////
//  Function : get_force
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 608  5 index 1 579  
163 14 Dtool_1ScsLpP4 0 6 150 579 0 14 Dtool_1ScsLpP4 189 ////////////////////////////////////////////////////////////////////
//  Function : get_num_forces
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 608  
164 14 Dtool_1ScsYnvh 0 4 151 550 0 14 Dtool_1ScsYnvh 184 ////////////////////////////////////////////////////////////////////
//  Function : add_force
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  5 force 1 582  
165 14 Dtool_1ScsxhJz 0 4 152 550 0 14 Dtool_1ScsxhJz 231 ////////////////////////////////////////////////////////////////////
//     Function : add_forces_from
//       Access : public
//  Description : append operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  5 other 1 608  
166 14 Dtool_1ScshgaF 0 4 153 550 0 14 Dtool_1ScshgaF 228 ////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  1 f 1 582  
167 14 Dtool_1Scs_QKj 0 4 153 550 0 14 Dtool_1Scs_QKj 228 ////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  5 index 1 579  
168 14 Dtool_1ScsGWKp 0 4 154 550 0 14 Dtool_1ScsGWKp 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 608  3 out 1 571  6 indent 1 573  
169 14 Dtool_1Scs6BRM 0 4 154 550 0 14 Dtool_1Scs6BRM 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 608  3 out 1 571  
170 14 Dtool_1Scsuw7S 0 4 155 550 0 14 Dtool_1Scsuw7S 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 608  3 out 1 571  6 indent 1 573  
171 14 Dtool_1ScsOb8p 0 4 155 550 0 14 Dtool_1ScsOb8p 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 608  3 out 1 571  
172 14 Dtool_1ScsGQOV 0 7 156 575 0 14 Dtool_1ScsGQOV 0 0 
173 14 Dtool_1ScsdEHh 0 7 158 612 0 14 Dtool_1ScsdEHh 234 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 610  
174 14 Dtool_1ScsnvpE 0 7 158 612 0 14 Dtool_1ScsnvpE 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 3 2 po 1 547  1 a 1 551  4 mass 1 549  
175 14 Dtool_1ScsOXT4 0 7 158 612 0 14 Dtool_1ScsOXT4 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 2 2 po 1 547  1 a 1 551  
176 14 Dtool_1ScszzhR 0 7 158 612 0 14 Dtool_1ScszzhR 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 1 2 po 1 547  
177 14 Dtool_1ScsrBGx 0 7 158 612 0 14 Dtool_1ScsrBGx 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 0 
178 14 Dtool_1ScsBcIH 0 4 159 550 0 14 Dtool_1ScsBcIH 736 // Filename: linearControlForce.I
// Created by: Dave Schuyler (2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_object
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 1 4 this 3 612  
179 14 Dtool_1ScsdZiu 0 4 160 550 0 14 Dtool_1ScsdZiu 236 ////////////////////////////////////////////////////////////////////
//    Function : set_physics_object
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 612  2 po 1 547  
180 14 Dtool_1ScskeFq 0 7 161 547 0 14 Dtool_1ScskeFq 246 ////////////////////////////////////////////////////////////////////
//    Function : get_physics_object
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 1 4 this 3 610  
181 14 Dtool_1Scsac16 0 4 162 550 0 14 Dtool_1Scsac16 228 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 612  1 v 1 556  
182 14 Dtool_1Scs_tD1 0 4 162 550 0 14 Dtool_1Scs_tD1 238 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 4 4 this 3 612  1 x 1 551  1 y 1 551  1 z 1 551  
183 14 Dtool_1ScssAOU 0 7 163 559 0 14 Dtool_1ScssAOU 212 ////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 1 4 this 3 610  
184 14 Dtool_1Scs6Mgp 0 7 164 575 0 14 Dtool_1Scs6Mgp 0 0 
185 14 Dtool_1Scsx55x 0 7 166 615 0 14 Dtool_1Scsx55x 238 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 613  
186 14 Dtool_1ScsnCN4 0 7 166 615 0 14 Dtool_1ScsnCN4 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 5 6 radius 1 551  6 length 1 551  4 coef 1 551  1 a 1 551  2 md 1 549  
187 14 Dtool_1ScsCnEA 0 7 166 615 0 14 Dtool_1ScsCnEA 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 4 6 radius 1 551  6 length 1 551  4 coef 1 551  1 a 1 551  
188 14 Dtool_1ScsStkP 0 7 166 615 0 14 Dtool_1ScsStkP 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 3 6 radius 1 551  6 length 1 551  4 coef 1 551  
189 14 Dtool_1Scsfl9B 0 7 166 615 0 14 Dtool_1Scsfl9B 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 2 6 radius 1 551  6 length 1 551  
190 14 Dtool_1ScsQc4_ 0 7 166 615 0 14 Dtool_1ScsQc4_ 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 1 6 radius 1 551  
191 14 Dtool_1ScsE3hd 0 7 166 615 0 14 Dtool_1ScsE3hd 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 0 
192 14 Dtool_1ScsBlCt 0 4 167 550 0 14 Dtool_1ScsBlCt 181 ////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 615  4 coef 1 551  
193 14 Dtool_1ScsZM30 0 6 168 551 0 14 Dtool_1ScsZM30 181 ////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
194 14 Dtool_1Scseg2d 0 4 169 550 0 14 Dtool_1Scseg2d 686 // Filename: linearCylinderVortexForce.I
// Created by:  charles (24Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_radius
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 615  6 radius 1 551  
195 14 Dtool_1ScsObDi 0 6 170 551 0 14 Dtool_1ScsObDi 183 ////////////////////////////////////////////////////////////////////
// Function : get_radius
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
196 14 Dtool_1ScsuquM 0 4 171 550 0 14 Dtool_1ScsuquM 183 ////////////////////////////////////////////////////////////////////
// Function : set_length
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 615  6 length 1 551  
197 14 Dtool_1Scs_n8Q 0 6 172 551 0 14 Dtool_1Scs_n8Q 183 ////////////////////////////////////////////////////////////////////
// Function : get_length
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
198 14 Dtool_1Scsdafq 0 7 173 575 0 14 Dtool_1Scsdafq 0 0 
199 14 Dtool_1ScsnZ9d 0 4 176 550 0 14 Dtool_1ScsnZ9d 221 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : set the radius
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  1 r 1 551  
200 14 Dtool_1ScssEHZ 0 4 177 550 0 14 Dtool_1ScssEHZ 741 // Filename: linearDistanceForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_falloff_type
//      Access : Public
// Description : falloff_type encapsulating wrap
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  2 ft 1 532  
201 14 Dtool_1ScsjHEK 0 4 178 550 0 14 Dtool_1ScsjHEK 233 ////////////////////////////////////////////////////////////////////
//    Function : set_force_center
//      Access : Public
// Description : set the force center
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  1 p 1 552  
202 14 Dtool_1Scs6NAO 0 6 179 551 0 14 Dtool_1Scs6NAO 219 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius query
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
203 14 Dtool_1Scsfx6e 0 6 180 532 0 14 Dtool_1Scsfx6e 231 ////////////////////////////////////////////////////////////////////
//    Function : get_falloff_type
//      Access : public
// Description : falloff_type query
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
204 14 Dtool_1ScsXLIy 0 7 181 555 0 14 Dtool_1ScsXLIy 231 ////////////////////////////////////////////////////////////////////
//    Function : get_force_center
//      Access : public
// Description : force_center query
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
205 14 Dtool_1ScsSM3k 0 6 182 551 0 14 Dtool_1ScsSM3k 248 ////////////////////////////////////////////////////////////////////
//    Function : get_scalar_term
//      Access : private
// Description : calculate the term based on falloff
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
206 14 Dtool_1Scs4jKf 0 7 183 575 0 14 Dtool_1Scs4jKf 0 0 
207 14 Dtool_1ScsbpBu 0 7 186 619 0 14 Dtool_1ScsbpBu 232 ////////////////////////////////////////////////////////////////////
//     Function : LinearEulerIntegrator
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
208 14 Dtool_1Scst_V5 0 7 188 622 0 14 Dtool_1Scst_V5 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 620  
209 14 Dtool_1Scs1Aho 0 7 188 622 0 14 Dtool_1Scs1Aho 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 3 4 coef 1 551  1 a 1 551  1 m 1 549  
210 14 Dtool_1ScsfgK3 0 7 188 622 0 14 Dtool_1ScsfgK3 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 2 4 coef 1 551  1 a 1 551  
211 14 Dtool_1ScsZk3b 0 7 188 622 0 14 Dtool_1ScsZk3b 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 1 4 coef 1 551  
212 14 Dtool_1ScsvrU5 0 7 188 622 0 14 Dtool_1ScsvrU5 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 0 
213 14 Dtool_1Scs6iox 0 4 189 550 0 14 Dtool_1Scs6iox 678 // Filename: linearFrictionForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 622  4 coef 1 551  
214 14 Dtool_1ScsOTwt 0 6 190 551 0 14 Dtool_1ScsOTwt 181 ////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 620  
215 14 Dtool_1Scsxun1 0 7 191 575 0 14 Dtool_1Scsxun1 0 0 
216 14 Dtool_1ScsD0XP 0 7 193 575 0 14 Dtool_1ScsD0XP 0 0 
217 14 Dtool_1ScsXcP8 0 7 195 625 0 14 Dtool_1ScsXcP8 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 623  
218 14 Dtool_1Scs0EEl 0 7 195 625 0 14 Dtool_1Scs0EEl 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 2 1 a 1 551  1 m 1 549  
219 14 Dtool_1ScskctU 0 7 195 625 0 14 Dtool_1ScskctU 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 a 1 551  
220 14 Dtool_1ScsE51r 0 7 195 625 0 14 Dtool_1ScsE51r 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
221 14 Dtool_1ScsDAAU 0 7 196 575 0 14 Dtool_1ScsDAAU 0 0 
222 14 Dtool_1Scsif_B 0 7 198 628 0 14 Dtool_1Scsif_B 232 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 626  
223 14 Dtool_1ScsgrE1 0 7 198 628 0 14 Dtool_1ScsgrE1 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 2 1 a 1 551  1 m 1 549  
224 14 Dtool_1ScsN_EG 0 7 198 628 0 14 Dtool_1ScsN_EG 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 a 1 551  
225 14 Dtool_1ScspAku 0 7 198 628 0 14 Dtool_1ScspAku 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
226 14 Dtool_1ScsfpMh 0 7 199 575 0 14 Dtool_1ScsfpMh 0 0 
227 14 Dtool_1ScsgiE_ 0 7 201 629 0 14 Dtool_1ScsgiE_ 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 0 
228 14 Dtool_1ScsaAMU 0 7 201 629 0 14 Dtool_1ScsaAMU 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 5 1 p 1 552  1 f 1 532  1 r 1 551  1 a 1 551  1 m 1 549  
229 14 Dtool_1Scs1Nsz 0 7 201 629 0 14 Dtool_1Scs1Nsz 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 4 1 p 1 552  1 f 1 532  1 r 1 551  1 a 1 551  
230 14 Dtool_1Scs9kox 0 7 201 629 0 14 Dtool_1Scs9kox 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 3 1 p 1 552  1 f 1 532  1 r 1 551  
231 14 Dtool_1ScsjL1w 0 7 201 629 0 14 Dtool_1ScsjL1w 228 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 630  
232 14 Dtool_1Scs_dB3 0 7 202 575 0 14 Dtool_1Scs_dB3 0 0 
233 14 Dtool_1Scs76nW 0 7 204 632 0 14 Dtool_1Scs76nW 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 0 
234 14 Dtool_1ScsSjwD 0 7 204 632 0 14 Dtool_1ScsSjwD 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 5 1 p 1 552  1 f 1 532  1 r 1 551  1 a 1 551  4 mass 1 549  
235 14 Dtool_1ScsMEul 0 7 204 632 0 14 Dtool_1ScsMEul 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 4 1 p 1 552  1 f 1 532  1 r 1 551  1 a 1 551  
236 14 Dtool_1ScsmKnZ 0 7 204 632 0 14 Dtool_1ScsmKnZ 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 3 1 p 1 552  1 f 1 532  1 r 1 551  
237 14 Dtool_1ScsmBjF 0 7 204 632 0 14 Dtool_1ScsmBjF 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 633  
238 14 Dtool_1ScsQ1Mb 0 7 205 575 0 14 Dtool_1ScsQ1Mb 0 0 
239 14 Dtool_1ScsosNC 0 7 207 635 0 14 Dtool_1ScsosNC 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
240 14 Dtool_1ScsOyYN 0 7 207 635 0 14 Dtool_1ScsOyYN 235 ////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 636  
241 14 Dtool_1ScsnYsf 0 7 209 575 0 14 Dtool_1ScsnYsf 0 0 
242 14 Dtool_1Scsn_HH 0 7 211 638 0 14 Dtool_1Scsn_HH 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 3 3 vec 1 556  1 a 1 551  4 mass 1 549  
243 14 Dtool_1Scs5pxV 0 7 211 638 0 14 Dtool_1Scs5pxV 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 2 3 vec 1 556  1 a 1 551  
244 14 Dtool_1Scs51f6 0 7 211 638 0 14 Dtool_1Scs51f6 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 1 3 vec 1 556  
245 14 Dtool_1Scs2TTR 0 7 211 638 0 14 Dtool_1Scs2TTR 233 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 639  
246 14 Dtool_1Scs_9B9 0 7 211 638 0 14 Dtool_1Scs_9B9 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 5 1 x 1 551  1 y 1 551  1 z 1 551  1 a 1 551  4 mass 1 549  
247 14 Dtool_1Scszxk3 0 7 211 638 0 14 Dtool_1Scszxk3 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 4 1 x 1 551  1 y 1 551  1 z 1 551  1 a 1 551  
248 14 Dtool_1ScspPZK 0 7 211 638 0 14 Dtool_1ScspPZK 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 3 1 x 1 551  1 y 1 551  1 z 1 551  
249 14 Dtool_1Scsf8n5 0 7 211 638 0 14 Dtool_1Scsf8n5 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 2 1 x 1 551  1 y 1 551  
250 14 Dtool_1Scs1Z3E 0 7 211 638 0 14 Dtool_1Scs1Z3E 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 1 1 x 1 551  
251 14 Dtool_1ScsnFAc 0 7 211 638 0 14 Dtool_1ScsnFAc 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 0 
252 14 Dtool_1Scslk_l 0 4 212 550 0 14 Dtool_1Scslk_l 723 // Filename: linearVectorForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 638  1 v 1 556  
253 14 Dtool_1ScsVGyt 0 4 212 550 0 14 Dtool_1ScsVGyt 238 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 4 4 this 3 638  1 x 1 551  1 y 1 551  1 z 1 551  
254 14 Dtool_1ScsM4vu 0 7 213 559 0 14 Dtool_1ScsM4vu 212 ////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
255 14 Dtool_1ScslzdJ 0 7 214 575 0 14 Dtool_1ScslzdJ 0 0 
256 14 Dtool_1Scs4b5t 0 7 217 641 0 14 Dtool_1Scs4b5t 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsCollisionHandler::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
257 14 Dtool_1ScsbPFH 0 4 218 550 0 14 Dtool_1ScsbPFH 48 // These setters and getter are a bit of a hack: 2 4 this 3 641  5 speed 1 551  
258 14 Dtool_1Scskpbd 0 6 219 551 0 14 Dtool_1Scskpbd 48 // These setters and getter are a bit of a hack: 1 4 this 3 641  
259 14 Dtool_1ScsnSD1 0 4 220 550 0 14 Dtool_1ScsnSD1 0 2 4 this 3 641  4 coef 1 551  
260 14 Dtool_1ScsDybx 0 6 221 551 0 14 Dtool_1ScsDybx 0 1 4 this 3 641  
261 14 Dtool_1Scs_3NV 0 4 222 550 0 14 Dtool_1Scs_3NV 0 2 4 this 3 641  4 coef 1 551  
262 14 Dtool_1ScsXqrD 0 6 223 551 0 14 Dtool_1ScsXqrD 0 1 4 this 3 641  
263 14 Dtool_1Scsm1_7 0 7 224 575 0 14 Dtool_1Scsm1_7 0 0 
264 14 Dtool_1ScsPQAe 0 7 226 595 488 14 Dtool_1ScsPQAe 300 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsManager
//       Access : Public
//  Description : Default Constructor.  NOTE: EulerIntegrator is
//                the standard default.
//////////////////////////////////////////////////////////////////// 0 
265 14 Dtool_1Scs42XZ 0 4 228 550 0 14 Dtool_1Scs42XZ 263 ////////////////////////////////////////////////////////////////////
//    Function : attach_linear_integrator
//      Access : Public
// Description : Hooks a linear integrator into the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 i 1 642  
266 14 Dtool_1Scswg3X 0 4 229 550 0 14 Dtool_1Scswg3X 266 ////////////////////////////////////////////////////////////////////
//    Function : attach_angular_integrator
//      Access : Public
// Description : Hooks an angular integrator into the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 i 1 643  
267 14 Dtool_1ScsWVm7 0 4 230 550 0 14 Dtool_1ScsWVm7 747 // Filename: physicsManager.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : attach_physical
//      Access : Public
// Description : Registers a Physical class with the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 p 1 594  
268 14 Dtool_1ScsBiJv 0 4 231 550 0 14 Dtool_1ScsBiJv 257 ////////////////////////////////////////////////////////////////////
//    Function : attach_physicalnode
//      Access : Public
// Description : Please call attach_physical_node instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 p 1 596  
269 14 Dtool_1ScsTnRZ 0 4 232 550 0 14 Dtool_1ScsTnRZ 258 ////////////////////////////////////////////////////////////////////
//    Function : attach_physical_node
//      Access : Public
// Description : Registers a physicalnode with the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 p 1 596  
270 14 Dtool_1ScsCQEN 0 4 233 550 0 14 Dtool_1ScsCQEN 265 ////////////////////////////////////////////////////////////////////
//    Function : attach_linear_force
//      Access : Public
// Description : Adds a global linear force to the physics manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 f 1 586  
271 14 Dtool_1ScsLLwm 0 4 234 550 0 14 Dtool_1ScsLLwm 267 ////////////////////////////////////////////////////////////////////
//    Function : attach_angular_force
//      Access : Public
// Description : Adds a global angular force to the physics manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 f 1 591  
272 14 Dtool_1ScspFDw 0 4 235 550 0 14 Dtool_1ScspFDw 255 ////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Resets the physics manager force vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
273 14 Dtool_1ScsbGDA 0 4 236 550 0 14 Dtool_1ScsbGDA 256 ////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Resets the physics manager force vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
274 14 Dtool_1ScsL5GU 0 4 237 550 0 14 Dtool_1ScsL5GU 253 ////////////////////////////////////////////////////////////////////
//    Function : clear_physicals
//      Access : Public
// Description : Resets the physics manager objects vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
275 14 Dtool_1ScsNgcX 0 4 238 550 0 14 Dtool_1ScsNgcX 235 ////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the global viscosity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  9 viscosity 1 551  
276 14 Dtool_1Scs_DJO 0 6 239 551 0 14 Dtool_1Scs_DJO 235 ////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the global viscosity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 644  
277 14 Dtool_1ScsR29e 0 4 240 550 0 14 Dtool_1ScsR29e 254 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : Public
//  Description : takes a physical out of the object list
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 p 1 594  
278 14 Dtool_1ScsQym8 0 4 241 550 0 14 Dtool_1ScsQym8 256 ////////////////////////////////////////////////////////////////////
//    Function : remove_physical_node
//      Access : Public
// Description : Removes a physicalnode from the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 p 1 596  
279 14 Dtool_1Scs_0ov 0 4 242 550 0 14 Dtool_1Scs_0ov 263 ////////////////////////////////////////////////////////////////////
//     Function : remove_linear_force
//       Access : Public
//  Description : takes a linear force out of the physics list
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 f 1 586  
280 14 Dtool_1ScsgZkY 0 4 243 550 0 14 Dtool_1ScsgZkY 266 ////////////////////////////////////////////////////////////////////
//     Function : remove_angular_force
//       Access : Public
//  Description : takes an angular force out of the physics list
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 f 1 591  
281 14 Dtool_1ScsRoJp 0 4 244 550 0 14 Dtool_1ScsRoJp 314 ////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on every attached Physical.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  2 dt 1 551  
282 14 Dtool_1ScsoY19 0 4 244 550 0 14 Dtool_1ScsoY19 372 ////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on a single physical.  Make sure its 
//                associated forces are active.
//////////////////////////////////////////////////////////////////// 3 4 this 3 595  2 dt 1 551  1 p 1 594  
283 14 Dtool_1Scs_sOL 0 4 245 550 0 14 Dtool_1Scs_sOL 388 ////////////////////////////////////////////////////////////////////
//     Function : InitRandomSeed
//       Access : Public
//  Description : One-time config function, sets up the random seed
//                used by the physics and particle systems.
//                For synchronizing across distributed computers
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
284 14 Dtool_1ScsiQi_ 0 4 246 550 0 14 Dtool_1ScsiQi_ 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
285 14 Dtool_1ScsHsEB 0 4 247 550 0 14 Dtool_1ScsHsEB 289 ////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 644  3 out 1 571  6 indent 1 573  
286 14 Dtool_1ScsGCw4 0 4 247 550 0 14 Dtool_1ScsGCw4 289 ////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
287 14 Dtool_1ScsJKvl 0 4 248 550 0 14 Dtool_1ScsJKvl 286 ////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 644  3 out 1 571  6 indent 1 573  
288 14 Dtool_1ScsqHRR 0 4 248 550 0 14 Dtool_1ScsqHRR 286 ////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
289 14 Dtool_1ScsAG8W 0 4 249 550 0 14 Dtool_1ScsAG8W 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 644  3 out 1 571  6 indent 1 573  
290 14 Dtool_1Scs_gRG 0 4 249 550 0 14 Dtool_1Scs_gRG 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
291 14 Dtool_1ScsKfjR 0 4 250 550 0 14 Dtool_1ScsKfjR 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 644  3 out 1 571  6 indent 1 573  
292 14 Dtool_1Scsble_ 0 4 250 550 0 14 Dtool_1Scsble_ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
293 14 Dtool_1ScsM4Pj 0 4 251 550 0 14 Dtool_1ScsM4Pj 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 644  3 out 1 571  6 indent 1 573  
294 14 Dtool_1Scs3rbp 0 4 251 550 0 14 Dtool_1Scs3rbp 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  3 out 1 571  
134
513 13 PhysicsObject 0 75777 13 PhysicsObject 13 PhysicsObject 0 0 0 1 295 0 0 36 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 0 0 1 0 514 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : PhysicsObject
// Description : A body on which physics will be applied.  If you're
//               looking to add physical motion to your class, do
//               NOT derive from this.  Derive from Physical instead.
////////////////////////////////////////////////////////////////////

514 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

515 23 PhysicsObjectCollection 0 26625 23 PhysicsObjectCollection 23 PhysicsObjectCollection 0 0 0 1 332 334 0 17 333 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 1 647 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : PhysicsObjectCollection
// Description : This is a set of zero or more PhysicsObjects.  It's handy
//               for returning from functions that need to return
//               multiple PhysicsObjects.
////////////////////////////////////////////////////////////////////

516 9 BaseForce 0 75777 9 BaseForce 9 BaseForce 0 0 0 0 0 0 8 351 352 353 354 355 356 357 358 0 0 1 0 514 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//        Class : BaseForce
//  Description : pure virtual base class for all forces that could
//                POSSIBLY exist.
////////////////////////////////////////////////////////////////////

517 11 LinearForce 0 75777 11 LinearForce 11 LinearForce 0 0 0 0 0 0 10 359 360 361 362 363 364 365 366 367 368 0 0 1 0 516 0 0 0 0 0

518 12 AngularForce 0 75777 12 AngularForce 12 AngularForce 0 0 0 0 0 0 4 369 370 371 372 0 0 1 0 516 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : AngularForce
// Description : pure virtual parent of all quat-based forces.
////////////////////////////////////////////////////////////////////

519 8 Physical 0 75777 8 Physical 8 Physical 0 0 0 1 373 0 0 25 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 2 648 649 0 1 0 514 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : Physical
// Description : Defines a set of physically modeled attributes.
//               If you want physics applied to your class, derive
//               it from this.
////////////////////////////////////////////////////////////////////

520 12 PhysicalNode 0 75777 12 PhysicalNode 12 PhysicalNode 0 0 0 1 399 0 0 8 400 401 402 403 404 405 406 407 1 650 0 1 0 521 0 0 0 0 0

521 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

522 9 ActorNode 0 75777 9 ActorNode 9 ActorNode 0 0 0 1 408 0 0 6 409 410 411 412 413 414 0 0 1 0 520 0 0 0 0 0

523 14 BaseIntegrator 0 75777 14 BaseIntegrator 14 BaseIntegrator 0 0 0 0 0 0 4 415 416 417 418 0 0 1 0 524 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BaseIntegrator
// Description : pure virtual integrator class that holds cached
//               matrix information that really should be common to
//               any possible child implementation.
////////////////////////////////////////////////////////////////////

524 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

525 17 AngularIntegrator 0 75777 17 AngularIntegrator 17 AngularIntegrator 0 0 0 0 0 0 0 0 0 1 0 523 0 0 0 0 337
////////////////////////////////////////////////////////////////////
//       Class : BaseAngularIntegrator
// Description : Pure virtual base class for physical modeling.
//               Takes physically modelable objects and applies
//               forces to them.
////////////////////////////////////////////////////////////////////

526 22 AngularEulerIntegrator 0 75777 22 AngularEulerIntegrator 22 AngularEulerIntegrator 0 0 0 1 419 0 0 0 0 0 1 0 525 0 0 0 0 0

527 18 AngularVectorForce 0 75777 18 AngularVectorForce 18 AngularVectorForce 0 0 0 1 420 0 0 4 421 422 423 424 0 0 1 0 518 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : AngularVectorForce
// Description : a simple directed torque force, the angular
//               equivalent of simple vector force.
////////////////////////////////////////////////////////////////////

528 9 ForceNode 0 75777 9 ForceNode 9 ForceNode 0 0 0 1 425 0 0 9 426 427 428 429 430 431 432 433 434 1 651 0 1 0 521 0 0 0 0 420
////////////////////////////////////////////////////////////////////
//        Class : ForceNode
//  Description : A force that lives in the scene graph and is
//                therefore subject to local coordinate systems.
//                An example of this would be simulating gravity
//                in a rotating space station.  or something.
////////////////////////////////////////////////////////////////////

529 18 LinearControlForce 0 75777 18 LinearControlForce 18 LinearControlForce 0 0 0 1 435 0 0 6 436 437 438 439 440 441 0 0 1 0 517 0 0 0 0 551
////////////////////////////////////////////////////////////////
//       Class : LinearControlForce
// Description : Simple directed vector force.  This force is 
//               different from the others in that it can be
//               global and still only affect a single object.
//               That might not make sense for a physics simulation,
//               but it's very handy for a game.  I.e. this is
//               the force applied by user on the selected object.
////////////////////////////////////////////////////////////////

530 25 LinearCylinderVortexForce 0 75777 25 LinearCylinderVortexForce 25 LinearCylinderVortexForce 0 0 0 1 442 0 0 7 443 444 445 446 447 448 449 0 0 1 0 517 0 0 0 0 604
////////////////////////////////////////////////////////////////////
//       Class : LinearCylinderVortexForce
// Description : Defines a cylinder inside of which all forces are
//               tangential to the theta of the particle wrt the
//               z-axis in local coord. space.  This happens by
//               assigning the force a node by which the cylinder is
//               transformed.  Be warned- this will suck anything
//               that it can reach directly into orbit and will NOT
//               let go.
////////////////////////////////////////////////////////////////////

531 19 LinearDistanceForce 0 43009 19 LinearDistanceForce 19 LinearDistanceForce 0 0 0 0 0 0 8 450 451 452 453 454 455 456 457 0 0 1 0 517 0 0 0 1 532 232
////////////////////////////////////////////////////////////////////
//       Class : LinearDistanceForce
// Description : Pure virtual class for sinks and sources
////////////////////////////////////////////////////////////////////

532 11 FalloffType 0 794624 32 LinearDistanceForce::FalloffType 32 LinearDistanceForce::FalloffType 531 0 0 0 0 0 0 0 0 0 3 13 FT_ONE_OVER_R 34 LinearDistanceForce::FT_ONE_OVER_R 0 21 FT_ONE_OVER_R_SQUARED 42 LinearDistanceForce::FT_ONE_OVER_R_SQUARED 1 19 FT_ONE_OVER_R_CUBED 40 LinearDistanceForce::FT_ONE_OVER_R_CUBED 2 0 0

533 16 LinearIntegrator 0 75777 16 LinearIntegrator 16 LinearIntegrator 0 0 0 0 0 0 0 0 0 1 0 523 0 0 0 0 332
////////////////////////////////////////////////////////////////////
//       Class : LinearIntegrator
// Description : Pure virtual base class for physical modeling.
//               Takes physically modelable objects and applies
//               forces to them.
////////////////////////////////////////////////////////////////////

534 21 LinearEulerIntegrator 0 75777 21 LinearEulerIntegrator 21 LinearEulerIntegrator 0 0 0 1 458 0 0 0 0 0 1 0 533 0 0 0 0 0

535 19 LinearFrictionForce 0 75777 19 LinearFrictionForce 19 LinearFrictionForce 0 0 0 1 459 0 0 3 460 461 462 0 0 1 0 517 0 0 0 0 217
////////////////////////////////////////////////////////////////////
//       Class : LinearFrictionForce
// Description : Friction-based drag force
////////////////////////////////////////////////////////////////////

536 17 LinearRandomForce 0 75777 17 LinearRandomForce 17 LinearRandomForce 0 0 0 0 0 0 1 463 0 0 1 0 517 0 0 0 0 240
////////////////////////////////////////////////////////////////////
//       Class : LinearRandomForce
// Description : Pure virtual, parent to noiseForce and jitterForce
////////////////////////////////////////////////////////////////////

537 17 LinearJitterForce 0 75777 17 LinearJitterForce 17 LinearJitterForce 0 0 0 1 464 0 0 1 465 0 0 1 0 536 0 0 0 0 0

538 16 LinearNoiseForce 0 75777 16 LinearNoiseForce 16 LinearNoiseForce 0 0 0 1 466 0 0 1 467 0 0 1 0 536 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : LinearNoiseForce
// Description : Repeating noise force vector.
////////////////////////////////////////////////////////////////////

539 15 LinearSinkForce 0 75777 15 LinearSinkForce 15 LinearSinkForce 0 0 0 1 468 0 0 1 469 0 0 1 0 531 0 0 0 0 223
////////////////////////////////////////////////////////////////////
//       Class : LinearSinkForce
// Description : Attractor force.  Think black hole.
////////////////////////////////////////////////////////////////////

540 17 LinearSourceForce 0 75777 17 LinearSourceForce 17 LinearSourceForce 0 0 0 1 470 0 0 1 471 0 0 1 0 531 0 0 0 0 206
////////////////////////////////////////////////////////////////////
//       Class : LinearSourceForce
// Description : Repellant force.
////////////////////////////////////////////////////////////////////

541 22 LinearUserDefinedForce 0 75777 22 LinearUserDefinedForce 22 LinearUserDefinedForce 0 0 0 1 472 0 0 2 473 474 0 0 1 0 517 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : LinearUserDefinedForce
// Description : a programmable force that takes an evaluator fn.
//
//        NOTE : AS OF Interrogate => Squeak, this class does NOT
//               get FFI'd due to the function pointer bug, and is
//               currently NOT getting interrogated.  Change this
//               in the makefile when the time is right or this class
//               becomes needed...
////////////////////////////////////////////////////////////////////

542 17 LinearVectorForce 0 75777 17 LinearVectorForce 17 LinearVectorForce 0 0 0 1 475 0 0 3 476 477 478 0 0 1 0 517 0 0 0 0 278
////////////////////////////////////////////////////////////////
//       Class : LinearVectorForce
// Description : Simple directed vector force.  Suitable for
//               gravity, non-turbulent wind, etc...
////////////////////////////////////////////////////////////////

543 23 PhysicsCollisionHandler 0 75777 23 PhysicsCollisionHandler 23 PhysicsCollisionHandler 0 0 0 1 479 0 0 7 480 481 482 483 484 485 486 0 0 1 0 544 0 0 0 0 389
////////////////////////////////////////////////////////////////////
//       Class : PhysicsCollisionHandler
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This also puts forces onto the physics objects
////////////////////////////////////////////////////////////////////

544 22 CollisionHandlerPusher 0 2049 22 CollisionHandlerPusher 22 CollisionHandlerPusher 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPusher
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This is the simplest kind of "real-world"
//               collisions you can have.
////////////////////////////////////////////////////////////////////

545 14 PhysicsManager 0 26625 14 PhysicsManager 14 PhysicsManager 0 0 0 1 487 488 0 24 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 0 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : PhysicsManager
// Description : Physics don't get much higher-level than this.
//               Attach as many Physicals (particle systems, etc..)
//               as you want, pick an integrator and go.
////////////////////////////////////////////////////////////////////

546 15 PhysicsObject * 0 8576 15 PhysicsObject * 15 PhysicsObject * 0 0 513 0 0 0 0 0 0 0 0 0 0

547 21 PhysicsObject const * 0 8576 21 PhysicsObject const * 21 PhysicsObject const * 0 0 548 0 0 0 0 0 0 0 0 0 0

548 19 PhysicsObject const 0 8832 19 PhysicsObject const 19 PhysicsObject const 0 0 513 0 0 0 0 0 0 0 0 0 0

549 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

550 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

551 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

552 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 554 0 0 0 0 0 0 0 0 0 0

554 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

555 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 554 0 0 0 0 0 0 0 0 0 0

556 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 558 0 0 0 0 0 0 0 0 0 0

558 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

559 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 558 0 0 0 0 0 0 0 0 0 0

560 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 562 0 0 0 0 0 0 0 0 0 0

562 10 LRotationf 0 2048 10 LRotationf 10 LRotationf 0 0 0 0 0 0 0 0 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

563 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 564 0 0 0 0 0 0 0 0 0 0

564 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 565 0 0 0 0 0 0 0 0 0 0

565 13 LOrientationf 0 2048 13 LOrientationf 13 LOrientationf 0 0 0 0 0 0 0 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

566 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 565 0 0 0 0 0 0 0 0 0 0

567 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 562 0 0 0 0 0 0 0 0 0 0

568 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 652 653 654 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

569 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 568 0 0 0 0 0 0 0 0 0 0

570 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

571 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

573 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

574 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

575 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 574 0 0 0 0 0 0 0 0 0 0

576 25 PhysicsObjectCollection * 0 8576 25 PhysicsObjectCollection * 25 PhysicsObjectCollection * 0 0 515 0 0 0 0 0 0 0 0 0 0

577 31 PhysicsObjectCollection const * 0 8576 31 PhysicsObjectCollection const * 31 PhysicsObjectCollection const * 0 0 578 0 0 0 0 0 0 0 0 0 0

578 29 PhysicsObjectCollection const 0 8832 29 PhysicsObjectCollection const 29 PhysicsObjectCollection const 0 0 515 0 0 0 0 0 0 0 0 0 0

579 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

580 17 BaseForce const * 0 8576 17 BaseForce const * 17 BaseForce const * 0 0 581 0 0 0 0 0 0 0 0 0 0

581 15 BaseForce const 0 8832 15 BaseForce const 15 BaseForce const 0 0 516 0 0 0 0 0 0 0 0 0 0

582 11 BaseForce * 0 8576 11 BaseForce * 11 BaseForce * 0 0 516 0 0 0 0 0 0 0 0 0 0

583 11 ForceNode * 0 8576 11 ForceNode * 11 ForceNode * 0 0 528 0 0 0 0 0 0 0 0 0 0

584 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 655 656 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

585 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 584 0 0 0 0 0 0 0 0 0 0

586 13 LinearForce * 0 8576 13 LinearForce * 13 LinearForce * 0 0 517 0 0 0 0 0 0 0 0 0 0

587 19 LinearForce const * 0 8576 19 LinearForce const * 19 LinearForce const * 0 0 588 0 0 0 0 0 0 0 0 0 0

588 17 LinearForce const 0 8832 17 LinearForce const 17 LinearForce const 0 0 517 0 0 0 0 0 0 0 0 0 0

589 20 AngularForce const * 0 8576 20 AngularForce const * 20 AngularForce const * 0 0 590 0 0 0 0 0 0 0 0 0 0

590 18 AngularForce const 0 8832 18 AngularForce const 18 AngularForce const 0 0 518 0 0 0 0 0 0 0 0 0 0

591 14 AngularForce * 0 8576 14 AngularForce * 14 AngularForce * 0 0 518 0 0 0 0 0 0 0 0 0 0

592 16 Physical const * 0 8576 16 Physical const * 16 Physical const * 0 0 593 0 0 0 0 0 0 0 0 0 0

593 14 Physical const 0 8832 14 Physical const 14 Physical const 0 0 519 0 0 0 0 0 0 0 0 0 0

594 10 Physical * 0 8576 10 Physical * 10 Physical * 0 0 519 0 0 0 0 0 0 0 0 0 0

595 16 PhysicsManager * 0 8576 16 PhysicsManager * 16 PhysicsManager * 0 0 545 0 0 0 0 0 0 0 0 0 0

596 14 PhysicalNode * 0 8576 14 PhysicalNode * 14 PhysicalNode * 0 0 520 0 0 0 0 0 0 0 0 0 0

597 20 PhysicalNode const * 0 8576 20 PhysicalNode const * 20 PhysicalNode const * 0 0 598 0 0 0 0 0 0 0 0 0 0

598 18 PhysicalNode const 0 8832 18 PhysicalNode const 18 PhysicalNode const 0 0 520 0 0 0 0 0 0 0 0 0 0

599 17 ActorNode const * 0 8576 17 ActorNode const * 17 ActorNode const * 0 0 600 0 0 0 0 0 0 0 0 0 0

600 15 ActorNode const 0 8832 15 ActorNode const 15 ActorNode const 0 0 522 0 0 0 0 0 0 0 0 0 0

601 11 ActorNode * 0 8576 11 ActorNode * 11 ActorNode * 0 0 522 0 0 0 0 0 0 0 0 0 0

602 22 BaseIntegrator const * 0 8576 22 BaseIntegrator const * 22 BaseIntegrator const * 0 0 603 0 0 0 0 0 0 0 0 0 0

603 20 BaseIntegrator const 0 8832 20 BaseIntegrator const 20 BaseIntegrator const 0 0 523 0 0 0 0 0 0 0 0 0 0

604 24 AngularEulerIntegrator * 0 8576 24 AngularEulerIntegrator * 24 AngularEulerIntegrator * 0 0 526 0 0 0 0 0 0 0 0 0 0

605 26 AngularVectorForce const * 0 8576 26 AngularVectorForce const * 26 AngularVectorForce const * 0 0 606 0 0 0 0 0 0 0 0 0 0

606 24 AngularVectorForce const 0 8832 24 AngularVectorForce const 24 AngularVectorForce const 0 0 527 0 0 0 0 0 0 0 0 0 0

607 20 AngularVectorForce * 0 8576 20 AngularVectorForce * 20 AngularVectorForce * 0 0 527 0 0 0 0 0 0 0 0 0 0

608 17 ForceNode const * 0 8576 17 ForceNode const * 17 ForceNode const * 0 0 609 0 0 0 0 0 0 0 0 0 0

609 15 ForceNode const 0 8832 15 ForceNode const 15 ForceNode const 0 0 528 0 0 0 0 0 0 0 0 0 0

610 26 LinearControlForce const * 0 8576 26 LinearControlForce const * 26 LinearControlForce const * 0 0 611 0 0 0 0 0 0 0 0 0 0

611 24 LinearControlForce const 0 8832 24 LinearControlForce const 24 LinearControlForce const 0 0 529 0 0 0 0 0 0 0 0 0 0

612 20 LinearControlForce * 0 8576 20 LinearControlForce * 20 LinearControlForce * 0 0 529 0 0 0 0 0 0 0 0 0 0

613 33 LinearCylinderVortexForce const * 0 8576 33 LinearCylinderVortexForce const * 33 LinearCylinderVortexForce const * 0 0 614 0 0 0 0 0 0 0 0 0 0

614 31 LinearCylinderVortexForce const 0 8832 31 LinearCylinderVortexForce const 31 LinearCylinderVortexForce const 0 0 530 0 0 0 0 0 0 0 0 0 0

615 27 LinearCylinderVortexForce * 0 8576 27 LinearCylinderVortexForce * 27 LinearCylinderVortexForce * 0 0 530 0 0 0 0 0 0 0 0 0 0

616 21 LinearDistanceForce * 0 8576 21 LinearDistanceForce * 21 LinearDistanceForce * 0 0 531 0 0 0 0 0 0 0 0 0 0

617 27 LinearDistanceForce const * 0 8576 27 LinearDistanceForce const * 27 LinearDistanceForce const * 0 0 618 0 0 0 0 0 0 0 0 0 0

618 25 LinearDistanceForce const 0 8832 25 LinearDistanceForce const 25 LinearDistanceForce const 0 0 531 0 0 0 0 0 0 0 0 0 0

619 23 LinearEulerIntegrator * 0 8576 23 LinearEulerIntegrator * 23 LinearEulerIntegrator * 0 0 534 0 0 0 0 0 0 0 0 0 0

620 27 LinearFrictionForce const * 0 8576 27 LinearFrictionForce const * 27 LinearFrictionForce const * 0 0 621 0 0 0 0 0 0 0 0 0 0

621 25 LinearFrictionForce const 0 8832 25 LinearFrictionForce const 25 LinearFrictionForce const 0 0 535 0 0 0 0 0 0 0 0 0 0

622 21 LinearFrictionForce * 0 8576 21 LinearFrictionForce * 21 LinearFrictionForce * 0 0 535 0 0 0 0 0 0 0 0 0 0

623 25 LinearJitterForce const * 0 8576 25 LinearJitterForce const * 25 LinearJitterForce const * 0 0 624 0 0 0 0 0 0 0 0 0 0

624 23 LinearJitterForce const 0 8832 23 LinearJitterForce const 23 LinearJitterForce const 0 0 537 0 0 0 0 0 0 0 0 0 0

625 19 LinearJitterForce * 0 8576 19 LinearJitterForce * 19 LinearJitterForce * 0 0 537 0 0 0 0 0 0 0 0 0 0

626 24 LinearNoiseForce const * 0 8576 24 LinearNoiseForce const * 24 LinearNoiseForce const * 0 0 627 0 0 0 0 0 0 0 0 0 0

627 22 LinearNoiseForce const 0 8832 22 LinearNoiseForce const 22 LinearNoiseForce const 0 0 538 0 0 0 0 0 0 0 0 0 0

628 18 LinearNoiseForce * 0 8576 18 LinearNoiseForce * 18 LinearNoiseForce * 0 0 538 0 0 0 0 0 0 0 0 0 0

629 17 LinearSinkForce * 0 8576 17 LinearSinkForce * 17 LinearSinkForce * 0 0 539 0 0 0 0 0 0 0 0 0 0

630 23 LinearSinkForce const * 0 8576 23 LinearSinkForce const * 23 LinearSinkForce const * 0 0 631 0 0 0 0 0 0 0 0 0 0

631 21 LinearSinkForce const 0 8832 21 LinearSinkForce const 21 LinearSinkForce const 0 0 539 0 0 0 0 0 0 0 0 0 0

632 19 LinearSourceForce * 0 8576 19 LinearSourceForce * 19 LinearSourceForce * 0 0 540 0 0 0 0 0 0 0 0 0 0

633 25 LinearSourceForce const * 0 8576 25 LinearSourceForce const * 25 LinearSourceForce const * 0 0 634 0 0 0 0 0 0 0 0 0 0

634 23 LinearSourceForce const 0 8832 23 LinearSourceForce const 23 LinearSourceForce const 0 0 540 0 0 0 0 0 0 0 0 0 0

635 24 LinearUserDefinedForce * 0 8576 24 LinearUserDefinedForce * 24 LinearUserDefinedForce * 0 0 541 0 0 0 0 0 0 0 0 0 0

636 30 LinearUserDefinedForce const * 0 8576 30 LinearUserDefinedForce const * 30 LinearUserDefinedForce const * 0 0 637 0 0 0 0 0 0 0 0 0 0

637 28 LinearUserDefinedForce const 0 8832 28 LinearUserDefinedForce const 28 LinearUserDefinedForce const 0 0 541 0 0 0 0 0 0 0 0 0 0

638 19 LinearVectorForce * 0 8576 19 LinearVectorForce * 19 LinearVectorForce * 0 0 542 0 0 0 0 0 0 0 0 0 0

639 25 LinearVectorForce const * 0 8576 25 LinearVectorForce const * 25 LinearVectorForce const * 0 0 640 0 0 0 0 0 0 0 0 0 0

640 23 LinearVectorForce const 0 8832 23 LinearVectorForce const 23 LinearVectorForce const 0 0 542 0 0 0 0 0 0 0 0 0 0

641 25 PhysicsCollisionHandler * 0 8576 25 PhysicsCollisionHandler * 25 PhysicsCollisionHandler * 0 0 543 0 0 0 0 0 0 0 0 0 0

642 18 LinearIntegrator * 0 8576 18 LinearIntegrator * 18 LinearIntegrator * 0 0 533 0 0 0 0 0 0 0 0 0 0

643 19 AngularIntegrator * 0 8576 19 AngularIntegrator * 19 AngularIntegrator * 0 0 525 0 0 0 0 0 0 0 0 0 0

644 22 PhysicsManager const * 0 8576 22 PhysicsManager const * 22 PhysicsManager const * 0 0 645 0 0 0 0 0 0 0 0 0 0

645 20 PhysicsManager const 0 8832 20 PhysicsManager const 20 PhysicsManager const 0 0 545 0 0 0 0 0 0 0 0 0 0

646 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
10
647 0 0 40 19 get_physics_objects 23 get_num_physics_objects 18 get_physics_object 
648 0 0 85 17 get_linear_forces 21 get_num_linear_forces 16 get_linear_force 
649 0 0 85 18 get_angular_forces 22 get_num_angular_forces 17 get_angular_force 
650 0 0 112 13 get_physicals 17 get_num_physicals 12 get_physical 
651 0 0 146 10 get_forces 14 get_num_forces 9 get_force 
652 0 0 306 8 get_rows 4 size 7 get_row 
653 0 0 306 8 get_cols 4 size 7 get_col 
654 0 0 306 9 get_row3s 4 size 8 get_row3 
655 0 0 356 9 get_nodes 13 get_num_nodes 8 get_node 
656 0 0 356 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
