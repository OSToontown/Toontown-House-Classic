1365933207
2 2
11 libp3rocket 4 KHbU 8 p3rocket 
11
14 18 RocketInputHandler 0 4 25 38 RocketInputHandler::RocketInputHandler 0 2 1 2 230
////////////////////////////////////////////////////////////////////
//     Function: RocketInputHandler::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
RocketInputHandler::RocketInputHandler(basic_string< char > const &name = ((string())));

15 14 get_rocket_key 0 4 25 34 RocketInputHandler::get_rocket_key 0 1 3 352
////////////////////////////////////////////////////////////////////
//     Function: RocketInputHandler::get_rocket_key
//       Access: Published
//  Description: Returns the libRocket KeyIdentifier for the given
//               ButtonHandle, or KI_UNKNOWN (0) if it wasn't known.
////////////////////////////////////////////////////////////////////
73
static int RocketInputHandler::get_rocket_key(ButtonHandle const handle);

16 14 get_class_type 0 4 25 34 RocketInputHandler::get_class_type 0 1 4 0
59
static TypeHandle RocketInputHandler::get_class_type(void);

17 4 make 0 4 27 18 RocketRegion::make 0 2 5 6 1467
// Filename: rocketRegion.I
// Created by:  rdb (01Dec11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::make
//       Access: Published, Static
//  Description: Creates a libRocket context with the given name
//               (must be unique) for the given window.  Returns
//               a new DisplayRegion where the libRocket context
//               will render to.
//               This variant of make() creates a region that
//               fills the entire window.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::make
//       Access: Published, Static
//  Description: Creates a libRocket context with the given name
//               (must be unique) for the given window.  Returns
//               a new DisplayRegion where the libRocket context   
//               will render to.
////////////////////////////////////////////////////////////////////
257
static inline RocketRegion *RocketRegion::make(basic_string< char > const &context_name, GraphicsOutput *window);
static inline RocketRegion *RocketRegion::make(basic_string< char > const &context_name, GraphicsOutput *window, LVecBase4f const &dimensions);

18 11 get_context 0 4 27 25 RocketRegion::get_context 0 1 7 593
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::get_context
//       Access: Published
//  Description: Returns a pointer to the Rocket context associated
//               with this region.  Will only be valid as long as this
//               region still exists, so be sure to toss it when you
//               toss the region itself.
//               It's best to call this method just once and store
//               the context in a Python variable, to avoid overhead.
////////////////////////////////////////////////////////////////////
48
PyObject *RocketRegion::get_context(void) const;

19 17 set_input_handler 0 4 27 31 RocketRegion::set_input_handler 0 1 8 522
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::set_input_handler
//       Access: Published
//  Description: Sets the RocketInputHandler object from which to
//               gather the keyboard and mouse inputs to pass to
//               the libRocket context before rendering.
//               You may use one input handler to provide inputs to
//               any number of RocketRegion objects.
////////////////////////////////////////////////////////////////////
73
inline void RocketRegion::set_input_handler(RocketInputHandler *handler);

20 17 get_input_handler 0 4 27 31 RocketRegion::get_input_handler 0 1 9 325
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::get_input_handler
//       Access: Published
//  Description: Returns the RocketInputHandler object previously
//               passed to set_input_handler.
////////////////////////////////////////////////////////////////////
71
inline RocketInputHandler *RocketRegion::get_input_handler(void) const;

21 13 init_debugger 0 4 27 27 RocketRegion::init_debugger 0 1 10 466
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::init_debugger
//       Access: Published
//  Description: Initializes the libRocket debugger.  This will
//               return false if the debugger failed to initialize,
//               or if support for the debugger has not been built
//               in (for example in an optimize=4 build).
////////////////////////////////////////////////////////////////////
39
bool RocketRegion::init_debugger(void);

22 20 set_debugger_visible 0 4 27 34 RocketRegion::set_debugger_visible 0 1 11 278
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::set_debugger_visible
//       Access: Published
//  Description: Sets whether the debugger should be visible.
////////////////////////////////////////////////////////////////////
54
void RocketRegion::set_debugger_visible(bool visible);

23 19 is_debugger_visible 0 4 27 33 RocketRegion::is_debugger_visible 0 1 12 273
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::is_debugger_visible
//       Access: Published
//  Description: Returns true if the debugger is visible.
////////////////////////////////////////////////////////////////////
51
bool RocketRegion::is_debugger_visible(void) const;

24 14 get_class_type 0 4 27 28 RocketRegion::get_class_type 0 1 13 0
53
static TypeHandle RocketRegion::get_class_type(void);

13
1 14 Dtool_KHbUZ_jy 0 7 3 30 0 14 Dtool_KHbUZ_jy 230 ////////////////////////////////////////////////////////////////////
//     Function: RocketInputHandler::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 29  
2 14 Dtool_KHbUoxNA 0 7 3 30 0 14 Dtool_KHbUoxNA 230 ////////////////////////////////////////////////////////////////////
//     Function: RocketInputHandler::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
3 14 Dtool_KHbUUTnl 0 6 4 34 0 14 Dtool_KHbUUTnl 352 ////////////////////////////////////////////////////////////////////
//     Function: RocketInputHandler::get_rocket_key
//       Access: Published
//  Description: Returns the libRocket KeyIdentifier for the given
//               ButtonHandle, or KI_UNKNOWN (0) if it wasn't known.
//////////////////////////////////////////////////////////////////// 1 6 handle 1 31  
4 14 Dtool_KHbUVo_A 0 7 5 36 0 14 Dtool_KHbUVo_A 0 0 
5 14 Dtool_KHbUxELi 0 7 8 39 0 14 Dtool_KHbUxELi 1026 // Filename: rocketRegion.I
// Created by:  rdb (01Dec11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::make
//       Access: Published, Static
//  Description: Creates a libRocket context with the given name
//               (must be unique) for the given window.  Returns
//               a new DisplayRegion where the libRocket context
//               will render to.
//               This variant of make() creates a region that
//               fills the entire window.
//////////////////////////////////////////////////////////////////// 2 12 context_name 1 29  6 window 1 37  
6 14 Dtool_KHbUCEN5 0 7 8 39 0 14 Dtool_KHbUCEN5 439 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::make
//       Access: Published, Static
//  Description: Creates a libRocket context with the given name
//               (must be unique) for the given window.  Returns
//               a new DisplayRegion where the libRocket context   
//               will render to.
//////////////////////////////////////////////////////////////////// 3 12 context_name 1 29  6 window 1 37  10 dimensions 1 40  
7 14 Dtool_KHbUVdpP 0 6 9 45 0 14 Dtool_KHbUVdpP 593 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::get_context
//       Access: Published
//  Description: Returns a pointer to the Rocket context associated
//               with this region.  Will only be valid as long as this
//               region still exists, so be sure to toss it when you
//               toss the region itself.
//               It's best to call this method just once and store
//               the context in a Python variable, to avoid overhead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 43  
8 14 Dtool_KHbUWSu4 0 4 10 47 0 14 Dtool_KHbUWSu4 522 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::set_input_handler
//       Access: Published
//  Description: Sets the RocketInputHandler object from which to
//               gather the keyboard and mouse inputs to pass to
//               the libRocket context before rendering.
//               You may use one input handler to provide inputs to
//               any number of RocketRegion objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 39  7 handler 1 30  
9 14 Dtool_KHbUWjyb 0 7 11 30 0 14 Dtool_KHbUWjyb 325 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::get_input_handler
//       Access: Published
//  Description: Returns the RocketInputHandler object previously
//               passed to set_input_handler.
//////////////////////////////////////////////////////////////////// 1 4 this 3 43  
10 14 Dtool_KHbUXi86 0 6 12 48 0 14 Dtool_KHbUXi86 466 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::init_debugger
//       Access: Published
//  Description: Initializes the libRocket debugger.  This will
//               return false if the debugger failed to initialize,
//               or if support for the debugger has not been built
//               in (for example in an optimize=4 build).
//////////////////////////////////////////////////////////////////// 1 4 this 3 39  
11 14 Dtool_KHbUJmMG 0 4 13 47 0 14 Dtool_KHbUJmMG 278 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::set_debugger_visible
//       Access: Published
//  Description: Sets whether the debugger should be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 39  7 visible 1 48  
12 14 Dtool_KHbUL435 0 6 14 48 0 14 Dtool_KHbUL435 273 ////////////////////////////////////////////////////////////////////
//     Function: RocketRegion::is_debugger_visible
//       Access: Published
//  Description: Returns true if the debugger is visible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 43  
13 14 Dtool_KHbUoR8O 0 7 15 36 0 14 Dtool_KHbUoR8O 0 0 
24
25 18 RocketInputHandler 0 75777 18 RocketInputHandler 18 RocketInputHandler 0 0 0 1 14 0 0 2 15 16 0 0 1 0 26 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : RocketInputHandler
// Description : DataNode that listens for keyboard and mouse
//               events and passes them to libRocket.
////////////////////////////////////////////////////////////////////

26 8 DataNode 0 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

27 12 RocketRegion 0 75777 12 RocketRegion 12 RocketRegion 0 0 0 0 0 0 8 17 18 19 20 21 22 23 24 0 0 1 0 28 0 0 0 0 287
////////////////////////////////////////////////////////////////////
//       Class : RocketRegion
// Description : Represents a region in a window or buffer where
//               the libRocket UI will be rendered to.
////////////////////////////////////////////////////////////////////

28 13 DisplayRegion 0 2049 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

29 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

30 20 RocketInputHandler * 0 8576 20 RocketInputHandler * 20 RocketInputHandler * 0 0 25 0 0 0 0 0 0 0 0 0 0

31 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 32 0 0 0 0 0 0 0 0 0 0

32 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 33 0 0 0 0 0 0 0 0 0 0

33 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

34 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

35 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

36 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 35 0 0 0 0 0 0 0 0 0 0

37 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 38 0 0 0 0 0 0 0 0 0 0

38 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

39 14 RocketRegion * 0 8576 14 RocketRegion * 14 RocketRegion * 0 0 27 0 0 0 0 0 0 0 0 0 0

40 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 41 0 0 0 0 0 0 0 0 0 0

41 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 42 0 0 0 0 0 0 0 0 0 0

42 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

43 20 RocketRegion const * 0 8576 20 RocketRegion const * 20 RocketRegion const * 0 0 44 0 0 0 0 0 0 0 0 0 0

44 18 RocketRegion const 0 8832 18 RocketRegion const 18 RocketRegion const 0 0 27 0 0 0 0 0 0 0 0 0 0

45 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 46 0 0 0 0 0 0 0 0 0 0

46 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

47 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

48 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

0
0
0
