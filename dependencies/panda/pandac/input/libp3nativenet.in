1365929986
2 2
14 libp3nativenet 4 5qEC 5 panda 
89
98 14 Socket_Address 0 4 187 30 Socket_Address::Socket_Address 0 3 1 2 3 452
///////////////////////////////////////////////////////////////////
// Function name : Socket_Address
// Description   : Constructor that lets us set a port value
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_Address Constructor
// Description   : Copy Constructor
////////////////////////////////////////////////////////////////////
129
inline Socket_Address::Socket_Address(short int port = (0));
inline Socket_Address::Socket_Address(Socket_Address const &inaddr);

99 15 ~Socket_Address 0 4 187 31 Socket_Address::~Socket_Address 0 0 225
////////////////////////////////////////////////////////////////////
// Function name : ~Socket_Address::Socket_Address
// Description   : Normal Destructor
////////////////////////////////////////////////////////////////////
53
virtual inline Socket_Address::~Socket_Address(void);

100 10 set_any_IP 0 4 187 26 Socket_Address::set_any_IP 0 1 4 226
////////////////////////////////////////////////////////////////////
// Function name : set_any_IP
// Description   : Set to any address and a specified port
////////////////////////////////////////////////////////////////////
49
inline bool Socket_Address::set_any_IP(int port);

101 8 set_port 0 4 187 24 Socket_Address::set_port 0 1 5 208
////////////////////////////////////////////////////////////////////
// Function name : set_port
// Description   : Set to a specified port
////////////////////////////////////////////////////////////////////
47
inline bool Socket_Address::set_port(int port);

102 13 set_broadcast 0 4 187 29 Socket_Address::set_broadcast 0 1 6 239
////////////////////////////////////////////////////////////////////
// Function name : set_broadcast
// Description   : Set to the broadcast address and a specified port
////////////////////////////////////////////////////////////////////
52
inline bool Socket_Address::set_broadcast(int port);

103 8 set_host 0 4 187 24 Socket_Address::set_host 0 3 7 8 9 744
////////////////////////////////////////////////////////////////////
// Function name : set_host
// Description   : this function will take a port and string-based tcp address and initialize
//      the address with the information
//
// Return type  : bool (address is undefined after an error)
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name : Socket_Address::set_host
// Description   :
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name : Socket_Address::set_host
// Description   :
//////////////////////////////////////////////////////////////
230
inline bool Socket_Address::set_host(basic_string< char > const &hostname, int port);
inline bool Socket_Address::set_host(basic_string< char > const &hostname);
inline bool Socket_Address::set_host(unsigned int ip4adr, int port);

104 5 clear 0 4 187 21 Socket_Address::clear 0 1 10 231
////////////////////////////////////////////////////////////////////
// Function name : clear
// Description   : Set the internal values to a suitable known value
////////////////////////////////////////////////////////////////////
40
inline void Socket_Address::clear(void);

105 8 get_port 0 4 187 24 Socket_Address::get_port 0 1 11 219
////////////////////////////////////////////////////////////////////
// Function name : get_port
// Description   : Get the port portion as an integer
////////////////////////////////////////////////////////////////////
63
inline unsigned short int Socket_Address::get_port(void) const;

106 6 get_ip 0 4 187 22 Socket_Address::get_ip 0 1 12 235
////////////////////////////////////////////////////////////////////
// Function name : get_ip
// Description   : Return the ip address portion in dot notation string
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Socket_Address::get_ip(void) const;

107 11 get_ip_port 0 4 187 27 Socket_Address::get_ip_port 0 1 13 237
////////////////////////////////////////////////////////////////////
// Function name : get_ip_port
// Description   : Return the ip address/port in dot notation string
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > Socket_Address::get_ip_port(void) const;

108 15 GetIPAddressRaw 0 4 187 31 Socket_Address::GetIPAddressRaw 0 1 14 221
//////////////////////////////////////////////////////////////
// Function name : Socket_Address::GetIPAdddressRaw
// Description   : Return a RAW sockaddr_in
//////////////////////////////////////////////////////////////
69
inline unsigned long int Socket_Address::GetIPAddressRaw(void) const;

109 11 operator == 0 4 187 27 Socket_Address::operator == 0 1 15 293
//////////////////////////////////////////////////////////////
// Function name : Socket_Address::operator==
// Description   : Allow for normal == operation on a address item..
//      Will simplify the use in sorted containers..
//////////////////////////////////////////////////////////////
72
inline bool Socket_Address::operator ==(Socket_Address const &in) const;

110 10 operator < 0 4 187 26 Socket_Address::operator < 0 1 16 165
//////////////////////////////////////////////////////////////
// Function name : <
// Description   :
//////////////////////////////////////////////////////////////
71
inline bool Socket_Address::operator <(Socket_Address const &in) const;

111 12 isMcastRange 0 4 187 28 Socket_Address::isMcastRange 0 1 17 226
//////////////////////////////////////////////////////////////
// Function name : isMcastRange
// Description   : return true if the address is in the mcast range.
//////////////////////////////////////////////////////////////
47
inline bool Socket_Address::isMcastRange(void);

112 9 Socket_IP 0 4 188 20 Socket_IP::Socket_IP 0 2 18 19 452
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Socket_IP
// Description   :  Def Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
////////////////////////////////////////////////////////////////////
71
inline Socket_IP::Socket_IP(void);
inline Socket_IP::Socket_IP(int in);

113 5 Close 0 4 188 16 Socket_IP::Close 0 1 20 234
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Close
// Description   : closes a socket if it is open (allocated)
////////////////////////////////////////////////////////////////////
35
inline void Socket_IP::Close(void);

114 12 GetLastError 0 4 188 23 Socket_IP::GetLastError 0 1 21 245
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetLastError
// Description   : gets the last errcode from a socket operation
////////////////////////////////////////////////////////////////////
48
static inline int Socket_IP::GetLastError(void);

115 14 SetNonBlocking 0 4 188 25 Socket_IP::SetNonBlocking 0 1 22 247
////////////////////////////////////////////////////////////////////
// Function name : SetNonBlocking
// Description   : this function will throw a socket into non-blocking mode
////////////////////////////////////////////////////////////////////
43
inline int Socket_IP::SetNonBlocking(void);

116 11 SetBlocking 0 4 188 22 Socket_IP::SetBlocking 0 1 23 295
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetBlocking
// Description   : Set the socket to block on subsequent calls to
//      socket functions that address this socket
////////////////////////////////////////////////////////////////////
40
inline int Socket_IP::SetBlocking(void);

117 15 SetReuseAddress 0 4 188 26 Socket_IP::SetReuseAddress 0 2 24 25 242
////////////////////////////////////////////////////////////////////
// Function name :  SetReuseAddress
// Description     :  Informs a socket to reuse IP address as needed
////////////////////////////////////////////////////////////////////
56
inline bool Socket_IP::SetReuseAddress(bool flag = (1));

118 6 Active 0 4 188 17 Socket_IP::Active 0 1 26 231
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Active
// Description   : Ask if the socket is open (allocated)
////////////////////////////////////////////////////////////////////
36
inline bool Socket_IP::Active(void);

119 17 SetRecvBufferSize 0 4 188 28 Socket_IP::SetRecvBufferSize 0 1 27 257
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetRecvBufferSize
// Description   : Ok it sets the recv buffer size for both tcp and UDP
////////////////////////////////////////////////////////////////////
50
inline int Socket_IP::SetRecvBufferSize(int size);

120 9 SetSocket 0 4 188 20 Socket_IP::SetSocket 0 1 28 237
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
////////////////////////////////////////////////////////////////////
42
inline void Socket_IP::SetSocket(int ins);

121 9 GetSocket 0 4 188 20 Socket_IP::GetSocket 0 2 29 30 442
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Gets the base socket type
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Get The RAW file id of the socket
//////////////////////////////////////////////////////////////
83
inline int Socket_IP::GetSocket(void);
inline int Socket_IP::GetSocket(void) const;

122 11 GetPeerName 0 4 188 22 Socket_IP::GetPeerName 0 1 31 219
//////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetPeerName
// Description   : Wrapper on berkly getpeername...
//////////////////////////////////////////////////////////////
57
inline Socket_Address Socket_IP::GetPeerName(void) const;

123 17 InitNetworkDriver 0 4 188 28 Socket_IP::InitNetworkDriver 0 1 32 0
53
static inline int Socket_IP::InitNetworkDriver(void);

124 14 get_class_type 0 4 188 25 Socket_IP::get_class_type 0 1 33 0
50
static TypeHandle Socket_IP::get_class_type(void);

125 10 Socket_TCP 0 4 190 22 Socket_TCP::Socket_TCP 0 2 34 35 186
//////////////////////////////////////////////////////////////
// Function name : Socket_TCP::Socket_TCP
// Description   :
//////////////////////////////////////////////////////////////
73
inline Socket_TCP::Socket_TCP(int );
inline Socket_TCP::Socket_TCP(void);

126 10 SetNoDelay 0 4 190 22 Socket_TCP::SetNoDelay 0 2 36 37 248
////////////////////////////////////////////////////////////////////
// Function name : SetNoDelay
// Description   : Disable Nagle algorithm. Don't delay send to coalesce packets
////////////////////////////////////////////////////////////////////
51
inline int Socket_TCP::SetNoDelay(bool flag = (1));

127 9 SetLinger 0 4 190 21 Socket_TCP::SetLinger 0 2 38 39 241
////////////////////////////////////////////////////////////////////
// Function name : SetLinger
// Description   : will control the behavior of SO_LINGER for a TCP socket
////////////////////////////////////////////////////////////////////
61
inline int Socket_TCP::SetLinger(int interval_seconds = (0));

128 10 DontLinger 0 4 190 22 Socket_TCP::DontLinger 0 1 40 427
////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::DontLinger
// Description   : Turn off the linger flag. The socket will quickly release
//        buffered items and free up OS resources. You may lose
//        a stream if you use this flag and do not negotiate the close
//        at the application layer.
////////////////////////////////////////////////////////////////////
40
inline int Socket_TCP::DontLinger(void);

129 17 SetSendBufferSize 0 4 190 29 Socket_TCP::SetSendBufferSize 0 1 41 337
////////////////////////////////////////////////////////////////////
// Function name : SetSendBufferSize
// Description   : Just like it sounds. Sets a buffered socket recv buffer size.
//      This function does not refuse ranges outside hard-coded OS
//      limits
////////////////////////////////////////////////////////////////////
53
inline int Socket_TCP::SetSendBufferSize(int insize);

130 10 ActiveOpen 0 4 190 22 Socket_TCP::ActiveOpen 0 1 42 382
//inline bool ActiveOpen(const Socket_Address & theaddress);

////////////////////////////////////////////////////////////////////
// Function name : ActiveOpen
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter
////////////////////////////////////////////////////////////////////
84
inline bool Socket_TCP::ActiveOpen(Socket_Address const &theaddress, bool setdelay);

131 21 ActiveOpenNonBlocking 0 4 190 33 Socket_TCP::ActiveOpenNonBlocking 0 1 43 416
//inline bool ActiveOpen(const Socket_Address & theaddress);

////////////////////////////////////////////////////////////////////
// Function name : ActiveOpenNonBlocking
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter (non-blocking version)
////////////////////////////////////////////////////////////////////
80
inline bool Socket_TCP::ActiveOpenNonBlocking(Socket_Address const &theaddress);

132 21 ErrorIs_WouldBlocking 0 4 190 33 Socket_TCP::ErrorIs_WouldBlocking 0 1 44 0
55
inline bool Socket_TCP::ErrorIs_WouldBlocking(int err);

133 12 ShutdownSend 0 4 190 24 Socket_TCP::ShutdownSend 0 1 45 0
43
inline bool Socket_TCP::ShutdownSend(void);

134 8 SendData 0 4 190 20 Socket_TCP::SendData 0 1 46 369
////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::SendData
// Description   : Ok Lets Send the Data
//
// Return type  : int
//      - if error
//      0 if socket closed for write or lengh is 0
//      + bytes writen ( May be smaller than requested)
////////////////////////////////////////////////////////////////////
65
inline int Socket_TCP::SendData(basic_string< char > const &str);

135 8 RecvData 0 4 190 20 Socket_TCP::RecvData 0 1 47 820
//    inline int RecvData( std::string &str, int max_len);

////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
////////////////////////////////////////////////////////////////////
55
basic_string< char > Socket_TCP::RecvData(int max_len);

136 14 get_class_type 0 4 190 26 Socket_TCP::get_class_type 0 1 48 0
51
static TypeHandle Socket_TCP::get_class_type(void);

137 11 ~Socket_TCP 0 4 190 23 Socket_TCP::~Socket_TCP 0 0 0
30
Socket_TCP::~Socket_TCP(void);

138 17 Socket_TCP_Listen 0 4 191 36 Socket_TCP_Listen::Socket_TCP_Listen 0 1 49 0
43
Socket_TCP_Listen::Socket_TCP_Listen(void);

139 13 OpenForListen 0 4 191 32 Socket_TCP_Listen::OpenForListen 0 2 50 51 238
////////////////////////////////////////////////////////////////////
// Function name : OpenForListen
// Description   : This function will initialize a listening Socket
////////////////////////////////////////////////////////////////////
104
inline bool Socket_TCP_Listen::OpenForListen(Socket_Address const &Inaddess, int backlog_size = (1024));

140 21 GetIncomingConnection 0 4 191 40 Socket_TCP_Listen::GetIncomingConnection 0 1 52 245
////////////////////////////////////////////////////////////////////
// Function name : GetIncomingConnection
// Description   : This function is used to accept new connections
////////////////////////////////////////////////////////////////////
102
inline bool Socket_TCP_Listen::GetIncomingConnection(Socket_TCP &newsession, Socket_Address &address);

141 14 get_class_type 0 4 191 33 Socket_TCP_Listen::get_class_type 0 1 53 0
58
static TypeHandle Socket_TCP_Listen::get_class_type(void);

142 19 Socket_UDP_Incoming 0 4 192 40 Socket_UDP_Incoming::Socket_UDP_Incoming 0 1 54 0
54
inline Socket_UDP_Incoming::Socket_UDP_Incoming(void);

143 12 OpenForInput 0 4 192 33 Socket_UDP_Incoming::OpenForInput 0 1 55 320
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
77
inline bool Socket_UDP_Incoming::OpenForInput(Socket_Address const &address);

144 17 OpenForInputMCast 0 4 192 38 Socket_UDP_Incoming::OpenForInputMCast 0 1 56 320
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
82
inline bool Socket_UDP_Incoming::OpenForInputMCast(Socket_Address const &address);

145 9 GetPacket 0 4 192 30 Socket_UDP_Incoming::GetPacket 0 0 444
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::GetPacket
// Description     :  Grabs a dataset off the listening UDP socket
//      and fills in the source address information
//
// Return type  : bool
// Argument         : char * data
// Argument         : int *max_len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
94
inline bool Socket_UDP_Incoming::GetPacket(char *data, int *max_len, Socket_Address &address);

146 6 SendTo 0 4 192 27 Socket_UDP_Incoming::SendTo 0 1 57 375
////////////////////////////////////////////////////////////////////
// Function name : SocketUDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
98
inline bool Socket_UDP_Incoming::SendTo(char const *data, int len, Socket_Address const &address);

147 13 InitNoAddress 0 4 192 34 Socket_UDP_Incoming::InitNoAddress 0 1 58 317
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::InitNoAddress
// Description     : Set this socket to work with out a bound external address..
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////
53
inline bool Socket_UDP_Incoming::InitNoAddress(void);

148 14 SetToBroadCast 0 4 192 35 Socket_UDP_Incoming::SetToBroadCast 0 1 59 333
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::tToBroadCast
// Description     : Flips the OS bits that allow for brodcast
//      packets to com in on this port
//
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
54
inline bool Socket_UDP_Incoming::SetToBroadCast(void);

149 14 get_class_type 0 4 192 35 Socket_UDP_Incoming::get_class_type 0 1 60 0
60
static TypeHandle Socket_UDP_Incoming::get_class_type(void);

150 20 ~Socket_UDP_Incoming 0 4 192 41 Socket_UDP_Incoming::~Socket_UDP_Incoming 0 0 0
48
Socket_UDP_Incoming::~Socket_UDP_Incoming(void);

151 19 Socket_UDP_Outgoing 0 4 193 40 Socket_UDP_Outgoing::Socket_UDP_Outgoing 0 1 61 0
54
inline Socket_UDP_Outgoing::Socket_UDP_Outgoing(void);

152 13 InitToAddress 0 4 193 34 Socket_UDP_Outgoing::InitToAddress 0 1 62 384
// use this interface for a tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
78
inline bool Socket_UDP_Outgoing::InitToAddress(Socket_Address const &address);

153 4 Send 0 4 193 25 Socket_UDP_Outgoing::Send 0 1 63 641
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
////////////////////////////////////////////////////////////////////
72
inline bool Socket_UDP_Outgoing::Send(basic_string< char > const &data);

154 13 InitNoAddress 0 4 193 34 Socket_UDP_Outgoing::InitNoAddress 0 1 64 374
// use this interface for a none tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline bool Socket_UDP_Outgoing::InitNoAddress(void);

155 6 SendTo 0 4 193 27 Socket_UDP_Outgoing::SendTo 0 1 65 731
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
105
inline bool Socket_UDP_Outgoing::SendTo(basic_string< char > const &data, Socket_Address const &address);

156 14 SetToBroadCast 0 4 193 35 Socket_UDP_Outgoing::SetToBroadCast 0 1 66 313
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
54
inline bool Socket_UDP_Outgoing::SetToBroadCast(void);

157 14 get_class_type 0 4 193 35 Socket_UDP_Outgoing::get_class_type 0 1 67 0
60
static TypeHandle Socket_UDP_Outgoing::get_class_type(void);

158 20 ~Socket_UDP_Outgoing 0 4 193 41 Socket_UDP_Outgoing::~Socket_UDP_Outgoing 0 0 0
48
Socket_UDP_Outgoing::~Socket_UDP_Outgoing(void);

159 12 Socket_fdset 0 4 194 26 Socket_fdset::Socket_fdset 0 1 68 218
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::Socket_fdset
// Description   : The constructor
////////////////////////////////////////////////////////////////////
40
inline Socket_fdset::Socket_fdset(void);

160 12 setForSocket 0 4 194 26 Socket_fdset::setForSocket 0 1 69 202
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::setForSocket
// Description   :
////////////////////////////////////////////////////////////////////
63
inline void Socket_fdset::setForSocket(Socket_IP const &incon);

161 8 IsSetFor 0 4 194 22 Socket_fdset::IsSetFor 0 1 70 258
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::IsSetFor
// Description   : check to see if a socket object has been marked for reading
////////////////////////////////////////////////////////////////////
65
inline bool Socket_fdset::IsSetFor(Socket_IP const &incon) const;

162 11 WaitForRead 0 4 194 25 Socket_fdset::WaitForRead 0 3 71 72 73 379
////////////////////////////////////////////////////////////////////
// Function name : WaitForRead
// Description   :
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::WaitForRead
// Description   :
//////////////////////////////////////////////////////////////
169
inline int Socket_fdset::WaitForRead(bool zeroFds, unsigned int sleep_time = (2147483647));
inline int Socket_fdset::WaitForRead(bool zeroFds, Time_Span const &timeout);

163 12 WaitForWrite 0 4 194 26 Socket_fdset::WaitForWrite 0 2 74 75 324
////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForWrite
// Description   : This is the function that will wait till
//      one of the sockets is ready for writing
////////////////////////////////////////////////////////////////////
92
inline int Socket_fdset::WaitForWrite(bool zeroFds, unsigned int sleep_time = (2147483647));

164 12 WaitForError 0 4 194 26 Socket_fdset::WaitForError 0 2 76 77 276
//////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForError
// Description   : This is the function that will wait till
//      one of the sockets is in error state
//////////////////////////////////////////////////////////////
92
inline int Socket_fdset::WaitForError(bool zeroFds, unsigned int sleep_time = (2147483647));

165 5 clear 0 4 194 19 Socket_fdset::clear 0 1 78 226
////////////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::zeroOut
// Description   :  Marks the content as empty
////////////////////////////////////////////////////////////////////
38
inline void Socket_fdset::clear(void);

166 13 ~Socket_fdset 0 4 194 27 Socket_fdset::~Socket_fdset 0 0 0
34
Socket_fdset::~Socket_fdset(void);

167 10 GetMessage 0 4 195 39 Buffered_DatagramConnection::GetMessage 0 1 80 461
// do not use this .. this is a way for the the COnnecting UPcall to drop messages in queue first..

////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::GetMessage
// Description      :  read a message
//  
//  false means something bad happened..
//
//
// Return type      : inline bool 
// Argument         : Datagram &val
////////////////////////////////////////////////////////////////////
67
inline bool Buffered_DatagramConnection::GetMessage(Datagram &val);

168 9 DoConnect 0 4 195 38 Buffered_DatagramConnection::DoConnect 0 1 81 0
57
inline bool Buffered_DatagramConnection::DoConnect(void);

169 11 IsConnected 0 4 195 40 Buffered_DatagramConnection::IsConnected 0 1 82 38
// all the real state magic is in here
59
inline bool Buffered_DatagramConnection::IsConnected(void);

170 27 Buffered_DatagramConnection 0 4 195 56 Buffered_DatagramConnection::Buffered_DatagramConnection 0 1 79 430
// all the real state magic is in here

////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Buffered_DatagramConnection
// Description      : 
//  
// Return type      : inline 
// Argument         : bool do_blocking_writes
// Argument         : int rbufsize
// Argument         : int wbufsize
////////////////////////////////////////////////////////////////////
115
inline Buffered_DatagramConnection::Buffered_DatagramConnection(int rbufsize, int wbufsize, int write_flush_point);

171 11 SendMessage 0 4 195 40 Buffered_DatagramConnection::SendMessage 0 1 83 348
// the reason thsi all exists

////////////////////////////////////////////////////////////////////
// Function name    :  Buffered_DatagramConnection::SendMessage
// Description      : send the message 
//  
// Return type      : inline bool 
// Argument         : DataGram &msg
////////////////////////////////////////////////////////////////////
74
inline bool Buffered_DatagramConnection::SendMessage(Datagram const &msg);

172 5 Flush 0 4 195 34 Buffered_DatagramConnection::Flush 0 1 84 326
// the reason thsi all exists

////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Flush
// Description      : flush all wrightes
//  
// Return type      : bool 
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline bool Buffered_DatagramConnection::Flush(void);

173 5 Reset 0 4 195 34 Buffered_DatagramConnection::Reset 0 1 85 283
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Reset
// Description      : Reset 
//  
// Return type      : void 
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline void Buffered_DatagramConnection::Reset(void);

174 23 WaitForNetworkReadEvent 0 4 195 52 Buffered_DatagramConnection::WaitForNetworkReadEvent 0 1 86 79
//  int WaitFor_Read_Error(const Socket_fdset & fd, const Time_Span & timeout);
80
inline void Buffered_DatagramConnection::WaitForNetworkReadEvent(float MaxTime);

175 16 AddressQueueSize 0 4 195 45 Buffered_DatagramConnection::AddressQueueSize 0 1 87 22
// address queue stuff
72
inline unsigned int Buffered_DatagramConnection::AddressQueueSize(void);

176 10 AddAddress 0 4 195 39 Buffered_DatagramConnection::AddAddress 0 1 88 366
// address queue stuff

////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Init
// Description      :  must be called to set value to the server
//  
// Return type      : inline void 
// Argument         : Socket_Address &inadr
////////////////////////////////////////////////////////////////////
75
inline void Buffered_DatagramConnection::AddAddress(Socket_Address &inadr);

177 14 ClearAddresses 0 4 195 43 Buffered_DatagramConnection::ClearAddresses 0 1 89 0
62
inline void Buffered_DatagramConnection::ClearAddresses(void);

178 14 get_class_type 0 4 195 43 Buffered_DatagramConnection::get_class_type 0 1 90 0
68
static TypeHandle Buffered_DatagramConnection::get_class_type(void);

179 10 Socket_UDP 0 4 196 22 Socket_UDP::Socket_UDP 0 1 91 0
36
inline Socket_UDP::Socket_UDP(void);

180 13 InitToAddress 0 4 196 25 Socket_UDP::InitToAddress 0 1 92 375
// use this interface for a tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
69
inline bool Socket_UDP::InitToAddress(Socket_Address const &address);

181 4 Send 0 4 196 16 Socket_UDP::Send 0 1 93 623
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
////////////////////////////////////////////////////////////////////
63
inline bool Socket_UDP::Send(basic_string< char > const &data);

182 13 InitNoAddress 0 4 196 25 Socket_UDP::InitNoAddress 0 1 94 365
// use this interface for a none tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////////////
44
inline bool Socket_UDP::InitNoAddress(void);

183 6 SendTo 0 4 196 18 Socket_UDP::SendTo 0 1 95 713
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
96
inline bool Socket_UDP::SendTo(basic_string< char > const &data, Socket_Address const &address);

184 14 SetToBroadCast 0 4 196 26 Socket_UDP::SetToBroadCast 0 1 96 304
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
45
inline bool Socket_UDP::SetToBroadCast(void);

185 14 get_class_type 0 4 196 26 Socket_UDP::get_class_type 0 1 97 0
51
static TypeHandle Socket_UDP::get_class_type(void);

186 11 ~Socket_UDP 0 4 196 23 Socket_UDP::~Socket_UDP 0 0 0
30
Socket_UDP::~Socket_UDP(void);

97
1 14 Dtool_5qECltM5 0 7 2 199 99 14 Dtool_5qECltM5 219 ////////////////////////////////////////////////////////////////////
// Function name : Socket_Address Constructor
// Description   : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 6 inaddr 1 197  
2 14 Dtool_5qECdc2f 0 7 2 199 99 14 Dtool_5qECdc2f 231 ///////////////////////////////////////////////////////////////////
// Function name : Socket_Address
// Description   : Constructor that lets us set a port value
//////////////////////////////////////////////////////////////////// 1 4 port 1 200  
3 14 Dtool_5qECRuWG 0 7 2 199 99 14 Dtool_5qECRuWG 231 ///////////////////////////////////////////////////////////////////
// Function name : Socket_Address
// Description   : Constructor that lets us set a port value
//////////////////////////////////////////////////////////////////// 0 
4 14 Dtool_5qEC1slo 0 6 4 202 0 14 Dtool_5qEC1slo 226 ////////////////////////////////////////////////////////////////////
// Function name : set_any_IP
// Description   : Set to any address and a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 199  4 port 1 201  
5 14 Dtool_5qECGNgO 0 6 5 202 0 14 Dtool_5qECGNgO 208 ////////////////////////////////////////////////////////////////////
// Function name : set_port
// Description   : Set to a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 199  4 port 1 201  
6 14 Dtool_5qECdE2D 0 6 6 202 0 14 Dtool_5qECdE2D 239 ////////////////////////////////////////////////////////////////////
// Function name : set_broadcast
// Description   : Set to the broadcast address and a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 199  4 port 1 201  
7 14 Dtool_5qECjJXh 0 6 7 202 0 14 Dtool_5qECjJXh 188 //////////////////////////////////////////////////////////////
// Function name : Socket_Address::set_host
// Description   :
////////////////////////////////////////////////////////////// 2 4 this 3 199  8 hostname 1 203  
8 14 Dtool_5qECroO0 0 6 7 202 0 14 Dtool_5qECroO0 364 ////////////////////////////////////////////////////////////////////
// Function name : set_host
// Description   : this function will take a port and string-based tcp address and initialize
//      the address with the information
//
// Return type  : bool (address is undefined after an error)
//////////////////////////////////////////////////////////////////// 3 4 this 3 199  8 hostname 1 203  4 port 1 201  
9 14 Dtool_5qECE_jh 0 6 7 202 0 14 Dtool_5qECE_jh 188 //////////////////////////////////////////////////////////////
// Function name : Socket_Address::set_host
// Description   :
////////////////////////////////////////////////////////////// 3 4 this 3 199  6 ip4adr 1 204  4 port 1 201  
10 14 Dtool_5qEC209x 0 4 8 205 0 14 Dtool_5qEC209x 231 ////////////////////////////////////////////////////////////////////
// Function name : clear
// Description   : Set the internal values to a suitable known value
//////////////////////////////////////////////////////////////////// 1 4 this 3 199  
11 14 Dtool_5qECbt1l 0 6 9 206 0 14 Dtool_5qECbt1l 219 ////////////////////////////////////////////////////////////////////
// Function name : get_port
// Description   : Get the port portion as an integer
//////////////////////////////////////////////////////////////////// 1 4 this 3 197  
12 14 Dtool_5qECabJ4 0 6 10 203 0 14 Dtool_5qECabJ4 235 ////////////////////////////////////////////////////////////////////
// Function name : get_ip
// Description   : Return the ip address portion in dot notation string
//////////////////////////////////////////////////////////////////// 1 4 this 3 197  
13 14 Dtool_5qEC6EfH 0 6 11 203 0 14 Dtool_5qEC6EfH 237 ////////////////////////////////////////////////////////////////////
// Function name : get_ip_port
// Description   : Return the ip address/port in dot notation string
//////////////////////////////////////////////////////////////////// 1 4 this 3 197  
14 14 Dtool_5qECmLyy 0 6 12 207 0 14 Dtool_5qECmLyy 221 //////////////////////////////////////////////////////////////
// Function name : Socket_Address::GetIPAdddressRaw
// Description   : Return a RAW sockaddr_in
////////////////////////////////////////////////////////////// 1 4 this 3 197  
15 14 Dtool_5qECBmLp 0 6 13 202 0 14 Dtool_5qECBmLp 293 //////////////////////////////////////////////////////////////
// Function name : Socket_Address::operator==
// Description   : Allow for normal == operation on a address item..
//      Will simplify the use in sorted containers..
////////////////////////////////////////////////////////////// 2 4 this 3 197  2 in 1 197  
16 14 Dtool_5qECg92E 0 6 14 202 0 14 Dtool_5qECg92E 165 //////////////////////////////////////////////////////////////
// Function name : <
// Description   :
////////////////////////////////////////////////////////////// 2 4 this 3 197  2 in 1 197  
17 14 Dtool_5qECpzBT 0 6 15 202 0 14 Dtool_5qECpzBT 226 //////////////////////////////////////////////////////////////
// Function name : isMcastRange
// Description   : return true if the address is in the mcast range.
////////////////////////////////////////////////////////////// 1 4 this 3 199  
18 14 Dtool_5qEC2dtW 0 7 18 208 0 14 Dtool_5qEC2dtW 213 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Socket_IP
// Description   :  Def Constructor
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_5qECqlig 0 7 18 208 0 14 Dtool_5qECqlig 237 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
//////////////////////////////////////////////////////////////////// 1 2 in 1 201  
20 14 Dtool_5qECgzOs 0 4 19 205 0 14 Dtool_5qECgzOs 234 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Close
// Description   : closes a socket if it is open (allocated)
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
21 14 Dtool_5qECst0b 0 6 20 201 0 14 Dtool_5qECst0b 245 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetLastError
// Description   : gets the last errcode from a socket operation
//////////////////////////////////////////////////////////////////// 0 
22 14 Dtool_5qECvPiX 0 6 21 201 0 14 Dtool_5qECvPiX 247 ////////////////////////////////////////////////////////////////////
// Function name : SetNonBlocking
// Description   : this function will throw a socket into non-blocking mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
23 14 Dtool_5qECke5_ 0 6 22 201 0 14 Dtool_5qECke5_ 295 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetBlocking
// Description   : Set the socket to block on subsequent calls to
//      socket functions that address this socket
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
24 14 Dtool_5qECn5_k 0 6 23 202 0 14 Dtool_5qECn5_k 242 ////////////////////////////////////////////////////////////////////
// Function name :  SetReuseAddress
// Description     :  Informs a socket to reuse IP address as needed
//////////////////////////////////////////////////////////////////// 2 4 this 3 208  4 flag 1 202  
25 14 Dtool_5qECyWuV 0 6 23 202 0 14 Dtool_5qECyWuV 242 ////////////////////////////////////////////////////////////////////
// Function name :  SetReuseAddress
// Description     :  Informs a socket to reuse IP address as needed
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
26 14 Dtool_5qECQz_I 0 6 24 202 0 14 Dtool_5qECQz_I 231 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Active
// Description   : Ask if the socket is open (allocated)
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
27 14 Dtool_5qECpf39 0 6 25 201 0 14 Dtool_5qECpf39 257 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetRecvBufferSize
// Description   : Ok it sets the recv buffer size for both tcp and UDP
//////////////////////////////////////////////////////////////////// 2 4 this 3 208  4 size 1 201  
28 14 Dtool_5qECy0UU 0 4 26 205 0 14 Dtool_5qECy0UU 237 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
//////////////////////////////////////////////////////////////////// 2 4 this 3 208  3 ins 1 201  
29 14 Dtool_5qEC3KMt 0 6 27 201 0 14 Dtool_5qEC3KMt 222 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Gets the base socket type
//////////////////////////////////////////////////////////////////// 1 4 this 3 208  
30 14 Dtool_5qECn_pV 0 6 27 201 0 14 Dtool_5qECn_pV 218 //////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Get The RAW file id of the socket
////////////////////////////////////////////////////////////// 1 4 this 3 209  
31 14 Dtool_5qEChnil 0 7 28 199 99 14 Dtool_5qEChnil 219 //////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetPeerName
// Description   : Wrapper on berkly getpeername...
////////////////////////////////////////////////////////////// 1 4 this 3 209  
32 14 Dtool_5qECdhyT 0 6 29 201 0 14 Dtool_5qECdhyT 0 0 
33 14 Dtool_5qECatRC 0 7 30 212 0 14 Dtool_5qECatRC 0 0 
34 14 Dtool_5qEC14V2 0 7 32 213 137 14 Dtool_5qEC14V2 0 0 
35 14 Dtool_5qECT24f 0 7 32 213 137 14 Dtool_5qECT24f 186 //////////////////////////////////////////////////////////////
// Function name : Socket_TCP::Socket_TCP
// Description   :
////////////////////////////////////////////////////////////// 1 6 param0 0 201  
36 14 Dtool_5qECU5vd 0 6 33 201 0 14 Dtool_5qECU5vd 248 ////////////////////////////////////////////////////////////////////
// Function name : SetNoDelay
// Description   : Disable Nagle algorithm. Don't delay send to coalesce packets
//////////////////////////////////////////////////////////////////// 2 4 this 3 213  4 flag 1 202  
37 14 Dtool_5qEC2wBp 0 6 33 201 0 14 Dtool_5qEC2wBp 248 ////////////////////////////////////////////////////////////////////
// Function name : SetNoDelay
// Description   : Disable Nagle algorithm. Don't delay send to coalesce packets
//////////////////////////////////////////////////////////////////// 1 4 this 3 213  
38 14 Dtool_5qEC92k_ 0 6 34 201 0 14 Dtool_5qEC92k_ 241 ////////////////////////////////////////////////////////////////////
// Function name : SetLinger
// Description   : will control the behavior of SO_LINGER for a TCP socket
//////////////////////////////////////////////////////////////////// 2 4 this 3 213  16 interval_seconds 1 201  
39 14 Dtool_5qECawSD 0 6 34 201 0 14 Dtool_5qECawSD 241 ////////////////////////////////////////////////////////////////////
// Function name : SetLinger
// Description   : will control the behavior of SO_LINGER for a TCP socket
//////////////////////////////////////////////////////////////////// 1 4 this 3 213  
40 14 Dtool_5qEC98Mj 0 6 35 201 0 14 Dtool_5qEC98Mj 427 ////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::DontLinger
// Description   : Turn off the linger flag. The socket will quickly release
//        buffered items and free up OS resources. You may lose
//        a stream if you use this flag and do not negotiate the close
//        at the application layer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 213  
41 14 Dtool_5qECNSWt 0 6 36 201 0 14 Dtool_5qECNSWt 337 ////////////////////////////////////////////////////////////////////
// Function name : SetSendBufferSize
// Description   : Just like it sounds. Sets a buffered socket recv buffer size.
//      This function does not refuse ranges outside hard-coded OS
//      limits
//////////////////////////////////////////////////////////////////// 2 4 this 3 213  6 insize 1 201  
42 14 Dtool_5qECcTQY 0 6 37 202 0 14 Dtool_5qECcTQY 320 ////////////////////////////////////////////////////////////////////
// Function name : ActiveOpen
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter
//////////////////////////////////////////////////////////////////// 3 4 this 3 213  10 theaddress 1 197  8 setdelay 1 202  
43 14 Dtool_5qECnKCH 0 6 38 202 0 14 Dtool_5qECnKCH 354 ////////////////////////////////////////////////////////////////////
// Function name : ActiveOpenNonBlocking
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter (non-blocking version)
//////////////////////////////////////////////////////////////////// 2 4 this 3 213  10 theaddress 1 197  
44 14 Dtool_5qECHuTo 0 6 39 202 0 14 Dtool_5qECHuTo 0 2 4 this 3 213  3 err 1 201  
45 14 Dtool_5qEC_f8p 0 6 40 202 0 14 Dtool_5qEC_f8p 0 1 4 this 3 213  
46 14 Dtool_5qECwK2f 0 6 41 201 0 14 Dtool_5qECwK2f 0 2 4 this 3 213  3 str 1 203  
47 14 Dtool_5qECgqE2 0 6 42 203 0 14 Dtool_5qECgqE2 379 ////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
//////////////////////////////////////////////////////////////////// 2 4 this 3 213  7 max_len 1 201  
48 14 Dtool_5qEC__sB 0 7 43 212 0 14 Dtool_5qEC__sB 0 0 
49 14 Dtool_5qECoaHH 0 7 46 214 0 14 Dtool_5qECoaHH 0 0 
50 14 Dtool_5qEC1Qzg 0 6 47 202 0 14 Dtool_5qEC1Qzg 238 ////////////////////////////////////////////////////////////////////
// Function name : OpenForListen
// Description   : This function will initialize a listening Socket
//////////////////////////////////////////////////////////////////// 3 4 this 3 214  8 Inaddess 1 197  12 backlog_size 1 201  
51 14 Dtool_5qECA7kw 0 6 47 202 0 14 Dtool_5qECA7kw 238 ////////////////////////////////////////////////////////////////////
// Function name : OpenForListen
// Description   : This function will initialize a listening Socket
//////////////////////////////////////////////////////////////////// 2 4 this 3 214  8 Inaddess 1 197  
52 14 Dtool_5qECfB0g 0 6 48 202 0 14 Dtool_5qECfB0g 0 3 4 this 3 214  10 newsession 1 213  7 address 1 199  
53 14 Dtool_5qECpo2Q 0 7 49 212 0 14 Dtool_5qECpo2Q 0 0 
54 14 Dtool_5qECfoYk 0 7 51 215 150 14 Dtool_5qECfoYk 0 0 
55 14 Dtool_5qECfARo 0 6 52 202 0 14 Dtool_5qECfARo 320 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 215  7 address 1 197  
56 14 Dtool_5qECs706 0 6 53 202 0 14 Dtool_5qECs706 320 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 215  7 address 1 197  
57 14 Dtool_5qECWUab 0 6 55 202 0 14 Dtool_5qECWUab 375 ////////////////////////////////////////////////////////////////////
// Function name : SocketUDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 4 4 this 3 215  4 data 1 203  3 len 1 201  7 address 1 197  
58 14 Dtool_5qECrU41 0 6 56 202 0 14 Dtool_5qECrU41 317 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::InitNoAddress
// Description     : Set this socket to work with out a bound external address..
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 215  
59 14 Dtool_5qEC0niO 0 6 57 202 0 14 Dtool_5qEC0niO 333 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::tToBroadCast
// Description     : Flips the OS bits that allow for brodcast
//      packets to com in on this port
//
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 215  
60 14 Dtool_5qECNNGl 0 7 58 212 0 14 Dtool_5qECNNGl 0 0 
61 14 Dtool_5qECzXEu 0 7 61 216 158 14 Dtool_5qECzXEu 0 0 
62 14 Dtool_5qECtA39 0 6 62 202 0 14 Dtool_5qECtA39 331 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 216  7 address 1 197  
63 14 Dtool_5qECO8wH 0 6 63 202 0 14 Dtool_5qECO8wH 308 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
//////////////////////////////////////////////////////////////////// 2 4 this 3 216  4 data 1 203  
64 14 Dtool_5qECoEDj 0 6 64 202 0 14 Dtool_5qECoEDj 316 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 216  
65 14 Dtool_5qECbTeT 0 6 65 202 0 14 Dtool_5qECbTeT 353 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 3 4 this 3 216  4 data 1 203  7 address 1 197  
66 14 Dtool_5qECyTt7 0 6 66 202 0 14 Dtool_5qECyTt7 313 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 216  
67 14 Dtool_5qECSuSS 0 7 67 212 0 14 Dtool_5qECSuSS 0 0 
68 14 Dtool_5qECVPNg 0 7 70 217 166 14 Dtool_5qECVPNg 218 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::Socket_fdset
// Description   : The constructor
//////////////////////////////////////////////////////////////////// 0 
69 14 Dtool_5qECOQwF 0 4 71 205 0 14 Dtool_5qECOQwF 202 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::setForSocket
// Description   :
//////////////////////////////////////////////////////////////////// 2 4 this 3 217  5 incon 1 209  
70 14 Dtool_5qECvO9a 0 6 72 202 0 14 Dtool_5qECvO9a 258 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::IsSetFor
// Description   : check to see if a socket object has been marked for reading
//////////////////////////////////////////////////////////////////// 2 4 this 3 218  5 incon 1 209  
71 14 Dtool_5qECwtpw 0 6 73 201 0 14 Dtool_5qECwtpw 190 //////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::WaitForRead
// Description   :
////////////////////////////////////////////////////////////// 3 4 this 3 217  7 zeroFds 1 202  7 timeout 1 220  
72 14 Dtool_5qECFdPN 0 6 73 201 0 14 Dtool_5qECFdPN 187 ////////////////////////////////////////////////////////////////////
// Function name : WaitForRead
// Description   :
//////////////////////////////////////////////////////////////////// 3 4 this 3 217  7 zeroFds 1 202  10 sleep_time 1 204  
73 14 Dtool_5qECBP80 0 6 73 201 0 14 Dtool_5qECBP80 187 ////////////////////////////////////////////////////////////////////
// Function name : WaitForRead
// Description   :
//////////////////////////////////////////////////////////////////// 2 4 this 3 217  7 zeroFds 1 202  
74 14 Dtool_5qECrBiP 0 6 74 201 0 14 Dtool_5qECrBiP 324 ////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForWrite
// Description   : This is the function that will wait till
//      one of the sockets is ready for writing
//////////////////////////////////////////////////////////////////// 3 4 this 3 217  7 zeroFds 1 202  10 sleep_time 1 204  
75 14 Dtool_5qECyTJE 0 6 74 201 0 14 Dtool_5qECyTJE 324 ////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForWrite
// Description   : This is the function that will wait till
//      one of the sockets is ready for writing
//////////////////////////////////////////////////////////////////// 2 4 this 3 217  7 zeroFds 1 202  
76 14 Dtool_5qECrgol 0 6 75 201 0 14 Dtool_5qECrgol 276 //////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForError
// Description   : This is the function that will wait till
//      one of the sockets is in error state
////////////////////////////////////////////////////////////// 3 4 this 3 217  7 zeroFds 1 202  10 sleep_time 1 204  
77 14 Dtool_5qECwWOa 0 6 75 201 0 14 Dtool_5qECwWOa 276 //////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForError
// Description   : This is the function that will wait till
//      one of the sockets is in error state
////////////////////////////////////////////////////////////// 2 4 this 3 217  7 zeroFds 1 202  
78 14 Dtool_5qECMWz1 0 4 76 205 0 14 Dtool_5qECMWz1 226 ////////////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::zeroOut
// Description   :  Marks the content as empty
//////////////////////////////////////////////////////////////////// 1 4 this 3 217  
79 14 Dtool_5qEC3uk5 0 7 82 223 137 14 Dtool_5qEC3uk5 390 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Buffered_DatagramConnection
// Description      : 
//  
// Return type      : inline 
// Argument         : bool do_blocking_writes
// Argument         : int rbufsize
// Argument         : int wbufsize
//////////////////////////////////////////////////////////////////// 3 8 rbufsize 1 201  8 wbufsize 1 201  17 write_flush_point 1 201  
80 14 Dtool_5qEC1Svo 0 6 79 202 0 14 Dtool_5qEC1Svo 360 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::GetMessage
// Description      :  read a message
//  
//  false means something bad happened..
//
//
// Return type      : inline bool 
// Argument         : Datagram &val
//////////////////////////////////////////////////////////////////// 2 4 this 3 223  3 val 1 224  
81 14 Dtool_5qECdjKS 0 6 80 202 0 14 Dtool_5qECdjKS 0 1 4 this 3 223  
82 14 Dtool_5qEC5YxY 0 6 81 202 0 14 Dtool_5qEC5YxY 38 // all the real state magic is in here 1 4 this 3 223  
83 14 Dtool_5qECI5SF 0 6 83 202 0 14 Dtool_5qECI5SF 317 ////////////////////////////////////////////////////////////////////
// Function name    :  Buffered_DatagramConnection::SendMessage
// Description      : send the message 
//  
// Return type      : inline bool 
// Argument         : DataGram &msg
//////////////////////////////////////////////////////////////////// 2 4 this 3 223  3 msg 1 226  
84 14 Dtool_5qEC_RP9 0 6 84 202 0 14 Dtool_5qEC_RP9 295 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Flush
// Description      : flush all wrightes
//  
// Return type      : bool 
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 223  
85 14 Dtool_5qECYblu 0 4 85 205 0 14 Dtool_5qECYblu 283 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Reset
// Description      : Reset 
//  
// Return type      : void 
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 223  
86 14 Dtool_5qEC7jdT 0 4 86 205 0 14 Dtool_5qEC7jdT 79 //  int WaitFor_Read_Error(const Socket_fdset & fd, const Time_Span & timeout); 2 4 this 3 223  7 MaxTime 1 228  
87 14 Dtool_5qECcbUB 0 6 87 204 0 14 Dtool_5qECcbUB 22 // address queue stuff 1 4 this 3 223  
88 14 Dtool_5qECghH0 0 4 88 205 0 14 Dtool_5qECghH0 342 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Init
// Description      :  must be called to set value to the server
//  
// Return type      : inline void 
// Argument         : Socket_Address &inadr
//////////////////////////////////////////////////////////////////// 2 4 this 3 223  5 inadr 1 199  
89 14 Dtool_5qECAvEI 0 4 89 205 0 14 Dtool_5qECAvEI 0 1 4 this 3 223  
90 14 Dtool_5qECq0Fk 0 7 90 212 0 14 Dtool_5qECq0Fk 0 0 
91 14 Dtool_5qECNOcf 0 7 92 229 186 14 Dtool_5qECNOcf 0 0 
92 14 Dtool_5qEC6qan 0 6 93 202 0 14 Dtool_5qEC6qan 322 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 229  7 address 1 197  
93 14 Dtool_5qECLte2 0 6 94 202 0 14 Dtool_5qECLte2 299 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
//////////////////////////////////////////////////////////////////// 2 4 this 3 229  4 data 1 203  
94 14 Dtool_5qECI_uQ 0 6 95 202 0 14 Dtool_5qECI_uQ 307 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 229  
95 14 Dtool_5qEC_f2U 0 6 96 202 0 14 Dtool_5qEC_f2U 344 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 3 4 this 3 229  4 data 1 203  7 address 1 197  
96 14 Dtool_5qECMWFW 0 6 97 202 0 14 Dtool_5qECMWFW 304 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 229  
97 14 Dtool_5qECTZfK 0 7 98 212 0 14 Dtool_5qECTZfK 0 0 
44
187 14 Socket_Address 0 26625 14 Socket_Address 14 Socket_Address 0 0 0 1 98 99 0 12 100 101 102 103 104 105 106 107 108 109 110 111 0 0 0 0 0 204
///////////////////////////////////
// Class : Socket_Address
//
// Description: A simple place to store and munipulate tcp and port address for
//    communication layer
//
//////////////////////////////

188 9 Socket_IP 0 75777 9 Socket_IP 9 Socket_IP 0 0 0 1 112 0 0 12 113 114 115 116 117 118 119 120 121 122 123 124 0 0 1 0 189 0 0 0 0 676
/////////////////////////////////////////////////////////////////////
// Class : Socket_IP
//
// Description : Base functionality for a INET domain Socket
//     this call should be the starting point for all other
//     unix domain sockets
//
//
//                                       SocketIP
//                                          |
//       -------------------------------------------------------------------
//       |             |                       |                           |
//     SocketTCP     SocketTCP_Listen    SocketUDP_Incoming   SocketUDP_OutBound
//
//
//
// socket_fdset
//
/////////////////////////////////////////////////////////////////////

189 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

190 10 Socket_TCP 0 141313 10 Socket_TCP 10 Socket_TCP 0 0 0 1 125 137 0 11 126 127 128 129 130 131 132 133 134 135 136 0 0 1 0 188 0 0 0 0 377
/////////////////////////////////////////////////////////////////////
// Class : Socket_TCP
//
// Description : Base functionality for a TCP connected socket
//               This class is pretty useless by itself but it does hide some of the
//               platform differences from machine to machine
//
/////////////////////////////////////////////////////////////////////

191 17 Socket_TCP_Listen 0 75777 17 Socket_TCP_Listen 17 Socket_TCP_Listen 0 0 0 1 138 0 0 3 139 140 141 0 0 1 0 188 0 0 0 0 232
/////////////////////////////////////////////////////////////////////
// Class : Socket_TCP_Listen
// Description : Base functionality for a TCP rendezvous socket
/////////////////////////////////////////////////////////////////////

192 19 Socket_UDP_Incoming 0 141313 19 Socket_UDP_Incoming 19 Socket_UDP_Incoming 0 0 0 1 142 150 0 7 143 144 145 146 147 148 149 0 0 1 0 188 0 0 0 0 232
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP_Incoming
//
// Description : Base functionality for a UDP Reader
//
//
/////////////////////////////////////////////////////////////////////

193 19 Socket_UDP_Outgoing 0 141313 19 Socket_UDP_Outgoing 19 Socket_UDP_Outgoing 0 0 0 1 151 158 0 6 152 153 154 155 156 157 0 0 1 0 188 0 0 0 0 240
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP_Outgoing
//
// Description : Base functionality for a UDP Sending Socket
//
//
/////////////////////////////////////////////////////////////////////

194 12 Socket_fdset 0 141313 12 Socket_fdset 12 Socket_fdset 0 0 0 1 159 166 0 6 160 161 162 163 164 165 0 0 0 0 0 0

195 27 Buffered_DatagramConnection 0 75777 27 Buffered_DatagramConnection 27 Buffered_DatagramConnection 0 0 0 1 170 137 0 11 167 168 169 171 172 173 174 175 176 177 178 0 0 1 0 190 0 0 0 0 332
////////////////////////////////////////////////////////////////
// there are 3 states   
//
//      1. Socket not even assigned,,,,
//      2. Socket Assigned and trying to get a active connect open
//      3. Socket is open and  writable.. ( Fully powered up )...
//
///////////////////////////////////////////////////////////////

196 10 Socket_UDP 0 141313 10 Socket_UDP 10 Socket_UDP 0 0 0 1 179 186 0 6 180 181 182 183 184 185 0 0 1 0 192 0 0 0 0 387
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP
//
// Description : Base functionality for a combination UDP Reader and
//               Writer.  This duplicates code from
//               Socket_UDP_Outgoing, to avoid the problems of
//               multiple inheritance.
/////////////////////////////////////////////////////////////////////

197 22 Socket_Address const * 0 8576 22 Socket_Address const * 22 Socket_Address const * 0 0 198 0 0 0 0 0 0 0 0 0 0

198 20 Socket_Address const 0 8832 20 Socket_Address const 20 Socket_Address const 0 0 187 0 0 0 0 0 0 0 0 0 0

199 16 Socket_Address * 0 8576 16 Socket_Address * 16 Socket_Address * 0 0 187 0 0 0 0 0 0 0 0 0 0

200 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

201 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

202 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

203 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

204 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

205 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

206 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

207 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

208 11 Socket_IP * 0 8576 11 Socket_IP * 11 Socket_IP * 0 0 188 0 0 0 0 0 0 0 0 0 0

209 17 Socket_IP const * 0 8576 17 Socket_IP const * 17 Socket_IP const * 0 0 210 0 0 0 0 0 0 0 0 0 0

210 15 Socket_IP const 0 8832 15 Socket_IP const 15 Socket_IP const 0 0 188 0 0 0 0 0 0 0 0 0 0

211 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

212 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 211 0 0 0 0 0 0 0 0 0 0

213 12 Socket_TCP * 0 8576 12 Socket_TCP * 12 Socket_TCP * 0 0 190 0 0 0 0 0 0 0 0 0 0

214 19 Socket_TCP_Listen * 0 8576 19 Socket_TCP_Listen * 19 Socket_TCP_Listen * 0 0 191 0 0 0 0 0 0 0 0 0 0

215 21 Socket_UDP_Incoming * 0 8576 21 Socket_UDP_Incoming * 21 Socket_UDP_Incoming * 0 0 192 0 0 0 0 0 0 0 0 0 0

216 21 Socket_UDP_Outgoing * 0 8576 21 Socket_UDP_Outgoing * 21 Socket_UDP_Outgoing * 0 0 193 0 0 0 0 0 0 0 0 0 0

217 14 Socket_fdset * 0 8576 14 Socket_fdset * 14 Socket_fdset * 0 0 194 0 0 0 0 0 0 0 0 0 0

218 20 Socket_fdset const * 0 8576 20 Socket_fdset const * 20 Socket_fdset const * 0 0 219 0 0 0 0 0 0 0 0 0 0

219 18 Socket_fdset const 0 8832 18 Socket_fdset const 18 Socket_fdset const 0 0 194 0 0 0 0 0 0 0 0 0 0

220 17 Time_Span const * 0 8576 17 Time_Span const * 17 Time_Span const * 0 0 221 0 0 0 0 0 0 0 0 0 0

221 15 Time_Span const 0 8832 15 Time_Span const 15 Time_Span const 0 0 222 0 0 0 0 0 0 0 0 0 0

222 9 Time_Span 0 1050624 9 Time_Span 9 Time_Span 0 0 0 0 0 0 0 0 0 0 0 0 149
//////////////////////////////////////////////////////
// Class : Time_Span
//
// Description:
//////////////////////////////////////////////////////

223 29 Buffered_DatagramConnection * 0 8576 29 Buffered_DatagramConnection * 29 Buffered_DatagramConnection * 0 0 195 0 0 0 0 0 0 0 0 0 0

224 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 225 0 0 0 0 0 0 0 0 0 0

225 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

226 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 227 0 0 0 0 0 0 0 0 0 0

227 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 225 0 0 0 0 0 0 0 0 0 0

228 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

229 12 Socket_UDP * 0 8576 12 Socket_UDP * 12 Socket_UDP * 0 0 196 0 0 0 0 0 0 0 0 0 0

230 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
0
