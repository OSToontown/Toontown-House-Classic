1365933465
2 2
8 libp3egg 4 hhEq 8 pandaegg 
949
1012 11 EggUserData 0 4 1961 24 EggUserData::EggUserData 0 2 1 2 934
// Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline EggUserData::EggUserData(void);
inline EggUserData::EggUserData(EggUserData const &copy);

1013 10 operator = 0 4 1961 23 EggUserData::operator = 0 1 3 233
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggUserData &EggUserData::operator =(EggUserData const &copy);

1014 14 get_class_type 0 4 1961 27 EggUserData::get_class_type 0 1 4 0
52
static TypeHandle EggUserData::get_class_type(void);

1015 9 EggObject 0 4 1963 20 EggObject::EggObject 0 2 5 6 449
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
EggObject::EggObject(void);
EggObject::EggObject(EggObject const &copy);

1016 10 operator = 0 4 1963 21 EggObject::operator = 0 1 7 234
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
EggObject &EggObject::operator =(EggObject const &copy);

1017 13 set_user_data 0 4 1963 24 EggObject::set_user_data 0 1 8 1201
////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
////////////////////////////////////////////////////////////////////
54
void EggObject::set_user_data(EggUserData *user_data);

1018 13 get_user_data 0 4 1963 24 EggObject::get_user_data 0 2 9 10 699
////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
112
EggUserData *EggObject::get_user_data(void) const;
EggUserData *EggObject::get_user_data(TypeHandle type) const;

1019 13 has_user_data 0 4 1963 24 EggObject::has_user_data 0 2 11 12 694
////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
////////////////////////////////////////////////////////////////////
96
bool EggObject::has_user_data(void) const;
bool EggObject::has_user_data(TypeHandle type) const;

1020 15 clear_user_data 0 4 1963 26 EggObject::clear_user_data 0 2 13 14 553
////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
////////////////////////////////////////////////////////////////////
88
void EggObject::clear_user_data(void);
void EggObject::clear_user_data(TypeHandle type);

1021 14 get_class_type 0 4 1963 25 EggObject::get_class_type 0 1 15 0
50
static TypeHandle EggObject::get_class_type(void);

1022 19 upcast_to_EggObject 0 12 1964 35 EggNamedObject::upcast_to_EggObject 0 1 22 39
upcast from EggNamedObject to EggObject
53
EggObject *EggNamedObject::upcast_to_EggObject(void);

1023 26 downcast_to_EggNamedObject 0 12 1963 37 EggObject::downcast_to_EggNamedObject 0 1 23 41
downcast from EggObject to EggNamedObject
60
EggNamedObject *EggObject::downcast_to_EggNamedObject(void);

1024 17 upcast_to_Namable 0 12 1964 33 EggNamedObject::upcast_to_Namable 0 1 24 37
upcast from EggNamedObject to Namable
49
Namable *EggNamedObject::upcast_to_Namable(void);

1025 26 downcast_to_EggNamedObject 0 12 1965 35 Namable::downcast_to_EggNamedObject 0 1 25 39
downcast from Namable to EggNamedObject
58
EggNamedObject *Namable::downcast_to_EggNamedObject(void);

1026 14 EggNamedObject 0 4 1964 30 EggNamedObject::EggNamedObject 0 3 16 17 18 943
// Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggNamedObject::EggNamedObject(basic_string< char > const &name = (""));
inline EggNamedObject::EggNamedObject(EggNamedObject const &copy);

1027 10 operator = 0 4 1964 26 EggNamedObject::operator = 0 1 19 236
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggNamedObject &EggNamedObject::operator =(EggNamedObject const &copy);

1028 6 output 0 4 1964 22 EggNamedObject::output 0 1 20 219
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EggNamedObject::output(ostream &out) const;

1029 14 get_class_type 0 4 1964 30 EggNamedObject::get_class_type 0 1 21 0
55
static TypeHandle EggNamedObject::get_class_type(void);

1030 15 ~EggNamedObject 0 4 1964 31 EggNamedObject::~EggNamedObject 0 0 0
38
EggNamedObject::~EggNamedObject(void);

1031 10 operator = 0 4 1966 19 EggNode::operator = 0 1 26 229
////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggNode &EggNode::operator =(EggNode const &copy);

1032 10 get_parent 0 4 1966 19 EggNode::get_parent 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline EggGroupNode *EggNode::get_parent(void) const;

1033 9 get_depth 0 4 1966 18 EggNode::get_depth 0 1 28 297
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
////////////////////////////////////////////////////////////////////
42
inline int EggNode::get_depth(void) const;

1034 17 is_under_instance 0 4 1966 26 EggNode::is_under_instance 0 1 29 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggNode::is_under_instance(void) const;

1035 18 is_under_transform 0 4 1966 27 EggNode::is_under_transform 0 1 30 368
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggNode::is_under_transform(void) const;

1036 14 is_local_coord 0 4 1966 23 EggNode::is_local_coord 0 1 31 443
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
////////////////////////////////////////////////////////////////////
48
inline bool EggNode::is_local_coord(void) const;

1037 16 get_vertex_frame 0 4 1966 25 EggNode::get_vertex_frame 0 1 32 1112
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4d const &EggNode::get_vertex_frame(void) const;

1038 14 get_node_frame 0 4 1966 23 EggNode::get_node_frame 0 1 33 372
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d const &EggNode::get_node_frame(void) const;

1039 20 get_vertex_frame_inv 0 4 1966 29 EggNode::get_vertex_frame_inv 0 1 34 333
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggNode::get_vertex_frame_inv(void) const;

1040 18 get_node_frame_inv 0 4 1966 27 EggNode::get_node_frame_inv 0 1 35 327
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_frame_inv(void) const;

1041 18 get_vertex_to_node 0 4 1966 27 EggNode::get_vertex_to_node 0 1 36 503
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_vertex_to_node(void) const;

1042 18 get_node_to_vertex 0 4 1966 27 EggNode::get_node_to_vertex 0 1 37 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_to_vertex(void) const;

1043 20 get_vertex_frame_ptr 0 4 1966 29 EggNode::get_vertex_frame_ptr 0 1 38 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const *EggNode::get_vertex_frame_ptr(void) const;

1044 18 get_node_frame_ptr 0 4 1966 27 EggNode::get_node_frame_ptr 0 1 39 362
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const *EggNode::get_node_frame_ptr(void) const;

1045 24 get_vertex_frame_inv_ptr 0 4 1966 33 EggNode::get_vertex_frame_inv_ptr 0 1 40 374
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const *EggNode::get_vertex_frame_inv_ptr(void) const;

1046 22 get_node_frame_inv_ptr 0 4 1966 31 EggNode::get_node_frame_inv_ptr 0 1 41 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_frame_inv_ptr(void) const;

1047 22 get_vertex_to_node_ptr 0 4 1966 31 EggNode::get_vertex_to_node_ptr 0 1 42 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_vertex_to_node_ptr(void) const;

1048 22 get_node_to_vertex_ptr 0 4 1966 31 EggNode::get_node_to_vertex_ptr 0 1 43 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_to_vertex_ptr(void) const;

1049 9 transform 0 4 1966 18 EggNode::transform 0 1 44 308
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
////////////////////////////////////////////////////////////////////
53
inline void EggNode::transform(LMatrix4d const &mat);

1050 23 transform_vertices_only 0 4 1966 32 EggNode::transform_vertices_only 0 1 45 476
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
////////////////////////////////////////////////////////////////////
67
inline void EggNode::transform_vertices_only(LMatrix4d const &mat);

1051 18 flatten_transforms 0 4 1966 27 EggNode::flatten_transforms 0 1 46 699
////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
46
inline void EggNode::flatten_transforms(void);

1052 13 apply_texmats 0 4 1966 22 EggNode::apply_texmats 0 1 47 398
////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
////////////////////////////////////////////////////////////////////
34
void EggNode::apply_texmats(void);

1053 11 rename_node 0 4 1966 20 EggNode::rename_node 0 1 48 254
////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
70
int EggNode::rename_node(vector< basic_string< char > > strip_prefix);

1054 8 is_joint 0 4 1966 17 EggNode::is_joint 0 1 49 504
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
43
virtual bool EggNode::is_joint(void) const;

1055 14 is_anim_matrix 0 4 1966 23 EggNode::is_anim_matrix 0 1 50 341
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
////////////////////////////////////////////////////////////////////
49
virtual bool EggNode::is_anim_matrix(void) const;

1056 20 determine_alpha_mode 0 4 1966 29 EggNode::determine_alpha_mode 0 1 51 549
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_alpha_mode(void);

1057 26 determine_depth_write_mode 0 4 1966 35 EggNode::determine_depth_write_mode 0 1 52 561
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggNode::determine_depth_write_mode(void);

1058 25 determine_depth_test_mode 0 4 1966 34 EggNode::determine_depth_test_mode 0 1 53 559
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_depth_test_mode(void);

1059 25 determine_visibility_mode 0 4 1966 34 EggNode::determine_visibility_mode 0 1 54 558
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_visibility_mode(void);

1060 22 determine_depth_offset 0 4 1966 31 EggNode::determine_depth_offset 0 1 55 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
61
virtual EggRenderMode *EggNode::determine_depth_offset(void);

1061 20 determine_draw_order 0 4 1966 29 EggNode::determine_draw_order 0 1 56 531
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_draw_order(void);

1062 13 determine_bin 0 4 1966 22 EggNode::determine_bin 0 1 57 518
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
52
virtual EggRenderMode *EggNode::determine_bin(void);

1063 17 determine_indexed 0 4 1966 26 EggNode::determine_indexed 0 1 58 615
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool EggNode::determine_indexed(void);

1064 15 determine_decal 0 4 1966 24 EggNode::determine_decal 0 1 59 603
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
44
virtual bool EggNode::determine_decal(void);

1065 5 write 0 4 1966 14 EggNode::write 0 1 60 0
70
virtual void EggNode::write(ostream &out, int indent_level) const = 0;

1066 9 parse_egg 0 4 1966 18 EggNode::parse_egg 0 1 61 575
////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
////////////////////////////////////////////////////////////////////
64
bool EggNode::parse_egg(basic_string< char > const &egg_syntax);

1067 20 test_under_integrity 0 4 1966 29 EggNode::test_under_integrity 0 1 62 0
47
void EggNode::test_under_integrity(void) const;

1068 14 get_class_type 0 4 1966 23 EggNode::get_class_type 0 1 63 0
48
static TypeHandle EggNode::get_class_type(void);

1069 8 ~EggNode 0 4 1966 17 EggNode::~EggNode 0 0 0
24
EggNode::~EggNode(void);

1070 10 operator = 0 4 1967 23 EggAnimData::operator = 0 1 64 233
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggAnimData &EggAnimData::operator =(EggAnimData const &copy);

1071 7 set_fps 0 4 1967 20 EggAnimData::set_fps 0 1 65 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAnimData::set_fps(double type);

1072 9 clear_fps 0 4 1967 22 EggAnimData::clear_fps 0 1 66 218
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggAnimData::clear_fps(void);

1073 7 has_fps 0 4 1967 20 EggAnimData::has_fps 0 1 67 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggAnimData::has_fps(void) const;

1074 7 get_fps 0 4 1967 20 EggAnimData::get_fps 0 1 68 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggAnimData::get_fps(void) const;

1075 10 clear_data 0 4 1967 23 EggAnimData::clear_data 0 1 69 259
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
////////////////////////////////////////////////////////////////////
42
inline void EggAnimData::clear_data(void);

1076 8 add_data 0 4 1967 21 EggAnimData::add_data 0 1 70 253
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
////////////////////////////////////////////////////////////////////
48
inline void EggAnimData::add_data(double value);

1077 8 get_size 0 4 1967 21 EggAnimData::get_size 0 1 71 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
////////////////////////////////////////////////////////////////////
45
inline int EggAnimData::get_size(void) const;

1078 8 quantize 0 4 1967 21 EggAnimData::quantize 0 1 72 303
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
////////////////////////////////////////////////////////////////////
43
void EggAnimData::quantize(double quantum);

1079 14 get_class_type 0 4 1967 27 EggAnimData::get_class_type 0 1 73 0
52
static TypeHandle EggAnimData::get_class_type(void);

1080 12 ~EggAnimData 0 4 1967 25 EggAnimData::~EggAnimData 0 0 0
32
EggAnimData::~EggAnimData(void);

1081 14 EggAnimPreload 0 4 1968 30 EggAnimPreload::EggAnimPreload 0 3 74 75 76 943
// Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggAnimPreload::EggAnimPreload(basic_string< char > const &name = (""));
inline EggAnimPreload::EggAnimPreload(EggAnimPreload const &copy);

1082 10 operator = 0 4 1968 26 EggAnimPreload::operator = 0 1 77 236
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggAnimPreload &EggAnimPreload::operator =(EggAnimPreload const &copy);

1083 7 set_fps 0 4 1968 23 EggAnimPreload::set_fps 0 1 78 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggAnimPreload::set_fps(double fps);

1084 9 clear_fps 0 4 1968 25 EggAnimPreload::clear_fps 0 1 79 221
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void EggAnimPreload::clear_fps(void);

1085 7 has_fps 0 4 1968 23 EggAnimPreload::has_fps 0 1 80 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline bool EggAnimPreload::has_fps(void) const;

1086 7 get_fps 0 4 1968 23 EggAnimPreload::get_fps 0 1 81 265
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
50
inline double EggAnimPreload::get_fps(void) const;

1087 14 set_num_frames 0 4 1968 30 EggAnimPreload::set_num_frames 0 1 82 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggAnimPreload::set_num_frames(int num_frames);

1088 16 clear_num_frames 0 4 1968 32 EggAnimPreload::clear_num_frames 0 1 83 228
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggAnimPreload::clear_num_frames(void);

1089 14 has_num_frames 0 4 1968 30 EggAnimPreload::has_num_frames 0 1 84 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggAnimPreload::has_num_frames(void) const;

1090 14 get_num_frames 0 4 1968 30 EggAnimPreload::get_num_frames 0 1 85 279
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
////////////////////////////////////////////////////////////////////
54
inline int EggAnimPreload::get_num_frames(void) const;

1091 14 get_class_type 0 4 1968 30 EggAnimPreload::get_class_type 0 1 86 0
55
static TypeHandle EggAnimPreload::get_class_type(void);

1092 15 ~EggAnimPreload 0 4 1968 31 EggAnimPreload::~EggAnimPreload 0 0 0
38
EggAnimPreload::~EggAnimPreload(void);

1093 20 upcast_to_MemoryBase 0 12 1969 35 EggAttributes::upcast_to_MemoryBase 0 1 107 39
upcast from EggAttributes to MemoryBase
54
MemoryBase *EggAttributes::upcast_to_MemoryBase(void);

1094 25 downcast_to_EggAttributes 0 12 1970 37 MemoryBase::downcast_to_EggAttributes 0 1 108 41
downcast from MemoryBase to EggAttributes
59
EggAttributes *MemoryBase::downcast_to_EggAttributes(void);

1095 13 EggAttributes 0 4 1969 28 EggAttributes::EggAttributes 0 2 87 88 457
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
EggAttributes::EggAttributes(void);
EggAttributes::EggAttributes(EggAttributes const &copy);

1096 10 operator = 0 4 1969 25 EggAttributes::operator = 0 1 89 238
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggAttributes &EggAttributes::operator =(EggAttributes const &copy);

1097 14 ~EggAttributes 0 4 1969 29 EggAttributes::~EggAttributes 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual EggAttributes::~EggAttributes(void);

1098 10 has_normal 0 4 1969 25 EggAttributes::has_normal 0 1 90 713
// Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggAttributes::has_normal(void) const;

1099 10 get_normal 0 4 1969 25 EggAttributes::get_normal 0 1 91 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggAttributes::get_normal(void) const;

1100 10 set_normal 0 4 1969 25 EggAttributes::set_normal 0 1 92 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggAttributes::set_normal(LVector3d const &normal);

1101 12 clear_normal 0 4 1969 27 EggAttributes::clear_normal 0 1 93 226
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAttributes::clear_normal(void);

1102 14 matches_normal 0 4 1969 29 EggAttributes::matches_normal 0 1 94 345
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
76
inline bool EggAttributes::matches_normal(EggAttributes const &other) const;

1103 11 copy_normal 0 4 1969 26 EggAttributes::copy_normal 0 1 95 376
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
////////////////////////////////////////////////////////////////////
67
inline void EggAttributes::copy_normal(EggAttributes const &other);

1104 9 has_color 0 4 1969 24 EggAttributes::has_color 0 1 96 223
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggAttributes::has_color(void) const;

1105 9 get_color 0 4 1969 24 EggAttributes::get_color 0 1 97 333
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f EggAttributes::get_color(void) const;

1106 9 set_color 0 4 1969 24 EggAttributes::set_color 0 1 98 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggAttributes::set_color(LVecBase4f const &Color);

1107 11 clear_color 0 4 1969 26 EggAttributes::clear_color 0 1 99 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggAttributes::clear_color(void);

1108 13 matches_color 0 4 1969 28 EggAttributes::matches_color 0 1 100 343
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
75
inline bool EggAttributes::matches_color(EggAttributes const &other) const;

1109 10 copy_color 0 4 1969 25 EggAttributes::copy_color 0 1 101 372
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
////////////////////////////////////////////////////////////////////
66
inline void EggAttributes::copy_color(EggAttributes const &other);

1110 5 write 0 4 1969 20 EggAttributes::write 0 1 102 304
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggAttributes::write(ostream &out, int indent_level) const;

1111 15 sorts_less_than 0 4 1969 30 EggAttributes::sorts_less_than 0 1 103 399
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
77
inline bool EggAttributes::sorts_less_than(EggAttributes const &other) const;

1112 10 compare_to 0 4 1969 25 EggAttributes::compare_to 0 1 104 394
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
64
int EggAttributes::compare_to(EggAttributes const &other) const;

1113 9 transform 0 4 1969 24 EggAttributes::transform 0 1 105 312
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
////////////////////////////////////////////////////////////////////
52
void EggAttributes::transform(LMatrix4d const &mat);

1114 12 get_dnormals 0 20 1969 27 EggAttributes::get_dnormals 0 1 109 74
getter for EggMorphList< EggMorph< LVector3d > > EggAttributes::_dnormals;
85
EggMorphList< EggMorph< LVector3d > > const &EggAttributes::get_dnormals(void) const;

1115 10 get_drgbas 0 20 1969 25 EggAttributes::get_drgbas 0 1 110 72
getter for EggMorphList< EggMorph< LVector4f > > EggAttributes::_drgbas;
83
EggMorphList< EggMorph< LVector4f > > const &EggAttributes::get_drgbas(void) const;

1116 14 get_class_type 0 4 1969 29 EggAttributes::get_class_type 0 1 106 0
54
static TypeHandle EggAttributes::get_class_type(void);

1117 11 EggVertexUV 0 4 1973 24 EggVertexUV::EggVertexUV 0 3 111 112 113 681
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
211
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint2d const &uv);
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint3d const &uvw);
EggVertexUV::EggVertexUV(EggVertexUV const &copy);

1118 10 operator = 0 4 1973 23 EggVertexUV::operator = 0 1 114 237
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
EggVertexUV &EggVertexUV::operator =(EggVertexUV const &copy);

1119 11 filter_name 0 4 1973 24 EggVertexUV::filter_name 0 1 115 998
// Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
////////////////////////////////////////////////////////////////////
94
static inline basic_string< char > EggVertexUV::filter_name(basic_string< char > const &name);

1120 8 set_name 0 4 1973 21 EggVertexUV::set_name 0 1 116 220
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggVertexUV::set_name(basic_string< char > const &name);

1121 18 get_num_dimensions 0 4 1973 31 EggVertexUV::get_num_dimensions 0 1 117 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
////////////////////////////////////////////////////////////////////
55
inline int EggVertexUV::get_num_dimensions(void) const;

1122 5 has_w 0 4 1973 18 EggVertexUV::has_w 0 1 118 369
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
////////////////////////////////////////////////////////////////////
43
inline bool EggVertexUV::has_w(void) const;

1123 6 get_uv 0 4 1973 19 EggVertexUV::get_uv 0 1 119 302
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertexUV::get_uv(void) const;

1124 7 get_uvw 0 4 1973 20 EggVertexUV::get_uvw 0 1 120 435
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
////////////////////////////////////////////////////////////////////
56
inline LPoint3d const &EggVertexUV::get_uvw(void) const;

1125 6 set_uv 0 4 1973 19 EggVertexUV::set_uv 0 1 121 372
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
////////////////////////////////////////////////////////////////////
58
inline void EggVertexUV::set_uv(LPoint2d const &texCoord);

1126 7 set_uvw 0 4 1973 20 EggVertexUV::set_uvw 0 1 122 333
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
////////////////////////////////////////////////////////////////////
59
inline void EggVertexUV::set_uvw(LPoint3d const &texCoord);

1127 11 has_tangent 0 4 1973 24 EggVertexUV::has_tangent 0 1 123 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggVertexUV::has_tangent(void) const;

1128 11 get_tangent 0 4 1973 24 EggVertexUV::get_tangent 0 1 124 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVector3d const &EggVertexUV::get_tangent(void) const;

1129 11 set_tangent 0 4 1973 24 EggVertexUV::set_tangent 0 1 125 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggVertexUV::set_tangent(LVector3d const &tangent);

1130 13 clear_tangent 0 4 1973 26 EggVertexUV::clear_tangent 0 1 126 225
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggVertexUV::clear_tangent(void);

1131 12 has_binormal 0 4 1973 25 EggVertexUV::has_binormal 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggVertexUV::has_binormal(void) const;

1132 12 get_binormal 0 4 1973 25 EggVertexUV::get_binormal 0 1 128 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggVertexUV::get_binormal(void) const;

1133 12 set_binormal 0 4 1973 25 EggVertexUV::set_binormal 0 1 129 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggVertexUV::set_binormal(LVector3d const &binormal);

1134 14 clear_binormal 0 4 1973 27 EggVertexUV::clear_binormal 0 1 130 226
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggVertexUV::clear_binormal(void);

1135 9 transform 0 4 1973 22 EggVertexUV::transform 0 1 131 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
////////////////////////////////////////////////////////////////////
50
void EggVertexUV::transform(LMatrix4d const &mat);

1136 5 write 0 4 1973 18 EggVertexUV::write 0 1 132 215
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
62
void EggVertexUV::write(ostream &out, int indent_level) const;

1137 10 compare_to 0 4 1973 23 EggVertexUV::compare_to 0 1 133 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
60
int EggVertexUV::compare_to(EggVertexUV const &other) const;

1138 8 get_duvs 0 20 1973 21 EggVertexUV::get_duvs 0 1 135 68
getter for EggMorphList< EggMorph< LVector3d > > EggVertexUV::_duvs;
79
EggMorphList< EggMorph< LVector3d > > const &EggVertexUV::get_duvs(void) const;

1139 14 get_class_type 0 4 1973 27 EggVertexUV::get_class_type 0 1 134 0
52
static TypeHandle EggVertexUV::get_class_type(void);

1140 12 EggVertexAux 0 4 1974 26 EggVertexAux::EggVertexAux 0 2 136 137 457
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
138
EggVertexAux::EggVertexAux(basic_string< char > const &name, LVecBase4d const &aux);
EggVertexAux::EggVertexAux(EggVertexAux const &copy);

1141 10 operator = 0 4 1974 24 EggVertexAux::operator = 0 1 138 238
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
EggVertexAux &EggVertexAux::operator =(EggVertexAux const &copy);

1142 8 set_name 0 4 1974 22 EggVertexAux::set_name 0 1 139 709
// Filename: eggVertexAux.I
// Created by:  jenes (15Nov11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggVertexAux::set_name(basic_string< char > const &name);

1143 7 get_aux 0 4 1974 21 EggVertexAux::get_aux 0 1 140 258
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4d const &EggVertexAux::get_aux(void) const;

1144 7 set_aux 0 4 1974 21 EggVertexAux::set_aux 0 1 141 255
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
57
inline void EggVertexAux::set_aux(LVecBase4d const &aux);

1145 5 write 0 4 1974 19 EggVertexAux::write 0 1 142 216
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
63
void EggVertexAux::write(ostream &out, int indent_level) const;

1146 10 compare_to 0 4 1974 24 EggVertexAux::compare_to 0 1 143 390
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
62
int EggVertexAux::compare_to(EggVertexAux const &other) const;

1147 14 get_class_type 0 4 1974 28 EggVertexAux::get_class_type 0 1 144 0
53
static TypeHandle EggVertexAux::get_class_type(void);

1148 19 upcast_to_EggObject 0 12 1975 30 EggVertex::upcast_to_EggObject 0 1 202 34
upcast from EggVertex to EggObject
48
EggObject *EggVertex::upcast_to_EggObject(void);

1149 21 downcast_to_EggVertex 0 12 1963 32 EggObject::downcast_to_EggVertex 0 1 203 36
downcast from EggObject to EggVertex
50
EggVertex *EggObject::downcast_to_EggVertex(void);

1150 23 upcast_to_EggAttributes 0 12 1975 34 EggVertex::upcast_to_EggAttributes 0 1 204 38
upcast from EggVertex to EggAttributes
56
EggAttributes *EggVertex::upcast_to_EggAttributes(void);

1151 21 downcast_to_EggVertex 0 12 1969 36 EggAttributes::downcast_to_EggVertex 0 1 205 40
downcast from EggAttributes to EggVertex
54
EggVertex *EggAttributes::downcast_to_EggVertex(void);

1152 9 EggVertex 0 4 1975 20 EggVertex::EggVertex 0 2 145 146 562
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
72
EggVertex::EggVertex(void);
EggVertex::EggVertex(EggVertex const &copy);

1153 10 operator = 0 4 1975 21 EggVertex::operator = 0 1 147 347
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
56
EggVertex &EggVertex::operator =(EggVertex const &copy);

1154 10 ~EggVertex 0 4 1975 21 EggVertex::~EggVertex 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual EggVertex::~EggVertex(void);

1155 8 get_pool 0 4 1975 19 EggVertex::get_pool 0 1 148 847
// Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
////////////////////////////////////////////////////////////////////
54
inline EggVertexPool *EggVertex::get_pool(void) const;

1156 20 is_forward_reference 0 4 1975 31 EggVertex::is_forward_reference 0 1 149 710
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
////////////////////////////////////////////////////////////////////
56
inline bool EggVertex::is_forward_reference(void) const;

1157 7 set_pos 0 4 1975 18 EggVertex::set_pos 0 4 150 151 152 153 1449
// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
////////////////////////////////////////////////////////////////////
202
inline void EggVertex::set_pos(double pos);
inline void EggVertex::set_pos(LPoint2d const &pos);
inline void EggVertex::set_pos(LPoint3d const &pos);
inline void EggVertex::set_pos(LPoint4d const &pos);

1158 8 set_pos4 0 4 1975 19 EggVertex::set_pos4 0 1 154 600
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
////////////////////////////////////////////////////////////////////
53
inline void EggVertex::set_pos4(LPoint4d const &pos);

1159 18 get_num_dimensions 0 4 1975 29 EggVertex::get_num_dimensions 0 1 155 721
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_dimensions
//       Access: Published
//  Description: Returns the number of dimensions the vertex uses.
//               Usually this will be 3, but it may be 1, 2, 3, or 4.
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_num_dimensions(void) const;

1160 8 get_pos1 0 4 1975 19 EggVertex::get_pos1 0 1 156 703
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
////////////////////////////////////////////////////////////////////
46
inline double EggVertex::get_pos1(void) const;

1161 8 get_pos2 0 4 1975 19 EggVertex::get_pos2 0 1 157 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertex::get_pos2(void) const;

1162 8 get_pos3 0 4 1975 19 EggVertex::get_pos3 0 1 158 332
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint3d EggVertex::get_pos3(void) const;

1163 8 get_pos4 0 4 1975 19 EggVertex::get_pos4 0 1 159 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
////////////////////////////////////////////////////////////////////
48
inline LPoint4d EggVertex::get_pos4(void) const;

1164 6 has_uv 0 4 1975 17 EggVertex::has_uv 0 2 160 161 922
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
////////////////////////////////////////////////////////////////////
106
inline bool EggVertex::has_uv(void) const;
bool EggVertex::has_uv(basic_string< char > const &name) const;

1165 6 get_uv 0 4 1975 17 EggVertex::get_uv 0 2 162 163 968
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
////////////////////////////////////////////////////////////////////
114
inline LPoint2d EggVertex::get_uv(void) const;
LPoint2d EggVertex::get_uv(basic_string< char > const &name) const;

1166 6 set_uv 0 4 1975 17 EggVertex::set_uv 0 2 164 165 965
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
////////////////////////////////////////////////////////////////////
140
inline void EggVertex::set_uv(LPoint2d const &texCoord);
void EggVertex::set_uv(basic_string< char > const &name, LPoint2d const &texCoord);

1167 8 clear_uv 0 4 1975 19 EggVertex::clear_uv 0 2 166 167 583
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
///////////////////////////////////////////////////////////////////
98
inline void EggVertex::clear_uv(void);
void EggVertex::clear_uv(basic_string< char > const &name);

1168 7 has_uvw 0 4 1975 18 EggVertex::has_uvw 0 1 168 374
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool EggVertex::has_uvw(basic_string< char > const &name) const;

1169 7 get_uvw 0 4 1975 18 EggVertex::get_uvw 0 1 169 366
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
////////////////////////////////////////////////////////////////////
75
LPoint3d const &EggVertex::get_uvw(basic_string< char > const &name) const;

1170 7 set_uvw 0 4 1975 18 EggVertex::set_uvw 0 1 170 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
////////////////////////////////////////////////////////////////////
84
void EggVertex::set_uvw(basic_string< char > const &name, LPoint3d const &texCoord);

1171 10 get_uv_obj 0 4 1975 21 EggVertex::get_uv_obj 0 1 171 584
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
////////////////////////////////////////////////////////////////////
81
EggVertexUV const *EggVertex::get_uv_obj(basic_string< char > const &name) const;

1172 13 modify_uv_obj 0 4 1975 24 EggVertex::modify_uv_obj 0 1 172 462
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
////////////////////////////////////////////////////////////////////
72
EggVertexUV *EggVertex::modify_uv_obj(basic_string< char > const &name);

1173 10 set_uv_obj 0 4 1975 21 EggVertex::set_uv_obj 0 1 173 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
////////////////////////////////////////////////////////////////////
51
void EggVertex::set_uv_obj(EggVertexUV *vertex_uv);

1174 7 has_aux 0 4 1975 18 EggVertex::has_aux 0 2 174 175 605
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
108
inline bool EggVertex::has_aux(void) const;
bool EggVertex::has_aux(basic_string< char > const &name) const;

1175 9 clear_aux 0 4 1975 20 EggVertex::clear_aux 0 2 176 177 533
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
///////////////////////////////////////////////////////////////////
100
inline void EggVertex::clear_aux(void);
void EggVertex::clear_aux(basic_string< char > const &name);

1176 7 get_aux 0 4 1975 18 EggVertex::get_aux 0 1 178 370
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
////////////////////////////////////////////////////////////////////
77
LVecBase4d const &EggVertex::get_aux(basic_string< char > const &name) const;

1177 7 set_aux 0 4 1975 18 EggVertex::set_aux 0 1 179 385
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
////////////////////////////////////////////////////////////////////
81
void EggVertex::set_aux(basic_string< char > const &name, LVecBase4d const &aux);

1178 11 get_aux_obj 0 4 1975 22 EggVertex::get_aux_obj 0 1 180 542
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
////////////////////////////////////////////////////////////////////
83
EggVertexAux const *EggVertex::get_aux_obj(basic_string< char > const &name) const;

1179 14 modify_aux_obj 0 4 1975 25 EggVertex::modify_aux_obj 0 1 181 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
////////////////////////////////////////////////////////////////////
74
EggVertexAux *EggVertex::modify_aux_obj(basic_string< char > const &name);

1180 11 set_aux_obj 0 4 1975 22 EggVertex::set_aux_obj 0 1 182 377
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
////////////////////////////////////////////////////////////////////
54
void EggVertex::set_aux_obj(EggVertexAux *vertex_aux);

1181 9 get_index 0 4 1975 20 EggVertex::get_index 0 1 183 292
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
////////////////////////////////////////////////////////////////////
44
inline int EggVertex::get_index(void) const;

1182 18 set_external_index 0 4 1975 29 EggVertex::set_external_index 0 1 184 822
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
////////////////////////////////////////////////////////////////////
62
inline void EggVertex::set_external_index(int external_index);

1183 18 get_external_index 0 4 1975 29 EggVertex::get_external_index 0 1 185 320
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_external_index(void) const;

1184 19 set_external_index2 0 4 1975 30 EggVertex::set_external_index2 0 1 186 506
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
////////////////////////////////////////////////////////////////////
64
inline void EggVertex::set_external_index2(int external_index2);

1185 19 get_external_index2 0 4 1975 30 EggVertex::get_external_index2 0 1 187 323
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
////////////////////////////////////////////////////////////////////
54
inline int EggVertex::get_external_index2(void) const;

1186 5 write 0 4 1975 16 EggVertex::write 0 1 188 296
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
60
void EggVertex::write(ostream &out, int indent_level) const;

1187 15 sorts_less_than 0 4 1975 26 EggVertex::sorts_less_than 0 1 189 395
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
69
inline bool EggVertex::sorts_less_than(EggVertex const &other) const;

1188 10 compare_to 0 4 1975 21 EggVertex::compare_to 0 1 190 1165
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
////////////////////////////////////////////////////////////////////
56
int EggVertex::compare_to(EggVertex const &other) const;

1189 19 get_num_local_coord 0 4 1975 30 EggVertex::get_num_local_coord 0 1 191 384
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
////////////////////////////////////////////////////////////////////
47
int EggVertex::get_num_local_coord(void) const;

1190 20 get_num_global_coord 0 4 1975 31 EggVertex::get_num_global_coord 0 1 192 382
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
////////////////////////////////////////////////////////////////////
48
int EggVertex::get_num_global_coord(void) const;

1191 9 transform 0 4 1975 20 EggVertex::transform 0 1 193 304
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::transform(LMatrix4d const &mat);

1192 8 has_gref 0 4 1975 19 EggVertex::has_gref 0 1 194 312
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
////////////////////////////////////////////////////////////////////
54
bool EggVertex::has_gref(EggGroup const *group) const;

1193 15 copy_grefs_from 0 4 1975 26 EggVertex::copy_grefs_from 0 1 195 725
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
////////////////////////////////////////////////////////////////////
56
void EggVertex::copy_grefs_from(EggVertex const &other);

1194 11 clear_grefs 0 4 1975 22 EggVertex::clear_grefs 0 1 196 325
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
////////////////////////////////////////////////////////////////////
34
void EggVertex::clear_grefs(void);

1195 8 has_pref 0 4 1975 19 EggVertex::has_pref 0 1 197 338
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
////////////////////////////////////////////////////////////////////
56
int EggVertex::has_pref(EggPrimitive const *prim) const;

1196 19 test_gref_integrity 0 4 1975 30 EggVertex::test_gref_integrity 0 1 198 0
48
void EggVertex::test_gref_integrity(void) const;

1197 19 test_pref_integrity 0 4 1975 30 EggVertex::test_pref_integrity 0 1 199 0
48
void EggVertex::test_pref_integrity(void) const;

1198 6 output 0 4 1975 17 EggVertex::output 0 1 200 227
// _DEBUG

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void EggVertex::output(ostream &out) const;

1199 9 get_dxyzs 0 20 1975 20 EggVertex::get_dxyzs 0 1 206 67
getter for EggMorphList< EggMorph< LVector3d > > EggVertex::_dxyzs;
78
EggMorphList< EggMorph< LVector3d > > const &EggVertex::get_dxyzs(void) const;

1200 14 get_class_type 0 4 1975 25 EggVertex::get_class_type 0 1 201 0
50
static TypeHandle EggVertex::get_class_type(void);

1201 13 EggVertexPool 0 4 1976 28 EggVertexPool::EggVertexPool 0 2 207 208 683
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
////////////////////////////////////////////////////////////////////
120
EggVertexPool::EggVertexPool(basic_string< char > const &name);
EggVertexPool::EggVertexPool(EggVertexPool const &copy);

1202 10 has_vertex 0 4 1976 25 EggVertexPool::has_vertex 0 1 209 878
// Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
////////////////////////////////////////////////////////////////////
55
inline bool EggVertexPool::has_vertex(int index) const;

1203 20 has_forward_vertices 0 4 1976 35 EggVertexPool::has_forward_vertices 0 1 210 386
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_forward_vertices(void) const;

1204 20 has_defined_vertices 0 4 1976 35 EggVertexPool::has_defined_vertices 0 1 211 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_defined_vertices(void) const;

1205 10 get_vertex 0 4 1976 25 EggVertexPool::get_vertex 0 1 212 411
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
54
EggVertex *EggVertexPool::get_vertex(int index) const;

1206 11 operator [] 0 4 1976 26 EggVertexPool::operator [] 0 1 213 418
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
62
inline EggVertex *EggVertexPool::operator [](int index) const;

1207 18 get_forward_vertex 0 4 1976 33 EggVertexPool::get_forward_vertex 0 1 214 679
// Returns a forward reference if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
////////////////////////////////////////////////////////////////////
56
EggVertex *EggVertexPool::get_forward_vertex(int index);

1208 17 get_highest_index 0 4 1976 32 EggVertexPool::get_highest_index 0 1 215 425
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
////////////////////////////////////////////////////////////////////
49
int EggVertexPool::get_highest_index(void) const;

1209 17 set_highest_index 0 4 1976 32 EggVertexPool::set_highest_index 0 1 216 589
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
////////////////////////////////////////////////////////////////////
57
void EggVertexPool::set_highest_index(int highest_index);

1210 18 get_num_dimensions 0 4 1976 33 EggVertexPool::get_num_dimensions 0 1 217 319
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
////////////////////////////////////////////////////////////////////
50
int EggVertexPool::get_num_dimensions(void) const;

1211 11 has_normals 0 4 1976 26 EggVertexPool::has_normals 0 1 218 326
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
52
virtual bool EggVertexPool::has_normals(void) const;

1212 10 has_colors 0 4 1976 25 EggVertexPool::has_colors 0 1 219 324
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
43
bool EggVertexPool::has_colors(void) const;

1213 19 has_nonwhite_colors 0 4 1976 34 EggVertexPool::has_nonwhite_colors 0 1 220 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
////////////////////////////////////////////////////////////////////
52
bool EggVertexPool::has_nonwhite_colors(void) const;

1214 19 check_overall_color 0 4 1976 34 EggVertexPool::check_overall_color 0 0 686
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::check_overall_color
//       Access: Public
//  Description: Scans the vertex pool for different colors on
//               different vertices.  If all vertices are the same
//               color, sets has_overall_color to true and fills the
//               color into overall_color.  If no vertices have any
//               color, set has_overall_color to true and fills white
//               into overall_color.  If at least two vertices have
//               different colors, sets has_overall_color to false.
////////////////////////////////////////////////////////////////////
98
void EggVertexPool::check_overall_color(bool &has_overall_color, LVecBase4f &overall_color) const;

1215 7 has_uvs 0 4 1976 22 EggVertexPool::has_uvs 0 1 221 318
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_uvs(void) const;

1216 7 has_aux 0 4 1976 22 EggVertexPool::has_aux 0 1 222 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_aux(void) const;

1217 12 get_uv_names 0 4 1976 27 EggVertexPool::get_uv_names 0 1 223 654
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
////////////////////////////////////////////////////////////////////
167
void EggVertexPool::get_uv_names(vector< basic_string< char > > &uv_names, vector< basic_string< char > > &uvw_names, vector< basic_string< char > > &tbn_names) const;

1218 13 get_aux_names 0 4 1976 28 EggVertexPool::get_aux_names 0 1 224 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
////////////////////////////////////////////////////////////////////
83
void EggVertexPool::get_aux_names(vector< basic_string< char > > &aux_names) const;

1219 4 size 0 4 1976 19 EggVertexPool::size 0 1 225 261
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
////////////////////////////////////////////////////////////////////
45
unsigned int EggVertexPool::size(void) const;

1220 10 add_vertex 0 4 1976 25 EggVertexPool::add_vertex 0 2 226 227 1344
// add_vertex() adds a freshly-allocated vertex.  It is up to the
// user to allocate the vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
////////////////////////////////////////////////////////////////////
74
EggVertex *EggVertexPool::add_vertex(EggVertex *vertex, int index = (-1));

1221 15 make_new_vertex 0 4 1976 30 EggVertexPool::make_new_vertex 0 5 228 229 230 231 232 2770
// make_new_vertex() allocates and returns a new vertex from the
// pool.

// make_new_vertex() allocates and returns a new vertex from the
// pool.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////
330
inline EggVertex *EggVertexPool::make_new_vertex(void);
inline EggVertex *EggVertexPool::make_new_vertex(double pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint2d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint3d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint4d const &pos);

1222 20 create_unique_vertex 0 4 1976 35 EggVertexPool::create_unique_vertex 0 1 233 616
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::create_unique_vertex(EggVertex const &copy);

1223 20 find_matching_vertex 0 4 1976 35 EggVertexPool::find_matching_vertex 0 1 234 636
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::find_matching_vertex(EggVertex const &copy);

1224 13 remove_vertex 0 4 1976 28 EggVertexPool::remove_vertex 0 1 235 342
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
////////////////////////////////////////////////////////////////////
53
void EggVertexPool::remove_vertex(EggVertex *vertex);

1225 22 remove_unused_vertices 0 4 1976 37 EggVertexPool::remove_unused_vertices 0 1 236 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
////////////////////////////////////////////////////////////////////
48
int EggVertexPool::remove_unused_vertices(void);

1226 27 add_unused_vertices_to_prim 0 4 1976 42 EggVertexPool::add_unused_vertices_to_prim 0 1 237 355
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
////////////////////////////////////////////////////////////////////
68
void EggVertexPool::add_unused_vertices_to_prim(EggPrimitive *prim);

1227 9 transform 0 4 1976 24 EggVertexPool::transform 0 1 238 733
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
////////////////////////////////////////////////////////////////////
52
void EggVertexPool::transform(LMatrix4d const &mat);

1228 22 sort_by_external_index 0 4 1976 37 EggVertexPool::sort_by_external_index 0 1 239 457
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
////////////////////////////////////////////////////////////////////
49
void EggVertexPool::sort_by_external_index(void);

1229 14 get_class_type 0 4 1976 29 EggVertexPool::get_class_type 0 1 240 0
54
static TypeHandle EggVertexPool::get_class_type(void);

1230 12 EggGroupNode 0 4 1977 26 EggGroupNode::EggGroupNode 0 3 241 242 243 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
122
EggGroupNode::EggGroupNode(basic_string< char > const &name = (""));
EggGroupNode::EggGroupNode(EggGroupNode const &copy);

1231 10 operator = 0 4 1977 24 EggGroupNode::operator = 0 1 244 237
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggGroupNode &EggGroupNode::operator =(EggGroupNode const &copy);

1232 5 empty 0 4 1977 19 EggGroupNode::empty 0 1 245 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
bool EggGroupNode::empty(void) const;

1233 4 size 0 4 1977 18 EggGroupNode::size 0 1 246 217
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
unsigned int EggGroupNode::size(void) const;

1234 5 clear 0 4 1977 19 EggGroupNode::clear 0 1 247 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
void EggGroupNode::clear(void);

1235 15 get_first_child 0 4 1977 29 EggGroupNode::get_first_child 0 1 248 914
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
////////////////////////////////////////////////////////////////////
45
EggNode *EggGroupNode::get_first_child(void);

1236 14 get_next_child 0 4 1977 28 EggGroupNode::get_next_child 0 1 249 1106
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
////////////////////////////////////////////////////////////////////
44
EggNode *EggGroupNode::get_next_child(void);

1237 9 add_child 0 4 1977 23 EggGroupNode::add_child 0 1 250 385
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
////////////////////////////////////////////////////////////////////
48
EggNode *EggGroupNode::add_child(EggNode *node);

1238 12 remove_child 0 4 1977 26 EggGroupNode::remove_child 0 1 251 398
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
////////////////////////////////////////////////////////////////////
63
PointerTo< EggNode > EggGroupNode::remove_child(EggNode *node);

1239 14 steal_children 0 4 1977 28 EggGroupNode::steal_children 0 1 252 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::steal_children(EggGroupNode &other);

1240 10 find_child 0 4 1977 24 EggGroupNode::find_child 0 1 253 410
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
////////////////////////////////////////////////////////////////////
74
EggNode *EggGroupNode::find_child(basic_string< char > const &name) const;

1241 22 has_absolute_pathnames 0 4 1977 36 EggGroupNode::has_absolute_pathnames 0 1 254 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
////////////////////////////////////////////////////////////////////
54
bool EggGroupNode::has_absolute_pathnames(void) const;

1242 17 resolve_filenames 0 4 1977 31 EggGroupNode::resolve_filenames 0 1 255 472
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
////////////////////////////////////////////////////////////////////
68
void EggGroupNode::resolve_filenames(DSearchPath const &searchpath);

1243 15 force_filenames 0 4 1977 29 EggGroupNode::force_filenames 0 1 256 452
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
////////////////////////////////////////////////////////////////////
62
void EggGroupNode::force_filenames(Filename const &directory);

1244 23 reverse_vertex_ordering 0 4 1977 37 EggGroupNode::reverse_vertex_ordering 0 1 257 393
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::reverse_vertex_ordering(void);

1245 24 recompute_vertex_normals 0 4 1977 38 EggGroupNode::recompute_vertex_normals 0 2 258 259 1132
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
98
void EggGroupNode::recompute_vertex_normals(double threshold, CoordinateSystem cs = (CS_default));

1246 25 recompute_polygon_normals 0 4 1977 39 EggGroupNode::recompute_polygon_normals 0 2 260 261 1077
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::recompute_polygon_normals(CoordinateSystem cs = (CS_default));

1247 13 strip_normals 0 4 1977 27 EggGroupNode::strip_normals 0 1 262 606
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
39
void EggGroupNode::strip_normals(void);

1248 26 recompute_tangent_binormal 0 4 1977 40 EggGroupNode::recompute_tangent_binormal 0 2 263 264 1603
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
166
bool EggGroupNode::recompute_tangent_binormal(GlobPattern const &uv_name);
bool EggGroupNode::recompute_tangent_binormal(vector< basic_string< char > > const &names);

1249 31 recompute_tangent_binormal_auto 0 4 1977 45 EggGroupNode::recompute_tangent_binormal_auto 0 1 265 421
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
57
bool EggGroupNode::recompute_tangent_binormal_auto(void);

1250 20 triangulate_polygons 0 4 1977 34 EggGroupNode::triangulate_polygons 0 1 266 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
////////////////////////////////////////////////////////////////////
50
int EggGroupNode::triangulate_polygons(int flags);

1251 14 mesh_triangles 0 4 1977 28 EggGroupNode::mesh_triangles 0 1 267 318
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
////////////////////////////////////////////////////////////////////
45
void EggGroupNode::mesh_triangles(int flags);

1252 21 make_point_primitives 0 4 1977 35 EggGroupNode::make_point_primitives 0 1 268 382
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::make_point_primitives(void);

1253 12 rename_nodes 0 4 1977 26 EggGroupNode::rename_nodes 0 1 269 260
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
90
int EggGroupNode::rename_nodes(vector< basic_string< char > > strip_prefix, bool recurse);

1254 22 remove_unused_vertices 0 4 1977 36 EggGroupNode::remove_unused_vertices 0 1 270 1111
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
////////////////////////////////////////////////////////////////////
55
int EggGroupNode::remove_unused_vertices(bool recurse);

1255 25 remove_invalid_primitives 0 4 1977 39 EggGroupNode::remove_invalid_primitives 0 1 271 453
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
////////////////////////////////////////////////////////////////////
58
int EggGroupNode::remove_invalid_primitives(bool recurse);

1256 23 clear_connected_shading 0 4 1977 37 EggGroupNode::clear_connected_shading 0 1 272 635
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::clear_connected_shading(void);

1257 21 get_connected_shading 0 4 1977 35 EggGroupNode::get_connected_shading 0 1 273 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::get_connected_shading(void);

1258 16 unify_attributes 0 4 1977 30 EggGroupNode::unify_attributes 0 1 274 1614
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
104
void EggGroupNode::unify_attributes(bool use_connected_shading, bool allow_per_primitive, bool recurse);

1259 20 apply_last_attribute 0 4 1977 34 EggGroupNode::apply_last_attribute 0 1 275 768
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
54
void EggGroupNode::apply_last_attribute(bool recurse);

1260 21 apply_first_attribute 0 4 1977 35 EggGroupNode::apply_first_attribute 0 1 276 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::apply_first_attribute(bool recurse);

1261 25 post_apply_flat_attribute 0 4 1977 39 EggGroupNode::post_apply_flat_attribute 0 1 277 490
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
void EggGroupNode::post_apply_flat_attribute(bool recurse);

1262 14 has_primitives 0 4 1977 28 EggGroupNode::has_primitives 0 1 278 380
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggGroupNode::has_primitives(void) const;

1263 20 joint_has_primitives 0 4 1977 34 EggGroupNode::joint_has_primitives 0 1 279 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggGroupNode::joint_has_primitives(void) const;

1264 11 has_normals 0 4 1977 25 EggGroupNode::has_normals 0 1 280 417
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggGroupNode::has_normals(void) const;

1265 8 is_right 0 4 1977 22 EggGroupNode::is_right 0 1 281 765
// Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
////////////////////////////////////////////////////////////////////
84
static inline bool EggGroupNode::is_right(LVector2d const &v1, LVector2d const &v2);

1266 14 get_class_type 0 4 1977 28 EggGroupNode::get_class_type 0 1 282 0
53
static TypeHandle EggGroupNode::get_class_type(void);

1267 13 EggRenderMode 0 4 1979 28 EggRenderMode::EggRenderMode 0 2 283 284 940
// Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
99
EggRenderMode::EggRenderMode(void);
inline EggRenderMode::EggRenderMode(EggRenderMode const &copy);

1268 10 operator = 0 4 1979 25 EggRenderMode::operator = 0 1 285 235
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
EggRenderMode &EggRenderMode::operator =(EggRenderMode const &copy);

1269 5 write 0 4 1979 20 EggRenderMode::write 0 1 286 301
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggRenderMode::write(ostream &out, int indent_level) const;

1270 14 set_alpha_mode 0 4 1979 29 EggRenderMode::set_alpha_mode 0 1 287 849
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
////////////////////////////////////////////////////////////////////
73
inline void EggRenderMode::set_alpha_mode(EggRenderMode::AlphaMode mode);

1271 14 get_alpha_mode 0 4 1979 29 EggRenderMode::get_alpha_mode 0 1 288 357
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
////////////////////////////////////////////////////////////////////
74
inline EggRenderMode::AlphaMode EggRenderMode::get_alpha_mode(void) const;

1272 20 set_depth_write_mode 0 4 1979 35 EggRenderMode::set_depth_write_mode 0 1 289 412
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
////////////////////////////////////////////////////////////////////
84
inline void EggRenderMode::set_depth_write_mode(EggRenderMode::DepthWriteMode mode);

1273 20 get_depth_write_mode 0 4 1979 35 EggRenderMode::get_depth_write_mode 0 1 290 376
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
////////////////////////////////////////////////////////////////////
85
inline EggRenderMode::DepthWriteMode EggRenderMode::get_depth_write_mode(void) const;

1274 19 set_depth_test_mode 0 4 1979 34 EggRenderMode::set_depth_test_mode 0 1 291 521
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
////////////////////////////////////////////////////////////////////
82
inline void EggRenderMode::set_depth_test_mode(EggRenderMode::DepthTestMode mode);

1275 19 get_depth_test_mode 0 4 1979 34 EggRenderMode::get_depth_test_mode 0 1 292 373
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
////////////////////////////////////////////////////////////////////
83
inline EggRenderMode::DepthTestMode EggRenderMode::get_depth_test_mode(void) const;

1276 19 set_visibility_mode 0 4 1979 34 EggRenderMode::set_visibility_mode 0 1 293 530
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
////////////////////////////////////////////////////////////////////
83
inline void EggRenderMode::set_visibility_mode(EggRenderMode::VisibilityMode mode);

1277 19 get_visibility_mode 0 4 1979 34 EggRenderMode::get_visibility_mode 0 1 294 372
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
////////////////////////////////////////////////////////////////////
84
inline EggRenderMode::VisibilityMode EggRenderMode::get_visibility_mode(void) const;

1278 16 set_depth_offset 0 4 1979 31 EggRenderMode::set_depth_offset 0 1 295 459
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
////////////////////////////////////////////////////////////////////
54
inline void EggRenderMode::set_depth_offset(int bias);

1279 16 get_depth_offset 0 4 1979 31 EggRenderMode::get_depth_offset 0 1 296 336
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
55
inline int EggRenderMode::get_depth_offset(void) const;

1280 16 has_depth_offset 0 4 1979 31 EggRenderMode::has_depth_offset 0 1 297 348
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
56
inline bool EggRenderMode::has_depth_offset(void) const;

1281 18 clear_depth_offset 0 4 1979 33 EggRenderMode::clear_depth_offset 0 1 298 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
52
inline void EggRenderMode::clear_depth_offset(void);

1282 14 set_draw_order 0 4 1979 29 EggRenderMode::set_draw_order 0 1 299 534
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
////////////////////////////////////////////////////////////////////
53
inline void EggRenderMode::set_draw_order(int order);

1283 14 get_draw_order 0 4 1979 29 EggRenderMode::get_draw_order 0 1 300 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
53
inline int EggRenderMode::get_draw_order(void) const;

1284 14 has_draw_order 0 4 1979 29 EggRenderMode::has_draw_order 0 1 301 342
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline bool EggRenderMode::has_draw_order(void) const;

1285 16 clear_draw_order 0 4 1979 31 EggRenderMode::clear_draw_order 0 1 302 324
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
50
inline void EggRenderMode::clear_draw_order(void);

1286 7 set_bin 0 4 1979 22 EggRenderMode::set_bin 0 1 303 691
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
////////////////////////////////////////////////////////////////////
68
inline void EggRenderMode::set_bin(basic_string< char > const &bin);

1287 7 get_bin 0 4 1979 22 EggRenderMode::get_bin 0 1 304 326
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > EggRenderMode::get_bin(void) const;

1288 7 has_bin 0 4 1979 22 EggRenderMode::has_bin 0 1 305 319
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
////////////////////////////////////////////////////////////////////
47
inline bool EggRenderMode::has_bin(void) const;

1289 9 clear_bin 0 4 1979 24 EggRenderMode::clear_bin 0 1 306 315
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
////////////////////////////////////////////////////////////////////
43
inline void EggRenderMode::clear_bin(void);

1290 11 operator == 0 4 1979 26 EggRenderMode::operator == 0 1 307 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
bool EggRenderMode::operator ==(EggRenderMode const &other) const;

1291 11 operator != 0 4 1979 26 EggRenderMode::operator != 0 1 308 266
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool EggRenderMode::operator !=(EggRenderMode const &other) const;

1292 10 operator < 0 4 1979 25 EggRenderMode::operator < 0 1 309 228
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
bool EggRenderMode::operator <(EggRenderMode const &other) const;

1293 17 string_alpha_mode 0 4 1979 32 EggRenderMode::string_alpha_mode 0 1 310 413
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
////////////////////////////////////////////////////////////////////
101
static EggRenderMode::AlphaMode EggRenderMode::string_alpha_mode(basic_string< char > const &string);

1294 23 string_depth_write_mode 0 4 1979 38 EggRenderMode::string_depth_write_mode 0 1 311 447
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
////////////////////////////////////////////////////////////////////
112
static EggRenderMode::DepthWriteMode EggRenderMode::string_depth_write_mode(basic_string< char > const &string);

1295 22 string_depth_test_mode 0 4 1979 37 EggRenderMode::string_depth_test_mode 0 1 312 444
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
////////////////////////////////////////////////////////////////////
110
static EggRenderMode::DepthTestMode EggRenderMode::string_depth_test_mode(basic_string< char > const &string);

1296 22 string_visibility_mode 0 4 1979 37 EggRenderMode::string_visibility_mode 0 1 313 437
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
////////////////////////////////////////////////////////////////////
111
static EggRenderMode::VisibilityMode EggRenderMode::string_visibility_mode(basic_string< char > const &string);

1297 14 get_class_type 0 4 1979 29 EggRenderMode::get_class_type 0 1 314 0
54
static TypeHandle EggRenderMode::get_class_type(void);

1298 14 ~EggRenderMode 0 4 1979 29 EggRenderMode::~EggRenderMode 0 0 0
36
EggRenderMode::~EggRenderMode(void);

1299 12 EggTransform 0 4 1984 26 EggTransform::EggTransform 0 2 315 316 449
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
EggTransform::EggTransform(void);
EggTransform::EggTransform(EggTransform const &copy);

1300 10 operator = 0 4 1984 24 EggTransform::operator = 0 1 317 234
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
EggTransform &EggTransform::operator =(EggTransform const &copy);

1301 13 ~EggTransform 0 4 1984 27 EggTransform::~EggTransform 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual EggTransform::~EggTransform(void);

1302 15 clear_transform 0 4 1984 29 EggTransform::clear_transform 0 1 318 266
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
////////////////////////////////////////////////////////////////////
48
inline void EggTransform::clear_transform(void);

1303 15 add_translate2d 0 4 1984 29 EggTransform::add_translate2d 0 1 319 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate2d(LVector2d const &translate);

1304 15 add_translate3d 0 4 1984 29 EggTransform::add_translate3d 0 1 320 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate3d(LVector3d const &translate);

1305 12 add_rotate2d 0 4 1984 26 EggTransform::add_rotate2d 0 1 321 384
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
////////////////////////////////////////////////////////////////////
46
void EggTransform::add_rotate2d(double angle);

1306 8 add_rotx 0 4 1984 22 EggTransform::add_rotx 0 1 322 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotx(double angle);

1307 8 add_roty 0 4 1984 22 EggTransform::add_roty 0 1 323 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_roty(double angle);

1308 8 add_rotz 0 4 1984 22 EggTransform::add_rotz 0 1 324 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotz(double angle);

1309 12 add_rotate3d 0 4 1984 26 EggTransform::add_rotate3d 0 2 325 326 811
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
////////////////////////////////////////////////////////////////////
128
void EggTransform::add_rotate3d(double angle, LVector3d const &axis);
void EggTransform::add_rotate3d(LQuaterniond const &quat);

1310 11 add_scale2d 0 4 1984 25 EggTransform::add_scale2d 0 1 327 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale2d(LVecBase2d const &scale);

1311 11 add_scale3d 0 4 1984 25 EggTransform::add_scale3d 0 1 328 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale3d(LVecBase3d const &scale);

1312 17 add_uniform_scale 0 4 1984 31 EggTransform::add_uniform_scale 0 1 329 277
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
////////////////////////////////////////////////////////////////////
51
void EggTransform::add_uniform_scale(double scale);

1313 11 add_matrix3 0 4 1984 25 EggTransform::add_matrix3 0 1 330 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix3(LMatrix3d const &mat);

1314 11 add_matrix4 0 4 1984 25 EggTransform::add_matrix4 0 1 331 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix4(LMatrix4d const &mat);

1315 13 has_transform 0 4 1984 27 EggTransform::has_transform 0 1 332 432
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
////////////////////////////////////////////////////////////////////
52
inline bool EggTransform::has_transform(void) const;

1316 15 has_transform2d 0 4 1984 29 EggTransform::has_transform2d 0 1 333 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform2d(void) const;

1317 15 set_transform2d 0 4 1984 29 EggTransform::set_transform2d 0 1 334 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform2d(LMatrix3d const &mat);

1318 15 has_transform3d 0 4 1984 29 EggTransform::has_transform3d 0 1 335 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform3d(void) const;

1319 15 set_transform3d 0 4 1984 29 EggTransform::set_transform3d 0 1 336 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform3d(LMatrix4d const &mat);

1320 15 get_transform2d 0 4 1984 29 EggTransform::get_transform2d 0 1 337 348
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
////////////////////////////////////////////////////////////////////
59
inline LMatrix3d EggTransform::get_transform2d(void) const;

1321 15 get_transform3d 0 4 1984 29 EggTransform::get_transform3d 0 1 338 450
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggTransform::get_transform3d(void) const;

1322 21 transform_is_identity 0 4 1984 35 EggTransform::transform_is_identity 0 1 339 318
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool EggTransform::transform_is_identity(void) const;

1323 18 get_num_components 0 4 1984 32 EggTransform::get_num_components 0 1 340 306
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
////////////////////////////////////////////////////////////////////
56
inline int EggTransform::get_num_components(void) const;

1324 18 get_component_type 0 4 1984 32 EggTransform::get_component_type 0 1 341 267
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
////////////////////////////////////////////////////////////////////
81
inline EggTransform::ComponentType EggTransform::get_component_type(int n) const;

1325 20 get_component_number 0 4 1984 34 EggTransform::get_component_number 0 1 342 531
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
////////////////////////////////////////////////////////////////////
62
inline double EggTransform::get_component_number(int n) const;

1326 18 get_component_vec2 0 4 1984 32 EggTransform::get_component_vec2 0 1 343 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d const &EggTransform::get_component_vec2(int n) const;

1327 18 get_component_vec3 0 4 1984 32 EggTransform::get_component_vec3 0 1 344 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d const &EggTransform::get_component_vec3(int n) const;

1328 18 get_component_mat3 0 4 1984 32 EggTransform::get_component_mat3 0 1 345 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
////////////////////////////////////////////////////////////////////
70
inline LMatrix3d const &EggTransform::get_component_mat3(int n) const;

1329 18 get_component_mat4 0 4 1984 32 EggTransform::get_component_mat4 0 1 346 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const &EggTransform::get_component_mat4(int n) const;

1330 5 write 0 4 1984 19 EggTransform::write 0 1 347 292
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
////////////////////////////////////////////////////////////////////
98
void EggTransform::write(ostream &out, int indent_level, basic_string< char > const &label) const;

1331 9 make_copy 0 4 1986 29 EggSwitchCondition::make_copy 0 1 348 0
74
virtual EggSwitchCondition *EggSwitchCondition::make_copy(void) const = 0;

1332 5 write 0 4 1986 25 EggSwitchCondition::write 0 1 349 0
81
virtual void EggSwitchCondition::write(ostream &out, int indent_level) const = 0;

1333 9 transform 0 4 1986 29 EggSwitchCondition::transform 0 1 350 0
69
virtual void EggSwitchCondition::transform(LMatrix4d const &mat) = 0;

1334 14 get_class_type 0 4 1986 34 EggSwitchCondition::get_class_type 0 1 351 0
59
static TypeHandle EggSwitchCondition::get_class_type(void);

1335 19 ~EggSwitchCondition 0 4 1986 39 EggSwitchCondition::~EggSwitchCondition 0 0 0
46
EggSwitchCondition::~EggSwitchCondition(void);

1336 26 EggSwitchConditionDistance 0 4 1987 54 EggSwitchConditionDistance::EggSwitchConditionDistance 0 2 352 353 235
////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
EggSwitchConditionDistance::EggSwitchConditionDistance(double switch_in, double switch_out, LPoint3d const &center, double fade = (0));

1337 8 get_fade 0 20 1987 36 EggSwitchConditionDistance::get_fade 0 1 355 52
getter for double EggSwitchConditionDistance::_fade;
56
double EggSwitchConditionDistance::get_fade(void) const;

1338 8 set_fade 0 36 1987 36 EggSwitchConditionDistance::set_fade 0 1 356 52
setter for double EggSwitchConditionDistance::_fade;
56
void EggSwitchConditionDistance::set_fade(double value);

1339 14 get_switch_out 0 20 1987 42 EggSwitchConditionDistance::get_switch_out 0 1 357 58
getter for double EggSwitchConditionDistance::_switch_out;
62
double EggSwitchConditionDistance::get_switch_out(void) const;

1340 14 set_switch_out 0 36 1987 42 EggSwitchConditionDistance::set_switch_out 0 1 358 58
setter for double EggSwitchConditionDistance::_switch_out;
62
void EggSwitchConditionDistance::set_switch_out(double value);

1341 13 get_switch_in 0 20 1987 41 EggSwitchConditionDistance::get_switch_in 0 1 359 57
getter for double EggSwitchConditionDistance::_switch_in;
61
double EggSwitchConditionDistance::get_switch_in(void) const;

1342 13 set_switch_in 0 36 1987 41 EggSwitchConditionDistance::set_switch_in 0 1 360 57
setter for double EggSwitchConditionDistance::_switch_in;
61
void EggSwitchConditionDistance::set_switch_in(double value);

1343 10 get_center 0 20 1987 38 EggSwitchConditionDistance::get_center 0 1 361 56
getter for LPoint3d EggSwitchConditionDistance::_center;
67
LPoint3d const &EggSwitchConditionDistance::get_center(void) const;

1344 14 get_class_type 0 4 1987 42 EggSwitchConditionDistance::get_class_type 0 1 354 0
67
static TypeHandle EggSwitchConditionDistance::get_class_type(void);

1345 27 ~EggSwitchConditionDistance 0 4 1987 55 EggSwitchConditionDistance::~EggSwitchConditionDistance 0 0 0
62
EggSwitchConditionDistance::~EggSwitchConditionDistance(void);

1346 22 upcast_to_EggGroupNode 0 12 1990 32 EggGroup::upcast_to_EggGroupNode 0 1 500 36
upcast from EggGroup to EggGroupNode
53
EggGroupNode *EggGroup::upcast_to_EggGroupNode(void);

1347 20 downcast_to_EggGroup 0 12 1977 34 EggGroupNode::downcast_to_EggGroup 0 1 501 38
downcast from EggGroupNode to EggGroup
51
EggGroup *EggGroupNode::downcast_to_EggGroup(void);

1348 23 upcast_to_EggRenderMode 0 12 1990 33 EggGroup::upcast_to_EggRenderMode 0 1 502 37
upcast from EggGroup to EggRenderMode
55
EggRenderMode *EggGroup::upcast_to_EggRenderMode(void);

1349 20 downcast_to_EggGroup 0 12 1979 35 EggRenderMode::downcast_to_EggGroup 0 1 503 39
downcast from EggRenderMode to EggGroup
52
EggGroup *EggRenderMode::downcast_to_EggGroup(void);

1350 22 upcast_to_EggTransform 0 12 1990 32 EggGroup::upcast_to_EggTransform 0 1 504 36
upcast from EggGroup to EggTransform
53
EggTransform *EggGroup::upcast_to_EggTransform(void);

1351 20 downcast_to_EggGroup 0 12 1984 34 EggTransform::downcast_to_EggGroup 0 1 505 38
downcast from EggTransform to EggGroup
51
EggGroup *EggTransform::downcast_to_EggGroup(void);

1352 8 EggGroup 0 4 1990 18 EggGroup::EggGroup 0 3 362 363 364 447
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
EggGroup::EggGroup(basic_string< char > const &name = (""));
EggGroup::EggGroup(EggGroup const &copy);

1353 10 operator = 0 4 1990 20 EggGroup::operator = 0 1 365 233
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
EggGroup &EggGroup::operator =(EggGroup const &copy);

1354 9 ~EggGroup 0 4 1990 19 EggGroup::~EggGroup 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual EggGroup::~EggGroup(void);

1355 5 write 0 4 1990 15 EggGroup::write 0 1 366 327
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
////////////////////////////////////////////////////////////////////
67
virtual void EggGroup::write(ostream &out, int indent_level) const;

1356 21 write_billboard_flags 0 4 1990 31 EggGroup::write_billboard_flags 0 1 367 326
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
75
void EggGroup::write_billboard_flags(ostream &out, int indent_level) const;

1357 19 write_collide_flags 0 4 1990 29 EggGroup::write_collide_flags 0 1 368 322
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
73
void EggGroup::write_collide_flags(ostream &out, int indent_level) const;

1358 17 write_model_flags 0 4 1990 27 EggGroup::write_model_flags 0 1 369 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_model_flags(ostream &out, int indent_level) const;

1359 18 write_switch_flags 0 4 1990 28 EggGroup::write_switch_flags 0 1 370 313
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_switch_flags(ostream &out, int indent_level) const;

1360 18 write_object_types 0 4 1990 28 EggGroup::write_object_types 0 1 371 317
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_object_types(ostream &out, int indent_level) const;

1361 17 write_decal_flags 0 4 1990 27 EggGroup::write_decal_flags 0 1 372 272
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_decal_flags(ostream &out, int indent_level) const;

1362 10 write_tags 0 4 1990 20 EggGroup::write_tags 0 1 373 301
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
64
void EggGroup::write_tags(ostream &out, int indent_level) const;

1363 17 write_render_mode 0 4 1990 27 EggGroup::write_render_mode 0 1 374 344
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_render_mode(ostream &out, int indent_level) const;

1364 8 is_joint 0 4 1990 18 EggGroup::is_joint 0 1 375 508
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
44
virtual bool EggGroup::is_joint(void) const;

1365 20 determine_alpha_mode 0 4 1990 30 EggGroup::determine_alpha_mode 0 1 376 554
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_alpha_mode(void);

1366 26 determine_depth_write_mode 0 4 1990 36 EggGroup::determine_depth_write_mode 0 1 377 566
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggGroup::determine_depth_write_mode(void);

1367 25 determine_depth_test_mode 0 4 1990 35 EggGroup::determine_depth_test_mode 0 1 378 564
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_depth_test_mode(void);

1368 25 determine_visibility_mode 0 4 1990 35 EggGroup::determine_visibility_mode 0 1 379 563
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_visibility_mode(void);

1369 22 determine_depth_offset 0 4 1990 32 EggGroup::determine_depth_offset 0 1 380 540
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
62
virtual EggRenderMode *EggGroup::determine_depth_offset(void);

1370 20 determine_draw_order 0 4 1990 30 EggGroup::determine_draw_order 0 1 381 536
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_draw_order(void);

1371 13 determine_bin 0 4 1990 23 EggGroup::determine_bin 0 1 382 523
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
53
virtual EggRenderMode *EggGroup::determine_bin(void);

1372 17 determine_indexed 0 4 1990 27 EggGroup::determine_indexed 0 1 383 619
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool EggGroup::determine_indexed(void);

1373 15 determine_decal 0 4 1990 25 EggGroup::determine_decal 0 1 384 607
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
45
virtual bool EggGroup::determine_decal(void);

1374 14 set_group_type 0 4 1990 24 EggGroup::set_group_type 0 1 385 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void EggGroup::set_group_type(EggGroup::GroupType type);

1375 14 get_group_type 0 4 1990 24 EggGroup::get_group_type 0 1 386 707
// Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::GroupType EggGroup::get_group_type(void) const;

1376 16 is_instance_type 0 4 1990 26 EggGroup::is_instance_type 0 1 387 668
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::is_instance_type(void) const;

1377 18 set_billboard_type 0 4 1990 28 EggGroup::set_billboard_type 0 1 388 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_billboard_type(EggGroup::BillboardType type);

1378 18 get_billboard_type 0 4 1990 28 EggGroup::get_billboard_type 0 1 389 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BillboardType EggGroup::get_billboard_type(void) const;

1379 20 set_billboard_center 0 4 1990 30 EggGroup::set_billboard_center 0 1 390 1120
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
////////////////////////////////////////////////////////////////////
77
inline void EggGroup::set_billboard_center(LPoint3d const &billboard_center);

1380 22 clear_billboard_center 0 4 1990 32 EggGroup::clear_billboard_center 0 1 391 231
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_billboard_center(void);

1381 20 has_billboard_center 0 4 1990 30 EggGroup::has_billboard_center 0 1 392 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_billboard_center(void) const;

1382 20 get_billboard_center 0 4 1990 30 EggGroup::get_billboard_center 0 1 393 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LPoint3d const &EggGroup::get_billboard_center(void) const;

1383 11 set_cs_type 0 4 1990 21 EggGroup::set_cs_type 0 1 394 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_cs_type(EggGroup::CollisionSolidType type);

1384 11 get_cs_type 0 4 1990 21 EggGroup::get_cs_type 0 1 395 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollisionSolidType EggGroup::get_cs_type(void) const;

1385 17 set_collide_flags 0 4 1990 27 EggGroup::set_collide_flags 0 1 396 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_collide_flags(int flags);

1386 17 get_collide_flags 0 4 1990 27 EggGroup::get_collide_flags 0 1 397 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollideFlags EggGroup::get_collide_flags(void) const;

1387 18 set_collision_name 0 4 1990 28 EggGroup::set_collision_name 0 1 398 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
inline void EggGroup::set_collision_name(basic_string< char > const &collision_name);

1388 20 clear_collision_name 0 4 1990 30 EggGroup::clear_collision_name 0 1 399 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::clear_collision_name(void);

1389 18 has_collision_name 0 4 1990 28 EggGroup::has_collision_name 0 1 400 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::has_collision_name(void) const;

1390 18 get_collision_name 0 4 1990 28 EggGroup::get_collision_name 0 1 401 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggGroup::get_collision_name(void) const;

1391 12 set_dcs_type 0 4 1990 22 EggGroup::set_dcs_type 0 1 402 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggGroup::set_dcs_type(EggGroup::DCSType type);

1392 12 get_dcs_type 0 4 1990 22 EggGroup::get_dcs_type 0 1 403 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggGroup::DCSType EggGroup::get_dcs_type(void) const;

1393 12 has_dcs_type 0 4 1990 22 EggGroup::has_dcs_type 0 1 404 316
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
////////////////////////////////////////////////////////////////////
47
inline bool EggGroup::has_dcs_type(void) const;

1394 13 set_dart_type 0 4 1990 23 EggGroup::set_dart_type 0 1 405 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_dart_type(EggGroup::DartType type);

1395 13 get_dart_type 0 4 1990 23 EggGroup::get_dart_type 0 1 406 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggGroup::DartType EggGroup::get_dart_type(void) const;

1396 15 set_switch_flag 0 4 1990 25 EggGroup::set_switch_flag 0 1 407 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_flag(bool flag);

1397 15 get_switch_flag 0 4 1990 25 EggGroup::get_switch_flag 0 1 408 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_switch_flag(void) const;

1398 14 set_switch_fps 0 4 1990 24 EggGroup::set_switch_fps 0 1 409 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_fps(double fps);

1399 14 get_switch_fps 0 4 1990 24 EggGroup::get_switch_fps 0 1 410 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double EggGroup::get_switch_fps(void) const;

1400 15 add_object_type 0 4 1990 25 EggGroup::add_object_type 0 1 411 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggGroup::add_object_type(basic_string< char > const &object_type);

1401 18 clear_object_types 0 4 1990 28 EggGroup::clear_object_types 0 1 412 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_object_types(void);

1402 20 get_num_object_types 0 4 1990 30 EggGroup::get_num_object_types 0 1 413 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline int EggGroup::get_num_object_types(void) const;

1403 15 get_object_type 0 4 1990 25 EggGroup::get_object_type 0 1 414 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > EggGroup::get_object_type(int index) const;

1404 15 has_object_type 0 4 1990 25 EggGroup::has_object_type 0 1 415 332
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
////////////////////////////////////////////////////////////////////
78
bool EggGroup::has_object_type(basic_string< char > const &object_type) const;

1405 18 remove_object_type 0 4 1990 28 EggGroup::remove_object_type 0 1 416 440
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
////////////////////////////////////////////////////////////////////
75
bool EggGroup::remove_object_type(basic_string< char > const &object_type);

1406 14 set_model_flag 0 4 1990 24 EggGroup::set_model_flag 0 1 417 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_model_flag(bool flag);

1407 14 get_model_flag 0 4 1990 24 EggGroup::get_model_flag 0 1 418 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_model_flag(void) const;

1408 16 set_texlist_flag 0 4 1990 26 EggGroup::set_texlist_flag 0 1 419 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_texlist_flag(bool flag);

1409 16 get_texlist_flag 0 4 1990 26 EggGroup::get_texlist_flag 0 1 420 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_texlist_flag(void) const;

1410 14 set_nofog_flag 0 4 1990 24 EggGroup::set_nofog_flag 0 1 421 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_nofog_flag(bool flag);

1411 14 get_nofog_flag 0 4 1990 24 EggGroup::get_nofog_flag 0 1 422 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_nofog_flag(void) const;

1412 14 set_decal_flag 0 4 1990 24 EggGroup::set_decal_flag 0 1 423 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_decal_flag(bool flag);

1413 14 get_decal_flag 0 4 1990 24 EggGroup::get_decal_flag 0 1 424 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_decal_flag(void) const;

1414 15 set_direct_flag 0 4 1990 25 EggGroup::set_direct_flag 0 1 425 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_direct_flag(bool flag);

1415 15 get_direct_flag 0 4 1990 25 EggGroup::get_direct_flag 0 1 426 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_direct_flag(void) const;

1416 15 set_portal_flag 0 4 1990 25 EggGroup::set_portal_flag 0 1 427 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_portal_flag(bool flag);

1417 15 get_portal_flag 0 4 1990 25 EggGroup::get_portal_flag 0 1 428 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_portal_flag(void) const;

1418 17 set_occluder_flag 0 4 1990 27 EggGroup::set_occluder_flag 0 1 429 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_occluder_flag(bool flag);

1419 17 get_occluder_flag 0 4 1990 27 EggGroup::get_occluder_flag 0 1 430 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool EggGroup::get_occluder_flag(void) const;

1420 18 set_polylight_flag 0 4 1990 28 EggGroup::set_polylight_flag 0 1 431 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::set_polylight_flag(bool flag);

1421 18 get_polylight_flag 0 4 1990 28 EggGroup::get_polylight_flag 0 1 432 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::get_polylight_flag(void) const;

1422 16 set_indexed_flag 0 4 1990 26 EggGroup::set_indexed_flag 0 1 433 335
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_indexed_flag(bool flag);

1423 18 clear_indexed_flag 0 4 1990 28 EggGroup::clear_indexed_flag 0 1 434 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_indexed_flag(void);

1424 16 has_indexed_flag 0 4 1990 26 EggGroup::has_indexed_flag 0 1 435 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_indexed_flag(void) const;

1425 16 get_indexed_flag 0 4 1990 26 EggGroup::get_indexed_flag 0 1 436 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_indexed_flag(void) const;

1426 16 set_collide_mask 0 4 1990 26 EggGroup::set_collide_mask 0 1 437 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggGroup::set_collide_mask(BitMask< unsigned int, 32 > mask);

1427 18 clear_collide_mask 0 4 1990 28 EggGroup::clear_collide_mask 0 1 438 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_collide_mask(void);

1428 16 has_collide_mask 0 4 1990 26 EggGroup::has_collide_mask 0 1 439 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_collide_mask(void) const;

1429 16 get_collide_mask 0 4 1990 26 EggGroup::get_collide_mask 0 1 440 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > EggGroup::get_collide_mask(void) const;

1430 21 set_from_collide_mask 0 4 1990 31 EggGroup::set_from_collide_mask 0 1 441 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_from_collide_mask(BitMask< unsigned int, 32 > mask);

1431 23 clear_from_collide_mask 0 4 1990 33 EggGroup::clear_from_collide_mask 0 1 442 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_from_collide_mask(void);

1432 21 has_from_collide_mask 0 4 1990 31 EggGroup::has_from_collide_mask 0 1 443 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_from_collide_mask(void) const;

1433 21 get_from_collide_mask 0 4 1990 31 EggGroup::get_from_collide_mask 0 1 444 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_from_collide_mask(void) const;

1434 21 set_into_collide_mask 0 4 1990 31 EggGroup::set_into_collide_mask 0 1 445 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

1435 23 clear_into_collide_mask 0 4 1990 33 EggGroup::clear_into_collide_mask 0 1 446 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_into_collide_mask(void);

1436 21 has_into_collide_mask 0 4 1990 31 EggGroup::has_into_collide_mask 0 1 447 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_into_collide_mask(void) const;

1437 21 get_into_collide_mask 0 4 1990 31 EggGroup::get_into_collide_mask 0 1 448 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_into_collide_mask(void) const;

1438 14 set_blend_mode 0 4 1990 24 EggGroup::set_blend_mode 0 1 449 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_mode(EggGroup::BlendMode blend_mode);

1439 14 get_blend_mode 0 4 1990 24 EggGroup::get_blend_mode 0 1 450 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::BlendMode EggGroup::get_blend_mode(void) const;

1440 19 set_blend_operand_a 0 4 1990 29 EggGroup::set_blend_operand_a 0 1 451 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_a(EggGroup::BlendOperand blend_operand_a);

1441 19 get_blend_operand_a 0 4 1990 29 EggGroup::get_blend_operand_a 0 1 452 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_a(void) const;

1442 19 set_blend_operand_b 0 4 1990 29 EggGroup::set_blend_operand_b 0 1 453 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_b(EggGroup::BlendOperand blend_operand_b);

1443 19 get_blend_operand_b 0 4 1990 29 EggGroup::get_blend_operand_b 0 1 454 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_b(void) const;

1444 15 set_blend_color 0 4 1990 25 EggGroup::set_blend_color 0 1 455 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_color(LVecBase4f const &blend_color);

1445 17 clear_blend_color 0 4 1990 27 EggGroup::clear_blend_color 0 1 456 265
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
////////////////////////////////////////////////////////////////////
46
inline void EggGroup::clear_blend_color(void);

1446 15 has_blend_color 0 4 1990 25 EggGroup::has_blend_color 0 1 457 310
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::has_blend_color(void) const;

1447 15 get_blend_color 0 4 1990 25 EggGroup::get_blend_color 0 1 458 324
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
////////////////////////////////////////////////////////////////////
63
inline LVecBase4f const &EggGroup::get_blend_color(void) const;

1448 7 set_lod 0 4 1990 17 EggGroup::set_lod 0 1 459 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_lod(EggSwitchCondition const &lod);

1449 9 clear_lod 0 4 1990 19 EggGroup::clear_lod 0 1 460 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline void EggGroup::clear_lod(void);

1450 7 has_lod 0 4 1990 17 EggGroup::has_lod 0 1 461 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool EggGroup::has_lod(void) const;

1451 7 get_lod 0 4 1990 17 EggGroup::get_lod 0 1 462 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline EggSwitchCondition const &EggGroup::get_lod(void) const;

1452 7 set_tag 0 4 1990 17 EggGroup::set_tag 0 1 463 878
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void EggGroup::set_tag(basic_string< char > const &key, basic_string< char > const &value);

1453 7 get_tag 0 4 1990 17 EggGroup::get_tag 0 1 464 433
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > EggGroup::get_tag(basic_string< char > const &key) const;

1454 7 has_tag 0 4 1990 17 EggGroup::has_tag 0 1 465 404
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
69
inline bool EggGroup::has_tag(basic_string< char > const &key) const;

1455 9 clear_tag 0 4 1990 19 EggGroup::clear_tag 0 1 466 397
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::clear_tag(basic_string< char > const &key);

1456 16 get_default_pose 0 4 1990 26 EggGroup::get_default_pose 0 1 467 603
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
66
inline EggTransform const &EggGroup::get_default_pose(void) const;

1457 19 modify_default_pose 0 4 1990 29 EggGroup::modify_default_pose 0 1 468 605
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
57
inline EggTransform &EggGroup::modify_default_pose(void);

1458 16 set_default_pose 0 4 1990 26 EggGroup::set_default_pose 0 1 469 580
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
////////////////////////////////////////////////////////////////////
70
inline void EggGroup::set_default_pose(EggTransform const &transform);

1459 18 clear_default_pose 0 4 1990 28 EggGroup::clear_default_pose 0 1 470 305
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_default_pose(void);

1460 12 set_scroll_u 0 4 1990 22 EggGroup::set_scroll_u 0 1 471 0
57
inline void EggGroup::set_scroll_u(double const u_speed);

1461 12 set_scroll_v 0 4 1990 22 EggGroup::set_scroll_v 0 1 472 0
57
inline void EggGroup::set_scroll_v(double const v_speed);

1462 12 set_scroll_r 0 4 1990 22 EggGroup::set_scroll_r 0 1 473 0
57
inline void EggGroup::set_scroll_r(double const r_speed);

1463 12 get_scroll_u 0 4 1990 22 EggGroup::get_scroll_u 0 1 474 0
49
inline double EggGroup::get_scroll_u(void) const;

1464 12 get_scroll_v 0 4 1990 22 EggGroup::get_scroll_v 0 1 475 0
49
inline double EggGroup::get_scroll_v(void) const;

1465 12 get_scroll_r 0 4 1990 22 EggGroup::get_scroll_r 0 1 476 0
49
inline double EggGroup::get_scroll_r(void) const;

1466 17 has_scrolling_uvs 0 4 1990 27 EggGroup::has_scrolling_uvs 0 1 477 0
46
inline bool EggGroup::has_scrolling_uvs(void);

1467 10 ref_vertex 0 4 1990 20 EggGroup::ref_vertex 0 2 478 479 467
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
////////////////////////////////////////////////////////////////////
68
void EggGroup::ref_vertex(EggVertex *vert, double membership = (1));

1468 12 unref_vertex 0 4 1990 22 EggGroup::unref_vertex 0 1 480 372
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
////////////////////////////////////////////////////////////////////
45
void EggGroup::unref_vertex(EggVertex *vert);

1469 18 unref_all_vertices 0 4 1990 28 EggGroup::unref_all_vertices 0 1 481 273
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
////////////////////////////////////////////////////////////////////
40
void EggGroup::unref_all_vertices(void);

1470 21 get_vertex_membership 0 4 1990 31 EggGroup::get_vertex_membership 0 1 482 390
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
////////////////////////////////////////////////////////////////////
68
double EggGroup::get_vertex_membership(EggVertex const *vert) const;

1471 21 set_vertex_membership 0 4 1990 31 EggGroup::set_vertex_membership 0 1 483 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
////////////////////////////////////////////////////////////////////
73
void EggGroup::set_vertex_membership(EggVertex *vert, double membership);

1472 11 steal_vrefs 0 4 1990 21 EggGroup::steal_vrefs 0 1 484 450
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
////////////////////////////////////////////////////////////////////
44
void EggGroup::steal_vrefs(EggGroup *other);

1473 19 test_vref_integrity 0 4 1990 29 EggGroup::test_vref_integrity 0 1 485 0
47
void EggGroup::test_vref_integrity(void) const;

1474 13 add_group_ref 0 4 1990 23 EggGroup::add_group_ref 0 1 486 475
// _DEBUG

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
////////////////////////////////////////////////////////////////////
46
void EggGroup::add_group_ref(EggGroup *group);

1475 18 get_num_group_refs 0 4 1990 28 EggGroup::get_num_group_refs 0 1 487 321
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
////////////////////////////////////////////////////////////////////
45
int EggGroup::get_num_group_refs(void) const;

1476 13 get_group_ref 0 4 1990 23 EggGroup::get_group_ref 0 1 488 308
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
47
EggGroup *EggGroup::get_group_ref(int n) const;

1477 16 remove_group_ref 0 4 1990 26 EggGroup::remove_group_ref 0 1 489 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
39
void EggGroup::remove_group_ref(int n);

1478 16 clear_group_refs 0 4 1990 26 EggGroup::clear_group_refs 0 1 490 315
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
////////////////////////////////////////////////////////////////////
38
void EggGroup::clear_group_refs(void);

1479 17 string_group_type 0 4 1990 27 EggGroup::string_group_type 0 1 491 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
////////////////////////////////////////////////////////////////////
91
static EggGroup::GroupType EggGroup::string_group_type(basic_string< char > const &strval);

1480 16 string_dart_type 0 4 1990 26 EggGroup::string_dart_type 0 1 492 409
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
////////////////////////////////////////////////////////////////////
89
static EggGroup::DartType EggGroup::string_dart_type(basic_string< char > const &strval);

1481 15 string_dcs_type 0 4 1990 25 EggGroup::string_dcs_type 0 1 493 413
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
////////////////////////////////////////////////////////////////////
87
static EggGroup::DCSType EggGroup::string_dcs_type(basic_string< char > const &strval);

1482 21 string_billboard_type 0 4 1990 31 EggGroup::string_billboard_type 0 1 494 424
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
////////////////////////////////////////////////////////////////////
99
static EggGroup::BillboardType EggGroup::string_billboard_type(basic_string< char > const &strval);

1483 14 string_cs_type 0 4 1990 24 EggGroup::string_cs_type 0 1 495 428
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollisionSolidType EggGroup::string_cs_type(basic_string< char > const &strval);

1484 20 string_collide_flags 0 4 1990 30 EggGroup::string_collide_flags 0 1 496 546
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollideFlags EggGroup::string_collide_flags(basic_string< char > const &strval);

1485 17 string_blend_mode 0 4 1990 27 EggGroup::string_blend_mode 0 1 497 406
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
////////////////////////////////////////////////////////////////////
91
static EggGroup::BlendMode EggGroup::string_blend_mode(basic_string< char > const &strval);

1486 20 string_blend_operand 0 4 1990 30 EggGroup::string_blend_operand 0 1 498 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
////////////////////////////////////////////////////////////////////
97
static EggGroup::BlendOperand EggGroup::string_blend_operand(basic_string< char > const &strval);

1487 14 get_class_type 0 4 1990 24 EggGroup::get_class_type 0 1 499 0
49
static TypeHandle EggGroup::get_class_type(void);

1488 6 EggBin 0 4 1999 14 EggBin::EggBin 0 4 506 507 508 509 668
////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
EggBin::EggBin(basic_string< char > const &name = (""));
EggBin::EggBin(EggGroup const &copy);
EggBin::EggBin(EggBin const &copy);

1489 14 set_bin_number 0 4 1999 22 EggBin::set_bin_number 0 1 510 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void EggBin::set_bin_number(int bin_number);

1490 14 get_bin_number 0 4 1999 22 EggBin::get_bin_number 0 1 511 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
int EggBin::get_bin_number(void) const;

1491 14 get_class_type 0 4 1999 22 EggBin::get_class_type 0 1 512 0
47
static TypeHandle EggBin::get_class_type(void);

1492 7 ~EggBin 0 4 1999 15 EggBin::~EggBin 0 0 0
22
EggBin::~EggBin(void);

1493 9 make_bins 0 4 2000 22 EggBinMaker::make_bins 0 1 513 460
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
////////////////////////////////////////////////////////////////////
53
int EggBinMaker::make_bins(EggGroupNode *root_group);

1494 12 prepare_node 0 4 2000 25 EggBinMaker::prepare_node 0 1 514 419
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
////////////////////////////////////////////////////////////////////
54
virtual void EggBinMaker::prepare_node(EggNode *node);

1495 14 get_bin_number 0 4 2000 27 EggBinMaker::get_bin_number 0 1 515 0
65
virtual int EggBinMaker::get_bin_number(EggNode const *node) = 0;

1496 10 sorts_less 0 4 2000 23 EggBinMaker::sorts_less 0 1 516 669
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
////////////////////////////////////////////////////////////////////
89
virtual bool EggBinMaker::sorts_less(int bin_number, EggNode const *a, EggNode const *b);

1497 14 collapse_group 0 4 2000 27 EggBinMaker::collapse_group 0 1 517 398
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
////////////////////////////////////////////////////////////////////
80
virtual bool EggBinMaker::collapse_group(EggGroup const *group, int bin_number);

1498 12 get_bin_name 0 4 2000 25 EggBinMaker::get_bin_name 0 1 518 381
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
////////////////////////////////////////////////////////////////////
93
virtual basic_string< char > EggBinMaker::get_bin_name(int bin_number, EggNode const *child);

1499 8 make_bin 0 4 2000 21 EggBinMaker::make_bin 0 1 519 655
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
////////////////////////////////////////////////////////////////////
113
virtual PointerTo< EggBin > EggBinMaker::make_bin(int bin_number, EggNode const *child, EggGroup *collapse_from);

1500 14 get_class_type 0 4 2000 27 EggBinMaker::get_class_type 0 1 520 0
52
static TypeHandle EggBinMaker::get_class_type(void);

1501 10 EggComment 0 4 2001 22 EggComment::EggComment 0 2 521 522 931
// Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
161
inline EggComment::EggComment(basic_string< char > const &node_name, basic_string< char > const &comment);
inline EggComment::EggComment(EggComment const &copy);

1502 10 operator = 0 4 2001 22 EggComment::operator = 0 2 523 524 545
// You can use the string operators to directly set and manipulate
// the comment.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggComment &EggComment::operator =(basic_string< char > const &comment);
inline EggComment &EggComment::operator =(EggComment const &copy);

1503 17 operator typecast 0 132 2001 29 EggComment::operator typecast 0 1 528 232
////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &EggComment::operator typecast(void) const;

1504 11 set_comment 0 4 2001 23 EggComment::set_comment 0 1 525 262
// Or, you can set and get it explicitly.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggComment::set_comment(basic_string< char > const &comment);

1505 11 get_comment 0 4 2001 23 EggComment::get_comment 0 1 526 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > EggComment::get_comment(void) const;

1506 14 get_class_type 0 4 2001 26 EggComment::get_class_type 0 1 527 0
51
static TypeHandle EggComment::get_class_type(void);

1507 11 ~EggComment 0 4 2001 23 EggComment::~EggComment 0 0 0
30
EggComment::~EggComment(void);

1508 10 operator = 0 4 2002 27 EggFilenameNode::operator = 0 1 529 237
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggFilenameNode &EggFilenameNode::operator =(EggFilenameNode const &copy);

1509 21 get_default_extension 0 4 2002 38 EggFilenameNode::get_default_extension 0 1 530 297
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
////////////////////////////////////////////////////////////////////
80
virtual basic_string< char > EggFilenameNode::get_default_extension(void) const;

1510 12 get_filename 0 4 2002 29 EggFilenameNode::get_filename 0 1 531 276
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_filename(void) const;

1511 12 set_filename 0 4 2002 29 EggFilenameNode::set_filename 0 1 532 225
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_filename(Filename const &filename);

1512 12 get_fullpath 0 4 2002 29 EggFilenameNode::get_fullpath 0 1 533 822
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_fullpath(void) const;

1513 12 set_fullpath 0 4 2002 29 EggFilenameNode::set_fullpath 0 1 534 316
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_fullpath(Filename const &fullpath);

1514 14 get_class_type 0 4 2002 31 EggFilenameNode::get_class_type 0 1 535 0
56
static TypeHandle EggFilenameNode::get_class_type(void);

1515 16 ~EggFilenameNode 0 4 2002 33 EggFilenameNode::~EggFilenameNode 0 0 0
40
EggFilenameNode::~EggFilenameNode(void);

1516 25 upcast_to_EggFilenameNode 0 12 2003 37 EggTexture::upcast_to_EggFilenameNode 0 1 644 41
upcast from EggTexture to EggFilenameNode
61
EggFilenameNode *EggTexture::upcast_to_EggFilenameNode(void);

1517 22 downcast_to_EggTexture 0 12 2002 39 EggFilenameNode::downcast_to_EggTexture 0 1 645 43
downcast from EggFilenameNode to EggTexture
58
EggTexture *EggFilenameNode::downcast_to_EggTexture(void);

1518 23 upcast_to_EggRenderMode 0 12 2003 35 EggTexture::upcast_to_EggRenderMode 0 1 646 39
upcast from EggTexture to EggRenderMode
57
EggRenderMode *EggTexture::upcast_to_EggRenderMode(void);

1519 22 downcast_to_EggTexture 0 12 1979 37 EggRenderMode::downcast_to_EggTexture 0 1 647 41
downcast from EggRenderMode to EggTexture
56
EggTexture *EggRenderMode::downcast_to_EggTexture(void);

1520 22 upcast_to_EggTransform 0 12 2003 34 EggTexture::upcast_to_EggTransform 0 1 648 38
upcast from EggTexture to EggTransform
55
EggTransform *EggTexture::upcast_to_EggTransform(void);

1521 22 downcast_to_EggTexture 0 12 1984 36 EggTransform::downcast_to_EggTexture 0 1 649 40
downcast from EggTransform to EggTexture
55
EggTexture *EggTransform::downcast_to_EggTexture(void);

1522 10 EggTexture 0 4 2003 22 EggTexture::EggTexture 0 2 536 537 451
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
EggTexture::EggTexture(basic_string< char > const &tref_name, Filename const &filename);
EggTexture::EggTexture(EggTexture const &copy);

1523 10 operator = 0 4 2003 22 EggTexture::operator = 0 1 538 235
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
EggTexture &EggTexture::operator =(EggTexture const &copy);

1524 11 ~EggTexture 0 4 2003 23 EggTexture::~EggTexture 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual EggTexture::~EggTexture(void);

1525 5 write 0 4 2003 17 EggTexture::write 0 1 539 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
////////////////////////////////////////////////////////////////////
69
virtual void EggTexture::write(ostream &out, int indent_level) const;

1526 16 is_equivalent_to 0 4 2003 28 EggTexture::is_equivalent_to 0 1 540 1471
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
////////////////////////////////////////////////////////////////////
73
bool EggTexture::is_equivalent_to(EggTexture const &other, int eq) const;

1527 15 sorts_less_than 0 4 2003 27 EggTexture::sorts_less_than 0 1 541 502
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
72
bool EggTexture::sorts_less_than(EggTexture const &other, int eq) const;

1528 17 has_alpha_channel 0 4 2003 29 EggTexture::has_alpha_channel 0 1 542 537
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
////////////////////////////////////////////////////////////////////
61
bool EggTexture::has_alpha_channel(int num_components) const;

1529 16 set_texture_type 0 4 2003 28 EggTexture::set_texture_type 0 1 543 713
// Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_texture_type(EggTexture::TextureType texture_type);

1530 16 get_texture_type 0 4 2003 28 EggTexture::get_texture_type 0 1 544 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggTexture::TextureType EggTexture::get_texture_type(void) const;

1531 10 set_format 0 4 2003 22 EggTexture::set_format 0 1 545 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_format(EggTexture::Format format);

1532 10 get_format 0 4 2003 22 EggTexture::get_format 0 1 546 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline EggTexture::Format EggTexture::get_format(void) const;

1533 20 set_compression_mode 0 4 2003 32 EggTexture::set_compression_mode 0 1 547 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_compression_mode(EggTexture::CompressionMode mode);

1534 20 get_compression_mode 0 4 2003 32 EggTexture::get_compression_mode 0 1 548 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline EggTexture::CompressionMode EggTexture::get_compression_mode(void) const;

1535 13 set_wrap_mode 0 4 2003 25 EggTexture::set_wrap_mode 0 1 549 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_wrap_mode(EggTexture::WrapMode mode);

1536 13 get_wrap_mode 0 4 2003 25 EggTexture::get_wrap_mode 0 1 550 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggTexture::WrapMode EggTexture::get_wrap_mode(void) const;

1537 10 set_wrap_u 0 4 2003 22 EggTexture::set_wrap_u 0 1 551 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_u(EggTexture::WrapMode mode);

1538 10 get_wrap_u 0 4 2003 22 EggTexture::get_wrap_u 0 1 552 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_u(void) const;

1539 16 determine_wrap_u 0 4 2003 28 EggTexture::determine_wrap_u 0 1 553 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_u(void) const;

1540 10 set_wrap_v 0 4 2003 22 EggTexture::set_wrap_v 0 1 554 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_v(EggTexture::WrapMode mode);

1541 10 get_wrap_v 0 4 2003 22 EggTexture::get_wrap_v 0 1 555 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_v(void) const;

1542 16 determine_wrap_v 0 4 2003 28 EggTexture::determine_wrap_v 0 1 556 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_v(void) const;

1543 10 set_wrap_w 0 4 2003 22 EggTexture::set_wrap_w 0 1 557 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_w(EggTexture::WrapMode mode);

1544 10 get_wrap_w 0 4 2003 22 EggTexture::get_wrap_w 0 1 558 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_w(void) const;

1545 16 determine_wrap_w 0 4 2003 28 EggTexture::determine_wrap_w 0 1 559 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_w(void) const;

1546 13 set_minfilter 0 4 2003 25 EggTexture::set_minfilter 0 1 560 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_minfilter(EggTexture::FilterType type);

1547 13 get_minfilter 0 4 2003 25 EggTexture::get_minfilter 0 1 561 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_minfilter(void) const;

1548 13 set_magfilter 0 4 2003 25 EggTexture::set_magfilter 0 1 562 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_magfilter(EggTexture::FilterType type);

1549 13 get_magfilter 0 4 2003 25 EggTexture::get_magfilter 0 1 563 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_magfilter(void) const;

1550 22 set_anisotropic_degree 0 4 2003 34 EggTexture::set_anisotropic_degree 0 1 564 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_anisotropic_degree(int anisotropic_degree);

1551 24 clear_anisotropic_degree 0 4 2003 36 EggTexture::clear_anisotropic_degree 0 1 565 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_anisotropic_degree(void);

1552 22 has_anisotropic_degree 0 4 2003 34 EggTexture::has_anisotropic_degree 0 1 566 382
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_anisotropic_degree(void) const;

1553 22 get_anisotropic_degree 0 4 2003 34 EggTexture::get_anisotropic_degree 0 1 567 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_anisotropic_degree(void) const;

1554 12 set_env_type 0 4 2003 24 EggTexture::set_env_type 0 1 568 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTexture::set_env_type(EggTexture::EnvType type);

1555 12 get_env_type 0 4 2003 24 EggTexture::get_env_type 0 1 569 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTexture::EnvType EggTexture::get_env_type(void) const;

1556 21 affects_polygon_alpha 0 4 2003 33 EggTexture::affects_polygon_alpha 0 1 570 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool EggTexture::affects_polygon_alpha(void) const;

1557 16 set_combine_mode 0 4 2003 28 EggTexture::set_combine_mode 0 1 571 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
105
inline void EggTexture::set_combine_mode(EggTexture::CombineChannel channel, EggTexture::CombineMode cm);

1558 16 get_combine_mode 0 4 2003 28 EggTexture::get_combine_mode 0 1 572 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
inline EggTexture::CombineMode EggTexture::get_combine_mode(EggTexture::CombineChannel channel) const;

1559 18 set_combine_source 0 4 2003 30 EggTexture::set_combine_source 0 1 573 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline void EggTexture::set_combine_source(EggTexture::CombineChannel channel, int n, EggTexture::CombineSource cs);

1560 18 get_combine_source 0 4 2003 30 EggTexture::get_combine_source 0 1 574 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
113
inline EggTexture::CombineSource EggTexture::get_combine_source(EggTexture::CombineChannel channel, int n) const;

1561 19 set_combine_operand 0 4 2003 31 EggTexture::set_combine_operand 0 1 575 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline void EggTexture::set_combine_operand(EggTexture::CombineChannel channel, int n, EggTexture::CombineOperand co);

1562 19 get_combine_operand 0 4 2003 31 EggTexture::get_combine_operand 0 1 576 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
115
inline EggTexture::CombineOperand EggTexture::get_combine_operand(EggTexture::CombineChannel channel, int n) const;

1563 16 set_saved_result 0 4 2003 28 EggTexture::set_saved_result 0 1 577 1011
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_saved_result(bool saved_result);

1564 16 get_saved_result 0 4 2003 28 EggTexture::get_saved_result 0 1 578 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_saved_result(void) const;

1565 11 set_tex_gen 0 4 2003 23 EggTexture::set_tex_gen 0 1 579 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggTexture::set_tex_gen(EggTexture::TexGen tex_gen);

1566 11 get_tex_gen 0 4 2003 23 EggTexture::get_tex_gen 0 1 580 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggTexture::TexGen EggTexture::get_tex_gen(void) const;

1567 17 set_quality_level 0 4 2003 29 EggTexture::set_quality_level 0 1 581 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggTexture::set_quality_level(EggTexture::QualityLevel quality_level);

1568 17 get_quality_level 0 4 2003 29 EggTexture::get_quality_level 0 1 582 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline EggTexture::QualityLevel EggTexture::get_quality_level(void) const;

1569 14 set_stage_name 0 4 2003 26 EggTexture::set_stage_name 0 1 583 778
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_stage_name(basic_string< char > const &stage_name);

1570 16 clear_stage_name 0 4 2003 28 EggTexture::clear_stage_name 0 1 584 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
////////////////////////////////////////////////////////////////////
47
inline void EggTexture::clear_stage_name(void);

1571 14 has_stage_name 0 4 2003 26 EggTexture::has_stage_name 0 1 585 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggTexture::has_stage_name(void) const;

1572 14 get_stage_name 0 4 2003 26 EggTexture::get_stage_name 0 1 586 392
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &EggTexture::get_stage_name(void) const;

1573 12 set_priority 0 4 2003 24 EggTexture::set_priority 0 1 587 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::set_priority(int priority);

1574 14 clear_priority 0 4 2003 26 EggTexture::clear_priority 0 1 588 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_priority(void);

1575 12 has_priority 0 4 2003 24 EggTexture::has_priority 0 1 589 371
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_priority(void) const;

1576 12 get_priority 0 4 2003 24 EggTexture::get_priority 0 1 590 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
////////////////////////////////////////////////////////////////////
48
inline int EggTexture::get_priority(void) const;

1577 9 set_color 0 4 2003 21 EggTexture::set_color 0 1 591 220
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggTexture::set_color(LVecBase4f const &color);

1578 11 clear_color 0 4 2003 23 EggTexture::clear_color 0 1 592 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggTexture::clear_color(void);

1579 9 has_color 0 4 2003 21 EggTexture::has_color 0 1 593 303
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
46
inline bool EggTexture::has_color(void) const;

1580 9 get_color 0 4 2003 21 EggTexture::get_color 0 1 594 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &EggTexture::get_color(void) const;

1581 16 set_border_color 0 4 2003 28 EggTexture::set_border_color 0 1 595 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_border_color(LVecBase4f const &border_color);

1582 18 clear_border_color 0 4 2003 30 EggTexture::clear_border_color 0 1 596 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggTexture::clear_border_color(void);

1583 16 has_border_color 0 4 2003 28 EggTexture::has_border_color 0 1 597 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::has_border_color(void) const;

1584 16 get_border_color 0 4 2003 28 EggTexture::get_border_color 0 1 598 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f const &EggTexture::get_border_color(void) const;

1585 11 set_uv_name 0 4 2003 23 EggTexture::set_uv_name 0 1 599 593
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_uv_name(basic_string< char > const &uv_name);

1586 13 clear_uv_name 0 4 2003 25 EggTexture::clear_uv_name 0 1 600 398
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_uv_name(void);

1587 11 has_uv_name 0 4 2003 23 EggTexture::has_uv_name 0 1 601 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_uv_name(void) const;

1588 11 get_uv_name 0 4 2003 23 EggTexture::get_uv_name 0 1 602 395
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > const &EggTexture::get_uv_name(void) const;

1589 13 set_rgb_scale 0 4 2003 25 EggTexture::set_rgb_scale 0 1 603 493
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_rgb_scale(int rgb_scale);

1590 15 clear_rgb_scale 0 4 2003 27 EggTexture::clear_rgb_scale 0 1 604 325
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_rgb_scale(void);

1591 13 has_rgb_scale 0 4 2003 25 EggTexture::has_rgb_scale 0 1 605 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_rgb_scale(void) const;

1592 13 get_rgb_scale 0 4 2003 25 EggTexture::get_rgb_scale 0 1 606 374
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_rgb_scale(void) const;

1593 15 set_alpha_scale 0 4 2003 27 EggTexture::set_alpha_scale 0 1 607 468
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
57
inline void EggTexture::set_alpha_scale(int alpha_scale);

1594 17 clear_alpha_scale 0 4 2003 29 EggTexture::clear_alpha_scale 0 1 608 329
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
48
inline void EggTexture::clear_alpha_scale(void);

1595 15 has_alpha_scale 0 4 2003 27 EggTexture::has_alpha_scale 0 1 609 327
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggTexture::has_alpha_scale(void) const;

1596 15 get_alpha_scale 0 4 2003 27 EggTexture::get_alpha_scale 0 1 610 380
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
////////////////////////////////////////////////////////////////////
51
inline int EggTexture::get_alpha_scale(void) const;

1597 18 set_alpha_filename 0 4 2003 30 EggTexture::set_alpha_filename 0 1 611 516
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_filename(Filename const &filename);

1598 20 clear_alpha_filename 0 4 2003 32 EggTexture::clear_alpha_filename 0 1 612 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::clear_alpha_filename(void);

1599 18 has_alpha_filename 0 4 2003 30 EggTexture::has_alpha_filename 0 1 613 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
////////////////////////////////////////////////////////////////////
55
inline bool EggTexture::has_alpha_filename(void) const;

1600 18 get_alpha_filename 0 4 2003 30 EggTexture::get_alpha_filename 0 1 614 419
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_filename(void) const;

1601 18 set_alpha_fullpath 0 4 2003 30 EggTexture::set_alpha_fullpath 0 1 615 326
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_fullpath(Filename const &fullpath);

1602 18 get_alpha_fullpath 0 4 2003 30 EggTexture::get_alpha_fullpath 0 1 616 817
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_fullpath(void) const;

1603 22 set_alpha_file_channel 0 4 2003 34 EggTexture::set_alpha_file_channel 0 1 617 742
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_alpha_file_channel(int alpha_file_channel);

1604 24 clear_alpha_file_channel 0 4 2003 36 EggTexture::clear_alpha_file_channel 0 1 618 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_alpha_file_channel(void);

1605 22 has_alpha_file_channel 0 4 2003 34 EggTexture::has_alpha_file_channel 0 1 619 349
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_alpha_file_channel(void) const;

1606 22 get_alpha_file_channel 0 4 2003 34 EggTexture::get_alpha_file_channel 0 1 620 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_alpha_file_channel(void) const;

1607 13 set_multiview 0 4 2003 25 EggTexture::set_multiview 0 1 621 698
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
////////////////////////////////////////////////////////////////////
54
inline void EggTexture::set_multiview(bool multiview);

1608 13 get_multiview 0 4 2003 25 EggTexture::get_multiview 0 1 622 313
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::get_multiview(void) const;

1609 13 set_num_views 0 4 2003 25 EggTexture::set_num_views 0 1 623 456
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_num_views(int num_views);

1610 15 clear_num_views 0 4 2003 27 EggTexture::clear_num_views 0 1 624 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_num_views(void);

1611 13 has_num_views 0 4 2003 25 EggTexture::has_num_views 0 1 625 361
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_num_views(void) const;

1612 13 get_num_views 0 4 2003 25 EggTexture::get_num_views 0 1 626 342
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_num_views(void) const;

1613 16 set_read_mipmaps 0 4 2003 28 EggTexture::set_read_mipmaps 0 1 627 912
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_read_mipmaps(bool read_mipmaps);

1614 16 get_read_mipmaps 0 4 2003 28 EggTexture::get_read_mipmaps 0 1 628 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_read_mipmaps(void) const;

1615 18 clear_multitexture 0 4 2003 30 EggTexture::clear_multitexture 0 1 629 437
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
////////////////////////////////////////////////////////////////////
42
void EggTexture::clear_multitexture(void);

1616 17 multitexture_over 0 4 2003 29 EggTexture::multitexture_over 0 1 630 771
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
////////////////////////////////////////////////////////////////////
54
bool EggTexture::multitexture_over(EggTexture *other);

1617 21 get_multitexture_sort 0 4 2003 33 EggTexture::get_multitexture_sort 0 1 631 628
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
////////////////////////////////////////////////////////////////////
57
inline int EggTexture::get_multitexture_sort(void) const;

1618 19 string_texture_type 0 4 2003 31 EggTexture::string_texture_type 0 1 632 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::TextureType EggTexture::string_texture_type(basic_string< char > const &string);

1619 13 string_format 0 4 2003 25 EggTexture::string_format 0 1 633 410
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
////////////////////////////////////////////////////////////////////
88
static EggTexture::Format EggTexture::string_format(basic_string< char > const &string);

1620 23 string_compression_mode 0 4 2003 35 EggTexture::string_compression_mode 0 1 634 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
////////////////////////////////////////////////////////////////////
107
static EggTexture::CompressionMode EggTexture::string_compression_mode(basic_string< char > const &string);

1621 16 string_wrap_mode 0 4 2003 28 EggTexture::string_wrap_mode 0 1 635 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
93
static EggTexture::WrapMode EggTexture::string_wrap_mode(basic_string< char > const &string);

1622 18 string_filter_type 0 4 2003 30 EggTexture::string_filter_type 0 1 636 424
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
97
static EggTexture::FilterType EggTexture::string_filter_type(basic_string< char > const &string);

1623 15 string_env_type 0 4 2003 27 EggTexture::string_env_type 0 1 637 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
////////////////////////////////////////////////////////////////////
91
static EggTexture::EnvType EggTexture::string_env_type(basic_string< char > const &string);

1624 19 string_combine_mode 0 4 2003 31 EggTexture::string_combine_mode 0 1 638 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::CombineMode EggTexture::string_combine_mode(basic_string< char > const &string);

1625 21 string_combine_source 0 4 2003 33 EggTexture::string_combine_source 0 1 639 433
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
////////////////////////////////////////////////////////////////////
103
static EggTexture::CombineSource EggTexture::string_combine_source(basic_string< char > const &string);

1626 22 string_combine_operand 0 4 2003 34 EggTexture::string_combine_operand 0 1 640 436
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
////////////////////////////////////////////////////////////////////
105
static EggTexture::CombineOperand EggTexture::string_combine_operand(basic_string< char > const &string);

1627 14 string_tex_gen 0 4 2003 26 EggTexture::string_tex_gen 0 1 641 412
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
89
static EggTexture::TexGen EggTexture::string_tex_gen(basic_string< char > const &string);

1628 20 string_quality_level 0 4 2003 32 EggTexture::string_quality_level 0 1 642 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
101
static EggTexture::QualityLevel EggTexture::string_quality_level(basic_string< char > const &string);

1629 14 get_class_type 0 4 2003 26 EggTexture::get_class_type 0 1 643 0
51
static TypeHandle EggTexture::get_class_type(void);

1630 11 EggMaterial 0 4 2018 24 EggMaterial::EggMaterial 0 2 650 651 447
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
115
EggMaterial::EggMaterial(basic_string< char > const &mref_name);
EggMaterial::EggMaterial(EggMaterial const &copy);

1631 16 is_equivalent_to 0 4 2018 29 EggMaterial::is_equivalent_to 0 1 652 784
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
////////////////////////////////////////////////////////////////////
75
bool EggMaterial::is_equivalent_to(EggMaterial const &other, int eq) const;

1632 15 sorts_less_than 0 4 2018 28 EggMaterial::sorts_less_than 0 1 653 502
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
74
bool EggMaterial::sorts_less_than(EggMaterial const &other, int eq) const;

1633 8 set_diff 0 4 2018 21 EggMaterial::set_diff 0 1 654 704
// Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_diff(LVecBase4f const &diff);

1634 10 clear_diff 0 4 2018 23 EggMaterial::clear_diff 0 1 655 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_diff(void);

1635 8 has_diff 0 4 2018 21 EggMaterial::has_diff 0 1 656 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_diff(void) const;

1636 8 get_diff 0 4 2018 21 EggMaterial::get_diff 0 1 657 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_diff(void) const;

1637 7 set_amb 0 4 2018 20 EggMaterial::set_amb 0 1 658 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggMaterial::set_amb(LVecBase4f const &amb);

1638 9 clear_amb 0 4 2018 22 EggMaterial::clear_amb 0 1 659 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggMaterial::clear_amb(void);

1639 7 has_amb 0 4 2018 20 EggMaterial::has_amb 0 1 660 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggMaterial::has_amb(void) const;

1640 7 get_amb 0 4 2018 20 EggMaterial::get_amb 0 1 661 357
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
////////////////////////////////////////////////////////////////////
51
inline LVecBase4f EggMaterial::get_amb(void) const;

1641 8 set_emit 0 4 2018 21 EggMaterial::set_emit 0 1 662 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_emit(LVecBase4f const &emit);

1642 10 clear_emit 0 4 2018 23 EggMaterial::clear_emit 0 1 663 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_emit(void);

1643 8 has_emit 0 4 2018 21 EggMaterial::has_emit 0 1 664 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_emit(void) const;

1644 8 get_emit 0 4 2018 21 EggMaterial::get_emit 0 1 665 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_emit(void) const;

1645 8 set_spec 0 4 2018 21 EggMaterial::set_spec 0 1 666 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_spec(LVecBase4f const &spec);

1646 10 clear_spec 0 4 2018 23 EggMaterial::clear_spec 0 1 667 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_spec(void);

1647 8 has_spec 0 4 2018 21 EggMaterial::has_spec 0 1 668 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_spec(void) const;

1648 8 get_spec 0 4 2018 21 EggMaterial::get_spec 0 1 669 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_spec(void) const;

1649 13 set_shininess 0 4 2018 26 EggMaterial::set_shininess 0 1 670 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggMaterial::set_shininess(double shininess);

1650 15 clear_shininess 0 4 2018 28 EggMaterial::clear_shininess 0 1 671 224
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::clear_shininess(void);

1651 13 has_shininess 0 4 2018 26 EggMaterial::has_shininess 0 1 672 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggMaterial::has_shininess(void) const;

1652 13 get_shininess 0 4 2018 26 EggMaterial::get_shininess 0 1 673 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline double EggMaterial::get_shininess(void) const;

1653 9 set_local 0 4 2018 22 EggMaterial::set_local 0 1 674 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::set_local(bool local);

1654 11 clear_local 0 4 2018 24 EggMaterial::clear_local 0 1 675 220
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggMaterial::clear_local(void);

1655 9 has_local 0 4 2018 22 EggMaterial::has_local 0 1 676 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::has_local(void) const;

1656 9 get_local 0 4 2018 22 EggMaterial::get_local 0 1 677 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::get_local(void) const;

1657 14 get_class_type 0 4 2018 27 EggMaterial::get_class_type 0 1 678 0
52
static TypeHandle EggMaterial::get_class_type(void);

1658 12 ~EggMaterial 0 4 2018 25 EggMaterial::~EggMaterial 0 0 0
32
EggMaterial::~EggMaterial(void);

1659 17 upcast_to_EggNode 0 12 2020 31 EggPrimitive::upcast_to_EggNode 0 1 731 35
upcast from EggPrimitive to EggNode
47
EggNode *EggPrimitive::upcast_to_EggNode(void);

1660 24 downcast_to_EggPrimitive 0 12 1966 33 EggNode::downcast_to_EggPrimitive 0 1 732 37
downcast from EggNode to EggPrimitive
54
EggPrimitive *EggNode::downcast_to_EggPrimitive(void);

1661 23 upcast_to_EggAttributes 0 12 2020 37 EggPrimitive::upcast_to_EggAttributes 0 1 733 41
upcast from EggPrimitive to EggAttributes
59
EggAttributes *EggPrimitive::upcast_to_EggAttributes(void);

1662 24 downcast_to_EggPrimitive 0 12 1969 39 EggAttributes::downcast_to_EggPrimitive 0 1 734 43
downcast from EggAttributes to EggPrimitive
60
EggPrimitive *EggAttributes::downcast_to_EggPrimitive(void);

1663 23 upcast_to_EggRenderMode 0 12 2020 37 EggPrimitive::upcast_to_EggRenderMode 0 1 735 41
upcast from EggPrimitive to EggRenderMode
59
EggRenderMode *EggPrimitive::upcast_to_EggRenderMode(void);

1664 24 downcast_to_EggPrimitive 0 12 1979 39 EggRenderMode::downcast_to_EggPrimitive 0 1 736 43
downcast from EggRenderMode to EggPrimitive
60
EggPrimitive *EggRenderMode::downcast_to_EggPrimitive(void);

1665 10 operator = 0 4 2020 24 EggPrimitive::operator = 0 1 679 237
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggPrimitive &EggPrimitive::operator =(EggPrimitive const &copy);

1666 13 ~EggPrimitive 0 4 2020 27 EggPrimitive::~EggPrimitive 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
virtual inline EggPrimitive::~EggPrimitive(void);

1667 20 determine_alpha_mode 0 4 2020 34 EggPrimitive::determine_alpha_mode 0 1 680 562
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_alpha_mode(void);

1668 26 determine_depth_write_mode 0 4 2020 40 EggPrimitive::determine_depth_write_mode 0 1 681 569
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
virtual EggRenderMode *EggPrimitive::determine_depth_write_mode(void);

1669 25 determine_depth_test_mode 0 4 2020 39 EggPrimitive::determine_depth_test_mode 0 1 682 567
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_depth_test_mode(void);

1670 25 determine_visibility_mode 0 4 2020 39 EggPrimitive::determine_visibility_mode 0 1 683 566
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_visibility_mode(void);

1671 22 determine_depth_offset 0 4 2020 36 EggPrimitive::determine_depth_offset 0 1 684 548
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggPrimitive::determine_depth_offset(void);

1672 20 determine_draw_order 0 4 2020 34 EggPrimitive::determine_draw_order 0 1 685 544
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_draw_order(void);

1673 13 determine_bin 0 4 2020 27 EggPrimitive::determine_bin 0 1 686 531
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
57
virtual EggRenderMode *EggPrimitive::determine_bin(void);

1674 13 get_sort_name 0 4 2020 27 EggPrimitive::get_sort_name 0 1 687 498
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > EggPrimitive::get_sort_name(void) const;

1675 11 get_shading 0 4 2020 25 EggPrimitive::get_shading 0 1 688 1114
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
////////////////////////////////////////////////////////////////////
68
virtual EggPrimitive::Shading EggPrimitive::get_shading(void) const;

1676 23 clear_connected_shading 0 4 2020 37 EggPrimitive::clear_connected_shading 0 1 689 385
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
////////////////////////////////////////////////////////////////////
56
inline void EggPrimitive::clear_connected_shading(void);

1677 21 get_connected_shading 0 4 2020 35 EggPrimitive::get_connected_shading 0 1 690 852
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
////////////////////////////////////////////////////////////////////
77
inline EggPrimitive::Shading EggPrimitive::get_connected_shading(void) const;

1678 11 set_texture 0 4 2020 25 EggPrimitive::set_texture 0 1 691 494
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::set_texture(EggTexture *texture);

1679 11 has_texture 0 4 2020 25 EggPrimitive::has_texture 0 2 692 693 843
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
////////////////////////////////////////////////////////////////////
116
inline bool EggPrimitive::has_texture(void) const;
inline bool EggPrimitive::has_texture(EggTexture *texture) const;

1680 11 get_texture 0 4 2020 25 EggPrimitive::get_texture 0 2 694 695 850
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
116
inline EggTexture *EggPrimitive::get_texture(void) const;
inline EggTexture *EggPrimitive::get_texture(int n) const;

1681 11 add_texture 0 4 2020 25 EggPrimitive::add_texture 0 1 696 549
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::add_texture(EggTexture *texture);

1682 13 clear_texture 0 4 2020 27 EggPrimitive::clear_texture 0 1 697 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
////////////////////////////////////////////////////////////////////
46
inline void EggPrimitive::clear_texture(void);

1683 16 get_num_textures 0 4 2020 30 EggPrimitive::get_num_textures 0 1 698 303
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_textures(void) const;

1684 12 set_material 0 4 2020 26 EggPrimitive::set_material 0 1 699 274
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
////////////////////////////////////////////////////////////////////
62
inline void EggPrimitive::set_material(EggMaterial *material);

1685 14 clear_material 0 4 2020 28 EggPrimitive::clear_material 0 1 700 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
////////////////////////////////////////////////////////////////////
47
inline void EggPrimitive::clear_material(void);

1686 12 get_material 0 4 2020 26 EggPrimitive::get_material 0 1 701 326
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
////////////////////////////////////////////////////////////////////
59
inline EggMaterial *EggPrimitive::get_material(void) const;

1687 12 has_material 0 4 2020 26 EggPrimitive::has_material 0 1 702 406
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
////////////////////////////////////////////////////////////////////
51
inline bool EggPrimitive::has_material(void) const;

1688 14 set_bface_flag 0 4 2020 28 EggPrimitive::set_bface_flag 0 1 703 466
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
////////////////////////////////////////////////////////////////////
52
inline void EggPrimitive::set_bface_flag(bool flag);

1689 14 get_bface_flag 0 4 2020 28 EggPrimitive::get_bface_flag 0 1 704 313
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
////////////////////////////////////////////////////////////////////
53
inline bool EggPrimitive::get_bface_flag(void) const;

1690 15 copy_attributes 0 4 2020 29 EggPrimitive::copy_attributes 0 2 705 706 616
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////
126
void EggPrimitive::copy_attributes(EggAttributes const &other);
void EggPrimitive::copy_attributes(EggPrimitive const &other);

1691 17 has_vertex_normal 0 4 2020 31 EggPrimitive::has_vertex_normal 0 1 707 588
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
49
bool EggPrimitive::has_vertex_normal(void) const;

1692 16 has_vertex_color 0 4 2020 30 EggPrimitive::has_vertex_color 0 1 708 586
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
48
bool EggPrimitive::has_vertex_color(void) const;

1693 16 unify_attributes 0 4 2020 30 EggPrimitive::unify_attributes 0 1 709 1216
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
////////////////////////////////////////////////////////////////////
75
virtual void EggPrimitive::unify_attributes(EggPrimitive::Shading shading);

1694 20 apply_last_attribute 0 4 2020 34 EggPrimitive::apply_last_attribute 0 1 710 689
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
54
virtual void EggPrimitive::apply_last_attribute(void);

1695 21 apply_first_attribute 0 4 2020 35 EggPrimitive::apply_first_attribute 0 1 711 693
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
55
virtual void EggPrimitive::apply_first_attribute(void);

1696 25 post_apply_flat_attribute 0 4 2020 39 EggPrimitive::post_apply_flat_attribute 0 1 712 499
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
virtual void EggPrimitive::post_apply_flat_attribute(void);

1697 23 reverse_vertex_ordering 0 4 2020 37 EggPrimitive::reverse_vertex_ordering 0 1 713 481
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
////////////////////////////////////////////////////////////////////
57
virtual void EggPrimitive::reverse_vertex_ordering(void);

1698 7 cleanup 0 4 2020 21 EggPrimitive::cleanup 0 1 714 550
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
////////////////////////////////////////////////////////////////////
41
virtual bool EggPrimitive::cleanup(void);

1699 20 remove_doubled_verts 0 4 2020 34 EggPrimitive::remove_doubled_verts 0 1 715 945
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
////////////////////////////////////////////////////////////////////
53
void EggPrimitive::remove_doubled_verts(bool closed);

1700 22 remove_nonunique_verts 0 4 2020 36 EggPrimitive::remove_nonunique_verts 0 1 716 541
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
////////////////////////////////////////////////////////////////////
48
void EggPrimitive::remove_nonunique_verts(void);

1701 14 has_primitives 0 4 2020 28 EggPrimitive::has_primitives 0 1 717 380
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggPrimitive::has_primitives(void) const;

1702 20 joint_has_primitives 0 4 2020 34 EggPrimitive::joint_has_primitives 0 1 718 416
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggPrimitive::joint_has_primitives(void) const;

1703 11 has_normals 0 4 2020 25 EggPrimitive::has_normals 0 1 719 417
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggPrimitive::has_normals(void) const;

1704 5 clear 0 4 2020 19 EggPrimitive::clear 0 1 720 266
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
////////////////////////////////////////////////////////////////////
38
inline void EggPrimitive::clear(void);

1705 10 add_vertex 0 4 2020 24 EggPrimitive::add_vertex 0 1 721 330
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
////////////////////////////////////////////////////////////////////
55
EggVertex *EggPrimitive::add_vertex(EggVertex *vertex);

1706 13 remove_vertex 0 4 2020 27 EggPrimitive::remove_vertex 0 1 722 421
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
////////////////////////////////////////////////////////////////////
58
EggVertex *EggPrimitive::remove_vertex(EggVertex *vertex);

1707 13 copy_vertices 0 4 2020 27 EggPrimitive::copy_vertices 0 1 723 370
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
////////////////////////////////////////////////////////////////////
60
void EggPrimitive::copy_vertices(EggPrimitive const &other);

1708 16 get_num_vertices 0 4 2020 30 EggPrimitive::get_num_vertices 0 1 724 295
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_vertices(void) const;

1709 10 set_vertex 0 4 2020 24 EggPrimitive::set_vertex 0 1 725 510
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
////////////////////////////////////////////////////////////////////
67
inline void EggPrimitive::set_vertex(int index, EggVertex *vertex);

1710 10 get_vertex 0 4 2020 24 EggPrimitive::get_vertex 0 1 726 277
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
////////////////////////////////////////////////////////////////////
60
inline EggVertex *EggPrimitive::get_vertex(int index) const;

1711 8 get_pool 0 4 2020 22 EggPrimitive::get_pool 0 1 727 368
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
////////////////////////////////////////////////////////////////////
57
inline EggVertexPool *EggPrimitive::get_pool(void) const;

1712 5 write 0 4 2020 19 EggPrimitive::write 0 1 728 0
75
virtual void EggPrimitive::write(ostream &out, int indent_level) const = 0;

1713 19 test_vref_integrity 0 4 2020 33 EggPrimitive::test_vref_integrity 0 1 729 0
51
void EggPrimitive::test_vref_integrity(void) const;

1714 14 get_class_type 0 4 2020 28 EggPrimitive::get_class_type 0 1 730 0
53
static TypeHandle EggPrimitive::get_class_type(void);

1715 10 operator = 0 4 2022 33 EggCompositePrimitive::operator = 0 1 737 246
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
99
inline EggCompositePrimitive &EggCompositePrimitive::operator =(EggCompositePrimitive const &copy);

1716 18 get_num_components 0 4 2022 41 EggCompositePrimitive::get_num_components 0 1 738 410
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
////////////////////////////////////////////////////////////////////
65
inline int EggCompositePrimitive::get_num_components(void) const;

1717 13 get_component 0 4 2022 36 EggCompositePrimitive::get_component 0 2 739 740 616
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
145
inline EggAttributes const *EggCompositePrimitive::get_component(int i) const;
inline EggAttributes *EggCompositePrimitive::get_component(int i);

1718 13 set_component 0 4 2022 36 EggCompositePrimitive::set_component 0 1 741 307
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
85
inline void EggCompositePrimitive::set_component(int i, EggAttributes const *attrib);

1719 16 triangulate_into 0 4 2022 39 EggCompositePrimitive::triangulate_into 0 1 742 678
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
////////////////////////////////////////////////////////////////////
83
inline bool EggCompositePrimitive::triangulate_into(EggGroupNode *container) const;

1720 20 triangulate_in_place 0 4 2022 43 EggCompositePrimitive::triangulate_in_place 0 1 743 830
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
85
PointerTo< EggCompositePrimitive > EggCompositePrimitive::triangulate_in_place(void);

1721 14 get_class_type 0 4 2022 37 EggCompositePrimitive::get_class_type 0 1 744 0
62
static TypeHandle EggCompositePrimitive::get_class_type(void);

1722 7 EggData 0 4 2023 16 EggData::EggData 0 2 745 746 922
// Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline EggData::EggData(void);
inline EggData::EggData(EggData const &copy);

1723 10 operator = 0 4 2023 19 EggData::operator = 0 1 747 229
////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggData &EggData::operator =(EggData const &copy);

1724 20 resolve_egg_filename 0 4 2023 29 EggData::resolve_egg_filename 0 2 748 749 479
////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
////////////////////////////////////////////////////////////////////
106
static bool EggData::resolve_egg_filename(Filename &egg_filename, DSearchPath const &searchpath = ((())));

1725 4 read 0 4 2023 13 EggData::read 0 3 750 751 752 1348
////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
////////////////////////////////////////////////////////////////////
121
bool EggData::read(Filename filename, basic_string< char > display_name = ((string())));
bool EggData::read(istream &in);

1726 5 merge 0 4 2023 14 EggData::merge 0 1 753 324
////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
////////////////////////////////////////////////////////////////////
36
void EggData::merge(EggData &other);

1727 14 load_externals 0 4 2023 23 EggData::load_externals 0 3 754 755 756 1314
////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
154
bool EggData::load_externals(DSearchPath const &searchpath = ((())));
bool EggData::load_externals(DSearchPath const &searchpath, BamCacheRecord *record);

1728 28 collapse_equivalent_textures 0 4 2023 37 EggData::collapse_equivalent_textures 0 1 757 608
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
////////////////////////////////////////////////////////////////////
48
int EggData::collapse_equivalent_textures(void);

1729 29 collapse_equivalent_materials 0 4 2023 38 EggData::collapse_equivalent_materials 0 1 758 607
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
////////////////////////////////////////////////////////////////////
49
int EggData::collapse_equivalent_materials(void);

1730 9 write_egg 0 4 2023 18 EggData::write_egg 0 2 759 760 532
////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////
82
bool EggData::write_egg(Filename filename);
bool EggData::write_egg(ostream &out);

1731 26 set_auto_resolve_externals 0 4 2023 35 EggData::set_auto_resolve_externals 0 1 761 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
62
inline void EggData::set_auto_resolve_externals(bool resolve);

1732 26 get_auto_resolve_externals 0 4 2023 35 EggData::get_auto_resolve_externals 0 1 762 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
60
inline bool EggData::get_auto_resolve_externals(void) const;

1733 31 original_had_absolute_pathnames 0 4 2023 40 EggData::original_had_absolute_pathnames 0 1 763 741
////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
////////////////////////////////////////////////////////////////////
65
inline bool EggData::original_had_absolute_pathnames(void) const;

1734 21 set_coordinate_system 0 4 2023 30 EggData::set_coordinate_system 0 1 764 403
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void EggData::set_coordinate_system(CoordinateSystem coordsys);

1735 21 get_coordinate_system 0 4 2023 30 EggData::get_coordinate_system 0 1 765 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggData::get_coordinate_system(void) const;

1736 16 set_egg_filename 0 4 2023 25 EggData::set_egg_filename 0 1 766 392
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
////////////////////////////////////////////////////////////////////
68
inline void EggData::set_egg_filename(Filename const &egg_filename);

1737 16 get_egg_filename 0 4 2023 25 EggData::get_egg_filename 0 1 767 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &EggData::get_egg_filename(void) const;

1738 24 recompute_vertex_normals 0 4 2023 33 EggData::recompute_vertex_normals 0 1 768 1124
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
64
inline void EggData::recompute_vertex_normals(double threshold);

1739 25 recompute_polygon_normals 0 4 2023 34 EggData::recompute_polygon_normals 0 1 769 1069
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
53
inline void EggData::recompute_polygon_normals(void);

1740 13 strip_normals 0 4 2023 22 EggData::strip_normals 0 1 770 598
////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
41
inline void EggData::strip_normals(void);

1741 14 get_class_type 0 4 2023 23 EggData::get_class_type 0 1 771 0
48
static TypeHandle EggData::get_class_type(void);

1742 8 ~EggData 0 4 2023 17 EggData::~EggData 0 0 0
24
EggData::~EggData(void);

1743 19 EggCoordinateSystem 0 4 2024 40 EggCoordinateSystem::EggCoordinateSystem 0 3 772 773 774 958
// Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
169
inline EggCoordinateSystem::EggCoordinateSystem(CoordinateSystem value = (CS_default));
inline EggCoordinateSystem::EggCoordinateSystem(EggCoordinateSystem const &copy);

1744 9 set_value 0 4 2024 30 EggCoordinateSystem::set_value 0 1 775 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggCoordinateSystem::set_value(CoordinateSystem value);

1745 9 get_value 0 4 2024 30 EggCoordinateSystem::get_value 0 1 776 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggCoordinateSystem::get_value(void) const;

1746 14 get_class_type 0 4 2024 35 EggCoordinateSystem::get_class_type 0 1 777 0
60
static TypeHandle EggCoordinateSystem::get_class_type(void);

1747 20 ~EggCoordinateSystem 0 4 2024 41 EggCoordinateSystem::~EggCoordinateSystem 0 0 0
48
EggCoordinateSystem::~EggCoordinateSystem(void);

1748 10 operator = 0 4 2025 20 EggCurve::operator = 0 1 778 230
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggCurve &EggCurve::operator =(EggCurve const &copy);

1749 10 set_subdiv 0 4 2025 20 EggCurve::set_subdiv 0 1 779 559
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
////////////////////////////////////////////////////////////////////
45
inline void EggCurve::set_subdiv(int subdiv);

1750 10 get_subdiv 0 4 2025 20 EggCurve::get_subdiv 0 1 780 335
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
////////////////////////////////////////////////////////////////////
44
inline int EggCurve::get_subdiv(void) const;

1751 14 set_curve_type 0 4 2025 24 EggCurve::set_curve_type 0 1 781 367
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
////////////////////////////////////////////////////////////////////
63
inline void EggCurve::set_curve_type(EggCurve::CurveType type);

1752 14 get_curve_type 0 4 2025 24 EggCurve::get_curve_type 0 1 782 261
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
////////////////////////////////////////////////////////////////////
64
inline EggCurve::CurveType EggCurve::get_curve_type(void) const;

1753 17 string_curve_type 0 4 2025 27 EggCurve::string_curve_type 0 1 783 412
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
////////////////////////////////////////////////////////////////////
91
static EggCurve::CurveType EggCurve::string_curve_type(basic_string< char > const &string);

1754 14 get_class_type 0 4 2025 24 EggCurve::get_class_type 0 1 784 0
49
static TypeHandle EggCurve::get_class_type(void);

1755 9 ~EggCurve 0 4 2025 19 EggCurve::~EggCurve 0 0 0
26
EggCurve::~EggCurve(void);

1756 20 EggExternalReference 0 4 2027 42 EggExternalReference::EggExternalReference 0 2 785 786 465
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
EggExternalReference::EggExternalReference(basic_string< char > const &node_name, basic_string< char > const &filename);
EggExternalReference::EggExternalReference(EggExternalReference const &copy);

1757 10 operator = 0 4 2027 32 EggExternalReference::operator = 0 1 787 242
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggExternalReference &EggExternalReference::operator =(EggExternalReference const &copy);

1758 14 get_class_type 0 4 2027 36 EggExternalReference::get_class_type 0 1 788 0
61
static TypeHandle EggExternalReference::get_class_type(void);

1759 21 ~EggExternalReference 0 4 2027 43 EggExternalReference::~EggExternalReference 0 0 0
50
EggExternalReference::~EggExternalReference(void);

1760 5 clear 0 4 2028 24 EggNameUniquifier::clear 0 1 789 313
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
////////////////////////////////////////////////////////////////////
36
void EggNameUniquifier::clear(void);

1761 8 uniquify 0 4 2028 27 EggNameUniquifier::uniquify 0 1 790 269
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////
48
void EggNameUniquifier::uniquify(EggNode *node);

1762 8 get_node 0 4 2028 27 EggNameUniquifier::get_node 0 1 791 341
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
////////////////////////////////////////////////////////////////////
115
EggNode *EggNameUniquifier::get_node(basic_string< char > const &category, basic_string< char > const &name) const;

1763 8 has_name 0 4 2028 27 EggNameUniquifier::has_name 0 1 792 332
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
////////////////////////////////////////////////////////////////////
111
bool EggNameUniquifier::has_name(basic_string< char > const &category, basic_string< char > const &name) const;

1764 8 add_name 0 4 2028 27 EggNameUniquifier::add_name 0 2 793 794 477
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
////////////////////////////////////////////////////////////////////
136
bool EggNameUniquifier::add_name(basic_string< char > const &category, basic_string< char > const &name, EggNode *node = ((void *)(0)));

1765 12 get_category 0 4 2028 31 EggNameUniquifier::get_category 0 1 795 0
80
virtual basic_string< char > EggNameUniquifier::get_category(EggNode *node) = 0;

1766 11 filter_name 0 4 2028 30 EggNameUniquifier::filter_name 0 1 796 487
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
////////////////////////////////////////////////////////////////////
75
virtual basic_string< char > EggNameUniquifier::filter_name(EggNode *node);

1767 13 generate_name 0 4 2028 32 EggNameUniquifier::generate_name 0 1 797 682
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
////////////////////////////////////////////////////////////////////
126
virtual basic_string< char > EggNameUniquifier::generate_name(EggNode *node, basic_string< char > const &category, int index);

1768 14 get_class_type 0 4 2028 33 EggNameUniquifier::get_class_type 0 1 798 0
58
static TypeHandle EggNameUniquifier::get_class_type(void);

1769 18 EggGroupUniquifier 0 4 2029 38 EggGroupUniquifier::EggGroupUniquifier 0 2 799 800 530
////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
////////////////////////////////////////////////////////////////////
64
EggGroupUniquifier::EggGroupUniquifier(bool filter_names = (1));

1770 14 get_class_type 0 4 2029 34 EggGroupUniquifier::get_class_type 0 1 801 0
59
static TypeHandle EggGroupUniquifier::get_class_type(void);

1771 19 ~EggGroupUniquifier 0 4 2029 39 EggGroupUniquifier::~EggGroupUniquifier 0 0 0
46
EggGroupUniquifier::~EggGroupUniquifier(void);

1772 7 EggLine 0 4 2030 16 EggLine::EggLine 0 3 802 803 804 922
// Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
111
inline EggLine::EggLine(basic_string< char > const &name = (""));
inline EggLine::EggLine(EggLine const &copy);

1773 10 operator = 0 4 2030 19 EggLine::operator = 0 1 805 229
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggLine &EggLine::operator =(EggLine const &copy);

1774 9 has_thick 0 4 2030 18 EggLine::has_thick 0 1 806 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool EggLine::has_thick(void) const;

1775 9 get_thick 0 4 2030 18 EggLine::get_thick 0 1 807 328
////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
45
inline double EggLine::get_thick(void) const;

1776 9 set_thick 0 4 2030 18 EggLine::set_thick 0 1 808 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggLine::set_thick(double thick);

1777 11 clear_thick 0 4 2030 20 EggLine::clear_thick 0 1 809 219
////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline void EggLine::clear_thick(void);

1778 14 get_class_type 0 4 2030 23 EggLine::get_class_type 0 1 810 0
48
static TypeHandle EggLine::get_class_type(void);

1779 21 EggMaterialCollection 0 4 2031 44 EggMaterialCollection::EggMaterialCollection 0 2 811 812 467
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
EggMaterialCollection::EggMaterialCollection(void);
EggMaterialCollection::EggMaterialCollection(EggMaterialCollection const &copy);

1780 10 operator = 0 4 2031 33 EggMaterialCollection::operator = 0 1 813 243
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
EggMaterialCollection &EggMaterialCollection::operator =(EggMaterialCollection const &copy);

1781 22 ~EggMaterialCollection 0 4 2031 45 EggMaterialCollection::~EggMaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
EggMaterialCollection::~EggMaterialCollection(void);

1782 5 clear 0 4 2031 28 EggMaterialCollection::clear 0 1 814 267
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
////////////////////////////////////////////////////////////////////
40
void EggMaterialCollection::clear(void);

1783 17 extract_materials 0 4 2031 40 EggMaterialCollection::extract_materials 0 1 815 483
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
////////////////////////////////////////////////////////////////////
65
int EggMaterialCollection::extract_materials(EggGroupNode *node);

1784 19 find_used_materials 0 4 2031 42 EggMaterialCollection::find_used_materials 0 1 816 1402
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
////////////////////////////////////////////////////////////////////
62
int EggMaterialCollection::find_used_materials(EggNode *node);

1785 23 remove_unused_materials 0 4 2031 46 EggMaterialCollection::remove_unused_materials 0 1 817 574
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
67
void EggMaterialCollection::remove_unused_materials(EggNode *node);

1786 29 collapse_equivalent_materials 0 4 2031 52 EggMaterialCollection::collapse_equivalent_materials 0 2 818 819 1793
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
219
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggGroupNode *node);
int EggMaterialCollection::collapse_equivalent_materials(int eq, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > &removed);

1787 17 replace_materials 0 4 2031 40 EggMaterialCollection::replace_materials 0 1 820 606
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
147
static void EggMaterialCollection::replace_materials(EggGroupNode *node, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const &replace);

1788 14 uniquify_mrefs 0 4 2031 37 EggMaterialCollection::uniquify_mrefs 0 1 821 386
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
49
void EggMaterialCollection::uniquify_mrefs(void);

1789 12 sort_by_mref 0 4 2031 35 EggMaterialCollection::sort_by_mref 0 1 822 406
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
47
void EggMaterialCollection::sort_by_mref(void);

1790 12 add_material 0 4 2031 35 EggMaterialCollection::add_material 0 1 823 413
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
64
bool EggMaterialCollection::add_material(EggMaterial *material);

1791 15 remove_material 0 4 2031 38 EggMaterialCollection::remove_material 0 1 824 414
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
67
bool EggMaterialCollection::remove_material(EggMaterial *material);

1792 22 create_unique_material 0 4 2031 45 EggMaterialCollection::create_unique_material 0 1 825 700
// create_unique_material() creates a new material if there is not
// already one equivalent (according to eq, see
// EggMaterial::is_equivalent_to()) to the indicated material, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
92
EggMaterial *EggMaterialCollection::create_unique_material(EggMaterial const &copy, int eq);

1793 9 find_mref 0 4 2031 32 EggMaterialCollection::find_mref 0 1 826 377
// Find a material with a particular MRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
////////////////////////////////////////////////////////////////////
91
EggMaterial *EggMaterialCollection::find_mref(basic_string< char > const &mref_name) const;

1794 10 EggPolygon 0 4 2032 22 EggPolygon::EggPolygon 0 3 827 828 829 937
// Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline EggPolygon::EggPolygon(basic_string< char > const &name = (""));
inline EggPolygon::EggPolygon(EggPolygon const &copy);

1795 10 operator = 0 4 2032 22 EggPolygon::operator = 0 1 830 235
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggPolygon &EggPolygon::operator =(EggPolygon const &copy);

1796 16 calculate_normal 0 4 2032 28 EggPolygon::calculate_normal 0 2 831 832 678
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
////////////////////////////////////////////////////////////////////
95
bool EggPolygon::calculate_normal(LVector3d &result, CoordinateSystem cs = (CS_default)) const;

1797 9 is_planar 0 4 2032 21 EggPolygon::is_planar 0 1 833 327
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool EggPolygon::is_planar(void) const;

1798 24 recompute_polygon_normal 0 4 2032 36 EggPolygon::recompute_polygon_normal 0 2 834 835 480
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
////////////////////////////////////////////////////////////////////
85
inline bool EggPolygon::recompute_polygon_normal(CoordinateSystem cs = (CS_default));

1799 16 triangulate_into 0 4 2032 28 EggPolygon::triangulate_into 0 1 836 1053
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
90
inline bool EggPolygon::triangulate_into(EggGroupNode *container, bool convex_also) const;

1800 20 triangulate_in_place 0 4 2032 32 EggPolygon::triangulate_in_place 0 1 837 786
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
75
PointerTo< EggPolygon > EggPolygon::triangulate_in_place(bool convex_also);

1801 14 get_class_type 0 4 2032 26 EggPolygon::get_class_type 0 1 838 0
51
static TypeHandle EggPolygon::get_class_type(void);

1802 11 ~EggPolygon 0 4 2032 23 EggPolygon::~EggPolygon 0 0 0
30
EggPolygon::~EggPolygon(void);

1803 13 EggNurbsCurve 0 4 2033 28 EggNurbsCurve::EggNurbsCurve 0 3 839 840 841 940
// Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline EggNurbsCurve::EggNurbsCurve(basic_string< char > const &name = (""));
inline EggNurbsCurve::EggNurbsCurve(EggNurbsCurve const &copy);

1804 10 operator = 0 4 2033 25 EggNurbsCurve::operator = 0 1 842 235
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggNurbsCurve &EggNurbsCurve::operator =(EggNurbsCurve const &copy);

1805 5 setup 0 4 2033 20 EggNurbsCurve::setup 0 1 843 588
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
////////////////////////////////////////////////////////////////////
52
void EggNurbsCurve::setup(int order, int num_knots);

1806 9 set_order 0 4 2033 24 EggNurbsCurve::set_order 0 1 844 542
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
////////////////////////////////////////////////////////////////////
48
inline void EggNurbsCurve::set_order(int order);

1807 13 set_num_knots 0 4 2033 28 EggNurbsCurve::set_num_knots 0 1 845 665
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
////////////////////////////////////////////////////////////////////
43
void EggNurbsCurve::set_num_knots(int num);

1808 8 set_knot 0 4 2033 23 EggNurbsCurve::set_knot 0 1 846 452
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
////////////////////////////////////////////////////////////////////
57
inline void EggNurbsCurve::set_knot(int k, double value);

1809 8 is_valid 0 4 2033 23 EggNurbsCurve::is_valid 0 1 847 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggNurbsCurve::is_valid(void) const;

1810 9 get_order 0 4 2033 24 EggNurbsCurve::get_order 0 1 848 470
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
////////////////////////////////////////////////////////////////////
48
inline int EggNurbsCurve::get_order(void) const;

1811 10 get_degree 0 4 2033 25 EggNurbsCurve::get_degree 0 1 849 310
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
49
inline int EggNurbsCurve::get_degree(void) const;

1812 13 get_num_knots 0 4 2033 28 EggNurbsCurve::get_num_knots 0 1 850 253
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsCurve::get_num_knots(void) const;

1813 11 get_num_cvs 0 4 2033 26 EggNurbsCurve::get_num_cvs 0 1 851 669
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
////////////////////////////////////////////////////////////////////
50
inline int EggNurbsCurve::get_num_cvs(void) const;

1814 9 is_closed 0 4 2033 24 EggNurbsCurve::is_closed 0 1 852 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
////////////////////////////////////////////////////////////////////
42
bool EggNurbsCurve::is_closed(void) const;

1815 8 get_knot 0 4 2033 23 EggNurbsCurve::get_knot 0 1 853 255
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
////////////////////////////////////////////////////////////////////
51
inline double EggNurbsCurve::get_knot(int k) const;

1816 14 get_class_type 0 4 2033 29 EggNurbsCurve::get_class_type 0 1 854 0
54
static TypeHandle EggNurbsCurve::get_class_type(void);

1817 14 ~EggNurbsCurve 0 4 2033 29 EggNurbsCurve::~EggNurbsCurve 0 0 0
36
EggNurbsCurve::~EggNurbsCurve(void);

1818 10 operator = 0 4 2034 22 EggSurface::operator = 0 1 855 232
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggSurface &EggSurface::operator =(EggSurface const &copy);

1819 12 set_u_subdiv 0 4 2034 24 EggSurface::set_u_subdiv 0 1 856 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_u_subdiv(int subdiv);

1820 12 get_u_subdiv 0 4 2034 24 EggSurface::get_u_subdiv 0 1 857 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_u_subdiv(void) const;

1821 12 set_v_subdiv 0 4 2034 24 EggSurface::set_v_subdiv 0 1 858 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_v_subdiv(int subdiv);

1822 12 get_v_subdiv 0 4 2034 24 EggSurface::get_v_subdiv 0 1 859 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_v_subdiv(void) const;

1823 14 get_class_type 0 4 2034 26 EggSurface::get_class_type 0 1 860 0
51
static TypeHandle EggSurface::get_class_type(void);

1824 11 ~EggSurface 0 4 2034 23 EggSurface::~EggSurface 0 0 0
30
EggSurface::~EggSurface(void);

1825 15 EggNurbsSurface 0 4 2035 32 EggNurbsSurface::EggNurbsSurface 0 3 861 862 863 946
// Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
151
inline EggNurbsSurface::EggNurbsSurface(basic_string< char > const &name = (""));
inline EggNurbsSurface::EggNurbsSurface(EggNurbsSurface const &copy);

1826 10 operator = 0 4 2035 27 EggNurbsSurface::operator = 0 1 864 237
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggNurbsSurface &EggNurbsSurface::operator =(EggNurbsSurface const &copy);

1827 5 setup 0 4 2035 22 EggNurbsSurface::setup 0 1 865 647
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
////////////////////////////////////////////////////////////////////
88
void EggNurbsSurface::setup(int u_order, int v_order, int num_u_knots, int num_v_knots);

1828 11 set_u_order 0 4 2035 28 EggNurbsSurface::set_u_order 0 1 866 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_u_order(int u_order);

1829 11 set_v_order 0 4 2035 28 EggNurbsSurface::set_v_order 0 1 867 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_v_order(int v_order);

1830 15 set_num_u_knots 0 4 2035 32 EggNurbsSurface::set_num_u_knots 0 1 868 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_u_knots(int num);

1831 15 set_num_v_knots 0 4 2035 32 EggNurbsSurface::set_num_v_knots 0 1 869 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_v_knots(int num);

1832 10 set_u_knot 0 4 2035 27 EggNurbsSurface::set_u_knot 0 1 870 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_u_knot(int k, double value);

1833 10 set_v_knot 0 4 2035 27 EggNurbsSurface::set_v_knot 0 1 871 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_v_knot(int k, double value);

1834 6 set_cv 0 4 2035 23 EggNurbsSurface::set_cv 0 1 872 456
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
////////////////////////////////////////////////////////////////////
71
inline void EggNurbsSurface::set_cv(int ui, int vi, EggVertex *vertex);

1835 8 is_valid 0 4 2035 25 EggNurbsSurface::is_valid 0 1 873 460
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
43
bool EggNurbsSurface::is_valid(void) const;

1836 11 get_u_order 0 4 2035 28 EggNurbsSurface::get_u_order 0 1 874 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_u_order(void) const;

1837 11 get_v_order 0 4 2035 28 EggNurbsSurface::get_v_order 0 1 875 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_v_order(void) const;

1838 12 get_u_degree 0 4 2035 29 EggNurbsSurface::get_u_degree 0 1 876 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_u_degree(void) const;

1839 12 get_v_degree 0 4 2035 29 EggNurbsSurface::get_v_degree 0 1 877 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_v_degree(void) const;

1840 15 get_num_u_knots 0 4 2035 32 EggNurbsSurface::get_num_u_knots 0 1 878 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_u_knots(void) const;

1841 15 get_num_v_knots 0 4 2035 32 EggNurbsSurface::get_num_v_knots 0 1 879 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_v_knots(void) const;

1842 13 get_num_u_cvs 0 4 2035 30 EggNurbsSurface::get_num_u_cvs 0 1 880 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_u_cvs(void) const;

1843 13 get_num_v_cvs 0 4 2035 30 EggNurbsSurface::get_num_v_cvs 0 1 881 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_v_cvs(void) const;

1844 11 get_num_cvs 0 4 2035 28 EggNurbsSurface::get_num_cvs 0 1 882 679
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_num_cvs(void) const;

1845 11 get_u_index 0 4 2035 28 EggNurbsSurface::get_u_index 0 1 883 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_u_index(int vertex_index) const;

1846 11 get_v_index 0 4 2035 28 EggNurbsSurface::get_v_index 0 1 884 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_v_index(int vertex_index) const;

1847 16 get_vertex_index 0 4 2035 33 EggNurbsSurface::get_vertex_index 0 1 885 344
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
////////////////////////////////////////////////////////////////////
67
inline int EggNurbsSurface::get_vertex_index(int ui, int vi) const;

1848 11 is_closed_u 0 4 2035 28 EggNurbsSurface::is_closed_u 0 1 886 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_u(void) const;

1849 11 is_closed_v 0 4 2035 28 EggNurbsSurface::is_closed_v 0 1 887 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_v(void) const;

1850 10 get_u_knot 0 4 2035 27 EggNurbsSurface::get_u_knot 0 1 888 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_u_knot(int k) const;

1851 10 get_v_knot 0 4 2035 27 EggNurbsSurface::get_v_knot 0 1 889 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_v_knot(int k) const;

1852 6 get_cv 0 4 2035 23 EggNurbsSurface::get_cv 0 1 890 294
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
////////////////////////////////////////////////////////////////////
64
inline EggVertex *EggNurbsSurface::get_cv(int ui, int vi) const;

1853 21 get_curves_on_surface 0 20 2035 38 EggNurbsSurface::get_curves_on_surface 0 1 892 82
getter for list< PointerTo< EggNurbsCurve > > EggNurbsSurface::_curves_on_surface;
93
list< PointerTo< EggNurbsCurve > > const &EggNurbsSurface::get_curves_on_surface(void) const;

1854 9 get_trims 0 20 2035 26 EggNurbsSurface::get_trims 0 1 893 86
getter for list< list< list< PointerTo< EggNurbsCurve > > > > EggNurbsSurface::_trims;
97
list< list< list< PointerTo< EggNurbsCurve > > > > const &EggNurbsSurface::get_trims(void) const;

1855 14 get_class_type 0 4 2035 31 EggNurbsSurface::get_class_type 0 1 891 0
56
static TypeHandle EggNurbsSurface::get_class_type(void);

1856 16 ~EggNurbsSurface 0 4 2035 33 EggNurbsSurface::~EggNurbsSurface 0 0 0
40
EggNurbsSurface::~EggNurbsSurface(void);

1857 8 EggPoint 0 4 2038 18 EggPoint::EggPoint 0 3 894 895 896 925
// Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggPoint::EggPoint(basic_string< char > const &name = (""));
inline EggPoint::EggPoint(EggPoint const &copy);

1858 10 operator = 0 4 2038 20 EggPoint::operator = 0 1 897 230
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPoint &EggPoint::operator =(EggPoint const &copy);

1859 9 has_thick 0 4 2038 19 EggPoint::has_thick 0 1 898 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool EggPoint::has_thick(void) const;

1860 9 get_thick 0 4 2038 19 EggPoint::get_thick 0 1 899 330
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
46
inline double EggPoint::get_thick(void) const;

1861 9 set_thick 0 4 2038 19 EggPoint::set_thick 0 1 900 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::set_thick(double thick);

1862 11 clear_thick 0 4 2038 21 EggPoint::clear_thick 0 1 901 220
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline void EggPoint::clear_thick(void);

1863 15 has_perspective 0 4 2038 25 EggPoint::has_perspective 0 1 902 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::has_perspective(void) const;

1864 15 get_perspective 0 4 2038 25 EggPoint::get_perspective 0 1 903 370
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::get_perspective(void) const;

1865 15 set_perspective 0 4 2038 25 EggPoint::set_perspective 0 1 904 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggPoint::set_perspective(bool perspective);

1866 17 clear_perspective 0 4 2038 27 EggPoint::clear_perspective 0 1 905 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::clear_perspective(void);

1867 14 get_class_type 0 4 2038 24 EggPoint::get_class_type 0 1 906 0
49
static TypeHandle EggPoint::get_class_type(void);

1868 9 ~EggPoint 0 4 2038 19 EggPoint::~EggPoint 0 0 0
26
EggPoint::~EggPoint(void);

1869 15 EggPolysetMaker 0 4 2039 32 EggPolysetMaker::EggPolysetMaker 0 1 907 225
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
EggPolysetMaker::EggPolysetMaker(void);

1870 14 set_properties 0 4 2039 31 EggPolysetMaker::set_properties 0 1 908 609
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
////////////////////////////////////////////////////////////////////
53
void EggPolysetMaker::set_properties(int properties);

1871 14 get_class_type 0 4 2039 31 EggPolysetMaker::get_class_type 0 1 909 0
56
static TypeHandle EggPolysetMaker::get_class_type(void);

1872 16 ~EggPolysetMaker 0 4 2039 33 EggPolysetMaker::~EggPolysetMaker 0 0 0
40
EggPolysetMaker::~EggPolysetMaker(void);

1873 17 EggPoolUniquifier 0 4 2042 36 EggPoolUniquifier::EggPoolUniquifier 0 1 910 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
EggPoolUniquifier::EggPoolUniquifier(void);

1874 14 get_class_type 0 4 2042 33 EggPoolUniquifier::get_class_type 0 1 911 0
58
static TypeHandle EggPoolUniquifier::get_class_type(void);

1875 18 ~EggPoolUniquifier 0 4 2042 37 EggPoolUniquifier::~EggPoolUniquifier 0 0 0
44
EggPoolUniquifier::~EggPoolUniquifier(void);

1876 12 EggSAnimData 0 4 2043 26 EggSAnimData::EggSAnimData 0 3 912 913 914 937
// Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
136
inline EggSAnimData::EggSAnimData(basic_string< char > const &name = (""));
inline EggSAnimData::EggSAnimData(EggSAnimData const &copy);

1877 10 operator = 0 4 2043 24 EggSAnimData::operator = 0 1 915 234
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggSAnimData &EggSAnimData::operator =(EggSAnimData const &copy);

1878 12 get_num_rows 0 4 2043 26 EggSAnimData::get_num_rows 0 1 916 326
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
////////////////////////////////////////////////////////////////////
50
inline int EggSAnimData::get_num_rows(void) const;

1879 9 get_value 0 4 2043 23 EggSAnimData::get_value 0 1 917 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
53
inline double EggSAnimData::get_value(int row) const;

1880 9 set_value 0 4 2043 23 EggSAnimData::set_value 0 1 918 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
59
inline void EggSAnimData::set_value(int row, double value);

1881 8 optimize 0 4 2043 22 EggSAnimData::optimize 0 1 919 322
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
////////////////////////////////////////////////////////////////////
34
void EggSAnimData::optimize(void);

1882 14 get_class_type 0 4 2043 28 EggSAnimData::get_class_type 0 1 920 0
53
static TypeHandle EggSAnimData::get_class_type(void);

1883 13 ~EggSAnimData 0 4 2043 27 EggSAnimData::~EggSAnimData 0 0 0
34
EggSAnimData::~EggSAnimData(void);

1884 8 EggTable 0 4 2044 18 EggTable::EggTable 0 3 921 922 923 925
// Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggTable::EggTable(basic_string< char > const &name = (""));
inline EggTable::EggTable(EggTable const &copy);

1885 10 operator = 0 4 2044 20 EggTable::operator = 0 1 924 230
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggTable &EggTable::operator =(EggTable const &copy);

1886 14 set_table_type 0 4 2044 24 EggTable::set_table_type 0 1 925 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTable::set_table_type(EggTable::TableType type);

1887 14 get_table_type 0 4 2044 24 EggTable::get_table_type 0 1 926 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTable::TableType EggTable::get_table_type(void) const;

1888 13 has_transform 0 4 2044 23 EggTable::has_transform 0 1 927 313
////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggTable::has_transform(void) const;

1889 17 string_table_type 0 4 2044 27 EggTable::string_table_type 0 1 928 412
////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
////////////////////////////////////////////////////////////////////
91
static EggTable::TableType EggTable::string_table_type(basic_string< char > const &string);

1890 14 get_class_type 0 4 2044 24 EggTable::get_class_type 0 1 929 0
49
static TypeHandle EggTable::get_class_type(void);

1891 9 ~EggTable 0 4 2044 19 EggTable::~EggTable 0 0 0
26
EggTable::~EggTable(void);

1892 20 EggTextureCollection 0 4 2046 42 EggTextureCollection::EggTextureCollection 0 2 930 931 465
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
EggTextureCollection::EggTextureCollection(void);
EggTextureCollection::EggTextureCollection(EggTextureCollection const &copy);

1893 10 operator = 0 4 2046 32 EggTextureCollection::operator = 0 1 932 242
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggTextureCollection &EggTextureCollection::operator =(EggTextureCollection const &copy);

1894 21 ~EggTextureCollection 0 4 2046 43 EggTextureCollection::~EggTextureCollection 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
EggTextureCollection::~EggTextureCollection(void);

1895 5 clear 0 4 2046 27 EggTextureCollection::clear 0 1 933 265
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
////////////////////////////////////////////////////////////////////
39
void EggTextureCollection::clear(void);

1896 16 extract_textures 0 4 2046 38 EggTextureCollection::extract_textures 0 1 934 479
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
////////////////////////////////////////////////////////////////////
63
int EggTextureCollection::extract_textures(EggGroupNode *node);

1897 8 is_empty 0 4 2046 30 EggTextureCollection::is_empty 0 1 935 322
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
48
bool EggTextureCollection::is_empty(void) const;

1898 16 get_num_textures 0 4 2046 38 EggTextureCollection::get_num_textures 0 1 936 290
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
55
int EggTextureCollection::get_num_textures(void) const;

1899 11 get_texture 0 4 2046 33 EggTextureCollection::get_texture 0 1 937 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
63
EggTexture *EggTextureCollection::get_texture(int index) const;

1900 18 find_used_textures 0 4 2046 40 EggTextureCollection::find_used_textures 0 1 938 1765
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
////////////////////////////////////////////////////////////////////
60
int EggTextureCollection::find_used_textures(EggNode *node);

1901 22 remove_unused_textures 0 4 2046 44 EggTextureCollection::remove_unused_textures 0 1 939 570
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
65
void EggTextureCollection::remove_unused_textures(EggNode *node);

1902 28 collapse_equivalent_textures 0 4 2046 50 EggTextureCollection::collapse_equivalent_textures 0 2 940 941 1777
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
213
int EggTextureCollection::collapse_equivalent_textures(int eq, EggGroupNode *node);
int EggTextureCollection::collapse_equivalent_textures(int eq, map< PointerTo< EggTexture >, PointerTo< EggTexture > > &removed);

1903 16 replace_textures 0 4 2046 38 EggTextureCollection::replace_textures 0 1 942 601
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
143
static void EggTextureCollection::replace_textures(EggGroupNode *node, map< PointerTo< EggTexture >, PointerTo< EggTexture > > const &replace);

1904 14 uniquify_trefs 0 4 2046 36 EggTextureCollection::uniquify_trefs 0 1 943 384
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
48
void EggTextureCollection::uniquify_trefs(void);

1905 12 sort_by_tref 0 4 2046 34 EggTextureCollection::sort_by_tref 0 1 944 404
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
46
void EggTextureCollection::sort_by_tref(void);

1906 16 sort_by_basename 0 4 2046 38 EggTextureCollection::sort_by_basename 0 1 945 471
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
50
void EggTextureCollection::sort_by_basename(void);

1907 11 operator [] 0 4 2046 33 EggTextureCollection::operator [] 0 1 946 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
75
inline EggTexture *EggTextureCollection::operator [](unsigned int n) const;

1908 4 size 0 4 2046 26 EggTextureCollection::size 0 1 947 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
59
inline unsigned int EggTextureCollection::size(void) const;

1909 11 add_texture 0 4 2046 33 EggTextureCollection::add_texture 0 1 948 409
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
60
bool EggTextureCollection::add_texture(EggTexture *texture);

1910 14 remove_texture 0 4 2046 36 EggTextureCollection::remove_texture 0 1 949 410
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
63
bool EggTextureCollection::remove_texture(EggTexture *texture);

1911 21 create_unique_texture 0 4 2046 43 EggTextureCollection::create_unique_texture 0 1 950 691
// create_unique_texture() creates a new texture if there is not
// already one equivalent (according to eq, see
// EggTexture::is_equivalent_to()) to the indicated texture, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
88
EggTexture *EggTextureCollection::create_unique_texture(EggTexture const &copy, int eq);

1912 9 find_tref 0 4 2046 31 EggTextureCollection::find_tref 0 1 951 373
// Find a texture with a particular TRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
89
EggTexture *EggTextureCollection::find_tref(basic_string< char > const &tref_name) const;

1913 13 find_filename 0 4 2046 35 EggTextureCollection::find_filename 0 1 952 375
// Find a texture with a particular filename.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
80
EggTexture *EggTextureCollection::find_filename(Filename const &filename) const;

1914 14 EggTriangleFan 0 4 2047 30 EggTriangleFan::EggTriangleFan 0 3 953 954 955 949
// Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggTriangleFan::EggTriangleFan(basic_string< char > const &name = (""));
inline EggTriangleFan::EggTriangleFan(EggTriangleFan const &copy);

1915 10 operator = 0 4 2047 26 EggTriangleFan::operator = 0 1 956 239
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggTriangleFan &EggTriangleFan::operator =(EggTriangleFan const &copy);

1916 14 get_class_type 0 4 2047 30 EggTriangleFan::get_class_type 0 1 957 0
55
static TypeHandle EggTriangleFan::get_class_type(void);

1917 16 EggTriangleStrip 0 4 2048 34 EggTriangleStrip::EggTriangleStrip 0 3 958 959 960 955
// Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
156
inline EggTriangleStrip::EggTriangleStrip(basic_string< char > const &name = (""));
inline EggTriangleStrip::EggTriangleStrip(EggTriangleStrip const &copy);

1918 10 operator = 0 4 2048 28 EggTriangleStrip::operator = 0 1 961 241
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
inline EggTriangleStrip &EggTriangleStrip::operator =(EggTriangleStrip const &copy);

1919 14 get_class_type 0 4 2048 32 EggTriangleStrip::get_class_type 0 1 962 0
57
static TypeHandle EggTriangleStrip::get_class_type(void);

1920 11 EggXfmSAnim 0 4 2049 24 EggXfmSAnim::EggXfmSAnim 0 5 963 964 965 966 967 1258
// Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
////////////////////////////////////////////////////////////////////
229
inline EggXfmSAnim::EggXfmSAnim(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmSAnim::EggXfmSAnim(EggXfmAnimData const &convert_from);
inline EggXfmSAnim::EggXfmSAnim(EggXfmSAnim const &copy);

1921 10 operator = 0 4 2049 23 EggXfmSAnim::operator = 0 1 968 233
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggXfmSAnim &EggXfmSAnim::operator =(EggXfmSAnim const &copy);

1922 7 set_fps 0 4 2049 20 EggXfmSAnim::set_fps 0 1 969 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggXfmSAnim::set_fps(double fps);

1923 9 clear_fps 0 4 2049 22 EggXfmSAnim::clear_fps 0 1 970 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggXfmSAnim::clear_fps(void);

1924 7 has_fps 0 4 2049 20 EggXfmSAnim::has_fps 0 1 971 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggXfmSAnim::has_fps(void) const;

1925 7 get_fps 0 4 2049 20 EggXfmSAnim::get_fps 0 1 972 262
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggXfmSAnim::get_fps(void) const;

1926 9 set_order 0 4 2049 22 EggXfmSAnim::set_order 0 1 973 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void EggXfmSAnim::set_order(basic_string< char > const &order);

1927 11 clear_order 0 4 2049 24 EggXfmSAnim::clear_order 0 1 974 220
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggXfmSAnim::clear_order(void);

1928 9 has_order 0 4 2049 22 EggXfmSAnim::has_order 0 1 975 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggXfmSAnim::has_order(void) const;

1929 9 get_order 0 4 2049 22 EggXfmSAnim::get_order 0 1 976 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &EggXfmSAnim::get_order(void) const;

1930 18 get_standard_order 0 4 2049 31 EggXfmSAnim::get_standard_order 0 1 977 448
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
80
static inline basic_string< char > const &EggXfmSAnim::get_standard_order(void);

1931 21 get_coordinate_system 0 4 2049 34 EggXfmSAnim::get_coordinate_system 0 1 978 589
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
71
inline CoordinateSystem EggXfmSAnim::get_coordinate_system(void) const;

1932 8 optimize 0 4 2049 21 EggXfmSAnim::optimize 0 1 979 290
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
////////////////////////////////////////////////////////////////////
33
void EggXfmSAnim::optimize(void);

1933 26 optimize_to_standard_order 0 4 2049 39 EggXfmSAnim::optimize_to_standard_order 0 1 980 512
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
////////////////////////////////////////////////////////////////////
51
void EggXfmSAnim::optimize_to_standard_order(void);

1934 9 normalize 0 4 2049 22 EggXfmSAnim::normalize 0 1 981 508
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
////////////////////////////////////////////////////////////////////
34
void EggXfmSAnim::normalize(void);

1935 12 get_num_rows 0 4 2049 25 EggXfmSAnim::get_num_rows 0 1 982 528
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
////////////////////////////////////////////////////////////////////
42
int EggXfmSAnim::get_num_rows(void) const;

1936 9 get_value 0 4 2049 22 EggXfmSAnim::get_value 0 1 983 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
////////////////////////////////////////////////////////////////////
59
void EggXfmSAnim::get_value(int row, LMatrix4d &mat) const;

1937 9 set_value 0 4 2049 22 EggXfmSAnim::set_value 0 1 984 716
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
////////////////////////////////////////////////////////////////////
59
bool EggXfmSAnim::set_value(int row, LMatrix4d const &mat);

1938 10 clear_data 0 4 2049 23 EggXfmSAnim::clear_data 0 1 985 316
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
////////////////////////////////////////////////////////////////////
42
inline void EggXfmSAnim::clear_data(void);

1939 8 add_data 0 4 2049 21 EggXfmSAnim::add_data 0 1 986 1669
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
////////////////////////////////////////////////////////////////////
49
bool EggXfmSAnim::add_data(LMatrix4d const &mat);

1940 18 add_component_data 0 4 2049 31 EggXfmSAnim::add_component_data 0 2 987 988 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
////////////////////////////////////////////////////////////////////
162
void EggXfmSAnim::add_component_data(basic_string< char > const &component_name, double value);
void EggXfmSAnim::add_component_data(int component, double value);

1941 18 compose_with_order 0 4 2049 31 EggXfmSAnim::compose_with_order 0 1 989 442
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
////////////////////////////////////////////////////////////////////
214
static void EggXfmSAnim::compose_with_order(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &trans, basic_string< char > const &order, CoordinateSystem cs);

1942 14 get_class_type 0 4 2049 27 EggXfmSAnim::get_class_type 0 1 990 0
52
static TypeHandle EggXfmSAnim::get_class_type(void);

1943 12 ~EggXfmSAnim 0 4 2049 25 EggXfmSAnim::~EggXfmSAnim 0 0 0
32
EggXfmSAnim::~EggXfmSAnim(void);

1944 14 EggXfmAnimData 0 4 2050 30 EggXfmAnimData::EggXfmAnimData 0 5 991 992 993 994 995 1270
// Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
////////////////////////////////////////////////////////////////////
247
inline EggXfmAnimData::EggXfmAnimData(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmAnimData::EggXfmAnimData(EggXfmSAnim const &convert_from);
inline EggXfmAnimData::EggXfmAnimData(EggXfmAnimData const &copy);

1945 10 operator = 0 4 2050 26 EggXfmAnimData::operator = 0 1 996 236
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggXfmAnimData &EggXfmAnimData::operator =(EggXfmAnimData const &copy);

1946 9 set_order 0 4 2050 25 EggXfmAnimData::set_order 0 1 997 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggXfmAnimData::set_order(basic_string< char > const &order);

1947 11 clear_order 0 4 2050 27 EggXfmAnimData::clear_order 0 1 998 223
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggXfmAnimData::clear_order(void);

1948 9 has_order 0 4 2050 25 EggXfmAnimData::has_order 0 1 999 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggXfmAnimData::has_order(void) const;

1949 9 get_order 0 4 2050 25 EggXfmAnimData::get_order 0 1 1000 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &EggXfmAnimData::get_order(void) const;

1950 18 get_standard_order 0 4 2050 34 EggXfmAnimData::get_standard_order 0 1 1001 451
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
83
static inline basic_string< char > const &EggXfmAnimData::get_standard_order(void);

1951 12 set_contents 0 4 2050 28 EggXfmAnimData::set_contents 0 1 1002 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggXfmAnimData::set_contents(basic_string< char > const &contents);

1952 14 clear_contents 0 4 2050 30 EggXfmAnimData::clear_contents 0 1 1003 226
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggXfmAnimData::clear_contents(void);

1953 12 has_contents 0 4 2050 28 EggXfmAnimData::has_contents 0 1 1004 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggXfmAnimData::has_contents(void) const;

1954 12 get_contents 0 4 2050 28 EggXfmAnimData::get_contents 0 1 1005 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggXfmAnimData::get_contents(void) const;

1955 21 get_coordinate_system 0 4 2050 37 EggXfmAnimData::get_coordinate_system 0 1 1006 592
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
74
inline CoordinateSystem EggXfmAnimData::get_coordinate_system(void) const;

1956 12 get_num_rows 0 4 2050 28 EggXfmAnimData::get_num_rows 0 1 1007 265
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_rows(void) const;

1957 12 get_num_cols 0 4 2050 28 EggXfmAnimData::get_num_cols 0 1 1008 393
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_cols(void) const;

1958 9 get_value 0 4 2050 25 EggXfmAnimData::get_value 0 2 1009 1010 839
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
////////////////////////////////////////////////////////////////////
127
inline double EggXfmAnimData::get_value(int row, int col) const;
void EggXfmAnimData::get_value(int row, LMatrix4d &mat) const;

1959 14 get_class_type 0 4 2050 30 EggXfmAnimData::get_class_type 0 1 1011 0
55
static TypeHandle EggXfmAnimData::get_class_type(void);

1960 15 ~EggXfmAnimData 0 4 2050 31 EggXfmAnimData::~EggXfmAnimData 0 0 0
38
EggXfmAnimData::~EggXfmAnimData(void);

1011
1 14 Dtool_hhEqa5Wu 0 7 3 2051 0 14 Dtool_hhEqa5Wu 707 // Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_hhEqEDMc 0 7 3 2051 0 14 Dtool_hhEqEDMc 225 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2052  
3 14 Dtool_hhEqDBa1 0 7 4 2051 0 14 Dtool_hhEqDBa1 233 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2051  4 copy 1 2052  
4 14 Dtool_hhEqkdis 0 7 5 2055 0 14 Dtool_hhEqkdis 0 0 
5 14 Dtool_hhEqc5tZ 0 7 7 2056 0 14 Dtool_hhEqc5tZ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
6 14 Dtool_hhEq6VZo 0 7 7 2056 0 14 Dtool_hhEq6VZo 226 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2057  
7 14 Dtool_hhEq43pX 0 7 8 2056 0 14 Dtool_hhEq43pX 234 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2056  4 copy 1 2057  
8 14 Dtool_hhEqi4s0 0 4 9 2059 0 14 Dtool_hhEqi4s0 1201 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2056  9 user_data 1 2051  
9 14 Dtool_hhEqWm2j 0 7 10 2051 0 14 Dtool_hhEqWm2j 366 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2057  
10 14 Dtool_hhEqTuxe 0 7 10 2051 0 14 Dtool_hhEqTuxe 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2057  4 type 1 2055  
11 14 Dtool_hhEqibXq 0 6 11 2060 0 14 Dtool_hhEqibXq 361 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2057  
12 14 Dtool_hhEqvhRl 0 6 11 2060 0 14 Dtool_hhEqvhRl 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2057  4 type 1 2055  
13 14 Dtool_hhEq0OqA 0 4 12 2059 0 14 Dtool_hhEq0OqA 273 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2056  
14 14 Dtool_hhEqjTs3 0 4 12 2059 0 14 Dtool_hhEqjTs3 278 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2056  4 type 1 2055  
15 14 Dtool_hhEqL1Gc 0 7 13 2055 0 14 Dtool_hhEqL1Gc 0 0 
16 14 Dtool_hhEqzuI5 0 7 20 2063 1030 14 Dtool_hhEqzuI5 228 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2061  
17 14 Dtool_hhEq1nQw 0 7 20 2063 1030 14 Dtool_hhEq1nQw 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
18 14 Dtool_hhEqFcLP 0 7 20 2063 1030 14 Dtool_hhEqFcLP 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_hhEqgt6J 0 7 21 2063 1030 14 Dtool_hhEqgt6J 236 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2063  4 copy 1 2061  
20 14 Dtool_hhEqjJfG 0 4 22 2059 0 14 Dtool_hhEqjJfG 219 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2061  3 out 1 2065  
21 14 Dtool_hhEqcBDe 0 7 23 2055 0 14 Dtool_hhEqcBDe 0 0 
22 14 Dtool_hhEqxcwm 0 7 15 2056 0 14 Dtool_hhEqxcwm 0 1 4 this 3 2063  
23 14 Dtool_hhEqd530 0 7 16 2063 1030 14 Dtool_hhEqd530 0 1 4 this 3 2056  
24 14 Dtool_hhEqQtFW 0 6 18 2067 0 14 Dtool_hhEqQtFW 0 1 4 this 3 2063  
25 14 Dtool_hhEq__2j 0 7 19 2063 1030 14 Dtool_hhEq__2j 0 1 4 this 3 2067  
26 14 Dtool_hhEqj5Y4 0 7 26 2068 1069 14 Dtool_hhEqj5Y4 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2068  4 copy 1 2069  
27 14 Dtool_hhEqcWNY 0 7 27 2071 1069 14 Dtool_hhEqcWNY 215 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
28 14 Dtool_hhEqyhAk 0 6 28 2072 0 14 Dtool_hhEqyhAk 297 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
29 14 Dtool_hhEq3MCH 0 6 29 2060 0 14 Dtool_hhEq3MCH 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
30 14 Dtool_hhEqaghw 0 6 30 2060 0 14 Dtool_hhEqaghw 368 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
31 14 Dtool_hhEqyHkj 0 6 31 2060 0 14 Dtool_hhEqyHkj 443 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
32 14 Dtool_hhEqtrwF 0 6 32 2073 0 14 Dtool_hhEqtrwF 1112 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
33 14 Dtool_hhEqsUiB 0 6 33 2073 0 14 Dtool_hhEqsUiB 372 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
34 14 Dtool_hhEqN4KR 0 6 34 2073 0 14 Dtool_hhEqN4KR 333 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
35 14 Dtool_hhEqv1_V 0 6 35 2073 0 14 Dtool_hhEqv1_V 327 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
36 14 Dtool_hhEqXcNr 0 6 36 2073 0 14 Dtool_hhEqXcNr 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
37 14 Dtool_hhEqNv_a 0 6 37 2073 0 14 Dtool_hhEqNv_a 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
38 14 Dtool_hhEqv1HP 0 6 38 2073 0 14 Dtool_hhEqv1HP 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
39 14 Dtool_hhEq_tqL 0 6 39 2073 0 14 Dtool_hhEq_tqL 362 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
40 14 Dtool_hhEq3nvZ 0 6 40 2073 0 14 Dtool_hhEq3nvZ 374 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
41 14 Dtool_hhEqKkmK 0 6 41 2073 0 14 Dtool_hhEqKkmK 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
42 14 Dtool_hhEqB_1f 0 6 42 2073 0 14 Dtool_hhEqB_1f 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
43 14 Dtool_hhEq3soP 0 6 43 2073 0 14 Dtool_hhEq3soP 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
44 14 Dtool_hhEqoQ8D 0 4 44 2059 0 14 Dtool_hhEqoQ8D 308 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2068  3 mat 1 2073  
45 14 Dtool_hhEq2Yja 0 4 45 2059 0 14 Dtool_hhEq2Yja 476 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2068  3 mat 1 2073  
46 14 Dtool_hhEq7nS3 0 4 46 2059 0 14 Dtool_hhEq7nS3 699 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
47 14 Dtool_hhEqpzMK 0 4 47 2059 0 14 Dtool_hhEqpzMK 398 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
48 14 Dtool_hhEq_Twb 0 6 48 2072 0 14 Dtool_hhEq_Twb 254 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2068  12 strip_prefix 1 2076  
49 14 Dtool_hhEqHHnM 0 6 49 2060 0 14 Dtool_hhEqHHnM 504 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
50 14 Dtool_hhEq82MW 0 6 50 2060 0 14 Dtool_hhEq82MW 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2069  
51 14 Dtool_hhEquPXv 0 6 51 2078 0 14 Dtool_hhEquPXv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
52 14 Dtool_hhEqNEGB 0 6 52 2078 0 14 Dtool_hhEqNEGB 561 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
53 14 Dtool_hhEqUWLJ 0 6 53 2078 0 14 Dtool_hhEqUWLJ 559 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
54 14 Dtool_hhEqf8Wt 0 6 54 2078 0 14 Dtool_hhEqf8Wt 558 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
55 14 Dtool_hhEq61kv 0 6 55 2078 0 14 Dtool_hhEq61kv 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
56 14 Dtool_hhEqx2w6 0 6 56 2078 0 14 Dtool_hhEqx2w6 531 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
57 14 Dtool_hhEq6z27 0 6 57 2078 0 14 Dtool_hhEq6z27 518 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
58 14 Dtool_hhEq6Ucg 0 6 58 2060 0 14 Dtool_hhEq6Ucg 615 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
59 14 Dtool_hhEqEwBk 0 6 59 2060 0 14 Dtool_hhEqEwBk 603 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2068  
60 14 Dtool_hhEqIrWM 0 4 60 2059 0 14 Dtool_hhEqIrWM 0 3 4 this 3 2069  3 out 1 2065  12 indent_level 1 2072  
61 14 Dtool_hhEqZKVQ 0 6 61 2060 0 14 Dtool_hhEqZKVQ 575 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2068  10 egg_syntax 1 2064  
62 14 Dtool_hhEqp6_k 0 4 62 2059 0 14 Dtool_hhEqp6_k 0 1 4 this 3 2069  
63 14 Dtool_hhEqrFAL 0 7 63 2055 0 14 Dtool_hhEqrFAL 0 0 
64 14 Dtool_hhEqZZeu 0 7 66 2079 1080 14 Dtool_hhEqZZeu 233 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2079  4 copy 1 2080  
65 14 Dtool_hhEqgqhB 0 4 67 2059 0 14 Dtool_hhEqgqhB 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2079  4 type 1 1988  
66 14 Dtool_hhEqKf9p 0 4 68 2059 0 14 Dtool_hhEqKf9p 218 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2079  
67 14 Dtool_hhEqJAtY 0 6 69 2060 0 14 Dtool_hhEqJAtY 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2080  
68 14 Dtool_hhEqRAYV 0 6 70 1988 0 14 Dtool_hhEqRAYV 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2080  
69 14 Dtool_hhEqML2y 0 4 71 2059 0 14 Dtool_hhEqML2y 259 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2079  
70 14 Dtool_hhEqAf6I 0 4 72 2059 0 14 Dtool_hhEqAf6I 253 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2079  5 value 1 1988  
71 14 Dtool_hhEqDiDs 0 6 73 2072 0 14 Dtool_hhEqDiDs 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2080  
72 14 Dtool_hhEqbri2 0 4 74 2059 0 14 Dtool_hhEqbri2 303 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2079  7 quantum 1 1988  
73 14 Dtool_hhEq25FJ 0 7 75 2055 0 14 Dtool_hhEq25FJ 0 0 
74 14 Dtool_hhEq3GiB 0 7 78 2084 1092 14 Dtool_hhEq3GiB 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2082  
75 14 Dtool_hhEqCh8o 0 7 78 2084 1092 14 Dtool_hhEqCh8o 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
76 14 Dtool_hhEq8Z3H 0 7 78 2084 1092 14 Dtool_hhEq8Z3H 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
77 14 Dtool_hhEqwGZ8 0 7 79 2084 1092 14 Dtool_hhEqwGZ8 236 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2084  4 copy 1 2082  
78 14 Dtool_hhEqJXBe 0 4 80 2059 0 14 Dtool_hhEqJXBe 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2084  3 fps 1 1988  
79 14 Dtool_hhEqHVnp 0 4 81 2059 0 14 Dtool_hhEqHVnp 221 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2084  
80 14 Dtool_hhEqUOEv 0 6 82 2060 0 14 Dtool_hhEqUOEv 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
81 14 Dtool_hhEq80Di 0 6 83 1988 0 14 Dtool_hhEq80Di 265 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
82 14 Dtool_hhEqv4k5 0 4 84 2059 0 14 Dtool_hhEqv4k5 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2084  10 num_frames 1 2072  
83 14 Dtool_hhEq_5Yk 0 4 85 2059 0 14 Dtool_hhEq_5Yk 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2084  
84 14 Dtool_hhEqh_YG 0 6 86 2060 0 14 Dtool_hhEqh_YG 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
85 14 Dtool_hhEqeYX5 0 6 87 2072 0 14 Dtool_hhEqeYX5 279 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
86 14 Dtool_hhEq3ayU 0 7 88 2055 0 14 Dtool_hhEq3ayU 0 0 
87 14 Dtool_hhEqhfwD 0 7 94 2085 1097 14 Dtool_hhEqhfwD 225 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
88 14 Dtool_hhEqepOm 0 7 94 2085 1097 14 Dtool_hhEqepOm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2086  
89 14 Dtool_hhEqUF8y 0 6 95 2085 0 14 Dtool_hhEqUF8y 238 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  4 copy 1 2086  
90 14 Dtool_hhEqw9Eb 0 6 97 2060 0 14 Dtool_hhEqw9Eb 713 // Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2086  
91 14 Dtool_hhEqVCpK 0 6 98 2088 0 14 Dtool_hhEqVCpK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2086  
92 14 Dtool_hhEqpRK6 0 4 99 2059 0 14 Dtool_hhEqpRK6 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  6 normal 1 2088  
93 14 Dtool_hhEqS6MT 0 4 100 2059 0 14 Dtool_hhEqS6MT 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
94 14 Dtool_hhEqiri2 0 6 101 2060 0 14 Dtool_hhEqiri2 345 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2086  5 other 1 2086  
95 14 Dtool_hhEqTZ3E 0 4 102 2059 0 14 Dtool_hhEqTZ3E 376 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 other 1 2086  
96 14 Dtool_hhEqKFjr 0 6 103 2060 0 14 Dtool_hhEqKFjr 223 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2086  
97 14 Dtool_hhEqXGJb 0 7 104 2092 0 14 Dtool_hhEqXGJb 333 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2086  
98 14 Dtool_hhEqFNlA 0 4 105 2059 0 14 Dtool_hhEqFNlA 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 Color 1 2093  
99 14 Dtool_hhEqfqMj 0 4 106 2059 0 14 Dtool_hhEqfqMj 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
100 14 Dtool_hhEqDKr_ 0 6 107 2060 0 14 Dtool_hhEqDKr_ 343 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2086  5 other 1 2086  
101 14 Dtool_hhEqPa3O 0 4 108 2059 0 14 Dtool_hhEqPa3O 372 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 other 1 2086  
102 14 Dtool_hhEqgbBE 0 4 109 2059 0 14 Dtool_hhEqgbBE 304 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2086  3 out 1 2065  12 indent_level 1 2072  
103 14 Dtool_hhEqOpUR 0 6 110 2060 0 14 Dtool_hhEqOpUR 399 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2086  5 other 1 2086  
104 14 Dtool_hhEqsaDm 0 6 111 2072 0 14 Dtool_hhEqsaDm 394 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2086  5 other 1 2086  
105 14 Dtool_hhEqZnUo 0 4 112 2059 0 14 Dtool_hhEqZnUo 312 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  3 mat 1 2073  
106 14 Dtool_hhEqX9Yr 0 7 119 2055 0 14 Dtool_hhEqX9Yr 0 0 
107 14 Dtool_hhEqwJ97 0 6 92 2095 0 14 Dtool_hhEqwJ97 0 1 4 this 3 2085  
108 14 Dtool_hhEq0vEk 0 6 93 2085 0 14 Dtool_hhEq0vEk 0 1 4 this 3 2095  
109 14 Dtool_hhEqP4Um 0 6 114 2096 0 14 Dtool_hhEqP4Um 0 1 4 this 3 2086  
110 14 Dtool_hhEq7lZz 0 6 117 2098 0 14 Dtool_hhEq7lZz 0 1 4 this 3 2086  
111 14 Dtool_hhEqfgDe 0 7 121 2102 1030 14 Dtool_hhEqfgDe 229 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2100  
112 14 Dtool_hhEqrGLE 0 7 121 2102 1030 14 Dtool_hhEqrGLE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2064  2 uv 1 2103  
113 14 Dtool_hhEqdlNE 0 7 121 2102 1030 14 Dtool_hhEqdlNE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2064  3 uvw 1 2106  
114 14 Dtool_hhEqDsRd 0 7 122 2102 1030 14 Dtool_hhEqDsRd 237 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  4 copy 1 2100  
115 14 Dtool_hhEqwe3A 0 6 123 2064 0 14 Dtool_hhEqwe3A 998 // Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
116 14 Dtool_hhEq_tuC 0 4 124 2059 0 14 Dtool_hhEq_tuC 220 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  4 name 1 2064  
117 14 Dtool_hhEqkls8 0 6 125 2072 0 14 Dtool_hhEqkls8 401 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
118 14 Dtool_hhEqI9Ho 0 6 126 2060 0 14 Dtool_hhEqI9Ho 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
119 14 Dtool_hhEqWnKk 0 7 127 2108 0 14 Dtool_hhEqWnKk 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
120 14 Dtool_hhEqlXG_ 0 6 128 2106 0 14 Dtool_hhEqlXG_ 435 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
121 14 Dtool_hhEqC1GK 0 4 129 2059 0 14 Dtool_hhEqC1GK 372 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  8 texCoord 1 2103  
122 14 Dtool_hhEqjWDX 0 4 130 2059 0 14 Dtool_hhEqjWDX 333 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  8 texCoord 1 2106  
123 14 Dtool_hhEqHSNX 0 6 131 2060 0 14 Dtool_hhEqHSNX 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
124 14 Dtool_hhEqvT4T 0 6 132 2088 0 14 Dtool_hhEqvT4T 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
125 14 Dtool_hhEqt4TN 0 4 133 2059 0 14 Dtool_hhEqt4TN 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  7 tangent 1 2088  
126 14 Dtool_hhEqimjh 0 4 134 2059 0 14 Dtool_hhEqimjh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
127 14 Dtool_hhEqSW5F 0 6 135 2060 0 14 Dtool_hhEqSW5F 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
128 14 Dtool_hhEqsWkC 0 6 136 2088 0 14 Dtool_hhEqsWkC 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
129 14 Dtool_hhEqMNOa 0 4 137 2059 0 14 Dtool_hhEqMNOa 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  8 binormal 1 2088  
130 14 Dtool_hhEqwfvM 0 4 138 2059 0 14 Dtool_hhEqwfvM 226 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
131 14 Dtool_hhEqL2C8 0 4 139 2059 0 14 Dtool_hhEqL2C8 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  3 mat 1 2073  
132 14 Dtool_hhEqaahg 0 4 140 2059 0 14 Dtool_hhEqaahg 215 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2100  3 out 1 2065  12 indent_level 1 2072  
133 14 Dtool_hhEqpA7a 0 6 141 2072 0 14 Dtool_hhEqpA7a 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2100  5 other 1 2100  
134 14 Dtool_hhEqBqeg 0 7 144 2055 0 14 Dtool_hhEqBqeg 0 0 
135 14 Dtool_hhEqnXa0 0 6 142 2096 0 14 Dtool_hhEqnXa0 0 1 4 this 3 2100  
136 14 Dtool_hhEqzrvg 0 7 146 2111 1030 14 Dtool_hhEqzrvg 230 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2109  
137 14 Dtool_hhEqMAWc 0 7 146 2111 1030 14 Dtool_hhEqMAWc 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2064  3 aux 1 2112  
138 14 Dtool_hhEqDXPj 0 7 147 2111 1030 14 Dtool_hhEqDXPj 238 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 copy 1 2109  
139 14 Dtool_hhEqWEWe 0 4 148 2059 0 14 Dtool_hhEqWEWe 709 // Filename: eggVertexAux.I
// Created by:  jenes (15Nov11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 name 1 2064  
140 14 Dtool_hhEqV_Md 0 6 149 2112 0 14 Dtool_hhEqV_Md 258 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
141 14 Dtool_hhEqLE5G 0 4 150 2059 0 14 Dtool_hhEqLE5G 255 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  3 aux 1 2112  
142 14 Dtool_hhEqLrOY 0 4 151 2059 0 14 Dtool_hhEqLrOY 216 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  3 out 1 2065  12 indent_level 1 2072  
143 14 Dtool_hhEqvcLJ 0 6 152 2072 0 14 Dtool_hhEqvcLJ 390 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2109  5 other 1 2109  
144 14 Dtool_hhEqdWfV 0 7 153 2055 0 14 Dtool_hhEqdWfV 0 0 
145 14 Dtool_hhEqtjbY 0 7 159 2115 1154 14 Dtool_hhEqtjbY 221 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
146 14 Dtool_hhEqbgja 0 7 159 2115 1154 14 Dtool_hhEqbgja 339 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2116  
147 14 Dtool_hhEqmaUY 0 7 160 2115 1154 14 Dtool_hhEqmaUY 347 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 copy 1 2116  
148 14 Dtool_hhEqz9Ky 0 7 162 2118 1069 14 Dtool_hhEqz9Ky 847 // Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
149 14 Dtool_hhEqp_H_ 0 6 163 2060 0 14 Dtool_hhEqp_H_ 710 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
150 14 Dtool_hhEq2yZs 0 4 164 2059 0 14 Dtool_hhEq2yZs 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 pos 1 2103  
151 14 Dtool_hhEqW1At 0 4 164 2059 0 14 Dtool_hhEqW1At 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 pos 1 2106  
152 14 Dtool_hhEq25nt 0 4 164 2059 0 14 Dtool_hhEq25nt 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 pos 1 2119  
153 14 Dtool_hhEqZ6NP 0 4 164 2059 0 14 Dtool_hhEqZ6NP 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 pos 1 1988  
154 14 Dtool_hhEqPMSb 0 4 165 2059 0 14 Dtool_hhEqPMSb 600 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 pos 1 2119  
155 14 Dtool_hhEqO31_ 0 6 166 2072 0 14 Dtool_hhEqO31_ 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2116  
156 14 Dtool_hhEqJIBG 0 6 167 1988 0 14 Dtool_hhEqJIBG 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2116  
157 14 Dtool_hhEqbHBN 0 7 168 2108 0 14 Dtool_hhEqbHBN 330 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
158 14 Dtool_hhEqtGBU 0 7 169 2122 0 14 Dtool_hhEqtGBU 332 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
159 14 Dtool_hhEq_FBb 0 7 170 2123 0 14 Dtool_hhEq_FBb 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
160 14 Dtool_hhEqmIlN 0 6 171 2060 0 14 Dtool_hhEqmIlN 551 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
161 14 Dtool_hhEqKQRh 0 6 171 2060 0 14 Dtool_hhEqKQRh 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
162 14 Dtool_hhEqaaFH 0 7 172 2108 0 14 Dtool_hhEqaaFH 604 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
163 14 Dtool_hhEq_Bxa 0 7 172 2108 0 14 Dtool_hhEq_Bxa 362 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
164 14 Dtool_hhEqAFVN 0 4 173 2059 0 14 Dtool_hhEqAFVN 556 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  8 texCoord 1 2103  
165 14 Dtool_hhEqs1Zd 0 4 173 2059 0 14 Dtool_hhEqs1Zd 407 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2115  4 name 1 2064  8 texCoord 1 2103  
166 14 Dtool_hhEqqW8Y 0 4 174 2059 0 14 Dtool_hhEqqW8Y 267 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
167 14 Dtool_hhEqBuq9 0 4 174 2059 0 14 Dtool_hhEqBuq9 314 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 name 1 2064  
168 14 Dtool_hhEqSUTE 0 6 175 2060 0 14 Dtool_hhEqSUTE 374 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
169 14 Dtool_hhEqvqz9 0 6 176 2106 0 14 Dtool_hhEqvqz9 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
170 14 Dtool_hhEqUOlT 0 4 177 2059 0 14 Dtool_hhEqUOlT 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2115  4 name 1 2064  8 texCoord 1 2106  
171 14 Dtool_hhEq_lz7 0 7 178 2100 0 14 Dtool_hhEq_lz7 584 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
172 14 Dtool_hhEqfsq4 0 7 179 2102 1030 14 Dtool_hhEqfsq4 462 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 name 1 2064  
173 14 Dtool_hhEq37Oi 0 4 180 2059 0 14 Dtool_hhEq37Oi 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  9 vertex_uv 1 2102  
174 14 Dtool_hhEqoK0f 0 6 181 2060 0 14 Dtool_hhEqoK0f 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
175 14 Dtool_hhEqwKlY 0 6 181 2060 0 14 Dtool_hhEqwKlY 301 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
176 14 Dtool_hhEqbuVu 0 4 182 2059 0 14 Dtool_hhEqbuVu 263 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
177 14 Dtool_hhEq9_jG 0 4 182 2059 0 14 Dtool_hhEq9_jG 268 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 name 1 2064  
178 14 Dtool_hhEqMYFS 0 6 183 2112 0 14 Dtool_hhEqMYFS 370 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
179 14 Dtool_hhEqssat 0 4 184 2059 0 14 Dtool_hhEqssat 385 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2115  4 name 1 2064  3 aux 1 2112  
180 14 Dtool_hhEqxuPy 0 7 185 2109 0 14 Dtool_hhEqxuPy 542 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 name 1 2064  
181 14 Dtool_hhEq9jDu 0 7 186 2111 1030 14 Dtool_hhEq9jDu 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 name 1 2064  
182 14 Dtool_hhEqlZBj 0 4 187 2059 0 14 Dtool_hhEqlZBj 377 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  10 vertex_aux 1 2111  
183 14 Dtool_hhEqPXw_ 0 6 188 2072 0 14 Dtool_hhEqPXw_ 292 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
184 14 Dtool_hhEqRa07 0 4 189 2059 0 14 Dtool_hhEqRa07 822 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  14 external_index 1 2072  
185 14 Dtool_hhEqlfWC 0 6 190 2072 0 14 Dtool_hhEqlfWC 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
186 14 Dtool_hhEqPNaK 0 4 191 2059 0 14 Dtool_hhEqPNaK 506 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  15 external_index2 1 2072  
187 14 Dtool_hhEq_8gn 0 6 192 2072 0 14 Dtool_hhEq_8gn 323 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
188 14 Dtool_hhEq3GP5 0 4 193 2059 0 14 Dtool_hhEq3GP5 296 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2116  3 out 1 2065  12 indent_level 1 2072  
189 14 Dtool_hhEqBgJ_ 0 6 194 2060 0 14 Dtool_hhEqBgJ_ 395 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  5 other 1 2116  
190 14 Dtool_hhEqZ_zx 0 6 195 2072 0 14 Dtool_hhEqZ_zx 1165 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  5 other 1 2116  
191 14 Dtool_hhEqQ2Pa 0 6 196 2072 0 14 Dtool_hhEqQ2Pa 384 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
192 14 Dtool_hhEqTVqu 0 6 197 2072 0 14 Dtool_hhEqTVqu 382 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
193 14 Dtool_hhEqHCW9 0 4 198 2059 0 14 Dtool_hhEqHCW9 304 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  3 mat 1 2073  
194 14 Dtool_hhEqZsOw 0 6 199 2060 0 14 Dtool_hhEqZsOw 312 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  5 group 1 2124  
195 14 Dtool_hhEq2kRg 0 4 200 2059 0 14 Dtool_hhEq2kRg 725 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  5 other 1 2116  
196 14 Dtool_hhEq1JbX 0 4 201 2059 0 14 Dtool_hhEq1JbX 325 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
197 14 Dtool_hhEqk0J_ 0 6 202 2072 0 14 Dtool_hhEqk0J_ 338 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 prim 1 2126  
198 14 Dtool_hhEqgTDr 0 4 203 2059 0 14 Dtool_hhEqgTDr 0 1 4 this 3 2116  
199 14 Dtool_hhEqhP_W 0 4 204 2059 0 14 Dtool_hhEqhP_W 0 1 4 this 3 2116  
200 14 Dtool_hhEqOrKC 0 4 205 2059 0 14 Dtool_hhEqOrKC 216 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  3 out 1 2065  
201 14 Dtool_hhEqGT9t 0 7 208 2055 0 14 Dtool_hhEqGT9t 0 0 
202 14 Dtool_hhEqKcUy 0 7 155 2056 0 14 Dtool_hhEqKcUy 0 1 4 this 3 2115  
203 14 Dtool_hhEqlnwr 0 7 156 2115 1154 14 Dtool_hhEqlnwr 0 1 4 this 3 2056  
204 14 Dtool_hhEqodNS 0 6 157 2085 0 14 Dtool_hhEqodNS 0 1 4 this 3 2115  
205 14 Dtool_hhEqTrUk 0 7 158 2115 1154 14 Dtool_hhEqTrUk 0 1 4 this 3 2085  
206 14 Dtool_hhEqTzXy 0 6 206 2096 0 14 Dtool_hhEqTzXy 0 1 4 this 3 2116  
207 14 Dtool_hhEqBdMA 0 7 210 2118 1069 14 Dtool_hhEqBdMA 459 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2128  
208 14 Dtool_hhEqY_4J 0 7 210 2118 1069 14 Dtool_hhEqY_4J 222 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
209 14 Dtool_hhEqrRQ_ 0 6 211 2060 0 14 Dtool_hhEqrRQ_ 878 // Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2128  5 index 1 2072  
210 14 Dtool_hhEqKc1J 0 6 212 2060 0 14 Dtool_hhEqKc1J 386 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
211 14 Dtool_hhEqsCOx 0 6 213 2060 0 14 Dtool_hhEqsCOx 383 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
212 14 Dtool_hhEq_O2t 0 7 214 2115 1154 14 Dtool_hhEq_O2t 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2128  5 index 1 2072  
213 14 Dtool_hhEqGe06 0 7 215 2115 1154 14 Dtool_hhEqGe06 373 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2128  5 index 1 2072  
214 14 Dtool_hhEqB8Di 0 7 216 2115 1154 14 Dtool_hhEqB8Di 619 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  5 index 1 2072  
215 14 Dtool_hhEqX2qU 0 6 217 2072 0 14 Dtool_hhEqX2qU 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
216 14 Dtool_hhEqm_MH 0 4 218 2059 0 14 Dtool_hhEqm_MH 553 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  13 highest_index 1 2072  
217 14 Dtool_hhEqk7ro 0 6 219 2072 0 14 Dtool_hhEqk7ro 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
218 14 Dtool_hhEqtNSd 0 6 220 2060 0 14 Dtool_hhEqtNSd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
219 14 Dtool_hhEqfhjn 0 6 221 2060 0 14 Dtool_hhEqfhjn 324 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
220 14 Dtool_hhEq1q_C 0 6 222 2060 0 14 Dtool_hhEq1q_C 403 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
221 14 Dtool_hhEqmTXK 0 6 224 2060 0 14 Dtool_hhEqmTXK 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
222 14 Dtool_hhEqoss6 0 6 225 2060 0 14 Dtool_hhEqoss6 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
223 14 Dtool_hhEqZ_MQ 0 4 226 2059 0 14 Dtool_hhEqZ_MQ 654 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2128  8 uv_names 1 2076  9 uvw_names 1 2076  9 tbn_names 1 2076  
224 14 Dtool_hhEqVCXp 0 4 227 2059 0 14 Dtool_hhEqVCXp 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2128  9 aux_names 1 2076  
225 14 Dtool_hhEq_u9p 0 6 228 2130 0 14 Dtool_hhEq_u9p 261 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
226 14 Dtool_hhEqG7Zj 0 7 229 2115 1154 14 Dtool_hhEqG7Zj 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2118  6 vertex 1 2115  5 index 1 2072  
227 14 Dtool_hhEqiMXH 0 7 229 2115 1154 14 Dtool_hhEqiMXH 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  6 vertex 1 2115  
228 14 Dtool_hhEqPbgz 0 7 230 2115 1154 14 Dtool_hhEqPbgz 376 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2118  
229 14 Dtool_hhEqmAmN 0 7 230 2115 1154 14 Dtool_hhEqmAmN 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  3 pos 1 2103  
230 14 Dtool_hhEq_DGR 0 7 230 2115 1154 14 Dtool_hhEq_DGR 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  3 pos 1 2106  
231 14 Dtool_hhEqUCmU 0 7 230 2115 1154 14 Dtool_hhEqUCmU 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  3 pos 1 2119  
232 14 Dtool_hhEqqB5d 0 7 230 2115 1154 14 Dtool_hhEqqB5d 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  3 pos 1 1988  
233 14 Dtool_hhEq6VIP 0 7 231 2115 1154 14 Dtool_hhEq6VIP 458 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  4 copy 1 2116  
234 14 Dtool_hhEqxlGu 0 7 232 2115 1154 14 Dtool_hhEqxlGu 478 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  4 copy 1 2116  
235 14 Dtool_hhEqJ0C_ 0 4 233 2059 0 14 Dtool_hhEqJ0C_ 342 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  6 vertex 1 2115  
236 14 Dtool_hhEqrkZg 0 6 234 2072 0 14 Dtool_hhEqrkZg 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2118  
237 14 Dtool_hhEqN9pt 0 4 235 2059 0 14 Dtool_hhEqN9pt 355 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  4 prim 1 2131  
238 14 Dtool_hhEqh7hw 0 4 236 2059 0 14 Dtool_hhEqh7hw 733 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2118  3 mat 1 2073  
239 14 Dtool_hhEqqRjk 0 4 237 2059 0 14 Dtool_hhEqqRjk 457 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2118  
240 14 Dtool_hhEqOYkz 0 7 238 2055 0 14 Dtool_hhEqOYkz 0 0 
241 14 Dtool_hhEqyaS_ 0 7 240 2071 1069 14 Dtool_hhEqyaS_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2132  
242 14 Dtool_hhEq7UZA 0 7 240 2071 1069 14 Dtool_hhEq7UZA 0 1 4 name 1 2064  
243 14 Dtool_hhEq0aiu 0 7 240 2071 1069 14 Dtool_hhEq0aiu 0 0 
244 14 Dtool_hhEqsatI 0 7 241 2071 1069 14 Dtool_hhEqsatI 237 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 copy 1 2132  
245 14 Dtool_hhEqRZjf 0 6 242 2060 0 14 Dtool_hhEqRZjf 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
246 14 Dtool_hhEqn_u7 0 6 243 2130 0 14 Dtool_hhEqn_u7 217 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
247 14 Dtool_hhEqdGRB 0 4 244 2059 0 14 Dtool_hhEqdGRB 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
248 14 Dtool_hhEqWCah 0 7 245 2068 1069 14 Dtool_hhEqWCah 665 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
249 14 Dtool_hhEq7zBu 0 7 246 2068 1069 14 Dtool_hhEq7zBu 857 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
250 14 Dtool_hhEqQ_Zu 0 7 247 2068 1069 14 Dtool_hhEqQ_Zu 385 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 node 1 2068  
251 14 Dtool_hhEqKOID 0 7 248 2068 1069 14 Dtool_hhEqKOID 398 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 node 1 2068  
252 14 Dtool_hhEq0PPR 0 4 249 2059 0 14 Dtool_hhEq0PPR 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  5 other 1 2071  
253 14 Dtool_hhEqIxZU 0 7 250 2068 1069 14 Dtool_hhEqIxZU 410 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2132  4 name 1 2064  
254 14 Dtool_hhEqWpyO 0 6 251 2060 0 14 Dtool_hhEqWpyO 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
255 14 Dtool_hhEqQMtA 0 4 252 2059 0 14 Dtool_hhEqQMtA 472 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  10 searchpath 1 2134  
256 14 Dtool_hhEqGIQc 0 4 253 2059 0 14 Dtool_hhEqGIQc 452 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  9 directory 1 2137  
257 14 Dtool_hhEq1ZhK 0 4 254 2059 0 14 Dtool_hhEq1ZhK 393 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
258 14 Dtool_hhEq_XGy 0 4 255 2059 0 14 Dtool_hhEq_XGy 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2071  9 threshold 1 1988  2 cs 1 2140  
259 14 Dtool_hhEqC1bM 0 4 255 2059 0 14 Dtool_hhEqC1bM 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  9 threshold 1 1988  
260 14 Dtool_hhEqxT4d 0 4 256 2059 0 14 Dtool_hhEqxT4d 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  2 cs 1 2140  
261 14 Dtool_hhEqb2rf 0 4 256 2059 0 14 Dtool_hhEqb2rf 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
262 14 Dtool_hhEqtsfH 0 4 257 2059 0 14 Dtool_hhEqtsfH 606 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
263 14 Dtool_hhEqd7eS 0 6 258 2060 0 14 Dtool_hhEqd7eS 1204 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 uv_name 1 2141  
264 14 Dtool_hhEqyGU5 0 6 258 2060 0 14 Dtool_hhEqyGU5 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  5 names 1 2144  
265 14 Dtool_hhEqWrV6 0 6 259 2060 0 14 Dtool_hhEqWrV6 421 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
266 14 Dtool_hhEq_se2 0 6 261 2072 0 14 Dtool_hhEq_se2 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  5 flags 1 2072  
267 14 Dtool_hhEq0h9U 0 4 262 2059 0 14 Dtool_hhEq0h9U 318 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  5 flags 1 2072  
268 14 Dtool_hhEqbmcy 0 4 263 2059 0 14 Dtool_hhEqbmcy 382 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
269 14 Dtool_hhEqXEMS 0 6 264 2072 0 14 Dtool_hhEqXEMS 260 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 3 4 this 3 2071  12 strip_prefix 1 2076  7 recurse 1 2060  
270 14 Dtool_hhEqfhj6 0 6 265 2072 0 14 Dtool_hhEqfhj6 1111 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 recurse 1 2060  
271 14 Dtool_hhEqlgIl 0 6 266 2072 0 14 Dtool_hhEqlgIl 453 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 recurse 1 2060  
272 14 Dtool_hhEqNnDZ 0 4 267 2059 0 14 Dtool_hhEqNnDZ 635 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
273 14 Dtool_hhEqVHnl 0 4 268 2059 0 14 Dtool_hhEqVHnl 463 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
274 14 Dtool_hhEqsdwz 0 4 269 2059 0 14 Dtool_hhEqsdwz 1614 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 4 4 this 3 2071  21 use_connected_shading 1 2060  19 allow_per_primitive 1 2060  7 recurse 1 2060  
275 14 Dtool_hhEqdiHh 0 4 270 2059 0 14 Dtool_hhEqdiHh 768 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 recurse 1 2060  
276 14 Dtool_hhEqm0yZ 0 4 271 2059 0 14 Dtool_hhEqm0yZ 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 recurse 1 2060  
277 14 Dtool_hhEqUq1z 0 4 272 2059 0 14 Dtool_hhEqUq1z 490 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  7 recurse 1 2060  
278 14 Dtool_hhEqsIZU 0 6 273 2060 0 14 Dtool_hhEqsIZU 380 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
279 14 Dtool_hhEqE4HK 0 6 274 2060 0 14 Dtool_hhEqE4HK 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
280 14 Dtool_hhEq0QVV 0 6 275 2060 0 14 Dtool_hhEq0QVV 417 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2132  
281 14 Dtool_hhEqdAYG 0 6 276 2060 0 14 Dtool_hhEqdAYG 765 // Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
//////////////////////////////////////////////////////////////////// 2 2 v1 1 2146  2 v2 1 2146  
282 14 Dtool_hhEql4Aq 0 7 277 2055 0 14 Dtool_hhEql4Aq 0 0 
283 14 Dtool_hhEqTDmL 0 7 279 2078 1298 14 Dtool_hhEqTDmL 222 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
284 14 Dtool_hhEqD72v 0 7 279 2078 1298 14 Dtool_hhEqD72v 716 // Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2149  
285 14 Dtool_hhEqr5z0 0 6 280 2078 0 14 Dtool_hhEqr5z0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 copy 1 2149  
286 14 Dtool_hhEqtH5E 0 4 281 2059 0 14 Dtool_hhEqtH5E 301 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2149  3 out 1 2065  12 indent_level 1 2072  
287 14 Dtool_hhEq7kse 0 4 286 2059 0 14 Dtool_hhEq7kse 849 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 mode 1 1980  
288 14 Dtool_hhEq3t3A 0 6 287 1980 0 14 Dtool_hhEq3t3A 357 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
289 14 Dtool_hhEqCEUa 0 4 288 2059 0 14 Dtool_hhEqCEUa 412 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 mode 1 1981  
290 14 Dtool_hhEqaHHZ 0 6 289 1981 0 14 Dtool_hhEqaHHZ 376 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
291 14 Dtool_hhEqOa7S 0 4 290 2059 0 14 Dtool_hhEqOa7S 521 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 mode 1 1982  
292 14 Dtool_hhEqkkuX 0 6 291 1982 0 14 Dtool_hhEqkkuX 373 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
293 14 Dtool_hhEqreNq 0 4 292 2059 0 14 Dtool_hhEqreNq 530 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 mode 1 1983  
294 14 Dtool_hhEqta47 0 6 293 1983 0 14 Dtool_hhEqta47 372 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
295 14 Dtool_hhEquxBz 0 4 294 2059 0 14 Dtool_hhEquxBz 459 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  4 bias 1 2072  
296 14 Dtool_hhEqScq9 0 6 295 2072 0 14 Dtool_hhEqScq9 336 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
297 14 Dtool_hhEq0eEO 0 6 296 2060 0 14 Dtool_hhEq0eEO 348 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
298 14 Dtool_hhEq1yzp 0 4 297 2059 0 14 Dtool_hhEq1yzp 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2078  
299 14 Dtool_hhEq1SSq 0 4 298 2059 0 14 Dtool_hhEq1SSq 534 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  5 order 1 2072  
300 14 Dtool_hhEqY4RM 0 6 299 2072 0 14 Dtool_hhEqY4RM 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
301 14 Dtool_hhEqV5rc 0 6 300 2060 0 14 Dtool_hhEqV5rc 342 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
302 14 Dtool_hhEqgDCN 0 4 301 2059 0 14 Dtool_hhEqgDCN 324 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2078  
303 14 Dtool_hhEqOpBx 0 4 302 2059 0 14 Dtool_hhEqOpBx 691 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2078  3 bin 1 2064  
304 14 Dtool_hhEqtssd 0 6 303 2064 0 14 Dtool_hhEqtssd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
305 14 Dtool_hhEq6rGu 0 6 304 2060 0 14 Dtool_hhEq6rGu 319 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2149  
306 14 Dtool_hhEqlrzU 0 4 305 2059 0 14 Dtool_hhEqlrzU 315 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2078  
307 14 Dtool_hhEqpyzm 0 6 306 2060 0 14 Dtool_hhEqpyzm 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2149  5 other 1 2149  
308 14 Dtool_hhEqV_Rm 0 6 307 2060 0 14 Dtool_hhEqV_Rm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2149  5 other 1 2149  
309 14 Dtool_hhEqT1ZU 0 6 308 2060 0 14 Dtool_hhEqT1ZU 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2149  5 other 1 2149  
310 14 Dtool_hhEqX3lo 0 6 309 1980 0 14 Dtool_hhEqX3lo 413 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
311 14 Dtool_hhEqj8l7 0 6 310 1981 0 14 Dtool_hhEqj8l7 447 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
312 14 Dtool_hhEqecqF 0 6 311 1982 0 14 Dtool_hhEqecqF 444 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
313 14 Dtool_hhEqMsGH 0 6 312 1983 0 14 Dtool_hhEqMsGH 437 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
314 14 Dtool_hhEqYBRs 0 7 313 2055 0 14 Dtool_hhEqYBRs 0 0 
315 14 Dtool_hhEqmgGu 0 7 316 2151 1301 14 Dtool_hhEqmgGu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
316 14 Dtool_hhEqqhDZ 0 7 316 2151 1301 14 Dtool_hhEqqhDZ 226 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2152  
317 14 Dtool_hhEqQzqw 0 6 317 2151 0 14 Dtool_hhEqQzqw 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  4 copy 1 2152  
318 14 Dtool_hhEqdMr5 0 4 319 2059 0 14 Dtool_hhEqdMr5 266 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
319 14 Dtool_hhEqserh 0 4 320 2059 0 14 Dtool_hhEqserh 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  9 translate 1 2146  
320 14 Dtool_hhEqdeDW 0 4 321 2059 0 14 Dtool_hhEqdeDW 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  9 translate 1 2088  
321 14 Dtool_hhEqgbuR 0 4 322 2059 0 14 Dtool_hhEqgbuR 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 angle 1 1988  
322 14 Dtool_hhEqi76M 0 4 323 2059 0 14 Dtool_hhEqi76M 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 angle 1 1988  
323 14 Dtool_hhEqiDrW 0 4 324 2059 0 14 Dtool_hhEqiDrW 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 angle 1 1988  
324 14 Dtool_hhEqiLcg 0 4 325 2059 0 14 Dtool_hhEqiLcg 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 angle 1 1988  
325 14 Dtool_hhEqNSrS 0 4 326 2059 0 14 Dtool_hhEqNSrS 403 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  4 quat 1 2154  
326 14 Dtool_hhEq5cDY 0 4 326 2059 0 14 Dtool_hhEq5cDY 406 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  5 angle 1 1988  4 axis 1 2088  
327 14 Dtool_hhEq_EZa 0 4 327 2059 0 14 Dtool_hhEq_EZa 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 scale 1 2157  
328 14 Dtool_hhEqnxdo 0 4 328 2059 0 14 Dtool_hhEqnxdo 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 scale 1 2160  
329 14 Dtool_hhEqX0Zd 0 4 329 2059 0 14 Dtool_hhEqX0Zd 277 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 scale 1 1988  
330 14 Dtool_hhEq4xVb 0 4 330 2059 0 14 Dtool_hhEq4xVb 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 mat 1 2163  
331 14 Dtool_hhEqyNWT 0 4 331 2059 0 14 Dtool_hhEqyNWT 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 mat 1 2073  
332 14 Dtool_hhEqICsz 0 6 332 2060 0 14 Dtool_hhEqICsz 432 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
333 14 Dtool_hhEqAHYm 0 6 333 2060 0 14 Dtool_hhEqAHYm 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
334 14 Dtool_hhEqBcLy 0 4 334 2059 0 14 Dtool_hhEqBcLy 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 mat 1 2163  
335 14 Dtool_hhEqKHQX 0 6 335 2060 0 14 Dtool_hhEqKHQX 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
336 14 Dtool_hhEqSfjm 0 4 336 2059 0 14 Dtool_hhEqSfjm 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 mat 1 2073  
337 14 Dtool_hhEq_l37 0 7 337 2166 0 14 Dtool_hhEq_l37 348 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
338 14 Dtool_hhEqxlvs 0 6 338 2073 0 14 Dtool_hhEqxlvs 450 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
339 14 Dtool_hhEqDiCM 0 6 339 2060 0 14 Dtool_hhEqDiCM 318 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
340 14 Dtool_hhEqn3Zw 0 6 341 2072 0 14 Dtool_hhEqn3Zw 306 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
341 14 Dtool_hhEqUtyU 0 6 342 1985 0 14 Dtool_hhEqUtyU 267 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
342 14 Dtool_hhEqQrgR 0 6 343 1988 0 14 Dtool_hhEqQrgR 531 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
343 14 Dtool_hhEqv2X0 0 6 344 2157 0 14 Dtool_hhEqv2X0 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
344 14 Dtool_hhEquWbb 0 6 345 2160 0 14 Dtool_hhEquWbb 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
345 14 Dtool_hhEqggA0 0 6 346 2163 0 14 Dtool_hhEqggA0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
346 14 Dtool_hhEqhADb 0 6 347 2073 0 14 Dtool_hhEqhADb 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  1 n 1 2072  
347 14 Dtool_hhEqnJrv 0 4 348 2059 0 14 Dtool_hhEqnJrv 292 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2152  3 out 1 2065  12 indent_level 1 2072  5 label 1 2064  
348 14 Dtool_hhEqMAjk 0 7 350 2169 1335 14 Dtool_hhEqMAjk 0 1 4 this 3 2167  
349 14 Dtool_hhEqdfeb 0 4 351 2059 0 14 Dtool_hhEqdfeb 0 3 4 this 3 2167  3 out 1 2065  12 indent_level 1 2072  
350 14 Dtool_hhEqXbAk 0 4 352 2059 0 14 Dtool_hhEqXbAk 0 2 4 this 3 2169  3 mat 1 2073  
351 14 Dtool_hhEqgiFq 0 7 353 2055 0 14 Dtool_hhEqgiFq 0 0 
352 14 Dtool_hhEqemc2 0 7 356 2170 1345 14 Dtool_hhEqemc2 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 9 switch_in 1 1988  10 switch_out 1 1988  6 center 1 2106  4 fade 1 1988  
353 14 Dtool_hhEq_Nir 0 7 356 2170 1345 14 Dtool_hhEq_Nir 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 9 switch_in 1 1988  10 switch_out 1 1988  6 center 1 2106  
354 14 Dtool_hhEqq5Bf 0 7 370 2055 0 14 Dtool_hhEqq5Bf 0 0 
355 14 Dtool_hhEqO5L_ 0 6 358 1988 0 14 Dtool_hhEqO5L_ 0 1 4 this 3 2171  
356 14 Dtool_hhEq3UK1 0 4 359 2059 0 14 Dtool_hhEq3UK1 0 2 4 this 3 2170  5 value 1 1988  
357 14 Dtool_hhEqQD2H 0 6 361 1988 0 14 Dtool_hhEqQD2H 0 1 4 this 3 2171  
358 14 Dtool_hhEq1NkY 0 4 362 2059 0 14 Dtool_hhEq1NkY 0 2 4 this 3 2170  5 value 1 1988  
359 14 Dtool_hhEqird7 0 6 364 1988 0 14 Dtool_hhEqird7 0 1 4 this 3 2171  
360 14 Dtool_hhEqIshZ 0 4 365 2059 0 14 Dtool_hhEqIshZ 0 2 4 this 3 2170  5 value 1 1988  
361 14 Dtool_hhEqqtNt 0 6 368 2106 0 14 Dtool_hhEqqtNt 0 1 4 this 3 2171  
362 14 Dtool_hhEqGDad 0 7 387 2173 1354 14 Dtool_hhEqGDad 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2124  
363 14 Dtool_hhEqA1nz 0 7 387 2173 1354 14 Dtool_hhEqA1nz 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
364 14 Dtool_hhEqo0fE 0 7 387 2173 1354 14 Dtool_hhEqo0fE 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
365 14 Dtool_hhEq4lhn 0 7 388 2173 1354 14 Dtool_hhEq4lhn 233 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 copy 1 2124  
366 14 Dtool_hhEq4Dn7 0 4 390 2059 0 14 Dtool_hhEq4Dn7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
367 14 Dtool_hhEqn03j 0 4 391 2059 0 14 Dtool_hhEqn03j 326 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
368 14 Dtool_hhEqxbxc 0 4 392 2059 0 14 Dtool_hhEqxbxc 322 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
369 14 Dtool_hhEqxeV_ 0 4 393 2059 0 14 Dtool_hhEqxeV_ 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
370 14 Dtool_hhEqsgHb 0 4 394 2059 0 14 Dtool_hhEqsgHb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
371 14 Dtool_hhEq0xU5 0 4 395 2059 0 14 Dtool_hhEq0xU5 317 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
372 14 Dtool_hhEqIFLx 0 4 396 2059 0 14 Dtool_hhEqIFLx 272 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
373 14 Dtool_hhEql6kP 0 4 397 2059 0 14 Dtool_hhEql6kP 301 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
374 14 Dtool_hhEqeW5J 0 4 398 2059 0 14 Dtool_hhEqeW5J 344 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2124  3 out 1 2065  12 indent_level 1 2072  
375 14 Dtool_hhEqwL5B 0 6 399 2060 0 14 Dtool_hhEqwL5B 508 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
376 14 Dtool_hhEqBkMb 0 6 400 2078 0 14 Dtool_hhEqBkMb 554 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
377 14 Dtool_hhEqmFzS 0 6 401 2078 0 14 Dtool_hhEqmFzS 566 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
378 14 Dtool_hhEqTTlV 0 6 402 2078 0 14 Dtool_hhEqTTlV 564 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
379 14 Dtool_hhEqVd5a 0 6 403 2078 0 14 Dtool_hhEqVd5a 563 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
380 14 Dtool_hhEqRcRh 0 6 404 2078 0 14 Dtool_hhEqRcRh 540 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
381 14 Dtool_hhEq76XI 0 6 405 2078 0 14 Dtool_hhEq76XI 536 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
382 14 Dtool_hhEqoQnq 0 6 406 2078 0 14 Dtool_hhEqoQnq 523 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
383 14 Dtool_hhEqJ8J_ 0 6 407 2060 0 14 Dtool_hhEqJ8J_ 619 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
384 14 Dtool_hhEqeytv 0 6 408 2060 0 14 Dtool_hhEqeytv 607 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
385 14 Dtool_hhEq_8Pb 0 4 409 2059 0 14 Dtool_hhEq_8Pb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 type 1 1991  
386 14 Dtool_hhEqCug2 0 6 410 1991 0 14 Dtool_hhEqCug2 707 // Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
387 14 Dtool_hhEqrrYW 0 6 411 2060 0 14 Dtool_hhEqrrYW 668 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
388 14 Dtool_hhEqPYft 0 4 412 2059 0 14 Dtool_hhEqPYft 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 type 1 1993  
389 14 Dtool_hhEqUh7T 0 6 413 1993 0 14 Dtool_hhEqUh7T 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
390 14 Dtool_hhEqVkAl 0 4 414 2059 0 14 Dtool_hhEqVkAl 1120 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  16 billboard_center 1 2106  
391 14 Dtool_hhEqx2ed 0 4 415 2059 0 14 Dtool_hhEqx2ed 231 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
392 14 Dtool_hhEqVHfQ 0 6 416 2060 0 14 Dtool_hhEqVHfQ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
393 14 Dtool_hhEqyHSo 0 6 417 2106 0 14 Dtool_hhEqyHSo 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
394 14 Dtool_hhEqx6Vi 0 4 418 2059 0 14 Dtool_hhEqx6Vi 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 type 1 1994  
395 14 Dtool_hhEqvaDZ 0 6 419 1994 0 14 Dtool_hhEqvaDZ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
396 14 Dtool_hhEqGbxk 0 4 420 2059 0 14 Dtool_hhEqGbxk 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 flags 1 2072  
397 14 Dtool_hhEqB6er 0 6 421 1995 0 14 Dtool_hhEqB6er 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
398 14 Dtool_hhEqf_or 0 4 422 2059 0 14 Dtool_hhEqf_or 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  14 collision_name 1 2064  
399 14 Dtool_hhEq2IvZ 0 4 423 2059 0 14 Dtool_hhEq2IvZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
400 14 Dtool_hhEqW1Ru 0 6 424 2060 0 14 Dtool_hhEqW1Ru 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
401 14 Dtool_hhEqs1EG 0 6 425 2064 0 14 Dtool_hhEqs1EG 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
402 14 Dtool_hhEq1BYb 0 4 426 2059 0 14 Dtool_hhEq1BYb 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 type 1 1992  
403 14 Dtool_hhEq6COw 0 6 427 1992 0 14 Dtool_hhEq6COw 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
404 14 Dtool_hhEqfCbY 0 6 428 2060 0 14 Dtool_hhEqfCbY 316 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
405 14 Dtool_hhEqf8q2 0 4 429 2059 0 14 Dtool_hhEqf8q2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 type 1 1996  
406 14 Dtool_hhEqLvy6 0 6 430 1996 0 14 Dtool_hhEqLvy6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
407 14 Dtool_hhEq41Ux 0 4 431 2059 0 14 Dtool_hhEq41Ux 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
408 14 Dtool_hhEq0H1c 0 6 432 2060 0 14 Dtool_hhEq0H1c 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
409 14 Dtool_hhEqlCF0 0 4 433 2059 0 14 Dtool_hhEqlCF0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 fps 1 1988  
410 14 Dtool_hhEq8G_G 0 6 434 1988 0 14 Dtool_hhEq8G_G 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
411 14 Dtool_hhEqAKpq 0 4 435 2059 0 14 Dtool_hhEqAKpq 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  11 object_type 1 2064  
412 14 Dtool_hhEqLFHb 0 4 436 2059 0 14 Dtool_hhEqLFHb 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
413 14 Dtool_hhEqJ86I 0 6 437 2072 0 14 Dtool_hhEqJ86I 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
414 14 Dtool_hhEqa9XK 0 6 438 2064 0 14 Dtool_hhEqa9XK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  5 index 1 2072  
415 14 Dtool_hhEqZ76F 0 6 439 2060 0 14 Dtool_hhEqZ76F 332 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  11 object_type 1 2064  
416 14 Dtool_hhEqOHD5 0 6 440 2060 0 14 Dtool_hhEqOHD5 440 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  11 object_type 1 2064  
417 14 Dtool_hhEqGIqq 0 4 441 2059 0 14 Dtool_hhEqGIqq 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
418 14 Dtool_hhEqT2IL 0 6 442 2060 0 14 Dtool_hhEqT2IL 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
419 14 Dtool_hhEqxoGr 0 4 443 2059 0 14 Dtool_hhEqxoGr 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
420 14 Dtool_hhEqPvu3 0 6 444 2060 0 14 Dtool_hhEqPvu3 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
421 14 Dtool_hhEqSunb 0 4 445 2059 0 14 Dtool_hhEqSunb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
422 14 Dtool_hhEqA4F8 0 6 446 2060 0 14 Dtool_hhEqA4F8 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
423 14 Dtool_hhEq_rVD 0 4 447 2059 0 14 Dtool_hhEq_rVD 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
424 14 Dtool_hhEqhgzj 0 6 448 2060 0 14 Dtool_hhEqhgzj 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
425 14 Dtool_hhEq_U5j 0 4 449 2059 0 14 Dtool_hhEq_U5j 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
426 14 Dtool_hhEqn6bP 0 6 450 2060 0 14 Dtool_hhEqn6bP 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
427 14 Dtool_hhEqQTF_ 0 4 451 2059 0 14 Dtool_hhEqQTF_ 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
428 14 Dtool_hhEqkFnp 0 6 452 2060 0 14 Dtool_hhEqkFnp 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
429 14 Dtool_hhEqU_FO 0 4 453 2059 0 14 Dtool_hhEqU_FO 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
430 14 Dtool_hhEqnIc_ 0 6 454 2060 0 14 Dtool_hhEqnIc_ 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
431 14 Dtool_hhEqivYc 0 4 455 2059 0 14 Dtool_hhEqivYc 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
432 14 Dtool_hhEqVOiF 0 6 456 2060 0 14 Dtool_hhEqVOiF 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
433 14 Dtool_hhEqeROZ 0 4 457 2059 0 14 Dtool_hhEqeROZ 335 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 flag 1 2060  
434 14 Dtool_hhEq1pLz 0 4 458 2059 0 14 Dtool_hhEq1pLz 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
435 14 Dtool_hhEq_iEO 0 6 459 2060 0 14 Dtool_hhEq_iEO 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
436 14 Dtool_hhEqUi3l 0 6 460 2060 0 14 Dtool_hhEqUi3l 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
437 14 Dtool_hhEq1gfh 0 4 461 2059 0 14 Dtool_hhEq1gfh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 mask 1 2174  
438 14 Dtool_hhEqL2rQ 0 4 462 2059 0 14 Dtool_hhEqL2rQ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
439 14 Dtool_hhEqhy6F 0 6 463 2060 0 14 Dtool_hhEqhy6F 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
440 14 Dtool_hhEqGxtd 0 7 464 2174 0 14 Dtool_hhEqGxtd 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
441 14 Dtool_hhEqUUte 0 4 465 2059 0 14 Dtool_hhEqUUte 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 mask 1 2174  
442 14 Dtool_hhEqzsDo 0 4 466 2059 0 14 Dtool_hhEqzsDo 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
443 14 Dtool_hhEqPGMA 0 6 467 2060 0 14 Dtool_hhEqPGMA 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
444 14 Dtool_hhEqkHBY 0 7 468 2174 0 14 Dtool_hhEqkHBY 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
445 14 Dtool_hhEqJQ9_ 0 4 469 2059 0 14 Dtool_hhEqJQ9_ 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 mask 1 2174  
446 14 Dtool_hhEqnw2o 0 4 470 2059 0 14 Dtool_hhEqnw2o 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
447 14 Dtool_hhEqFwdg 0 6 471 2060 0 14 Dtool_hhEqFwdg 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
448 14 Dtool_hhEqgwQ4 0 7 472 2174 0 14 Dtool_hhEqgwQ4 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
449 14 Dtool_hhEqd41w 0 4 473 2059 0 14 Dtool_hhEqd41w 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  10 blend_mode 1 1997  
450 14 Dtool_hhEqrtNy 0 6 474 1997 0 14 Dtool_hhEqrtNy 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
451 14 Dtool_hhEqpJnY 0 4 475 2059 0 14 Dtool_hhEqpJnY 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  15 blend_operand_a 1 1998  
452 14 Dtool_hhEqHARo 0 6 476 1998 0 14 Dtool_hhEqHARo 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
453 14 Dtool_hhEqhOn0 0 4 477 2059 0 14 Dtool_hhEqhOn0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  15 blend_operand_b 1 1998  
454 14 Dtool_hhEqI9RE 0 6 478 1998 0 14 Dtool_hhEqI9RE 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
455 14 Dtool_hhEqzp1m 0 4 479 2059 0 14 Dtool_hhEqzp1m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  11 blend_color 1 2093  
456 14 Dtool_hhEq5NwH 0 4 480 2059 0 14 Dtool_hhEq5NwH 265 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
457 14 Dtool_hhEqTtqa 0 6 481 2060 0 14 Dtool_hhEqTtqa 310 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
458 14 Dtool_hhEqstdy 0 6 482 2093 0 14 Dtool_hhEqstdy 324 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
459 14 Dtool_hhEqIRO1 0 4 483 2059 0 14 Dtool_hhEqIRO1 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 lod 1 2167  
460 14 Dtool_hhEqq3tX 0 4 484 2059 0 14 Dtool_hhEqq3tX 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
461 14 Dtool_hhEqXcWg 0 6 485 2060 0 14 Dtool_hhEqXcWg 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
462 14 Dtool_hhEqKcL4 0 7 486 2167 0 14 Dtool_hhEqKcL4 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
463 14 Dtool_hhEqAteX 0 4 487 2059 0 14 Dtool_hhEqAteX 878 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2173  3 key 1 2064  5 value 1 2064  
464 14 Dtool_hhEqezZY 0 6 488 2064 0 14 Dtool_hhEqezZY 433 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  3 key 1 2064  
465 14 Dtool_hhEq7ymA 0 6 489 2060 0 14 Dtool_hhEq7ymA 404 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  3 key 1 2064  
466 14 Dtool_hhEq6Cat 0 4 490 2059 0 14 Dtool_hhEq6Cat 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 key 1 2064  
467 14 Dtool_hhEqDa06 0 6 491 2152 0 14 Dtool_hhEqDa06 603 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
468 14 Dtool_hhEqsMDk 0 6 492 2151 0 14 Dtool_hhEqsMDk 605 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
469 14 Dtool_hhEq9f2J 0 4 493 2059 0 14 Dtool_hhEq9f2J 580 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  9 transform 1 2152  
470 14 Dtool_hhEq0e90 0 4 494 2059 0 14 Dtool_hhEq0e90 305 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
471 14 Dtool_hhEqXeBY 0 4 495 2059 0 14 Dtool_hhEqXeBY 0 2 4 this 3 2173  7 u_speed 1 1988  
472 14 Dtool_hhEqXGyh 0 4 496 2059 0 14 Dtool_hhEqXGyh 0 2 4 this 3 2173  7 v_speed 1 1988  
473 14 Dtool_hhEqWmv6 0 4 497 2059 0 14 Dtool_hhEqWmv6 0 2 4 this 3 2173  7 r_speed 1 1988  
474 14 Dtool_hhEqZV09 0 6 498 1988 0 14 Dtool_hhEqZV09 0 1 4 this 3 2124  
475 14 Dtool_hhEqadlH 0 6 499 1988 0 14 Dtool_hhEqadlH 0 1 4 this 3 2124  
476 14 Dtool_hhEqZ9ig 0 6 500 1988 0 14 Dtool_hhEqZ9ig 0 1 4 this 3 2124  
477 14 Dtool_hhEqSS3d 0 6 501 2060 0 14 Dtool_hhEqSS3d 0 1 4 this 3 2173  
478 14 Dtool_hhEqHB62 0 4 502 2059 0 14 Dtool_hhEqHB62 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2173  4 vert 1 2115  10 membership 1 1988  
479 14 Dtool_hhEql5JZ 0 4 502 2059 0 14 Dtool_hhEql5JZ 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 vert 1 2115  
480 14 Dtool_hhEqEYVk 0 4 503 2059 0 14 Dtool_hhEqEYVk 372 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 vert 1 2115  
481 14 Dtool_hhEq7o8l 0 4 504 2059 0 14 Dtool_hhEq7o8l 273 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
482 14 Dtool_hhEqu4_n 0 6 505 1988 0 14 Dtool_hhEqu4_n 390 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  4 vert 1 2116  
483 14 Dtool_hhEqcwbO 0 4 506 2059 0 14 Dtool_hhEqcwbO 340 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2173  4 vert 1 2115  10 membership 1 1988  
484 14 Dtool_hhEquK6m 0 4 507 2059 0 14 Dtool_hhEquK6m 450 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 other 1 2173  
485 14 Dtool_hhEqhtdv 0 4 508 2059 0 14 Dtool_hhEqhtdv 0 1 4 this 3 2124  
486 14 Dtool_hhEq93Zh 0 4 509 2059 0 14 Dtool_hhEq93Zh 464 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 group 1 2173  
487 14 Dtool_hhEqakcS 0 6 510 2072 0 14 Dtool_hhEqakcS 321 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2124  
488 14 Dtool_hhEqg97e 0 7 511 2173 1354 14 Dtool_hhEqg97e 308 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2124  1 n 1 2072  
489 14 Dtool_hhEqaZFu 0 4 512 2059 0 14 Dtool_hhEqaZFu 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  1 n 1 2072  
490 14 Dtool_hhEqGl6H 0 4 513 2059 0 14 Dtool_hhEqGl6H 315 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
491 14 Dtool_hhEq4npg 0 6 514 1991 0 14 Dtool_hhEq4npg 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
492 14 Dtool_hhEqHRvQ 0 6 515 1996 0 14 Dtool_hhEqHRvQ 409 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
493 14 Dtool_hhEqSWba 0 6 516 1992 0 14 Dtool_hhEqSWba 413 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
494 14 Dtool_hhEq5ugT 0 6 517 1993 0 14 Dtool_hhEq5ugT 424 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
495 14 Dtool_hhEqJTFH 0 6 518 1994 0 14 Dtool_hhEqJTFH 428 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
496 14 Dtool_hhEqm6lB 0 6 519 1995 0 14 Dtool_hhEqm6lB 546 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
497 14 Dtool_hhEqZVpI 0 6 520 1997 0 14 Dtool_hhEqZVpI 406 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
498 14 Dtool_hhEq6SMq 0 6 521 1998 0 14 Dtool_hhEq6SMq 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2064  
499 14 Dtool_hhEqSfTP 0 7 522 2055 0 14 Dtool_hhEqSfTP 0 0 
500 14 Dtool_hhEqrm2D 0 7 373 2071 1069 14 Dtool_hhEqrm2D 0 1 4 this 3 2173  
501 14 Dtool_hhEqFwi7 0 7 374 2173 1354 14 Dtool_hhEqFwi7 0 1 4 this 3 2071  
502 14 Dtool_hhEqyqbi 0 6 375 2078 0 14 Dtool_hhEqyqbi 0 1 4 this 3 2173  
503 14 Dtool_hhEqj6hd 0 7 376 2173 1354 14 Dtool_hhEqj6hd 0 1 4 this 3 2078  
504 14 Dtool_hhEqo_zk 0 6 377 2151 0 14 Dtool_hhEqo_zk 0 1 4 this 3 2173  
505 14 Dtool_hhEqrQmh 0 7 378 2173 1354 14 Dtool_hhEqrQmh 0 1 4 this 3 2151  
506 14 Dtool_hhEqE04m 0 7 524 2178 1492 14 Dtool_hhEqE04m 220 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2176  
507 14 Dtool_hhEq5VW_ 0 7 524 2178 1492 14 Dtool_hhEq5VW_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2124  
508 14 Dtool_hhEqxysi 0 7 524 2178 1492 14 Dtool_hhEqxysi 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
509 14 Dtool_hhEqcVXw 0 7 524 2178 1492 14 Dtool_hhEqcVXw 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
510 14 Dtool_hhEq35b4 0 4 525 2059 0 14 Dtool_hhEq35b4 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  10 bin_number 1 2072  
511 14 Dtool_hhEq39QH 0 6 526 2072 0 14 Dtool_hhEq39QH 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2176  
512 14 Dtool_hhEqDJum 0 7 527 2055 0 14 Dtool_hhEqDJum 0 0 
513 14 Dtool_hhEq8q6p 0 6 530 2072 0 14 Dtool_hhEq8q6p 460 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  10 root_group 1 2071  
514 14 Dtool_hhEqQ2a2 0 4 531 2059 0 14 Dtool_hhEqQ2a2 419 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  4 node 1 2068  
515 14 Dtool_hhEq_qCk 0 6 532 2072 0 14 Dtool_hhEq_qCk 0 2 4 this 3 2179  4 node 1 2069  
516 14 Dtool_hhEqZCvy 0 6 533 2060 0 14 Dtool_hhEqZCvy 669 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
//////////////////////////////////////////////////////////////////// 4 4 this 3 2179  10 bin_number 1 2072  1 a 1 2069  1 b 1 2069  
517 14 Dtool_hhEqGhQi 0 6 534 2060 0 14 Dtool_hhEqGhQi 398 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2179  5 group 1 2124  10 bin_number 1 2072  
518 14 Dtool_hhEqHt3e 0 6 535 2064 0 14 Dtool_hhEqHt3e 381 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2179  10 bin_number 1 2072  5 child 1 2069  
519 14 Dtool_hhEqnETC 0 7 536 2178 1492 14 Dtool_hhEqnETC 655 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2179  10 bin_number 1 2072  5 child 1 2069  13 collapse_from 1 2173  
520 14 Dtool_hhEq_kc_ 0 7 537 2055 0 14 Dtool_hhEq_kc_ 0 0 
521 14 Dtool_hhEqljwn 0 7 539 2182 1507 14 Dtool_hhEqljwn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2180  
522 14 Dtool_hhEqPzAM 0 7 539 2182 1507 14 Dtool_hhEqPzAM 705 // Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2064  7 comment 1 2064  
523 14 Dtool_hhEqAmi9 0 7 540 2182 1507 14 Dtool_hhEqAmi9 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2182  4 copy 1 2180  
524 14 Dtool_hhEqokdP 0 7 540 2182 1507 14 Dtool_hhEqokdP 227 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2182  7 comment 1 2064  
525 14 Dtool_hhEq_5Ek 0 4 542 2059 0 14 Dtool_hhEq_5Ek 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2182  7 comment 1 2064  
526 14 Dtool_hhEqgAcI 0 6 543 2064 0 14 Dtool_hhEqgAcI 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2180  
527 14 Dtool_hhEqikvz 0 7 544 2055 0 14 Dtool_hhEqikvz 0 0 
528 14 Dtool_hhEqJt6A 0 6 541 2064 0 14 Dtool_hhEqJt6A 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2180  
529 14 Dtool_hhEq_1Ie 0 7 547 2183 1515 14 Dtool_hhEq_1Ie 237 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2183  4 copy 1 2184  
530 14 Dtool_hhEqXj7g 0 6 548 2064 0 14 Dtool_hhEqXj7g 297 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2184  
531 14 Dtool_hhEqXJxZ 0 6 549 2137 0 14 Dtool_hhEqXJxZ 276 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2184  
532 14 Dtool_hhEqA0g1 0 4 550 2059 0 14 Dtool_hhEqA0g1 225 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2183  8 filename 1 2137  
533 14 Dtool_hhEq8Thq 0 6 551 2137 0 14 Dtool_hhEq8Thq 822 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2184  
534 14 Dtool_hhEqI1PG 0 4 552 2059 0 14 Dtool_hhEqI1PG 316 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2183  8 fullpath 1 2137  
535 14 Dtool_hhEqMHF_ 0 7 553 2055 0 14 Dtool_hhEqMHF_ 0 0 
536 14 Dtool_hhEqhng8 0 7 562 2188 1524 14 Dtool_hhEqhng8 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2186  
537 14 Dtool_hhEqzo9s 0 7 562 2188 1524 14 Dtool_hhEqzo9s 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 tref_name 1 2064  8 filename 1 2137  
538 14 Dtool_hhEq0TMq 0 7 563 2188 1524 14 Dtool_hhEq0TMq 235 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 copy 1 2186  
539 14 Dtool_hhEqBpY9 0 4 565 2059 0 14 Dtool_hhEqBpY9 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2186  3 out 1 2065  12 indent_level 1 2072  
540 14 Dtool_hhEqUj_f 0 6 567 2060 0 14 Dtool_hhEqUj_f 1471 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2186  5 other 1 2186  2 eq 1 2072  
541 14 Dtool_hhEqzib2 0 6 568 2060 0 14 Dtool_hhEqzib2 502 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2186  5 other 1 2186  2 eq 1 2072  
542 14 Dtool_hhEqmUrS 0 6 569 2060 0 14 Dtool_hhEqmUrS 537 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  14 num_components 1 2072  
543 14 Dtool_hhEqyubp 0 4 583 2059 0 14 Dtool_hhEqyubp 713 // Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  12 texture_type 1 2005  
544 14 Dtool_hhEqippZ 0 6 584 2005 0 14 Dtool_hhEqippZ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
545 14 Dtool_hhEqN8dF 0 4 585 2059 0 14 Dtool_hhEqN8dF 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  6 format 1 2006  
546 14 Dtool_hhEqkehA 0 6 586 2006 0 14 Dtool_hhEqkehA 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
547 14 Dtool_hhEquZpO 0 4 587 2059 0 14 Dtool_hhEquZpO 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 mode 1 2007  
548 14 Dtool_hhEqc1f8 0 6 588 2007 0 14 Dtool_hhEqc1f8 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
549 14 Dtool_hhEqDsmU 0 4 589 2059 0 14 Dtool_hhEqDsmU 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 mode 1 2008  
550 14 Dtool_hhEq8r0r 0 6 590 2008 0 14 Dtool_hhEq8r0r 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
551 14 Dtool_hhEqgtfQ 0 4 591 2059 0 14 Dtool_hhEqgtfQ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 mode 1 2008  
552 14 Dtool_hhEqefXa 0 6 592 2008 0 14 Dtool_hhEqefXa 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
553 14 Dtool_hhEqHY2e 0 6 593 2008 0 14 Dtool_hhEqHY2e 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
554 14 Dtool_hhEqglQa 0 4 594 2059 0 14 Dtool_hhEqglQa 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 mode 1 2008  
555 14 Dtool_hhEqeXIk 0 6 595 2008 0 14 Dtool_hhEqeXIk 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
556 14 Dtool_hhEq9buP 0 6 596 2008 0 14 Dtool_hhEq9buP 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
557 14 Dtool_hhEqgdAk 0 4 597 2059 0 14 Dtool_hhEqgdAk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 mode 1 2008  
558 14 Dtool_hhEqev5t 0 6 598 2008 0 14 Dtool_hhEqev5t 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
559 14 Dtool_hhEqrbmA 0 6 599 2008 0 14 Dtool_hhEqrbmA 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
560 14 Dtool_hhEqqq6L 0 4 600 2059 0 14 Dtool_hhEqqq6L 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 type 1 2009  
561 14 Dtool_hhEqmUr5 0 6 601 2009 0 14 Dtool_hhEqmUr5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
562 14 Dtool_hhEq6hL5 0 4 602 2059 0 14 Dtool_hhEq6hL5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 type 1 2009  
563 14 Dtool_hhEqsd7m 0 6 603 2009 0 14 Dtool_hhEqsd7m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
564 14 Dtool_hhEqKwkc 0 4 604 2059 0 14 Dtool_hhEqKwkc 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  18 anisotropic_degree 1 2072  
565 14 Dtool_hhEqc_H7 0 4 605 2059 0 14 Dtool_hhEqc_H7 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
566 14 Dtool_hhEqvvBL 0 6 606 2060 0 14 Dtool_hhEqvvBL 382 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
567 14 Dtool_hhEqrl66 0 6 607 2072 0 14 Dtool_hhEqrl66 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
568 14 Dtool_hhEq5MIV 0 4 608 2059 0 14 Dtool_hhEq5MIV 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  4 type 1 2010  
569 14 Dtool_hhEqm3Xk 0 6 609 2010 0 14 Dtool_hhEqm3Xk 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
570 14 Dtool_hhEq2l6J 0 6 610 2060 0 14 Dtool_hhEq2l6J 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
571 14 Dtool_hhEqc01z 0 4 611 2059 0 14 Dtool_hhEqc01z 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2188  7 channel 1 2012  2 cm 1 2011  
572 14 Dtool_hhEqmQoH 0 6 612 2011 0 14 Dtool_hhEqmQoH 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  7 channel 1 2012  
573 14 Dtool_hhEq0GKW 0 4 613 2059 0 14 Dtool_hhEq0GKW 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2188  7 channel 1 2012  1 n 1 2072  2 cs 1 2014  
574 14 Dtool_hhEq7qA3 0 6 614 2014 0 14 Dtool_hhEq7qA3 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2186  7 channel 1 2012  1 n 1 2072  
575 14 Dtool_hhEqBmvl 0 4 615 2059 0 14 Dtool_hhEqBmvl 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2188  7 channel 1 2012  1 n 1 2072  2 co 1 2015  
576 14 Dtool_hhEqDf6C 0 6 616 2015 0 14 Dtool_hhEqDf6C 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2186  7 channel 1 2012  1 n 1 2072  
577 14 Dtool_hhEq8Qj0 0 4 617 2059 0 14 Dtool_hhEq8Qj0 1011 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  12 saved_result 1 2060  
578 14 Dtool_hhEqm3S1 0 6 618 2060 0 14 Dtool_hhEqm3S1 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
579 14 Dtool_hhEq2fGJ 0 4 619 2059 0 14 Dtool_hhEq2fGJ 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  7 tex_gen 1 2016  
580 14 Dtool_hhEqNv5D 0 6 620 2016 0 14 Dtool_hhEqNv5D 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
581 14 Dtool_hhEqJp2q 0 4 621 2059 0 14 Dtool_hhEqJp2q 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  13 quality_level 1 2017  
582 14 Dtool_hhEqDQFW 0 6 622 2017 0 14 Dtool_hhEqDQFW 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
583 14 Dtool_hhEqe7XX 0 4 623 2059 0 14 Dtool_hhEqe7XX 778 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  10 stage_name 1 2064  
584 14 Dtool_hhEqiXJB 0 4 624 2059 0 14 Dtool_hhEqiXJB 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
585 14 Dtool_hhEqDGGJ 0 6 625 2060 0 14 Dtool_hhEqDGGJ 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
586 14 Dtool_hhEq2aA5 0 6 626 2064 0 14 Dtool_hhEq2aA5 392 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
587 14 Dtool_hhEqUObk 0 4 627 2059 0 14 Dtool_hhEqUObk 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  8 priority 1 2072  
588 14 Dtool_hhEqnuob 0 4 628 2059 0 14 Dtool_hhEqnuob 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
589 14 Dtool_hhEqlRHd 0 6 629 2060 0 14 Dtool_hhEqlRHd 371 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
590 14 Dtool_hhEqlpBN 0 6 630 2072 0 14 Dtool_hhEqlpBN 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
591 14 Dtool_hhEq1PlD 0 4 631 2059 0 14 Dtool_hhEq1PlD 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  5 color 1 2093  
592 14 Dtool_hhEqlDQn 0 4 632 2059 0 14 Dtool_hhEqlDQn 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
593 14 Dtool_hhEqYqny 0 6 633 2060 0 14 Dtool_hhEqYqny 303 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
594 14 Dtool_hhEqZ8gi 0 6 634 2093 0 14 Dtool_hhEqZ8gi 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
595 14 Dtool_hhEqBnrh 0 4 635 2059 0 14 Dtool_hhEqBnrh 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  12 border_color 1 2093  
596 14 Dtool_hhEqlnCT 0 4 636 2059 0 14 Dtool_hhEqlnCT 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
597 14 Dtool_hhEq3XPC 0 6 637 2060 0 14 Dtool_hhEq3XPC 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
598 14 Dtool_hhEq67Jy 0 6 638 2093 0 14 Dtool_hhEq67Jy 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
599 14 Dtool_hhEqbLpF 0 4 639 2059 0 14 Dtool_hhEqbLpF 593 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  7 uv_name 1 2064  
600 14 Dtool_hhEqA8X4 0 4 640 2059 0 14 Dtool_hhEqA8X4 398 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
601 14 Dtool_hhEqY3F6 0 6 641 2060 0 14 Dtool_hhEqY3F6 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
602 14 Dtool_hhEqSj_p 0 6 642 2064 0 14 Dtool_hhEqSj_p 395 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
603 14 Dtool_hhEqypUu 0 4 643 2059 0 14 Dtool_hhEqypUu 493 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  9 rgb_scale 1 2072  
604 14 Dtool_hhEqgzo5 0 4 644 2059 0 14 Dtool_hhEqgzo5 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
605 14 Dtool_hhEqLbSS 0 6 645 2060 0 14 Dtool_hhEqLbSS 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
606 14 Dtool_hhEqvnMC 0 6 646 2072 0 14 Dtool_hhEqvnMC 374 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
607 14 Dtool_hhEqIHVT 0 4 647 2059 0 14 Dtool_hhEqIHVT 468 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  11 alpha_scale 1 2072  
608 14 Dtool_hhEq2A36 0 4 648 2059 0 14 Dtool_hhEq2A36 329 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
609 14 Dtool_hhEqjpwB 0 6 649 2060 0 14 Dtool_hhEqjpwB 327 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
610 14 Dtool_hhEqoRrx 0 6 650 2072 0 14 Dtool_hhEqoRrx 380 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
611 14 Dtool_hhEqHJuv 0 4 651 2059 0 14 Dtool_hhEqHJuv 516 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  8 filename 1 2137  
612 14 Dtool_hhEqdOt2 0 4 652 2059 0 14 Dtool_hhEqdOt2 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
613 14 Dtool_hhEqHCpy 0 6 653 2060 0 14 Dtool_hhEqHCpy 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
614 14 Dtool_hhEqUIki 0 6 654 2137 0 14 Dtool_hhEqUIki 419 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
615 14 Dtool_hhEqOxMH 0 4 655 2059 0 14 Dtool_hhEqOxMH 326 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  8 fullpath 1 2137  
616 14 Dtool_hhEqDkA6 0 6 656 2137 0 14 Dtool_hhEqDkA6 817 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
617 14 Dtool_hhEqidkB 0 4 657 2059 0 14 Dtool_hhEqidkB 742 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  18 alpha_file_channel 1 2072  
618 14 Dtool_hhEqXTSW 0 4 658 2059 0 14 Dtool_hhEqXTSW 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
619 14 Dtool_hhEqER_v 0 6 659 2060 0 14 Dtool_hhEqER_v 349 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
620 14 Dtool_hhEqK55f 0 6 660 2072 0 14 Dtool_hhEqK55f 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
621 14 Dtool_hhEqn7Pw 0 4 661 2059 0 14 Dtool_hhEqn7Pw 698 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  9 multiview 1 2060  
622 14 Dtool_hhEq1wWz 0 6 662 2060 0 14 Dtool_hhEq1wWz 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
623 14 Dtool_hhEqMdWq 0 4 663 2059 0 14 Dtool_hhEqMdWq 456 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  9 num_views 1 2072  
624 14 Dtool_hhEqgMo2 0 4 664 2059 0 14 Dtool_hhEqgMo2 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
625 14 Dtool_hhEqxXUO 0 6 665 2060 0 14 Dtool_hhEqxXUO 361 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
626 14 Dtool_hhEq9RP_ 0 6 666 2072 0 14 Dtool_hhEq9RP_ 342 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
627 14 Dtool_hhEqz4qj 0 4 667 2059 0 14 Dtool_hhEqz4qj 912 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  12 read_mipmaps 1 2060  
628 14 Dtool_hhEquJck 0 6 668 2060 0 14 Dtool_hhEquJck 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
629 14 Dtool_hhEqSUMy 0 4 669 2059 0 14 Dtool_hhEqSUMy 437 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2188  
630 14 Dtool_hhEq3XDK 0 6 670 2060 0 14 Dtool_hhEq3XDK 771 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2188  5 other 1 2188  
631 14 Dtool_hhEqjbNS 0 6 671 2072 0 14 Dtool_hhEqjbNS 628 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
632 14 Dtool_hhEq_TOq 0 6 672 2005 0 14 Dtool_hhEq_TOq 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
633 14 Dtool_hhEq0Tc1 0 6 673 2006 0 14 Dtool_hhEq0Tc1 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
634 14 Dtool_hhEqCmfX 0 6 674 2007 0 14 Dtool_hhEqCmfX 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
635 14 Dtool_hhEq_IIf 0 6 675 2008 0 14 Dtool_hhEq_IIf 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
636 14 Dtool_hhEq3nqW 0 6 676 2009 0 14 Dtool_hhEq3nqW 424 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
637 14 Dtool_hhEq_bFc 0 6 677 2010 0 14 Dtool_hhEq_bFc 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
638 14 Dtool_hhEqjFLT 0 6 678 2011 0 14 Dtool_hhEqjFLT 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
639 14 Dtool_hhEqEKtK 0 6 679 2014 0 14 Dtool_hhEqEKtK 433 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
640 14 Dtool_hhEqnTQ1 0 6 680 2015 0 14 Dtool_hhEqnTQ1 436 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
641 14 Dtool_hhEqyeH3 0 6 681 2016 0 14 Dtool_hhEqyeH3 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
642 14 Dtool_hhEq1vdm 0 6 682 2017 0 14 Dtool_hhEq1vdm 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
643 14 Dtool_hhEqTKZT 0 7 683 2055 0 14 Dtool_hhEqTKZT 0 0 
644 14 Dtool_hhEqBT72 0 7 556 2183 1515 14 Dtool_hhEqBT72 0 1 4 this 3 2188  
645 14 Dtool_hhEqWvPr 0 7 557 2188 1524 14 Dtool_hhEqWvPr 0 1 4 this 3 2183  
646 14 Dtool_hhEq2rIs 0 6 558 2078 0 14 Dtool_hhEq2rIs 0 1 4 this 3 2188  
647 14 Dtool_hhEq5AMp 0 7 559 2188 1524 14 Dtool_hhEq5AMp 0 1 4 this 3 2078  
648 14 Dtool_hhEqQ2JC 0 6 560 2151 0 14 Dtool_hhEqQ2JC 0 1 4 this 3 2188  
649 14 Dtool_hhEqlj8D 0 7 561 2188 1524 14 Dtool_hhEqlj8D 0 1 4 this 3 2151  
650 14 Dtool_hhEq4BtE 0 7 685 2191 1658 14 Dtool_hhEq4BtE 225 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2189  
651 14 Dtool_hhEq9ThA 0 7 685 2191 1658 14 Dtool_hhEq9ThA 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 mref_name 1 2064  
652 14 Dtool_hhEq7WW0 0 6 687 2060 0 14 Dtool_hhEq7WW0 784 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2189  5 other 1 2189  2 eq 1 2072  
653 14 Dtool_hhEqOiSX 0 6 688 2060 0 14 Dtool_hhEqOiSX 502 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2189  5 other 1 2189  2 eq 1 2072  
654 14 Dtool_hhEq2XHn 0 4 689 2059 0 14 Dtool_hhEq2XHn 704 // Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  4 diff 1 2093  
655 14 Dtool_hhEqpXQH 0 4 690 2059 0 14 Dtool_hhEqpXQH 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
656 14 Dtool_hhEq5VsI 0 6 691 2060 0 14 Dtool_hhEq5VsI 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
657 14 Dtool_hhEqVUXF 0 7 692 2092 0 14 Dtool_hhEqVUXF 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
658 14 Dtool_hhEqkoW3 0 4 693 2059 0 14 Dtool_hhEqkoW3 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  3 amb 1 2093  
659 14 Dtool_hhEqM1fj 0 4 694 2059 0 14 Dtool_hhEqM1fj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
660 14 Dtool_hhEqAF9W 0 6 695 2060 0 14 Dtool_hhEqAF9W 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
661 14 Dtool_hhEq6EmT 0 7 696 2092 0 14 Dtool_hhEq6EmT 357 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
662 14 Dtool_hhEqBinD 0 4 697 2059 0 14 Dtool_hhEqBinD 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  4 emit 1 2093  
663 14 Dtool_hhEqho4b 0 4 698 2059 0 14 Dtool_hhEqho4b 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
664 14 Dtool_hhEqQHMl 0 6 699 2060 0 14 Dtool_hhEqQHMl 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
665 14 Dtool_hhEq6G3h 0 7 700 2092 0 14 Dtool_hhEq6G3h 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
666 14 Dtool_hhEqLAce 0 4 701 2059 0 14 Dtool_hhEqLAce 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  4 spec 1 2093  
667 14 Dtool_hhEq_Bc2 0 4 702 2059 0 14 Dtool_hhEq_Bc2 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
668 14 Dtool_hhEqNpCA 0 6 703 2060 0 14 Dtool_hhEqNpCA 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
669 14 Dtool_hhEq0ot8 0 7 704 2092 0 14 Dtool_hhEq0ot8 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
670 14 Dtool_hhEqifeq 0 4 705 2059 0 14 Dtool_hhEqifeq 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  9 shininess 1 1988  
671 14 Dtool_hhEqNivw 0 4 706 2059 0 14 Dtool_hhEqNivw 224 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
672 14 Dtool_hhEqqZE6 0 6 707 2060 0 14 Dtool_hhEqqZE6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
673 14 Dtool_hhEq8bv2 0 6 708 1988 0 14 Dtool_hhEq8bv2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
674 14 Dtool_hhEqJOXd 0 4 709 2059 0 14 Dtool_hhEqJOXd 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2191  5 local 1 2060  
675 14 Dtool_hhEq0Bui 0 4 710 2059 0 14 Dtool_hhEq0Bui 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
676 14 Dtool_hhEqmJXP 0 6 711 2060 0 14 Dtool_hhEqmJXP 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
677 14 Dtool_hhEqcKAM 0 6 712 2060 0 14 Dtool_hhEqcKAM 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2189  
678 14 Dtool_hhEq6GjJ 0 7 713 2055 0 14 Dtool_hhEq6GjJ 0 0 
679 14 Dtool_hhEqhJqk 0 7 723 2131 1666 14 Dtool_hhEqhJqk 237 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  4 copy 1 2126  
680 14 Dtool_hhEq70HD 0 6 725 2078 0 14 Dtool_hhEq70HD 562 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
681 14 Dtool_hhEq6tkm 0 6 726 2078 0 14 Dtool_hhEq6tkm 569 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
682 14 Dtool_hhEqIAv2 0 6 727 2078 0 14 Dtool_hhEqIAv2 567 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
683 14 Dtool_hhEqUKF_ 0 6 728 2078 0 14 Dtool_hhEqUKF_ 566 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
684 14 Dtool_hhEqf3fD 0 6 729 2078 0 14 Dtool_hhEqf3fD 548 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
685 14 Dtool_hhEqJZ7Z 0 6 730 2078 0 14 Dtool_hhEqJZ7Z 544 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
686 14 Dtool_hhEqSQGc 0 6 731 2078 0 14 Dtool_hhEqSQGc 531 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
687 14 Dtool_hhEqAN7z 0 6 732 2064 0 14 Dtool_hhEqAN7z 498 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
688 14 Dtool_hhEqFdVA 0 6 733 2021 0 14 Dtool_hhEqFdVA 1114 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
689 14 Dtool_hhEqO_bp 0 4 734 2059 0 14 Dtool_hhEqO_bp 385 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
690 14 Dtool_hhEq7_i5 0 6 735 2021 0 14 Dtool_hhEq7_i5 852 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
691 14 Dtool_hhEqxMIe 0 4 736 2059 0 14 Dtool_hhEqxMIe 494 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  7 texture 1 2188  
692 14 Dtool_hhEqCDRS 0 6 737 2060 0 14 Dtool_hhEqCDRS 515 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
693 14 Dtool_hhEqnWlz 0 6 737 2060 0 14 Dtool_hhEqnWlz 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2126  7 texture 1 2188  
694 14 Dtool_hhEq2fun 0 7 738 2188 1524 14 Dtool_hhEq2fun 543 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
695 14 Dtool_hhEqoFbC 0 7 738 2188 1524 14 Dtool_hhEqoFbC 305 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2126  1 n 1 2072  
696 14 Dtool_hhEqf0zv 0 4 739 2059 0 14 Dtool_hhEqf0zv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  7 texture 1 2188  
697 14 Dtool_hhEqhV0K 0 4 740 2059 0 14 Dtool_hhEqhV0K 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
698 14 Dtool_hhEqL1FR 0 6 741 2072 0 14 Dtool_hhEqL1FR 303 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
699 14 Dtool_hhEqLGBt 0 4 742 2059 0 14 Dtool_hhEqLGBt 274 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  8 material 1 2191  
700 14 Dtool_hhEq4kT7 0 4 743 2059 0 14 Dtool_hhEq4kT7 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
701 14 Dtool_hhEqElax 0 7 744 2191 1658 14 Dtool_hhEqElax 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
702 14 Dtool_hhEqYE8b 0 6 745 2060 0 14 Dtool_hhEqYE8b 406 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
703 14 Dtool_hhEqeofj 0 4 746 2059 0 14 Dtool_hhEqeofj 466 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  4 flag 1 2060  
704 14 Dtool_hhEqcCgN 0 6 747 2060 0 14 Dtool_hhEqcCgN 313 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
705 14 Dtool_hhEq8Cxv 0 4 748 2059 0 14 Dtool_hhEq8Cxv 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  5 other 1 2086  
706 14 Dtool_hhEqLo5X 0 4 748 2059 0 14 Dtool_hhEqLo5X 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  5 other 1 2126  
707 14 Dtool_hhEqgHBP 0 6 749 2060 0 14 Dtool_hhEqgHBP 588 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
708 14 Dtool_hhEqzlJw 0 6 750 2060 0 14 Dtool_hhEqzlJw 586 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
709 14 Dtool_hhEqLGjU 0 4 751 2059 0 14 Dtool_hhEqLGjU 1216 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  7 shading 1 2021  
710 14 Dtool_hhEqKP88 0 4 752 2059 0 14 Dtool_hhEqKP88 689 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
711 14 Dtool_hhEqgkRY 0 4 753 2059 0 14 Dtool_hhEqgkRY 693 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
712 14 Dtool_hhEq5FGb 0 4 754 2059 0 14 Dtool_hhEq5FGb 499 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
713 14 Dtool_hhEqGw4a 0 4 755 2059 0 14 Dtool_hhEqGw4a 481 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
714 14 Dtool_hhEq0Gh8 0 6 756 2060 0 14 Dtool_hhEq0Gh8 550 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
715 14 Dtool_hhEqwSZ1 0 4 757 2059 0 14 Dtool_hhEqwSZ1 945 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  6 closed 1 2060  
716 14 Dtool_hhEqIS4T 0 4 758 2059 0 14 Dtool_hhEqIS4T 541 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
717 14 Dtool_hhEqrzxk 0 6 759 2060 0 14 Dtool_hhEqrzxk 380 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
718 14 Dtool_hhEqXSfa 0 6 760 2060 0 14 Dtool_hhEqXSfa 416 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
719 14 Dtool_hhEqF6tl 0 6 761 2060 0 14 Dtool_hhEqF6tl 417 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
720 14 Dtool_hhEqctoR 0 4 762 2059 0 14 Dtool_hhEqctoR 266 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
721 14 Dtool_hhEqW8_c 0 7 763 2115 1154 14 Dtool_hhEqW8_c 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  6 vertex 1 2115  
722 14 Dtool_hhEq7qsK 0 7 764 2115 1154 14 Dtool_hhEq7qsK 421 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  6 vertex 1 2115  
723 14 Dtool_hhEq_m4j 0 4 765 2059 0 14 Dtool_hhEq_m4j 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  5 other 1 2126  
724 14 Dtool_hhEqkeY6 0 6 766 2072 0 14 Dtool_hhEqkeY6 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
725 14 Dtool_hhEq5Wo7 0 4 767 2059 0 14 Dtool_hhEq5Wo7 445 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2131  5 index 1 2072  6 vertex 1 2115  
726 14 Dtool_hhEqFsKW 0 7 768 2115 1154 14 Dtool_hhEqFsKW 277 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2126  5 index 1 2072  
727 14 Dtool_hhEqm7xE 0 7 769 2118 1069 14 Dtool_hhEqm7xE 368 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2126  
728 14 Dtool_hhEqCGI9 0 4 770 2059 0 14 Dtool_hhEqCGI9 0 3 4 this 3 2126  3 out 1 2065  12 indent_level 1 2072  
729 14 Dtool_hhEqG9YA 0 4 771 2059 0 14 Dtool_hhEqG9YA 0 1 4 this 3 2126  
730 14 Dtool_hhEq2RY6 0 7 772 2055 0 14 Dtool_hhEq2RY6 0 0 
731 14 Dtool_hhEq2w28 0 7 716 2068 1069 14 Dtool_hhEq2w28 0 1 4 this 3 2131  
732 14 Dtool_hhEqUoMZ 0 7 717 2131 1666 14 Dtool_hhEqUoMZ 0 1 4 this 3 2068  
733 14 Dtool_hhEq6ts2 0 6 718 2085 0 14 Dtool_hhEq6ts2 0 1 4 this 3 2131  
734 14 Dtool_hhEqcB04 0 7 719 2131 1666 14 Dtool_hhEqcB04 0 1 4 this 3 2085  
735 14 Dtool_hhEq9Jj3 0 6 720 2078 0 14 Dtool_hhEq9Jj3 0 1 4 this 3 2131  
736 14 Dtool_hhEqZds5 0 7 721 2131 1666 14 Dtool_hhEqZds5 0 1 4 this 3 2078  
737 14 Dtool_hhEqXTIC 0 7 774 2192 1666 14 Dtool_hhEqXTIC 246 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2192  4 copy 1 2193  
738 14 Dtool_hhEqwm0G 0 6 775 2072 0 14 Dtool_hhEqwm0G 410 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
739 14 Dtool_hhEqXohz 0 6 776 2085 0 14 Dtool_hhEqXohz 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2192  1 i 1 2072  
740 14 Dtool_hhEq_Yun 0 6 776 2086 0 14 Dtool_hhEq_Yun 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  1 i 1 2072  
741 14 Dtool_hhEqqTJg 0 4 777 2059 0 14 Dtool_hhEqqTJg 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2192  1 i 1 2072  6 attrib 1 2086  
742 14 Dtool_hhEq81Mv 0 6 778 2060 0 14 Dtool_hhEq81Mv 678 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  9 container 1 2071  
743 14 Dtool_hhEq3sTt 0 7 779 2192 1666 14 Dtool_hhEq3sTt 830 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2192  
744 14 Dtool_hhEqflzy 0 7 780 2055 0 14 Dtool_hhEqflzy 0 0 
745 14 Dtool_hhEq_Tjy 0 7 782 2195 1742 14 Dtool_hhEq_Tjy 699 // Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
746 14 Dtool_hhEqYDEk 0 7 782 2195 1742 14 Dtool_hhEqYDEk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2196  
747 14 Dtool_hhEqdsvy 0 7 783 2195 1742 14 Dtool_hhEqdsvy 229 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 copy 1 2196  
748 14 Dtool_hhEqqWzm 0 6 784 2060 0 14 Dtool_hhEqqWzm 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 2 12 egg_filename 1 2198  10 searchpath 1 2134  
749 14 Dtool_hhEq_5ZW 0 6 784 2060 0 14 Dtool_hhEq_5ZW 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 1 12 egg_filename 1 2198  
750 14 Dtool_hhEqR9jy 0 6 785 2060 0 14 Dtool_hhEqR9jy 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2195  8 filename 1 2198  12 display_name 1 2064  
751 14 Dtool_hhEq8ZNq 0 6 785 2060 0 14 Dtool_hhEq8ZNq 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  8 filename 1 2198  
752 14 Dtool_hhEqluzF 0 6 785 2060 0 14 Dtool_hhEqluzF 762 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  2 in 1 2199  
753 14 Dtool_hhEqvw2D 0 4 786 2059 0 14 Dtool_hhEqvw2D 324 ////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  5 other 1 2195  
754 14 Dtool_hhEqEkdE 0 6 787 2060 0 14 Dtool_hhEqEkdE 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  10 searchpath 1 2134  
755 14 Dtool_hhEqlY7S 0 6 787 2060 0 14 Dtool_hhEqlY7S 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
756 14 Dtool_hhEqONYx 0 6 787 2060 0 14 Dtool_hhEqONYx 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2195  10 searchpath 1 2134  6 record 1 2201  
757 14 Dtool_hhEqfumv 0 6 788 2072 0 14 Dtool_hhEqfumv 608 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
758 14 Dtool_hhEqGkhb 0 6 789 2072 0 14 Dtool_hhEqGkhb 607 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
759 14 Dtool_hhEqUZKh 0 6 790 2060 0 14 Dtool_hhEqUZKh 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  8 filename 1 2198  
760 14 Dtool_hhEqOkbY 0 6 790 2060 0 14 Dtool_hhEqOkbY 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  3 out 1 2065  
761 14 Dtool_hhEqkJsK 0 4 791 2059 0 14 Dtool_hhEqkJsK 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  7 resolve 1 2060  
762 14 Dtool_hhEqVTWc 0 6 792 2060 0 14 Dtool_hhEqVTWc 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2196  
763 14 Dtool_hhEqLqtE 0 6 793 2060 0 14 Dtool_hhEqLqtE 741 ////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2196  
764 14 Dtool_hhEqwPUu 0 4 794 2059 0 14 Dtool_hhEqwPUu 403 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  8 coordsys 1 2140  
765 14 Dtool_hhEqW4K_ 0 6 795 2140 0 14 Dtool_hhEqW4K_ 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2196  
766 14 Dtool_hhEqgZ_q 0 4 796 2059 0 14 Dtool_hhEqgZ_q 392 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  12 egg_filename 1 2137  
767 14 Dtool_hhEqOvC5 0 6 797 2137 0 14 Dtool_hhEqOvC5 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2196  
768 14 Dtool_hhEqHKMn 0 4 798 2059 0 14 Dtool_hhEqHKMn 1124 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  9 threshold 1 1988  
769 14 Dtool_hhEqI60Q 0 4 799 2059 0 14 Dtool_hhEqI60Q 1069 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
770 14 Dtool_hhEqMttE 0 4 800 2059 0 14 Dtool_hhEqMttE 598 ////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
771 14 Dtool_hhEqDr_V 0 7 801 2055 0 14 Dtool_hhEqDr_V 0 0 
772 14 Dtool_hhEqYWbP 0 7 804 2203 1747 14 Dtool_hhEqYWbP 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 value 1 2140  
773 14 Dtool_hhEq20iH 0 7 804 2203 1747 14 Dtool_hhEq20iH 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
774 14 Dtool_hhEquEBs 0 7 804 2203 1747 14 Dtool_hhEquEBs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2204  
775 14 Dtool_hhEqIzaC 0 4 805 2059 0 14 Dtool_hhEqIzaC 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2203  5 value 1 2140  
776 14 Dtool_hhEqXtH9 0 6 806 2140 0 14 Dtool_hhEqXtH9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2204  
777 14 Dtool_hhEq0Chp 0 7 807 2055 0 14 Dtool_hhEq0Chp 0 0 
778 14 Dtool_hhEq9d8E 0 7 810 2206 1755 14 Dtool_hhEq9d8E 230 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2206  4 copy 1 2207  
779 14 Dtool_hhEq6saC 0 4 812 2059 0 14 Dtool_hhEq6saC 559 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2206  6 subdiv 1 2072  
780 14 Dtool_hhEq_WHg 0 6 813 2072 0 14 Dtool_hhEq_WHg 335 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
781 14 Dtool_hhEqupv_ 0 4 814 2059 0 14 Dtool_hhEqupv_ 367 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2206  4 type 1 2026  
782 14 Dtool_hhEq6DD5 0 6 815 2026 0 14 Dtool_hhEq6DD5 261 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
783 14 Dtool_hhEq5L8d 0 6 816 2026 0 14 Dtool_hhEq5L8d 412 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
784 14 Dtool_hhEqsThz 0 7 817 2055 0 14 Dtool_hhEqsThz 0 0 
785 14 Dtool_hhEq_0_W 0 7 820 2211 1759 14 Dtool_hhEq_0_W 234 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2209  
786 14 Dtool_hhEq8ySO 0 7 820 2211 1759 14 Dtool_hhEq8ySO 229 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2064  8 filename 1 2064  
787 14 Dtool_hhEqmtLn 0 7 821 2211 1759 14 Dtool_hhEqmtLn 242 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2211  4 copy 1 2209  
788 14 Dtool_hhEqp9UM 0 7 822 2055 0 14 Dtool_hhEqp9UM 0 0 
789 14 Dtool_hhEq8kwb 0 4 825 2059 0 14 Dtool_hhEq8kwb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2212  
790 14 Dtool_hhEqeFPl 0 4 826 2059 0 14 Dtool_hhEqeFPl 269 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2212  4 node 1 2068  
791 14 Dtool_hhEqOi3s 0 7 827 2068 1069 14 Dtool_hhEqOi3s 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2213  8 category 1 2064  4 name 1 2064  
792 14 Dtool_hhEqXkGH 0 6 828 2060 0 14 Dtool_hhEqXkGH 332 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2213  8 category 1 2064  4 name 1 2064  
793 14 Dtool_hhEqEft2 0 6 829 2060 0 14 Dtool_hhEqEft2 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2212  8 category 1 2064  4 name 1 2064  4 node 1 2068  
794 14 Dtool_hhEqYHHH 0 6 829 2060 0 14 Dtool_hhEqYHHH 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2212  8 category 1 2064  4 name 1 2064  
795 14 Dtool_hhEq3vi3 0 6 830 2064 0 14 Dtool_hhEq3vi3 0 2 4 this 3 2212  4 node 1 2068  
796 14 Dtool_hhEqEi4Q 0 6 831 2064 0 14 Dtool_hhEqEi4Q 487 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2212  4 node 1 2068  
797 14 Dtool_hhEq1Kmh 0 6 832 2064 0 14 Dtool_hhEq1Kmh 682 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2212  4 node 1 2068  8 category 1 2064  5 index 1 2072  
798 14 Dtool_hhEqDsSt 0 7 833 2055 0 14 Dtool_hhEqDsSt 0 0 
799 14 Dtool_hhEq0C8Z 0 7 835 2215 1771 14 Dtool_hhEq0C8Z 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 1 12 filter_names 1 2060  
800 14 Dtool_hhEq6jri 0 7 835 2215 1771 14 Dtool_hhEq6jri 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 0 
801 14 Dtool_hhEqgoSO 0 7 836 2055 0 14 Dtool_hhEqgoSO 0 0 
802 14 Dtool_hhEqDrFz 0 7 839 2218 1666 14 Dtool_hhEqDrFz 221 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2216  
803 14 Dtool_hhEqX4DQ 0 7 839 2218 1666 14 Dtool_hhEqX4DQ 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
804 14 Dtool_hhEqJipL 0 7 839 2218 1666 14 Dtool_hhEqJipL 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
805 14 Dtool_hhEqvLAZ 0 7 840 2218 1666 14 Dtool_hhEqvLAZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2218  4 copy 1 2216  
806 14 Dtool_hhEq0ujY 0 6 841 2060 0 14 Dtool_hhEq0ujY 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2216  
807 14 Dtool_hhEqyGRj 0 6 842 1988 0 14 Dtool_hhEqyGRj 328 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2216  
808 14 Dtool_hhEqxUAE 0 4 843 2059 0 14 Dtool_hhEqxUAE 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2218  5 thick 1 1988  
809 14 Dtool_hhEqf5MK 0 4 844 2059 0 14 Dtool_hhEqf5MK 219 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
810 14 Dtool_hhEqZ1pB 0 7 845 2055 0 14 Dtool_hhEqZ1pB 0 0 
811 14 Dtool_hhEq2_LL 0 7 847 2219 1781 14 Dtool_hhEq2_LL 230 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
812 14 Dtool_hhEqI3vE 0 7 847 2219 1781 14 Dtool_hhEqI3vE 235 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2220  
813 14 Dtool_hhEqEcH7 0 6 848 2219 0 14 Dtool_hhEqEcH7 243 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  4 copy 1 2220  
814 14 Dtool_hhEqUC81 0 4 850 2059 0 14 Dtool_hhEqUC81 267 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2219  
815 14 Dtool_hhEqOymL 0 6 851 2072 0 14 Dtool_hhEqOymL 483 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  4 node 1 2071  
816 14 Dtool_hhEqxG5C 0 6 852 2072 0 14 Dtool_hhEqxG5C 1402 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  4 node 1 2068  
817 14 Dtool_hhEq74xc 0 4 853 2059 0 14 Dtool_hhEq74xc 574 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  4 node 1 2068  
818 14 Dtool_hhEq8xlm 0 6 854 2072 0 14 Dtool_hhEq8xlm 756 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2219  2 eq 1 2072  4 node 1 2071  
819 14 Dtool_hhEqV3rv 0 6 854 2072 0 14 Dtool_hhEqV3rv 1035 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2219  2 eq 1 2072  7 removed 1 2222  
820 14 Dtool_hhEq0Vhs 0 4 855 2059 0 14 Dtool_hhEq0Vhs 606 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2071  7 replace 1 2224  
821 14 Dtool_hhEqcBOS 0 4 856 2059 0 14 Dtool_hhEqcBOS 386 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2219  
822 14 Dtool_hhEqs9_r 0 4 857 2059 0 14 Dtool_hhEqs9_r 406 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2219  
823 14 Dtool_hhEqJriL 0 6 858 2060 0 14 Dtool_hhEqJriL 413 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  8 material 1 2191  
824 14 Dtool_hhEqzqxK 0 6 859 2060 0 14 Dtool_hhEqzqxK 414 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  8 material 1 2191  
825 14 Dtool_hhEqyOi1 0 7 860 2191 1658 14 Dtool_hhEqyOi1 477 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2219  4 copy 1 2189  2 eq 1 2072  
826 14 Dtool_hhEqcDwq 0 7 861 2191 1658 14 Dtool_hhEqcDwq 328 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2220  9 mref_name 1 2064  
827 14 Dtool_hhEqXJZS 0 7 863 2228 1802 14 Dtool_hhEqXJZS 227 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2226  
828 14 Dtool_hhEqUWBj 0 7 863 2228 1802 14 Dtool_hhEqUWBj 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
829 14 Dtool_hhEqO3JE 0 7 863 2228 1802 14 Dtool_hhEqO3JE 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
830 14 Dtool_hhEqG5ro 0 7 864 2228 1802 14 Dtool_hhEqG5ro 235 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 copy 1 2226  
831 14 Dtool_hhEq1KP0 0 6 865 2060 0 14 Dtool_hhEq1KP0 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2226  6 result 1 2229  2 cs 1 2140  
832 14 Dtool_hhEq7k0F 0 6 865 2060 0 14 Dtool_hhEq7k0F 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2226  6 result 1 2229  
833 14 Dtool_hhEqMiG7 0 6 866 2060 0 14 Dtool_hhEqMiG7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
834 14 Dtool_hhEqPIIR 0 6 867 2060 0 14 Dtool_hhEqPIIR 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  2 cs 1 2140  
835 14 Dtool_hhEq5vES 0 6 867 2060 0 14 Dtool_hhEq5vES 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
836 14 Dtool_hhEqMg0u 0 6 868 2060 0 14 Dtool_hhEqMg0u 1053 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2226  9 container 1 2071  11 convex_also 1 2060  
837 14 Dtool_hhEqdd1f 0 7 869 2228 1802 14 Dtool_hhEqdd1f 786 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  11 convex_also 1 2060  
838 14 Dtool_hhEquGjd 0 7 870 2055 0 14 Dtool_hhEquGjd 0 0 
839 14 Dtool_hhEqSb5s 0 7 873 2232 1817 14 Dtool_hhEqSb5s 227 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2230  
840 14 Dtool_hhEqqKMX 0 7 873 2232 1817 14 Dtool_hhEqqKMX 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
841 14 Dtool_hhEq8ypa 0 7 873 2232 1817 14 Dtool_hhEq8ypa 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
842 14 Dtool_hhEqetUP 0 7 874 2232 1817 14 Dtool_hhEqetUP 235 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  4 copy 1 2230  
843 14 Dtool_hhEq1I_P 0 4 875 2059 0 14 Dtool_hhEq1I_P 588 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2232  5 order 1 2072  9 num_knots 1 2072  
844 14 Dtool_hhEq6zeh 0 4 876 2059 0 14 Dtool_hhEq6zeh 542 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  5 order 1 2072  
845 14 Dtool_hhEq_mS3 0 4 877 2059 0 14 Dtool_hhEq_mS3 665 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  3 num 1 2072  
846 14 Dtool_hhEqsz1o 0 4 878 2059 0 14 Dtool_hhEqsz1o 452 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2232  1 k 1 2072  5 value 1 1988  
847 14 Dtool_hhEqXgbF 0 6 879 2060 0 14 Dtool_hhEqXgbF 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
848 14 Dtool_hhEqU0kx 0 6 880 2072 0 14 Dtool_hhEqU0kx 470 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
849 14 Dtool_hhEqa0DG 0 6 881 2072 0 14 Dtool_hhEqa0DG 310 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
850 14 Dtool_hhEqBXkq 0 6 882 2072 0 14 Dtool_hhEqBXkq 253 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
851 14 Dtool_hhEqyBqz 0 6 883 2072 0 14 Dtool_hhEqyBqz 669 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
852 14 Dtool_hhEq07Jv 0 6 884 2060 0 14 Dtool_hhEq07Jv 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
853 14 Dtool_hhEqYx8U 0 6 885 1988 0 14 Dtool_hhEqYx8U 255 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2230  1 k 1 2072  
854 14 Dtool_hhEqTsQD 0 7 886 2055 0 14 Dtool_hhEqTsQD 0 0 
855 14 Dtool_hhEq6fZQ 0 7 889 2233 1824 14 Dtool_hhEq6fZQ 232 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2233  4 copy 1 2234  
856 14 Dtool_hhEqD1tU 0 4 890 2059 0 14 Dtool_hhEqD1tU 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2233  6 subdiv 1 2072  
857 14 Dtool_hhEq1xT9 0 6 891 2072 0 14 Dtool_hhEq1xT9 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2234  
858 14 Dtool_hhEqDplZ 0 4 892 2059 0 14 Dtool_hhEqDplZ 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2233  6 subdiv 1 2072  
859 14 Dtool_hhEq0VLC 0 6 893 2072 0 14 Dtool_hhEq0VLC 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2234  
860 14 Dtool_hhEqjy4J 0 7 894 2055 0 14 Dtool_hhEqjy4J 0 0 
861 14 Dtool_hhEqIadg 0 7 897 2238 1856 14 Dtool_hhEqIadg 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2236  
862 14 Dtool_hhEqbHUr 0 7 897 2238 1856 14 Dtool_hhEqbHUr 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
863 14 Dtool_hhEqR3mv 0 7 897 2238 1856 14 Dtool_hhEqR3mv 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
864 14 Dtool_hhEqOEHi 0 7 898 2238 1856 14 Dtool_hhEqOEHi 237 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2238  4 copy 1 2236  
865 14 Dtool_hhEqjYcB 0 4 899 2059 0 14 Dtool_hhEqjYcB 647 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
//////////////////////////////////////////////////////////////////// 5 4 this 3 2238  7 u_order 1 2072  7 v_order 1 2072  11 num_u_knots 1 2072  11 num_v_knots 1 2072  
866 14 Dtool_hhEqjytp 0 4 900 2059 0 14 Dtool_hhEqjytp 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2238  7 u_order 1 2072  
867 14 Dtool_hhEqj6ez 0 4 901 2059 0 14 Dtool_hhEqj6ez 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2238  7 v_order 1 2072  
868 14 Dtool_hhEqChzm 0 4 902 2059 0 14 Dtool_hhEqChzm 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2238  3 num 1 2072  
869 14 Dtool_hhEqiman 0 4 903 2059 0 14 Dtool_hhEqiman 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2238  3 num 1 2072  
870 14 Dtool_hhEqzDIS 0 4 904 2059 0 14 Dtool_hhEqzDIS 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2238  1 k 1 2072  5 value 1 1988  
871 14 Dtool_hhEqzL7b 0 4 905 2059 0 14 Dtool_hhEqzL7b 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2238  1 k 1 2072  5 value 1 1988  
872 14 Dtool_hhEqgvjX 0 4 906 2059 0 14 Dtool_hhEqgvjX 456 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2238  2 ui 1 2072  2 vi 1 2072  6 vertex 1 2115  
873 14 Dtool_hhEqCf_u 0 6 907 2060 0 14 Dtool_hhEqCf_u 460 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
874 14 Dtool_hhEqDWLM 0 6 908 2072 0 14 Dtool_hhEqDWLM 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
875 14 Dtool_hhEqDe8V 0 6 909 2072 0 14 Dtool_hhEqDe8V 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
876 14 Dtool_hhEqcEe5 0 6 910 2072 0 14 Dtool_hhEqcEe5 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
877 14 Dtool_hhEqTMPD 0 6 911 2072 0 14 Dtool_hhEqTMPD 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
878 14 Dtool_hhEq4yej 0 6 912 2072 0 14 Dtool_hhEq4yej 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
879 14 Dtool_hhEqY2Fk 0 6 913 2072 0 14 Dtool_hhEqY2Fk 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
880 14 Dtool_hhEqhRDE 0 6 914 2072 0 14 Dtool_hhEqhRDE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
881 14 Dtool_hhEqBUqE 0 6 915 2072 0 14 Dtool_hhEqBUqE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
882 14 Dtool_hhEqX9VB 0 6 916 2072 0 14 Dtool_hhEqX9VB 679 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
883 14 Dtool_hhEqNE6h 0 6 917 2072 0 14 Dtool_hhEqNE6h 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2236  12 vertex_index 1 2072  
884 14 Dtool_hhEqNMrr 0 6 918 2072 0 14 Dtool_hhEqNMrr 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2236  12 vertex_index 1 2072  
885 14 Dtool_hhEqFchs 0 6 919 2072 0 14 Dtool_hhEqFchs 344 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2236  2 ui 1 2072  2 vi 1 2072  
886 14 Dtool_hhEq7x_L 0 6 920 2060 0 14 Dtool_hhEq7x_L 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
887 14 Dtool_hhEqsx28 0 6 921 2060 0 14 Dtool_hhEqsx28 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2236  
888 14 Dtool_hhEq3gZW 0 6 922 1988 0 14 Dtool_hhEq3gZW 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2236  1 k 1 2072  
889 14 Dtool_hhEq34Kg 0 6 923 1988 0 14 Dtool_hhEq34Kg 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2236  1 k 1 2072  
890 14 Dtool_hhEqvKm_ 0 7 924 2115 1154 14 Dtool_hhEqvKm_ 294 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2236  2 ui 1 2072  2 vi 1 2072  
891 14 Dtool_hhEqnPAw 0 7 931 2055 0 14 Dtool_hhEqnPAw 0 0 
892 14 Dtool_hhEqULhN 0 6 926 2239 0 14 Dtool_hhEqULhN 0 1 4 this 3 2236  
893 14 Dtool_hhEqyjF0 0 6 929 2241 0 14 Dtool_hhEqyjF0 0 1 4 this 3 2236  
894 14 Dtool_hhEquTpN 0 7 934 2245 1868 14 Dtool_hhEquTpN 222 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2243  
895 14 Dtool_hhEqWhKI 0 7 934 2245 1868 14 Dtool_hhEqWhKI 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
896 14 Dtool_hhEqHYEZ 0 7 934 2245 1868 14 Dtool_hhEqHYEZ 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
897 14 Dtool_hhEqxU3B 0 7 935 2245 1868 14 Dtool_hhEqxU3B 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  4 copy 1 2243  
898 14 Dtool_hhEqYocj 0 6 936 2060 0 14 Dtool_hhEqYocj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2243  
899 14 Dtool_hhEq_pP7 0 6 937 1988 0 14 Dtool_hhEq_pP7 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2243  
900 14 Dtool_hhEqOlOS 0 4 938 2059 0 14 Dtool_hhEqOlOS 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  5 thick 1 1988  
901 14 Dtool_hhEqIAtY 0 4 939 2059 0 14 Dtool_hhEqIAtY 220 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2245  
902 14 Dtool_hhEq5O26 0 6 940 2060 0 14 Dtool_hhEq5O26 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2243  
903 14 Dtool_hhEqfOpS 0 6 941 2060 0 14 Dtool_hhEqfOpS 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2243  
904 14 Dtool_hhEqYNHn 0 4 942 2059 0 14 Dtool_hhEqYNHn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  11 perspective 1 2060  
905 14 Dtool_hhEqaKhD 0 4 943 2059 0 14 Dtool_hhEqaKhD 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2245  
906 14 Dtool_hhEqmIlG 0 7 944 2055 0 14 Dtool_hhEqmIlG 0 0 
907 14 Dtool_hhEqS2yw 0 7 949 2246 1872 14 Dtool_hhEqS2yw 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
908 14 Dtool_hhEqlQny 0 4 950 2059 0 14 Dtool_hhEqlQny 609 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2246  10 properties 1 2072  
909 14 Dtool_hhEq9ANi 0 7 951 2055 0 14 Dtool_hhEq9ANi 0 0 
910 14 Dtool_hhEqI_S9 0 7 954 2247 1875 14 Dtool_hhEqI_S9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
911 14 Dtool_hhEqxbrf 0 7 955 2055 0 14 Dtool_hhEqxbrf 0 0 
912 14 Dtool_hhEqKf_r 0 7 958 2250 1883 14 Dtool_hhEqKf_r 226 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2248  
913 14 Dtool_hhEqaUFB 0 7 958 2250 1883 14 Dtool_hhEqaUFB 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
914 14 Dtool_hhEqhDOv 0 7 958 2250 1883 14 Dtool_hhEqhDOv 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
915 14 Dtool_hhEq9kyZ 0 7 959 2250 1883 14 Dtool_hhEq9kyZ 234 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2250  4 copy 1 2248  
916 14 Dtool_hhEqpyvE 0 6 960 2072 0 14 Dtool_hhEqpyvE 326 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2248  
917 14 Dtool_hhEqtEEc 0 6 961 1988 0 14 Dtool_hhEqtEEc 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2248  3 row 1 2072  
918 14 Dtool_hhEqS9Mu 0 4 962 2059 0 14 Dtool_hhEqS9Mu 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2250  3 row 1 2072  5 value 1 1988  
919 14 Dtool_hhEqL8bt 0 4 963 2059 0 14 Dtool_hhEqL8bt 322 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2250  
920 14 Dtool_hhEqmWjq 0 7 964 2055 0 14 Dtool_hhEqmWjq 0 0 
921 14 Dtool_hhEq4E8v 0 7 968 2253 1891 14 Dtool_hhEq4E8v 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2251  
922 14 Dtool_hhEqTQ_y 0 7 968 2253 1891 14 Dtool_hhEqTQ_y 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
923 14 Dtool_hhEqSp2D 0 7 968 2253 1891 14 Dtool_hhEqSp2D 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
924 14 Dtool_hhEqxP6Z 0 7 969 2253 1891 14 Dtool_hhEqxP6Z 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2253  4 copy 1 2251  
925 14 Dtool_hhEq_8_9 0 4 970 2059 0 14 Dtool_hhEq_8_9 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2253  4 type 1 2045  
926 14 Dtool_hhEqaj1_ 0 6 971 2045 0 14 Dtool_hhEqaj1_ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2251  
927 14 Dtool_hhEqZ_ev 0 6 972 2060 0 14 Dtool_hhEqZ_ev 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2251  
928 14 Dtool_hhEqg8gw 0 6 973 2045 0 14 Dtool_hhEqg8gw 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2064  
929 14 Dtool_hhEqS_i1 0 7 974 2055 0 14 Dtool_hhEqS_i1 0 0 
930 14 Dtool_hhEqbU7L 0 7 977 2254 1894 14 Dtool_hhEqbU7L 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
931 14 Dtool_hhEq8vVa 0 7 977 2254 1894 14 Dtool_hhEq8vVa 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2255  
932 14 Dtool_hhEqw9Zk 0 6 978 2254 0 14 Dtool_hhEqw9Zk 242 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  4 copy 1 2255  
933 14 Dtool_hhEqGhyi 0 4 980 2059 0 14 Dtool_hhEqGhyi 265 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2254  
934 14 Dtool_hhEqrcPl 0 6 981 2072 0 14 Dtool_hhEqrcPl 479 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  4 node 1 2071  
935 14 Dtool_hhEq8UpD 0 6 982 2060 0 14 Dtool_hhEq8UpD 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2255  
936 14 Dtool_hhEqsDuL 0 6 983 2072 0 14 Dtool_hhEqsDuL 290 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2255  
937 14 Dtool_hhEqWocW 0 7 984 2188 1524 14 Dtool_hhEqWocW 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  5 index 1 2072  
938 14 Dtool_hhEqKek0 0 6 985 2072 0 14 Dtool_hhEqKek0 1765 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  4 node 1 2068  
939 14 Dtool_hhEq9oZ4 0 4 986 2059 0 14 Dtool_hhEq9oZ4 570 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  4 node 1 2068  
940 14 Dtool_hhEqqFH7 0 6 987 2072 0 14 Dtool_hhEqqFH7 749 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2254  2 eq 1 2072  4 node 1 2071  
941 14 Dtool_hhEqKhTa 0 6 987 2072 0 14 Dtool_hhEqKhTa 1026 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2254  2 eq 1 2072  7 removed 1 2257  
942 14 Dtool_hhEqeVh6 0 4 988 2059 0 14 Dtool_hhEqeVh6 601 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2071  7 replace 1 2259  
943 14 Dtool_hhEqalB_ 0 4 989 2059 0 14 Dtool_hhEqalB_ 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2254  
944 14 Dtool_hhEq1R_8 0 4 990 2059 0 14 Dtool_hhEq1R_8 404 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2254  
945 14 Dtool_hhEqOnfn 0 4 991 2059 0 14 Dtool_hhEqOnfn 471 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2254  
946 14 Dtool_hhEqWRbQ 0 7 992 2188 1524 14 Dtool_hhEqWRbQ 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  1 n 1 2130  
947 14 Dtool_hhEqiZRv 0 6 993 2130 0 14 Dtool_hhEqiZRv 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2255  
948 14 Dtool_hhEqTk2Y 0 6 994 2060 0 14 Dtool_hhEqTk2Y 409 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  7 texture 1 2188  
949 14 Dtool_hhEqyDeK 0 6 995 2060 0 14 Dtool_hhEqyDeK 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  7 texture 1 2188  
950 14 Dtool_hhEqLULD 0 7 996 2188 1524 14 Dtool_hhEqLULD 472 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2254  4 copy 1 2186  2 eq 1 2072  
951 14 Dtool_hhEq4Tew 0 7 997 2188 1524 14 Dtool_hhEq4Tew 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  9 tref_name 1 2064  
952 14 Dtool_hhEqQxLn 0 7 998 2188 1524 14 Dtool_hhEqQxLn 328 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  8 filename 1 2137  
953 14 Dtool_hhEqngwy 0 7 1000 2263 1666 14 Dtool_hhEqngwy 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2261  
954 14 Dtool_hhEqTlzZ 0 7 1000 2263 1666 14 Dtool_hhEqTlzZ 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
955 14 Dtool_hhEqHju4 0 7 1000 2263 1666 14 Dtool_hhEqHju4 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
956 14 Dtool_hhEq1N5q 0 7 1001 2263 1666 14 Dtool_hhEq1N5q 239 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2263  4 copy 1 2261  
957 14 Dtool_hhEqTtk9 0 7 1002 2055 0 14 Dtool_hhEqTtk9 0 0 
958 14 Dtool_hhEqzlST 0 7 1004 2266 1666 14 Dtool_hhEqzlST 233 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2264  
959 14 Dtool_hhEqx593 0 7 1004 2266 1666 14 Dtool_hhEqx593 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
960 14 Dtool_hhEqgo8R 0 7 1004 2266 1666 14 Dtool_hhEqgo8R 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
961 14 Dtool_hhEqVjYd 0 7 1005 2266 1666 14 Dtool_hhEqVjYd 241 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2266  4 copy 1 2264  
962 14 Dtool_hhEqKwkg 0 7 1006 2055 0 14 Dtool_hhEqKwkg 0 0 
963 14 Dtool_hhEqRYEx 0 7 1008 2269 1943 14 Dtool_hhEqRYEx 322 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2267  
964 14 Dtool_hhEqmYOa 0 7 1008 2269 1943 14 Dtool_hhEqmYOa 225 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2270  
965 14 Dtool_hhEqcgvp 0 7 1008 2269 1943 14 Dtool_hhEqcgvp 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2064  2 cs 1 2140  
966 14 Dtool_hhEq7lEE 0 7 1008 2269 1943 14 Dtool_hhEq7lEE 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
967 14 Dtool_hhEqg0m6 0 7 1008 2269 1943 14 Dtool_hhEqg0m6 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
968 14 Dtool_hhEqBbhs 0 7 1009 2269 1943 14 Dtool_hhEqBbhs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2269  4 copy 1 2270  
969 14 Dtool_hhEqsNjA 0 4 1010 2059 0 14 Dtool_hhEqsNjA 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2269  3 fps 1 1988  
970 14 Dtool_hhEq6b_o 0 4 1011 2059 0 14 Dtool_hhEq6b_o 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
971 14 Dtool_hhEqfhuX 0 6 1012 2060 0 14 Dtool_hhEqfhuX 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
972 14 Dtool_hhEqngbU 0 6 1013 1988 0 14 Dtool_hhEqngbU 262 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
973 14 Dtool_hhEqW2jL 0 4 1014 2059 0 14 Dtool_hhEqW2jL 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2269  5 order 1 2064  
974 14 Dtool_hhEqfUuB 0 4 1015 2059 0 14 Dtool_hhEqfUuB 220 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
975 14 Dtool_hhEq2pYT 0 6 1016 2060 0 14 Dtool_hhEq2pYT 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
976 14 Dtool_hhEqcqDQ 0 6 1017 2064 0 14 Dtool_hhEqcqDQ 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
977 14 Dtool_hhEqAIxi 0 6 1018 2064 0 14 Dtool_hhEqAIxi 448 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
978 14 Dtool_hhEqnUlS 0 6 1019 2140 0 14 Dtool_hhEqnUlS 589 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
979 14 Dtool_hhEqqvPQ 0 4 1020 2059 0 14 Dtool_hhEqqvPQ 290 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
980 14 Dtool_hhEqga25 0 4 1021 2059 0 14 Dtool_hhEqga25 512 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
981 14 Dtool_hhEqsVux 0 4 1022 2059 0 14 Dtool_hhEqsVux 508 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
982 14 Dtool_hhEqXO7Q 0 6 1023 2072 0 14 Dtool_hhEqXO7Q 528 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
983 14 Dtool_hhEq4L7T 0 4 1024 2059 0 14 Dtool_hhEq4L7T 639 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//////////////////////////////////////////////////////////////////// 3 4 this 3 2270  3 row 1 2072  3 mat 1 2272  
984 14 Dtool_hhEqIeZX 0 6 1025 2060 0 14 Dtool_hhEqIeZX 716 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2269  3 row 1 2072  3 mat 1 2073  
985 14 Dtool_hhEq4n4x 0 4 1026 2059 0 14 Dtool_hhEq4n4x 316 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2269  
986 14 Dtool_hhEqCJDG 0 6 1027 2060 0 14 Dtool_hhEqCJDG 1669 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2269  3 mat 1 2073  
987 14 Dtool_hhEqAOJJ 0 4 1028 2059 0 14 Dtool_hhEqAOJJ 330 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2269  14 component_name 1 2064  5 value 1 1988  
988 14 Dtool_hhEqXAkq 0 4 1028 2059 0 14 Dtool_hhEqXAkq 307 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2269  9 component 1 2072  5 value 1 1988  
989 14 Dtool_hhEq3FmY 0 4 1029 2059 0 14 Dtool_hhEq3FmY 442 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
//////////////////////////////////////////////////////////////////// 7 3 mat 1 2272  5 scale 1 2160  5 shear 1 2160  3 hpr 1 2160  5 trans 1 2160  5 order 1 2064  2 cs 1 2140  
990 14 Dtool_hhEqm6HI 0 7 1030 2055 0 14 Dtool_hhEqm6HI 0 0 
991 14 Dtool_hhEqb2RM 0 7 1033 2273 1960 14 Dtool_hhEqb2RM 228 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2267  
992 14 Dtool_hhEqIOPW 0 7 1033 2273 1960 14 Dtool_hhEqIOPW 325 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2270  
993 14 Dtool_hhEq4g06 0 7 1033 2273 1960 14 Dtool_hhEq4g06 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2064  2 cs 1 2140  
994 14 Dtool_hhEqwzqM 0 7 1033 2273 1960 14 Dtool_hhEqwzqM 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2064  
995 14 Dtool_hhEq9omr 0 7 1033 2273 1960 14 Dtool_hhEq9omr 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
996 14 Dtool_hhEquTJ7 0 7 1034 2273 1960 14 Dtool_hhEquTJ7 236 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  4 copy 1 2267  
997 14 Dtool_hhEqQOOI 0 4 1035 2059 0 14 Dtool_hhEqQOOI 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  5 order 1 2064  
998 14 Dtool_hhEqF43l 0 4 1036 2059 0 14 Dtool_hhEqF43l 223 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2273  
999 14 Dtool_hhEqpqB7 0 6 1037 2060 0 14 Dtool_hhEqpqB7 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1000 14 Dtool_hhEqxPBu 0 6 1038 2064 0 14 Dtool_hhEqxPBu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1001 14 Dtool_hhEq4nKv 0 6 1039 2064 0 14 Dtool_hhEq4nKv 451 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
1002 14 Dtool_hhEqf_7y 0 4 1040 2059 0 14 Dtool_hhEqf_7y 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  8 contents 1 2064  
1003 14 Dtool_hhEqCl5p 0 4 1041 2059 0 14 Dtool_hhEqCl5p 226 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2273  
1004 14 Dtool_hhEqjktg 0 6 1042 2060 0 14 Dtool_hhEqjktg 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1005 14 Dtool_hhEqbBtT 0 6 1043 2064 0 14 Dtool_hhEqbBtT 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1006 14 Dtool_hhEqFVWG 0 6 1044 2140 0 14 Dtool_hhEqFVWG 592 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1007 14 Dtool_hhEqjSnu 0 6 1045 2072 0 14 Dtool_hhEqjSnu 265 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1008 14 Dtool_hhEqf3hX 0 6 1046 2072 0 14 Dtool_hhEqf3hX 393 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2267  
1009 14 Dtool_hhEqNC28 0 4 1047 2059 0 14 Dtool_hhEqNC28 437 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2267  3 row 1 2072  3 mat 1 2272  
1010 14 Dtool_hhEq_V0v 0 6 1047 1988 0 14 Dtool_hhEq_V0v 400 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2267  3 row 1 2072  3 col 1 2072  
1011 14 Dtool_hhEq0uoj 0 7 1048 2055 0 14 Dtool_hhEq0uoj 0 0 
314
1961 11 EggUserData 0 75777 11 EggUserData 11 EggUserData 0 0 0 1 1012 0 0 2 1013 1014 0 0 1 0 1962 0 0 0 0 632
////////////////////////////////////////////////////////////////////
//       Class : EggUserData
// Description : This is a base class for a user-defined data type to
//               extend egg structures in processing code.  The user
//               of the egg library may derive from EggUserData to
//               associate any arbitrary data with various egg
//               objects.
//
//               However, this data will not be written out to the
//               disk when the egg file is written; it is an in-memory
//               object only.
////////////////////////////////////////////////////////////////////

1962 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1963 9 EggObject 0 75777 9 EggObject 9 EggObject 0 0 0 1 1015 0 0 6 1016 1017 1018 1019 1020 1021 0 0 1 0 1962 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : EggObject
// Description : The highest-level base class in the egg directory.
//               (Almost) all things egg inherit from this.
////////////////////////////////////////////////////////////////////

1964 14 EggNamedObject 0 141313 14 EggNamedObject 14 EggNamedObject 0 0 0 1 1026 1030 0 3 1027 1028 1029 0 0 2 3 1963 1022 1023 3 1965 1024 1025 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : EggNamedObject
// Description : This is a fairly low-level base class--any egg
//               object that has a name.
////////////////////////////////////////////////////////////////////

1965 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1966 7 EggNode 0 141313 7 EggNode 7 EggNode 0 0 0 0 1069 0 38 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 0 0 1 0 1964 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : EggNode
// Description : A base class for things that may be directly added
//               into the egg hierarchy.  This includes groups,
//               joints, polygons, vertex pools, etc., but does not
//               include things like vertices.
////////////////////////////////////////////////////////////////////

1967 11 EggAnimData 0 141313 11 EggAnimData 11 EggAnimData 0 0 0 0 1080 0 10 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 0 0 1 0 1966 0 0 0 0 0

1968 14 EggAnimPreload 0 141313 14 EggAnimPreload 14 EggAnimPreload 0 0 0 1 1081 1092 0 10 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 0 0 1 0 1966 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : EggAnimPreload
// Description : This corresponds to an <AnimPreload> entry.
////////////////////////////////////////////////////////////////////

1969 13 EggAttributes 0 26625 13 EggAttributes 13 EggAttributes 0 0 0 1 1095 1097 2 2275 2276 18 1096 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1116 0 0 1 3 1970 1093 1094 0 0 606
////////////////////////////////////////////////////////////////////
//       Class : EggAttributes
// Description : The set of attributes that may be applied to vertices
//               as well as polygons, such as surface normal and
//               color.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1970 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

1971 18 EggMorphVertexList 0 1050624 37 EggMorphList< EggMorph< LVector3d > > 37 EggMorphList< EggMorph< LVector3d > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1972 17 EggMorphColorList 0 1050624 37 EggMorphList< EggMorph< LVector4f > > 37 EggMorphList< EggMorph< LVector4f > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1973 11 EggVertexUV 0 75777 11 EggVertexUV 11 EggVertexUV 0 0 0 1 1117 1030 1 2277 21 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1139 0 0 1 0 1964 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : EggVertexUV
// Description : The set of UV's that may or may not be assigned to a
//               vertex.  To support multitexturing, there may be
//               multiple sets of UV's on a particular vertex, each
//               with its own name.
////////////////////////////////////////////////////////////////////

1974 12 EggVertexAux 0 75777 12 EggVertexAux 12 EggVertexAux 0 0 0 1 1140 1030 0 7 1141 1142 1143 1144 1145 1146 1147 0 0 1 0 1964 0 0 0 0 500
////////////////////////////////////////////////////////////////////
//       Class : EggVertexAux
// Description : The set of named auxiliary data that may or may not
//               be assigned to a vertex.  Panda will import this data
//               and create a custom column for it in the vertex data,
//               but will not otherwise interpret it.  Presumably, a
//               shader will process the data later.
////////////////////////////////////////////////////////////////////

1975 9 EggVertex 0 26625 9 EggVertex 9 EggVertex 0 0 0 1 1152 1154 1 2278 46 1153 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1200 0 0 2 3 1963 1148 1149 3 1969 1150 1151 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : EggVertex
// Description : Any one-, two-, three-, or four-component vertex,
//               possibly with attributes such as a normal.
////////////////////////////////////////////////////////////////////

1976 13 EggVertexPool 0 75777 13 EggVertexPool 13 EggVertexPool 0 0 0 1 1201 1069 0 28 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 0 0 1 0 1966 0 0 0 0 876
////////////////////////////////////////////////////////////////////
//       Class : EggVertexPool
// Description : A collection of vertices.  There may be any number of
//               vertex pools in a single egg structure.  The vertices
//               in a single pool need not necessarily have any
//               connection to each other, but it is necessary that
//               any one primitive (e.g. a polygon) must pull all its
//               vertices from the same pool.
//
//               An EggVertexPool is an STL-style container of
//               pointers to EggVertex's.  Functions add_vertex() and
//               remove_vertex() are provided to manipulate the list.
//               The list may also be operated on (read-only) via
//               iterators and begin()/end().
////////////////////////////////////////////////////////////////////

1977 12 EggGroupNode 0 75777 12 EggGroupNode 12 EggGroupNode 0 0 0 1 1230 1069 0 36 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 0 0 1 0 1966 0 0 0 1 1978 712
////////////////////////////////////////////////////////////////////
//       Class : EggGroupNode
// Description : A base class for nodes in the hierarchy that are not
//               leaf nodes.  (See also EggGroup, which is
//               specifically the "<Group>" node in egg.)
//
//               An EggGroupNode is an STL-style container of pointers
//               to EggNodes, like a vector.  Functions
//               push_back()/pop_back() and insert()/erase() are
//               provided to manipulate the list.  The list may also
//               be operated on (read-only) via iterators and
//               begin()/end().
////////////////////////////////////////////////////////////////////

1978 16 TriangulateFlags 0 794624 30 EggGroupNode::TriangulateFlags 30 EggGroupNode::TriangulateFlags 1977 0 0 0 0 0 0 0 0 0 5 9 T_polygon 23 EggGroupNode::T_polygon 1 8 T_convex 22 EggGroupNode::T_convex 2 11 T_composite 25 EggGroupNode::T_composite 4 9 T_recurse 23 EggGroupNode::T_recurse 8 13 T_flat_shaded 27 EggGroupNode::T_flat_shaded 16 0 0

1979 13 EggRenderMode 0 141313 13 EggRenderMode 13 EggRenderMode 0 0 0 1 1267 1298 0 30 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 0 0 0 0 4 1980 1981 1982 1983 827
////////////////////////////////////////////////////////////////////
//       Class : EggRenderMode
// Description : This class stores miscellaneous rendering properties
//               that is associated with geometry, and which may be
//               set on the geometry primitive level, on the group
//               above it, or indirectly via a texture.  It's intended
//               to be a base class for egg objects that can have
//               these properties set.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1980 9 AlphaMode 0 794624 24 EggRenderMode::AlphaMode 24 EggRenderMode::AlphaMode 1979 0 0 0 0 0 0 0 0 0 9 14 AM_unspecified 29 EggRenderMode::AM_unspecified 0 6 AM_off 21 EggRenderMode::AM_off 1 5 AM_on 20 EggRenderMode::AM_on 2 8 AM_blend 23 EggRenderMode::AM_blend 3 19 AM_blend_no_occlude 34 EggRenderMode::AM_blend_no_occlude 4 5 AM_ms 20 EggRenderMode::AM_ms 5 10 AM_ms_mask 25 EggRenderMode::AM_ms_mask 6 9 AM_binary 24 EggRenderMode::AM_binary 7 7 AM_dual 22 EggRenderMode::AM_dual 8 0 0

1981 14 DepthWriteMode 0 794624 29 EggRenderMode::DepthWriteMode 29 EggRenderMode::DepthWriteMode 1979 0 0 0 0 0 0 0 0 0 3 15 DWM_unspecified 30 EggRenderMode::DWM_unspecified 0 7 DWM_off 22 EggRenderMode::DWM_off 1 6 DWM_on 21 EggRenderMode::DWM_on 2 0 0

1982 13 DepthTestMode 0 794624 28 EggRenderMode::DepthTestMode 28 EggRenderMode::DepthTestMode 1979 0 0 0 0 0 0 0 0 0 3 15 DTM_unspecified 30 EggRenderMode::DTM_unspecified 0 7 DTM_off 22 EggRenderMode::DTM_off 1 6 DTM_on 21 EggRenderMode::DTM_on 2 0 0

1983 14 VisibilityMode 0 794624 29 EggRenderMode::VisibilityMode 29 EggRenderMode::VisibilityMode 1979 0 0 0 0 0 0 0 0 0 3 14 VM_unspecified 29 EggRenderMode::VM_unspecified 0 9 VM_hidden 24 EggRenderMode::VM_hidden 1 9 VM_normal 24 EggRenderMode::VM_normal 2 0 0

1984 12 EggTransform 0 26625 12 EggTransform 12 EggTransform 0 0 0 1 1299 1301 0 30 1300 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 0 0 0 0 1 1985 579
////////////////////////////////////////////////////////////////////
//       Class : EggTransform
// Description : This represents the <Transform> entry of a group
//               or texture node: a list of component transform
//               operations, applied in order, that describe a net
//               transform matrix.  
//
//               This may be either a 3-d transform, and therefore
//               described by a 4x4 matrix, or a 2-d transform,
//               described by a 3x3 matrix.
////////////////////////////////////////////////////////////////////

1985 13 ComponentType 0 794624 27 EggTransform::ComponentType 27 EggTransform::ComponentType 1984 0 0 0 0 0 0 0 0 0 13 10 CT_invalid 24 EggTransform::CT_invalid 0 14 CT_translate2d 28 EggTransform::CT_translate2d 1 14 CT_translate3d 28 EggTransform::CT_translate3d 2 11 CT_rotate2d 25 EggTransform::CT_rotate2d 3 7 CT_rotx 21 EggTransform::CT_rotx 4 7 CT_roty 21 EggTransform::CT_roty 5 7 CT_rotz 21 EggTransform::CT_rotz 6 11 CT_rotate3d 25 EggTransform::CT_rotate3d 7 10 CT_scale2d 24 EggTransform::CT_scale2d 8 10 CT_scale3d 24 EggTransform::CT_scale3d 9 16 CT_uniform_scale 30 EggTransform::CT_uniform_scale 10 10 CT_matrix3 24 EggTransform::CT_matrix3 11 10 CT_matrix4 24 EggTransform::CT_matrix4 12 0 0

1986 18 EggSwitchCondition 0 141313 18 EggSwitchCondition 18 EggSwitchCondition 0 0 0 0 1335 0 4 1331 1332 1333 1334 0 0 1 0 1963 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchCondition
// Description : This corresponds to a <SwitchCondition> entry within
//               a group.  It indicates the condition at which a
//               level-of-detail is switched in or out.  This is
//               actually an abstract base class for potentially any
//               number of specific different kinds of switching
//               conditions; presently, only a <Distance> type is
//               actually supported.
////////////////////////////////////////////////////////////////////

1987 26 EggSwitchConditionDistance 0 141313 26 EggSwitchConditionDistance 26 EggSwitchConditionDistance 0 0 0 1 1336 1345 4 2279 2280 2281 2282 1 1344 0 0 1 0 1986 0 0 0 0 314
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchConditionDistance
// Description : A SwitchCondition that switches the levels-of-detail
//               based on distance from the camera's eyepoint.
////////////////////////////////////////////////////////////////////

1988 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1989 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1990 8 EggGroup 0 26625 8 EggGroup 8 EggGroup 0 0 0 1 1352 1354 0 134 1353 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 2 2285 2286 0 3 3 1977 1346 1347 3 1979 1348 1349 3 1984 1350 1351 0 8 1991 1992 1993 1994 1995 1996 1997 1998 302
////////////////////////////////////////////////////////////////////
//       Class : EggGroup
// Description : The main glue of the egg hierarchy, this corresponds
//               to the <Group>, <Instance>, and <Joint> type nodes.
////////////////////////////////////////////////////////////////////

1991 9 GroupType 0 794624 19 EggGroup::GroupType 19 EggGroup::GroupType 1990 0 0 0 0 0 0 0 0 0 4 10 GT_invalid 20 EggGroup::GT_invalid -1 8 GT_group 18 EggGroup::GT_group 0 11 GT_instance 21 EggGroup::GT_instance 1 8 GT_joint 18 EggGroup::GT_joint 2 0 49
// These bits are all stored somewhere in _flags.

1992 7 DCSType 0 794624 17 EggGroup::DCSType 17 EggGroup::DCSType 1990 0 0 0 0 0 0 0 0 0 6 14 DC_unspecified 24 EggGroup::DC_unspecified 0 7 DC_none 17 EggGroup::DC_none 16 8 DC_local 18 EggGroup::DC_local 32 6 DC_net 16 EggGroup::DC_net 48 11 DC_no_touch 21 EggGroup::DC_no_touch 64 10 DC_default 20 EggGroup::DC_default 80 0 0

1993 13 BillboardType 0 794624 23 EggGroup::BillboardType 23 EggGroup::BillboardType 1990 0 0 0 0 0 0 0 0 0 4 7 BT_none 17 EggGroup::BT_none 0 7 BT_axis 17 EggGroup::BT_axis 32 24 BT_point_camera_relative 34 EggGroup::BT_point_camera_relative 64 23 BT_point_world_relative 33 EggGroup::BT_point_world_relative 128 0 0

1994 18 CollisionSolidType 0 794624 28 EggGroup::CollisionSolidType 28 EggGroup::CollisionSolidType 1990 0 0 0 0 0 0 0 0 0 8 8 CST_none 18 EggGroup::CST_none 0 9 CST_plane 19 EggGroup::CST_plane 65536 11 CST_polygon 21 EggGroup::CST_polygon 131072 11 CST_polyset 21 EggGroup::CST_polyset 196608 10 CST_sphere 20 EggGroup::CST_sphere 262144 8 CST_tube 18 EggGroup::CST_tube 327680 14 CST_inv_sphere 24 EggGroup::CST_inv_sphere 393216 14 CST_floor_mesh 24 EggGroup::CST_floor_mesh 524288 0 0

1995 12 CollideFlags 0 794624 22 EggGroup::CollideFlags 22 EggGroup::CollideFlags 1990 0 0 0 0 0 0 0 0 0 9 7 CF_none 17 EggGroup::CF_none 0 10 CF_descend 20 EggGroup::CF_descend 1048576 8 CF_event 18 EggGroup::CF_event 2097152 7 CF_keep 17 EggGroup::CF_keep 4194304 8 CF_solid 18 EggGroup::CF_solid 8388608 9 CF_center 19 EggGroup::CF_center 16777216 12 CF_turnstile 22 EggGroup::CF_turnstile 33554432 8 CF_level 18 EggGroup::CF_level 67108864 13 CF_intangible 23 EggGroup::CF_intangible 134217728 0 0

1996 8 DartType 0 794624 18 EggGroup::DartType 18 EggGroup::DartType 1990 0 0 0 0 0 0 0 0 0 5 7 DT_none 17 EggGroup::DT_none 0 13 DT_structured 23 EggGroup::DT_structured 268435456 7 DT_sync 17 EggGroup::DT_sync 536870912 9 DT_nosync 19 EggGroup::DT_nosync 805306368 10 DT_default 20 EggGroup::DT_default 1073741824 0 0

1997 9 BlendMode 0 794624 19 EggGroup::BlendMode 19 EggGroup::BlendMode 1990 0 0 0 0 0 0 0 0 0 7 14 BM_unspecified 24 EggGroup::BM_unspecified 0 7 BM_none 17 EggGroup::BM_none 1 6 BM_add 16 EggGroup::BM_add 2 11 BM_subtract 21 EggGroup::BM_subtract 3 15 BM_inv_subtract 25 EggGroup::BM_inv_subtract 4 6 BM_min 16 EggGroup::BM_min 5 6 BM_max 16 EggGroup::BM_max 6 0 68
// These correspond to ColorBlendAttrib::Mode (but not numerically).

1998 12 BlendOperand 0 794624 22 EggGroup::BlendOperand 22 EggGroup::BlendOperand 1990 0 0 0 0 0 0 0 0 0 20 14 BO_unspecified 24 EggGroup::BO_unspecified 0 7 BO_zero 17 EggGroup::BO_zero 1 6 BO_one 16 EggGroup::BO_one 2 17 BO_incoming_color 27 EggGroup::BO_incoming_color 3 27 BO_one_minus_incoming_color 37 EggGroup::BO_one_minus_incoming_color 4 16 BO_fbuffer_color 26 EggGroup::BO_fbuffer_color 5 26 BO_one_minus_fbuffer_color 36 EggGroup::BO_one_minus_fbuffer_color 6 17 BO_incoming_alpha 27 EggGroup::BO_incoming_alpha 7 27 BO_one_minus_incoming_alpha 37 EggGroup::BO_one_minus_incoming_alpha 8 16 BO_fbuffer_alpha 26 EggGroup::BO_fbuffer_alpha 9 26 BO_one_minus_fbuffer_alpha 36 EggGroup::BO_one_minus_fbuffer_alpha 10 17 BO_constant_color 27 EggGroup::BO_constant_color 11 27 BO_one_minus_constant_color 37 EggGroup::BO_one_minus_constant_color 12 17 BO_constant_alpha 27 EggGroup::BO_constant_alpha 13 27 BO_one_minus_constant_alpha 37 EggGroup::BO_one_minus_constant_alpha 14 26 BO_incoming_color_saturate 36 EggGroup::BO_incoming_color_saturate 15 14 BO_color_scale 24 EggGroup::BO_color_scale 16 24 BO_one_minus_color_scale 34 EggGroup::BO_one_minus_color_scale 17 14 BO_alpha_scale 24 EggGroup::BO_alpha_scale 18 24 BO_one_minus_alpha_scale 34 EggGroup::BO_one_minus_alpha_scale 19 0 71
// These correspond to ColorBlendAttrib::Operand (but not numerically).

1999 6 EggBin 0 141313 6 EggBin 6 EggBin 0 0 0 1 1488 1492 0 3 1489 1490 1491 0 0 1 0 1990 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : EggBin
// Description : A type of group node that holds related subnodes.
//               This is a special kind of node that will never be
//               read in from an egg file, but can only exist in the
//               egg scene graph if it is created via the use of an
//               EggBinMaker.
////////////////////////////////////////////////////////////////////

2000 11 EggBinMaker 0 75777 11 EggBinMaker 11 EggBinMaker 0 0 0 0 0 0 8 1493 1494 1495 1496 1497 1498 1499 1500 0 0 1 0 1963 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : EggBinMaker
// Description : This is a handy class for collecting related nodes
//               together.  It is an abstract class; to use it you
//               must subclass off of it.  See the somewhat lengthy
//               comment above.
////////////////////////////////////////////////////////////////////

2001 10 EggComment 0 141313 10 EggComment 10 EggComment 0 0 0 1 1501 1507 0 4 1502 1504 1505 1506 0 1 1503 1 0 1966 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : EggComment
// Description : A comment that appears in an egg file within a
//               <Comment> entry.
////////////////////////////////////////////////////////////////////

2002 15 EggFilenameNode 0 141313 15 EggFilenameNode 15 EggFilenameNode 0 0 0 0 1515 0 7 1508 1509 1510 1511 1512 1513 1514 0 0 1 0 1966 0 0 0 0 430
////////////////////////////////////////////////////////////////////
//       Class : EggFilenameNode
// Description : This is an egg node that contains a filename.  It
//               references a physical file relative to the directory
//               the egg file was loaded in.  It is a base class for
//               EggTexture and EggExternalReference.
////////////////////////////////////////////////////////////////////

2003 10 EggTexture 0 26625 10 EggTexture 10 EggTexture 0 0 0 1 1522 1524 0 106 1523 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 0 0 3 3 2002 1516 1517 3 1979 1518 1519 3 1984 1520 1521 0 14 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 254
////////////////////////////////////////////////////////////////////
//       Class : EggTexture
// Description : Defines a texture map that may be applied to
//               geometry.
////////////////////////////////////////////////////////////////////

2004 11 Equivalence 0 794624 23 EggTexture::Equivalence 23 EggTexture::Equivalence 2003 0 0 0 0 0 0 0 0 0 7 10 E_basename 22 EggTexture::E_basename 1 11 E_extension 23 EggTexture::E_extension 2 9 E_dirname 21 EggTexture::E_dirname 4 19 E_complete_filename 31 EggTexture::E_complete_filename 7 11 E_transform 23 EggTexture::E_transform 8 12 E_attributes 24 EggTexture::E_attributes 16 11 E_tref_name 23 EggTexture::E_tref_name 32 0 0

2005 11 TextureType 0 794624 23 EggTexture::TextureType 23 EggTexture::TextureType 2003 0 0 0 0 0 0 0 0 0 5 14 TT_unspecified 26 EggTexture::TT_unspecified 0 13 TT_1d_texture 25 EggTexture::TT_1d_texture 1 13 TT_2d_texture 25 EggTexture::TT_2d_texture 2 13 TT_3d_texture 25 EggTexture::TT_3d_texture 3 11 TT_cube_map 23 EggTexture::TT_cube_map 4 0 0

2006 6 Format 0 794624 18 EggTexture::Format 18 EggTexture::Format 2003 0 0 0 0 0 0 0 0 0 19 13 F_unspecified 25 EggTexture::F_unspecified 0 6 F_rgba 18 EggTexture::F_rgba 1 6 F_rgbm 18 EggTexture::F_rgbm 2 8 F_rgba12 20 EggTexture::F_rgba12 3 7 F_rgba8 19 EggTexture::F_rgba8 4 7 F_rgba4 19 EggTexture::F_rgba4 5 7 F_rgba5 19 EggTexture::F_rgba5 6 5 F_rgb 17 EggTexture::F_rgb 7 7 F_rgb12 19 EggTexture::F_rgb12 8 6 F_rgb8 18 EggTexture::F_rgb8 9 6 F_rgb5 18 EggTexture::F_rgb5 10 8 F_rgb332 20 EggTexture::F_rgb332 11 5 F_red 17 EggTexture::F_red 12 7 F_green 19 EggTexture::F_green 13 6 F_blue 18 EggTexture::F_blue 14 7 F_alpha 19 EggTexture::F_alpha 15 11 F_luminance 23 EggTexture::F_luminance 16 17 F_luminance_alpha 29 EggTexture::F_luminance_alpha 17 21 F_luminance_alphamask 33 EggTexture::F_luminance_alphamask 18 0 0

2007 15 CompressionMode 0 794624 27 EggTexture::CompressionMode 27 EggTexture::CompressionMode 2003 0 0 0 0 0 0 0 0 0 9 10 CM_default 22 EggTexture::CM_default 0 6 CM_off 18 EggTexture::CM_off 1 5 CM_on 17 EggTexture::CM_on 2 7 CM_fxt1 19 EggTexture::CM_fxt1 3 7 CM_dxt1 19 EggTexture::CM_dxt1 4 7 CM_dxt2 19 EggTexture::CM_dxt2 5 7 CM_dxt3 19 EggTexture::CM_dxt3 6 7 CM_dxt4 19 EggTexture::CM_dxt4 7 7 CM_dxt5 19 EggTexture::CM_dxt5 8 0 0

2008 8 WrapMode 0 794624 20 EggTexture::WrapMode 20 EggTexture::WrapMode 2003 0 0 0 0 0 0 0 0 0 6 14 WM_unspecified 26 EggTexture::WM_unspecified 0 8 WM_clamp 20 EggTexture::WM_clamp 1 9 WM_repeat 21 EggTexture::WM_repeat 2 9 WM_mirror 21 EggTexture::WM_mirror 3 14 WM_mirror_once 26 EggTexture::WM_mirror_once 4 15 WM_border_color 27 EggTexture::WM_border_color 5 0 0

2009 10 FilterType 0 794624 22 EggTexture::FilterType 22 EggTexture::FilterType 2003 0 0 0 0 0 0 0 0 0 7 14 FT_unspecified 26 EggTexture::FT_unspecified 0 10 FT_nearest 22 EggTexture::FT_nearest 1 9 FT_linear 21 EggTexture::FT_linear 2 25 FT_nearest_mipmap_nearest 37 EggTexture::FT_nearest_mipmap_nearest 3 24 FT_linear_mipmap_nearest 36 EggTexture::FT_linear_mipmap_nearest 4 24 FT_nearest_mipmap_linear 36 EggTexture::FT_nearest_mipmap_linear 5 23 FT_linear_mipmap_linear 35 EggTexture::FT_linear_mipmap_linear 6 0 0

2010 7 EnvType 0 794624 19 EggTexture::EnvType 19 EggTexture::EnvType 2003 0 0 0 0 0 0 0 0 0 16 14 ET_unspecified 26 EggTexture::ET_unspecified 0 11 ET_modulate 23 EggTexture::ET_modulate 1 8 ET_decal 20 EggTexture::ET_decal 2 8 ET_blend 20 EggTexture::ET_blend 3 10 ET_replace 22 EggTexture::ET_replace 4 6 ET_add 18 EggTexture::ET_add 5 20 ET_blend_color_scale 32 EggTexture::ET_blend_color_scale 6 16 ET_modulate_glow 28 EggTexture::ET_modulate_glow 7 17 ET_modulate_gloss 29 EggTexture::ET_modulate_gloss 8 9 ET_normal 21 EggTexture::ET_normal 9 16 ET_normal_height 28 EggTexture::ET_normal_height 10 7 ET_glow 19 EggTexture::ET_glow 11 8 ET_gloss 20 EggTexture::ET_gloss 12 9 ET_height 21 EggTexture::ET_height 13 11 ET_selector 23 EggTexture::ET_selector 14 15 ET_normal_gloss 27 EggTexture::ET_normal_gloss 15 0 21
// "mipmap trilinear"

2011 11 CombineMode 0 794624 23 EggTexture::CombineMode 23 EggTexture::CombineMode 2003 0 0 0 0 0 0 0 0 0 9 14 CM_unspecified 26 EggTexture::CM_unspecified 0 10 CM_replace 22 EggTexture::CM_replace 1 11 CM_modulate 23 EggTexture::CM_modulate 2 6 CM_add 18 EggTexture::CM_add 3 13 CM_add_signed 25 EggTexture::CM_add_signed 4 14 CM_interpolate 26 EggTexture::CM_interpolate 5 11 CM_subtract 23 EggTexture::CM_subtract 6 11 CM_dot3_rgb 23 EggTexture::CM_dot3_rgb 7 12 CM_dot3_rgba 24 EggTexture::CM_dot3_rgba 8 0 0

2012 14 CombineChannel 0 794624 26 EggTexture::CombineChannel 26 EggTexture::CombineChannel 2003 0 0 0 0 0 0 0 0 0 3 6 CC_rgb 18 EggTexture::CC_rgb 0 8 CC_alpha 20 EggTexture::CC_alpha 1 15 CC_num_channels 27 EggTexture::CC_num_channels 2 0 0

2013 12 CombineIndex 0 794624 24 EggTexture::CombineIndex 24 EggTexture::CombineIndex 2003 0 0 0 0 0 0 0 0 0 1 14 CI_num_indices 26 EggTexture::CI_num_indices 3 0 0

2014 13 CombineSource 0 794624 25 EggTexture::CombineSource 25 EggTexture::CombineSource 2003 0 0 0 0 0 0 0 0 0 7 14 CS_unspecified 26 EggTexture::CS_unspecified 0 10 CS_texture 22 EggTexture::CS_texture 1 11 CS_constant 23 EggTexture::CS_constant 2 16 CS_primary_color 28 EggTexture::CS_primary_color 3 11 CS_previous 23 EggTexture::CS_previous 4 23 CS_constant_color_scale 35 EggTexture::CS_constant_color_scale 5 20 CS_last_saved_result 32 EggTexture::CS_last_saved_result 6 0 0

2015 14 CombineOperand 0 794624 26 EggTexture::CombineOperand 26 EggTexture::CombineOperand 2003 0 0 0 0 0 0 0 0 0 5 14 CO_unspecified 26 EggTexture::CO_unspecified 0 12 CO_src_color 24 EggTexture::CO_src_color 1 22 CO_one_minus_src_color 34 EggTexture::CO_one_minus_src_color 2 12 CO_src_alpha 24 EggTexture::CO_src_alpha 3 22 CO_one_minus_src_alpha 34 EggTexture::CO_one_minus_src_alpha 4 0 0

2016 6 TexGen 0 794624 18 EggTexture::TexGen 18 EggTexture::TexGen 2003 0 0 0 0 0 0 0 0 0 9 14 TG_unspecified 26 EggTexture::TG_unspecified 0 17 TG_eye_sphere_map 29 EggTexture::TG_eye_sphere_map 1 17 TG_world_cube_map 29 EggTexture::TG_world_cube_map 2 15 TG_eye_cube_map 27 EggTexture::TG_eye_cube_map 3 15 TG_world_normal 27 EggTexture::TG_world_normal 4 13 TG_eye_normal 25 EggTexture::TG_eye_normal 5 17 TG_world_position 29 EggTexture::TG_world_position 6 15 TG_eye_position 27 EggTexture::TG_eye_position 7 15 TG_point_sprite 27 EggTexture::TG_point_sprite 8 0 0

2017 12 QualityLevel 0 794624 24 EggTexture::QualityLevel 24 EggTexture::QualityLevel 2003 0 0 0 0 0 0 0 0 0 5 14 QL_unspecified 26 EggTexture::QL_unspecified 0 10 QL_default 22 EggTexture::QL_default 1 10 QL_fastest 22 EggTexture::QL_fastest 2 9 QL_normal 21 EggTexture::QL_normal 3 7 QL_best 19 EggTexture::QL_best 4 0 0

2018 11 EggMaterial 0 141313 11 EggMaterial 11 EggMaterial 0 0 0 1 1630 1658 0 27 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 0 0 1 0 1966 0 0 0 1 2019 183
////////////////////////////////////////////////////////////////////
//       Class : EggMaterial
// Description :
////////////////////////////////////////////////////////////////////

2019 11 Equivalence 0 794624 24 EggMaterial::Equivalence 24 EggMaterial::Equivalence 2018 0 0 0 0 0 0 0 0 0 2 12 E_attributes 25 EggMaterial::E_attributes 1 11 E_mref_name 24 EggMaterial::E_mref_name 2 0 0

2020 12 EggPrimitive 0 26625 12 EggPrimitive 12 EggPrimitive 0 0 0 0 1666 0 49 1665 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 2 2287 2288 0 3 3 1966 1659 1660 3 1969 1661 1662 3 1979 1663 1664 0 1 2021 754
////////////////////////////////////////////////////////////////////
//       Class : EggPrimitive
// Description : A base class for any of a number of kinds of geometry
//               primitives: polygons, point lights, nurbs patches,
//               parametrics curves, etc.  Things with a set of
//               vertices and some rendering properties like color.
//
//               An EggPrimitive is an STL-style container of pointers
//               to EggVertex's.  In fact, it IS a vector, and can be
//               manipulated in all the ways that vectors can.
//               However, it is necessary that all vertices belong to
//               the same vertex pool.
////////////////////////////////////////////////////////////////////

2021 7 Shading 0 794624 21 EggPrimitive::Shading 21 EggPrimitive::Shading 2020 0 0 0 0 0 0 0 0 0 4 9 S_unknown 23 EggPrimitive::S_unknown 0 9 S_overall 23 EggPrimitive::S_overall 1 10 S_per_face 24 EggPrimitive::S_per_face 2 12 S_per_vertex 26 EggPrimitive::S_per_vertex 3 0 0

2022 21 EggCompositePrimitive 0 75777 21 EggCompositePrimitive 21 EggCompositePrimitive 0 0 0 0 1666 0 7 1715 1716 1717 1718 1719 1720 1721 1 2289 0 1 0 2020 0 0 0 0 414
////////////////////////////////////////////////////////////////////
//       Class : EggCompositePrimitive
// Description : The base class for primitives such as triangle strips
//               and triangle fans, which include several component
//               triangles, each of which might have its own color
//               and/or normal.
////////////////////////////////////////////////////////////////////

2023 7 EggData 0 141313 7 EggData 7 EggData 0 0 0 1 1722 1742 0 19 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 0 0 1 0 1977 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

2024 19 EggCoordinateSystem 0 141313 19 EggCoordinateSystem 19 EggCoordinateSystem 0 0 0 1 1743 1747 0 3 1744 1745 1746 0 0 1 0 1966 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : EggCoordinateSystem
// Description : The <CoordinateSystem> entry at the top of an egg
//               file.  Don't confuse this with the enum
//               EggData::CoordinateSystem, which is the value
//               contained by this entry.
////////////////////////////////////////////////////////////////////

2025 8 EggCurve 0 141313 8 EggCurve 8 EggCurve 0 0 0 0 1755 0 7 1748 1749 1750 1751 1752 1753 1754 0 0 1 0 2020 0 0 0 1 2026 250
////////////////////////////////////////////////////////////////////
//       Class : EggCurve
// Description : A parametric curve of some kind.  See
//               EggNurbsCurve.
////////////////////////////////////////////////////////////////////

2026 9 CurveType 0 794624 19 EggCurve::CurveType 19 EggCurve::CurveType 2025 0 0 0 0 0 0 0 0 0 4 7 CT_none 17 EggCurve::CT_none 0 6 CT_xyz 16 EggCurve::CT_xyz 1 6 CT_hpr 16 EggCurve::CT_hpr 2 4 CT_t 14 EggCurve::CT_t 3 0 0

2027 20 EggExternalReference 0 141313 20 EggExternalReference 20 EggExternalReference 0 0 0 1 1756 1759 0 2 1757 1758 0 0 1 0 2002 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : EggExternalReference
// Description : Defines a reference to another egg file which should
//               be inserted at this point.
////////////////////////////////////////////////////////////////////

2028 17 EggNameUniquifier 0 75777 17 EggNameUniquifier 17 EggNameUniquifier 0 0 0 0 0 0 9 1760 1761 1762 1763 1764 1765 1766 1767 1768 0 0 1 0 1963 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : EggNameUniquifier
// Description : This is a handy class for guaranteeing unique node
//               names in an egg hierarchy.  It is an abstract class;
//               to use it you must subclass off of it.  See the
//               comment above.
////////////////////////////////////////////////////////////////////

2029 18 EggGroupUniquifier 0 141313 18 EggGroupUniquifier 18 EggGroupUniquifier 0 0 0 1 1769 1771 0 1 1770 0 0 1 0 2028 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : EggGroupUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for EggGroup nodes.  It's not
//               called automatically; you must invoke it yourself if
//               you want it.
////////////////////////////////////////////////////////////////////

2030 7 EggLine 0 75777 7 EggLine 7 EggLine 0 0 0 1 1772 1666 0 6 1773 1774 1775 1776 1777 1778 0 0 1 0 2022 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : EggLine
// Description : A line segment, or a series of connected line
//               segments, defined by a <Line> entry.
////////////////////////////////////////////////////////////////////

2031 21 EggMaterialCollection 0 26625 21 EggMaterialCollection 21 EggMaterialCollection 0 0 0 1 1779 1781 0 13 1780 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 0 0 0 0 0 477
////////////////////////////////////////////////////////////////////
//       Class : EggMaterialCollection
// Description : This is a collection of materials by MRef name.  It
//               can extract the materials from an egg file and sort
//               them all together; it can also manage the creation of
//               unique materials and the assignment of unique MRef
//               names.
////////////////////////////////////////////////////////////////////

2032 10 EggPolygon 0 141313 10 EggPolygon 10 EggPolygon 0 0 0 1 1794 1802 0 7 1795 1796 1797 1798 1799 1800 1801 0 0 1 0 2020 0 0 0 0 200
////////////////////////////////////////////////////////////////////
//       Class : EggPolygon
// Description : A single polygon.
////////////////////////////////////////////////////////////////////

2033 13 EggNurbsCurve 0 141313 13 EggNurbsCurve 13 EggNurbsCurve 0 0 0 1 1803 1817 0 13 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1 2290 0 1 0 2025 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsCurve
// Description : A parametric NURBS curve.
////////////////////////////////////////////////////////////////////

2034 10 EggSurface 0 141313 10 EggSurface 10 EggSurface 0 0 0 0 1824 0 6 1818 1819 1820 1821 1822 1823 0 0 1 0 2020 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : EggSurface
// Description : A parametric surface of some kind.  See
//               EggNurbsSurface.
////////////////////////////////////////////////////////////////////

2035 15 EggNurbsSurface 0 141313 15 EggNurbsSurface 15 EggNurbsSurface 0 0 0 1 1825 1856 2 2283 2284 28 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1855 2 2291 2292 0 1 0 2034 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsSurface
// Description : A parametric NURBS surface.
////////////////////////////////////////////////////////////////////

2036 34 list< PointerTo< EggNurbsCurve > > 0 2048 34 list< PointerTo< EggNurbsCurve > > 34 list< PointerTo< EggNurbsCurve > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2037 50 list< list< list< PointerTo< EggNurbsCurve > > > > 0 2048 50 list< list< list< PointerTo< EggNurbsCurve > > > > 50 list< list< list< PointerTo< EggNurbsCurve > > > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2038 8 EggPoint 0 141313 8 EggPoint 8 EggPoint 0 0 0 1 1857 1868 0 10 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 0 0 1 0 2020 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : EggPoint
// Description : A single point, or a collection of points as defined
//               by a single <PointLight> entry.
////////////////////////////////////////////////////////////////////

2039 15 EggPolysetMaker 0 141313 15 EggPolysetMaker 15 EggPolysetMaker 0 0 0 1 1869 1872 0 2 1870 1871 0 0 1 0 2000 0 0 0 2 2040 2041 680
////////////////////////////////////////////////////////////////////
//       Class : EggPolysetMaker
// Description : A specialization on EggBinMaker for making polysets
//               that share the same basic rendering characteristic.
//               This really just defines the example functions
//               described in the leading comment to EggBinMaker.
//
//               It makes some common assumptions about how polysets
//               should be grouped; if these are not sufficient, you
//               can always rederive your own further specialization
//               of this class.
////////////////////////////////////////////////////////////////////

2040 9 BinNumber 0 794624 26 EggPolysetMaker::BinNumber 26 EggPolysetMaker::BinNumber 2039 0 0 0 0 0 0 0 0 0 2 7 BN_none 24 EggPolysetMaker::BN_none 0 10 BN_polyset 27 EggPolysetMaker::BN_polyset 1 0 75
// The BinNumber serves to identify why a particular EggBin was
// created.

2041 10 Properties 0 794624 27 EggPolysetMaker::Properties 27 EggPolysetMaker::Properties 2039 0 0 0 0 0 0 0 0 0 10 13 P_has_texture 30 EggPolysetMaker::P_has_texture 1 9 P_texture 26 EggPolysetMaker::P_texture 2 14 P_has_material 31 EggPolysetMaker::P_has_material 4 10 P_material 27 EggPolysetMaker::P_material 8 16 P_has_poly_color 33 EggPolysetMaker::P_has_poly_color 16 12 P_poly_color 29 EggPolysetMaker::P_poly_color 32 17 P_has_poly_normal 34 EggPolysetMaker::P_has_poly_normal 64 19 P_has_vertex_normal 36 EggPolysetMaker::P_has_vertex_normal 128 18 P_has_vertex_color 35 EggPolysetMaker::P_has_vertex_color 256 7 P_bface 24 EggPolysetMaker::P_bface 512 0 0

2042 17 EggPoolUniquifier 0 141313 17 EggPoolUniquifier 17 EggPoolUniquifier 0 0 0 1 1873 1875 0 1 1874 0 0 1 0 2028 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : EggPoolUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for textures, materials, and
//               vertex pools prior to writing out an egg file.  It's
//               automatically called by EggData prior to writing out
//               an egg file.
////////////////////////////////////////////////////////////////////

2043 12 EggSAnimData 0 141313 12 EggSAnimData 12 EggSAnimData 0 0 0 1 1876 1883 0 6 1877 1878 1879 1880 1881 1882 0 0 1 0 1967 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : EggSAnimData
// Description : Corresponding to an <S$Anim> entry, this stores a
//               single column of numbers, for instance for a morph
//               target, or as one column in an EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2044 8 EggTable 0 141313 8 EggTable 8 EggTable 0 0 0 1 1884 1891 0 6 1885 1886 1887 1888 1889 1890 0 0 1 0 1977 0 0 0 1 2045 540
////////////////////////////////////////////////////////////////////
//       Class : EggTable
// Description : This corresponds to a <Table> or a <Bundle> entry.
//               As such, it doesn't actually contain a table of
//               numbers, but it may be a parent to an EggSAnimData or
//               an EggXfmAnimData, which do.  It may also be a parent
//               to another <Table> or <Bundle>, establishing a
//               hierarchy of tables.
////////////////////////////////////////////////////////////////////

2045 9 TableType 0 794624 19 EggTable::TableType 19 EggTable::TableType 2044 0 0 0 0 0 0 0 0 0 3 10 TT_invalid 20 EggTable::TT_invalid 0 8 TT_table 18 EggTable::TT_table 1 9 TT_bundle 19 EggTable::TT_bundle 2 0 0

2046 20 EggTextureCollection 0 26625 20 EggTextureCollection 20 EggTextureCollection 0 0 0 1 1892 1894 0 20 1893 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1 2293 0 0 0 0 473
////////////////////////////////////////////////////////////////////
//       Class : EggTextureCollection
// Description : This is a collection of textures by TRef name.  It
//               can extract the textures from an egg file and sort
//               them all together; it can also manage the creation of
//               unique textures and the assignment of unique TRef
//               names.
////////////////////////////////////////////////////////////////////

2047 14 EggTriangleFan 0 75777 14 EggTriangleFan 14 EggTriangleFan 0 0 0 1 1914 1666 0 2 1915 1916 0 0 1 0 2022 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleFan
// Description : A connected fan of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2048 16 EggTriangleStrip 0 75777 16 EggTriangleStrip 16 EggTriangleStrip 0 0 0 1 1917 1666 0 2 1918 1919 0 0 1 0 2022 0 0 0 0 351
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleStrip
// Description : A connected strip of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2049 11 EggXfmSAnim 0 141313 11 EggXfmSAnim 11 EggXfmSAnim 0 0 0 1 1920 1943 0 22 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 0 0 1 0 1977 0 0 0 0 484
////////////////////////////////////////////////////////////////////
//       Class : EggXfmSAnim
// Description : This corresponds to an <Xfm$Anim_S$> entry, which is
//               a collection of up to nine <S$Anim> entries that
//               specify the nine components of a transformation.
//               It's implemented as a group that can contain
//               any number of EggSAnimData children.
////////////////////////////////////////////////////////////////////

2050 14 EggXfmAnimData 0 141313 14 EggXfmAnimData 14 EggXfmAnimData 0 0 0 1 1944 1960 0 15 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 0 0 1 0 1967 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : EggXfmAnimData
// Description : Corresponding to an <Xfm$Anim> entry, this stores a
//               two-dimensional table with up to nine columns, one
//               for each component of a transformation.  This is an
//               older syntax of egg anim table, not often used
//               currently--it's replaced by EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2051 13 EggUserData * 0 8576 13 EggUserData * 13 EggUserData * 0 0 1961 0 0 0 0 0 0 0 0 0 0

2052 19 EggUserData const * 0 8576 19 EggUserData const * 19 EggUserData const * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2053 17 EggUserData const 0 8832 17 EggUserData const 17 EggUserData const 0 0 1961 0 0 0 0 0 0 0 0 0 0

2054 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2055 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2054 0 0 0 0 0 0 0 0 0 0

2056 11 EggObject * 0 8576 11 EggObject * 11 EggObject * 0 0 1963 0 0 0 0 0 0 0 0 0 0

2057 17 EggObject const * 0 8576 17 EggObject const * 17 EggObject const * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2058 15 EggObject const 0 8832 15 EggObject const 15 EggObject const 0 0 1963 0 0 0 0 0 0 0 0 0 0

2059 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2060 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2061 22 EggNamedObject const * 0 8576 22 EggNamedObject const * 22 EggNamedObject const * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2062 20 EggNamedObject const 0 8832 20 EggNamedObject const 20 EggNamedObject const 0 0 1964 0 0 0 0 0 0 0 0 0 0

2063 16 EggNamedObject * 0 8576 16 EggNamedObject * 16 EggNamedObject * 0 0 1964 0 0 0 0 0 0 0 0 0 0

2064 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2065 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2066 0 0 0 0 0 0 0 0 0 0

2066 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2067 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1965 0 0 0 0 0 0 0 0 0 0

2068 9 EggNode * 0 8576 9 EggNode * 9 EggNode * 0 0 1966 0 0 0 0 0 0 0 0 0 0

2069 15 EggNode const * 0 8576 15 EggNode const * 15 EggNode const * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2070 13 EggNode const 0 8832 13 EggNode const 13 EggNode const 0 0 1966 0 0 0 0 0 0 0 0 0 0

2071 14 EggGroupNode * 0 8576 14 EggGroupNode * 14 EggGroupNode * 0 0 1977 0 0 0 0 0 0 0 0 0 0

2072 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2073 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2074 0 0 0 0 0 0 0 0 0 0

2074 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2075 0 0 0 0 0 0 0 0 0 0

2075 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 2294 2295 2296 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2076 32 vector< basic_string< char > > * 0 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 2077 0 0 0 0 0 0 0 0 0 0

2077 13 vector_string 0 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2078 15 EggRenderMode * 0 8576 15 EggRenderMode * 15 EggRenderMode * 0 0 1979 0 0 0 0 0 0 0 0 0 0

2079 13 EggAnimData * 0 8576 13 EggAnimData * 13 EggAnimData * 0 0 1967 0 0 0 0 0 0 0 0 0 0

2080 19 EggAnimData const * 0 8576 19 EggAnimData const * 19 EggAnimData const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 17 EggAnimData const 0 8832 17 EggAnimData const 17 EggAnimData const 0 0 1967 0 0 0 0 0 0 0 0 0 0

2082 22 EggAnimPreload const * 0 8576 22 EggAnimPreload const * 22 EggAnimPreload const * 0 0 2083 0 0 0 0 0 0 0 0 0 0

2083 20 EggAnimPreload const 0 8832 20 EggAnimPreload const 20 EggAnimPreload const 0 0 1968 0 0 0 0 0 0 0 0 0 0

2084 16 EggAnimPreload * 0 8576 16 EggAnimPreload * 16 EggAnimPreload * 0 0 1968 0 0 0 0 0 0 0 0 0 0

2085 15 EggAttributes * 0 8576 15 EggAttributes * 15 EggAttributes * 0 0 1969 0 0 0 0 0 0 0 0 0 0

2086 21 EggAttributes const * 0 8576 21 EggAttributes const * 21 EggAttributes const * 0 0 2087 0 0 0 0 0 0 0 0 0 0

2087 19 EggAttributes const 0 8832 19 EggAttributes const 19 EggAttributes const 0 0 1969 0 0 0 0 0 0 0 0 0 0

2088 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 2090 0 0 0 0 0 0 0 0 0 0

2090 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2091 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2092 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2091 0 0 0 0 0 0 0 0 0 0

2093 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2094 0 0 0 0 0 0 0 0 0 0

2094 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2091 0 0 0 0 0 0 0 0 0 0

2095 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1970 0 0 0 0 0 0 0 0 0 0

2096 45 EggMorphList< EggMorph< LVector3d > > const * 0 8576 45 EggMorphList< EggMorph< LVector3d > > const * 45 EggMorphList< EggMorph< LVector3d > > const * 0 0 2097 0 0 0 0 0 0 0 0 0 0

2097 43 EggMorphList< EggMorph< LVector3d > > const 0 8832 43 EggMorphList< EggMorph< LVector3d > > const 43 EggMorphList< EggMorph< LVector3d > > const 0 0 1971 0 0 0 0 0 0 0 0 0 0

2098 45 EggMorphList< EggMorph< LVector4f > > const * 0 8576 45 EggMorphList< EggMorph< LVector4f > > const * 45 EggMorphList< EggMorph< LVector4f > > const * 0 0 2099 0 0 0 0 0 0 0 0 0 0

2099 43 EggMorphList< EggMorph< LVector4f > > const 0 8832 43 EggMorphList< EggMorph< LVector4f > > const 43 EggMorphList< EggMorph< LVector4f > > const 0 0 1972 0 0 0 0 0 0 0 0 0 0

2100 19 EggVertexUV const * 0 8576 19 EggVertexUV const * 19 EggVertexUV const * 0 0 2101 0 0 0 0 0 0 0 0 0 0

2101 17 EggVertexUV const 0 8832 17 EggVertexUV const 17 EggVertexUV const 0 0 1973 0 0 0 0 0 0 0 0 0 0

2102 13 EggVertexUV * 0 8576 13 EggVertexUV * 13 EggVertexUV * 0 0 1973 0 0 0 0 0 0 0 0 0 0

2103 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2104 0 0 0 0 0 0 0 0 0 0

2104 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 2105 0 0 0 0 0 0 0 0 0 0

2105 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2106 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1989 0 0 0 0 0 0 0 0 0 0

2108 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 2105 0 0 0 0 0 0 0 0 0 0

2109 20 EggVertexAux const * 0 8576 20 EggVertexAux const * 20 EggVertexAux const * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 18 EggVertexAux const 0 8832 18 EggVertexAux const 18 EggVertexAux const 0 0 1974 0 0 0 0 0 0 0 0 0 0

2111 14 EggVertexAux * 0 8576 14 EggVertexAux * 14 EggVertexAux * 0 0 1974 0 0 0 0 0 0 0 0 0 0

2112 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2113 0 0 0 0 0 0 0 0 0 0

2113 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2114 0 0 0 0 0 0 0 0 0 0

2114 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2115 11 EggVertex * 0 8576 11 EggVertex * 11 EggVertex * 0 0 1975 0 0 0 0 0 0 0 0 0 0

2116 17 EggVertex const * 0 8576 17 EggVertex const * 17 EggVertex const * 0 0 2117 0 0 0 0 0 0 0 0 0 0

2117 15 EggVertex const 0 8832 15 EggVertex const 15 EggVertex const 0 0 1975 0 0 0 0 0 0 0 0 0 0

2118 15 EggVertexPool * 0 8576 15 EggVertexPool * 15 EggVertexPool * 0 0 1976 0 0 0 0 0 0 0 0 0 0

2119 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2120 0 0 0 0 0 0 0 0 0 0

2120 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2122 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1989 0 0 0 0 0 0 0 0 0 0

2123 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2124 16 EggGroup const * 0 8576 16 EggGroup const * 16 EggGroup const * 0 0 2125 0 0 0 0 0 0 0 0 0 0

2125 14 EggGroup const 0 8832 14 EggGroup const 14 EggGroup const 0 0 1990 0 0 0 0 0 0 0 0 0 0

2126 20 EggPrimitive const * 0 8576 20 EggPrimitive const * 20 EggPrimitive const * 0 0 2127 0 0 0 0 0 0 0 0 0 0

2127 18 EggPrimitive const 0 8832 18 EggPrimitive const 18 EggPrimitive const 0 0 2020 0 0 0 0 0 0 0 0 0 0

2128 21 EggVertexPool const * 0 8576 21 EggVertexPool const * 21 EggVertexPool const * 0 0 2129 0 0 0 0 0 0 0 0 0 0

2129 19 EggVertexPool const 0 8832 19 EggVertexPool const 19 EggVertexPool const 0 0 1976 0 0 0 0 0 0 0 0 0 0

2130 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2131 14 EggPrimitive * 0 8576 14 EggPrimitive * 14 EggPrimitive * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2132 20 EggGroupNode const * 0 8576 20 EggGroupNode const * 20 EggGroupNode const * 0 0 2133 0 0 0 0 0 0 0 0 0 0

2133 18 EggGroupNode const 0 8832 18 EggGroupNode const 18 EggGroupNode const 0 0 1977 0 0 0 0 0 0 0 0 0 0

2134 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2136 0 0 0 0 0 0 0 0 0 0

2136 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 1 2297 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2137 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2138 0 0 0 0 0 0 0 0 0 0

2138 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2139 0 0 0 0 0 0 0 0 0 0

2139 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2140 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2141 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2142 0 0 0 0 0 0 0 0 0 0

2142 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2143 0 0 0 0 0 0 0 0 0 0

2143 11 GlobPattern 0 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2144 38 vector< basic_string< char > > const * 0 8576 38 vector< basic_string< char > > const * 38 vector< basic_string< char > > const * 0 0 2145 0 0 0 0 0 0 0 0 0 0

2145 36 vector< basic_string< char > > const 0 8832 36 vector< basic_string< char > > const 36 vector< basic_string< char > > const 0 0 2077 0 0 0 0 0 0 0 0 0 0

2146 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 2147 0 0 0 0 0 0 0 0 0 0

2147 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 2148 0 0 0 0 0 0 0 0 0 0

2148 9 LVector2d 0 2048 9 LVector2d 9 LVector2d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2149 21 EggRenderMode const * 0 8576 21 EggRenderMode const * 21 EggRenderMode const * 0 0 2150 0 0 0 0 0 0 0 0 0 0

2150 19 EggRenderMode const 0 8832 19 EggRenderMode const 19 EggRenderMode const 0 0 1979 0 0 0 0 0 0 0 0 0 0

2151 14 EggTransform * 0 8576 14 EggTransform * 14 EggTransform * 0 0 1984 0 0 0 0 0 0 0 0 0 0

2152 20 EggTransform const * 0 8576 20 EggTransform const * 20 EggTransform const * 0 0 2153 0 0 0 0 0 0 0 0 0 0

2153 18 EggTransform const 0 8832 18 EggTransform const 18 EggTransform const 0 0 1984 0 0 0 0 0 0 0 0 0 0

2154 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2155 0 0 0 0 0 0 0 0 0 0

2155 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2156 0 0 0 0 0 0 0 0 0 0

2156 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2157 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2158 0 0 0 0 0 0 0 0 0 0

2158 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2159 0 0 0 0 0 0 0 0 0 0

2159 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2160 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2162 0 0 0 0 0 0 0 0 0 0

2162 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2163 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2165 0 0 0 0 0 0 0 0 0 0

2165 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 2298 2299 2300 2301 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2166 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2165 0 0 0 0 0 0 0 0 0 0

2167 26 EggSwitchCondition const * 0 8576 26 EggSwitchCondition const * 26 EggSwitchCondition const * 0 0 2168 0 0 0 0 0 0 0 0 0 0

2168 24 EggSwitchCondition const 0 8832 24 EggSwitchCondition const 24 EggSwitchCondition const 0 0 1986 0 0 0 0 0 0 0 0 0 0

2169 20 EggSwitchCondition * 0 8576 20 EggSwitchCondition * 20 EggSwitchCondition * 0 0 1986 0 0 0 0 0 0 0 0 0 0

2170 28 EggSwitchConditionDistance * 0 8576 28 EggSwitchConditionDistance * 28 EggSwitchConditionDistance * 0 0 1987 0 0 0 0 0 0 0 0 0 0

2171 34 EggSwitchConditionDistance const * 0 8576 34 EggSwitchConditionDistance const * 34 EggSwitchConditionDistance const * 0 0 2172 0 0 0 0 0 0 0 0 0 0

2172 32 EggSwitchConditionDistance const 0 8832 32 EggSwitchConditionDistance const 32 EggSwitchConditionDistance const 0 0 1987 0 0 0 0 0 0 0 0 0 0

2173 10 EggGroup * 0 8576 10 EggGroup * 10 EggGroup * 0 0 1990 0 0 0 0 0 0 0 0 0 0

2174 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 2175 0 0 0 0 0 0 0 0 0 0

2175 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

2176 14 EggBin const * 0 8576 14 EggBin const * 14 EggBin const * 0 0 2177 0 0 0 0 0 0 0 0 0 0

2177 12 EggBin const 0 8832 12 EggBin const 12 EggBin const 0 0 1999 0 0 0 0 0 0 0 0 0 0

2178 8 EggBin * 0 8576 8 EggBin * 8 EggBin * 0 0 1999 0 0 0 0 0 0 0 0 0 0

2179 13 EggBinMaker * 0 8576 13 EggBinMaker * 13 EggBinMaker * 0 0 2000 0 0 0 0 0 0 0 0 0 0

2180 18 EggComment const * 0 8576 18 EggComment const * 18 EggComment const * 0 0 2181 0 0 0 0 0 0 0 0 0 0

2181 16 EggComment const 0 8832 16 EggComment const 16 EggComment const 0 0 2001 0 0 0 0 0 0 0 0 0 0

2182 12 EggComment * 0 8576 12 EggComment * 12 EggComment * 0 0 2001 0 0 0 0 0 0 0 0 0 0

2183 17 EggFilenameNode * 0 8576 17 EggFilenameNode * 17 EggFilenameNode * 0 0 2002 0 0 0 0 0 0 0 0 0 0

2184 23 EggFilenameNode const * 0 8576 23 EggFilenameNode const * 23 EggFilenameNode const * 0 0 2185 0 0 0 0 0 0 0 0 0 0

2185 21 EggFilenameNode const 0 8832 21 EggFilenameNode const 21 EggFilenameNode const 0 0 2002 0 0 0 0 0 0 0 0 0 0

2186 18 EggTexture const * 0 8576 18 EggTexture const * 18 EggTexture const * 0 0 2187 0 0 0 0 0 0 0 0 0 0

2187 16 EggTexture const 0 8832 16 EggTexture const 16 EggTexture const 0 0 2003 0 0 0 0 0 0 0 0 0 0

2188 12 EggTexture * 0 8576 12 EggTexture * 12 EggTexture * 0 0 2003 0 0 0 0 0 0 0 0 0 0

2189 19 EggMaterial const * 0 8576 19 EggMaterial const * 19 EggMaterial const * 0 0 2190 0 0 0 0 0 0 0 0 0 0

2190 17 EggMaterial const 0 8832 17 EggMaterial const 17 EggMaterial const 0 0 2018 0 0 0 0 0 0 0 0 0 0

2191 13 EggMaterial * 0 8576 13 EggMaterial * 13 EggMaterial * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2192 23 EggCompositePrimitive * 0 8576 23 EggCompositePrimitive * 23 EggCompositePrimitive * 0 0 2022 0 0 0 0 0 0 0 0 0 0

2193 29 EggCompositePrimitive const * 0 8576 29 EggCompositePrimitive const * 29 EggCompositePrimitive const * 0 0 2194 0 0 0 0 0 0 0 0 0 0

2194 27 EggCompositePrimitive const 0 8832 27 EggCompositePrimitive const 27 EggCompositePrimitive const 0 0 2022 0 0 0 0 0 0 0 0 0 0

2195 9 EggData * 0 8576 9 EggData * 9 EggData * 0 0 2023 0 0 0 0 0 0 0 0 0 0

2196 15 EggData const * 0 8576 15 EggData const * 15 EggData const * 0 0 2197 0 0 0 0 0 0 0 0 0 0

2197 13 EggData const 0 8832 13 EggData const 13 EggData const 0 0 2023 0 0 0 0 0 0 0 0 0 0

2198 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2139 0 0 0 0 0 0 0 0 0 0

2199 9 istream * 0 8576 9 istream * 9 istream * 0 0 2200 0 0 0 0 0 0 0 0 0 0

2200 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2201 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 2202 0 0 0 0 0 0 0 0 0 0

2202 14 BamCacheRecord 0 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

2203 21 EggCoordinateSystem * 0 8576 21 EggCoordinateSystem * 21 EggCoordinateSystem * 0 0 2024 0 0 0 0 0 0 0 0 0 0

2204 27 EggCoordinateSystem const * 0 8576 27 EggCoordinateSystem const * 27 EggCoordinateSystem const * 0 0 2205 0 0 0 0 0 0 0 0 0 0

2205 25 EggCoordinateSystem const 0 8832 25 EggCoordinateSystem const 25 EggCoordinateSystem const 0 0 2024 0 0 0 0 0 0 0 0 0 0

2206 10 EggCurve * 0 8576 10 EggCurve * 10 EggCurve * 0 0 2025 0 0 0 0 0 0 0 0 0 0

2207 16 EggCurve const * 0 8576 16 EggCurve const * 16 EggCurve const * 0 0 2208 0 0 0 0 0 0 0 0 0 0

2208 14 EggCurve const 0 8832 14 EggCurve const 14 EggCurve const 0 0 2025 0 0 0 0 0 0 0 0 0 0

2209 28 EggExternalReference const * 0 8576 28 EggExternalReference const * 28 EggExternalReference const * 0 0 2210 0 0 0 0 0 0 0 0 0 0

2210 26 EggExternalReference const 0 8832 26 EggExternalReference const 26 EggExternalReference const 0 0 2027 0 0 0 0 0 0 0 0 0 0

2211 22 EggExternalReference * 0 8576 22 EggExternalReference * 22 EggExternalReference * 0 0 2027 0 0 0 0 0 0 0 0 0 0

2212 19 EggNameUniquifier * 0 8576 19 EggNameUniquifier * 19 EggNameUniquifier * 0 0 2028 0 0 0 0 0 0 0 0 0 0

2213 25 EggNameUniquifier const * 0 8576 25 EggNameUniquifier const * 25 EggNameUniquifier const * 0 0 2214 0 0 0 0 0 0 0 0 0 0

2214 23 EggNameUniquifier const 0 8832 23 EggNameUniquifier const 23 EggNameUniquifier const 0 0 2028 0 0 0 0 0 0 0 0 0 0

2215 20 EggGroupUniquifier * 0 8576 20 EggGroupUniquifier * 20 EggGroupUniquifier * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2216 15 EggLine const * 0 8576 15 EggLine const * 15 EggLine const * 0 0 2217 0 0 0 0 0 0 0 0 0 0

2217 13 EggLine const 0 8832 13 EggLine const 13 EggLine const 0 0 2030 0 0 0 0 0 0 0 0 0 0

2218 9 EggLine * 0 8576 9 EggLine * 9 EggLine * 0 0 2030 0 0 0 0 0 0 0 0 0 0

2219 23 EggMaterialCollection * 0 8576 23 EggMaterialCollection * 23 EggMaterialCollection * 0 0 2031 0 0 0 0 0 0 0 0 0 0

2220 29 EggMaterialCollection const * 0 8576 29 EggMaterialCollection const * 29 EggMaterialCollection const * 0 0 2221 0 0 0 0 0 0 0 0 0 0

2221 27 EggMaterialCollection const 0 8832 27 EggMaterialCollection const 27 EggMaterialCollection const 0 0 2031 0 0 0 0 0 0 0 0 0 0

2222 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 8576 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 0 2223 0 0 0 0 0 0 0 0 0 0

2223 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 2048 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2224 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 8576 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 0 2225 0 0 0 0 0 0 0 0 0 0

2225 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 8832 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 0 2223 0 0 0 0 0 0 0 0 0 0

2226 18 EggPolygon const * 0 8576 18 EggPolygon const * 18 EggPolygon const * 0 0 2227 0 0 0 0 0 0 0 0 0 0

2227 16 EggPolygon const 0 8832 16 EggPolygon const 16 EggPolygon const 0 0 2032 0 0 0 0 0 0 0 0 0 0

2228 12 EggPolygon * 0 8576 12 EggPolygon * 12 EggPolygon * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2229 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 2090 0 0 0 0 0 0 0 0 0 0

2230 21 EggNurbsCurve const * 0 8576 21 EggNurbsCurve const * 21 EggNurbsCurve const * 0 0 2231 0 0 0 0 0 0 0 0 0 0

2231 19 EggNurbsCurve const 0 8832 19 EggNurbsCurve const 19 EggNurbsCurve const 0 0 2033 0 0 0 0 0 0 0 0 0 0

2232 15 EggNurbsCurve * 0 8576 15 EggNurbsCurve * 15 EggNurbsCurve * 0 0 2033 0 0 0 0 0 0 0 0 0 0

2233 12 EggSurface * 0 8576 12 EggSurface * 12 EggSurface * 0 0 2034 0 0 0 0 0 0 0 0 0 0

2234 18 EggSurface const * 0 8576 18 EggSurface const * 18 EggSurface const * 0 0 2235 0 0 0 0 0 0 0 0 0 0

2235 16 EggSurface const 0 8832 16 EggSurface const 16 EggSurface const 0 0 2034 0 0 0 0 0 0 0 0 0 0

2236 23 EggNurbsSurface const * 0 8576 23 EggNurbsSurface const * 23 EggNurbsSurface const * 0 0 2237 0 0 0 0 0 0 0 0 0 0

2237 21 EggNurbsSurface const 0 8832 21 EggNurbsSurface const 21 EggNurbsSurface const 0 0 2035 0 0 0 0 0 0 0 0 0 0

2238 17 EggNurbsSurface * 0 8576 17 EggNurbsSurface * 17 EggNurbsSurface * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2239 42 list< PointerTo< EggNurbsCurve > > const * 0 8576 42 list< PointerTo< EggNurbsCurve > > const * 42 list< PointerTo< EggNurbsCurve > > const * 0 0 2240 0 0 0 0 0 0 0 0 0 0

2240 40 list< PointerTo< EggNurbsCurve > > const 0 8832 40 list< PointerTo< EggNurbsCurve > > const 40 list< PointerTo< EggNurbsCurve > > const 0 0 2036 0 0 0 0 0 0 0 0 0 0

2241 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 0 8576 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 0 0 2242 0 0 0 0 0 0 0 0 0 0

2242 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 0 8832 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 0 0 2037 0 0 0 0 0 0 0 0 0 0

2243 16 EggPoint const * 0 8576 16 EggPoint const * 16 EggPoint const * 0 0 2244 0 0 0 0 0 0 0 0 0 0

2244 14 EggPoint const 0 8832 14 EggPoint const 14 EggPoint const 0 0 2038 0 0 0 0 0 0 0 0 0 0

2245 10 EggPoint * 0 8576 10 EggPoint * 10 EggPoint * 0 0 2038 0 0 0 0 0 0 0 0 0 0

2246 17 EggPolysetMaker * 0 8576 17 EggPolysetMaker * 17 EggPolysetMaker * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2247 19 EggPoolUniquifier * 0 8576 19 EggPoolUniquifier * 19 EggPoolUniquifier * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2248 20 EggSAnimData const * 0 8576 20 EggSAnimData const * 20 EggSAnimData const * 0 0 2249 0 0 0 0 0 0 0 0 0 0

2249 18 EggSAnimData const 0 8832 18 EggSAnimData const 18 EggSAnimData const 0 0 2043 0 0 0 0 0 0 0 0 0 0

2250 14 EggSAnimData * 0 8576 14 EggSAnimData * 14 EggSAnimData * 0 0 2043 0 0 0 0 0 0 0 0 0 0

2251 16 EggTable const * 0 8576 16 EggTable const * 16 EggTable const * 0 0 2252 0 0 0 0 0 0 0 0 0 0

2252 14 EggTable const 0 8832 14 EggTable const 14 EggTable const 0 0 2044 0 0 0 0 0 0 0 0 0 0

2253 10 EggTable * 0 8576 10 EggTable * 10 EggTable * 0 0 2044 0 0 0 0 0 0 0 0 0 0

2254 22 EggTextureCollection * 0 8576 22 EggTextureCollection * 22 EggTextureCollection * 0 0 2046 0 0 0 0 0 0 0 0 0 0

2255 28 EggTextureCollection const * 0 8576 28 EggTextureCollection const * 28 EggTextureCollection const * 0 0 2256 0 0 0 0 0 0 0 0 0 0

2256 26 EggTextureCollection const 0 8832 26 EggTextureCollection const 26 EggTextureCollection const 0 0 2046 0 0 0 0 0 0 0 0 0 0

2257 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 8576 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 0 2258 0 0 0 0 0 0 0 0 0 0

2258 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 2048 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2259 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 8576 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 0 2260 0 0 0 0 0 0 0 0 0 0

2260 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 8832 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 0 2258 0 0 0 0 0 0 0 0 0 0

2261 22 EggTriangleFan const * 0 8576 22 EggTriangleFan const * 22 EggTriangleFan const * 0 0 2262 0 0 0 0 0 0 0 0 0 0

2262 20 EggTriangleFan const 0 8832 20 EggTriangleFan const 20 EggTriangleFan const 0 0 2047 0 0 0 0 0 0 0 0 0 0

2263 16 EggTriangleFan * 0 8576 16 EggTriangleFan * 16 EggTriangleFan * 0 0 2047 0 0 0 0 0 0 0 0 0 0

2264 24 EggTriangleStrip const * 0 8576 24 EggTriangleStrip const * 24 EggTriangleStrip const * 0 0 2265 0 0 0 0 0 0 0 0 0 0

2265 22 EggTriangleStrip const 0 8832 22 EggTriangleStrip const 22 EggTriangleStrip const 0 0 2048 0 0 0 0 0 0 0 0 0 0

2266 18 EggTriangleStrip * 0 8576 18 EggTriangleStrip * 18 EggTriangleStrip * 0 0 2048 0 0 0 0 0 0 0 0 0 0

2267 22 EggXfmAnimData const * 0 8576 22 EggXfmAnimData const * 22 EggXfmAnimData const * 0 0 2268 0 0 0 0 0 0 0 0 0 0

2268 20 EggXfmAnimData const 0 8832 20 EggXfmAnimData const 20 EggXfmAnimData const 0 0 2050 0 0 0 0 0 0 0 0 0 0

2269 13 EggXfmSAnim * 0 8576 13 EggXfmSAnim * 13 EggXfmSAnim * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2270 19 EggXfmSAnim const * 0 8576 19 EggXfmSAnim const * 19 EggXfmSAnim const * 0 0 2271 0 0 0 0 0 0 0 0 0 0

2271 17 EggXfmSAnim const 0 8832 17 EggXfmSAnim const 17 EggXfmSAnim const 0 0 2049 0 0 0 0 0 0 0 0 0 0

2272 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2075 0 0 0 0 0 0 0 0 0 0

2273 16 EggXfmAnimData * 0 8576 16 EggXfmAnimData * 16 EggXfmAnimData * 0 0 2050 0 0 0 0 0 0 0 0 0 0

2274 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
10
2275 9 _dnormals 0 2 1971 1114 0 24 EggAttributes::_dnormals 
2276 7 _drgbas 0 2 1972 1115 0 22 EggAttributes::_drgbas 
2277 5 _duvs 0 2 1971 1138 0 18 EggVertexUV::_duvs 
2278 6 _dxyzs 0 2 1971 1199 0 17 EggVertex::_dxyzs 
2279 5 _fade 0 6 1988 1337 1338 33 EggSwitchConditionDistance::_fade 
2280 11 _switch_out 0 6 1988 1339 1340 39 EggSwitchConditionDistance::_switch_out 
2281 10 _switch_in 0 6 1988 1341 1342 38 EggSwitchConditionDistance::_switch_in 
2282 7 _center 0 2 1989 1343 0 35 EggSwitchConditionDistance::_center 
2283 18 _curves_on_surface 0 2 2036 1853 0 35 EggNurbsSurface::_curves_on_surface 
2284 6 _trims 0 2 2037 1854 0 23 EggNurbsSurface::_trims 
17
2285 0 0 372 16 get_object_types 20 get_num_object_types 15 get_object_type 
2286 0 0 372 14 get_group_refs 18 get_num_group_refs 13 get_group_ref 
2287 0 0 715 12 get_textures 16 get_num_textures 11 get_texture 
2288 0 0 715 12 get_vertices 16 get_num_vertices 10 get_vertex 
2289 0 0 773 14 get_components 18 get_num_components 13 get_component 
2290 0 0 872 9 get_knots 13 get_num_knots 8 get_knot 
2291 0 0 896 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
2292 0 0 896 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
2293 0 0 976 12 get_textures 16 get_num_textures 11 get_texture 
2294 0 0 1106 8 get_rows 4 size 7 get_row 
2295 0 0 1106 8 get_cols 4 size 7 get_col 
2296 0 0 1106 9 get_row3s 4 size 8 get_row3 
2297 0 0 1390 15 get_directories 19 get_num_directories 13 get_directory 
2298 0 0 1494 8 get_rows 4 size 7 get_row 
2299 0 0 1494 8 get_cols 4 size 7 get_col 
2300 0 0 1494 9 get_col2s 4 size 8 get_col2 
2301 0 0 1494 9 get_row2s 4 size 8 get_row2 
