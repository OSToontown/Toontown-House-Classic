1365930097
2 2
9 libp3gobj 4 qQJq 5 panda 
1329
1499 11 AdaptiveLru 0 4 2828 24 AdaptiveLru::AdaptiveLru 0 1 1 224
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
AdaptiveLru::AdaptiveLru(basic_string< char > const &name, unsigned int max_size);

1500 12 ~AdaptiveLru 0 4 2828 25 AdaptiveLru::~AdaptiveLru 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
32
AdaptiveLru::~AdaptiveLru(void);

1501 14 get_total_size 0 4 2828 27 AdaptiveLru::get_total_size 0 1 2 797
// Filename: adaptiveLru.I
// Created by:  drose (03Sep08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_total_size
//       Access: Published
//  Description: Returns the total size of all objects currently
//               active on the LRU.
////////////////////////////////////////////////////////////////////
60
inline unsigned int AdaptiveLru::get_total_size(void) const;

1502 12 get_max_size 0 4 2828 25 AdaptiveLru::get_max_size 0 1 3 319
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_max_size
//       Access: Published
//  Description: Returns the max size of all objects that are allowed
//               to be active on the LRU.
////////////////////////////////////////////////////////////////////
58
inline unsigned int AdaptiveLru::get_max_size(void) const;

1503 12 set_max_size 0 4 2828 25 AdaptiveLru::set_max_size 0 1 4 385
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_max_size
//       Access: Published
//  Description: Changes the max size of all objects that are allowed
//               to be active on the LRU.
//
//               If the size is (size_t)-1, there is no limit.
////////////////////////////////////////////////////////////////////
61
inline void AdaptiveLru::set_max_size(unsigned int max_size);

1504 17 count_active_size 0 4 2828 30 AdaptiveLru::count_active_size 0 1 5 339
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::count_active_size
//       Access: Published
//  Description: Returns the total size of the pages that were
//               enqueued since the last call to begin_epoch().
////////////////////////////////////////////////////////////////////
56
unsigned int AdaptiveLru::count_active_size(void) const;

1505 14 consider_evict 0 4 2828 27 AdaptiveLru::consider_evict 0 1 6 277
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::consider_evict
//       Access: Published
//  Description: Evicts a sequence of objects if the queue is full.
////////////////////////////////////////////////////////////////////
46
inline void AdaptiveLru::consider_evict(void);

1506 8 evict_to 0 4 2828 21 AdaptiveLru::evict_to 0 1 7 373
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::evict_to
//       Access: Published
//  Description: Evicts a sequence of objects until the queue fits
//               within the indicated target size, regardless of its
//               normal max size.
////////////////////////////////////////////////////////////////////
60
inline void AdaptiveLru::evict_to(unsigned int target_size);

1507 11 begin_epoch 0 4 2828 24 AdaptiveLru::begin_epoch 0 1 8 443
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::begin_epoch
//       Access: Published
//  Description: Marks the end of the previous epoch and the beginning
//               of the next one.  This will evict any objects that
//               are pending eviction, and also update any internal
//               bookkeeping.
////////////////////////////////////////////////////////////////////
36
void AdaptiveLru::begin_epoch(void);

1508 8 validate 0 4 2828 21 AdaptiveLru::validate 0 1 9 365
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::validate
//       Access: Published
//  Description: Checks that the LRU is internally self-consistent.
//               Returns true if successful, false if there is some
//               problem.
////////////////////////////////////////////////////////////////////
40
inline bool AdaptiveLru::validate(void);

1509 6 output 0 4 2828 19 AdaptiveLru::output 0 1 10 219
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void AdaptiveLru::output(ostream &out) const;

1510 5 write 0 4 2828 18 AdaptiveLru::write 0 1 11 227
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
62
void AdaptiveLru::write(ostream &out, int indent_level) const;

1511 10 set_weight 0 4 2828 23 AdaptiveLru::set_weight 0 1 12 515
// The following methods are specific to AdaptiveLru, and do not
// exist in the SimpleLru implementation.  In most cases, the
// defaults will be sufficient, so you do not need to mess with
// them.

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_weight
//       Access: Published
//  Description: Specifies the weight value used to compute the
//               exponential moving average.
////////////////////////////////////////////////////////////////////
50
inline void AdaptiveLru::set_weight(float weight);

1512 10 get_weight 0 4 2828 23 AdaptiveLru::get_weight 0 1 13 513
// The following methods are specific to AdaptiveLru, and do not
// exist in the SimpleLru implementation.  In most cases, the
// defaults will be sufficient, so you do not need to mess with
// them.

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_weight
//       Access: Published
//  Description: Returns the weight value used to compute the
//               exponential moving average.
////////////////////////////////////////////////////////////////////
49
inline float AdaptiveLru::get_weight(void) const;

1513 25 set_max_updates_per_frame 0 4 2828 38 AdaptiveLru::set_max_updates_per_frame 0 1 14 486
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_max_updates_per_frame
//       Access: Published
//  Description: Specifies the maximum number of pages the AdaptiveLru
//               will update each frame.  This is a performance
//               optimization: keeping this number low limits the
//               impact of the AdaptiveLru's adaptive algorithm.
////////////////////////////////////////////////////////////////////
78
inline void AdaptiveLru::set_max_updates_per_frame(int max_updates_per_frame);

1514 25 get_max_updates_per_frame 0 4 2828 38 AdaptiveLru::get_max_updates_per_frame 0 1 15 330
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_max_updates_per_frame
//       Access: Published
//  Description: Returns the maximum number of pages the AdaptiveLru
//               will update each frame.
////////////////////////////////////////////////////////////////////
62
inline int AdaptiveLru::get_max_updates_per_frame(void) const;

1515 36 upcast_to_AdaptiveLruPageDynamicList 0 12 2830 53 AdaptiveLruPage::upcast_to_AdaptiveLruPageDynamicList 0 0 57
upcast from AdaptiveLruPage to AdaptiveLruPageDynamicList
88
AdaptiveLruPageDynamicList *AdaptiveLruPage::upcast_to_AdaptiveLruPageDynamicList(void);

1516 27 downcast_to_AdaptiveLruPage 0 12 2831 55 AdaptiveLruPageDynamicList::downcast_to_AdaptiveLruPage 0 0 59
downcast from AdaptiveLruPageDynamicList to AdaptiveLruPage
79
AdaptiveLruPage *AdaptiveLruPageDynamicList::downcast_to_AdaptiveLruPage(void);

1517 35 upcast_to_AdaptiveLruPageStaticList 0 12 2830 52 AdaptiveLruPage::upcast_to_AdaptiveLruPageStaticList 0 0 56
upcast from AdaptiveLruPage to AdaptiveLruPageStaticList
86
AdaptiveLruPageStaticList *AdaptiveLruPage::upcast_to_AdaptiveLruPageStaticList(void);

1518 27 downcast_to_AdaptiveLruPage 0 12 2832 54 AdaptiveLruPageStaticList::downcast_to_AdaptiveLruPage 0 0 58
downcast from AdaptiveLruPageStaticList to AdaptiveLruPage
78
AdaptiveLruPage *AdaptiveLruPageStaticList::downcast_to_AdaptiveLruPage(void);

1519 15 AdaptiveLruPage 0 4 2830 32 AdaptiveLruPage::AdaptiveLruPage 0 2 16 17 463
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
119
AdaptiveLruPage::AdaptiveLruPage(unsigned int lru_size);
AdaptiveLruPage::AdaptiveLruPage(AdaptiveLruPage const &copy);

1520 10 operator = 0 4 2830 27 AdaptiveLruPage::operator = 0 1 18 241
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Copy Assignment Operator
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
62
void AdaptiveLruPage::operator =(AdaptiveLruPage const &copy);

1521 16 ~AdaptiveLruPage 0 4 2830 33 AdaptiveLruPage::~AdaptiveLruPage 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
virtual AdaptiveLruPage::~AdaptiveLruPage(void);

1522 7 get_lru 0 4 2830 24 AdaptiveLruPage::get_lru 0 1 19 335
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::enqueue_lru
//       Access: Published
//  Description: Returns the LRU that manages this page, or NULL if it
//               is not currently managed by any LRU.
////////////////////////////////////////////////////////////////////
57
inline AdaptiveLru *AdaptiveLruPage::get_lru(void) const;

1523 11 enqueue_lru 0 4 2830 28 AdaptiveLruPage::enqueue_lru 0 1 20 445
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::enqueue_lru
//       Access: Published
//  Description: Adds the page to the LRU for the first time, or marks
//               it recently-accessed if it has already been added.
//
//               If lru is NULL, it means to remove this page from its
//               LRU.
////////////////////////////////////////////////////////////////////
52
void AdaptiveLruPage::enqueue_lru(AdaptiveLru *lru);

1524 11 dequeue_lru 0 4 2830 28 AdaptiveLruPage::dequeue_lru 0 1 21 266
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::dequeue_lru
//       Access: Published
//  Description: Removes the page from its AdaptiveLru.
////////////////////////////////////////////////////////////////////
47
inline void AdaptiveLruPage::dequeue_lru(void);

1525 13 mark_used_lru 0 4 2830 30 AdaptiveLruPage::mark_used_lru 0 2 22 23 835
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the AdaptiveLru queue it is already on.
//
//               This method is const because it's not technically
//               modifying the contents of the page itself.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the specified AdaptiveLru queue.
////////////////////////////////////////////////////////////////////
117
inline void AdaptiveLruPage::mark_used_lru(void) const;
inline void AdaptiveLruPage::mark_used_lru(AdaptiveLru *lru);

1526 12 get_lru_size 0 4 2830 29 AdaptiveLruPage::get_lru_size 0 1 24 320
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_lru_size
//       Access: Published
//  Description: Returns the size of this page as reported to the LRU,
//               presumably in bytes.
////////////////////////////////////////////////////////////////////
62
inline unsigned int AdaptiveLruPage::get_lru_size(void) const;

1527 12 set_lru_size 0 4 2830 29 AdaptiveLruPage::set_lru_size 0 1 25 330
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::set_lru_size
//       Access: Published
//  Description: Specifies the size of this page, presumably in bytes,
//               although any unit is possible.
////////////////////////////////////////////////////////////////////
65
inline void AdaptiveLruPage::set_lru_size(unsigned int lru_size);

1528 9 evict_lru 0 4 2830 26 AdaptiveLruPage::evict_lru 0 1 26 814
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::evict_lru
//       Access: Published, Virtual
//  Description: Evicts the page from the LRU.  Called internally when
//               the LRU determines that it is full.  May also be
//               called externally when necessary to explicitly evict
//               the page.
//
//               It is legal for this method to either evict the page
//               as requested, do nothing (in which case the eviction
//               will be requested again at the next epoch), or
//               requeue itself on the tail of the queue (in which
//               case the eviction will be requested again much
//               later).
////////////////////////////////////////////////////////////////////
46
virtual void AdaptiveLruPage::evict_lru(void);

1529 6 output 0 4 2830 23 AdaptiveLruPage::output 0 1 27 232
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void AdaptiveLruPage::output(ostream &out) const;

1530 5 write 0 4 2830 22 AdaptiveLruPage::write 0 1 28 231
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
74
virtual void AdaptiveLruPage::write(ostream &out, int indent_level) const;

1531 14 get_num_frames 0 4 2830 31 AdaptiveLruPage::get_num_frames 0 1 29 409
// Not defined in SimpleLruPage.

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_num_frames
//       Access: Published
//  Description: Returns the number of frames since the page was first
//               added to its LRU.  Returns 0 if it does not have an
//               LRU.
////////////////////////////////////////////////////////////////////
57
unsigned int AdaptiveLruPage::get_num_frames(void) const;

1532 23 get_num_inactive_frames 0 4 2830 40 AdaptiveLruPage::get_num_inactive_frames 0 1 30 420
// Not defined in SimpleLruPage.

////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_num_inactive_frames
//       Access: Published
//  Description: Returns the number of frames since the page was last
//               accessed on its LRU.  Returns 0 if it does not have
//               an LRU.
////////////////////////////////////////////////////////////////////
66
unsigned int AdaptiveLruPage::get_num_inactive_frames(void) const;

1533 10 ~GeomEnums 0 4 2833 21 GeomEnums::~GeomEnums 0 0 0
28
GeomEnums::~GeomEnums(void);

1534 23 GeomVertexAnimationSpec 0 4 2841 48 GeomVertexAnimationSpec::GeomVertexAnimationSpec 0 2 31 32 978
// Filename: geomVertexAnimationSpec.I
// Created by:  drose (29Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
157
inline GeomVertexAnimationSpec::GeomVertexAnimationSpec(void);
inline GeomVertexAnimationSpec::GeomVertexAnimationSpec(GeomVertexAnimationSpec const &other);

1535 10 operator = 0 4 2841 35 GeomVertexAnimationSpec::operator = 0 1 33 249
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
inline void GeomVertexAnimationSpec::operator =(GeomVertexAnimationSpec const &other);

1536 18 get_animation_type 0 4 2841 43 GeomVertexAnimationSpec::get_animation_type 0 1 34 315
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_animation_type
//       Access: Published
//  Description: Returns the type of animation represented by this
//               spec.
////////////////////////////////////////////////////////////////////
88
inline GeomEnums::AnimationType GeomVertexAnimationSpec::get_animation_type(void) const;

1537 18 get_num_transforms 0 4 2841 43 GeomVertexAnimationSpec::get_num_transforms 0 1 35 479
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_num_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  It specifies the maximum number of
//               transforms that might be simultaneously applied to
//               any one vertex by the data in this format.
////////////////////////////////////////////////////////////////////
67
inline int GeomVertexAnimationSpec::get_num_transforms(void) const;

1538 22 get_indexed_transforms 0 4 2841 47 GeomVertexAnimationSpec::get_indexed_transforms 0 1 36 529
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_indexed_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  If true, it indicates that the format
//               uses indexed animation tables.  It is false if each
//               vertex will reference the first _num_transforms
//               table entries only.
////////////////////////////////////////////////////////////////////
72
inline bool GeomVertexAnimationSpec::get_indexed_transforms(void) const;

1539 8 set_none 0 4 2841 33 GeomVertexAnimationSpec::set_none 0 1 37 313
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_none
//       Access: Published
//  Description: Specifies that no vertex animation is represented by
//               this spec.
////////////////////////////////////////////////////////////////////
52
inline void GeomVertexAnimationSpec::set_none(void);

1540 9 set_panda 0 4 2841 34 GeomVertexAnimationSpec::set_panda 0 1 38 419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_panda
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               Panda.  This is the most general setting and can
//               handle any kind of vertex animation represented.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexAnimationSpec::set_panda(void);

1541 12 set_hardware 0 4 2841 37 GeomVertexAnimationSpec::set_hardware 0 1 39 721
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_hardware
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               the graphics hardware (or at least by the graphics
//               backend API, which is actually still free to animate
//               the vertices on the CPU).
//
//               This is only legal if the graphics hardware can
//               support the specified limits on number of transforms
//               and/or indexed transforms.  Also, no current graphics
//               API's support morphing.
////////////////////////////////////////////////////////////////////
95
inline void GeomVertexAnimationSpec::set_hardware(int num_transforms, bool indexed_transforms);

1542 6 output 0 4 2841 31 GeomVertexAnimationSpec::output 0 1 40 231
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void GeomVertexAnimationSpec::output(ostream &out) const;

1543 24 ~GeomVertexAnimationSpec 0 4 2841 49 GeomVertexAnimationSpec::~GeomVertexAnimationSpec 0 0 0
56
GeomVertexAnimationSpec::~GeomVertexAnimationSpec(void);

1544 4 make 0 4 2842 18 InternalName::make 0 2 41 42 1610
// Filename: internalName.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: InternalName::make
//       Access: Published, Static
//  Description: The public interface for constructing an InternalName
//               pointer.  This will return a new InternalName
//               representing the indicated name, if this is the first
//               time the particular name has been requested; if the
//               name is already in use, it will return the existing
//               pointer.
//
//               If the string contains the '.' character, the string
//               will be divided at the dots and the so-defined
//               hierarchy of names will be registered.  This is
//               handled transparently.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: InternalName::make
//       Access: Published, Static
//  Description: Make using a string and an integer.  Concatenates
//               the two.
////////////////////////////////////////////////////////////////////
191
static inline PointerTo< InternalName > InternalName::make(basic_string< char > const &name);
static PointerTo< InternalName > InternalName::make(basic_string< char > const &name, int index);

1545 6 append 0 4 2842 20 InternalName::append 0 1 43 475
////////////////////////////////////////////////////////////////////
//     Function: InternalName::append
//       Access: Published
//  Description: Constructs a new InternalName based on this name,
//               with the indicated string following it.  This is a
//               cheaper way to construct a hierarchical name than
//               InternalName::make(parent->get_name() + ".basename").
////////////////////////////////////////////////////////////////////
85
PointerTo< InternalName > InternalName::append(basic_string< char > const &basename);

1546 10 get_parent 0 4 2842 24 InternalName::get_parent 0 1 44 328
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_parent
//       Access: Published
//  Description: Return the parent of this InternalName.  All names
//               have a parent, except the root name.
////////////////////////////////////////////////////////////////////
58
inline InternalName *InternalName::get_parent(void) const;

1547 8 get_name 0 4 2842 22 InternalName::get_name 0 1 45 320
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_name
//       Access: Published
//  Description: Returns the complete name represented by the
//               InternalName and all of its parents.
////////////////////////////////////////////////////////////////////
56
basic_string< char > InternalName::get_name(void) const;

1548 12 get_basename 0 4 2842 26 InternalName::get_basename 0 1 46 404
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_basename
//       Access: Published
//  Description: Return the name represented by just this particular
//               InternalName object, ignoring its parents names.
//               This is everything after the rightmost dot.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &InternalName::get_basename(void) const;

1549 13 find_ancestor 0 4 2842 27 InternalName::find_ancestor 0 1 47 584
////////////////////////////////////////////////////////////////////
//     Function: InternalName::find_ancestor
//       Access: Published
//  Description: Returns the index of the ancestor with the indicated
//               basename, or -1 if no ancestor has that basename.
//               Returns 0 if this name has the basename.
//
//               This index value may be passed to get_ancestor() or
//               get_net_basename() to retrieve more information about
//               the indicated name.
////////////////////////////////////////////////////////////////////
76
int InternalName::find_ancestor(basic_string< char > const &basename) const;

1550 12 get_ancestor 0 4 2842 26 InternalName::get_ancestor 0 1 48 481
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_ancestor
//       Access: Published
//  Description: Returns the ancestor with the indicated index number.
//               0 is this name itself, 1 is the name's parent, 2 is
//               the parent's parent, and so on.  If there are not
//               enough ancestors, returns the root InternalName.
////////////////////////////////////////////////////////////////////
60
InternalName const *InternalName::get_ancestor(int n) const;

1551 7 get_top 0 4 2842 21 InternalName::get_top 0 1 49 460
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_top
//       Access: Published
//  Description: Returns the oldest ancestor in the InternalName's
//               chain, not counting the root.  This will be the first
//               name in the string, e.g. "texcoord.foo.bar" will
//               return the InternalName "texcoord".
////////////////////////////////////////////////////////////////////
54
InternalName const *InternalName::get_top(void) const;

1552 16 get_net_basename 0 4 2842 30 InternalName::get_net_basename 0 1 50 456
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_net_basename
//       Access: Published
//  Description: Returns the basename of this name prefixed by the
//               indicated number of ancestors.  0 is this name's
//               basename, 1 is parent.basename, 2 is
//               grandparent.parent.basename, and so on.
////////////////////////////////////////////////////////////////////
65
basic_string< char > InternalName::get_net_basename(int n) const;

1553 6 output 0 4 2842 20 InternalName::output 0 1 51 220
////////////////////////////////////////////////////////////////////
//     Function: InternalName::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void InternalName::output(ostream &out) const;

1554 8 get_root 0 4 2842 22 InternalName::get_root 0 1 52 474
// Some predefined built-in names.

////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_root
//       Access: Published, Static
//  Description: Returns the standard root InternalName.  This is the
//               root of all other InternalNames.  It has no name
//               itself, and it is the only InternalName with no
//               parent.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_root(void);

1555 9 get_error 0 4 2842 23 InternalName::get_error 0 1 53 309
// Some predefined built-in names.

////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_error
//       Access: Published, Static
//  Description: Returns the standard InternalName "error".
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_error(void);

1556 10 get_vertex 0 4 2842 24 InternalName::get_vertex 0 1 54 400
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_vertex
//       Access: Published, Static
//  Description: Returns the standard InternalName "vertex".  This is
//               the column header for the 3-d or 4-d vertex position
//               information for each vertex.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_vertex(void);

1557 10 get_normal 0 4 2842 24 InternalName::get_normal 0 1 55 381
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_normal
//       Access: Published, Static
//  Description: Returns the standard InternalName "normal".  This is
//               the column header for the 3-d lighting normal for
//               each vertex.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_normal(void);

1558 11 get_tangent 0 4 2842 25 InternalName::get_tangent 0 1 56 593
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent
//       Access: Published, Static
//  Description: Returns the standard InternalName "tangent".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to the normal and in the
//               direction of the U texture coordinate change.  It is
//               used for deriving bump maps.
////////////////////////////////////////////////////////////////////
72
static inline PointerTo< InternalName > InternalName::get_tangent(void);

1559 16 get_tangent_name 0 4 2842 30 InternalName::get_tangent_name 0 1 57 457
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent_name
//       Access: Published, Static
//  Description: Returns the InternalName "tangent.name", where name
//               is the supplied string.  This is the column header
//               for the tangent associated with the named texture
//               coordinate set.
////////////////////////////////////////////////////////////////////
105
static inline PointerTo< InternalName > InternalName::get_tangent_name(basic_string< char > const &name);

1560 12 get_binormal 0 4 2842 26 InternalName::get_binormal 0 1 58 634
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal
//       Access: Published, Static
//  Description: Returns the standard InternalName "binormal".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to both the normal and the
//               tangent, and in the direction of the V texture
//               coordinate change.  It is used for deriving bump
//               maps.
////////////////////////////////////////////////////////////////////
73
static inline PointerTo< InternalName > InternalName::get_binormal(void);

1561 17 get_binormal_name 0 4 2842 31 InternalName::get_binormal_name 0 1 59 460
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal_name
//       Access: Published, Static
//  Description: Returns the InternalName "binormal.name", where name
//               is the supplied string.  This is the column header
//               for the binormal associated with the named texture
//               coordinate set.
////////////////////////////////////////////////////////////////////
106
static inline PointerTo< InternalName > InternalName::get_binormal_name(basic_string< char > const &name);

1562 12 get_texcoord 0 4 2842 26 InternalName::get_texcoord 0 1 60 517
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord
//       Access: Published, Static
//  Description: Returns the standard InternalName "texcoord".  This
//               is the column header for the default texture
//               coordinate set for each vertex.  It is also used for
//               identifying the default texture coordinate set in a
//               TextureStage.
////////////////////////////////////////////////////////////////////
73
static inline PointerTo< InternalName > InternalName::get_texcoord(void);

1563 17 get_texcoord_name 0 4 2842 31 InternalName::get_texcoord_name 0 1 61 548
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord_name
//       Access: Published, Static
//  Description: Returns the InternalName "texcoord.name", where name
//               is the supplied string.  This is the column header
//               for the named texture coordinate set for each vertex.
//               It is also used for identifying the named texture
//               coordinate set in a TextureStage.
////////////////////////////////////////////////////////////////////
106
static inline PointerTo< InternalName > InternalName::get_texcoord_name(basic_string< char > const &name);

1564 9 get_color 0 4 2842 23 InternalName::get_color 0 1 62 383
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_color
//       Access: Published, Static
//  Description: Returns the standard InternalName "color".  This is
//               the column header for the 4-component color value for
//               each vertex.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_color(void);

1565 10 get_rotate 0 4 2842 24 InternalName::get_rotate 0 1 63 500
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_rotate
//       Access: Published, Static
//  Description: Returns the standard InternalName "rotate".  This is
//               the column header for the floating-point rotate
//               value, which represents a number of degrees
//               counter-clockwise to rotate each point or point
//               sprite.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_rotate(void);

1566 8 get_size 0 4 2842 22 InternalName::get_size 0 1 64 505
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_size
//       Access: Published, Static
//  Description: Returns the standard InternalName "size".  This is
//               the column header for the floating-point size value,
//               which overrides the thickness parameter of the
//               RenderModeAttrib on a per-vertex (e.g. per-point)
//               basis.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_size(void);

1567 16 get_aspect_ratio 0 4 2842 30 InternalName::get_aspect_ratio 0 1 65 535
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_aspect_ratio
//       Access: Published, Static
//  Description: Returns the standard InternalName "aspect_ratio".
//               This is the column header for the floating-point
//               aspect ratio value, which is used to define
//               non-square points.  This number is the ratio x / y,
//               where y is the point size (above).
////////////////////////////////////////////////////////////////////
77
static inline PointerTo< InternalName > InternalName::get_aspect_ratio(void);

1568 19 get_transform_blend 0 4 2842 33 InternalName::get_transform_blend 0 1 66 553
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_blend
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_blend".
//               This is the column header for the integer
//               transform_blend index, which is used to define vertex
//               animation on the CPU by indexing to a particular
//               vertex weighting from the TransformBlendTable.
////////////////////////////////////////////////////////////////////
80
static inline PointerTo< InternalName > InternalName::get_transform_blend(void);

1569 20 get_transform_weight 0 4 2842 34 InternalName::get_transform_weight 0 1 67 823
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_weight
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_weight".
//               This is the column header for the n-component
//               transform_weight value, which is used in conjuntion
//               with "transform_index" to define vertex animation on
//               the graphics card.  The transform_weight value
//               specifies the weight of the nth transform.  By
//               convention, there are 1 fewer weight values than
//               transforms, since the weights are assumed to sum to 1
//               (and the last value is therefore implicit).
////////////////////////////////////////////////////////////////////
81
static inline PointerTo< InternalName > InternalName::get_transform_weight(void);

1570 19 get_transform_index 0 4 2842 33 InternalName::get_transform_index 0 1 68 795
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_index".
//               This is the column header for the n-component
//               transform_index value, which is used in conjuntion
//               with "transform_weight" to define vertex animation on
//               the graphics card.  The transform_index value
//               specifies the nth transform, by lookup in the
//               TransformTable.  The transform_index column may be
//               omitted, in which case the nth transform is the nth
//               entry in the table.
////////////////////////////////////////////////////////////////////
80
static inline PointerTo< InternalName > InternalName::get_transform_index(void);

1571 9 get_morph 0 4 2842 23 InternalName::get_morph 0 1 69 655
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_morph
//       Access: Published, Static
//  Description: Returns an InternalName derived from the given base
//               column name and the given slider name, which is the
//               column header for the offset vector that should be
//               applied to the base column name when the named morph
//               slider is engaged.
//
//               Each morph slider requires a set of n morph columns,
//               one for each base column it applies to.
////////////////////////////////////////////////////////////////////
122
static inline PointerTo< InternalName > InternalName::get_morph(InternalName *column, basic_string< char > const &slider);

1572 9 get_index 0 4 2842 23 InternalName::get_index 0 1 70 515
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "index".  This is
//               the column header for the integer vertex index.  It
//               is not used in the vertex data itself, but is used in
//               the GeomPrimitive structure to index into the vertex
//               data.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_index(void);

1573 9 get_world 0 4 2842 23 InternalName::get_world 0 1 71 342
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_world
//       Access: Published, Static
//  Description: Returns the standard InternalName "world".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_world(void);

1574 10 get_camera 0 4 2842 24 InternalName::get_camera 0 1 72 344
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_camera
//       Access: Published, Static
//  Description: Returns the standard InternalName "camera".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_camera(void);

1575 9 get_model 0 4 2842 23 InternalName::get_model 0 1 73 342
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_model
//       Access: Published, Static
//  Description: Returns the standard InternalName "model".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_model(void);

1576 8 get_view 0 4 2842 22 InternalName::get_view 0 1 74 340
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_view
//       Access: Published, Static
//  Description: Returns the standard InternalName "view".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_view(void);

1577 14 get_class_type 0 4 2842 28 InternalName::get_class_type 0 1 75 0
53
static TypeHandle InternalName::get_class_type(void);

1578 16 GeomVertexColumn 0 4 2844 34 GeomVertexColumn::GeomVertexColumn 0 3 76 77 78 1281
// Filename: geomVertexColumn.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Default Constructor
//       Access: Private
//  Description: Creates an invalid column.  Used on when constructing
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
261
inline GeomVertexColumn::GeomVertexColumn(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start, int column_alignment = (0));
inline GeomVertexColumn::GeomVertexColumn(GeomVertexColumn const &copy);

1579 10 operator = 0 4 2844 28 GeomVertexColumn::operator = 0 1 79 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
void GeomVertexColumn::operator =(GeomVertexColumn const &copy);

1580 17 ~GeomVertexColumn 0 4 2844 35 GeomVertexColumn::~GeomVertexColumn 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexColumn::~GeomVertexColumn(void);

1581 8 get_name 0 4 2844 26 GeomVertexColumn::get_name 0 1 80 541
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_name
//       Access: Published
//  Description: Returns the name of this particular data field,
//               e.g. "vertex" or "normal".  The name may be a
//               user-defined string, or it may be one of the standard
//               system-defined field types.  Only the system-defined
//               field types are used for the actual rendering.
////////////////////////////////////////////////////////////////////
60
inline InternalName *GeomVertexColumn::get_name(void) const;

1582 18 get_num_components 0 4 2844 36 GeomVertexColumn::get_num_components 0 1 81 464
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_components
//       Access: Published
//  Description: Returns the number of components of the column:
//               the number of instances of the NumericType in each
//               element.  This is usually, but not always, the same
//               thing as get_num_values().
////////////////////////////////////////////////////////////////////
60
inline int GeomVertexColumn::get_num_components(void) const;

1583 14 get_num_values 0 4 2844 32 GeomVertexColumn::get_num_values 0 1 82 648
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_values
//       Access: Published
//  Description: Returns the number of numeric values of the column:
//               the number of distinct numeric values that go into
//               each element.  This is usually, but not always, the
//               same thing as get_num_components(); the difference is
//               in the case of a composite numeric type like
//               NT_packed_dcba, which has four numeric values per
//               component.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexColumn::get_num_values(void) const;

1584 16 get_numeric_type 0 4 2844 34 GeomVertexColumn::get_numeric_type 0 1 83 319
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_numeric_type
//       Access: Published
//  Description: Returns the token representing the numeric type of
//               the data storage.
////////////////////////////////////////////////////////////////////
77
inline GeomEnums::NumericType GeomVertexColumn::get_numeric_type(void) const;

1585 12 get_contents 0 4 2844 30 GeomVertexColumn::get_contents 0 1 84 319
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_contents
//       Access: Published
//  Description: Returns the token representing the semantic meaning of
//               the stored value.
////////////////////////////////////////////////////////////////////
70
inline GeomEnums::Contents GeomVertexColumn::get_contents(void) const;

1586 9 get_start 0 4 2844 27 GeomVertexColumn::get_start 0 1 85 392
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_start
//       Access: Published
//  Description: Returns the byte within the array record at which
//               this column starts.  This can be set to non-zero
//               to implement interleaved arrays.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexColumn::get_start(void) const;

1587 20 get_column_alignment 0 4 2844 38 GeomVertexColumn::get_column_alignment 0 1 86 601
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_column_alignment
//       Access: Published
//  Description: Returns the alignment requirements for this column.
//               If this is greater than 1, it restricts the column to
//               appear only on memory addresses that are integer
//               multiples of this value; this has implications for
//               this column's start value, as well as the stride of
//               the resulting array.
////////////////////////////////////////////////////////////////////
62
inline int GeomVertexColumn::get_column_alignment(void) const;

1588 19 get_component_bytes 0 4 2844 37 GeomVertexColumn::get_component_bytes 0 1 87 351
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_component_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each component
//               (that is, by one element of the numeric type).
////////////////////////////////////////////////////////////////////
61
inline int GeomVertexColumn::get_component_bytes(void) const;

1589 15 get_total_bytes 0 4 2844 33 GeomVertexColumn::get_total_bytes 0 1 88 347
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_total_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each element of
//               the column: component_bytes * num_components.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexColumn::get_total_bytes(void) const;

1590 21 has_homogeneous_coord 0 4 2844 39 GeomVertexColumn::has_homogeneous_coord 0 1 89 727
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::has_homogeneous_coord
//       Access: Published
//  Description: Returns true if this Contents type is one that
//               includes a homogeneous coordinate in the fourth
//               component, or false otherwise.  If this is true,
//               correct operation on the vertex data may require
//               scaling by the homogeneous coordinate from time to
//               time (but in general this is handled automatically if
//               you use the 3-component or smaller forms of
//               get_data() and set_data()).
////////////////////////////////////////////////////////////////////
64
inline bool GeomVertexColumn::has_homogeneous_coord(void) const;

1591 13 overlaps_with 0 4 2844 31 GeomVertexColumn::overlaps_with 0 1 90 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::overlaps_with
//       Access: Published
//  Description: Returns true if this column overlaps with any of
//               the bytes in the indicated range, false if it does
//               not.
////////////////////////////////////////////////////////////////////
81
inline bool GeomVertexColumn::overlaps_with(int start_byte, int num_bytes) const;

1592 22 is_bytewise_equivalent 0 4 2844 40 GeomVertexColumn::is_bytewise_equivalent 0 1 91 419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::is_bytewise_equivalent
//       Access: Published
//  Description: Returns true if the data store of this column is
//               exactly the same as that of the other, irrespective
//               of name or start position within the record.
////////////////////////////////////////////////////////////////////
90
inline bool GeomVertexColumn::is_bytewise_equivalent(GeomVertexColumn const &other) const;

1593 6 output 0 4 2844 24 GeomVertexColumn::output 0 1 92 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexColumn::output(ostream &out) const;

1594 37 upcast_to_TypedWritableReferenceCount 0 12 2845 60 GeomVertexArrayFormat::upcast_to_TypedWritableReferenceCount 0 1 128 64
upcast from GeomVertexArrayFormat to TypedWritableReferenceCount
96
TypedWritableReferenceCount *GeomVertexArrayFormat::upcast_to_TypedWritableReferenceCount(void);

1595 33 downcast_to_GeomVertexArrayFormat 0 12 2843 62 TypedWritableReferenceCount::downcast_to_GeomVertexArrayFormat 0 1 129 66
downcast from TypedWritableReferenceCount to GeomVertexArrayFormat
92
GeomVertexArrayFormat *TypedWritableReferenceCount::downcast_to_GeomVertexArrayFormat(void);

1596 19 upcast_to_GeomEnums 0 12 2845 42 GeomVertexArrayFormat::upcast_to_GeomEnums 0 1 130 46
upcast from GeomVertexArrayFormat to GeomEnums
60
GeomEnums *GeomVertexArrayFormat::upcast_to_GeomEnums(void);

1597 33 downcast_to_GeomVertexArrayFormat 0 12 2833 44 GeomEnums::downcast_to_GeomVertexArrayFormat 0 1 131 48
downcast from GeomEnums to GeomVertexArrayFormat
74
GeomVertexArrayFormat *GeomEnums::downcast_to_GeomVertexArrayFormat(void);

1598 21 GeomVertexArrayFormat 0 4 2845 44 GeomVertexArrayFormat::GeomVertexArrayFormat 0 6 93 94 95 96 97 98 1419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
1426
GeomVertexArrayFormat::GeomVertexArrayFormat(void);
GeomVertexArrayFormat::GeomVertexArrayFormat(GeomVertexArrayFormat const &copy);
GeomVertexArrayFormat::GeomVertexArrayFormat(InternalName *name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0);
GeomVertexArrayFormat::GeomVertexArrayFormat(InternalName *name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, InternalName *name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1);
GeomVertexArrayFormat::GeomVertexArrayFormat(InternalName *name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, InternalName *name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1, InternalName *name2, int num_components2, GeomEnums::NumericType numeric_type2, GeomEnums::Contents contents2);
GeomVertexArrayFormat::GeomVertexArrayFormat(InternalName *name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, InternalName *name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1, InternalName *name2, int num_components2, GeomEnums::NumericType numeric_type2, GeomEnums::Contents contents2, InternalName *name3, int num_components3, GeomEnums::NumericType numeric_type3, GeomEnums::Contents contents3);

1599 10 operator = 0 4 2845 33 GeomVertexArrayFormat::operator = 0 1 99 247
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
void GeomVertexArrayFormat::operator =(GeomVertexArrayFormat const &copy);

1600 22 ~GeomVertexArrayFormat 0 4 2845 45 GeomVertexArrayFormat::~GeomVertexArrayFormat 0 0 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
60
virtual GeomVertexArrayFormat::~GeomVertexArrayFormat(void);

1601 5 unref 0 4 2845 28 GeomVertexArrayFormat::unref 0 1 100 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::unref
//       Access: Published, Virtual
//  Description: This method overrides ReferenceCount::unref() to
//               unregister the object when its reference count goes
//               to zero.
////////////////////////////////////////////////////////////////////
54
virtual bool GeomVertexArrayFormat::unref(void) const;

1602 13 is_registered 0 4 2845 36 GeomVertexArrayFormat::is_registered 0 1 101 965
// Filename: geomVertexArrayFormat.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
////////////////////////////////////////////////////////////////////
61
inline bool GeomVertexArrayFormat::is_registered(void) const;

1603 15 register_format 0 4 2845 38 GeomVertexArrayFormat::register_format 0 1 102 774
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This is similar to
//               GeomVertexFormat::register_format(), except that you
//               generally need not call it explicitly.  Calling
//               GeomVertexFormat::register_format() automatically
//               registers all of the nested array formats.
////////////////////////////////////////////////////////////////////
130
static inline ConstPointerTo< GeomVertexArrayFormat > GeomVertexArrayFormat::register_format(GeomVertexArrayFormat const *format);

1604 10 get_stride 0 4 2845 33 GeomVertexArrayFormat::get_stride 0 1 103 322
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_stride
//       Access: Published
//  Description: Returns the total number of bytes reserved in the
//               array for each vertex.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayFormat::get_stride(void) const;

1605 10 set_stride 0 4 2845 33 GeomVertexArrayFormat::set_stride 0 1 104 443
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::set_stride
//       Access: Published
//  Description: Changes the total number of bytes reserved in the
//               array for each vertex.  You may not reduce this below
//               get_total_bytes(), but you may increase it
//               arbitrarily.
////////////////////////////////////////////////////////////////////
58
inline void GeomVertexArrayFormat::set_stride(int stride);

1606 10 get_pad_to 0 4 2845 33 GeomVertexArrayFormat::get_pad_to 0 1 105 659
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_pad_to
//       Access: Published
//  Description: Returns the byte divisor to which the data record
//               must be padded to meet hardware limitations.  For
//               instance, if this is 4, the stride will be
//               automatically rounded up to the next multiple of 4
//               bytes.  This value is automatically increased as
//               needed to ensure the individual numeric components in
//               the array are word-aligned.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayFormat::get_pad_to(void) const;

1607 10 set_pad_to 0 4 2845 33 GeomVertexArrayFormat::set_pad_to 0 1 106 666
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::set_pad_to
//       Access: Published
//  Description: Explicitly sets the byte divisor to which the data
//               record must be padded to meet hardware limitations.
//               See get_pad_to().  Normally it is not necessary to
//               call this unless you have some specific requirements
//               for row-to-row data alignment.  Note that this value
//               may be automatically increased at each subsequent
//               call to add_column().
////////////////////////////////////////////////////////////////////
58
inline void GeomVertexArrayFormat::set_pad_to(int pad_to);

1608 15 get_total_bytes 0 4 2845 38 GeomVertexArrayFormat::get_total_bytes 0 1 107 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_total_bytes
//       Access: Published
//  Description: Returns the total number of bytes used by the data
//               types within the format, including gaps between
//               elements.
////////////////////////////////////////////////////////////////////
62
inline int GeomVertexArrayFormat::get_total_bytes(void) const;

1609 10 add_column 0 4 2845 33 GeomVertexArrayFormat::add_column 0 4 108 109 110 111 1461
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               The return value is the index number of the new data
//               type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               Adding a column with the same name as a previous
//               type, or that overlaps with one or more previous
//               types, quietly removes the previous type(s).
//
//               The return value is the index number of the new data
//               type.
////////////////////////////////////////////////////////////////////
262
int GeomVertexArrayFormat::add_column(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start = (-1), int column_alignment = (0));
int GeomVertexArrayFormat::add_column(GeomVertexColumn const &column);

1610 13 remove_column 0 4 2845 36 GeomVertexArrayFormat::remove_column 0 1 112 346
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::remove_column
//       Access: Published
//  Description: Removes the column with the indicated name, if
//               any.  This leaves a gap in the byte structure.
////////////////////////////////////////////////////////////////////
68
void GeomVertexArrayFormat::remove_column(InternalName const *name);

1611 13 clear_columns 0 4 2845 36 GeomVertexArrayFormat::clear_columns 0 1 113 343
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::clear_columns
//       Access: Published
//  Description: Removes all columns previously added, sets the
//               stride to zero, and prepares to start over.
////////////////////////////////////////////////////////////////////
48
void GeomVertexArrayFormat::clear_columns(void);

1612 12 pack_columns 0 4 2845 35 GeomVertexArrayFormat::pack_columns 0 1 114 272
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::pack_columns
//       Access: Published
//  Description: Removes wasted space between columns.
////////////////////////////////////////////////////////////////////
47
void GeomVertexArrayFormat::pack_columns(void);

1613 27 align_columns_for_animation 0 4 2845 50 GeomVertexArrayFormat::align_columns_for_animation 0 1 115 648
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::align_columns_for_animation
//       Access: Published
//  Description: Reprocesses the columns in the format to align the
//               C_point and C_vector columns to 16-byte boundaries to
//               allow for the more efficient SSE2 operations
//               (assuming SSE2 is enabled in the build).
//
//               The caller is responsible for testing
//               vertex_animation_align_16 to decide whether to call
//               this method.
////////////////////////////////////////////////////////////////////
62
void GeomVertexArrayFormat::align_columns_for_animation(void);

1614 15 get_num_columns 0 4 2845 38 GeomVertexArrayFormat::get_num_columns 0 1 116 308
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_num_columns
//       Access: Published
//  Description: Returns the number of different columns in the
//               array.
////////////////////////////////////////////////////////////////////
62
inline int GeomVertexArrayFormat::get_num_columns(void) const;

1615 10 get_column 0 4 2845 33 GeomVertexArrayFormat::get_column 0 3 117 118 119 984
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the array.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the first specification that overlaps with
//               any of the indicated bytes in the range, or NULL if
//               none do.
////////////////////////////////////////////////////////////////////
265
inline GeomVertexColumn const *GeomVertexArrayFormat::get_column(int i) const;
GeomVertexColumn const *GeomVertexArrayFormat::get_column(InternalName const *name) const;
GeomVertexColumn const *GeomVertexArrayFormat::get_column(int start_byte, int num_bytes) const;

1616 10 has_column 0 4 2845 33 GeomVertexArrayFormat::has_column 0 1 120 314
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.
////////////////////////////////////////////////////////////////////
78
inline bool GeomVertexArrayFormat::has_column(InternalName const *name) const;

1617 17 is_data_subset_of 0 4 2845 40 GeomVertexArrayFormat::is_data_subset_of 0 1 121 614
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_data_subset_of
//       Access: Published
//  Description: Returns true if all of the fields in this array
//               format are also present and equivalent in the other
//               array format, and in the same byte positions, and the
//               stride is the same.  That is, true if this format can
//               share the same data pointer as the other format (with
//               possibly some unused gaps).
////////////////////////////////////////////////////////////////////
88
bool GeomVertexArrayFormat::is_data_subset_of(GeomVertexArrayFormat const &other) const;

1618 18 count_unused_space 0 4 2845 41 GeomVertexArrayFormat::count_unused_space 0 1 122 330
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::count_unused_space
//       Access: Published
//  Description: Returns the number of bytes per row that are not
//               assigned to any column.
////////////////////////////////////////////////////////////////////
58
int GeomVertexArrayFormat::count_unused_space(void) const;

1619 6 output 0 4 2845 29 GeomVertexArrayFormat::output 0 1 123 229
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void GeomVertexArrayFormat::output(ostream &out) const;

1620 5 write 0 4 2845 28 GeomVertexArrayFormat::write 0 2 124 125 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void GeomVertexArrayFormat::write(ostream &out, int indent_level = (0)) const;

1621 15 write_with_data 0 4 2845 38 GeomVertexArrayFormat::write_with_data 0 1 126 238
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write_with_data
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
121
void GeomVertexArrayFormat::write_with_data(ostream &out, int indent_level, GeomVertexArrayData const *array_data) const;

1622 14 get_class_type 0 4 2845 37 GeomVertexArrayFormat::get_class_type 0 1 127 0
62
static TypeHandle GeomVertexArrayFormat::get_class_type(void);

1623 37 upcast_to_TypedWritableReferenceCount 0 12 2846 55 GeomVertexFormat::upcast_to_TypedWritableReferenceCount 0 1 189 59
upcast from GeomVertexFormat to TypedWritableReferenceCount
91
TypedWritableReferenceCount *GeomVertexFormat::upcast_to_TypedWritableReferenceCount(void);

1624 28 downcast_to_GeomVertexFormat 0 12 2843 57 TypedWritableReferenceCount::downcast_to_GeomVertexFormat 0 1 190 61
downcast from TypedWritableReferenceCount to GeomVertexFormat
82
GeomVertexFormat *TypedWritableReferenceCount::downcast_to_GeomVertexFormat(void);

1625 19 upcast_to_GeomEnums 0 12 2846 37 GeomVertexFormat::upcast_to_GeomEnums 0 1 191 41
upcast from GeomVertexFormat to GeomEnums
55
GeomEnums *GeomVertexFormat::upcast_to_GeomEnums(void);

1626 28 downcast_to_GeomVertexFormat 0 12 2833 39 GeomEnums::downcast_to_GeomVertexFormat 0 1 192 43
downcast from GeomEnums to GeomVertexFormat
64
GeomVertexFormat *GeomEnums::downcast_to_GeomVertexFormat(void);

1627 16 GeomVertexFormat 0 4 2846 34 GeomVertexFormat::GeomVertexFormat 0 3 132 133 134 696
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
186
GeomVertexFormat::GeomVertexFormat(void);
GeomVertexFormat::GeomVertexFormat(GeomVertexArrayFormat const *array_format);
GeomVertexFormat::GeomVertexFormat(GeomVertexFormat const &copy);

1628 10 operator = 0 4 2846 28 GeomVertexFormat::operator = 0 1 135 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
void GeomVertexFormat::operator =(GeomVertexFormat const &copy);

1629 17 ~GeomVertexFormat 0 4 2846 35 GeomVertexFormat::~GeomVertexFormat 0 0 237
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
50
virtual GeomVertexFormat::~GeomVertexFormat(void);

1630 5 unref 0 4 2846 23 GeomVertexFormat::unref 0 1 136 375
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::unref
//       Access: Published, Virtual
//  Description: This method overrides ReferenceCount::unref() to
//               unregister the object when its reference count goes
//               to zero.
////////////////////////////////////////////////////////////////////
49
virtual bool GeomVertexFormat::unref(void) const;

1631 13 is_registered 0 4 2846 31 GeomVertexFormat::is_registered 0 1 137 463
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
////////////////////////////////////////////////////////////////////
56
inline bool GeomVertexFormat::is_registered(void) const;

1632 15 register_format 0 4 2846 33 GeomVertexFormat::register_format 0 2 138 139 1213
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This must be called before a format may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: This flavor of register_format() implicitly creates a
//               one-array vertex format from the array definition.
////////////////////////////////////////////////////////////////////
236
static inline ConstPointerTo< GeomVertexFormat > GeomVertexFormat::register_format(GeomVertexFormat const *format);
static inline ConstPointerTo< GeomVertexFormat > GeomVertexFormat::register_format(GeomVertexArrayFormat const *format);

1633 13 get_animation 0 4 2846 31 GeomVertexFormat::get_animation 0 1 140 351
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_animation
//       Access: Published
//  Description: Returns the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
////////////////////////////////////////////////////////////////////
82
inline GeomVertexAnimationSpec const &GeomVertexFormat::get_animation(void) const;

1634 13 set_animation 0 4 2846 31 GeomVertexFormat::set_animation 0 1 141 555
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_animation
//       Access: Published
//  Description: Resets the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
//               You should also, of course, change the columns in the
//               tables accordingly.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
86
inline void GeomVertexFormat::set_animation(GeomVertexAnimationSpec const &animation);

1635 24 get_post_animated_format 0 4 2846 42 GeomVertexFormat::get_post_animated_format 0 1 142 646
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_post_animated_format
//       Access: Published
//  Description: Returns a suitable vertex format for sending the
//               animated vertices to the graphics backend.  This is
//               the same format as the source format, with the
//               CPU-animation data elements removed.
//
//               This may only be called after the format has been
//               registered.  The return value will have been already
//               registered.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< GeomVertexFormat > GeomVertexFormat::get_post_animated_format(void) const;

1636 16 get_union_format 0 4 2846 34 GeomVertexFormat::get_union_format 0 1 143 791
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_union_format
//       Access: Published
//  Description: Returns a new GeomVertexFormat that includes all of
//               the columns defined in either this GeomVertexFormat
//               or the other one.  If any column is defined in both
//               formats with different sizes (for instance, texcoord2
//               vs. texcoord3), the new format will include the
//               larger of the two definitions.
//
//               This may only be called after both source formats
//               have been registered.  The return value will also
//               have been already registered.
////////////////////////////////////////////////////////////////////
107
ConstPointerTo< GeomVertexFormat > GeomVertexFormat::get_union_format(GeomVertexFormat const *other) const;

1637 14 get_num_arrays 0 4 2846 32 GeomVertexFormat::get_num_arrays 0 1 144 506
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays required by
//               the format.  If the array data is completely
//               interleaved, this will be 1; if it is completely
//               parallel, this will be the same as the number of data
//               types.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_arrays(void) const;

1638 9 get_array 0 4 2846 27 GeomVertexFormat::get_array 0 1 145 304
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array
//       Access: Published
//  Description: Returns the description of the nth array used by the
//               format.
////////////////////////////////////////////////////////////////////
81
inline GeomVertexArrayFormat const *GeomVertexFormat::get_array(int array) const;

1639 12 modify_array 0 4 2846 30 GeomVertexFormat::modify_array 0 1 146 470
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated array.
//               This means duplicating it if it is shared or
//               registered.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
65
GeomVertexArrayFormat *GeomVertexFormat::modify_array(int array);

1640 9 set_array 0 4 2846 27 GeomVertexFormat::set_array 0 1 147 371
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_array
//       Access: Published
//  Description: Replaces the definition of the indicated array.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
81
void GeomVertexFormat::set_array(int array, GeomVertexArrayFormat const *format);

1641 12 remove_array 0 4 2846 30 GeomVertexFormat::remove_array 0 1 148 365
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_array
//       Access: Published
//  Description: Removes the nth array from the format.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
47
void GeomVertexFormat::remove_array(int array);

1642 9 add_array 0 4 2846 27 GeomVertexFormat::add_array 0 1 149 534
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::add_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays included within this vertex format definition.
//               The return value is the index number of the new
//               array.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
75
int GeomVertexFormat::add_array(GeomVertexArrayFormat const *array_format);

1643 12 insert_array 0 4 2846 30 GeomVertexFormat::insert_array 0 1 150 570
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::insert_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays at the indicated position.  This works just
//               like add_array(), except that you can specify which
//               array index the new array should have.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
90
void GeomVertexFormat::insert_array(int array, GeomVertexArrayFormat const *array_format);

1644 12 clear_arrays 0 4 2846 30 GeomVertexFormat::clear_arrays 0 1 151 413
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::clear_arrays
//       Access: Published
//  Description: Removes all of the array definitions from the format
//               and starts over.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
42
void GeomVertexFormat::clear_arrays(void);

1645 15 get_num_columns 0 4 2846 33 GeomVertexFormat::get_num_columns 0 1 152 336
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_columns
//       Access: Published
//  Description: Returns the total number of different columns in
//               the specification, across all arrays.
////////////////////////////////////////////////////////////////////
50
int GeomVertexFormat::get_num_columns(void) const;

1646 14 get_array_with 0 4 2846 32 GeomVertexFormat::get_array_with 0 2 153 154 1372
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               ith column.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               indicated column, or -1 if no arrays contained
//               that name.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
120
int GeomVertexFormat::get_array_with(int i) const;
int GeomVertexFormat::get_array_with(InternalName const *name) const;

1647 10 get_column 0 4 2846 28 GeomVertexFormat::get_column 0 2 155 156 751
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the specification,
//               across all arrays.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.  Use get_array_with()
//               to determine which array this column is associated
//               with.
////////////////////////////////////////////////////////////////////
152
GeomVertexColumn const *GeomVertexFormat::get_column(int i) const;
GeomVertexColumn const *GeomVertexFormat::get_column(InternalName const *name) const;

1648 10 has_column 0 4 2846 28 GeomVertexFormat::has_column 0 1 157 310
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::has_column
//       Access: Published
//  Description: Returns true if the format has the named column,
//               false otherwise.
////////////////////////////////////////////////////////////////////
73
inline bool GeomVertexFormat::has_column(InternalName const *name) const;

1649 13 remove_column 0 4 2846 31 GeomVertexFormat::remove_column 0 1 158 663
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_column
//       Access: Published
//  Description: Removes the named column from the format, from
//               whichever array it exists in.  If there are other
//               columns remaining in the array, the array is left
//               with a gap where the column used to be; if this
//               was the only column in the array, the array is
//               removed.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
63
void GeomVertexFormat::remove_column(InternalName const *name);

1650 12 pack_columns 0 4 2846 30 GeomVertexFormat::pack_columns 0 1 159 267
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::pack_columns
//       Access: Published
//  Description: Removes wasted space between columns.
////////////////////////////////////////////////////////////////////
42
void GeomVertexFormat::pack_columns(void);

1651 27 align_columns_for_animation 0 4 2846 45 GeomVertexFormat::align_columns_for_animation 0 1 160 552
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::align_columns_for_animation
//       Access: Published
//  Description: Reprocesses the columns in the format to align the
//               C_point and C_vector columns to 16-byte boundaries to
//               allow for the more efficient SSE2 operations
//               (assuming SSE2 is enabled in the build).
//
//               Also see maybe_align_columns_for_animation().
////////////////////////////////////////////////////////////////////
57
void GeomVertexFormat::align_columns_for_animation(void);

1652 33 maybe_align_columns_for_animation 0 4 2846 51 GeomVertexFormat::maybe_align_columns_for_animation 0 1 161 439
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::maybe_align_columns_for_animation
//       Access: Published
//  Description: Calls align_columns_for_animation() if this format's
//               AnimationSpec indicates that it contains animated
//               vertices, and if vertex-animation-align-16 is true.
////////////////////////////////////////////////////////////////////
63
void GeomVertexFormat::maybe_align_columns_for_animation(void);

1653 14 get_num_points 0 4 2846 32 GeomVertexFormat::get_num_points 0 1 162 427
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_points
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent points in space.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_points(void) const;

1654 9 get_point 0 4 2846 27 GeomVertexFormat::get_point 0 1 163 497
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_point
//       Access: Published
//  Description: Returns the name of the nth point column.  This
//               represents a point in space, which should be
//               transformed by any spatial transform matrix.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
68
inline InternalName const *GeomVertexFormat::get_point(int n) const;

1655 15 get_num_vectors 0 4 2846 33 GeomVertexFormat::get_num_vectors 0 1 164 432
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_vectors
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent directional vectors.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexFormat::get_num_vectors(void) const;

1656 10 get_vector 0 4 2846 28 GeomVertexFormat::get_vector 0 1 165 532
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_vector
//       Access: Published
//  Description: Returns the name of the nth vector column.  This
//               represents a directional vector, which should be
//               transformed by any spatial transform matrix as a
//               vector.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
69
inline InternalName const *GeomVertexFormat::get_vector(int n) const;

1657 17 get_num_texcoords 0 4 2846 35 GeomVertexFormat::get_num_texcoords 0 1 166 434
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_texcoords
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent texture coordinates.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
59
inline int GeomVertexFormat::get_num_texcoords(void) const;

1658 12 get_texcoord 0 4 2846 30 GeomVertexFormat::get_texcoord 0 1 167 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_texcoord
//       Access: Published
//  Description: Returns the name of the nth texcoord column.  This
//               represents a texture coordinate.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
71
inline InternalName const *GeomVertexFormat::get_texcoord(int n) const;

1659 14 get_num_morphs 0 4 2846 32 GeomVertexFormat::get_num_morphs 0 1 168 424
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_morphs
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent morph deltas.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_morphs(void) const;

1660 16 get_morph_slider 0 4 2846 34 GeomVertexFormat::get_morph_slider 0 1 169 587
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_slider
//       Access: Published
//  Description: Returns the slider name associated with the nth morph
//               column.  This is the name of the slider that will
//               control the morph, and should be defined within the
//               SliderTable associated with the GeomVertexData.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
75
inline InternalName const *GeomVertexFormat::get_morph_slider(int n) const;

1661 14 get_morph_base 0 4 2846 32 GeomVertexFormat::get_morph_base 0 1 170 562
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_base
//       Access: Published
//  Description: Returns the name of the base column that the nth
//               morph modifies.  This column will also be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
73
inline InternalName const *GeomVertexFormat::get_morph_base(int n) const;

1662 15 get_morph_delta 0 4 2846 33 GeomVertexFormat::get_morph_delta 0 1 171 685
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_delta
//       Access: Published
//  Description: Returns the name of the column that defines the
//               nth morph.  This contains the delta offsets that are
//               to be applied to the column defined by
//               get_morph_base().  This column will be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
74
inline InternalName const *GeomVertexFormat::get_morph_delta(int n) const;

1663 6 output 0 4 2846 24 GeomVertexFormat::output 0 1 172 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexFormat::output(ostream &out) const;

1664 5 write 0 4 2846 23 GeomVertexFormat::write 0 2 173 174 223
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void GeomVertexFormat::write(ostream &out, int indent_level = (0)) const;

1665 15 write_with_data 0 4 2846 33 GeomVertexFormat::write_with_data 0 1 175 233
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write_with_data
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
105
void GeomVertexFormat::write_with_data(ostream &out, int indent_level, GeomVertexData const *data) const;

1666 6 get_v3 0 4 2846 24 GeomVertexFormat::get_v3 0 1 176 529
// Some standard vertex formats.  No particular requirement to use
// one of these, but the DirectX renderers can use these formats
// directly, whereas any other format will have to be converted
// first.

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3
//       Access: Published, Static
//  Description: Returns a standard vertex format with just a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
69
static inline GeomVertexFormat const *GeomVertexFormat::get_v3(void);

1667 8 get_v3n3 0 4 2846 26 GeomVertexFormat::get_v3n3 0 1 177 551
// Some standard vertex formats.  No particular requirement to use
// one of these, but the DirectX renderers can use these formats
// directly, whereas any other format will have to be converted
// first.

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 3-component
//               normal and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3(void);

1668 8 get_v3t2 0 4 2846 26 GeomVertexFormat::get_v3t2 0 1 178 378
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3t2(void);

1669 10 get_v3n3t2 0 4 2846 28 GeomVertexFormat::get_v3n3t2 0 1 179 403
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 3-component normal, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3t2(void);

1670 8 get_v3cp 0 4 2846 26 GeomVertexFormat::get_v3cp 0 1 180 562
// These formats, with the DirectX-style packed color, are not
// supported directly by OpenGL.  If you use them, the
// GLGraphicsStateGuardian will automatically convert to OpenGL
// form (with a small runtime overhead).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3cp(void);

1671 10 get_v3cpt2 0 4 2846 28 GeomVertexFormat::get_v3cpt2 0 1 181 621
// These formats, with the DirectX-style packed color, are not
// supported directly by OpenGL.  If you use them, the
// GLGraphicsStateGuardian will automatically convert to OpenGL
// form (with a small runtime overhead).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3cpt2(void);

1672 10 get_v3n3cp 0 4 2846 28 GeomVertexFormat::get_v3n3cp 0 1 182 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color, a 3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3cp(void);

1673 12 get_v3n3cpt2 0 4 2846 30 GeomVertexFormat::get_v3n3cpt2 0 1 183 438
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, a
//               3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
75
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3cpt2(void);

1674 8 get_v3c4 0 4 2846 26 GeomVertexFormat::get_v3c4 0 1 184 663
// These formats, with an OpenGL-style four-byte color, are not
// supported directly by DirectX.  If you use them, the
// DXGraphicsStateGuardian will automatically convert to DirectX
// form (with a larger runtime overhead, since DirectX8, and old
// DirectX9 drivers, require everything to be interleaved together).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3c4(void);

1675 10 get_v3c4t2 0 4 2846 28 GeomVertexFormat::get_v3c4t2 0 1 185 722
// These formats, with an OpenGL-style four-byte color, are not
// supported directly by DirectX.  If you use them, the
// DXGraphicsStateGuardian will automatically convert to DirectX
// form (with a larger runtime overhead, since DirectX8, and old
// DirectX9 drivers, require everything to be interleaved together).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3c4t2(void);

1676 10 get_v3n3c4 0 4 2846 28 GeomVertexFormat::get_v3n3c4 0 1 186 385
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color, a 3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3c4(void);

1677 12 get_v3n3c4t2 0 4 2846 30 GeomVertexFormat::get_v3n3c4t2 0 1 187 443
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, a
//               3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
75
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3c4t2(void);

1678 14 get_class_type 0 4 2846 32 GeomVertexFormat::get_class_type 0 1 188 0
57
static TypeHandle GeomVertexFormat::get_class_type(void);

1679 24 upcast_to_LinkedListNode 0 12 2847 35 SimpleLru::upcast_to_LinkedListNode 0 1 204 39
upcast from SimpleLru to LinkedListNode
58
LinkedListNode *SimpleLru::upcast_to_LinkedListNode(void);

1680 21 downcast_to_SimpleLru 0 12 2848 37 LinkedListNode::downcast_to_SimpleLru 0 1 205 41
downcast from LinkedListNode to SimpleLru
55
SimpleLru *LinkedListNode::downcast_to_SimpleLru(void);

1681 17 upcast_to_Namable 0 12 2847 28 SimpleLru::upcast_to_Namable 0 1 206 32
upcast from SimpleLru to Namable
44
Namable *SimpleLru::upcast_to_Namable(void);

1682 21 downcast_to_SimpleLru 0 12 2829 30 Namable::downcast_to_SimpleLru 0 1 207 34
downcast from Namable to SimpleLru
48
SimpleLru *Namable::downcast_to_SimpleLru(void);

1683 9 SimpleLru 0 4 2847 20 SimpleLru::SimpleLru 0 1 193 222
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
SimpleLru::SimpleLru(basic_string< char > const &name, unsigned int max_size);

1684 10 ~SimpleLru 0 4 2847 21 SimpleLru::~SimpleLru 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
28
SimpleLru::~SimpleLru(void);

1685 14 get_total_size 0 4 2847 25 SimpleLru::get_total_size 0 1 194 793
// Filename: simpleLru.I
// Created by:  drose (11May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::get_total_size
//       Access: Published
//  Description: Returns the total size of all objects currently
//               active on the LRU.
////////////////////////////////////////////////////////////////////
58
inline unsigned int SimpleLru::get_total_size(void) const;

1686 12 get_max_size 0 4 2847 23 SimpleLru::get_max_size 0 1 195 317
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::get_max_size
//       Access: Published
//  Description: Returns the max size of all objects that are allowed
//               to be active on the LRU.
////////////////////////////////////////////////////////////////////
56
inline unsigned int SimpleLru::get_max_size(void) const;

1687 12 set_max_size 0 4 2847 23 SimpleLru::set_max_size 0 1 196 383
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::set_max_size
//       Access: Published
//  Description: Changes the max size of all objects that are allowed
//               to be active on the LRU.
//
//               If the size is (size_t)-1, there is no limit.
////////////////////////////////////////////////////////////////////
59
inline void SimpleLru::set_max_size(unsigned int max_size);

1688 17 count_active_size 0 4 2847 28 SimpleLru::count_active_size 0 1 197 337
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::count_active_size
//       Access: Published
//  Description: Returns the total size of the pages that were
//               enqueued since the last call to begin_epoch().
////////////////////////////////////////////////////////////////////
54
unsigned int SimpleLru::count_active_size(void) const;

1689 14 consider_evict 0 4 2847 25 SimpleLru::consider_evict 0 1 198 275
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::consider_evict
//       Access: Published
//  Description: Evicts a sequence of objects if the queue is full.
////////////////////////////////////////////////////////////////////
44
inline void SimpleLru::consider_evict(void);

1690 8 evict_to 0 4 2847 19 SimpleLru::evict_to 0 1 199 371
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::evict_to
//       Access: Published
//  Description: Evicts a sequence of objects until the queue fits
//               within the indicated target size, regardless of its
//               normal max size.
////////////////////////////////////////////////////////////////////
58
inline void SimpleLru::evict_to(unsigned int target_size);

1691 11 begin_epoch 0 4 2847 22 SimpleLru::begin_epoch 0 1 200 441
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::begin_epoch
//       Access: Published
//  Description: Marks the end of the previous epoch and the beginning
//               of the next one.  This will evict any objects that
//               are pending eviction, and also update any internal
//               bookkeeping.
////////////////////////////////////////////////////////////////////
41
inline void SimpleLru::begin_epoch(void);

1692 8 validate 0 4 2847 19 SimpleLru::validate 0 1 201 363
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::validate
//       Access: Published
//  Description: Checks that the LRU is internally self-consistent.
//               Returns true if successful, false if there is some
//               problem.
////////////////////////////////////////////////////////////////////
38
inline bool SimpleLru::validate(void);

1693 6 output 0 4 2847 17 SimpleLru::output 0 1 202 217
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void SimpleLru::output(ostream &out) const;

1694 5 write 0 4 2847 16 SimpleLru::write 0 1 203 225
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
60
void SimpleLru::write(ostream &out, int indent_level) const;

1695 24 upcast_to_LinkedListNode 0 12 2849 39 SimpleLruPage::upcast_to_LinkedListNode 0 1 221 43
upcast from SimpleLruPage to LinkedListNode
62
LinkedListNode *SimpleLruPage::upcast_to_LinkedListNode(void);

1696 25 downcast_to_SimpleLruPage 0 12 2848 41 LinkedListNode::downcast_to_SimpleLruPage 0 1 222 45
downcast from LinkedListNode to SimpleLruPage
63
SimpleLruPage *LinkedListNode::downcast_to_SimpleLruPage(void);

1697 13 SimpleLruPage 0 4 2849 28 SimpleLruPage::SimpleLruPage 0 2 208 209 459
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
123
inline SimpleLruPage::SimpleLruPage(unsigned int lru_size);
inline SimpleLruPage::SimpleLruPage(SimpleLruPage const &copy);

1698 10 operator = 0 4 2849 25 SimpleLruPage::operator = 0 1 210 239
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Copy Assignment Operator
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void SimpleLruPage::operator =(SimpleLruPage const &copy);

1699 14 ~SimpleLruPage 0 4 2849 29 SimpleLruPage::~SimpleLruPage 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual SimpleLruPage::~SimpleLruPage(void);

1700 7 get_lru 0 4 2849 22 SimpleLruPage::get_lru 0 1 211 329
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::get_lru
//       Access: Published
//  Description: Returns the LRU that manages this page, or NULL if it
//               is not currently managed by any LRU.
////////////////////////////////////////////////////////////////////
53
inline SimpleLru *SimpleLruPage::get_lru(void) const;

1701 11 enqueue_lru 0 4 2849 26 SimpleLruPage::enqueue_lru 0 1 212 443
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::enqueue_lru
//       Access: Published
//  Description: Adds the page to the LRU for the first time, or marks
//               it recently-accessed if it has already been added.
//
//               If lru is NULL, it means to remove this page from its
//               LRU.
////////////////////////////////////////////////////////////////////
48
void SimpleLruPage::enqueue_lru(SimpleLru *lru);

1702 11 dequeue_lru 0 4 2849 26 SimpleLruPage::dequeue_lru 0 1 213 262
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::dequeue_lru
//       Access: Published
//  Description: Removes the page from its SimpleLru.
////////////////////////////////////////////////////////////////////
45
inline void SimpleLruPage::dequeue_lru(void);

1703 13 mark_used_lru 0 4 2849 28 SimpleLruPage::mark_used_lru 0 2 214 215 827
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the SimpleLru queue it is already on.
//
//               This method is const because it's not technically
//               modifying the contents of the page itself.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the specified SimpleLru queue.
////////////////////////////////////////////////////////////////////
111
inline void SimpleLruPage::mark_used_lru(void) const;
inline void SimpleLruPage::mark_used_lru(SimpleLru *lru);

1704 12 get_lru_size 0 4 2849 27 SimpleLruPage::get_lru_size 0 1 216 318
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::get_lru_size
//       Access: Published
//  Description: Returns the size of this page as reported to the LRU,
//               presumably in bytes.
////////////////////////////////////////////////////////////////////
60
inline unsigned int SimpleLruPage::get_lru_size(void) const;

1705 12 set_lru_size 0 4 2849 27 SimpleLruPage::set_lru_size 0 1 217 328
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::set_lru_size
//       Access: Published
//  Description: Specifies the size of this page, presumably in bytes,
//               although any unit is possible.
////////////////////////////////////////////////////////////////////
63
inline void SimpleLruPage::set_lru_size(unsigned int lru_size);

1706 9 evict_lru 0 4 2849 24 SimpleLruPage::evict_lru 0 1 218 812
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::evict_lru
//       Access: Published, Virtual
//  Description: Evicts the page from the LRU.  Called internally when
//               the LRU determines that it is full.  May also be
//               called externally when necessary to explicitly evict
//               the page.
//
//               It is legal for this method to either evict the page
//               as requested, do nothing (in which case the eviction
//               will be requested again at the next epoch), or
//               requeue itself on the tail of the queue (in which
//               case the eviction will be requested again much
//               later).
////////////////////////////////////////////////////////////////////
44
virtual void SimpleLruPage::evict_lru(void);

1707 6 output 0 4 2849 21 SimpleLruPage::output 0 1 219 230
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void SimpleLruPage::output(ostream &out) const;

1708 5 write 0 4 2849 20 SimpleLruPage::write 0 1 220 229
////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
72
virtual void SimpleLruPage::write(ostream &out, int indent_level) const;

1709 24 upcast_to_LinkedListNode 0 12 2850 41 SimpleAllocator::upcast_to_LinkedListNode 0 1 233 45
upcast from SimpleAllocator to LinkedListNode
64
LinkedListNode *SimpleAllocator::upcast_to_LinkedListNode(void);

1710 27 downcast_to_SimpleAllocator 0 12 2848 43 LinkedListNode::downcast_to_SimpleAllocator 0 1 234 47
downcast from LinkedListNode to SimpleAllocator
67
SimpleAllocator *LinkedListNode::downcast_to_SimpleAllocator(void);

1711 15 SimpleAllocator 0 4 2850 32 SimpleAllocator::SimpleAllocator 0 1 223 719
// Filename: simpleAllocator.I
// Created by:  drose (12May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
inline SimpleAllocator::SimpleAllocator(unsigned int max_size, Mutex &lock);

1712 16 ~SimpleAllocator 0 4 2850 33 SimpleAllocator::~SimpleAllocator 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
virtual SimpleAllocator::~SimpleAllocator(void);

1713 5 alloc 0 4 2850 22 SimpleAllocator::alloc 0 1 224 451
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::alloc
//       Access: Published
//  Description: Allocates a new block.  Returns NULL if a block of the
//               requested size cannot be allocated.
//
//               To free the allocated block, call block->free(), or
//               simply delete the block pointer.
////////////////////////////////////////////////////////////////////
71
inline SimpleAllocatorBlock *SimpleAllocator::alloc(unsigned int size);

1714 8 is_empty 0 4 2850 25 SimpleAllocator::is_empty 0 1 225 336
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::is_empty
//       Access: Published
//  Description: Returns true if there are no blocks allocated on this
//               page, or false if there is at least one.
////////////////////////////////////////////////////////////////////
50
inline bool SimpleAllocator::is_empty(void) const;

1715 14 get_total_size 0 4 2850 31 SimpleAllocator::get_total_size 0 1 226 275
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_total_size
//       Access: Published
//  Description: Returns the total size of allocated objects.
////////////////////////////////////////////////////////////////////
64
inline unsigned int SimpleAllocator::get_total_size(void) const;

1716 12 get_max_size 0 4 2850 29 SimpleAllocator::get_max_size 0 1 227 279
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_max_size
//       Access: Published
//  Description: Returns the available space for allocated objects.
////////////////////////////////////////////////////////////////////
62
inline unsigned int SimpleAllocator::get_max_size(void) const;

1717 12 set_max_size 0 4 2850 29 SimpleAllocator::set_max_size 0 1 228 417
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::set_max_size
//       Access: Published
//  Description: Changes the available space for allocated objects.
//               This will not affect any already-allocated objects,
//               but will have an effect on future calls to alloc().
////////////////////////////////////////////////////////////////////
65
inline void SimpleAllocator::set_max_size(unsigned int max_size);

1718 14 get_contiguous 0 4 2850 31 SimpleAllocator::get_contiguous 0 1 229 595
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_contiguous
//       Access: Published
//  Description: Returns an upper-bound estimate of the size of the
//               largest contiguous block that may be allocated.  It
//               is guaranteed that an attempt to allocate a block
//               larger than this will fail, though it is not
//               guaranteed that an attempt to allocate a block this
//               size or smaller will succeed.
////////////////////////////////////////////////////////////////////
64
inline unsigned int SimpleAllocator::get_contiguous(void) const;

1719 15 get_first_block 0 4 2850 32 SimpleAllocator::get_first_block 0 1 230 338
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_first_block
//       Access: Published
//  Description: Returns a pointer to the first allocated block, or
//               NULL if there are no allocated blocks.
////////////////////////////////////////////////////////////////////
74
inline SimpleAllocatorBlock *SimpleAllocator::get_first_block(void) const;

1720 6 output 0 4 2850 23 SimpleAllocator::output 0 1 231 223
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
void SimpleAllocator::output(ostream &out) const;

1721 5 write 0 4 2850 22 SimpleAllocator::write 0 1 232 222
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void SimpleAllocator::write(ostream &out) const;

1722 21 ~SimpleAllocatorBlock 0 4 2851 43 SimpleAllocatorBlock::~SimpleAllocatorBlock 0 0 304
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::Destructor
//       Access: Published
//  Description: The block automatically frees itself when it
//               destructs.
////////////////////////////////////////////////////////////////////
57
inline SimpleAllocatorBlock::~SimpleAllocatorBlock(void);

1723 4 free 0 4 2851 26 SimpleAllocatorBlock::free 0 1 235 255
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::free
//       Access: Published
//  Description: Releases the allocated space.
////////////////////////////////////////////////////////////////////
45
inline void SimpleAllocatorBlock::free(void);

1724 13 get_allocator 0 4 2851 35 SimpleAllocatorBlock::get_allocator 0 1 236 351
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_allocator
//       Access: Published
//  Description: Returns the SimpleAllocator object that owns this
//               block.  Returns NULL if the block has been freed.
////////////////////////////////////////////////////////////////////
72
inline SimpleAllocator *SimpleAllocatorBlock::get_allocator(void) const;

1725 9 get_start 0 4 2851 31 SimpleAllocatorBlock::get_start 0 1 237 347
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_start
//       Access: Published
//  Description: Returns the starting point of this block.  It is an
//               error to call this if the block has been freed.
////////////////////////////////////////////////////////////////////
64
inline unsigned int SimpleAllocatorBlock::get_start(void) const;

1726 8 get_size 0 4 2851 30 SimpleAllocatorBlock::get_size 0 1 238 336
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_size
//       Access: Published
//  Description: Returns the size of this block.  It is an
//               error to call this if the block has been freed.
////////////////////////////////////////////////////////////////////
63
inline unsigned int SimpleAllocatorBlock::get_size(void) const;

1727 7 is_free 0 4 2851 29 SimpleAllocatorBlock::is_free 0 1 239 315
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::is_free
//       Access: Published
//  Description: Returns true if the block has been freed, false if it
//               is still valid.
////////////////////////////////////////////////////////////////////
54
inline bool SimpleAllocatorBlock::is_free(void) const;

1728 12 get_max_size 0 4 2851 34 SimpleAllocatorBlock::get_max_size 0 1 240 344
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_max_size
//       Access: Published
//  Description: Returns the maximum size this block can be
//               reallocated to, as limited by the following block.
////////////////////////////////////////////////////////////////////
67
inline unsigned int SimpleAllocatorBlock::get_max_size(void) const;

1729 7 realloc 0 4 2851 29 SimpleAllocatorBlock::realloc 0 1 241 392
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::realloc
//       Access: Published
//  Description: Changes the size of this block to the specified size.
//               Returns true if the change is accepted, false if
//               there was not enough room.
////////////////////////////////////////////////////////////////////
61
inline bool SimpleAllocatorBlock::realloc(unsigned int size);

1730 14 get_next_block 0 4 2851 36 SimpleAllocatorBlock::get_next_block 0 1 242 359
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_next_block
//       Access: Published
//  Description: Returns a pointer to the next allocated block in the
//               chain, or NULL if there are no more allocated blocks.
////////////////////////////////////////////////////////////////////
78
inline SimpleAllocatorBlock *SimpleAllocatorBlock::get_next_block(void) const;

1731 6 output 0 4 2851 28 SimpleAllocatorBlock::output 0 1 243 228
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
void SimpleAllocatorBlock::output(ostream &out) const;

1732 8 is_valid 0 4 2852 28 VertexDataSaveFile::is_valid 0 1 244 858
// Filename: vertexDataSaveFile.I
// Created by:  drose (12May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::is_valid
//       Access: Public
//  Description: Returns true if the save file was successfully
//               created and is ready for use, false if there was an
//               error.
////////////////////////////////////////////////////////////////////
53
inline bool VertexDataSaveFile::is_valid(void) const;

1733 19 get_total_file_size 0 4 2852 39 VertexDataSaveFile::get_total_file_size 0 1 245 334
////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::get_total_file_size
//       Access: Public
//  Description: Returns the amount of space consumed by the save
//               file, including unused portions.
////////////////////////////////////////////////////////////////////
72
inline unsigned int VertexDataSaveFile::get_total_file_size(void) const;

1734 18 get_used_file_size 0 4 2852 38 VertexDataSaveFile::get_used_file_size 0 1 246 326
////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::get_used_file_size
//       Access: Public
//  Description: Returns the amount of space within the save file that
//               is currently in use.
////////////////////////////////////////////////////////////////////
71
inline unsigned int VertexDataSaveFile::get_used_file_size(void) const;

1735 25 upcast_to_SimpleAllocator 0 12 2853 41 VertexDataPage::upcast_to_SimpleAllocator 0 1 265 45
upcast from VertexDataPage to SimpleAllocator
65
SimpleAllocator *VertexDataPage::upcast_to_SimpleAllocator(void);

1736 26 downcast_to_VertexDataPage 0 12 2850 43 SimpleAllocator::downcast_to_VertexDataPage 0 1 266 47
downcast from SimpleAllocator to VertexDataPage
66
VertexDataPage *SimpleAllocator::downcast_to_VertexDataPage(void);

1737 23 upcast_to_SimpleLruPage 0 12 2853 39 VertexDataPage::upcast_to_SimpleLruPage 0 1 267 43
upcast from VertexDataPage to SimpleLruPage
61
SimpleLruPage *VertexDataPage::upcast_to_SimpleLruPage(void);

1738 26 downcast_to_VertexDataPage 0 12 2849 41 SimpleLruPage::downcast_to_VertexDataPage 0 1 268 45
downcast from SimpleLruPage to VertexDataPage
64
VertexDataPage *SimpleLruPage::downcast_to_VertexDataPage(void);

1739 13 get_ram_class 0 4 2853 29 VertexDataPage::get_ram_class 0 1 247 874
// Filename: vertexDataPage.I
// Created by:  drose (04Jun07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_ram_class
//       Access: Published
//  Description: Returns the current ram class of the array.  If this
//               is other than RC_resident, the array data is not
//               resident in memory.
////////////////////////////////////////////////////////////////////
74
inline VertexDataPage::RamClass VertexDataPage::get_ram_class(void) const;

1740 21 get_pending_ram_class 0 4 2853 37 VertexDataPage::get_pending_ram_class 0 1 248 484
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_pending_ram_class
//       Access: Published
//  Description: Returns the pending ram class of the array.  If this
//               is different from get_ram_class(), this page has been
//               queued to be processed by the thread.  Eventually the
//               page will be set to this ram class.
////////////////////////////////////////////////////////////////////
82
inline VertexDataPage::RamClass VertexDataPage::get_pending_ram_class(void) const;

1741 16 request_resident 0 4 2853 32 VertexDataPage::request_resident 0 1 249 379
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::request_resident
//       Access: Published
//  Description: Ensures that the page will become resident soon.
//               Future calls to get_page_data() will eventually
//               return non-NULL.
////////////////////////////////////////////////////////////////////
51
inline void VertexDataPage::request_resident(void);

1742 5 alloc 0 4 2853 21 VertexDataPage::alloc 0 1 250 450
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::alloc
//       Access: Published
//  Description: Allocates a new block.  Returns NULL if a block of the
//               requested size cannot be allocated.
//
//               To free the allocated block, call block->free(), or
//               simply delete the block pointer.
////////////////////////////////////////////////////////////////////
65
inline VertexDataBlock *VertexDataPage::alloc(unsigned int size);

1743 15 get_first_block 0 4 2853 31 VertexDataPage::get_first_block 0 1 251 337
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_first_block
//       Access: Published
//  Description: Returns a pointer to the first allocated block, or
//               NULL if there are no allocated blocks.
////////////////////////////////////////////////////////////////////
68
inline VertexDataBlock *VertexDataPage::get_first_block(void) const;

1744 8 get_book 0 4 2853 24 VertexDataPage::get_book 0 1 252 274
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_book
//       Access: Published
//  Description: Returns a pointer to the book that owns this page.
////////////////////////////////////////////////////////////////////
60
inline VertexDataBook *VertexDataPage::get_book(void) const;

1745 14 get_global_lru 0 4 2853 30 VertexDataPage::get_global_lru 0 1 253 377
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_global_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the VertexDataPage's with the indicated
//               RamClass.
////////////////////////////////////////////////////////////////////
89
static inline SimpleLru *VertexDataPage::get_global_lru(VertexDataPage::RamClass rclass);

1746 15 get_pending_lru 0 4 2853 31 VertexDataPage::get_pending_lru 0 1 254 392
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_pending_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the VertexDataPage's that are pending
//               processing by the thread.
////////////////////////////////////////////////////////////////////
63
static inline SimpleLru *VertexDataPage::get_pending_lru(void);

1747 13 get_save_file 0 4 2853 29 VertexDataPage::get_save_file 0 1 255 378
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_save_file
//       Access: Published, Static
//  Description: Returns the global VertexDataSaveFile that will be
//               used to save vertex data buffers to disk when
//               necessary.
////////////////////////////////////////////////////////////////////
70
static inline VertexDataSaveFile *VertexDataPage::get_save_file(void);

1748 12 save_to_disk 0 4 2853 28 VertexDataPage::save_to_disk 0 1 256 467
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::save_to_disk
//       Access: Published
//  Description: Writes the page to disk, but does not evict it from
//               memory or affect its LRU status.  If it gets evicted
//               later without having been modified, it will not need
//               to write itself to disk again.
////////////////////////////////////////////////////////////////////
47
inline bool VertexDataPage::save_to_disk(void);

1749 15 get_num_threads 0 4 2853 31 VertexDataPage::get_num_threads 0 1 257 589
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_threads
//       Access: Published, Static
//  Description: Returns the number of threads that have been spawned
//               to service vertex paging requests, or 0 if no threads
//               have been spawned (which may mean either that all
//               paging requests will be handled by the main thread,
//               or simply that no paging requests have yet been
//               issued).
////////////////////////////////////////////////////////////////////
56
static inline int VertexDataPage::get_num_threads(void);

1750 21 get_num_pending_reads 0 4 2853 37 VertexDataPage::get_num_pending_reads 0 1 258 342
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_pending_reads
//       Access: Published, Static
//  Description: Returns the number of read requests that are waiting
//               to be serviced by a thread.
////////////////////////////////////////////////////////////////////
62
static inline int VertexDataPage::get_num_pending_reads(void);

1751 22 get_num_pending_writes 0 4 2853 38 VertexDataPage::get_num_pending_writes 0 1 259 344
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_pending_writes
//       Access: Published, Static
//  Description: Returns the number of write requests that are waiting
//               to be serviced by a thread.
////////////////////////////////////////////////////////////////////
63
static inline int VertexDataPage::get_num_pending_writes(void);

1752 12 stop_threads 0 4 2853 28 VertexDataPage::stop_threads 0 1 260 397
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::stop_threads
//       Access: Published, Static
//  Description: Call this to stop the paging threads, if they were
//               started.  This may block until all of the pending
//               tasks have been completed.
////////////////////////////////////////////////////////////////////
47
static void VertexDataPage::stop_threads(void);

1753 13 flush_threads 0 4 2853 29 VertexDataPage::flush_threads 0 1 261 323
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::flush_threads
//       Access: Published, Static
//  Description: Waits for all of the pending thread tasks to finish
//               before returning.
////////////////////////////////////////////////////////////////////
48
static void VertexDataPage::flush_threads(void);

1754 6 output 0 4 2853 22 VertexDataPage::output 0 1 262 231
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual void VertexDataPage::output(ostream &out) const;

1755 5 write 0 4 2853 21 VertexDataPage::write 0 1 263 230
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
73
virtual void VertexDataPage::write(ostream &out, int indent_level) const;

1756 14 get_class_type 0 4 2853 30 VertexDataPage::get_class_type 0 1 264 0
55
static TypeHandle VertexDataPage::get_class_type(void);

1757 14 VertexDataBook 0 4 2855 30 VertexDataBook::VertexDataBook 0 1 269 227
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
VertexDataBook::VertexDataBook(unsigned int block_size);

1758 15 ~VertexDataBook 0 4 2855 31 VertexDataBook::~VertexDataBook 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
VertexDataBook::~VertexDataBook(void);

1759 5 alloc 0 4 2855 21 VertexDataBook::alloc 0 1 270 795
// Filename: vertexDataBook.I
// Created by:  drose (16May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::alloc
//       Access: Published
//  Description: Allocates and returns a new VertexDataBuffer of the
//               requested size.
////////////////////////////////////////////////////////////////////
65
inline VertexDataBlock *VertexDataBook::alloc(unsigned int size);

1760 13 get_num_pages 0 4 2855 29 VertexDataBook::get_num_pages 0 1 271 278
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::get_num_pages
//       Access: Published
//  Description: Returns the number of pages created for the book.
////////////////////////////////////////////////////////////////////
53
inline int VertexDataBook::get_num_pages(void) const;

1761 21 count_total_page_size 0 4 2855 37 VertexDataBook::count_total_page_size 0 2 272 273 709
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_total_page_size
//       Access: Published
//  Description: Returns the total size of all bytes owned by all
//               pages owned by this book.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_total_page_size
//       Access: Published
//  Description: Returns the total size of all bytes owned by all
//               pages owned by this book that have the indicated ram
//               class.
////////////////////////////////////////////////////////////////////
157
unsigned int VertexDataBook::count_total_page_size(void) const;
unsigned int VertexDataBook::count_total_page_size(VertexDataPage::RamClass ram_class) const;

1762 20 count_allocated_size 0 4 2855 36 VertexDataBook::count_allocated_size 0 2 274 275 715
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_allocated_size
//       Access: Published
//  Description: Returns the total size of all bytes allocated within
//               pages owned by this book.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_allocated_size
//       Access: Published
//  Description: Returns the total size of all bytes allocated within
//               pages owned by this book that have the indicated ram
//               class.
////////////////////////////////////////////////////////////////////
155
unsigned int VertexDataBook::count_allocated_size(void) const;
unsigned int VertexDataBook::count_allocated_size(VertexDataPage::RamClass ram_class) const;

1763 12 save_to_disk 0 4 2855 28 VertexDataBook::save_to_disk 0 1 276 486
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::save_to_disk
//       Access: Published
//  Description: Writes all pages to disk immediately, just in case
//               they get evicted later.  It makes sense to make this
//               call just before taking down a loading screen, to
//               minimize chugs from saving pages inadvertently later.
////////////////////////////////////////////////////////////////////
40
void VertexDataBook::save_to_disk(void);

1764 30 upcast_to_SimpleAllocatorBlock 0 12 2856 47 VertexDataBlock::upcast_to_SimpleAllocatorBlock 0 1 279 51
upcast from VertexDataBlock to SimpleAllocatorBlock
76
SimpleAllocatorBlock *VertexDataBlock::upcast_to_SimpleAllocatorBlock(void);

1765 27 downcast_to_VertexDataBlock 0 12 2851 49 SimpleAllocatorBlock::downcast_to_VertexDataBlock 0 1 280 53
downcast from SimpleAllocatorBlock to VertexDataBlock
73
VertexDataBlock *SimpleAllocatorBlock::downcast_to_VertexDataBlock(void);

1766 24 upcast_to_ReferenceCount 0 12 2856 41 VertexDataBlock::upcast_to_ReferenceCount 0 1 281 45
upcast from VertexDataBlock to ReferenceCount
64
ReferenceCount *VertexDataBlock::upcast_to_ReferenceCount(void);

1767 27 downcast_to_VertexDataBlock 0 12 2857 43 ReferenceCount::downcast_to_VertexDataBlock 0 1 282 47
downcast from ReferenceCount to VertexDataBlock
67
VertexDataBlock *ReferenceCount::downcast_to_VertexDataBlock(void);

1768 8 get_page 0 4 2856 25 VertexDataBlock::get_page 0 1 277 296
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBlock::get_page
//       Access: Published
//  Description: Returns the page from which this buffer was
//               allocated.
////////////////////////////////////////////////////////////////////
61
inline VertexDataPage *VertexDataBlock::get_page(void) const;

1769 14 get_next_block 0 4 2856 31 VertexDataBlock::get_next_block 0 1 278 354
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBlock::get_next_block
//       Access: Published
//  Description: Returns a pointer to the next allocated block in the
//               chain, or NULL if there are no more allocated blocks.
////////////////////////////////////////////////////////////////////
68
inline VertexDataBlock *VertexDataBlock::get_next_block(void) const;

1770 16 ~VertexDataBlock 0 4 2856 33 VertexDataBlock::~VertexDataBlock 0 0 0
40
VertexDataBlock::~VertexDataBlock(void);

1771 27 upcast_to_CopyOnWriteObject 0 12 2859 48 GeomVertexArrayData::upcast_to_CopyOnWriteObject 0 1 317 52
upcast from GeomVertexArrayData to CopyOnWriteObject
74
CopyOnWriteObject *GeomVertexArrayData::upcast_to_CopyOnWriteObject(void);

1772 31 downcast_to_GeomVertexArrayData 0 12 2860 50 CopyOnWriteObject::downcast_to_GeomVertexArrayData 0 1 318 54
downcast from CopyOnWriteObject to GeomVertexArrayData
78
GeomVertexArrayData *CopyOnWriteObject::downcast_to_GeomVertexArrayData(void);

1773 23 upcast_to_SimpleLruPage 0 12 2859 44 GeomVertexArrayData::upcast_to_SimpleLruPage 0 1 319 48
upcast from GeomVertexArrayData to SimpleLruPage
66
SimpleLruPage *GeomVertexArrayData::upcast_to_SimpleLruPage(void);

1774 31 downcast_to_GeomVertexArrayData 0 12 2849 46 SimpleLruPage::downcast_to_GeomVertexArrayData 0 1 320 50
downcast from SimpleLruPage to GeomVertexArrayData
74
GeomVertexArrayData *SimpleLruPage::downcast_to_GeomVertexArrayData(void);

1775 19 upcast_to_GeomEnums 0 12 2859 40 GeomVertexArrayData::upcast_to_GeomEnums 0 1 321 44
upcast from GeomVertexArrayData to GeomEnums
58
GeomEnums *GeomVertexArrayData::upcast_to_GeomEnums(void);

1776 31 downcast_to_GeomVertexArrayData 0 12 2833 42 GeomEnums::downcast_to_GeomVertexArrayData 0 1 322 46
downcast from GeomEnums to GeomVertexArrayData
70
GeomVertexArrayData *GeomEnums::downcast_to_GeomVertexArrayData(void);

1777 19 GeomVertexArrayData 0 4 2859 40 GeomVertexArrayData::GeomVertexArrayData 0 2 283 284 808
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Default Constructor
//       Access: Private
//  Description: Constructs an invalid object.  This is only used when
//               reading from the bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
192
GeomVertexArrayData::GeomVertexArrayData(GeomVertexArrayFormat const *array_format, GeomEnums::UsageHint usage_hint);
GeomVertexArrayData::GeomVertexArrayData(GeomVertexArrayData const &copy);

1778 10 operator = 0 4 2859 31 GeomVertexArrayData::operator = 0 1 285 490
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexArrayData
//               that is actively being used for rendering.
////////////////////////////////////////////////////////////////////
70
void GeomVertexArrayData::operator =(GeomVertexArrayData const &copy);

1779 20 ~GeomVertexArrayData 0 4 2859 41 GeomVertexArrayData::~GeomVertexArrayData 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual GeomVertexArrayData::~GeomVertexArrayData(void);

1780 12 operator new 0 4 2859 33 GeomVertexArrayData::operator new 0 1 286 0
144
inline void *GeomVertexArrayData::operator new(unsigned int size);
inline void *GeomVertexArrayData::operator new(unsigned int size, void *ptr);

1781 15 operator delete 0 4 2859 36 GeomVertexArrayData::operator delete 0 0 0
126
inline void GeomVertexArrayData::operator delete(void *ptr);
inline void GeomVertexArrayData::operator delete(void *, void *);

1782 12 validate_ptr 0 4 2859 33 GeomVertexArrayData::validate_ptr 0 0 0
70
static inline bool GeomVertexArrayData::validate_ptr(void const *ptr);

1783 10 compare_to 0 4 2859 31 GeomVertexArrayData::compare_to 0 1 287 330
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::compare_to
//       Access: Published
//  Description: Returns 0 if the two arrays are equivalent, even if
//               they are not the same pointer.
////////////////////////////////////////////////////////////////////
76
int GeomVertexArrayData::compare_to(GeomVertexArrayData const &other) const;

1784 16 get_array_format 0 4 2859 37 GeomVertexArrayData::get_array_format 0 1 288 784
// Filename: geomVertexArrayData.I
// Created by:  drose (17Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_array_format
//       Access: Published
//  Description: Returns the format object that describes this array.
////////////////////////////////////////////////////////////////////
86
inline GeomVertexArrayFormat const *GeomVertexArrayData::get_array_format(void) const;

1785 14 get_usage_hint 0 4 2859 35 GeomVertexArrayData::get_usage_hint 0 1 289 409
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that describes to the
//               rendering backend how often the vertex data will be
//               modified and/or rendered.  See geomEnums.h.
////////////////////////////////////////////////////////////////////
76
inline GeomEnums::UsageHint GeomVertexArrayData::get_usage_hint(void) const;

1786 14 set_usage_hint 0 4 2859 35 GeomVertexArrayData::set_usage_hint 0 1 290 514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this array.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
74
void GeomVertexArrayData::set_usage_hint(GeomEnums::UsageHint usage_hint);

1787 10 has_column 0 4 2859 31 GeomVertexArrayData::has_column 0 1 291 404
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
////////////////////////////////////////////////////////////////////
76
inline bool GeomVertexArrayData::has_column(InternalName const *name) const;

1788 12 get_num_rows 0 4 2859 33 GeomVertexArrayData::get_num_rows 0 1 292 454
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored in the array,
//               based on the number of bytes and the stride.  This
//               should be the same for all arrays within a given
//               GeomVertexData object.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayData::get_num_rows(void) const;

1789 12 set_num_rows 0 4 2859 33 GeomVertexArrayData::set_num_rows 0 1 293 1075
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows.
//
//               Normally, you would not call this directly, since all
//               of the arrays in a particular GeomVertexData must
//               have the same number of rows; instead, call
//               GeomVertexData::set_num_rows().
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               The new vertex data is initialized to 0, including
//               the "color" column (but see
//               GeomVertexData::set_num_rows()).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexArrayData::set_num_rows(int n);

1790 20 unclean_set_num_rows 0 4 2859 41 GeomVertexArrayData::unclean_set_num_rows 0 1 294 757
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::unclean_set_num_rows
//       Access: Published
//  Description: This method behaves like set_num_rows(), except the
//               new data is not initialized.  Furthermore, after this
//               call, *any* of the data in the GeomVertexArrayData
//               may be uninitialized, including the earlier rows.
//
//               Normally, you would not call this directly, since all
//               of the arrays in a particular GeomVertexData must
//               have the same number of rows; instead, call
//               GeomVertexData::unclean_set_num_rows().
////////////////////////////////////////////////////////////////////
61
inline bool GeomVertexArrayData::unclean_set_num_rows(int n);

1791 16 reserve_num_rows 0 4 2859 37 GeomVertexArrayData::reserve_num_rows 0 1 295 611
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for n rows is
//               allocated, so that you may increase the number of
//               rows to n without causing a new memory allocation.
//               This is a performance optimization only; it is
//               especially useful when you know ahead of time that
//               you will be adding n rows to the data.
////////////////////////////////////////////////////////////////////
57
inline bool GeomVertexArrayData::reserve_num_rows(int n);

1792 10 clear_rows 0 4 2859 31 GeomVertexArrayData::clear_rows 0 1 296 329
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::clear_rows
//       Access: Published
//  Description: Removes all of the rows in the array.
//               Functionally equivalent to set_num_rows(0).
////////////////////////////////////////////////////////////////////
50
inline void GeomVertexArrayData::clear_rows(void);

1793 19 get_data_size_bytes 0 4 2859 40 GeomVertexArrayData::get_data_size_bytes 0 1 297 288
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the array.
////////////////////////////////////////////////////////////////////
64
inline int GeomVertexArrayData::get_data_size_bytes(void) const;

1794 12 get_modified 0 4 2859 33 GeomVertexArrayData::get_modified 0 1 298 377
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the array vertex data is
//               modified.
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq GeomVertexArrayData::get_modified(void) const;

1795 6 output 0 4 2859 27 GeomVertexArrayData::output 0 1 299 227
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
virtual void GeomVertexArrayData::output(ostream &out) const;

1796 5 write 0 4 2859 26 GeomVertexArrayData::write 0 2 300 301 226
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
84
virtual void GeomVertexArrayData::write(ostream &out, int indent_level = (0)) const;

1797 16 request_resident 0 4 2859 37 GeomVertexArrayData::request_resident 0 1 302 566
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns true, the next call to
//               get_handle()->get_read_pointer() will probably not
//               block.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
////////////////////////////////////////////////////////////////////
62
inline bool GeomVertexArrayData::request_resident(void) const;

1798 10 get_handle 0 4 2859 31 GeomVertexArrayData::get_handle 0 2 303 304 529
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_handle
//       Access: Published
//  Description: Returns an object that can be used to read the actual
//               data bytes stored in the array.  Calling this method
//               locks the data, and will block any other threads
//               attempting to read or write the data, until the
//               returned object destructs.
////////////////////////////////////////////////////////////////////
140
inline ConstPointerTo< GeomVertexArrayDataHandle > GeomVertexArrayData::get_handle(Thread *current_thread = ((get_current_thread()))) const;

1799 13 modify_handle 0 4 2859 34 GeomVertexArrayData::modify_handle 0 2 305 306 541
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::modify_handle
//       Access: Published
//  Description: Returns an object that can be used to read or write
//               the actual data bytes stored in the array.  Calling
//               this method locks the data, and will block any other
//               threads attempting to read or write the data, until
//               the returned object destructs.
////////////////////////////////////////////////////////////////////
132
inline PointerTo< GeomVertexArrayDataHandle > GeomVertexArrayData::modify_handle(Thread *current_thread = ((get_current_thread())));

1800 7 prepare 0 4 2859 28 GeomVertexArrayData::prepare 0 1 307 648
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::prepare
//       Access: Public
//  Description: Indicates that the data should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               data is already loaded into the GSG if it is expected
//               to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               datas from a user interface standpoint.
////////////////////////////////////////////////////////////////////
77
void GeomVertexArrayData::prepare(PreparedGraphicsObjects *prepared_objects);

1801 11 is_prepared 0 4 2859 32 GeomVertexArrayData::is_prepared 0 1 308 383
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::is_prepared
//       Access: Published
//  Description: Returns true if the data has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
////////////////////////////////////////////////////////////////////
87
bool GeomVertexArrayData::is_prepared(PreparedGraphicsObjects *prepared_objects) const;

1802 11 prepare_now 0 4 2859 32 GeomVertexArrayData::prepare_now 0 1 309 894
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::prepare_now
//       Access: Public
//  Description: Creates a context for the data on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) VertexBufferContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a data does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
////////////////////////////////////////////////////////////////////
129
VertexBufferContext *GeomVertexArrayData::prepare_now(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

1803 7 release 0 4 2859 28 GeomVertexArrayData::release 0 1 310 400
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::release
//       Access: Public
//  Description: Frees the data context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
77
bool GeomVertexArrayData::release(PreparedGraphicsObjects *prepared_objects);

1804 11 release_all 0 4 2859 32 GeomVertexArrayData::release_all 0 1 311 398
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::release_all
//       Access: Public
//  Description: Frees the context allocated on all objects for which
//               the data has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
43
int GeomVertexArrayData::release_all(void);

1805 19 get_independent_lru 0 4 2859 40 GeomVertexArrayData::get_independent_lru 0 1 312 399
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_independent_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the GeomVertexArrayData's that have not (yet)
//               been paged out.
////////////////////////////////////////////////////////////////////
72
static inline SimpleLru *GeomVertexArrayData::get_independent_lru(void);

1806 13 get_small_lru 0 4 2859 34 GeomVertexArrayData::get_small_lru 0 1 313 400
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_small_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the GeomVertexArrayData's that are deemed too
//               small to be paged out.
////////////////////////////////////////////////////////////////////
66
static inline SimpleLru *GeomVertexArrayData::get_small_lru(void);

1807 9 lru_epoch 0 4 2859 30 GeomVertexArrayData::lru_epoch 0 1 314 382
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::lru_epoch
//       Access: Published, Static
//  Description: Marks that an epoch has passed in each LRU.  Asks the
//               LRU's to consider whether they should perform
//               evictions.
////////////////////////////////////////////////////////////////////
49
static void GeomVertexArrayData::lru_epoch(void);

1808 8 get_book 0 4 2859 29 GeomVertexArrayData::get_book 0 1 315 338
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_book
//       Access: Published, Static
//  Description: Returns the global VertexDataBook that will be
//               used to allocate vertex data buffers.
////////////////////////////////////////////////////////////////////
66
static inline VertexDataBook &GeomVertexArrayData::get_book(void);

1809 14 get_class_type 0 4 2859 35 GeomVertexArrayData::get_class_type 0 1 316 0
60
static TypeHandle GeomVertexArrayData::get_class_type(void);

1810 24 upcast_to_ReferenceCount 0 12 2861 51 GeomVertexArrayDataHandle::upcast_to_ReferenceCount 0 1 343 55
upcast from GeomVertexArrayDataHandle to ReferenceCount
74
ReferenceCount *GeomVertexArrayDataHandle::upcast_to_ReferenceCount(void);

1811 37 downcast_to_GeomVertexArrayDataHandle 0 12 2857 53 ReferenceCount::downcast_to_GeomVertexArrayDataHandle 0 1 344 57
downcast from ReferenceCount to GeomVertexArrayDataHandle
87
GeomVertexArrayDataHandle *ReferenceCount::downcast_to_GeomVertexArrayDataHandle(void);

1812 19 upcast_to_GeomEnums 0 12 2861 46 GeomVertexArrayDataHandle::upcast_to_GeomEnums 0 1 345 50
upcast from GeomVertexArrayDataHandle to GeomEnums
64
GeomEnums *GeomVertexArrayDataHandle::upcast_to_GeomEnums(void);

1813 37 downcast_to_GeomVertexArrayDataHandle 0 12 2833 48 GeomEnums::downcast_to_GeomVertexArrayDataHandle 0 1 346 52
downcast from GeomEnums to GeomVertexArrayDataHandle
82
GeomVertexArrayDataHandle *GeomEnums::downcast_to_GeomVertexArrayDataHandle(void);

1814 26 ~GeomVertexArrayDataHandle 0 4 2861 53 GeomVertexArrayDataHandle::~GeomVertexArrayDataHandle 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
virtual inline GeomVertexArrayDataHandle::~GeomVertexArrayDataHandle(void);

1815 10 get_object 0 4 2861 37 GeomVertexArrayDataHandle::get_object 0 2 323 324 474
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_object
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_object
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
157
inline GeomVertexArrayData const *GeomVertexArrayDataHandle::get_object(void) const;
inline GeomVertexArrayData *GeomVertexArrayDataHandle::get_object(void);

1816 16 get_array_format 0 4 2861 43 GeomVertexArrayDataHandle::get_array_format 0 1 325 243
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_array_format
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
92
inline GeomVertexArrayFormat const *GeomVertexArrayDataHandle::get_array_format(void) const;

1817 14 get_usage_hint 0 4 2861 41 GeomVertexArrayDataHandle::get_usage_hint 0 1 326 241
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_usage_hint
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline GeomEnums::UsageHint GeomVertexArrayDataHandle::get_usage_hint(void) const;

1818 12 get_num_rows 0 4 2861 39 GeomVertexArrayDataHandle::get_num_rows 0 1 327 239
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_num_rows
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int GeomVertexArrayDataHandle::get_num_rows(void) const;

1819 12 set_num_rows 0 4 2861 39 GeomVertexArrayDataHandle::set_num_rows 0 1 328 236
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_num_rows
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
52
bool GeomVertexArrayDataHandle::set_num_rows(int n);

1820 20 unclean_set_num_rows 0 4 2861 47 GeomVertexArrayDataHandle::unclean_set_num_rows 0 1 329 244
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::unclean_set_num_rows
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
60
bool GeomVertexArrayDataHandle::unclean_set_num_rows(int n);

1821 16 reserve_num_rows 0 4 2861 43 GeomVertexArrayDataHandle::reserve_num_rows 0 1 330 240
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::reserve_num_rows
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
56
bool GeomVertexArrayDataHandle::reserve_num_rows(int n);

1822 10 clear_rows 0 4 2861 37 GeomVertexArrayDataHandle::clear_rows 0 1 331 237
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::clear_rows
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void GeomVertexArrayDataHandle::clear_rows(void);

1823 19 get_data_size_bytes 0 4 2861 46 GeomVertexArrayDataHandle::get_data_size_bytes 0 1 332 246
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_data_size_bytes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline int GeomVertexArrayDataHandle::get_data_size_bytes(void) const;

1824 12 get_modified 0 4 2861 39 GeomVertexArrayDataHandle::get_modified 0 1 333 239
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_modified
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline UpdateSeq GeomVertexArrayDataHandle::get_modified(void) const;

1825 16 request_resident 0 4 2861 43 GeomVertexArrayDataHandle::request_resident 0 1 334 566
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns true, the next call to
//               get_handle()->get_read_pointer() will probably not
//               block.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
////////////////////////////////////////////////////////////////////
68
inline bool GeomVertexArrayDataHandle::request_resident(void) const;

1826 14 copy_data_from 0 4 2861 41 GeomVertexArrayDataHandle::copy_data_from 0 1 335 289
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::copy_data_from
//       Access: Public
//  Description: Copies the entire data array from the other object.
////////////////////////////////////////////////////////////////////
87
void GeomVertexArrayDataHandle::copy_data_from(GeomVertexArrayDataHandle const *other);

1827 17 copy_subdata_from 0 4 2861 44 GeomVertexArrayDataHandle::copy_subdata_from 0 1 336 476
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::copy_subdata_from
//       Access: Public
//  Description: Copies a portion of the data array from the other
//               object into a portion of the data array of this
//               object.  If to_size != from_size, the size of this
//               data array is adjusted accordingly.
////////////////////////////////////////////////////////////////////
184
void GeomVertexArrayDataHandle::copy_subdata_from(unsigned int to_start, unsigned int to_size, GeomVertexArrayDataHandle const *other, unsigned int from_start, unsigned int from_size);

1828 8 get_data 0 4 2861 35 GeomVertexArrayDataHandle::get_data 0 1 337 445
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_data
//       Access: Published
//  Description: Returns the entire raw data of the
//               GeomVertexArrayData object, formatted as a string.
//               This is primarily for the benefit of high-level
//               languages such as Python.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > GeomVertexArrayDataHandle::get_data(void) const;

1829 8 set_data 0 4 2861 35 GeomVertexArrayDataHandle::set_data 0 1 338 415
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_data
//       Access: Public
//  Description: Replaces the entire raw data array with the contents
//               of the indicated string.  This is primarily for the
//               benefit of high-level languages like Python.
////////////////////////////////////////////////////////////////////
75
void GeomVertexArrayDataHandle::set_data(basic_string< char > const &data);

1830 11 get_subdata 0 4 2861 38 GeomVertexArrayDataHandle::get_subdata 0 1 339 453
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_subdata
//       Access: Published
//  Description: Returns a subset of the raw data of the
//               GeomVertexArrayData object, formatted as a string.
//               This is primarily for the benefit of high-level
//               languages such as Python.
////////////////////////////////////////////////////////////////////
112
inline basic_string< char > GeomVertexArrayDataHandle::get_subdata(unsigned int start, unsigned int size) const;

1831 11 set_subdata 0 4 2861 38 GeomVertexArrayDataHandle::set_subdata 0 1 340 518
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_subdata
//       Access: Public
//  Description: Replaces a portion of the data array from the
//               indicated string.  If size != data.size(), the size
//               of this data array is adjusted accordingly.
//
//               This is primarily for the benefit of high-level
//               languages like Python.
////////////////////////////////////////////////////////////////////
117
void GeomVertexArrayDataHandle::set_subdata(unsigned int start, unsigned int size, basic_string< char > const &data);

1832 9 mark_used 0 4 2861 36 GeomVertexArrayDataHandle::mark_used 0 1 341 271
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::mark_used
//       Access: Published
//  Description: Marks the array data recently-used.
////////////////////////////////////////////////////////////////////
61
inline void GeomVertexArrayDataHandle::mark_used(void) const;

1833 14 get_class_type 0 4 2861 41 GeomVertexArrayDataHandle::get_class_type 0 1 342 0
66
static TypeHandle GeomVertexArrayDataHandle::get_class_type(void);

1834 12 set_max_size 0 4 2862 30 GeomCacheManager::set_max_size 0 1 347 1310
// Filename: geomCacheManager.I
// Created by:  drose (11Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::set_max_size
//       Access: Published
//  Description: Specifies the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  This limit is flexible, and may be
//               temporarily exceeded if many different Geoms are
//               pre-processed during the space of a single frame.
//
//               This is not a limit on the actual vertex data, which
//               is what it is; it is also not a limit on the amount
//               of memory used by the video driver or the system
//               graphics interface, which Panda has no control over.
////////////////////////////////////////////////////////////////////
63
inline void GeomCacheManager::set_max_size(int max_size) const;

1835 12 get_max_size 0 4 2862 30 GeomCacheManager::get_max_size 0 1 348 390
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_max_size
//       Access: Published
//  Description: Returns the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  See set_max_size().
////////////////////////////////////////////////////////////////////
54
inline int GeomCacheManager::get_max_size(void) const;

1836 14 get_total_size 0 4 2862 32 GeomCacheManager::get_total_size 0 1 349 285
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_total_size
//       Access: Published
//  Description: Returns the number of entries currently in the cache.
////////////////////////////////////////////////////////////////////
56
inline int GeomCacheManager::get_total_size(void) const;

1837 5 flush 0 4 2862 23 GeomCacheManager::flush 0 1 350 269
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::flush
//       Access: Published
//  Description: Immediately empties all elements in the cache.
////////////////////////////////////////////////////////////////////
35
void GeomCacheManager::flush(void);

1838 14 get_global_ptr 0 4 2862 32 GeomCacheManager::get_global_ptr 0 1 351 281
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the global cache manager pointer.
////////////////////////////////////////////////////////////////////
64
static GeomCacheManager *GeomCacheManager::get_global_ptr(void);

1839 10 get_matrix 0 4 2863 27 VertexTransform::get_matrix 0 1 352 0
70
virtual void VertexTransform::get_matrix(LMatrix4f &matrix) const = 0;

1840 11 mult_matrix 0 4 2863 28 VertexTransform::mult_matrix 0 1 353 579
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::mult_matrix
//       Access: Published, Virtual
//  Description: Premultiplies this transform's matrix with the
//               indicated previous matrix, so that the result is the
//               net composition of the given transform with this
//               transform.  The result is stored in the parameter
//               "result", which should not be the same matrix as
//               previous.
////////////////////////////////////////////////////////////////////
94
virtual void VertexTransform::mult_matrix(LMatrix4f &result, LMatrix4f const &previous) const;

1841 17 accumulate_matrix 0 4 2863 34 VertexTransform::accumulate_matrix 0 1 354 477
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::accumulate_matrix
//       Access: Published, Virtual
//  Description: Adds the value of this transform's matrix, modified
//               by the indicated weight, into the indicated
//               accumulation matrix.  This is used to compute the
//               result of several blended transforms.
////////////////////////////////////////////////////////////////////
86
virtual void VertexTransform::accumulate_matrix(LMatrix4f &accum, float weight) const;

1842 12 get_modified 0 4 2863 29 VertexTransform::get_modified 0 1 355 871
// Filename: vertexTransform.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_matrix() changes.
////////////////////////////////////////////////////////////////////
77
inline UpdateSeq VertexTransform::get_modified(Thread *current_thread) const;

1843 6 output 0 4 2863 23 VertexTransform::output 0 1 356 232
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void VertexTransform::output(ostream &out) const;

1844 5 write 0 4 2863 22 VertexTransform::write 0 1 357 231
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
74
virtual void VertexTransform::write(ostream &out, int indent_level) const;

1845 17 get_next_modified 0 4 2863 34 VertexTransform::get_next_modified 0 1 358 765
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_next_modified
//       Access: Public, Static
//  Description: Returns a monotonically increasing sequence.  Each
//               time this is called, a new sequence number is
//               returned, higher than the previous value.
//
//               This is used to ensure that all
//               VertexTransform::get_modified() calls return an
//               increasing number in the same space, so that
//               TransformBlend::get_modified() is easy to determine.
//               It is similar to Geom::get_modified(), but it is in a
//               different space.
////////////////////////////////////////////////////////////////////
76
static UpdateSeq VertexTransform::get_next_modified(Thread *current_thread);

1846 19 get_global_modified 0 4 2863 36 VertexTransform::get_global_modified 0 1 359 474
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_global_modified
//       Access: Published, Static
//  Description: Returns the currently highest
//               VertexTransform::get_modified() value in the world.
//               This can be used as a quick way to determine if any
//               VertexTransforms have changed value recently.
////////////////////////////////////////////////////////////////////
85
static inline UpdateSeq VertexTransform::get_global_modified(Thread *current_thread);

1847 14 get_class_type 0 4 2863 31 VertexTransform::get_class_type 0 1 360 0
56
static TypeHandle VertexTransform::get_class_type(void);

1848 14 TransformTable 0 4 2864 30 TransformTable::TransformTable 0 2 361 362 461
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
97
TransformTable::TransformTable(void);
TransformTable::TransformTable(TransformTable const &copy);

1849 10 operator = 0 4 2864 26 TransformTable::operator = 0 1 363 240
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void TransformTable::operator =(TransformTable const &copy);

1850 13 is_registered 0 4 2864 29 TransformTable::is_registered 0 1 364 997
// Filename: transformTable.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of transforms in
//               a TransformTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
////////////////////////////////////////////////////////////////////
54
inline bool TransformTable::is_registered(void) const;

1851 14 register_table 0 4 2864 30 TransformTable::register_table 0 1 365 927
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::register_table
//       Access: Published, Static
//  Description: Registers a TransformTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a TransformTable may no longer be
//               modified (although the individual VertexTransform
//               objects may modify their reported transforms).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////
107
static inline ConstPointerTo< TransformTable > TransformTable::register_table(TransformTable const *table);

1852 18 get_num_transforms 0 4 2864 34 TransformTable::get_num_transforms 0 1 366 280
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms in the table.
////////////////////////////////////////////////////////////////////
58
inline int TransformTable::get_num_transforms(void) const;

1853 13 get_transform 0 4 2864 29 TransformTable::get_transform 0 1 367 268
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_transform
//       Access: Published
//  Description: Returns the nth transform in the table.
////////////////////////////////////////////////////////////////////
73
inline VertexTransform const *TransformTable::get_transform(int n) const;

1854 12 get_modified 0 4 2864 28 TransformTable::get_modified 0 1 368 569
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexTransforms in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexTransform
//               changes.)
////////////////////////////////////////////////////////////////////
76
inline UpdateSeq TransformTable::get_modified(Thread *current_thread) const;

1855 13 set_transform 0 4 2864 29 TransformTable::set_transform 0 1 369 310
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::set_transform
//       Access: Published
//  Description: Replaces the nth transform.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
76
void TransformTable::set_transform(int n, VertexTransform const *transform);

1856 16 remove_transform 0 4 2864 32 TransformTable::remove_transform 0 1 370 312
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::remove_transform
//       Access: Published
//  Description: Removes the nth transform.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
45
void TransformTable::remove_transform(int n);

1857 13 add_transform 0 4 2864 29 TransformTable::add_transform 0 1 371 562
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::add_transform
//       Access: Published
//  Description: Adds a new transform to the table and returns the
//               index number of the new transform.  Only valid for
//               unregistered tables.
//
//               This does not automatically uniquify the pointer; if
//               the transform is already present in the table, it
//               will be added twice.
////////////////////////////////////////////////////////////////////
68
int TransformTable::add_transform(VertexTransform const *transform);

1858 5 write 0 4 2864 21 TransformTable::write 0 1 372 221
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void TransformTable::write(ostream &out) const;

1859 14 get_class_type 0 4 2864 30 TransformTable::get_class_type 0 1 373 0
55
static TypeHandle TransformTable::get_class_type(void);

1860 14 TransformBlend 0 4 2865 30 TransformBlend::TransformBlend 0 6 374 375 376 377 378 379 1867
// Filename: transformBlend.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
767
inline TransformBlend::TransformBlend(void);
inline TransformBlend::TransformBlend(VertexTransform const *transform0, float weight0);
inline TransformBlend::TransformBlend(VertexTransform const *transform0, float weight0, VertexTransform const *transform1, float weight1);
inline TransformBlend::TransformBlend(VertexTransform const *transform0, float weight0, VertexTransform const *transform1, float weight1, VertexTransform const *transform2, float weight2);
inline TransformBlend::TransformBlend(VertexTransform const *transform0, float weight0, VertexTransform const *transform1, float weight1, VertexTransform const *transform2, float weight2, VertexTransform const *transform3, float weight3);
inline TransformBlend::TransformBlend(TransformBlend const &copy);

1861 10 operator = 0 4 2865 26 TransformBlend::operator = 0 1 380 240
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void TransformBlend::operator =(TransformBlend const &copy);

1862 15 ~TransformBlend 0 4 2865 31 TransformBlend::~TransformBlend 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline TransformBlend::~TransformBlend(void);

1863 10 compare_to 0 4 2865 26 TransformBlend::compare_to 0 1 381 300
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::compare_to
//       Access: Published
//  Description: Defines an arbitrary ordering for TransformBlend
//               objects.
////////////////////////////////////////////////////////////////////
66
int TransformBlend::compare_to(TransformBlend const &other) const;

1864 10 operator < 0 4 2865 26 TransformBlend::operator < 0 1 382 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator <
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline bool TransformBlend::operator <(TransformBlend const &other) const;

1865 11 operator == 0 4 2865 27 TransformBlend::operator == 0 1 383 227
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator ==
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline bool TransformBlend::operator ==(TransformBlend const &other) const;

1866 11 operator != 0 4 2865 27 TransformBlend::operator != 0 1 384 227
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator !=
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline bool TransformBlend::operator !=(TransformBlend const &other) const;

1867 13 add_transform 0 4 2865 29 TransformBlend::add_transform 0 1 385 344
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::add_transform
//       Access: Published
//  Description: Adds a new transform to the blend.  If the transform
//               already existed, increases its weight factor.
////////////////////////////////////////////////////////////////////
83
void TransformBlend::add_transform(VertexTransform const *transform, float weight);

1868 16 remove_transform 0 4 2865 32 TransformBlend::remove_transform 0 1 386 279
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::remove_transform
//       Access: Published
//  Description: Removes the indicated transform from the blend.
////////////////////////////////////////////////////////////////////
72
void TransformBlend::remove_transform(VertexTransform const *transform);

1869 16 limit_transforms 0 4 2865 32 TransformBlend::limit_transforms 0 1 387 458
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::limit_transforms
//       Access: Published
//  Description: If the total number of transforms in the blend
//               exceeds max_transforms, removes the n least-important
//               transforms as needed to reduce the number of
//               transforms to max_transforms.
////////////////////////////////////////////////////////////////////
58
void TransformBlend::limit_transforms(int max_transforms);

1870 17 normalize_weights 0 4 2865 33 TransformBlend::normalize_weights 0 1 388 456
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::normalize_weights
//       Access: Published
//  Description: Rescales all of the weights on the various transforms
//               so that they sum to 1.0.  It is generally a good idea
//               to call this after adding or removing transforms from
//               the blend.
////////////////////////////////////////////////////////////////////
45
void TransformBlend::normalize_weights(void);

1871 13 has_transform 0 4 2865 29 TransformBlend::has_transform 0 1 389 317
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::has_transform
//       Access: Published
//  Description: Returns true if the blend has the indicated
//               transform, false otherwise.
////////////////////////////////////////////////////////////////////
75
bool TransformBlend::has_transform(VertexTransform const *transform) const;

1872 10 get_weight 0 4 2865 26 TransformBlend::get_weight 0 2 390 391 689
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the nth transform
//               stored in the blend object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the indicated
//               transform, or 0 if there is no entry for the
//               transform.
////////////////////////////////////////////////////////////////////
127
float TransformBlend::get_weight(VertexTransform const *transform) const;
inline float TransformBlend::get_weight(int n) const;

1873 18 get_num_transforms 0 4 2865 34 TransformBlend::get_num_transforms 0 1 392 311
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
58
inline int TransformBlend::get_num_transforms(void) const;

1874 13 get_transform 0 4 2865 29 TransformBlend::get_transform 0 1 393 299
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_transform
//       Access: Published
//  Description: Returns the nth transform stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
73
inline VertexTransform const *TransformBlend::get_transform(int n) const;

1875 13 set_transform 0 4 2865 29 TransformBlend::set_transform 0 1 394 300
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_transform
//       Access: Published
//  Description: Replaces the nth transform stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
83
inline void TransformBlend::set_transform(int n, VertexTransform const *transform);

1876 10 set_weight 0 4 2865 26 TransformBlend::set_weight 0 1 395 324
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_weight
//       Access: Published
//  Description: Replaces the weight associated with the nth transform
//               stored in the blend object.
////////////////////////////////////////////////////////////////////
60
inline void TransformBlend::set_weight(int n, float weight);

1877 12 update_blend 0 4 2865 28 TransformBlend::update_blend 0 1 396 405
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::update_blend
//       Access: Published
//  Description: Recomputes the internal representation of the blend
//               value, if necessary.  You should call this before
//               calling get_blend() or transform_point().
////////////////////////////////////////////////////////////////////
71
inline void TransformBlend::update_blend(Thread *current_thread) const;

1878 9 get_blend 0 4 2865 25 TransformBlend::get_blend 0 1 397 522
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_blend
//       Access: Published
//  Description: Returns the current value of the blend, based on the
//               current value of all of the nested transform objects
//               and their associated weights.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
87
inline void TransformBlend::get_blend(LMatrix4f &result, Thread *current_thread) const;

1879 15 transform_point 0 4 2865 31 TransformBlend::transform_point 0 4 398 399 400 401 1664
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point (double)
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point (double)
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
367
inline void TransformBlend::transform_point(LPoint4f &point, Thread *current_thread) const;
inline void TransformBlend::transform_point(LPoint3f &point, Thread *current_thread) const;
inline void TransformBlend::transform_point(LPoint4d &point, Thread *current_thread) const;
inline void TransformBlend::transform_point(LPoint3d &point, Thread *current_thread) const;

1880 16 transform_vector 0 4 2865 32 TransformBlend::transform_vector 0 2 402 403 835
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_vector
//       Access: Published
//  Description: Transforms the indicated vector by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_vector (double)
//       Access: Published
//  Description: Transforms the indicated vector by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
187
inline void TransformBlend::transform_vector(LVector3f &point, Thread *current_thread) const;
inline void TransformBlend::transform_vector(LVector3d &point, Thread *current_thread) const;

1881 12 get_modified 0 4 2865 28 TransformBlend::get_modified 0 1 404 351
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least as often as the result of get_blend() changes.
////////////////////////////////////////////////////////////////////
76
inline UpdateSeq TransformBlend::get_modified(Thread *current_thread) const;

1882 6 output 0 4 2865 22 TransformBlend::output 0 1 405 222
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void TransformBlend::output(ostream &out) const;

1883 5 write 0 4 2865 21 TransformBlend::write 0 1 406 221
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void TransformBlend::write(ostream &out, int indent_level) const;

1884 14 get_class_type 0 4 2865 30 TransformBlend::get_class_type 0 1 407 0
55
static TypeHandle TransformBlend::get_class_type(void);

1885 19 TransformBlendTable 0 4 2866 40 TransformBlendTable::TransformBlendTable 0 2 408 409 471
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
122
TransformBlendTable::TransformBlendTable(void);
TransformBlendTable::TransformBlendTable(TransformBlendTable const &copy);

1886 10 operator = 0 4 2866 31 TransformBlendTable::operator = 0 1 410 245
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
void TransformBlendTable::operator =(TransformBlendTable const &copy);

1887 14 get_num_blends 0 4 2866 35 TransformBlendTable::get_num_blends 0 1 411 817
// Filename: transformBlendTable.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_blends
//       Access: Published
//  Description: Returns the total number of different blend
//               combinations in the table.
////////////////////////////////////////////////////////////////////
59
inline int TransformBlendTable::get_num_blends(void) const;

1888 9 get_blend 0 4 2866 30 TransformBlendTable::get_blend 0 1 412 265
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_blend
//       Access: Published
//  Description: Returns the nth blend in the table.
////////////////////////////////////////////////////////////////////
73
inline TransformBlend const &TransformBlendTable::get_blend(int n) const;

1889 12 get_modified 0 4 2866 33 TransformBlendTable::get_modified 0 1 413 382
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least when any TransformBlends within the table
//               have changed.
////////////////////////////////////////////////////////////////////
81
inline UpdateSeq TransformBlendTable::get_modified(Thread *current_thread) const;

1890 9 set_blend 0 4 2866 30 TransformBlendTable::set_blend 0 1 414 311
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::set_blend
//       Access: Published
//  Description: Replaces the blend at the nth position with the
//               indicated value.
////////////////////////////////////////////////////////////////////
72
void TransformBlendTable::set_blend(int n, TransformBlend const &blend);

1891 12 remove_blend 0 4 2866 33 TransformBlendTable::remove_blend 0 1 415 271
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::remove_blend
//       Access: Published
//  Description: Removes the blend at the nth position.
////////////////////////////////////////////////////////////////////
46
void TransformBlendTable::remove_blend(int n);

1892 9 add_blend 0 4 2866 30 TransformBlendTable::add_blend 0 1 416 414
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::add_blend
//       Access: Published
//  Description: Adds a new blend to the table, and returns its
//               index number.  If there is already an identical blend
//               in the table, simply returns that number instead.
////////////////////////////////////////////////////////////////////
64
int TransformBlendTable::add_blend(TransformBlend const &blend);

1893 18 get_num_transforms 0 4 2866 39 TransformBlendTable::get_num_transforms 0 1 417 603
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of unique VertexTransform objects
//               represented in the table.  This will correspond to
//               the size of the TransformTable object that would
//               represent the same table.  This is also the same
//               limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transform_indices().
////////////////////////////////////////////////////////////////////
63
inline int TransformBlendTable::get_num_transforms(void) const;

1894 31 get_max_simultaneous_transforms 0 4 2866 52 TransformBlendTable::get_max_simultaneous_transforms 0 1 418 503
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_max_simultaneous_transforms
//       Access: Published
//  Description: Returns the maximum number of unique VertexTransform
//               objects that are applied to any one vertex
//               simultaneously.  This is the same limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transforms().
////////////////////////////////////////////////////////////////////
76
inline int TransformBlendTable::get_max_simultaneous_transforms(void) const;

1895 8 set_rows 0 4 2866 29 TransformBlendTable::set_rows 0 1 419 383
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::set_rows
//       Access: Published
//  Description: Specifies the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
////////////////////////////////////////////////////////////////////
67
inline void TransformBlendTable::set_rows(SparseArray const &rows);

1896 8 get_rows 0 4 2866 29 TransformBlendTable::get_rows 0 1 420 381
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_rows
//       Access: Published
//  Description: Returns the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
////////////////////////////////////////////////////////////////////
68
inline SparseArray const &TransformBlendTable::get_rows(void) const;

1897 11 modify_rows 0 4 2866 32 TransformBlendTable::modify_rows 0 1 421 458
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::modify_rows
//       Access: Published
//  Description: Returns a modifiable reference to the SparseArray
//               that specifies the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
////////////////////////////////////////////////////////////////////
59
inline SparseArray &TransformBlendTable::modify_rows(void);

1898 5 write 0 4 2866 26 TransformBlendTable::write 0 1 422 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
void TransformBlendTable::write(ostream &out, int indent_level) const;

1899 14 get_class_type 0 4 2866 35 TransformBlendTable::get_class_type 0 1 423 0
60
static TypeHandle TransformBlendTable::get_class_type(void);

1900 8 get_name 0 4 2867 22 VertexSlider::get_name 0 1 424 945
// Filename: vertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_name
//       Access: Published
//  Description: Returns the name of this particular slider.  Every
//               unique blend shape within a particular Geom must be
//               identified with a different name, which is shared by
//               the slider that controls it.
////////////////////////////////////////////////////////////////////
62
inline InternalName const *VertexSlider::get_name(void) const;

1901 10 get_slider 0 4 2867 24 VertexSlider::get_slider 0 1 425 0
55
virtual float VertexSlider::get_slider(void) const = 0;

1902 12 get_modified 0 4 2867 26 VertexSlider::get_modified 0 1 426 377
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_slider() changes.
////////////////////////////////////////////////////////////////////
74
inline UpdateSeq VertexSlider::get_modified(Thread *current_thread) const;

1903 6 output 0 4 2867 20 VertexSlider::output 0 1 427 229
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void VertexSlider::output(ostream &out) const;

1904 5 write 0 4 2867 19 VertexSlider::write 0 1 428 228
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void VertexSlider::write(ostream &out, int indent_level) const;

1905 14 get_class_type 0 4 2867 28 VertexSlider::get_class_type 0 1 429 0
53
static TypeHandle VertexSlider::get_class_type(void);

1906 11 SliderTable 0 4 2868 24 SliderTable::SliderTable 0 2 430 431 455
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
SliderTable::SliderTable(void);
SliderTable::SliderTable(SliderTable const &copy);

1907 10 operator = 0 4 2868 23 SliderTable::operator = 0 1 432 237
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
void SliderTable::operator =(SliderTable const &copy);

1908 13 is_registered 0 4 2868 26 SliderTable::is_registered 0 1 433 985
// Filename: sliderTable.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of sliders in
//               a SliderTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
////////////////////////////////////////////////////////////////////
51
inline bool SliderTable::is_registered(void) const;

1909 14 register_table 0 4 2868 27 SliderTable::register_table 0 1 434 912
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::register_table
//       Access: Published, Static
//  Description: Registers a SliderTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a SliderTable may no longer be
//               modified (although the individual VertexSlider
//               objects may modify their reported sliders).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////
98
static inline ConstPointerTo< SliderTable > SliderTable::register_table(SliderTable const *table);

1910 15 get_num_sliders 0 4 2868 28 SliderTable::get_num_sliders 0 1 435 271
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_num_sliders
//       Access: Published
//  Description: Returns the number of sliders in the table.
////////////////////////////////////////////////////////////////////
52
inline int SliderTable::get_num_sliders(void) const;

1911 10 get_slider 0 4 2868 23 SliderTable::get_slider 0 1 436 259
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_slider
//       Access: Published
//  Description: Returns the nth slider in the table.
////////////////////////////////////////////////////////////////////
64
inline VertexSlider const *SliderTable::get_slider(int n) const;

1912 15 get_slider_rows 0 4 2868 28 SliderTable::get_slider_rows 0 1 437 320
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_slider_rows
//       Access: Published
//  Description: Returns the set of rows (vertices) governed by the
//               nth slider in the table.
////////////////////////////////////////////////////////////////////
68
inline SparseArray const &SliderTable::get_slider_rows(int n) const;

1913 12 find_sliders 0 4 2868 25 SliderTable::find_sliders 0 1 438 416
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::find_sliders
//       Access: Published
//  Description: Returns a list of slider indices that represent the
//               list of sliders with the indicated name, or an empty
//               SparseArray if no slider in the table has that name.
////////////////////////////////////////////////////////////////////
84
inline SparseArray const &SliderTable::find_sliders(InternalName const *name) const;

1914 10 has_slider 0 4 2868 23 SliderTable::has_slider 0 1 439 329
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::has_slider
//       Access: Published
//  Description: Returns true if the table has at least one slider by
//               the indicated name, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool SliderTable::has_slider(InternalName const *name) const;

1915 8 is_empty 0 4 2868 21 SliderTable::is_empty 0 1 440 309
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_empty
//       Access: Published
//  Description: Returns true if the table has no sliders, false if it
//               has at least one.
////////////////////////////////////////////////////////////////////
46
inline bool SliderTable::is_empty(void) const;

1916 12 get_modified 0 4 2868 25 SliderTable::get_modified 0 1 441 560
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexSliders in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexSlider
//               changes.)
////////////////////////////////////////////////////////////////////
73
inline UpdateSeq SliderTable::get_modified(Thread *current_thread) const;

1917 10 set_slider 0 4 2868 23 SliderTable::set_slider 0 1 442 301
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::set_slider
//       Access: Published
//  Description: Replaces the nth slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
64
void SliderTable::set_slider(int n, VertexSlider const *slider);

1918 15 set_slider_rows 0 4 2868 28 SliderTable::set_slider_rows 0 1 443 327
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::set_slider_rows
//       Access: Published
//  Description: Replaces the rows affected by the nth slider.  Only
//               valid for unregistered tables.
////////////////////////////////////////////////////////////////////
66
void SliderTable::set_slider_rows(int n, SparseArray const &rows);

1919 13 remove_slider 0 4 2868 26 SliderTable::remove_slider 0 1 444 303
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::remove_slider
//       Access: Published
//  Description: Removes the nth slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
39
void SliderTable::remove_slider(int n);

1920 10 add_slider 0 4 2868 23 SliderTable::add_slider 0 1 445 373
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::add_slider
//       Access: Published
//  Description: Adds a new slider to the table, and returns the
//               index number of the new slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
81
int SliderTable::add_slider(VertexSlider const *slider, SparseArray const &rows);

1921 5 write 0 4 2868 18 SliderTable::write 0 1 446 218
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
void SliderTable::write(ostream &out) const;

1922 14 get_class_type 0 4 2868 27 SliderTable::get_class_type 0 1 447 0
52
static TypeHandle SliderTable::get_class_type(void);

1923 27 upcast_to_CopyOnWriteObject 0 12 2869 43 GeomVertexData::upcast_to_CopyOnWriteObject 0 1 505 47
upcast from GeomVertexData to CopyOnWriteObject
69
CopyOnWriteObject *GeomVertexData::upcast_to_CopyOnWriteObject(void);

1924 26 downcast_to_GeomVertexData 0 12 2860 45 CopyOnWriteObject::downcast_to_GeomVertexData 0 1 506 49
downcast from CopyOnWriteObject to GeomVertexData
68
GeomVertexData *CopyOnWriteObject::downcast_to_GeomVertexData(void);

1925 19 upcast_to_GeomEnums 0 12 2869 35 GeomVertexData::upcast_to_GeomEnums 0 1 507 39
upcast from GeomVertexData to GeomEnums
53
GeomEnums *GeomVertexData::upcast_to_GeomEnums(void);

1926 26 downcast_to_GeomVertexData 0 12 2833 37 GeomEnums::downcast_to_GeomVertexData 0 1 508 41
downcast from GeomEnums to GeomVertexData
60
GeomVertexData *GeomEnums::downcast_to_GeomVertexData(void);

1927 14 GeomVertexData 0 4 2869 30 GeomVertexData::GeomVertexData 0 3 448 449 450 1272
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Default Constructor
//       Access: Private
//  Description: Constructs an invalid object.  This is only used when
//               reading from the bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: This constructor copies all of the basic properties
//               of the source VertexData, like usage_hint and
//               animation tables, but does not copy the actual data,
//               and it allows you to specify a different format.
////////////////////////////////////////////////////////////////////
282
GeomVertexData::GeomVertexData(basic_string< char > const &name, GeomVertexFormat const *format, GeomEnums::UsageHint usage_hint);
GeomVertexData::GeomVertexData(GeomVertexData const &copy);
GeomVertexData::GeomVertexData(GeomVertexData const &copy, GeomVertexFormat const *format);

1928 10 operator = 0 4 2869 26 GeomVertexData::operator = 0 1 451 480
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexData that is
//               actively being used for rendering.
////////////////////////////////////////////////////////////////////
60
void GeomVertexData::operator =(GeomVertexData const &copy);

1929 15 ~GeomVertexData 0 4 2869 31 GeomVertexData::~GeomVertexData 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual GeomVertexData::~GeomVertexData(void);

1930 12 operator new 0 4 2869 28 GeomVertexData::operator new 0 1 452 0
134
inline void *GeomVertexData::operator new(unsigned int size);
inline void *GeomVertexData::operator new(unsigned int size, void *ptr);

1931 15 operator delete 0 4 2869 31 GeomVertexData::operator delete 0 0 0
116
inline void GeomVertexData::operator delete(void *ptr);
inline void GeomVertexData::operator delete(void *, void *);

1932 12 validate_ptr 0 4 2869 28 GeomVertexData::validate_ptr 0 0 0
65
static inline bool GeomVertexData::validate_ptr(void const *ptr);

1933 10 compare_to 0 4 2869 26 GeomVertexData::compare_to 0 1 453 326
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::compare_to
//       Access: Published
//  Description: Returns 0 if the two objects are equivalent, even if
//               they are not the same pointer.
////////////////////////////////////////////////////////////////////
66
int GeomVertexData::compare_to(GeomVertexData const &other) const;

1934 8 get_name 0 4 2869 24 GeomVertexData::get_name 0 1 454 866
// Filename: geomVertexData.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor, if any.
//               This name is reported on the PStats graph for vertex
//               computations.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GeomVertexData::get_name(void) const;

1935 8 set_name 0 4 2869 24 GeomVertexData::set_name 0 1 455 345
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_name
//       Access: Published
//  Description: Changes the name of the vertex data.  This name is
//               reported on the PStats graph for vertex computations.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_name(basic_string< char > const &name);

1936 14 get_usage_hint 0 4 2869 30 GeomVertexData::get_usage_hint 0 1 456 778
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that was passed to the
//               constructor, and which will be passed to each array
//               data object created initially, and arrays created as
//               the result of a convert_to() operation.  See
//               geomEnums.h.
//
//               However, each individual array may be replaced with a
//               different array object with an independent usage hint
//               specified, so there is no guarantee that the
//               individual arrays all have the same usage_hint.
////////////////////////////////////////////////////////////////////
71
inline GeomEnums::UsageHint GeomVertexData::get_usage_hint(void) const;

1937 14 set_usage_hint 0 4 2869 30 GeomVertexData::set_usage_hint 0 1 457 580
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this vertex data, and
//               for all of the arrays that share this data.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
69
void GeomVertexData::set_usage_hint(GeomEnums::UsageHint usage_hint);

1938 10 get_format 0 4 2869 26 GeomVertexData::get_format 0 1 458 318
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_format
//       Access: Published
//  Description: Returns a pointer to the GeomVertexFormat structure
//               that defines this data.
////////////////////////////////////////////////////////////////////
70
inline GeomVertexFormat const *GeomVertexData::get_format(void) const;

1939 10 set_format 0 4 2869 26 GeomVertexData::set_format 0 1 459 585
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_format
//       Access: Published
//  Description: Changes the format of the vertex data.  If the data
//               is not empty, this will implicitly change every row
//               to match the new format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_format(GeomVertexFormat const *format);

1940 10 has_column 0 4 2869 26 GeomVertexData::has_column 0 1 460 398
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::has_column
//       Access: Published
//  Description: Returns true if the data has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
////////////////////////////////////////////////////////////////////
71
inline bool GeomVertexData::has_column(InternalName const *name) const;

1941 12 get_num_rows 0 4 2869 28 GeomVertexData::get_num_rows 0 1 461 362
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored within all the
//               arrays.  All arrays store data for the same n
//               rows.
////////////////////////////////////////////////////////////////////
52
inline int GeomVertexData::get_num_rows(void) const;

1942 12 set_num_rows 0 4 2869 28 GeomVertexData::set_num_rows 0 1 462 1250
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows in all of
//               the various arrays (presumably by adding rows).
//
//               The new vertex data is initialized to 0, except for
//               the "color" column, which is initialized to (1, 1, 1,
//               1).
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               Although this method is Published, application code
//               only very rarely has any need to call it.  Instead,
//               you should use the GeomVertexWriter to build up the
//               rows in a GeomVertexData object automatically,
//               without need to explicitly set the number of
//               rows.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
48
inline bool GeomVertexData::set_num_rows(int n);

1943 20 unclean_set_num_rows 0 4 2869 36 GeomVertexData::unclean_set_num_rows 0 1 463 1085
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::unclean_set_num_rows
//       Access: Published
//  Description: This method behaves like set_num_rows(), except the
//               new data is not initialized.  Furthermore, after this
//               call, *any* of the data in the GeomVertexData may be
//               uninitialized, including the earlier rows.
//
//               This is intended for applications that are about to
//               completely fill the GeomVertexData with new data
//               anyway; it provides a tiny performance boost over
//               set_num_rows().
//
//               Although this method is Published, application code
//               only very rarely has any need to call it.  Instead,
//               you should use the GeomVertexWriter to build up the
//               rows in a GeomVertexData object automatically,
//               without need to explicitly set the number of
//               rows.
////////////////////////////////////////////////////////////////////
56
inline bool GeomVertexData::unclean_set_num_rows(int n);

1944 16 reserve_num_rows 0 4 2869 32 GeomVertexData::reserve_num_rows 0 1 464 606
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for n rows is
//               allocated, so that you may increase the number of
//               rows to n without causing a new memory allocation.
//               This is a performance optimization only; it is
//               especially useful when you know ahead of time that
//               you will be adding n rows to the data.
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexData::reserve_num_rows(int n);

1945 10 clear_rows 0 4 2869 26 GeomVertexData::clear_rows 0 1 465 554
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_rows
//       Access: Published
//  Description: Removes all of the rows from the arrays;
//               functionally equivalent to set_num_rows(0) (but
//               faster).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
38
void GeomVertexData::clear_rows(void);

1946 14 get_num_arrays 0 4 2869 30 GeomVertexData::get_num_arrays 0 1 466 376
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays stored within
//               the data.  This must match
//               get_format()->get_num_arrays().
////////////////////////////////////////////////////////////////////
54
inline int GeomVertexData::get_num_arrays(void) const;

1947 9 get_array 0 4 2869 25 GeomVertexData::get_array 0 1 467 412
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_array
//       Access: Published
//  Description: Returns a const pointer to the vertex data for the
//               indicated array, for application code to directly
//               examine (but not modify) the underlying vertex data.
////////////////////////////////////////////////////////////////////
84
inline ConstPointerTo< GeomVertexArrayData > GeomVertexData::get_array(int i) const;

1948 12 modify_array 0 4 2869 28 GeomVertexData::modify_array 0 1 468 757
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated vertex
//               array, so that application code may directly
//               manipulate the data.  You should avoid changing
//               the length of this array, since all of the arrays
//               should be kept in sync--use set_num_rows()
//               instead.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
76
inline PointerTo< GeomVertexArrayData > GeomVertexData::modify_array(int i);

1949 9 set_array 0 4 2869 25 GeomVertexData::set_array 0 1 469 667
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_array
//       Access: Published
//  Description: Replaces the indicated vertex data array with
//               a completely new array.  You should be careful that
//               the new array has the same length and format as the
//               old one, unless you know what you are doing.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
79
inline void GeomVertexData::set_array(int i, GeomVertexArrayData const *array);

1950 19 get_transform_table 0 4 2869 35 GeomVertexData::get_transform_table 0 1 470 868
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_table
//       Access: Published
//  Description: Returns a const pointer to the TransformTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the
//               graphics hardware (but also see
//               get_transform_blend_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformTable assigned (which implies the
//               vertices will not be animated by the graphics
//               hardware).
////////////////////////////////////////////////////////////////////
77
inline TransformTable const *GeomVertexData::get_transform_table(void) const;

1951 19 set_transform_table 0 4 2869 35 GeomVertexData::set_transform_table 0 1 471 708
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_table
//       Access: Published
//  Description: Replaces the TransformTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_index" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
70
void GeomVertexData::set_transform_table(TransformTable const *table);

1952 21 clear_transform_table 0 4 2869 37 GeomVertexData::clear_transform_table 0 1 472 401
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_table
//       Access: Published
//  Description: Sets the TransformTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables hardware-driven vertex animation.
////////////////////////////////////////////////////////////////////
56
inline void GeomVertexData::clear_transform_table(void);

1953 25 get_transform_blend_table 0 4 2869 41 GeomVertexData::get_transform_blend_table 0 1 473 816
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_blend_table
//       Access: Published
//  Description: Returns a const pointer to the TransformBlendTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the CPU
//               (but also see get_transform_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformBlendTable assigned (which implies
//               the vertices will not be animated by the CPU).
////////////////////////////////////////////////////////////////////
99
inline ConstPointerTo< TransformBlendTable > GeomVertexData::get_transform_blend_table(void) const;

1954 28 modify_transform_blend_table 0 4 2869 44 GeomVertexData::modify_transform_blend_table 0 1 474 665
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_transform_blend_table
//       Access: Published
//  Description: Returns a modifiable pointer to the current
//               TransformBlendTable on this vertex data, if any, or
//               NULL if there is not a TransformBlendTable.  See
//               get_transform_blend_table().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
84
PointerTo< TransformBlendTable > GeomVertexData::modify_transform_blend_table(void);

1955 25 set_transform_blend_table 0 4 2869 41 GeomVertexData::set_transform_blend_table 0 1 475 719
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_blend_table
//       Access: Published
//  Description: Replaces the TransformBlendTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_blend" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
81
void GeomVertexData::set_transform_blend_table(TransformBlendTable const *table);

1956 27 clear_transform_blend_table 0 4 2869 43 GeomVertexData::clear_transform_blend_table 0 1 476 407
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_blend_table
//       Access: Published
//  Description: Sets the TransformBlendTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables CPU-driven vertex animation.
////////////////////////////////////////////////////////////////////
62
inline void GeomVertexData::clear_transform_blend_table(void);

1957 16 get_slider_table 0 4 2869 32 GeomVertexData::get_slider_table 0 1 477 558
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_slider_table
//       Access: Published
//  Description: Returns a const pointer to the SliderTable
//               assigned to this data.  Vertices within the vertex
//               data will look up their morph offsets, if any, within
//               this table.
//
//               This will return NULL if the vertex data does not
//               have a SliderTable assigned.
////////////////////////////////////////////////////////////////////
71
inline SliderTable const *GeomVertexData::get_slider_table(void) const;

1958 16 set_slider_table 0 4 2869 32 GeomVertexData::set_slider_table 0 1 478 777
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_slider_table
//       Access: Published
//  Description: Replaces the SliderTable on this vertex
//               data with the indicated table.  There should be an
//               entry in this table for each kind of morph offset
//               defined in the vertex data.
//
//               The SliderTable object must have been registered
//               prior to setting it on the GeomVertexData.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_slider_table(SliderTable const *table);

1959 18 clear_slider_table 0 4 2869 34 GeomVertexData::clear_slider_table 0 1 479 392
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_slider_table
//       Access: Published
//  Description: Sets the SliderTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables morph (blend shape) animation.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexData::clear_slider_table(void);

1960 13 get_num_bytes 0 4 2869 29 GeomVertexData::get_num_bytes 0 1 480 332
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_bytes
//       Access: Published
//  Description: Returns the total number of bytes consumed by the
//               different arrays of the vertex data.
////////////////////////////////////////////////////////////////////
53
inline int GeomVertexData::get_num_bytes(void) const;

1961 12 get_modified 0 4 2869 28 GeomVertexData::get_modified 0 2 481 482 366
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex data is
//               modified.
////////////////////////////////////////////////////////////////////
103
inline UpdateSeq GeomVertexData::get_modified(Thread *current_thread = ((get_current_thread()))) const;

1962 16 request_resident 0 4 2869 32 GeomVertexData::request_resident 0 1 483 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
////////////////////////////////////////////////////////////////////
50
bool GeomVertexData::request_resident(void) const;

1963 9 copy_from 0 4 2869 25 GeomVertexData::copy_from 0 2 484 485 1099
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_from
//       Access: Published
//  Description: Copies all the data from the other array into the
//               corresponding data types in this array, by matching
//               data types name-by-name.
//
//               keep_data_objects specifies what to do when one or
//               more of the arrays can be copied without the need to
//               apply any conversion operation.  If it is true, the
//               original GeomVertexArrayData objects in this object
//               are retained, and their data arrays are copied
//               byte-by-byte from the source; if it is false, then the
//               GeomVertexArrayData objects are copied pointerwise
//               from the source.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
136
void GeomVertexData::copy_from(GeomVertexData const *source, bool keep_data_objects, Thread *current_thread = ((get_current_thread())));

1964 13 copy_row_from 0 4 2869 29 GeomVertexData::copy_row_from 0 1 486 643
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_row_from
//       Access: Published
//  Description: Copies a single row of the data from the other array
//               into the indicated row of this array.  In this case,
//               the source format must exactly match the destination
//               format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
119
void GeomVertexData::copy_row_from(int dest_row, GeomVertexData const *source, int source_row, Thread *current_thread);

1965 10 convert_to 0 4 2869 26 GeomVertexData::convert_to 0 1 487 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::convert_to
//       Access: Published
//  Description: Returns a new GeomVertexData that represents the same
//               contents as this one, with all data types matched up
//               name-by-name to the indicated new format.
////////////////////////////////////////////////////////////////////
102
ConstPointerTo< GeomVertexData > GeomVertexData::convert_to(GeomVertexFormat const *new_format) const;

1966 11 scale_color 0 4 2869 27 GeomVertexData::scale_color 0 2 488 489 1067
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table modified in-place to apply the indicated scale.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table that has been
//               scaled by the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
////////////////////////////////////////////////////////////////////
284
ConstPointerTo< GeomVertexData > GeomVertexData::scale_color(LVecBase4f const &color_scale) const;
ConstPointerTo< GeomVertexData > GeomVertexData::scale_color(LVecBase4f const &color_scale, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) const;

1967 9 set_color 0 4 2869 25 GeomVertexData::set_color 0 2 490 491 1054
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               data modified in-place with the new value.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table for which each
//               vertex has the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
////////////////////////////////////////////////////////////////////
268
ConstPointerTo< GeomVertexData > GeomVertexData::set_color(LVecBase4f const &color) const;
ConstPointerTo< GeomVertexData > GeomVertexData::set_color(LVecBase4f const &color, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) const;

1968 15 reverse_normals 0 4 2869 31 GeomVertexData::reverse_normals 0 1 492 577
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::reverse_normals
//       Access: Published
//  Description: Returns a new GeomVertexData object with the normal
//               data modified in-place, so that each lighting normal
//               is now facing in the opposite direction.
//
//               If the vertex data does not include a normal column,
//               this returns the original GeomVertexData object,
//               unchanged.
////////////////////////////////////////////////////////////////////
77
ConstPointerTo< GeomVertexData > GeomVertexData::reverse_normals(void) const;

1969 16 animate_vertices 0 4 2869 32 GeomVertexData::animate_vertices 0 1 493 1321
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::animate_vertices
//       Access: Published
//  Description: Returns a GeomVertexData that represents the results
//               of computing the vertex animation on the CPU for this
//               GeomVertexData.
//
//               If there is no CPU-defined vertex animation on this
//               object, this just returns the original object.
//
//               If there is vertex animation, but the VertexTransform
//               values have not changed since last time, this may
//               return the same pointer it returned previously.  Even
//               if the VertexTransform values have changed, it may
//               still return the same pointer, but with its contents
//               modified (this is preferred, since it allows the
//               graphics backend to update vertex buffers optimally).
//
//               If force is false, this method may return immediately
//               with stale data, if the vertex data is not completely
//               resident.  If force is true, this method will never
//               return stale data, but may block until the data is
//               available.
////////////////////////////////////////////////////////////////////
108
ConstPointerTo< GeomVertexData > GeomVertexData::animate_vertices(bool force, Thread *current_thread) const;

1970 23 clear_animated_vertices 0 4 2869 39 GeomVertexData::clear_animated_vertices 0 1 494 555
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_animated_vertices
//       Access: Published
//  Description: Removes the cache of animated vertices computed by a
//               previous call to animate_vertices() within the same
//               frame.  This will force the next call to
//               animate_vertices() to recompute these values from
//               scratch.  Normally it is not necessary to call this.
////////////////////////////////////////////////////////////////////
51
void GeomVertexData::clear_animated_vertices(void);

1971 18 transform_vertices 0 4 2869 34 GeomVertexData::transform_vertices 0 2 495 496 949
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform matrix to all of the
//               vertices in the GeomVertexData.  The transform is
//               applied to all "point" and "vector" type columns
//               described in the format.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform matrix to all of the
//               vertices from begin_row up to but not including
//               end_row.  The transform is applied to all "point" and
//               "vector" type columns described in the format.
////////////////////////////////////////////////////////////////////
153
void GeomVertexData::transform_vertices(LMatrix4f const &mat);
void GeomVertexData::transform_vertices(LMatrix4f const &mat, int begin_row, int end_row);

1972 14 replace_column 0 4 2869 30 GeomVertexData::replace_column 0 1 497 776
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::replace_column
//       Access: Published
//  Description: Returns a new GeomVertexData object, suitable for
//               modification, with the indicated data type replaced
//               with a new table filled with undefined values.  The
//               new table will be added as a new array; if the old
//               table was interleaved with a previous array, the
//               previous array will not be repacked.
//
//               If num_components is 0, the indicated name is simply
//               removed from the type, without replacing it with
//               anything else.
////////////////////////////////////////////////////////////////////
172
PointerTo< GeomVertexData > GeomVertexData::replace_column(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) const;

1973 6 output 0 4 2869 22 GeomVertexData::output 0 1 498 222
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void GeomVertexData::output(ostream &out) const;

1974 5 write 0 4 2869 21 GeomVertexData::write 0 2 499 500 221
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void GeomVertexData::write(ostream &out, int indent_level = (0)) const;

1975 15 describe_vertex 0 4 2869 31 GeomVertexData::describe_vertex 0 1 501 324
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::describe_vertex
//       Access: Published
//  Description: Writes a verbose, human-friendly description of the
//               indicated vertex number.
////////////////////////////////////////////////////////////////////
66
void GeomVertexData::describe_vertex(ostream &out, int row) const;

1976 11 clear_cache 0 4 2869 27 GeomVertexData::clear_cache 0 1 502 556
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
////////////////////////////////////////////////////////////////////
39
void GeomVertexData::clear_cache(void);

1977 17 clear_cache_stage 0 4 2869 33 GeomVertexData::clear_cache_stage 0 1 503 608
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
45
void GeomVertexData::clear_cache_stage(void);

1978 14 get_class_type 0 4 2869 30 GeomVertexData::get_class_type 0 1 504 0
55
static TypeHandle GeomVertexData::get_class_type(void);

1979 22 AnimateVerticesRequest 0 4 2870 46 AnimateVerticesRequest::AnimateVerticesRequest 0 1 509 769
// Filename: animateVerticesRequest.I
// Created by:  pratt (20Nov07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimateVerticesRequest::Constructor
//       Access: Published
//  Description: Create a new AnimateVerticesRequest.
////////////////////////////////////////////////////////////////////
88
inline AnimateVerticesRequest::AnimateVerticesRequest(GeomVertexData *geom_vertex_data);

1980 8 is_ready 0 4 2870 32 AnimateVerticesRequest::is_ready 0 1 510 322
////////////////////////////////////////////////////////////////////
//     Function: AnimateVerticesRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.
////////////////////////////////////////////////////////////////////
57
inline bool AnimateVerticesRequest::is_ready(void) const;

1981 14 get_class_type 0 4 2870 38 AnimateVerticesRequest::get_class_type 0 1 511 0
63
static TypeHandle AnimateVerticesRequest::get_class_type(void);

1982 23 ~AnimateVerticesRequest 0 4 2870 47 AnimateVerticesRequest::~AnimateVerticesRequest 0 0 0
54
AnimateVerticesRequest::~AnimateVerticesRequest(void);

1983 14 get_class_type 0 4 2872 28 SavedContext::get_class_type 0 1 512 0
53
static TypeHandle SavedContext::get_class_type(void);

1984 13 ~SavedContext 0 4 2872 27 SavedContext::~SavedContext 0 0 0
34
SavedContext::~SavedContext(void);

1985 22 upcast_to_SavedContext 0 12 2874 37 BufferContext::upcast_to_SavedContext 0 1 518 41
upcast from BufferContext to SavedContext
58
SavedContext *BufferContext::upcast_to_SavedContext(void);

1986 25 downcast_to_BufferContext 0 12 2872 39 SavedContext::downcast_to_BufferContext 0 1 519 43
downcast from SavedContext to BufferContext
61
BufferContext *SavedContext::downcast_to_BufferContext(void);

1987 14 ~BufferContext 0 4 2874 29 BufferContext::~BufferContext 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual BufferContext::~BufferContext(void);

1988 19 get_data_size_bytes 0 4 2874 34 BufferContext::get_data_size_bytes 0 1 513 1039
// Filename: bufferContext.I
// Created by:  drose (16Mar06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_data_size_bytes
//       Access: Public
//  Description: Returns the number of bytes previously reported for
//               the data object.  This is used to track changes in
//               the data object's allocated size; if it changes from
//               this, we need to create a new buffer.  This is also
//               used to track memory utilization in PStats.
////////////////////////////////////////////////////////////////////
67
inline unsigned int BufferContext::get_data_size_bytes(void) const;

1989 12 get_modified 0 4 2874 27 BufferContext::get_modified 0 1 514 320
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_modified
//       Access: Public
//  Description: Returns the UpdateSeq that was recorded the last time
//               mark_loaded() was called.
////////////////////////////////////////////////////////////////////
57
inline UpdateSeq BufferContext::get_modified(void) const;

1990 10 get_active 0 4 2874 25 BufferContext::get_active 0 1 515 382
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_active
//       Access: Public
//  Description: Returns the active flag associated with this object.
//               An object is considered "active" if it was rendered
//               in the current frame.
////////////////////////////////////////////////////////////////////
50
inline bool BufferContext::get_active(void) const;

1991 12 get_resident 0 4 2874 27 BufferContext::get_resident 0 1 516 396
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_resident
//       Access: Public
//  Description: Returns the resident flag associated with this
//               object.  An object is considered "resident" if it
//               appears to be resident in texture memory.
////////////////////////////////////////////////////////////////////
52
inline bool BufferContext::get_resident(void) const;

1992 14 get_class_type 0 4 2874 29 BufferContext::get_class_type 0 1 517 0
54
static TypeHandle BufferContext::get_class_type(void);

1993 27 upcast_to_CopyOnWriteObject 0 12 2875 42 GeomPrimitive::upcast_to_CopyOnWriteObject 0 1 590 46
upcast from GeomPrimitive to CopyOnWriteObject
68
CopyOnWriteObject *GeomPrimitive::upcast_to_CopyOnWriteObject(void);

1994 25 downcast_to_GeomPrimitive 0 12 2860 44 CopyOnWriteObject::downcast_to_GeomPrimitive 0 1 591 48
downcast from CopyOnWriteObject to GeomPrimitive
66
GeomPrimitive *CopyOnWriteObject::downcast_to_GeomPrimitive(void);

1995 19 upcast_to_GeomEnums 0 12 2875 34 GeomPrimitive::upcast_to_GeomEnums 0 1 592 38
upcast from GeomPrimitive to GeomEnums
52
GeomEnums *GeomPrimitive::upcast_to_GeomEnums(void);

1996 25 downcast_to_GeomPrimitive 0 12 2833 36 GeomEnums::downcast_to_GeomPrimitive 0 1 593 40
downcast from GeomEnums to GeomPrimitive
58
GeomPrimitive *GeomEnums::downcast_to_GeomPrimitive(void);

1997 10 operator = 0 4 2875 25 GeomPrimitive::operator = 0 1 520 478
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomPrimitive that is
//               actively being used for rendering.
////////////////////////////////////////////////////////////////////
58
void GeomPrimitive::operator =(GeomPrimitive const &copy);

1998 14 ~GeomPrimitive 0 4 2875 29 GeomPrimitive::~GeomPrimitive 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual GeomPrimitive::~GeomPrimitive(void);

1999 12 operator new 0 4 2875 27 GeomPrimitive::operator new 0 1 521 0
132
inline void *GeomPrimitive::operator new(unsigned int size);
inline void *GeomPrimitive::operator new(unsigned int size, void *ptr);

2000 15 operator delete 0 4 2875 30 GeomPrimitive::operator delete 0 0 0
114
inline void GeomPrimitive::operator delete(void *ptr);
inline void GeomPrimitive::operator delete(void *, void *);

2001 12 validate_ptr 0 4 2875 27 GeomPrimitive::validate_ptr 0 0 0
64
static inline bool GeomPrimitive::validate_ptr(void const *ptr);

2002 9 make_copy 0 4 2875 24 GeomPrimitive::make_copy 0 1 522 0
76
virtual PointerTo< GeomPrimitive > GeomPrimitive::make_copy(void) const = 0;

2003 18 get_primitive_type 0 4 2875 33 GeomPrimitive::get_primitive_type 0 1 523 0
83
virtual GeomEnums::PrimitiveType GeomPrimitive::get_primitive_type(void) const = 0;

2004 18 get_geom_rendering 0 4 2875 33 GeomPrimitive::get_geom_rendering 0 1 524 397
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_geom_rendering
//       Access: Published, Virtual
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this primitive.
////////////////////////////////////////////////////////////////////
58
virtual int GeomPrimitive::get_geom_rendering(void) const;

2005 15 get_shade_model 0 4 2875 30 GeomPrimitive::get_shade_model 0 1 525 905
// Filename: geomPrimitive.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_shade_model
//       Access: Published
//  Description: Returns the ShadeModel hint for this primitive.
//               This is intended as a hint to the renderer to tell it
//               how the per-vertex colors and normals are applied.
////////////////////////////////////////////////////////////////////
72
inline GeomEnums::ShadeModel GeomPrimitive::get_shade_model(void) const;

2006 15 set_shade_model 0 4 2875 30 GeomPrimitive::set_shade_model 0 1 526 865
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_shade_model
//       Access: Published
//  Description: Changes the ShadeModel hint for this primitive.
//               This is different from the ShadeModelAttrib that
//               might also be applied from the scene graph.  This
//               does not affect the shade model that is in effect
//               when rendering, but rather serves as a hint to the
//               renderer to tell it how the per-vertex colors and
//               normals on this primitive are applied.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
78
inline void GeomPrimitive::set_shade_model(GeomEnums::ShadeModel shade_model);

2007 14 get_usage_hint 0 4 2875 29 GeomPrimitive::get_usage_hint 0 1 527 921
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint for this primitive.  See
//               geomEnums.h.  This has nothing to do with the usage
//               hint associated with the primitive's vertices; this
//               only specifies how often the vertex indices that
//               define the primitive will be modified.
//
//               It is perfectly legal (and, in fact, common) for a
//               GeomPrimitive to have UH_static on itself, while
//               referencing vertex data with UH_dynamic.  This means
//               that the vertices themselves will be animated, but
//               the primitive will always reference the same set of
//               vertices from the pool.
////////////////////////////////////////////////////////////////////
70
inline GeomEnums::UsageHint GeomPrimitive::get_usage_hint(void) const;

2008 14 set_usage_hint 0 4 2875 29 GeomPrimitive::set_usage_hint 0 1 528 512
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this primitive.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
68
void GeomPrimitive::set_usage_hint(GeomEnums::UsageHint usage_hint);

2009 14 get_index_type 0 4 2875 29 GeomPrimitive::get_index_type 0 1 529 342
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_index_type
//       Access: Public
//  Description: Returns the numeric type of the index column.
//               Normally, this will be either NT_uint16 or NT_uint32.
////////////////////////////////////////////////////////////////////
72
inline GeomEnums::NumericType GeomPrimitive::get_index_type(void) const;

2010 14 set_index_type 0 4 2875 29 GeomPrimitive::set_index_type 0 1 530 939
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_index_type
//       Access: Published
//  Description: Changes the numeric type of the index column.
//               Normally, this should be either NT_uint16 or
//               NT_uint32.
//
//               The index type must be large enough to include all of
//               the index values in the primitive.  It may be
//               automatically elevated, if necessary, to a larger
//               index type, by a subsequent call to add_index() that
//               names an index value that does not fit in the index
//               type you specify.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
70
void GeomPrimitive::set_index_type(GeomEnums::NumericType index_type);

2011 12 is_composite 0 4 2875 27 GeomPrimitive::is_composite 0 1 531 816
// The following published methods are provided for safe, high-level
// iteration through the vertices and sub-primitives within the
// GeomPrimitive class.  These work correctly regardless of the
// primitive type and without depending on knowledge about the way
// primitives' lengths are encoded.  You can also safely build up a
// composite primitive using these methods.

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_composite
//       Access: Published
//  Description: Returns true if the primitive is a composite
//               primitive such as a tristrip or trifan, or false if
//               it is a fundamental primitive such as a collection of
//               triangles.
////////////////////////////////////////////////////////////////////
52
inline bool GeomPrimitive::is_composite(void) const;

2012 10 is_indexed 0 4 2875 25 GeomPrimitive::is_indexed 0 1 532 683
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_indexed
//       Access: Published
//  Description: Returns true if the primitive is indexed, false
//               otherwise.  An indexed primitive stores a table of
//               index numbers into its GeomVertexData, so that it can
//               reference the vertices in any order.  A nonindexed
//               primitive, on the other hand, stores only the first
//               vertex number and number of vertices used, so that it
//               can only reference the vertices consecutively.
////////////////////////////////////////////////////////////////////
50
inline bool GeomPrimitive::is_indexed(void) const;

2013 16 get_first_vertex 0 4 2875 31 GeomPrimitive::get_first_vertex 0 1 533 536
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_first_vertex
//       Access: Published
//  Description: Returns the first vertex number referenced by the
//               primitive.  This is particularly important in the
//               case of a nonindexed primitive, in which case
//               get_first_vertex() and get_num_vertices() completely
//               define the extent of the vertex range.
////////////////////////////////////////////////////////////////////
55
inline int GeomPrimitive::get_first_vertex(void) const;

2014 16 get_num_vertices 0 4 2875 31 GeomPrimitive::get_num_vertices 0 1 534 321
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices used by all the
//               primitives in this object.
////////////////////////////////////////////////////////////////////
55
inline int GeomPrimitive::get_num_vertices(void) const;

2015 10 get_vertex 0 4 2875 25 GeomPrimitive::get_vertex 0 1 535 267
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_vertex
//       Access: Published
//  Description: Returns the ith vertex index in the table.
////////////////////////////////////////////////////////////////////
50
inline int GeomPrimitive::get_vertex(int i) const;

2016 10 add_vertex 0 4 2875 25 GeomPrimitive::add_vertex 0 1 536 780
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the list of vertex
//               indices used by the graphics primitive type.  To
//               define a primitive, you must call add_vertex() for
//               each vertex of the new primitive, and then call
//               close_primitive() after you have specified the last
//               vertex of each primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
43
void GeomPrimitive::add_vertex(int vertex);

2017 12 add_vertices 0 4 2875 27 GeomPrimitive::add_vertices 0 3 537 538 539 769
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////
194
inline void GeomPrimitive::add_vertices(int v1, int v2);
inline void GeomPrimitive::add_vertices(int v1, int v2, int v3);
inline void GeomPrimitive::add_vertices(int v1, int v2, int v3, int v4);

2018 24 add_consecutive_vertices 0 4 2875 39 GeomPrimitive::add_consecutive_vertices 0 1 540 531
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_consecutive_vertices
//       Access: Published
//  Description: Adds a consecutive sequence of vertices, beginning at
//               start, to the primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
74
void GeomPrimitive::add_consecutive_vertices(int start, int num_vertices);

2019 17 add_next_vertices 0 4 2875 32 GeomPrimitive::add_next_vertices 0 1 541 621
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_next_vertices
//       Access: Published
//  Description: Adds the next n vertices in sequence, beginning from
//               the last vertex added to the primitive + 1.
//
//               This is most useful when you are building up a
//               primitive and a GeomVertexData at the same time, and
//               you just want the primitive to reference the first n
//               vertices from the data, then the next n, and so on.
////////////////////////////////////////////////////////////////////
56
void GeomPrimitive::add_next_vertices(int num_vertices);

2020 20 reserve_num_vertices 0 4 2875 35 GeomPrimitive::reserve_num_vertices 0 1 542 1259
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::reserve_num_vertices
//       Access: Published
//  Description: This ensures that enough memory space for n vertices
//               is allocated, so that you may increase the number of
//               vertices to n without causing a new memory
//               allocation.  This is a performance optimization only;
//               it is especially useful when you know ahead of time
//               that you will be adding n vertices to the primitive.
//
//               Note that the total you specify here should also
//               include implicit vertices which may be added at each
//               close_primitive() call, according to
//               get_num_unused_vertices_per_primitive().
//
//               Note also that making this call will implicitly make
//               the primitive indexed if it is not already, which
//               could result in a performance *penalty*.  If you
//               would prefer not to lose the nonindexed nature of
//               your existing GeomPrimitives, check is_indexed()
//               before making this call.
////////////////////////////////////////////////////////////////////
59
void GeomPrimitive::reserve_num_vertices(int num_vertices);

2021 15 close_primitive 0 4 2875 30 GeomPrimitive::close_primitive 0 1 543 654
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::close_primitive
//       Access: Published
//  Description: Indicates that the previous n calls to add_vertex(),
//               since the last call to close_primitive(), have fully
//               defined a new primitive.  Returns true if successful,
//               false otherwise.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
42
bool GeomPrimitive::close_primitive(void);

2022 14 clear_vertices 0 4 2875 29 GeomPrimitive::clear_vertices 0 1 544 527
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::clear_vertices
//       Access: Published
//  Description: Removes all of the vertices and primitives from the
//               object, so they can be re-added.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
41
void GeomPrimitive::clear_vertices(void);

2023 15 offset_vertices 0 4 2875 30 GeomPrimitive::offset_vertices 0 1 545 508
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::offset_vertices
//       Access: Published
//  Description: Adds the indicated offset to all vertices used by the
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
48
void GeomPrimitive::offset_vertices(int offset);

2024 15 make_nonindexed 0 4 2875 30 GeomPrimitive::make_nonindexed 0 1 546 390
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_nonindexed
//       Access: Published
//  Description: Converts the primitive from indexed to nonindexed by
//               duplicating vertices as necessary into the indicated
//               dest GeomVertexData.
////////////////////////////////////////////////////////////////////
88
void GeomPrimitive::make_nonindexed(GeomVertexData *dest, GeomVertexData const *source);

2025 13 pack_vertices 0 4 2875 28 GeomPrimitive::pack_vertices 0 1 547 383
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::pack_vertices
//       Access: Published
//  Description: Packs the vertices used by the primitive from the
//               indicated source array onto the end of the indicated
//               destination array.
////////////////////////////////////////////////////////////////////
86
void GeomPrimitive::pack_vertices(GeomVertexData *dest, GeomVertexData const *source);

2026 12 make_indexed 0 4 2875 27 GeomPrimitive::make_indexed 0 1 548 817
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_indexed
//       Access: Published
//  Description: Converts the primitive from nonindexed form to
//               indexed form.  This will simply create an index table
//               that is numbered consecutively from
//               get_first_vertex(); it does not automatically
//               collapse together identical vertices that may have
//               been split apart by a previous call to
//               make_nonindexed().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
39
void GeomPrimitive::make_indexed(void);

2027 18 get_num_primitives 0 4 2875 33 GeomPrimitive::get_num_primitives 0 1 549 372
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_primitives
//       Access: Published
//  Description: Returns the number of individual primitives stored
//               within this object.  All primitives are the same
//               type.
////////////////////////////////////////////////////////////////////
57
inline int GeomPrimitive::get_num_primitives(void) const;

2028 19 get_primitive_start 0 4 2875 34 GeomPrimitive::get_primitive_start 0 1 550 800
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_start
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive starts.  
//
//               If i is one more than the highest valid primitive
//               vertex, the return value will be one more than the
//               last valid vertex.  Thus, it is generally true that
//               the vertices used by a particular primitive i are the
//               set get_primitive_start(n) <= vi <
//               get_primitive_start(n + 1) (although this range also
//               includes the unused vertices between primitives).
////////////////////////////////////////////////////////////////////
52
int GeomPrimitive::get_primitive_start(int n) const;

2029 17 get_primitive_end 0 4 2875 32 GeomPrimitive::get_primitive_end 0 1 551 408
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_end
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive ends.  This is one past the last
//               valid element for the nth primitive.
////////////////////////////////////////////////////////////////////
50
int GeomPrimitive::get_primitive_end(int n) const;

2030 26 get_primitive_num_vertices 0 4 2875 41 GeomPrimitive::get_primitive_num_vertices 0 1 552 406
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_vertices
//       Access: Published
//  Description: Returns the number of vertices used by the nth
//               primitive.  This is the same thing as
//               get_primitive_end(n) - get_primitive_start(n).
////////////////////////////////////////////////////////////////////
59
int GeomPrimitive::get_primitive_num_vertices(int n) const;

2031 13 get_num_faces 0 4 2875 28 GeomPrimitive::get_num_faces 0 1 553 393
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by all the
//               primitives in this object.
////////////////////////////////////////////////////////////////////
52
inline int GeomPrimitive::get_num_faces(void) const;

2032 23 get_primitive_num_faces 0 4 2875 38 GeomPrimitive::get_primitive_num_faces 0 1 554 402
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by the nth
//               primitive in this object.
////////////////////////////////////////////////////////////////////
63
inline int GeomPrimitive::get_primitive_num_faces(int n) const;

2033 14 get_min_vertex 0 4 2875 29 GeomPrimitive::get_min_vertex 0 1 555 328
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by all
//               the primitives in this object.
////////////////////////////////////////////////////////////////////
53
inline int GeomPrimitive::get_min_vertex(void) const;

2034 24 get_primitive_min_vertex 0 4 2875 39 GeomPrimitive::get_primitive_min_vertex 0 1 556 337
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by the
//               nth primitive in this object.
////////////////////////////////////////////////////////////////////
57
int GeomPrimitive::get_primitive_min_vertex(int n) const;

2035 14 get_max_vertex 0 4 2875 29 GeomPrimitive::get_max_vertex 0 1 557 328
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by all
//               the primitives in this object.
////////////////////////////////////////////////////////////////////
53
inline int GeomPrimitive::get_max_vertex(void) const;

2036 24 get_primitive_max_vertex 0 4 2875 39 GeomPrimitive::get_primitive_max_vertex 0 1 558 337
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by the
//               nth primitive in this object.
////////////////////////////////////////////////////////////////////
57
int GeomPrimitive::get_primitive_max_vertex(int n) const;

2037 9 decompose 0 4 2875 24 GeomPrimitive::decompose 0 1 559 795
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::decompose
//       Access: Published
//  Description: Decomposes a complex primitive type into a simpler
//               primitive type, for instance triangle strips to
//               triangles, and returns a pointer to the new primitive
//               definition.  If the decomposition cannot be
//               performed, this might return the original object.
//
//               This method is useful for application code that wants
//               to iterate through the set of triangles on the
//               primitive without having to write handlers for each
//               possible kind of primitive type.
////////////////////////////////////////////////////////////////////
69
ConstPointerTo< GeomPrimitive > GeomPrimitive::decompose(void) const;

2038 6 rotate 0 4 2875 21 GeomPrimitive::rotate 0 1 560 739
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::rotate
//       Access: Published
//  Description: Returns a new primitive with the shade_model reversed
//               (if it is flat shaded), if possible.  If the
//               primitive type cannot be rotated, returns the
//               original primitive, unrotated.
//
//               If the current shade_model indicates
//               flat_vertex_last, this should bring the last vertex
//               to the first position; if it indicates
//               flat_vertex_first, this should bring the first vertex
//               to the last position.
////////////////////////////////////////////////////////////////////
66
ConstPointerTo< GeomPrimitive > GeomPrimitive::rotate(void) const;

2039 10 doubleside 0 4 2875 25 GeomPrimitive::doubleside 0 1 561 842
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::doubleside
//       Access: Published
//  Description: Duplicates triangles in the primitive so that each
//               triangle is back-to-back with another triangle facing
//               in the opposite direction.  Note that this doesn't
//               affect vertex normals, so this operation alone won't
//               work in the presence of lighting (but see
//               SceneGraphReducer::doubleside()).
//
//               Also see CullFaceAttrib, which can enable rendering
//               of both sides of a triangle without having to
//               duplicate it (but which doesn't necessarily work in
//               the presence of lighting).
////////////////////////////////////////////////////////////////////
70
ConstPointerTo< GeomPrimitive > GeomPrimitive::doubleside(void) const;

2040 7 reverse 0 4 2875 22 GeomPrimitive::reverse 0 1 562 823
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::reverse
//       Access: Published
//  Description: Reverses the winding order in the primitive so that
//               each triangle is facing in the opposite direction it
//               was originally.  Note that this doesn't affect vertex
//               normals, so this operation alone won't work in the
//               presence of lighting (but see
//               SceneGraphReducer::reverse()).
//
//               Also see CullFaceAttrib, which can change the visible
//               direction of a triangle without having to duplicate
//               it (but which doesn't necessarily work in the
//               presence of lighting).
////////////////////////////////////////////////////////////////////
67
ConstPointerTo< GeomPrimitive > GeomPrimitive::reverse(void) const;

2041 17 match_shade_model 0 4 2875 32 GeomPrimitive::match_shade_model 0 1 563 672
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::match_shade_model
//       Access: Published
//  Description: Returns a new primitive that is compatible with the
//               indicated shade model, if possible, or NULL if this
//               is not possible.
//
//               In most cases, this will return either NULL or the
//               original primitive.  In the case of a
//               SM_flat_first_vertex vs. a SM_flat_last_vertex (or
//               vice-versa), however, it will return a rotated
//               primitive.
////////////////////////////////////////////////////////////////////
106
ConstPointerTo< GeomPrimitive > GeomPrimitive::match_shade_model(GeomEnums::ShadeModel shade_model) const;

2042 11 make_points 0 4 2875 26 GeomPrimitive::make_points 0 1 564 519
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_points
//       Access: Published
//  Description: Returns a new GeomPoints primitive that represents
//               each of the vertices in the original primitive,
//               rendered exactly once.  If the original primitive is
//               already a GeomPoints primitive, returns the original
//               primitive unchanged.
////////////////////////////////////////////////////////////////////
71
ConstPointerTo< GeomPrimitive > GeomPrimitive::make_points(void) const;

2043 13 get_num_bytes 0 4 2875 28 GeomPrimitive::get_num_bytes 0 1 565 322
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the primitive
//               and its index table(s).
////////////////////////////////////////////////////////////////////
45
int GeomPrimitive::get_num_bytes(void) const;

2044 19 get_data_size_bytes 0 4 2875 34 GeomPrimitive::get_data_size_bytes 0 1 566 308
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the vertices
//               array.
////////////////////////////////////////////////////////////////////
58
inline int GeomPrimitive::get_data_size_bytes(void) const;

2045 12 get_modified 0 4 2875 27 GeomPrimitive::get_modified 0 1 567 372
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex index array is
//               modified.
////////////////////////////////////////////////////////////////////
57
inline UpdateSeq GeomPrimitive::get_modified(void) const;

2046 16 request_resident 0 4 2875 31 GeomPrimitive::request_resident 0 1 568 451
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::request_resident
//       Access: Published
//  Description: Returns true if the primitive data is currently
//               resident in memory.  If this returns false, the
//               primitive data will be brought back into memory
//               shortly; try again later.
////////////////////////////////////////////////////////////////////
49
bool GeomPrimitive::request_resident(void) const;

2047 11 check_valid 0 4 2875 26 GeomPrimitive::check_valid 0 1 569 455
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::check_valid
//       Access: Published
//  Description: Verifies that the primitive only references vertices
//               that actually exist within the indicated
//               GeomVertexData.  Returns true if the primitive
//               appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
80
inline bool GeomPrimitive::check_valid(GeomVertexData const *vertex_data) const;

2048 6 output 0 4 2875 21 GeomPrimitive::output 0 1 570 230
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void GeomPrimitive::output(ostream &out) const;

2049 5 write 0 4 2875 20 GeomPrimitive::write 0 1 571 229
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
72
virtual void GeomPrimitive::write(ostream &out, int indent_level) const;

2050 12 get_vertices 0 4 2875 27 GeomPrimitive::get_vertices 0 1 572 1361
// These public methods are not intended for high-level usage.  They
// are public so that low-level code that absolutely needs fast
// access to the primitive data can get to it, but using them
// requires knowledge about how the component primitives are encoded
// within the GeomPrimitive class, and it's easy to screw something
// up.  Also, if too many code samples depend on this internal
// knowledge, it may make it difficult to extend this class later.
// It is recommended that application-level code use the above
// interfaces instead.

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_vertices
//       Access: Published
//  Description: Returns a const pointer to the vertex index array so
//               application code can read it directly.  This might
//               return NULL if the primitive is nonindexed.  Do not
//               attempt to modify the returned array; use
//               modify_vertices() or set_vertices() for this.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
85
inline ConstPointerTo< GeomVertexArrayData > GeomPrimitive::get_vertices(void) const;

2051 15 modify_vertices 0 4 2875 30 GeomPrimitive::modify_vertices 0 2 573 574 1321
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::modify_vertices
//       Access: Published
//  Description: Returns a modifiable pointer to the vertex index
//               list, so application code can directly fiddle with
//               this data.  Use with caution, since there are no
//               checks that the data will be left in a stable state.
//
//               If this is called on a nonindexed primitive, it will
//               implicitly be converted to an indexed primitive.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
89
PointerTo< GeomVertexArrayData > GeomPrimitive::modify_vertices(int num_vertices = (-1));

2052 12 set_vertices 0 4 2875 27 GeomPrimitive::set_vertices 0 2 575 576 1115
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_vertices
//       Access: Published
//  Description: Completely replaces the vertex index list with a new
//               table.  Chances are good that you should also replace
//               the ends list with set_ends() at the same time.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
95
void GeomPrimitive::set_vertices(GeomVertexArrayData const *vertices, int num_vertices = (-1));

2053 23 set_nonindexed_vertices 0 4 2875 38 GeomPrimitive::set_nonindexed_vertices 0 1 577 808
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_nonindexed_vertices
//       Access: Published
//  Description: Sets the primitive up as a nonindexed primitive,
//               using the indicated vertex range.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
80
void GeomPrimitive::set_nonindexed_vertices(int first_vertex, int num_vertices);

2054 16 get_index_stride 0 4 2875 31 GeomPrimitive::get_index_stride 0 1 578 642
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_index_stride
//       Access: Published
//  Description: A convenience function to return the gap between
//               successive index numbers, in bytes, of the index
//               data.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
55
inline int GeomPrimitive::get_index_stride(void) const;

2055 8 get_ends 0 4 2875 23 GeomPrimitive::get_ends 0 1 579 936
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_ends
//       Access: Published
//  Description: Returns a const pointer to the primitive ends
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               modify_ends() or set_ends() for this.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
70
inline ConstPointerToArray< int > GeomPrimitive::get_ends(void) const;

2056 11 modify_ends 0 4 2875 26 GeomPrimitive::modify_ends 0 1 580 1159
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::modify_ends
//       Access: Published
//  Description: Returns a modifiable pointer to the primitive ends
//               array, so application code can directly fiddle with
//               this data.  Use with caution, since there are no
//               checks that the data will be left in a stable state.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
55
PointerToArray< int > GeomPrimitive::modify_ends(void);

2057 8 set_ends 0 4 2875 23 GeomPrimitive::set_ends 0 1 581 1117
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_ends
//       Access: Published
//  Description: Completely replaces the primitive ends array with
//               a new table.  Chances are good that you should also
//               replace the vertices list with set_vertices() at the
//               same time.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
62
void GeomPrimitive::set_ends(ConstPointerToArray< int > ends);

2058 8 get_mins 0 4 2875 23 GeomPrimitive::get_mins 0 1 582 827
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_mins
//       Access: Published
//  Description: Returns a const pointer to the primitive mins
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               set_minmax() for this.
//
//               Note that simple primitive types, like triangles, do
//               not have a mins array.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
81
inline ConstPointerTo< GeomVertexArrayData > GeomPrimitive::get_mins(void) const;

2059 8 get_maxs 0 4 2875 23 GeomPrimitive::get_maxs 0 1 583 818
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_maxs
//       Access: Published
//  Description: Returns a const pointer to the primitive maxs
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               set_minmax().
//
//               Note that simple primitive types, like triangles, do
//               not have a maxs array.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
81
inline ConstPointerTo< GeomVertexArrayData > GeomPrimitive::get_maxs(void) const;

2060 10 set_minmax 0 4 2875 25 GeomPrimitive::set_minmax 0 1 584 1093
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_minmax
//       Access: Published
//  Description: Explicitly specifies the minimum and maximum
//               vertices, as well as the lists of per-component min
//               and max.
//
//               Use this method with extreme caution.  It's generally
//               better to let the GeomPrimitive compute these
//               explicitly, unless for some reason you can do it
//               faster and you absolutely need the speed improvement.
//
//               Note that any modification to the vertex array will
//               normally cause this to be recomputed, unless you set
//               it immediately again.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
117
void GeomPrimitive::set_minmax(int min_vertex, int max_vertex, GeomVertexArrayData *mins, GeomVertexArrayData *maxs);

2061 12 clear_minmax 0 4 2875 27 GeomPrimitive::clear_minmax 0 1 585 643
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::clear_minmax
//       Access: Published
//  Description: Undoes a previous call to set_minmax(), and allows
//               the minimum and maximum values to be recomputed
//               normally.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
39
void GeomPrimitive::clear_minmax(void);

2062 30 get_num_vertices_per_primitive 0 4 2875 45 GeomPrimitive::get_num_vertices_per_primitive 0 1 586 948
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_vertices_per_primitive
//       Access: Published, Virtual
//  Description: If the primitive type is a simple type in which all
//               primitives have the same number of vertices, like
//               triangles, returns the number of vertices per
//               primitive.  If the primitive type is a more complex
//               type in which different primitives might have
//               different numbers of vertices, for instance a
//               triangle strip, returns 0.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
70
virtual int GeomPrimitive::get_num_vertices_per_primitive(void) const;

2063 34 get_min_num_vertices_per_primitive 0 4 2875 49 GeomPrimitive::get_min_num_vertices_per_primitive 0 1 587 654
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_min_num_vertices_per_primitive
//       Access: Published, Virtual
//  Description: Returns the minimum number of vertices that must be
//               added before close_primitive() may legally be called.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
74
virtual int GeomPrimitive::get_min_num_vertices_per_primitive(void) const;

2064 37 get_num_unused_vertices_per_primitive 0 4 2875 52 GeomPrimitive::get_num_unused_vertices_per_primitive 0 1 588 845
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_unused_vertices_per_primitive
//       Access: Published, Virtual
//  Description: Returns the number of vertices that are added between
//               primitives that aren't, strictly speaking, part of
//               the primitives themselves.  This is used, for
//               instance, to define degenerate triangles to connect
//               otherwise disconnected triangle strips.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
////////////////////////////////////////////////////////////////////
77
virtual int GeomPrimitive::get_num_unused_vertices_per_primitive(void) const;

2065 14 get_class_type 0 4 2875 29 GeomPrimitive::get_class_type 0 1 589 0
54
static TypeHandle GeomPrimitive::get_class_type(void);

2066 12 TextureStage 0 4 2876 26 TextureStage::TextureStage 0 2 594 595 1028
// Filename: textureStage.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Copy Constructor
//       Access: Published
//  Description: Initialize the texture stage from other
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Constructor
//       Access: Published
//  Description: Initialize the texture stage at construction
////////////////////////////////////////////////////////////////////
116
TextureStage::TextureStage(basic_string< char > const &name);
inline TextureStage::TextureStage(TextureStage &copy);

2067 10 operator = 0 4 2876 24 TextureStage::operator = 0 1 596 262
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator =
//       Access: Published
//  Description: just copy the members of other to this
////////////////////////////////////////////////////////////////////
56
void TextureStage::operator =(TextureStage const &copy);

2068 8 set_name 0 4 2876 22 TextureStage::set_name 0 1 597 260
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_name
//       Access: Published
//  Description: Changes the name of this texture stage
////////////////////////////////////////////////////////////////////
69
inline void TextureStage::set_name(basic_string< char > const &name);

2069 8 get_name 0 4 2876 22 TextureStage::get_name 0 1 598 260
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_name
//       Access: Published
//  Description: Returns the name of this texture stage
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &TextureStage::get_name(void) const;

2070 8 set_sort 0 4 2876 22 TextureStage::set_sort 0 1 599 768
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_sort
//       Access: Published
//  Description: Changes the order in which the texture associated
//               with this stage is rendered relative to the other
//               texture stages.  When geometry is rendered with
//               multiple textures, the textures are rendered in order
//               from the lowest sort number to the highest sort
//               number.
//
//               Also see set_priority(), which is used to select the
//               most important textures for rendering when some must
//               be omitted because of hardware limitations.
////////////////////////////////////////////////////////////////////
45
inline void TextureStage::set_sort(int sort);

2071 8 get_sort 0 4 2876 22 TextureStage::get_sort 0 1 600 267
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_sort
//       Access: Published
//  Description: Returns the sort order of this texture stage.
////////////////////////////////////////////////////////////////////
46
inline int TextureStage::get_sort(void) const;

2072 12 set_priority 0 4 2876 26 TextureStage::set_priority 0 1 601 919
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_priority
//       Access: Published
//  Description: Changes the relative importance of the texture
//               associated with this stage relative to the other
//               texture stages that are applied simultaneously.
//
//               This is unrelated to set_sort(), which controls the
//               order in which multiple textures are applied.  The
//               priority number is used to decide which of the
//               requested textures are to be selected for rendering
//               when more textures are requested than the hardware
//               will support.  The highest-priority n textures are
//               selected for rendering, and then rendered in order by
//               their sort factor.
////////////////////////////////////////////////////////////////////
53
inline void TextureStage::set_priority(int priority);

2073 12 get_priority 0 4 2876 26 TextureStage::get_priority 0 1 602 406
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_priority
//       Access: Published
//  Description: Returns the priority associated with this stage.
//
//               This is specially helpful for cards that do not
//               support more than n stages of multi-texturing.
////////////////////////////////////////////////////////////////////
50
inline int TextureStage::get_priority(void) const;

2074 17 set_texcoord_name 0 4 2876 31 TextureStage::set_texcoord_name 0 2 603 604 826
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
////////////////////////////////////////////////////////////////////
152
inline void TextureStage::set_texcoord_name(InternalName *name);
inline void TextureStage::set_texcoord_name(basic_string< char > const &texcoord_name);

2075 17 get_texcoord_name 0 4 2876 31 TextureStage::get_texcoord_name 0 1 605 255
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_texcoord_name
//       Access: Published
//  Description: Returns the InternalName
////////////////////////////////////////////////////////////////////
65
inline InternalName *TextureStage::get_texcoord_name(void) const;

2076 8 set_mode 0 4 2876 22 TextureStage::set_mode 0 1 606 256
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_mode
//       Access: Published
//  Description: Set the mode of this texture stage
////////////////////////////////////////////////////////////////////
60
inline void TextureStage::set_mode(TextureStage::Mode mode);

2077 8 get_mode 0 4 2876 22 TextureStage::get_mode 0 1 607 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_mode
//       Access: Published
//  Description: Return the mode of this stage
////////////////////////////////////////////////////////////////////
61
inline TextureStage::Mode TextureStage::get_mode(void) const;

2078 17 is_fixed_function 0 4 2876 31 TextureStage::is_fixed_function 0 1 608 416
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::is_fixed_function
//       Access: Published
//  Description: Returns true if the TextureStage is relevant to
//               the classic fixed function pipeline.  This excludes
//               texture stages such as normal mapping and the like.
////////////////////////////////////////////////////////////////////
56
inline bool TextureStage::is_fixed_function(void) const;

2079 9 set_color 0 4 2876 23 TextureStage::set_color 0 1 609 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_color
//       Access: Published
//  Description: Set the color for this stage
////////////////////////////////////////////////////////////////////
61
inline void TextureStage::set_color(LVecBase4f const &color);

2080 9 get_color 0 4 2876 23 TextureStage::get_color 0 1 610 254
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_color
//       Access: Published
//  Description: return the color for this stage
////////////////////////////////////////////////////////////////////
54
inline LVecBase4f TextureStage::get_color(void) const;

2081 13 set_rgb_scale 0 4 2876 27 TextureStage::set_rgb_scale 0 1 611 490
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when the mode is
//               CM_combine.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
55
inline void TextureStage::set_rgb_scale(int rgb_scale);

2082 13 get_rgb_scale 0 4 2876 27 TextureStage::get_rgb_scale 0 1 612 247
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_rgb_scale
//       Access: Published
//  Description: See set_rgb_scale().
////////////////////////////////////////////////////////////////////
51
inline int TextureStage::get_rgb_scale(void) const;

2083 15 set_alpha_scale 0 4 2876 29 TextureStage::set_alpha_scale 0 1 613 465
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when the mode is CM_combine.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
59
inline void TextureStage::set_alpha_scale(int alpha_scale);

2084 15 get_alpha_scale 0 4 2876 29 TextureStage::get_alpha_scale 0 1 614 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_alpha_scale
//       Access: Published
//  Description: See set_alpha_scale().
////////////////////////////////////////////////////////////////////
53
inline int TextureStage::get_alpha_scale(void) const;

2085 16 set_saved_result 0 4 2876 30 TextureStage::set_saved_result 0 1 615 825
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage will be supplied as the
//               "last_saved_result" source for any future stages,
//               until the next TextureStage with a saved_result set
//               true is encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
62
inline void TextureStage::set_saved_result(bool saved_result);

2086 16 get_saved_result 0 4 2876 30 TextureStage::get_saved_result 0 1 616 324
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
55
inline bool TextureStage::get_saved_result(void) const;

2087 19 set_tex_view_offset 0 4 2876 33 TextureStage::set_tex_view_offset 0 1 617 654
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_tex_view_offset
//       Access: Published
//  Description: Sets the tex_view_offset value.  This is used only
//               when a special multiview texture is bound to the
//               TextureStage, and it selects the particular view of
//               the texture that is to be used.
//
//               This value is added to the similar parameter on
//               DisplayRegion to derive the final texture view index
//               that is selected for rendering.
////////////////////////////////////////////////////////////////////
67
inline void TextureStage::set_tex_view_offset(int tex_view_offset);

2088 19 get_tex_view_offset 0 4 2876 33 TextureStage::get_tex_view_offset 0 1 618 328
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_tex_view_offset
//       Access: Published
//  Description: Returns the current setting of the tex_view_offset.
//               See set_tex_view_offset().
////////////////////////////////////////////////////////////////////
57
inline int TextureStage::get_tex_view_offset(void) const;

2089 15 set_combine_rgb 0 4 2876 29 TextureStage::set_combine_rgb 0 3 619 620 621 1213
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
////////////////////////////////////////////////////////////////////
680
inline void TextureStage::set_combine_rgb(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0);
inline void TextureStage::set_combine_rgb(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0, TextureStage::CombineSource source1, TextureStage::CombineOperand operand1);
inline void TextureStage::set_combine_rgb(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0, TextureStage::CombineSource source1, TextureStage::CombineOperand operand1, TextureStage::CombineSource source2, TextureStage::CombineOperand operand2);

2090 20 get_combine_rgb_mode 0 4 2876 34 TextureStage::get_combine_rgb_mode 0 1 622 258
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_mode
//       Access: Published
//  Description: Get the combine_rgb_mode
////////////////////////////////////////////////////////////////////
80
inline TextureStage::CombineMode TextureStage::get_combine_rgb_mode(void) const;

2091 28 get_num_combine_rgb_operands 0 4 2876 42 TextureStage::get_num_combine_rgb_operands 0 1 623 401
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_rgb_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_rgb_sourceN() and
//               get_combine_rgb_operandN().
////////////////////////////////////////////////////////////////////
66
inline int TextureStage::get_num_combine_rgb_operands(void) const;

2092 23 get_combine_rgb_source0 0 4 2876 37 TextureStage::get_combine_rgb_source0 0 1 624 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source0
//       Access: Published
//  Description: Get source0 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source0(void) const;

2093 24 get_combine_rgb_operand0 0 4 2876 38 TextureStage::get_combine_rgb_operand0 0 1 625 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand0
//       Access: Published
//  Description: Get operand0 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand0(void) const;

2094 23 get_combine_rgb_source1 0 4 2876 37 TextureStage::get_combine_rgb_source1 0 1 626 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source1
//       Access: Published
//  Description: Get source1 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source1(void) const;

2095 24 get_combine_rgb_operand1 0 4 2876 38 TextureStage::get_combine_rgb_operand1 0 1 627 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand1
//       Access: Published
//  Description: Get operand1 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand1(void) const;

2096 23 get_combine_rgb_source2 0 4 2876 37 TextureStage::get_combine_rgb_source2 0 1 628 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source2
//       Access: Published
//  Description: Get source2 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source2(void) const;

2097 24 get_combine_rgb_operand2 0 4 2876 38 TextureStage::get_combine_rgb_operand2 0 1 629 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand2
//       Access: Published
//  Description: Get operand2 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand2(void) const;

2098 17 set_combine_alpha 0 4 2876 31 TextureStage::set_combine_alpha 0 3 630 631 632 1219
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
////////////////////////////////////////////////////////////////////
686
inline void TextureStage::set_combine_alpha(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0);
inline void TextureStage::set_combine_alpha(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0, TextureStage::CombineSource source1, TextureStage::CombineOperand operand1);
inline void TextureStage::set_combine_alpha(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0, TextureStage::CombineSource source1, TextureStage::CombineOperand operand1, TextureStage::CombineSource source2, TextureStage::CombineOperand operand2);

2099 22 get_combine_alpha_mode 0 4 2876 36 TextureStage::get_combine_alpha_mode 0 1 633 253
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha
//       Access: Published
//  Description: Get combine_alpha_mode
////////////////////////////////////////////////////////////////////
82
inline TextureStage::CombineMode TextureStage::get_combine_alpha_mode(void) const;

2100 30 get_num_combine_alpha_operands 0 4 2876 44 TextureStage::get_num_combine_alpha_operands 0 1 634 407
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_alpha_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_alpha_sourceN() and
//               get_combine_alpha_operandN().
////////////////////////////////////////////////////////////////////
68
inline int TextureStage::get_num_combine_alpha_operands(void) const;

2101 25 get_combine_alpha_source0 0 4 2876 39 TextureStage::get_combine_alpha_source0 0 1 635 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source0
//       Access: Published
//  Description: Get source0 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source0(void) const;

2102 26 get_combine_alpha_operand0 0 4 2876 40 TextureStage::get_combine_alpha_operand0 0 1 636 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand0
//       Access: Published
//  Description: Get operand0 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand0(void) const;

2103 25 get_combine_alpha_source1 0 4 2876 39 TextureStage::get_combine_alpha_source1 0 1 637 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source1
//       Access: Published
//  Description: Get source1 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source1(void) const;

2104 26 get_combine_alpha_operand1 0 4 2876 40 TextureStage::get_combine_alpha_operand1 0 1 638 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand1
//       Access: Published
//  Description: Get operand1 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand1(void) const;

2105 25 get_combine_alpha_source2 0 4 2876 39 TextureStage::get_combine_alpha_source2 0 1 639 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source2
//       Access: Published
//  Description: Get source2 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source2(void) const;

2106 26 get_combine_alpha_operand2 0 4 2876 40 TextureStage::get_combine_alpha_operand2 0 1 640 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand2
//       Access: Published
//  Description: Get operand2 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand2(void) const;

2107 20 involves_color_scale 0 4 2876 34 TextureStage::involves_color_scale 0 1 641 377
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::involves_color_scale
//       Access: Published
//  Description: Returns true if the TextureStage is affected by the
//               setting of the current ColorScaleAttrib, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool TextureStage::involves_color_scale(void) const;

2108 10 uses_color 0 4 2876 24 TextureStage::uses_color 0 1 642 364
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_color
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               whatever color is specified in set_color(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool TextureStage::uses_color(void) const;

2109 18 uses_primary_color 0 4 2876 32 TextureStage::uses_primary_color 0 1 643 331
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_primary_color
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               the CS_primary_color combine source.
////////////////////////////////////////////////////////////////////
57
inline bool TextureStage::uses_primary_color(void) const;

2110 22 uses_last_saved_result 0 4 2876 36 TextureStage::uses_last_saved_result 0 1 644 335
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_last_saved_result
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               the CS_primary_color combine source.
////////////////////////////////////////////////////////////////////
61
inline bool TextureStage::uses_last_saved_result(void) const;

2111 11 operator == 0 4 2876 25 TextureStage::operator == 0 1 645 224
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline bool TextureStage::operator ==(TextureStage const &other) const;

2112 11 operator != 0 4 2876 25 TextureStage::operator != 0 1 646 224
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline bool TextureStage::operator !=(TextureStage const &other) const;

2113 10 operator < 0 4 2876 24 TextureStage::operator < 0 1 647 223
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline bool TextureStage::operator <(TextureStage const &other) const;

2114 10 compare_to 0 4 2876 24 TextureStage::compare_to 0 1 648 540
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this TextureStage
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.  The
//               sorting order is arbitrary and largely meaningless,
//               except to differentiate different stages.
////////////////////////////////////////////////////////////////////
62
int TextureStage::compare_to(TextureStage const &other) const;

2115 5 write 0 4 2876 19 TextureStage::write 0 1 649 256
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Writes the details of this stage
////////////////////////////////////////////////////////////////////
45
void TextureStage::write(ostream &out) const;

2116 6 output 0 4 2876 20 TextureStage::output 0 1 650 249
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Just a single line output
////////////////////////////////////////////////////////////////////
46
void TextureStage::output(ostream &out) const;

2117 11 get_default 0 4 2876 25 TextureStage::get_default 0 1 651 447
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_default
//       Access: Published, Static
//  Description: Returns the default TextureStage that will be used
//               for all texturing that does not name a particular
//               stage.  This generally handles the normal
//               single-texture case.
////////////////////////////////////////////////////////////////////
60
static inline TextureStage *TextureStage::get_default(void);

2118 14 get_class_type 0 4 2876 28 TextureStage::get_class_type 0 1 652 0
53
static TypeHandle TextureStage::get_class_type(void);

2119 27 upcast_to_CopyOnWriteObject 0 12 2881 33 Geom::upcast_to_CopyOnWriteObject 0 1 716 37
upcast from Geom to CopyOnWriteObject
59
CopyOnWriteObject *Geom::upcast_to_CopyOnWriteObject(void);

2120 16 downcast_to_Geom 0 12 2860 35 CopyOnWriteObject::downcast_to_Geom 0 1 717 39
downcast from CopyOnWriteObject to Geom
48
Geom *CopyOnWriteObject::downcast_to_Geom(void);

2121 19 upcast_to_GeomEnums 0 12 2881 25 Geom::upcast_to_GeomEnums 0 1 718 29
upcast from Geom to GeomEnums
43
GeomEnums *Geom::upcast_to_GeomEnums(void);

2122 16 downcast_to_Geom 0 12 2833 27 GeomEnums::downcast_to_Geom 0 1 719 31
downcast from GeomEnums to Geom
40
Geom *GeomEnums::downcast_to_Geom(void);

2123 4 Geom 0 4 2881 10 Geom::Geom 0 1 653 477
////////////////////////////////////////////////////////////////////
//     Function: Geom::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Geom::Copy Constructor
//       Access: Protected
//  Description: Use make_copy() to duplicate a Geom.
////////////////////////////////////////////////////////////////////
39
Geom::Geom(GeomVertexData const *data);

2124 10 operator = 0 4 2881 16 Geom::operator = 0 1 654 460
////////////////////////////////////////////////////////////////////
//     Function: Geom::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a Geom that is actively
//               being used for rendering.
////////////////////////////////////////////////////////////////////
40
void Geom::operator =(Geom const &copy);

2125 5 ~Geom 0 4 2881 11 Geom::~Geom 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: Geom::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
26
virtual Geom::~Geom(void);

2126 12 operator new 0 4 2881 18 Geom::operator new 0 1 655 0
114
inline void *Geom::operator new(unsigned int size);
inline void *Geom::operator new(unsigned int size, void *ptr);

2127 15 operator delete 0 4 2881 21 Geom::operator delete 0 0 0
96
inline void Geom::operator delete(void *ptr);
inline void Geom::operator delete(void *, void *);

2128 12 validate_ptr 0 4 2881 18 Geom::validate_ptr 0 0 0
55
static inline bool Geom::validate_ptr(void const *ptr);

2129 9 make_copy 0 4 2881 15 Geom::make_copy 0 1 656 458
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_copy
//       Access: Protected, Virtual
//  Description: Returns a newly-allocated Geom that is a shallow copy
//               of this one.  It will be a different Geom pointer,
//               but its internal data may or may not be shared with
//               that of the original Geom.
////////////////////////////////////////////////////////////////////
42
virtual Geom *Geom::make_copy(void) const;

2130 18 get_primitive_type 0 4 2881 24 Geom::get_primitive_type 0 1 657 1144
// Filename: geom.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive_type
//       Access: Published
//  Description: Returns the fundamental primitive type that is common
//               to all GeomPrimitives added within the Geom.  All
//               nested primitives within a particular Geom must be
//               the same type (that is, you can mix triangles and
//               tristrips, because they are both the same fundamental
//               type PT_polygons, but you cannot mix triangles and
//               points withn the same Geom).
////////////////////////////////////////////////////////////////////
69
inline GeomEnums::PrimitiveType Geom::get_primitive_type(void) const;

2131 15 get_shade_model 0 4 2881 21 Geom::get_shade_model 0 1 658 359
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_shade_model
//       Access: Published
//  Description: Returns the shade model common to all of the
//               individual GeomPrimitives that have been added to the
//               geom.
////////////////////////////////////////////////////////////////////
63
inline GeomEnums::ShadeModel Geom::get_shade_model(void) const;

2132 18 get_geom_rendering 0 4 2881 24 Geom::get_geom_rendering 0 1 659 374
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_geom_rendering
//       Access: Published
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this Geom.
////////////////////////////////////////////////////////////////////
48
inline int Geom::get_geom_rendering(void) const;

2133 14 get_usage_hint 0 4 2881 20 Geom::get_usage_hint 0 1 660 381
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_usage_hint
//       Access: Published
//  Description: Returns the minimum (i.e. most dynamic) usage_hint
//               among all of the individual GeomPrimitives that have
//               been added to the geom.
////////////////////////////////////////////////////////////////////
61
inline GeomEnums::UsageHint Geom::get_usage_hint(void) const;

2134 14 set_usage_hint 0 4 2881 20 Geom::set_usage_hint 0 1 661 558
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for all of the primitives
//               on this Geom to the same value.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
void Geom::set_usage_hint(GeomEnums::UsageHint usage_hint);

2135 15 get_vertex_data 0 4 2881 21 Geom::get_vertex_data 0 2 662 663 387
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_vertex_data
//       Access: Published
//  Description: Returns a const pointer to the GeomVertexData,
//               for application code to directly examine (but not
//               modify) the geom's underlying data.
////////////////////////////////////////////////////////////////////
119
inline ConstPointerTo< GeomVertexData > Geom::get_vertex_data(Thread *current_thread = ((get_current_thread()))) const;

2136 18 modify_vertex_data 0 4 2881 24 Geom::modify_vertex_data 0 1 664 583
////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_vertex_data
//       Access: Published
//  Description: Returns a modifiable pointer to the GeomVertexData,
//               so that application code may directly maniuplate the
//               geom's underlying data.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
PointerTo< GeomVertexData > Geom::modify_vertex_data(void);

2137 15 set_vertex_data 0 4 2881 21 Geom::set_vertex_data 0 1 665 512
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_vertex_data
//       Access: Published
//  Description: Replaces the Geom's underlying vertex data table with
//               a completely new table.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
55
void Geom::set_vertex_data(GeomVertexData const *data);

2138 15 offset_vertices 0 4 2881 21 Geom::offset_vertices 0 1 666 847
////////////////////////////////////////////////////////////////////
//     Function: Geom::offset_vertices
//       Access: Published
//  Description: Replaces a Geom's vertex table with a new table, and
//               simultaneously adds the indicated offset to all
//               vertex references within the Geom's primitives.  This
//               is intended to be used to combine multiple
//               GeomVertexDatas from different Geoms into a single
//               big buffer, with each Geom referencing a subset of
//               the vertices in the buffer.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
67
void Geom::offset_vertices(GeomVertexData const *data, int offset);

2139 15 make_nonindexed 0 4 2881 21 Geom::make_nonindexed 0 1 667 728
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_nonindexed
//       Access: Published
//  Description: Converts the geom from indexed to nonindexed by
//               duplicating vertices as necessary.  If composite_only
//               is true, then only composite primitives such as
//               trifans and tristrips are converted.  Returns the
//               number of GeomPrimitive objects converted.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
47
int Geom::make_nonindexed(bool composite_only);

2140 8 is_empty 0 4 2881 14 Geom::is_empty 0 1 668 337
////////////////////////////////////////////////////////////////////
//     Function: Geom::is_empty
//       Access: Published
//  Description: Returns true if there appear to be no vertices to be
//               rendered by this Geom, false if has some actual data.
////////////////////////////////////////////////////////////////////
39
inline bool Geom::is_empty(void) const;

2141 18 get_num_primitives 0 4 2881 24 Geom::get_num_primitives 0 1 669 395
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_primitives
//       Access: Published
//  Description: Returns the number of GeomPrimitive objects stored
//               within the Geom, each of which represents a number of
//               primitives of a particular type.
////////////////////////////////////////////////////////////////////
48
inline int Geom::get_num_primitives(void) const;

2142 13 get_primitive 0 4 2881 19 Geom::get_primitive 0 1 670 464
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive
//       Access: Published
//  Description: Returns a const pointer to the ith GeomPrimitive
//               object stored within the Geom.  Use this call only to
//               inspect the ith object; use modify_primitive() or
//               set_primitive() if you want to modify it.
////////////////////////////////////////////////////////////////////
72
inline ConstPointerTo< GeomPrimitive > Geom::get_primitive(int i) const;

2143 16 modify_primitive 0 4 2881 22 Geom::modify_primitive 0 1 671 632
////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_primitive
//       Access: Published
//  Description: Returns a modifiable pointer to the ith GeomPrimitive
//               object stored within the Geom, so application code
//               can directly manipulate the properties of this
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
inline PointerTo< GeomPrimitive > Geom::modify_primitive(int i);

2144 13 set_primitive 0 4 2881 19 Geom::set_primitive 0 1 672 514
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_primitive
//       Access: Published
//  Description: Replaces the ith GeomPrimitive object stored within
//               the Geom with the new object.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void Geom::set_primitive(int i, GeomPrimitive const *primitive);

2145 13 add_primitive 0 4 2881 19 Geom::add_primitive 0 1 673 637
////////////////////////////////////////////////////////////////////
//     Function: Geom::add_primitive
//       Access: Published
//  Description: Adds a new GeomPrimitive structure to the Geom
//               object.  This specifies a particular subset of
//               vertices that are used to define geometric primitives
//               of the indicated type.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
57
void Geom::add_primitive(GeomPrimitive const *primitive);

2146 16 remove_primitive 0 4 2881 22 Geom::remove_primitive 0 1 674 459
////////////////////////////////////////////////////////////////////
//     Function: Geom::remove_primitive
//       Access: Published
//  Description: Removes the ith primitive from the list.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
35
void Geom::remove_primitive(int i);

2147 16 clear_primitives 0 4 2881 22 Geom::clear_primitives 0 1 675 633
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_primitives
//       Access: Published
//  Description: Removes all the primitives from the Geom object (but
//               keeps the same table of vertices).  You may then
//               re-add primitives one at a time via calls to
//               add_primitive().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
34
void Geom::clear_primitives(void);

2148 9 decompose 0 4 2881 15 Geom::decompose 0 1 676 354
////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::decompose().
////////////////////////////////////////////////////////////////////
53
inline PointerTo< Geom > Geom::decompose(void) const;

2149 10 doubleside 0 4 2881 16 Geom::doubleside 0 1 677 357
////////////////////////////////////////////////////////////////////
//     Function: Geom::doubleside
//       Access: Published
//  Description: Doublesides all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::doubleside().
////////////////////////////////////////////////////////////////////
54
inline PointerTo< Geom > Geom::doubleside(void) const;

2150 7 reverse 0 4 2881 13 Geom::reverse 0 1 678 348
////////////////////////////////////////////////////////////////////
//     Function: Geom::reverse
//       Access: Published
//  Description: Reverses all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::reverse().
////////////////////////////////////////////////////////////////////
51
inline PointerTo< Geom > Geom::reverse(void) const;

2151 6 rotate 0 4 2881 12 Geom::rotate 0 1 679 345
////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::rotate().
////////////////////////////////////////////////////////////////////
50
inline PointerTo< Geom > Geom::rotate(void) const;

2152 5 unify 0 4 2881 11 Geom::unify 0 1 680 890
////////////////////////////////////////////////////////////////////
//     Function: Geom::unify
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single (or as few as possible, within the
//               constraints of max_indices) primitive objects.  This
//               may require decomposing the primitives if, for
//               instance, the Geom contains both triangle strips and
//               triangle fans.
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
////////////////////////////////////////////////////////////////////
81
inline PointerTo< Geom > Geom::unify(int max_indices, bool preserve_order) const;

2153 11 make_points 0 4 2881 17 Geom::make_points 0 1 681 319
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_points
//       Access: Published
//  Description: Returns a new Geom with points at all the vertices.
//               See GeomPrimitive::make_points().
////////////////////////////////////////////////////////////////////
55
inline PointerTo< Geom > Geom::make_points(void) const;

2154 18 decompose_in_place 0 4 2881 24 Geom::decompose_in_place 0 1 682 568
////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose_in_place
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::decompose().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
36
void Geom::decompose_in_place(void);

2155 19 doubleside_in_place 0 4 2881 25 Geom::doubleside_in_place 0 1 683 571
////////////////////////////////////////////////////////////////////
//     Function: Geom::doubleside_in_place
//       Access: Published
//  Description: Doublesides all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::doubleside().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
37
void Geom::doubleside_in_place(void);

2156 16 reverse_in_place 0 4 2881 22 Geom::reverse_in_place 0 1 684 562
////////////////////////////////////////////////////////////////////
//     Function: Geom::reverse_in_place
//       Access: Published
//  Description: Reverses all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::reverse().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
34
void Geom::reverse_in_place(void);

2157 15 rotate_in_place 0 4 2881 21 Geom::rotate_in_place 0 1 685 559
////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate_in_place
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::rotate().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
33
void Geom::rotate_in_place(void);

2158 14 unify_in_place 0 4 2881 20 Geom::unify_in_place 0 1 686 1096
////////////////////////////////////////////////////////////////////
//     Function: Geom::unify_in_place
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single (or as few as possible, within the
//               constraints of max_indices) primitive objects.  This
//               may require decomposing the primitives if, for
//               instance, the Geom contains both triangle strips and
//               triangle fans.
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void Geom::unify_in_place(int max_indices, bool preserve_order);

2159 20 make_points_in_place 0 4 2881 26 Geom::make_points_in_place 0 1 687 567
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_points_in_place
//       Access: Published
//  Description: Replaces the GeomPrimitives within this Geom with
//               corresponding GeomPoints.  See
//               GeomPrimitive::make_points().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
38
void Geom::make_points_in_place(void);

2160 20 copy_primitives_from 0 4 2881 26 Geom::copy_primitives_from 0 1 688 792
////////////////////////////////////////////////////////////////////
//     Function: Geom::copy_primitives_from
//       Access: Published, Virtual
//  Description: Copies the primitives from the indicated Geom into
//               this one.  This does require that both Geoms contain
//               the same fundamental type primitives, both have a
//               compatible shade model, and both use the same
//               GeomVertexData.  Both Geoms must also be the same
//               specific class type (i.e. if one is a GeomTextGlyph,
//               they both must be.)
//
//               Returns true if the copy is successful, or false
//               otherwise (because the Geoms were mismatched).
////////////////////////////////////////////////////////////////////
59
virtual bool Geom::copy_primitives_from(Geom const *other);

2161 13 get_num_bytes 0 4 2881 19 Geom::get_num_bytes 0 1 689 341
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the geom and
//               its primitives (but not including its vertex table).
////////////////////////////////////////////////////////////////////
36
int Geom::get_num_bytes(void) const;

2162 12 get_modified 0 4 2881 18 Geom::get_modified 0 2 690 691 564
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time any of the primitives in
//               the Geom is modified, or the set of primitives is
//               modified.  However, this does not include
//               modifications to the vertex data, which should be
//               tested separately.
////////////////////////////////////////////////////////////////////
93
inline UpdateSeq Geom::get_modified(Thread *current_thread = ((get_current_thread()))) const;

2163 16 request_resident 0 4 2881 22 Geom::request_resident 0 1 692 571
////////////////////////////////////////////////////////////////////
//     Function: Geom::request_resident
//       Access: Published
//  Description: Returns true if all the primitive arrays are
//               currently resident in memory.  If this returns false,
//               the data will be brought back into memory shortly;
//               try again later.
//
//               This does not also test the Geom's associated
//               GeomVertexData.  That must be tested separately.
////////////////////////////////////////////////////////////////////
40
bool Geom::request_resident(void) const;

2164 18 transform_vertices 0 4 2881 24 Geom::transform_vertices 0 1 693 808
////////////////////////////////////////////////////////////////////
//     Function: Geom::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform to all of the
//               vertices in the Geom.  If the Geom happens to share a
//               vertex table with another Geom, this operation will
//               duplicate the vertex table instead of breaking the
//               other Geom; however, if multiple Geoms with shared
//               tables are transformed by the same matrix, they will
//               no longer share tables after the operation.  Consider
//               using the GeomTransformer if you will be applying the
//               same transform to multiple Geoms.
////////////////////////////////////////////////////////////////////
52
void Geom::transform_vertices(LMatrix4f const &mat);

2165 11 check_valid 0 4 2881 17 Geom::check_valid 0 2 694 695 925
////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the geom's GeomVertexData.  Returns true if the geom
//               appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the indicated GeomVertexData.  Returns true if the
//               geom appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
100
bool Geom::check_valid(void) const;
bool Geom::check_valid(GeomVertexData const *vertex_data) const;

2166 10 get_bounds 0 4 2881 16 Geom::get_bounds 0 2 696 697 257
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds
//       Access: Published
//  Description: Returns the bounding volume for the Geom.
////////////////////////////////////////////////////////////////////
107
ConstPointerTo< BoundingVolume > Geom::get_bounds(Thread *current_thread = ((get_current_thread()))) const;

2167 19 get_nested_vertices 0 4 2881 25 Geom::get_nested_vertices 0 2 698 699 316
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_nested_vertices
//       Access: Published
//  Description: Returns the number of vertices rendered by all
//               primitives within the Geom.
////////////////////////////////////////////////////////////////////
87
int Geom::get_nested_vertices(Thread *current_thread = ((get_current_thread()))) const;

2168 17 mark_bounds_stale 0 4 2881 23 Geom::mark_bounds_stale 0 1 700 390
////////////////////////////////////////////////////////////////////
//     Function: Geom::mark_bounds_stale
//       Access: Published
//  Description: Marks the bounding volume of the Geom as stale so
//               that it should be recomputed.  Usually it is not
//               necessary to call this explicitly.
////////////////////////////////////////////////////////////////////
48
inline void Geom::mark_bounds_stale(void) const;

2169 15 set_bounds_type 0 4 2881 21 Geom::set_bounds_type 0 1 701 969
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this Geom.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               a BoundingBox is created.
//
//               This affects the implicit bounding volume only.  If
//               an explicit bounding volume is set on the Geom with
//               set_bounds(), that bounding volume type is used.
//               (This is different behavior from the similar method
//               on PandaNode.)
////////////////////////////////////////////////////////////////////
74
inline void Geom::set_bounds_type(BoundingVolume::BoundsType bounds_type);

2170 15 get_bounds_type 0 4 2881 21 Geom::get_bounds_type 0 1 702 298
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds_type
//       Access: Published
//  Description: Returns the bounding volume type set with
//               set_bounds_type().
////////////////////////////////////////////////////////////////////
68
inline BoundingVolume::BoundsType Geom::get_bounds_type(void) const;

2171 10 set_bounds 0 4 2881 16 Geom::set_bounds 0 1 703 726
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed; call clear_bounds() if you would like to
//               return the bounding volume to its default behavior.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
inline void Geom::set_bounds(BoundingVolume const *volume);

2172 12 clear_bounds 0 4 2881 18 Geom::clear_bounds 0 1 704 614
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the bounding volume to be
//               automatically computed once more based on the
//               vertices.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
37
inline void Geom::clear_bounds(void);

2173 6 output 0 4 2881 12 Geom::output 0 1 705 221
////////////////////////////////////////////////////////////////////
//     Function: Geom::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual void Geom::output(ostream &out) const;

2174 5 write 0 4 2881 11 Geom::write 0 2 706 707 220
////////////////////////////////////////////////////////////////////
//     Function: Geom::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
69
virtual void Geom::write(ostream &out, int indent_level = (0)) const;

2175 11 clear_cache 0 4 2881 17 Geom::clear_cache 0 1 708 546
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
////////////////////////////////////////////////////////////////////
29
void Geom::clear_cache(void);

2176 17 clear_cache_stage 0 4 2881 23 Geom::clear_cache_stage 0 1 709 598
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
53
void Geom::clear_cache_stage(Thread *current_thread);

2177 7 prepare 0 4 2881 13 Geom::prepare 0 1 710 640
////////////////////////////////////////////////////////////////////
//     Function: Geom::prepare
//       Access: Published
//  Description: Indicates that the geom should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               geom is already loaded into geom memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               geoms from a user interface standpoint.
////////////////////////////////////////////////////////////////////
62
void Geom::prepare(PreparedGraphicsObjects *prepared_objects);

2178 11 is_prepared 0 4 2881 17 Geom::is_prepared 0 1 711 368
////////////////////////////////////////////////////////////////////
//     Function: Geom::is_prepared
//       Access: Published
//  Description: Returns true if the geom has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
////////////////////////////////////////////////////////////////////
72
bool Geom::is_prepared(PreparedGraphicsObjects *prepared_objects) const;

2179 7 release 0 4 2881 13 Geom::release 0 1 712 388
////////////////////////////////////////////////////////////////////
//     Function: Geom::release
//       Access: Published
//  Description: Frees the geom context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
62
bool Geom::release(PreparedGraphicsObjects *prepared_objects);

2180 11 release_all 0 4 2881 17 Geom::release_all 0 1 713 386
////////////////////////////////////////////////////////////////////
//     Function: Geom::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the geom has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
28
int Geom::release_all(void);

2181 11 prepare_now 0 4 2881 17 Geom::prepare_now 0 1 714 871
////////////////////////////////////////////////////////////////////
//     Function: Geom::prepare_now
//       Access: Public
//  Description: Creates a context for the geom on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) GeomContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               geoms.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a geom does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
////////////////////////////////////////////////////////////////////
106
GeomContext *Geom::prepare_now(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

2182 14 get_class_type 0 4 2881 20 Geom::get_class_type 0 1 715 0
45
static TypeHandle Geom::get_class_type(void);

2183 8 get_geom 0 4 2882 21 GeomContext::get_geom 0 1 720 220
////////////////////////////////////////////////////////////////////
//     Function: GeomContext::get_geom
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline Geom *GeomContext::get_geom(void) const;

2184 14 get_class_type 0 4 2882 27 GeomContext::get_class_type 0 1 721 0
52
static TypeHandle GeomContext::get_class_type(void);

2185 12 ~GeomContext 0 4 2882 25 GeomContext::~GeomContext 0 0 0
32
GeomContext::~GeomContext(void);

2186 9 GeomLines 0 4 2883 20 GeomLines::GeomLines 0 2 722 723 451
////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
99
GeomLines::GeomLines(GeomEnums::UsageHint usage_hint);
GeomLines::GeomLines(GeomLines const &copy);

2187 14 get_class_type 0 4 2883 25 GeomLines::get_class_type 0 1 724 0
50
static TypeHandle GeomLines::get_class_type(void);

2188 14 GeomLinestrips 0 4 2884 30 GeomLinestrips::GeomLinestrips 0 2 725 726 461
////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
124
GeomLinestrips::GeomLinestrips(GeomEnums::UsageHint usage_hint);
GeomLinestrips::GeomLinestrips(GeomLinestrips const &copy);

2189 14 get_class_type 0 4 2884 30 GeomLinestrips::get_class_type 0 1 727 0
55
static TypeHandle GeomLinestrips::get_class_type(void);

2190 10 GeomPoints 0 4 2885 22 GeomPoints::GeomPoints 0 2 728 729 453
////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
GeomPoints::GeomPoints(GeomEnums::UsageHint usage_hint);
GeomPoints::GeomPoints(GeomPoints const &copy);

2191 14 get_class_type 0 4 2885 26 GeomPoints::get_class_type 0 1 730 0
51
static TypeHandle GeomPoints::get_class_type(void);

2192 13 GeomTriangles 0 4 2886 28 GeomTriangles::GeomTriangles 0 2 731 732 459
////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
119
GeomTriangles::GeomTriangles(GeomEnums::UsageHint usage_hint);
GeomTriangles::GeomTriangles(GeomTriangles const &copy);

2193 14 get_class_type 0 4 2886 29 GeomTriangles::get_class_type 0 1 733 0
54
static TypeHandle GeomTriangles::get_class_type(void);

2194 11 GeomTrifans 0 4 2887 24 GeomTrifans::GeomTrifans 0 2 734 735 455
////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
109
GeomTrifans::GeomTrifans(GeomEnums::UsageHint usage_hint);
GeomTrifans::GeomTrifans(GeomTrifans const &copy);

2195 14 get_class_type 0 4 2887 27 GeomTrifans::get_class_type 0 1 736 0
52
static TypeHandle GeomTrifans::get_class_type(void);

2196 13 GeomTristrips 0 4 2888 28 GeomTristrips::GeomTristrips 0 2 737 738 459
////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
119
GeomTristrips::GeomTristrips(GeomEnums::UsageHint usage_hint);
GeomTristrips::GeomTristrips(GeomTristrips const &copy);

2197 14 get_class_type 0 4 2888 29 GeomTristrips::get_class_type 0 1 739 0
54
static TypeHandle GeomTristrips::get_class_type(void);

2198 16 GeomVertexReader 0 4 2889 34 GeomVertexReader::GeomVertexReader 0 13 740 741 742 743 744 745 746 747 748 749 750 751 752 3393
// Filename: geomVertexReader.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexReader.  You must use
//               the assignment operator to assign a valid
//               GeomVertexReader to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Public
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
891
inline GeomVertexReader::GeomVertexReader(Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexData const *vertex_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexData const *vertex_data, basic_string< char > const &name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexData const *vertex_data, InternalName const *name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexArrayData const *array_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexArrayData const *array_data, int column, Thread *current_thread = ((get_current_thread())));
inline GeomVertexReader::GeomVertexReader(GeomVertexReader const &copy);

2199 10 operator = 0 4 2889 28 GeomVertexReader::operator = 0 1 753 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void GeomVertexReader::operator =(GeomVertexReader const &copy);

2200 17 ~GeomVertexReader 0 4 2889 35 GeomVertexReader::~GeomVertexReader 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexReader::~GeomVertexReader(void);

2201 15 get_vertex_data 0 4 2889 33 GeomVertexReader::get_vertex_data 0 1 754 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               reader is processing.  This may return NULL if the
//               reader was constructed with just an array pointer.
////////////////////////////////////////////////////////////////////
75
inline GeomVertexData const *GeomVertexReader::get_vertex_data(void) const;

2202 14 get_array_data 0 4 2889 32 GeomVertexReader::get_array_data 0 1 755 325
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               reader is currently processing.
////////////////////////////////////////////////////////////////////
79
inline GeomVertexArrayData const *GeomVertexReader::get_array_data(void) const;

2203 16 get_array_handle 0 4 2889 34 GeomVertexReader::get_array_handle 0 1 756 400
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array_handle
//       Access: Published
//  Description: Returns the read handle to the array object that the
//               read is currently processing.  This low-level call
//               should be used with caution.
////////////////////////////////////////////////////////////////////
87
inline GeomVertexArrayDataHandle const *GeomVertexReader::get_array_handle(void) const;

2204 10 get_stride 0 4 2889 28 GeomVertexReader::get_stride 0 1 757 459
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexReader directly.
////////////////////////////////////////////////////////////////////
61
inline unsigned int GeomVertexReader::get_stride(void) const;

2205 18 get_current_thread 0 4 2889 36 GeomVertexReader::get_current_thread 0 1 758 359
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
////////////////////////////////////////////////////////////////////
64
inline Thread *GeomVertexReader::get_current_thread(void) const;

2206 9 set_force 0 4 2889 27 GeomVertexReader::set_force 0 1 759 928
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_force
//       Access: Published
//  Description: Sets the value of the force flag.  When this is true
//               (the default), vertex data will be paged in from disk
//               if necessary.  When this is false, the GeomVertexData
//               will simply return a failure code when attempting to
//               read vertex data that is not resident (but will put
//               it on the queue to become resident later).
//
//               Normally, vertex data is always resident, so this
//               will not be an issue.  It is only possible for vertex
//               data to be nonresident if you have enabled vertex
//               paging via the GeomVertexArrayData and VertexDataPage
//               interfaces.
////////////////////////////////////////////////////////////////////
52
inline void GeomVertexReader::set_force(bool force);

2207 9 get_force 0 4 2889 27 GeomVertexReader::get_force 0 1 760 298
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_force
//       Access: Published
//  Description: Returns the value of the force flag.  See
//               set_force().
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexReader::get_force(void) const;

2208 10 set_column 0 4 2889 28 GeomVertexReader::set_column 0 4 761 762 763 764 2514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the indicated column
//               description on the given array.
//
//               This also resets the current read row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
275
inline bool GeomVertexReader::set_column(int column);
inline bool GeomVertexReader::set_column(basic_string< char > const &name);
inline bool GeomVertexReader::set_column(InternalName const *name);
bool GeomVertexReader::set_column(int array, GeomVertexColumn const *column);

2209 5 clear 0 4 2889 23 GeomVertexReader::clear 0 1 765 272
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::clear
//       Access: Published
//  Description: Resets the GeomVertexReader to the initial state.
////////////////////////////////////////////////////////////////////
42
inline void GeomVertexReader::clear(void);

2210 10 has_column 0 4 2889 28 GeomVertexReader::has_column 0 1 766 445
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist (or if get_force() is false and the vertex data
//               is nonresident).
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexReader::has_column(void) const;

2211 9 get_array 0 4 2889 27 GeomVertexReader::get_array 0 1 767 323
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the reader is working on.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexReader::get_array(void) const;

2212 10 get_column 0 4 2889 28 GeomVertexReader::get_column 0 1 768 316
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               reader is working on.
////////////////////////////////////////////////////////////////////
72
inline GeomVertexColumn const *GeomVertexReader::get_column(void) const;

2213 14 set_row_unsafe 0 4 2889 32 GeomVertexReader::set_row_unsafe 0 1 769 655
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
////////////////////////////////////////////////////////////////////
54
inline void GeomVertexReader::set_row_unsafe(int row);

2214 7 set_row 0 4 2889 25 GeomVertexReader::set_row 0 1 770 533
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               reader will begin reading from the indicated row;
//               each subsequent get_data*() call will return the data
//               from the subsequent row.  If set_column() is called,
//               the reader will return to this row.
////////////////////////////////////////////////////////////////////
47
inline void GeomVertexReader::set_row(int row);

2215 13 get_start_row 0 4 2889 31 GeomVertexReader::get_start_row 0 1 771 375
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_start_row
//       Access: Published
//  Description: Returns the row index at which the reader started.
//               It will return to this row if you reset the current
//               column.
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexReader::get_start_row(void) const;

2216 12 get_read_row 0 4 2889 30 GeomVertexReader::get_read_row 0 1 772 339
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_read_row
//       Access: Published
//  Description: Returns the row index from which the data will be
//               retrieved by the next call to get_data*().
////////////////////////////////////////////////////////////////////
54
inline int GeomVertexReader::get_read_row(void) const;

2217 9 is_at_end 0 4 2889 27 GeomVertexReader::is_at_end 0 1 773 440
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::is_at_end
//       Access: Published
//  Description: Returns true if the reader is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to get_data*() will result in a
//               crash.
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexReader::is_at_end(void) const;

2218 10 get_data1f 0 4 2889 28 GeomVertexReader::get_data1f 0 1 774 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
48
inline float GeomVertexReader::get_data1f(void);

2219 10 get_data2f 0 4 2889 28 GeomVertexReader::get_data2f 0 1 775 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f const &GeomVertexReader::get_data2f(void);

2220 10 get_data3f 0 4 2889 28 GeomVertexReader::get_data3f 0 1 776 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f const &GeomVertexReader::get_data3f(void);

2221 10 get_data4f 0 4 2889 28 GeomVertexReader::get_data4f 0 1 777 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &GeomVertexReader::get_data4f(void);

2222 10 get_data1d 0 4 2889 28 GeomVertexReader::get_data1d 0 1 778 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
49
inline double GeomVertexReader::get_data1d(void);

2223 10 get_data2d 0 4 2889 28 GeomVertexReader::get_data2d 0 1 779 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d const &GeomVertexReader::get_data2d(void);

2224 10 get_data3d 0 4 2889 28 GeomVertexReader::get_data3d 0 1 780 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d const &GeomVertexReader::get_data3d(void);

2225 10 get_data4d 0 4 2889 28 GeomVertexReader::get_data4d 0 1 781 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d const &GeomVertexReader::get_data4d(void);

2226 9 get_data1 0 4 2889 27 GeomVertexReader::get_data1 0 1 782 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
47
inline float GeomVertexReader::get_data1(void);

2227 9 get_data2 0 4 2889 27 GeomVertexReader::get_data2 0 1 783 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
59
inline LVecBase2f const &GeomVertexReader::get_data2(void);

2228 9 get_data3 0 4 2889 27 GeomVertexReader::get_data3 0 1 784 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
59
inline LVecBase3f const &GeomVertexReader::get_data3(void);

2229 9 get_data4 0 4 2889 27 GeomVertexReader::get_data4 0 1 785 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &GeomVertexReader::get_data4(void);

2230 10 get_data1i 0 4 2889 28 GeomVertexReader::get_data1i 0 1 786 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
46
inline int GeomVertexReader::get_data1i(void);

2231 10 get_data2i 0 4 2889 28 GeomVertexReader::get_data2i 0 1 787 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data2i(void);

2232 10 get_data3i 0 4 2889 28 GeomVertexReader::get_data3i 0 1 788 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data3i(void);

2233 10 get_data4i 0 4 2889 28 GeomVertexReader::get_data4i 0 1 789 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data4i(void);

2234 6 output 0 4 2889 24 GeomVertexReader::output 0 1 790 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexReader::output(ostream &out) const;

2235 16 GeomVertexWriter 0 4 2890 34 GeomVertexWriter::GeomVertexWriter 0 13 791 792 793 794 795 796 797 798 799 800 801 802 803 3393
// Filename: geomVertexWriter.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexWriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexWriter to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Public
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
861
inline GeomVertexWriter::GeomVertexWriter(Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexData *vertex_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexData *vertex_data, basic_string< char > const &name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexData *vertex_data, InternalName const *name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexArrayData *array_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexArrayData *array_data, int column, Thread *current_thread = ((get_current_thread())));
inline GeomVertexWriter::GeomVertexWriter(GeomVertexWriter const &copy);

2236 10 operator = 0 4 2890 28 GeomVertexWriter::operator = 0 1 804 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void GeomVertexWriter::operator =(GeomVertexWriter const &copy);

2237 17 ~GeomVertexWriter 0 4 2890 35 GeomVertexWriter::~GeomVertexWriter 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexWriter::~GeomVertexWriter(void);

2238 15 get_vertex_data 0 4 2890 33 GeomVertexWriter::get_vertex_data 0 1 805 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               writer is processing.  This may return NULL if the
//               writer was constructed with just an array pointer.
////////////////////////////////////////////////////////////////////
69
inline GeomVertexData *GeomVertexWriter::get_vertex_data(void) const;

2239 14 get_array_data 0 4 2890 32 GeomVertexWriter::get_array_data 0 1 806 325
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               writer is currently processing.
////////////////////////////////////////////////////////////////////
73
inline GeomVertexArrayData *GeomVertexWriter::get_array_data(void) const;

2240 16 get_array_handle 0 4 2890 34 GeomVertexWriter::get_array_handle 0 1 807 523
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array_handle
//       Access: Published
//  Description: Returns the write handle to the array object that the
//               writer is currently processing.  This low-level call
//               should be used with caution; be careful with
//               modifying the data in the handle out from under the
//               GeomVertexWriter.
////////////////////////////////////////////////////////////////////
81
inline GeomVertexArrayDataHandle *GeomVertexWriter::get_array_handle(void) const;

2241 10 get_stride 0 4 2890 28 GeomVertexWriter::get_stride 0 1 808 459
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexWriter directly.
////////////////////////////////////////////////////////////////////
61
inline unsigned int GeomVertexWriter::get_stride(void) const;

2242 18 get_current_thread 0 4 2890 36 GeomVertexWriter::get_current_thread 0 1 809 359
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
////////////////////////////////////////////////////////////////////
64
inline Thread *GeomVertexWriter::get_current_thread(void) const;

2243 10 set_column 0 4 2890 28 GeomVertexWriter::set_column 0 4 810 811 812 813 2514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the indicated column
//               description on the given array.
//
//               This also resets the current write row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
275
inline bool GeomVertexWriter::set_column(int column);
inline bool GeomVertexWriter::set_column(basic_string< char > const &name);
inline bool GeomVertexWriter::set_column(InternalName const *name);
bool GeomVertexWriter::set_column(int array, GeomVertexColumn const *column);

2244 5 clear 0 4 2890 23 GeomVertexWriter::clear 0 1 814 272
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::clear
//       Access: Published
//  Description: Resets the GeomVertexWriter to the initial state.
////////////////////////////////////////////////////////////////////
42
inline void GeomVertexWriter::clear(void);

2245 16 reserve_num_rows 0 4 2890 34 GeomVertexWriter::reserve_num_rows 0 1 815 597
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for num_rows is
//               allocated, so that you may add up to num_rows rows
//               without causing a new memory allocation.  This is a
//               performance optimization only; it is especially
//               useful when you know the number of rows you will be
//               adding ahead of time.
////////////////////////////////////////////////////////////////////
54
bool GeomVertexWriter::reserve_num_rows(int num_rows);

2246 10 has_column 0 4 2890 28 GeomVertexWriter::has_column 0 1 816 364
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexWriter::has_column(void) const;

2247 9 get_array 0 4 2890 27 GeomVertexWriter::get_array 0 1 817 323
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the writer is working on.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexWriter::get_array(void) const;

2248 10 get_column 0 4 2890 28 GeomVertexWriter::get_column 0 1 818 316
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               writer is working on.
////////////////////////////////////////////////////////////////////
72
inline GeomVertexColumn const *GeomVertexWriter::get_column(void) const;

2249 14 set_row_unsafe 0 4 2890 32 GeomVertexWriter::set_row_unsafe 0 1 819 655
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
////////////////////////////////////////////////////////////////////
54
inline void GeomVertexWriter::set_row_unsafe(int row);

2250 7 set_row 0 4 2890 25 GeomVertexWriter::set_row 0 1 820 530
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               writer will begin writing to the indicated row;
//               each subsequent set_data*() call will store the data
//               into the subsequent row.  If set_column() is called,
//               the writer will return to this row.
////////////////////////////////////////////////////////////////////
47
inline void GeomVertexWriter::set_row(int row);

2251 13 get_start_row 0 4 2890 31 GeomVertexWriter::get_start_row 0 1 821 376
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the writer
//               started.  It will return to this row if you reset
//               the current column.
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexWriter::get_start_row(void) const;

2252 13 get_write_row 0 4 2890 31 GeomVertexWriter::get_write_row 0 1 822 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_write_row
//       Access: Published
//  Description: Returns the row index to which the data will be
//               written at the next call to set_data*() or
//               add_data*().
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexWriter::get_write_row(void) const;

2253 9 is_at_end 0 4 2890 27 GeomVertexWriter::is_at_end 0 1 823 509
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::is_at_end
//       Access: Published
//  Description: Returns true if the writer is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to set_data*() will result in a
//               crash, but another call to add_data*() will add a new
//               row.
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexWriter::is_at_end(void) const;

2254 10 set_data1f 0 4 2890 28 GeomVertexWriter::set_data1f 0 1 824 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexWriter::set_data1f(float data);

2255 10 set_data2f 0 4 2890 28 GeomVertexWriter::set_data2f 0 2 825 826 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
125
inline void GeomVertexWriter::set_data2f(float x, float y);
inline void GeomVertexWriter::set_data2f(LVecBase2f const &data);

2256 10 set_data3f 0 4 2890 28 GeomVertexWriter::set_data3f 0 2 827 828 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
134
inline void GeomVertexWriter::set_data3f(float x, float y, float z);
inline void GeomVertexWriter::set_data3f(LVecBase3f const &data);

2257 10 set_data4f 0 4 2890 28 GeomVertexWriter::set_data4f 0 2 829 830 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
143
inline void GeomVertexWriter::set_data4f(float x, float y, float z, float w);
inline void GeomVertexWriter::set_data4f(LVecBase4f const &data);

2258 10 set_data1d 0 4 2890 28 GeomVertexWriter::set_data1d 0 1 831 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1d
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
54
inline void GeomVertexWriter::set_data1d(double data);

2259 10 set_data2d 0 4 2890 28 GeomVertexWriter::set_data2d 0 2 832 833 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
127
inline void GeomVertexWriter::set_data2d(double x, double y);
inline void GeomVertexWriter::set_data2d(LVecBase2d const &data);

2260 10 set_data3d 0 4 2890 28 GeomVertexWriter::set_data3d 0 2 834 835 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
137
inline void GeomVertexWriter::set_data3d(double x, double y, double z);
inline void GeomVertexWriter::set_data3d(LVecBase3d const &data);

2261 10 set_data4d 0 4 2890 28 GeomVertexWriter::set_data4d 0 2 836 837 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
147
inline void GeomVertexWriter::set_data4d(double x, double y, double z, double w);
inline void GeomVertexWriter::set_data4d(LVecBase4d const &data);

2262 9 set_data1 0 4 2890 27 GeomVertexWriter::set_data1 0 1 838 428
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
52
inline void GeomVertexWriter::set_data1(float data);

2263 9 set_data2 0 4 2890 27 GeomVertexWriter::set_data2 0 2 839 840 858
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
123
inline void GeomVertexWriter::set_data2(float x, float y);
inline void GeomVertexWriter::set_data2(LVecBase2f const &data);

2264 9 set_data3 0 4 2890 27 GeomVertexWriter::set_data3 0 2 841 842 858
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
132
inline void GeomVertexWriter::set_data3(float x, float y, float z);
inline void GeomVertexWriter::set_data3(LVecBase3f const &data);

2265 9 set_data4 0 4 2890 27 GeomVertexWriter::set_data4 0 2 843 844 858
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
141
inline void GeomVertexWriter::set_data4(float x, float y, float z, float w);
inline void GeomVertexWriter::set_data4(LVecBase4f const &data);

2266 10 set_data1i 0 4 2890 28 GeomVertexWriter::set_data1i 0 1 845 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
51
inline void GeomVertexWriter::set_data1i(int data);

2267 10 set_data2i 0 4 2890 28 GeomVertexWriter::set_data2i 0 1 846 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
116
inline void GeomVertexWriter::set_data2i(int a, int b);
inline void GeomVertexWriter::set_data2i(int const data[2]);

2268 10 set_data3i 0 4 2890 28 GeomVertexWriter::set_data3i 0 1 847 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
123
inline void GeomVertexWriter::set_data3i(int a, int b, int c);
inline void GeomVertexWriter::set_data3i(int const data[3]);

2269 10 set_data4i 0 4 2890 28 GeomVertexWriter::set_data4i 0 1 848 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
130
inline void GeomVertexWriter::set_data4i(int a, int b, int c, int d);
inline void GeomVertexWriter::set_data4i(int const data[4]);

2270 10 add_data1f 0 4 2890 28 GeomVertexWriter::add_data1f 0 1 849 450
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexWriter::add_data1f(float data);

2271 10 add_data2f 0 4 2890 28 GeomVertexWriter::add_data2f 0 2 850 851 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
125
inline void GeomVertexWriter::add_data2f(float x, float y);
inline void GeomVertexWriter::add_data2f(LVecBase2f const &data);

2272 10 add_data3f 0 4 2890 28 GeomVertexWriter::add_data3f 0 2 852 853 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
134
inline void GeomVertexWriter::add_data3f(float x, float y, float z);
inline void GeomVertexWriter::add_data3f(LVecBase3f const &data);

2273 10 add_data4f 0 4 2890 28 GeomVertexWriter::add_data4f 0 2 854 855 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
143
inline void GeomVertexWriter::add_data4f(float x, float y, float z, float w);
inline void GeomVertexWriter::add_data4f(LVecBase4f const &data);

2274 10 add_data1d 0 4 2890 28 GeomVertexWriter::add_data1d 0 1 856 450
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1d
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
54
inline void GeomVertexWriter::add_data1d(double data);

2275 10 add_data2d 0 4 2890 28 GeomVertexWriter::add_data2d 0 2 857 858 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
127
inline void GeomVertexWriter::add_data2d(double x, double y);
inline void GeomVertexWriter::add_data2d(LVecBase2d const &data);

2276 10 add_data3d 0 4 2890 28 GeomVertexWriter::add_data3d 0 2 859 860 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
137
inline void GeomVertexWriter::add_data3d(double x, double y, double z);
inline void GeomVertexWriter::add_data3d(LVecBase3d const &data);

2277 10 add_data4d 0 4 2890 28 GeomVertexWriter::add_data4d 0 2 861 862 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
147
inline void GeomVertexWriter::add_data4d(double x, double y, double z, double w);
inline void GeomVertexWriter::add_data4d(LVecBase4d const &data);

2278 9 add_data1 0 4 2890 27 GeomVertexWriter::add_data1 0 1 863 449
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
52
inline void GeomVertexWriter::add_data1(float data);

2279 9 add_data2 0 4 2890 27 GeomVertexWriter::add_data2 0 2 864 865 900
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
123
inline void GeomVertexWriter::add_data2(float x, float y);
inline void GeomVertexWriter::add_data2(LVecBase2f const &data);

2280 9 add_data3 0 4 2890 27 GeomVertexWriter::add_data3 0 2 866 867 900
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
132
inline void GeomVertexWriter::add_data3(float x, float y, float z);
inline void GeomVertexWriter::add_data3(LVecBase3f const &data);

2281 9 add_data4 0 4 2890 27 GeomVertexWriter::add_data4 0 2 868 869 900
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
141
inline void GeomVertexWriter::add_data4(float x, float y, float z, float w);
inline void GeomVertexWriter::add_data4(LVecBase4f const &data);

2282 10 add_data1i 0 4 2890 28 GeomVertexWriter::add_data1i 0 1 870 450
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
51
inline void GeomVertexWriter::add_data1i(int data);

2283 10 add_data2i 0 4 2890 28 GeomVertexWriter::add_data2i 0 1 871 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
116
inline void GeomVertexWriter::add_data2i(int a, int b);
inline void GeomVertexWriter::add_data2i(int const data[2]);

2284 10 add_data3i 0 4 2890 28 GeomVertexWriter::add_data3i 0 1 872 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
123
inline void GeomVertexWriter::add_data3i(int a, int b, int c);
inline void GeomVertexWriter::add_data3i(int const data[3]);

2285 10 add_data4i 0 4 2890 28 GeomVertexWriter::add_data4i 0 1 873 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
130
inline void GeomVertexWriter::add_data4i(int a, int b, int c, int d);
inline void GeomVertexWriter::add_data4i(int const data[4]);

2286 6 output 0 4 2890 24 GeomVertexWriter::output 0 1 874 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexWriter::output(ostream &out) const;

2287 26 upcast_to_GeomVertexWriter 0 12 2891 46 GeomVertexRewriter::upcast_to_GeomVertexWriter 0 1 907 50
upcast from GeomVertexRewriter to GeomVertexWriter
71
GeomVertexWriter *GeomVertexRewriter::upcast_to_GeomVertexWriter(void);

2288 30 downcast_to_GeomVertexRewriter 0 12 2890 48 GeomVertexWriter::downcast_to_GeomVertexRewriter 0 1 908 52
downcast from GeomVertexWriter to GeomVertexRewriter
75
GeomVertexRewriter *GeomVertexWriter::downcast_to_GeomVertexRewriter(void);

2289 26 upcast_to_GeomVertexReader 0 12 2891 46 GeomVertexRewriter::upcast_to_GeomVertexReader 0 1 909 50
upcast from GeomVertexRewriter to GeomVertexReader
71
GeomVertexReader *GeomVertexRewriter::upcast_to_GeomVertexReader(void);

2290 30 downcast_to_GeomVertexRewriter 0 12 2889 48 GeomVertexReader::downcast_to_GeomVertexRewriter 0 1 910 52
downcast from GeomVertexReader to GeomVertexRewriter
75
GeomVertexRewriter *GeomVertexReader::downcast_to_GeomVertexRewriter(void);

2291 18 GeomVertexRewriter 0 4 2891 38 GeomVertexRewriter::GeomVertexRewriter 0 13 875 876 877 878 879 880 881 882 883 884 885 886 887 3011
// Filename: geomVertexRewriter.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexRewriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexRewriter to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
891
inline GeomVertexRewriter::GeomVertexRewriter(Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexData *vertex_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexData *vertex_data, basic_string< char > const &name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexData *vertex_data, InternalName const *name, Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexArrayData *array_data, Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexArrayData *array_data, int column, Thread *current_thread = ((get_current_thread())));
inline GeomVertexRewriter::GeomVertexRewriter(GeomVertexRewriter const &copy);

2292 10 operator = 0 4 2891 30 GeomVertexRewriter::operator = 0 1 888 244
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void GeomVertexRewriter::operator =(GeomVertexRewriter const &copy);

2293 19 ~GeomVertexRewriter 0 4 2891 39 GeomVertexRewriter::~GeomVertexRewriter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline GeomVertexRewriter::~GeomVertexRewriter(void);

2294 15 get_vertex_data 0 4 2891 35 GeomVertexRewriter::get_vertex_data 0 1 889 315
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               rewriter is processing.
////////////////////////////////////////////////////////////////////
71
inline GeomVertexData *GeomVertexRewriter::get_vertex_data(void) const;

2295 14 get_array_data 0 4 2891 34 GeomVertexRewriter::get_array_data 0 1 890 329
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               rewriter is currently processing.
////////////////////////////////////////////////////////////////////
75
inline GeomVertexArrayData *GeomVertexRewriter::get_array_data(void) const;

2296 16 get_array_handle 0 4 2891 36 GeomVertexRewriter::get_array_handle 0 1 891 529
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array_handle
//       Access: Published
//  Description: Returns the write handle to the array object that the
//               rewriter is currently processing.  This low-level call
//               should be used with caution; be careful with
//               modifying the data in the handle out from under the
//               GeomVertexRewriter.
////////////////////////////////////////////////////////////////////
83
inline GeomVertexArrayDataHandle *GeomVertexRewriter::get_array_handle(void) const;

2297 10 get_stride 0 4 2891 30 GeomVertexRewriter::get_stride 0 1 892 463
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexRewriter directly.
////////////////////////////////////////////////////////////////////
63
inline unsigned int GeomVertexRewriter::get_stride(void) const;

2298 18 get_current_thread 0 4 2891 38 GeomVertexRewriter::get_current_thread 0 1 893 361
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
////////////////////////////////////////////////////////////////////
66
inline Thread *GeomVertexRewriter::get_current_thread(void) const;

2299 10 set_column 0 4 2891 30 GeomVertexRewriter::set_column 0 4 894 895 896 897 2654
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the indicated column
//               description on the given array.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
290
inline bool GeomVertexRewriter::set_column(int column);
inline bool GeomVertexRewriter::set_column(basic_string< char > const &name);
inline bool GeomVertexRewriter::set_column(InternalName const *name);
inline bool GeomVertexRewriter::set_column(int array, GeomVertexColumn const *column);

2300 5 clear 0 4 2891 25 GeomVertexRewriter::clear 0 1 898 276
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::clear
//       Access: Published
//  Description: Resets the GeomVertexRewriter to the initial state.
////////////////////////////////////////////////////////////////////
44
inline void GeomVertexRewriter::clear(void);

2301 10 has_column 0 4 2891 30 GeomVertexRewriter::has_column 0 1 899 366
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
////////////////////////////////////////////////////////////////////
55
inline bool GeomVertexRewriter::has_column(void) const;

2302 9 get_array 0 4 2891 29 GeomVertexRewriter::get_array 0 1 900 327
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the rewriter is working on.
////////////////////////////////////////////////////////////////////
53
inline int GeomVertexRewriter::get_array(void) const;

2303 10 get_column 0 4 2891 30 GeomVertexRewriter::get_column 0 1 901 320
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               rewriter is working on.
////////////////////////////////////////////////////////////////////
74
inline GeomVertexColumn const *GeomVertexRewriter::get_column(void) const;

2304 14 set_row_unsafe 0 4 2891 34 GeomVertexRewriter::set_row_unsafe 0 1 902 657
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
////////////////////////////////////////////////////////////////////
56
inline void GeomVertexRewriter::set_row_unsafe(int row);

2305 7 set_row 0 4 2891 27 GeomVertexRewriter::set_row 0 1 903 379
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_row
//       Access: Published
//  Description: Sets the start, write, and write index to the
//               indicated value.  The rewriter will begin traversing
//               from the given row.
////////////////////////////////////////////////////////////////////
49
inline void GeomVertexRewriter::set_row(int row);

2306 13 get_start_row 0 4 2891 33 GeomVertexRewriter::get_start_row 0 1 904 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the rewriter
//               started.  It will return to this row if you reset
//               the current column.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexRewriter::get_start_row(void) const;

2307 9 is_at_end 0 4 2891 29 GeomVertexRewriter::is_at_end 0 1 905 348
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::is_at_end
//       Access: Published
//  Description: Returns true if the reader or writer is currently at
//               the end of the list of vertices, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GeomVertexRewriter::is_at_end(void) const;

2308 6 output 0 4 2891 26 GeomVertexRewriter::output 0 1 906 226
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void GeomVertexRewriter::output(ostream &out) const;

2309 37 upcast_to_TypedWritableReferenceCount 0 12 2892 46 Texture::upcast_to_TypedWritableReferenceCount 0 1 1149 50
upcast from Texture to TypedWritableReferenceCount
82
TypedWritableReferenceCount *Texture::upcast_to_TypedWritableReferenceCount(void);

2310 19 downcast_to_Texture 0 12 2843 48 TypedWritableReferenceCount::downcast_to_Texture 0 1 1150 52
downcast from TypedWritableReferenceCount to Texture
64
Texture *TypedWritableReferenceCount::downcast_to_Texture(void);

2311 17 upcast_to_Namable 0 12 2892 26 Texture::upcast_to_Namable 0 1 1151 30
upcast from Texture to Namable
42
Namable *Texture::upcast_to_Namable(void);

2312 19 downcast_to_Texture 0 12 2829 28 Namable::downcast_to_Texture 0 1 1152 32
downcast from Namable to Texture
44
Texture *Namable::downcast_to_Texture(void);

2313 7 Texture 0 4 2892 16 Texture::Texture 0 2 911 912 763
////////////////////////////////////////////////////////////////////
//     Function: Texture::Constructor
//       Access: Published
//  Description: Constructs an empty texture.  The default is to set
//               up the texture as an empty 2-d texture; follow up
//               with one of the variants of setup_texture() if this
//               is not what you want.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::Copy Constructor
//       Access: Protected
//  Description: Use Texture::make_copy() to make a duplicate copy of
//               an existing Texture.
////////////////////////////////////////////////////////////////////
66
Texture::Texture(basic_string< char > const &name = ((string())));

2314 8 ~Texture 0 4 2892 17 Texture::~Texture 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: Texture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual Texture::~Texture(void);

2315 9 make_copy 0 4 2892 18 Texture::make_copy 0 1 913 1236
// Filename: texture.I
// Created by:  drose (05Feb99)
// Updated by: fperazzi, PandaSE(29Apr10) (added setup_2d_texture_array)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_copy
//       Access: Published
//  Description: Returns a new copy of the same Texture.  This copy,
//               if applied to geometry, will be copied into texture
//               as a separate texture from the original, so it will
//               be duplicated in texture memory (and may be
//               independently modified if desired).
//
//               If the Texture is a VideoTexture, the resulting
//               duplicate may be animated independently of the
//               original.
////////////////////////////////////////////////////////////////////
59
inline PointerTo< Texture > Texture::make_copy(void) const;

2316 5 clear 0 4 2892 14 Texture::clear 0 1 914 316
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear
//       Access: Published, Virtual
//  Description: Reinitializes the texture to its default, empty
//               state (except for the name).
////////////////////////////////////////////////////////////////////
33
inline void Texture::clear(void);

2317 13 setup_texture 0 4 2892 22 Texture::setup_texture 0 1 915 425
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_texture
//       Access: Published
//  Description: Sets the texture to the indicated type and
//               dimensions, presumably in preparation for calling
//               read() or load(), or set_ram_image() or
//               modify_ram_image().
////////////////////////////////////////////////////////////////////
169
inline void Texture::setup_texture(Texture::TextureType texture_type, int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format);

2318 16 setup_1d_texture 0 4 2892 25 Texture::setup_1d_texture 0 2 916 917 841
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
158
inline void Texture::setup_1d_texture(void);
inline void Texture::setup_1d_texture(int x_size, Texture::ComponentType component_type, Texture::Format format);

2319 16 setup_2d_texture 0 4 2892 25 Texture::setup_2d_texture 0 2 918 919 841
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
170
inline void Texture::setup_2d_texture(void);
inline void Texture::setup_2d_texture(int x_size, int y_size, Texture::ComponentType component_type, Texture::Format format);

2320 16 setup_3d_texture 0 4 2892 25 Texture::setup_3d_texture 0 3 920 921 922 957
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with no
//               dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
194
inline void Texture::setup_3d_texture(int z_size = (1));
inline void Texture::setup_3d_texture(int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format);

2321 14 setup_cube_map 0 4 2892 23 Texture::setup_cube_map 0 2 923 924 1031
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with
//               the specified dimensions and properties.  Follow up
//               with set_ram_image() or modify_ram_image() to fill
//               the image data.  
//
//               Note that a cube map should always consist of six
//               square images, so x_size and y_size will be the same,
//               and z_size is always 6.
////////////////////////////////////////////////////////////////////
152
inline void Texture::setup_cube_map(void);
inline void Texture::setup_cube_map(int size, Texture::ComponentType component_type, Texture::Format format);

2322 22 setup_2d_texture_array 0 4 2892 31 Texture::setup_2d_texture_array 0 3 925 926 927 980
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture_array
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture array with
//               no dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture_array
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture array with the
//               specified dimensions and properties. Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
206
inline void Texture::setup_2d_texture_array(int z_size = (1));
inline void Texture::setup_2d_texture_array(int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format);

2323 31 generate_normalization_cube_map 0 4 2892 40 Texture::generate_normalization_cube_map 0 1 928 601
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_normalization_cube_map
//       Access: Published
//  Description: Generates a special cube map image in the texture
//               that can be used to apply bump mapping effects: for
//               each texel in the cube map that is indexed by the 3-d
//               texture coordinates (x, y, z), the resulting value is
//               the normalized vector (x, y, z) (compressed from
//               -1..1 into 0..1).
////////////////////////////////////////////////////////////////////
56
void Texture::generate_normalization_cube_map(int size);

2324 24 generate_alpha_scale_map 0 4 2892 33 Texture::generate_alpha_scale_map 0 1 929 534
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_alpha_scale_map
//       Access: Published
//  Description: Generates a special 256x1 1-d texture that can be
//               used to apply an arbitrary alpha scale to objects by
//               judicious use of texture matrix.  The texture is a
//               gradient, with an alpha of 0 on the left (U = 0), and
//               255 on the right (U = 1).
////////////////////////////////////////////////////////////////////
45
void Texture::generate_alpha_scale_map(void);

2325 4 read 0 4 2892 13 Texture::read 0 9 930 931 932 933 934 935 936 937 938 5206
////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the named filename into the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Combine a 3-component image with a grayscale image
//               to get a 4-component image.
//
//               See the description of the full-parameter read()
//               method for the meaning of the
//               primary_file_num_channels and alpha_file_channel
//               parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads a single file into a single page or mipmap
//               level, or automatically reads a series of files into
//               a series of pages and/or mipmap levels.
//
//               See the description of the full-parameter read()
//               method for the meaning of the various parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the texture from the indicated filename.  If
//               primary_file_num_channels is not 0, it specifies the
//               number of components to downgrade the image to if it
//               is greater than this number.
//
//               If the filename has the extension .txo, this
//               implicitly reads a texture object instead of a
//               filename (which replaces all of the texture
//               properties).  In this case, all the rest of the
//               parameters are ignored, and the filename should not
//               contain any hash marks; just the one named file will
//               be read, since a single .txo file can contain all
//               pages and mipmaps necessary to define a texture.
//
//               If alpha_fullpath is not empty, it specifies the name
//               of a file from which to retrieve the alpha.  In this
//               case, alpha_file_channel represents the numeric
//               channel of this image file to use as the resulting
//               texture's alpha channel; usually, this is 0 to
//               indicate the grayscale combination of r, g, b; or it
//               may be a one-based channel number, e.g. 1 for the red
//               channel, 2 for the green channel, and so on.
//
//               If read pages is false, then z indicates the page
//               number into which this image will be assigned.
//               Normally this is 0 for the first (or only) page of
//               the texture.  3-D textures have one page for each
//               level of depth, and cube map textures always have six
//               pages.
//
//               If read_pages is true, multiple images will be read
//               at once, one for each page of a cube map or a 3-D
//               texture.  In this case, the filename should contain a
//               sequence of one or more hash marks ("#") which will
//               be filled in with the z value of each page,
//               zero-based.  In this case, the z parameter indicates
//               the maximum z value that will be loaded, or 0 to load
//               all filenames that exist.
//
//               If read_mipmaps is false, then n indicates the mipmap
//               level to which this image will be assigned.  Normally
//               this is 0 for the base texture image, but it is
//               possible to load custom mipmap levels into the later
//               images.  After the base texture image is loaded (thus
//               defining the size of the texture), you can call
//               get_expected_num_mipmap_levels() to determine the
//               maximum sensible value for n.
//
//               If read_mipmaps is true, multiple images will be read
//               as above, but this time the images represent the
//               different mipmap levels of the texture image.  In
//               this case, the n parameter indicates the maximum n
//               value that will be loaded, or 0 to load all filenames
//               that exist (up to the expected number of mipmap
//               levels).
//
//               If both read_pages and read_mipmaps is true, then
//               both sequences will be read; the filename should
//               contain two sequences of hash marks, separated by
//               some character such as a hyphen, underscore, or dot.
//               The first hash mark sequence will be filled in with
//               the mipmap level, while the second hash mark sequence
//               will be the page index.
//
//               This method implicitly sets keep_ram_image to false.
////////////////////////////////////////////////////////////////////
653
bool Texture::read(Filename const &fullpath, LoaderOptions const &options = ((())));
bool Texture::read(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, LoaderOptions const &options = ((())));
bool Texture::read(Filename const &fullpath, int z, int n, bool read_pages, bool read_mipmaps, LoaderOptions const &options = ((())));
bool Texture::read(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps, BamCacheRecord *record = ((void *)(0)), LoaderOptions const &options = ((())));

2326 5 write 0 4 2892 14 Texture::write 0 3 939 940 941 3708
////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes the texture to the named filename.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes a single page or mipmap level to a single
//               file, or automatically writes a series of pages
//               and/or mipmap levels to a numbered series of files.
//
//               If the filename ends in the extension .txo, this
//               implicitly writes a Panda texture object (.txo)
//               instead of an image file.  In this case, the
//               remaining parameters are ignored, and only one file
//               is written, which will contain all of the pages and
//               resident mipmap levels in the texture.
//
//               If write_pages is false, then z indicates the page
//               number to write.  3-D textures have one page number
//               for each level of depth; cube maps have six pages
//               number 0 through 5.  Other kinds of textures have
//               only one page, numbered 0.  If there are multiple
//               views, the range of z is increased; the total range
//               is [0, get_num_pages()).
//
//               If write_pages is true, then all pages of the texture
//               will be written.  In this case z is ignored, and the
//               filename should contain a sequence of hash marks
//               ("#") which will be filled in with the page index
//               number.
//
//               If write_mipmaps is false, then n indicates the
//               mipmap level number to write.  Normally, this is 0,
//               for the base texture image.  Normally, the mipmap
//               levels of a texture are not available in RAM (they
//               are generated automatically by the graphics card).
//               However, if you have the mipmap levels available, for
//               instance because you called
//               generate_ram_mipmap_images() to generate them
//               internally, or you called
//               GraphicsEngine::extract_texture_data() to retrieve
//               them from the graphics card, then you may write out
//               each mipmap level with this parameter.
//
//               If write_mipmaps is true, then all mipmap levels of
//               the texture will be written.  In this case n is
//               ignored, and the filename should contain a sequence
//               of hash marks ("#") which will be filled in with the
//               mipmap level number.
//
//               If both write_pages and write_mipmaps is true, then
//               all pages and all mipmap levels will be written.  In
//               this case, the filename should contain two different
//               sequences of hash marks, separated by a character
//               such as a hyphen, underscore, or dot.  The first hash
//               mark sequence will be filled in with the mipmap
//               level, while the second hash mark sequence will be
//               the page index.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Not to be confused with write(Filename), this method
//               simply describes the texture properties.
////////////////////////////////////////////////////////////////////
218
inline bool Texture::write(Filename const &fullpath);
inline bool Texture::write(Filename const &fullpath, int z, int n, bool write_pages, bool write_mipmaps);
void Texture::write(ostream &out, int indent_level) const;

2327 8 read_txo 0 4 2892 17 Texture::read_txo 0 2 942 943 692
////////////////////////////////////////////////////////////////////
//     Function: Texture::read_txo
//       Access: Published
//  Description: Reads the texture from a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//               This only works if the txo file contains a static
//               Texture image, as opposed to a subclass of Texture
//               such as a movie texture.
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
////////////////////////////////////////////////////////////////////
81
bool Texture::read_txo(istream &in, basic_string< char > const &filename = (""));

2328 13 make_from_txo 0 4 2892 22 Texture::make_from_txo 0 2 944 945 621
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_from_txo
//       Access: Published, Static
//  Description: Constructs a new Texture object from the txo file.
//               This is similar to Texture::read_txo(), but it
//               constructs and returns a new object, which allows it
//               to return a subclass of Texture (for instance, a
//               movie texture).
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
////////////////////////////////////////////////////////////////////
109
static PointerTo< Texture > Texture::make_from_txo(istream &in, basic_string< char > const &filename = (""));

2329 9 write_txo 0 4 2892 18 Texture::write_txo 0 2 946 947 463
////////////////////////////////////////////////////////////////////
//     Function: Texture::write_txo
//       Access: Published
//  Description: Writes the texture to a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//
//               The filename is just for reference.
////////////////////////////////////////////////////////////////////
89
bool Texture::write_txo(ostream &out, basic_string< char > const &filename = ("")) const;

2330 8 read_dds 0 4 2892 17 Texture::read_dds 0 3 948 949 950 674
////////////////////////////////////////////////////////////////////
//     Function: Texture::read_dds
//       Access: Published
//  Description: Reads the texture from a DDS file object.  This is a
//               Microsoft-defined file format; it is similar in
//               principle to a txo object, in that it is designed to
//               contain the texture image in a form as similar as
//               possible to its runtime image, and it can contain
//               mipmaps, pre-compressed textures, and so on.
//
//               As with read_txo, the filename is just for reference.
////////////////////////////////////////////////////////////////////
105
bool Texture::read_dds(istream &in, basic_string< char > const &filename = (""), bool header_only = (0));

2331 4 load 0 4 2892 13 Texture::load 0 4 951 952 953 954 566
////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Replaces the texture with the indicated image.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Stores the indicated image in the given page and
//               mipmap level.  See read().
////////////////////////////////////////////////////////////////////
197
inline bool Texture::load(PNMImage const &pnmimage, LoaderOptions const &options = ((())));
inline bool Texture::load(PNMImage const &pnmimage, int z, int n, LoaderOptions const &options = ((())));

2332 5 store 0 4 2892 14 Texture::store 0 2 955 956 612
////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the texture to the indicated PNMImage, but does
//               not write it to disk.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the indicated page and mipmap level of the
//               texture to the PNMImage.
////////////////////////////////////////////////////////////////////
121
inline bool Texture::store(PNMImage &pnmimage) const;
inline bool Texture::store(PNMImage &pnmimage, int z, int n) const;

2333 6 reload 0 4 2892 15 Texture::reload 0 1 957 532
////////////////////////////////////////////////////////////////////
//     Function: Texture::reload
//       Access: Published
//  Description: Re-reads the Texture from its disk file.  Useful when
//               you know the image on disk has recently changed, and
//               you want to update the Texture image.
//
//               Returns true on success, false on failure (in which
//               case, the Texture may or may not still be valid).
////////////////////////////////////////////////////////////////////
34
inline bool Texture::reload(void);

2334 12 load_related 0 4 2892 21 Texture::load_related 0 1 958 444
////////////////////////////////////////////////////////////////////
//     Function: Texture::load_related
//       Access: Published
//  Description: Loads a texture whose filename is derived by
//               concatenating a suffix to the filename of this
//               texture.  May return NULL, for example, if this
//               texture doesn't have a filename.
////////////////////////////////////////////////////////////////////
65
Texture *Texture::load_related(InternalName const *suffix) const;

2335 12 has_filename 0 4 2892 21 Texture::has_filename 0 1 959 318
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_filename
//       Access: Published
//  Description: Returns true if the filename has been set and
//               is available.  See set_filename().
////////////////////////////////////////////////////////////////////
46
inline bool Texture::has_filename(void) const;

2336 12 get_filename 0 4 2892 21 Texture::get_filename 0 1 960 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_filename
//       Access: Published
//  Description: Returns the filename that has been set.  This is the
//               name of the file as it was requested.  Also see
//               get_fullpath().
////////////////////////////////////////////////////////////////////
57
inline Filename const &Texture::get_filename(void) const;

2337 18 has_alpha_filename 0 4 2892 27 Texture::has_alpha_filename 0 1 961 336
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_filename
//       Access: Published
//  Description: Returns true if the alpha_filename has been set and
//               is available.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
52
inline bool Texture::has_alpha_filename(void) const;

2338 18 get_alpha_filename 0 4 2892 27 Texture::get_alpha_filename 0 1 962 475
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_filename
//       Access: Published
//  Description: Returns the alpha_filename that has been set.  If
//               this is set, it represents the name of the alpha
//               component, which is stored in a separate file.  See
//               also get_filename(), and get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
63
inline Filename const &Texture::get_alpha_filename(void) const;

2339 12 has_fullpath 0 4 2892 21 Texture::has_fullpath 0 1 963 318
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_fullpath
//       Access: Published
//  Description: Returns true if the fullpath has been set and
//               is available.  See set_fullpath().
////////////////////////////////////////////////////////////////////
46
inline bool Texture::has_fullpath(void) const;

2340 12 get_fullpath 0 4 2892 21 Texture::get_fullpath 0 1 964 376
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_fullpath
//       Access: Published
//  Description: Returns the fullpath that has been set.  This is the
//               full path to the file as it was found along the
//               texture search path.
////////////////////////////////////////////////////////////////////
57
inline Filename const &Texture::get_fullpath(void) const;

2341 18 has_alpha_fullpath 0 4 2892 27 Texture::has_alpha_fullpath 0 1 965 336
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_fullpath
//       Access: Published
//  Description: Returns true if the alpha_fullpath has been set and
//               is available.  See set_alpha_fullpath().
////////////////////////////////////////////////////////////////////
52
inline bool Texture::has_alpha_fullpath(void) const;

2342 18 get_alpha_fullpath 0 4 2892 27 Texture::get_alpha_fullpath 0 1 966 430
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_fullpath
//       Access: Published
//  Description: 
//               Returns the alpha_fullpath that has been set.  This
//               is the full path to the alpha part of the image file
//               as it was found along the texture search path.
////////////////////////////////////////////////////////////////////
63
inline Filename const &Texture::get_alpha_fullpath(void) const;

2343 10 get_x_size 0 4 2892 19 Texture::get_x_size 0 1 967 268
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_x_size
//       Access: Published
//  Description: Returns the width of the texture image in texels.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_x_size(void) const;

2344 10 get_y_size 0 4 2892 19 Texture::get_y_size 0 1 968 321
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_y_size
//       Access: Published
//  Description: Returns the height of the texture image in texels.
//               For a 1-d texture, this will be 1.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_y_size(void) const;

2345 10 get_z_size 0 4 2892 19 Texture::get_z_size 0 1 969 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_z_size
//       Access: Published
//  Description: Returns the depth of the texture image in texels.
//               For a 1-d texture or 2-d texture, this will be 1.
//               For a cube map texture, this will be 6.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_z_size(void) const;

2346 13 get_num_views 0 4 2892 22 Texture::get_num_views 0 1 970 758
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_views
//       Access: Published
//  Description: Returns the number of "views" in the texture.  A view
//               is a completely separate image stored within the
//               Texture object.  Most textures have only one view,
//               but a stereo texture, for instance, may have two
//               views, a left and a right image.  Other uses for
//               multiple views are not yet defined.
//
//               If this value is greater than one, the additional
//               views are accessed as additional pages beyond
//               get_z_size().
////////////////////////////////////////////////////////////////////
46
inline int Texture::get_num_views(void) const;

2347 13 get_num_pages 0 4 2892 22 Texture::get_num_pages 0 1 971 604
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_pages
//       Access: Published
//  Description: Returns the total number of pages in the texture.  
//               Each "page" is a 2-d texture image within the larger
//               image--a face of a cube map, or a level of a 3-d
//               texture.  Normally, get_num_pages() is the same as
//               get_z_size().  However, in a multiview texture, this
//               returns get_z_size() * get_num_views().
////////////////////////////////////////////////////////////////////
46
inline int Texture::get_num_pages(void) const;

2348 18 get_num_components 0 4 2892 27 Texture::get_num_components 0 1 972 456
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_components
//       Access: Published
//  Description: Returns the number of color components for each texel
//               of the texture image.  This is 3 for an rgb texture
//               or 4 for an rgba texture; it may also be 1 or 2 for a
//               grayscale texture.
////////////////////////////////////////////////////////////////////
51
inline int Texture::get_num_components(void) const;

2349 19 get_component_width 0 4 2892 28 Texture::get_component_width 0 1 973 390
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_width
//       Access: Published
//  Description: Returns the number of bytes stored for each color
//               component of a texel.  Typically this is 1, but it
//               may be 2 for 16-bit texels.
////////////////////////////////////////////////////////////////////
52
inline int Texture::get_component_width(void) const;

2350 16 get_texture_type 0 4 2892 25 Texture::get_texture_type 0 1 974 275
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_texture_type
//       Access: Published
//  Description: Returns the overall interpretation of the texture.
////////////////////////////////////////////////////////////////////
66
inline Texture::TextureType Texture::get_texture_type(void) const;

2351 10 get_format 0 4 2892 19 Texture::get_format 0 1 975 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_format
//       Access: Published
//  Description: Returns the format of the texture, which represents
//               both the semantic meaning of the texels and, to some
//               extent, their storage information.
////////////////////////////////////////////////////////////////////
55
inline Texture::Format Texture::get_format(void) const;

2352 18 get_component_type 0 4 2892 27 Texture::get_component_type 0 1 976 312
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_type
//       Access: Published
//  Description: Returns the numeric interpretation of each component
//               of the texture.
////////////////////////////////////////////////////////////////////
70
inline Texture::ComponentType Texture::get_component_type(void) const;

2353 10 set_wrap_u 0 4 2892 19 Texture::set_wrap_u 0 1 977 218
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Texture::set_wrap_u(Texture::WrapMode wrap);

2354 10 set_wrap_v 0 4 2892 19 Texture::set_wrap_v 0 1 978 218
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Texture::set_wrap_v(Texture::WrapMode wrap);

2355 10 set_wrap_w 0 4 2892 19 Texture::set_wrap_w 0 1 979 270
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_w
//       Access: Published
//  Description: The W wrap direction is only used for 3-d textures.
////////////////////////////////////////////////////////////////////
56
inline void Texture::set_wrap_w(Texture::WrapMode wrap);

2356 13 set_minfilter 0 4 2892 22 Texture::set_minfilter 0 1 980 221
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void Texture::set_minfilter(Texture::FilterType filter);

2357 13 set_magfilter 0 4 2892 22 Texture::set_magfilter 0 1 981 221
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void Texture::set_magfilter(Texture::FilterType filter);

2358 22 set_anisotropic_degree 0 4 2892 31 Texture::set_anisotropic_degree 0 1 982 733
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_anisotropic_degree
//       Access: Published
//  Description: Specifies the level of anisotropic filtering to apply
//               to the texture.  Set this 0 to indicate the default
//               value, which is specified in the
//               texture-anisotropic-degree config variable.
//
//               To explicitly disable anisotropic filtering, set this
//               value to 1.  To explicitly enable anisotropic
//               filtering, set it to a value higher than 1; larger
//               numbers indicate greater degrees of filtering.
////////////////////////////////////////////////////////////////////
68
inline void Texture::set_anisotropic_degree(int anisotropic_degree);

2359 16 set_border_color 0 4 2892 25 Texture::set_border_color 0 1 983 446
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_border_color
//       Access: Published
//  Description: Specifies the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
////////////////////////////////////////////////////////////////////
63
inline void Texture::set_border_color(LVecBase4f const &color);

2360 15 set_compression 0 4 2892 24 Texture::set_compression 0 1 984 1037
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_compression
//       Access: Published
//  Description: Requests that this particular Texture be compressed
//               when it is loaded into texture memory.  
//
//               This refers to the internal compression of the
//               texture image within texture memory; it is not
//               related to jpeg or png compression, which are disk
//               file compression formats.  The actual disk file that
//               generated this texture may be stored in a compressed
//               or uncompressed format supported by Panda; it will be
//               decompressed on load, and then recompressed by the
//               graphics API if this parameter is not CM_off.
//
//               If the GSG does not support this texture compression
//               mode, the texture will silently be loaded
//               uncompressed.
////////////////////////////////////////////////////////////////////
75
inline void Texture::set_compression(Texture::CompressionMode compression);

2361 21 set_render_to_texture 0 4 2892 30 Texture::set_render_to_texture 0 1 985 905
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_render_to_texture
//       Access: Published
//  Description: Sets a flag on the texture that indicates whether the
//               texture is intended to be used as a direct-render
//               target, by binding a framebuffer to a texture and
//               rendering directly into the texture.
//
//               This controls some low-level choices made about the
//               texture object itself.  For instance, compressed
//               textures are disallowed when this flag is set true.
//
//               Normally, a user should not need to set this flag
//               directly; it is set automatically by the low-level
//               display code when a texture is bound to a
//               framebuffer.
////////////////////////////////////////////////////////////////////
67
inline void Texture::set_render_to_texture(bool render_to_texture);

2362 10 get_wrap_u 0 4 2892 19 Texture::get_wrap_u 0 1 986 292
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_u
//       Access: Published
//  Description: Returns the wrap mode of the texture in the U
//               direction.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_u(void) const;

2363 10 get_wrap_v 0 4 2892 19 Texture::get_wrap_v 0 1 987 292
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_v
//       Access: Published
//  Description: Returns the wrap mode of the texture in the V
//               direction.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_v(void) const;

2364 10 get_wrap_w 0 4 2892 19 Texture::get_wrap_w 0 1 988 355
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_w
//       Access: Published
//  Description: Returns the wrap mode of the texture in the W
//               direction.  This is the depth direction of 3-d
//               textures.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_w(void) const;

2365 13 get_minfilter 0 4 2892 22 Texture::get_minfilter 0 1 989 487
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_minfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               minification.  If this is one of the mipmap
//               constants, then the texture requires mipmaps.  This
//               may return FT_default; see also
//               get_effective_minfilter().
////////////////////////////////////////////////////////////////////
62
inline Texture::FilterType Texture::get_minfilter(void) const;

2366 13 get_magfilter 0 4 2892 22 Texture::get_magfilter 0 1 990 435
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_magfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               magnification.  The mipmap constants are invalid
//               here.  This may return FT_default; see also
//               get_effective_minfilter().
////////////////////////////////////////////////////////////////////
62
inline Texture::FilterType Texture::get_magfilter(void) const;

2367 23 get_effective_minfilter 0 4 2892 32 Texture::get_effective_minfilter 0 1 991 465
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_minfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               minification, with special treatment for FT_default.
//               This will normally not return FT_default, unless
//               there is an error in the config file.
////////////////////////////////////////////////////////////////////
65
Texture::FilterType Texture::get_effective_minfilter(void) const;

2368 23 get_effective_magfilter 0 4 2892 32 Texture::get_effective_magfilter 0 1 992 466
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_magfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               magnification, with special treatment for FT_default.
//               This will normally not return FT_default, unless
//               there is an error in the config file.
////////////////////////////////////////////////////////////////////
65
Texture::FilterType Texture::get_effective_magfilter(void) const;

2369 22 get_anisotropic_degree 0 4 2892 31 Texture::get_anisotropic_degree 0 1 993 463
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the degree of anisotropic filtering that
//               should be applied to the texture.  This value may
//               return 0, indicating the default value; see also
//               get_effective_anisotropic_degree.
////////////////////////////////////////////////////////////////////
55
inline int Texture::get_anisotropic_degree(void) const;

2370 32 get_effective_anisotropic_degree 0 4 2892 41 Texture::get_effective_anisotropic_degree 0 1 994 459
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_anisotropic_degree
//       Access: Published
//  Description: Returns the degree of anisotropic filtering that
//               should be applied to the texture.  This value will
//               normally not return 0, unless there is an error in
//               the config file.
////////////////////////////////////////////////////////////////////
65
inline int Texture::get_effective_anisotropic_degree(void) const;

2371 16 get_border_color 0 4 2892 25 Texture::get_border_color 0 1 995 444
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_border_color
//       Access: Published
//  Description: Returns the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4f Texture::get_border_color(void) const;

2372 15 get_compression 0 4 2892 24 Texture::get_compression 0 1 996 765
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_compression
//       Access: Published
//  Description: Returns the compression mode requested for this
//               particular texture, or CM_off if the texture is not
//               to be compressed.
//
//               If a value other than CM_off is returned, this is
//               not a guarantee that the texture is actually
//               successfully compressed on the GSG.  It may be that
//               the GSG does not support the requested compression
//               mode, in which case the texture may actually be
//               stored uncompressed in texture memory.
////////////////////////////////////////////////////////////////////
69
inline Texture::CompressionMode Texture::get_compression(void) const;

2373 15 has_compression 0 4 2892 24 Texture::has_compression 0 1 997 764
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_compression
//       Access: Published
//  Description: Returns true if the texture indicates it wants to be
//               compressed, either with CM_on or higher, or
//               CM_default and compressed-textures is true.
//
//               If true returned, this is not a guarantee that the
//               texture is actually successfully compressed on the
//               GSG.  It may be that the GSG does not support the
//               requested compression mode, in which case the texture
//               may actually be stored uncompressed in texture
//               memory.
////////////////////////////////////////////////////////////////////
49
inline bool Texture::has_compression(void) const;

2374 21 get_render_to_texture 0 4 2892 30 Texture::get_render_to_texture 0 1 998 701
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_render_to_texture
//       Access: Published
//  Description: Returns a flag on the texture that indicates whether the
//               texture is intended to be used as a direct-render
//               target, by binding a framebuffer to a texture and
//               rendering directly into the texture.
//
//               Normally, a user should not need to set this flag
//               directly; it is set automatically by the low-level
//               display code when a texture is bound to a
//               framebuffer.
////////////////////////////////////////////////////////////////////
55
inline bool Texture::get_render_to_texture(void) const;

2375 12 uses_mipmaps 0 4 2892 21 Texture::uses_mipmaps 0 1 999 355
////////////////////////////////////////////////////////////////////
//     Function: Texture::uses_mipmaps
//       Access: Public
//  Description: Returns true if the minfilter settings on this
//               texture indicate the use of mipmapping, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Texture::uses_mipmaps(void) const;

2376 17 set_quality_level 0 4 2892 26 Texture::set_quality_level 0 1 1000 535
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_quality_level
//       Access: Public
//  Description: Sets a hint to the renderer about the desired
//               performance / quality tradeoff for this particular
//               texture.  This is most useful for the tinydisplay
//               software renderer; for normal, hardware-accelerated
//               renderers, this may have little or no effect.
////////////////////////////////////////////////////////////////////
76
inline void Texture::set_quality_level(Texture::QualityLevel quality_level);

2377 17 get_quality_level 0 4 2892 26 Texture::get_quality_level 0 1 1001 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_quality_level
//       Access: Public
//  Description: Returns the current quality_level hint.  See
//               set_quality_level().  This value may return
//               QL_default; see get_effective_quality_level().
////////////////////////////////////////////////////////////////////
68
inline Texture::QualityLevel Texture::get_quality_level(void) const;

2378 27 get_effective_quality_level 0 4 2892 36 Texture::get_effective_quality_level 0 1 1002 519
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_quality_level
//       Access: Public
//  Description: Returns the current quality_level hint, or the global
//               default quality_level if this texture doesn't specify
//               a quality level.  This value will not normally return
//               QL_default (unless there is an error in the config
//               file)
////////////////////////////////////////////////////////////////////
78
inline Texture::QualityLevel Texture::get_effective_quality_level(void) const;

2379 30 get_expected_num_mipmap_levels 0 4 2892 39 Texture::get_expected_num_mipmap_levels 0 1 1003 536
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_num_mipmap_levels
//       Access: Published
//  Description: Returns the number of mipmap levels that should be
//               defined for this texture, given the texture's size.
//
//               Note that this returns a number appropriate for
//               mipmapping, even if the texture does not currently
//               have mipmapping enabled.
////////////////////////////////////////////////////////////////////
63
inline int Texture::get_expected_num_mipmap_levels(void) const;

2380 26 get_expected_mipmap_x_size 0 4 2892 35 Texture::get_expected_mipmap_x_size 0 1 1004 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_x_size
//       Access: Published
//  Description: Returns the x_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
60
inline int Texture::get_expected_mipmap_x_size(int n) const;

2381 26 get_expected_mipmap_y_size 0 4 2892 35 Texture::get_expected_mipmap_y_size 0 1 1005 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_y_size
//       Access: Published
//  Description: Returns the y_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
60
inline int Texture::get_expected_mipmap_y_size(int n) const;

2382 26 get_expected_mipmap_z_size 0 4 2892 35 Texture::get_expected_mipmap_z_size 0 1 1006 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_z_size
//       Access: Published
//  Description: Returns the z_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
60
inline int Texture::get_expected_mipmap_z_size(int n) const;

2383 29 get_expected_mipmap_num_pages 0 4 2892 38 Texture::get_expected_mipmap_num_pages 0 1 1007 566
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_num_pages
//       Access: Published
//  Description: Returns the total number of pages that the nth mipmap
//               level should have, based on the texture's size.  This
//               is usually the same as get_expected_mipmap_z_size(),
//               except for a multiview texture, in which case it is
//               get_expected_mipmap_z_size() * get_num_views().
////////////////////////////////////////////////////////////////////
63
inline int Texture::get_expected_mipmap_num_pages(int n) const;

2384 13 has_ram_image 0 4 2892 22 Texture::has_ram_image 0 1 1008 1616
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_image
//       Access: Published
//  Description: Returns true if the Texture has its image contents
//               available in main RAM, false if it exists only in
//               texture memory or in the prepared GSG context.
//
//               Note that this has nothing to do with whether
//               get_ram_image() will fail or not.  Even if
//               has_ram_image() returns false, get_ram_image() may
//               still return a valid RAM image, because
//               get_ram_image() will automatically load the texture
//               from disk if necessary.  The only thing
//               has_ram_image() tells you is whether the texture is
//               available right now without hitting the disk first.
//
//               Note also that if an application uses only one GSG,
//               it may appear that has_ram_image() returns true if
//               the texture has not yet been loaded by the GSG, but
//               this correlation is not true in general and should
//               not be depended on.  Specifically, if an application
//               ever uses multiple GSG's in its lifetime (for
//               instance, by opening more than one window, or by
//               closing its window and opening another one later),
//               then has_ram_image() may well return false on
//               textures that have never been loaded on the current
//               GSG.
////////////////////////////////////////////////////////////////////
47
inline bool Texture::has_ram_image(void) const;

2385 26 has_uncompressed_ram_image 0 4 2892 35 Texture::has_uncompressed_ram_image 0 1 1009 401
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_uncompressed_ram_image
//       Access: Published
//  Description: Returns true if the Texture has its image contents
//               available in main RAM and is uncompressed, false
//               otherwise.  See has_ram_image().
////////////////////////////////////////////////////////////////////
60
inline bool Texture::has_uncompressed_ram_image(void) const;

2386 20 might_have_ram_image 0 4 2892 29 Texture::might_have_ram_image 0 1 1010 578
////////////////////////////////////////////////////////////////////
//     Function: Texture::might_have_ram_image
//       Access: Published
//  Description: Returns true if the texture's image contents are
//               currently available in main RAM, or there is reason
//               to believe it can be loaded on demand.  That is, this
//               function returns a "best guess" as to whether
//               get_ram_image() will succeed without actually calling
//               it first.
////////////////////////////////////////////////////////////////////
54
inline bool Texture::might_have_ram_image(void) const;

2387 18 get_ram_image_size 0 4 2892 27 Texture::get_ram_image_size 0 1 1011 388
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_size
//       Access: Published
//  Description: Returns the total number of bytes used by the
//               in-memory image, across all pages and views, or 0 if
//               there is no in-memory image.
////////////////////////////////////////////////////////////////////
60
inline unsigned int Texture::get_ram_image_size(void) const;

2388 17 get_ram_view_size 0 4 2892 26 Texture::get_ram_view_size 0 1 1012 467
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_view_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per view, or 0 if there is no in-memory image.
//               Since each view is a stack of z_size pages, this is
//               get_z_size() * get_ram_page_size().
////////////////////////////////////////////////////////////////////
59
inline unsigned int Texture::get_ram_view_size(void) const;

2389 17 get_ram_page_size 0 4 2892 26 Texture::get_ram_page_size 0 1 1013 647
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page, or 0 if there is no in-memory image.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
////////////////////////////////////////////////////////////////////
59
inline unsigned int Texture::get_ram_page_size(void) const;

2390 27 get_expected_ram_image_size 0 4 2892 36 Texture::get_expected_ram_image_size 0 1 1014 378
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image, based on the texture
//               parameters.
////////////////////////////////////////////////////////////////////
69
inline unsigned int Texture::get_expected_ram_image_size(void) const;

2391 26 get_expected_ram_page_size 0 4 2892 35 Texture::get_expected_ram_page_size 0 1 1015 447
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture.  For a 2-d or 1-d
//               texture, this is the same as
//               get_expected_ram_image_size().
////////////////////////////////////////////////////////////////////
68
inline unsigned int Texture::get_expected_ram_page_size(void) const;

2392 13 get_ram_image 0 4 2892 22 Texture::get_ram_image 0 1 1016 1676
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               texture.  If the texture does not currently have an
//               associated RAM image, and the texture was generated
//               by loading an image from a disk file (the most common
//               case), this forces the reload of the same texture.
//               This can happen if keep_texture_ram is configured to
//               false, and we have previously prepared this texture
//               with a GSG.
//
//               Note that it is not correct to call has_ram_image()
//               first to test whether this function will fail.  A
//               false return value from has_ram_image() indicates
//               only that get_ram_image() may need to reload the
//               texture from disk, which it will do automatically.
//               However, you can call might_have_ram_image(), which
//               will return true if the ram image exists, or there is
//               a reasonable reason to believe it can be loaded.
//
//               On the other hand, it is possible that the texture
//               cannot be found on disk or is otherwise unavailable.
//               If that happens, this function will return NULL.
//               There is no way to predict with 100% accuracy whether
//               get_ram_image() will return NULL without calling it
//               first; might_have_ram_image() is the closest.
////////////////////////////////////////////////////////////////////
73
inline ConstPointerToArray< unsigned char > Texture::get_ram_image(void);

2393 25 get_ram_image_compression 0 4 2892 34 Texture::get_ram_image_compression 0 1 1017 633
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_compression
//       Access: Published
//  Description: Returns the compression mode in which the ram image
//               is already stored pre-compressed.  If this is other
//               than CM_off, you cannot rely on the contents of the
//               ram image to be anything predicatable (it will not be
//               an array of x by y pixels, and it probably won't have
//               the same length as get_expected_ram_image_size()).
////////////////////////////////////////////////////////////////////
79
inline Texture::CompressionMode Texture::get_ram_image_compression(void) const;

2394 26 get_uncompressed_ram_image 0 4 2892 35 Texture::get_uncompressed_ram_image 0 1 1018 973
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_uncompressed_ram_image
//       Access: Published
//  Description: Returns the system-RAM image associated with the
//               texture, in an uncompressed form if at all possible.
//
//               If get_ram_image_compression() is CM_off, then the
//               system-RAM image is already uncompressed, and this
//               returns the same thing as get_ram_image().
//
//               If get_ram_image_compression() is anything else, then
//               the system-RAM image is compressed.  In this case,
//               the image will be reloaded from the *original* file
//               (not from the cache), in the hopes that an
//               uncompressed image will be found there.
//
//               If an uncompressed image cannot be found, returns
//               NULL.
////////////////////////////////////////////////////////////////////
86
inline ConstPointerToArray< unsigned char > Texture::get_uncompressed_ram_image(void);

2395 16 get_ram_image_as 0 4 2892 25 Texture::get_ram_image_as 0 1 1019 1762
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_as
//       Access: Published
//  Description: Returns the uncompressed system-RAM image data
//               associated with the texture. Rather than
//               just returning a pointer to the data, like
//               get_uncompressed_ram_image, this function first
//               processes the data and reorders the components
//               using the specified format string, and places these
//               into a new char array. The 'format' argument should
//               specify in which order the components of the texture
//               must be. For example, valid format strings are
//               "RGBA", "GA", "ABRG" or "AAA". A component can
//               also be written as "0" or "1", which means an
//               empty/black or a full/white channel, respectively.
//               This function is particularly useful to
//               copy an image in-memory to a different library
//               (for example, PIL or wxWidgets) that require
//               a different component order than Panda's internal
//               format, BGRA. Note, however, that this conversion
//               can still be too slow if you want to do it every
//               frame, and should thus be avoided for that purpose.
//               The only requirement for the reordering is that
//               an uncompressed image must be available. If the
//               RAM image is compressed, it will attempt to re-load
//               the texture from disk, if it doesn't find an
//               uncompressed image there, it will return NULL.
////////////////////////////////////////////////////////////////////
109
ConstPointerToArray< unsigned char > Texture::get_ram_image_as(basic_string< char > const &requested_format);

2396 16 modify_ram_image 0 4 2892 25 Texture::modify_ram_image 0 1 1020 517
////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image.
//               This assumes the RAM image should be uncompressed.
//               If the RAM image has been dumped, or is stored
//               compressed, creates a new one.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
71
inline PointerToArray< unsigned char > Texture::modify_ram_image(void);

2397 14 make_ram_image 0 4 2892 23 Texture::make_ram_image 0 1 1021 455
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               texture, if any, and allocates a new buffer of the
//               appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
69
inline PointerToArray< unsigned char > Texture::make_ram_image(void);

2398 13 set_ram_image 0 4 2892 22 Texture::set_ram_image 0 3 1022 1023 1024 501
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data.  If compression is not CM_off, it indicates
//               that the new data is already pre-compressed in the
//               indicated format.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
158
inline void Texture::set_ram_image(ConstPointerToArray< unsigned char > image, Texture::CompressionMode compression = (CM_off), unsigned int page_size = (0));

2399 16 set_ram_image_as 0 4 2892 25 Texture::set_ram_image_as 0 1 1025 597
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image_as
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data, converting it first if necessary from the
//               indicated component-order format.  See
//               get_ram_image_as() for specifications about the
//               format.  This method cannot support compressed image
//               data or sub-pages; use set_ram_image() for that.
////////////////////////////////////////////////////////////////////
120
void Texture::set_ram_image_as(ConstPointerToArray< unsigned char > image, basic_string< char > const &provided_format);

2400 15 clear_ram_image 0 4 2892 24 Texture::clear_ram_image 0 1 1026 262
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image.
////////////////////////////////////////////////////////////////////
43
inline void Texture::clear_ram_image(void);

2401 18 set_keep_ram_image 0 4 2892 27 Texture::set_keep_ram_image 0 1 1027 827
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_keep_ram_image
//       Access: Published
//  Description: Sets the flag that indicates whether this Texture is
//               eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.
//
//               This will be false for most textures, which can
//               reload their images if needed by rereading the input
//               file.  However, textures that were generated
//               dynamically and cannot be easily reloaded will want
//               to set this flag to true, so that the texture will
//               always keep its image copy around.
////////////////////////////////////////////////////////////////////
61
inline void Texture::set_keep_ram_image(bool keep_ram_image);

2402 18 get_keep_ram_image 0 4 2892 27 Texture::get_keep_ram_image 0 1 1028 477
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
////////////////////////////////////////////////////////////////////
53
virtual bool Texture::get_keep_ram_image(void) const;

2403 12 is_cacheable 0 4 2892 21 Texture::is_cacheable 0 1 1029 464
////////////////////////////////////////////////////////////////////
//     Function: Texture::is_cacheable
//       Access: Published, Virtual
//  Description: Returns true if there is enough information in this
//               Texture object to write it to the bam cache
//               successfully, false otherwise.  For most textures,
//               this is the same as has_ram_image().
////////////////////////////////////////////////////////////////////
47
virtual bool Texture::is_cacheable(void) const;

2404 18 compress_ram_image 0 4 2892 27 Texture::compress_ram_image 0 4 1030 1031 1032 1033 1257
////////////////////////////////////////////////////////////////////
//     Function: Texture::compress_ram_image
//       Access: Published
//  Description: Attempts to compress the texture's RAM image
//               internally, to a format supported by the indicated
//               GSG.  In order for this to work, the squish library
//               must have been compiled into Panda.
//
//               If compression is CM_on, then an appropriate
//               compression method that is supported by the indicated
//               GSG is automatically chosen.  If the GSG pointer is
//               NULL, any of the standard DXT1/3/5 compression
//               methods will be used, regardless of whether it is
//               supported.
//
//               If compression is any specific compression method,
//               that method is used regardless of whether the GSG
//               supports it.
//
//               quality_level determines the speed/quality tradeoff
//               of the compression.  If it is QL_default, the
//               texture's own quality_level parameter is used.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
188
inline bool Texture::compress_ram_image(Texture::CompressionMode compression = (CM_on), Texture::QualityLevel quality_level = (QL_default), GraphicsStateGuardianBase *gsg = ((void *)(0)));

2405 20 uncompress_ram_image 0 4 2892 29 Texture::uncompress_ram_image 0 1 1034 573
////////////////////////////////////////////////////////////////////
//     Function: Texture::uncompress_ram_image
//       Access: Published
//  Description: Attempts to uncompress the texture's RAM image
//               internally.  In order for this to work, the squish
//               library must have been compiled into Panda, and the
//               ram image must be compressed in a format supported by
//               squish.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool Texture::uncompress_ram_image(void);

2406 25 get_num_ram_mipmap_images 0 4 2892 34 Texture::get_num_ram_mipmap_images 0 1 1035 584
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_ram_mipmap_images
//       Access: Published
//  Description: Returns the maximum number of mipmap level images
//               available in system memory.  The actual number may be
//               less than this (that is, there might be gaps in the
//               sequence); use has_ram_mipmap_image() to verify each
//               level.
//
//               Also see get_num_loadable_ram_mipmap_images().
////////////////////////////////////////////////////////////////////
58
inline int Texture::get_num_ram_mipmap_images(void) const;

2407 20 has_ram_mipmap_image 0 4 2892 29 Texture::has_ram_mipmap_image 0 1 1036 608
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_mipmap_image
//       Access: Published
//  Description: Returns true if the Texture has the nth mipmap level
//               available in system memory, false otherwise.  If the
//               texture's minfilter mode requires mipmapping (see
//               uses_mipmaps()), and all the texture's mipmap levels
//               are not available when the texture is rendered, they
//               will be generated automatically.
////////////////////////////////////////////////////////////////////
55
inline bool Texture::has_ram_mipmap_image(int n) const;

2408 34 get_num_loadable_ram_mipmap_images 0 4 2892 43 Texture::get_num_loadable_ram_mipmap_images 0 1 1037 955
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_loadable_ram_mipmap_images
//       Access: Published
//  Description: Returns the number of contiguous mipmap levels that
//               exist in RAM, up until the first gap in the sequence.
//               It is guaranteed that at least mipmap levels [0,
//               get_num_ram_mipmap_images()) exist.
//
//               The number returned will never exceed the number of
//               required mipmap images based on the size of the
//               texture and its filter mode.
//
//               This method is different from
//               get_num_ram_mipmap_images() in that it returns only
//               the number of mipmap levels that can actually be
//               usefully loaded, regardless of the actual number that
//               may be stored.
////////////////////////////////////////////////////////////////////
60
int Texture::get_num_loadable_ram_mipmap_images(void) const;

2409 25 has_all_ram_mipmap_images 0 4 2892 34 Texture::has_all_ram_mipmap_images 0 1 1038 403
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_all_ram_mipmap_images
//       Access: Published
//  Description: Returns true if all expected mipmap levels have been
//               defined and exist in the system RAM, or false if even
//               one mipmap level is missing.
////////////////////////////////////////////////////////////////////
59
inline bool Texture::has_all_ram_mipmap_images(void) const;

2410 25 get_ram_mipmap_image_size 0 4 2892 34 Texture::get_ram_mipmap_image_size 0 1 1039 402
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image for mipmap level n, or 0 if there is no
//               in-memory image for this mipmap level.
////////////////////////////////////////////////////////////////////
68
inline unsigned int Texture::get_ram_mipmap_image_size(int n) const;

2411 24 get_ram_mipmap_view_size 0 4 2892 33 Texture::get_ram_mipmap_view_size 0 1 1040 913
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_view_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per view for mipmap level n, or 0 if there is
//               no in-memory image for this mipmap level.
//
//               A "view" is a collection of z_size pages for each
//               mipmap level.  Most textures have only one view,
//               except for multiview or stereo textures.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_mipmap_view_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
////////////////////////////////////////////////////////////////////
67
inline unsigned int Texture::get_ram_mipmap_view_size(int n) const;

2412 24 get_ram_mipmap_page_size 0 4 2892 33 Texture::get_ram_mipmap_page_size 0 1 1041 719
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page for mipmap level n, or 0 if there is
//               no in-memory image for this mipmap level.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_mipmap_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
////////////////////////////////////////////////////////////////////
67
inline unsigned int Texture::get_ram_mipmap_page_size(int n) const;

2413 34 get_expected_ram_mipmap_image_size 0 4 2892 43 Texture::get_expected_ram_mipmap_image_size 0 1 1042 404
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image for mipmap level n, based on
//               the texture parameters.
////////////////////////////////////////////////////////////////////
77
inline unsigned int Texture::get_expected_ram_mipmap_image_size(int n) const;

2414 33 get_expected_ram_mipmap_view_size 0 4 2892 42 Texture::get_expected_ram_mipmap_view_size 0 1 1043 547
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_view_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by each view of the in-memory image for mipmap level
//               n, based on the texture parameters.  For a normal,
//               non-multiview texture, this is the same as
//               get_expected_ram_mipmap_image_size(n).
////////////////////////////////////////////////////////////////////
76
inline unsigned int Texture::get_expected_ram_mipmap_view_size(int n) const;

2415 33 get_expected_ram_mipmap_page_size 0 4 2892 42 Texture::get_expected_ram_mipmap_page_size 0 1 1044 480
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture, for mipmap level n.
//               For a 2-d or 1-d texture, this is the same as
//               get_expected_ram_mipmap_view_size(n).
////////////////////////////////////////////////////////////////////
76
inline unsigned int Texture::get_expected_ram_mipmap_page_size(int n) const;

2416 20 get_ram_mipmap_image 0 4 2892 29 Texture::get_ram_mipmap_image 0 1 1045 400
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               nth mipmap level, if present.  Returns NULL if the
//               nth mipmap level is not present.
////////////////////////////////////////////////////////////////////
80
ConstPointerToArray< unsigned char > Texture::get_ram_mipmap_image(int n) const;

2417 22 get_ram_mipmap_pointer 0 4 2892 31 Texture::get_ram_mipmap_pointer 0 1 1046 447
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_pointer
//       Access: Published
//  Description: Similiar to get_ram_mipmap_image(), however, in this
//               case the void pointer for the given ram image is
//               returned.  This will be NULL unless it has been
//               explicitly set.
////////////////////////////////////////////////////////////////////
51
void *Texture::get_ram_mipmap_pointer(int n) const;

2418 23 modify_ram_mipmap_image 0 4 2892 32 Texture::modify_ram_mipmap_image 0 1 1047 511
////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_mipmap_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image
//               for the nth mipmap level.  This assumes the RAM image
//               is uncompressed; if this is not the case, raises an
//               assertion.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
79
inline PointerToArray< unsigned char > Texture::modify_ram_mipmap_image(int n);

2419 21 make_ram_mipmap_image 0 4 2892 30 Texture::make_ram_mipmap_image 0 1 1048 471
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               nth mipmap level, if any, and allocates a new buffer
//               of the appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
77
inline PointerToArray< unsigned char > Texture::make_ram_mipmap_image(int n);

2420 22 set_ram_mipmap_pointer 0 4 2892 31 Texture::set_ram_mipmap_pointer 0 0 827
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_pointer
//       Access: Published
//  Description: Sets an explicit void pointer as the texture's mipmap
//               image for the indicated level.  This is a special
//               call to direct a texture to reference some external
//               image location, for instance from a webcam input.
//
//               The texture will henceforth reference this pointer
//               directly, instead of its own internal storage; the
//               user is responsible for ensuring the data at this
//               address remains allocated and valid, and in the
//               correct format, during the lifetime of the texture.
////////////////////////////////////////////////////////////////////
87
void Texture::set_ram_mipmap_pointer(int n, void *image, unsigned int page_size = (0));

2421 31 set_ram_mipmap_pointer_from_int 0 4 2892 40 Texture::set_ram_mipmap_pointer_from_int 0 1 1049 592
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_pointer_from_int
//       Access: Published
//  Description: Accepts a raw pointer cast as an int, which is then
//               passed to set_ram_mipmap_pointer(); see the
//               documentation for that method.
//
//               This variant is particularly useful to set an
//               external pointer from a language like Python, which
//               doesn't support void pointers directly.
////////////////////////////////////////////////////////////////////
85
void Texture::set_ram_mipmap_pointer_from_int(__int64 pointer, int n, int page_size);

2422 20 set_ram_mipmap_image 0 4 2892 29 Texture::set_ram_mipmap_image 0 2 1050 1051 556
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_image
//       Access: Published
//  Description: Replaces the current system-RAM image for the
//               indicated mipmap level with the new data.  If
//               compression is not CM_off, it indicates that the new
//               data is already pre-compressed in the indicated
//               format.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
123
inline void Texture::set_ram_mipmap_image(int n, ConstPointerToArray< unsigned char > image, unsigned int page_size = (0));

2423 22 clear_ram_mipmap_image 0 4 2892 31 Texture::clear_ram_mipmap_image 0 1 1052 311
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the nth
//               mipmap level.
////////////////////////////////////////////////////////////////////
44
void Texture::clear_ram_mipmap_image(int n);

2424 23 clear_ram_mipmap_images 0 4 2892 32 Texture::clear_ram_mipmap_images 0 1 1053 342
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_images
//       Access: Published
//  Description: Discards the current system-RAM image for all
//               mipmap levels, except level 0 (the base image).
////////////////////////////////////////////////////////////////////
51
inline void Texture::clear_ram_mipmap_images(void);

2425 26 generate_ram_mipmap_images 0 4 2892 35 Texture::generate_ram_mipmap_images 0 1 1054 794
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_ram_mipmap_images
//       Access: Published
//  Description: Automatically fills in the n mipmap levels of the
//               Texture, based on the texture's source image.  This
//               requires the texture's uncompressed ram image to be
//               available in system memory.  If it is not already, it
//               will be fetched if possible.
//
//               This call is not normally necessary, since the mipmap
//               levels will be generated automatically if needed.
//               But there may be certain cases in which you would
//               like to call this explicitly.
////////////////////////////////////////////////////////////////////
54
inline void Texture::generate_ram_mipmap_images(void);

2426 17 get_simple_x_size 0 4 2892 26 Texture::get_simple_x_size 0 1 1055 276
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_x_size
//       Access: Published
//  Description: Returns the width of the "simple" image in texels.
////////////////////////////////////////////////////////////////////
50
inline int Texture::get_simple_x_size(void) const;

2427 17 get_simple_y_size 0 4 2892 26 Texture::get_simple_y_size 0 1 1056 277
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_y_size
//       Access: Published
//  Description: Returns the height of the "simple" image in texels.
////////////////////////////////////////////////////////////////////
50
inline int Texture::get_simple_y_size(void) const;

2428 20 has_simple_ram_image 0 4 2892 29 Texture::has_simple_ram_image 0 1 1057 326
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_simple_ram_image
//       Access: Published, Virtual
//  Description: Returns true if the Texture has a "simple" image
//               available in main RAM.
////////////////////////////////////////////////////////////////////
54
inline bool Texture::has_simple_ram_image(void) const;

2429 25 get_simple_ram_image_size 0 4 2892 34 Texture::get_simple_ram_image_size 0 1 1058 340
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the "simple"
//               image, or 0 if there is no simple image.
////////////////////////////////////////////////////////////////////
67
inline unsigned int Texture::get_simple_ram_image_size(void) const;

2430 20 get_simple_ram_image 0 4 2892 29 Texture::get_simple_ram_image 0 1 1059 879
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_ram_image
//       Access: Published
//  Description: Returns the image data associated with the "simple"
//               texture image.  This is provided for some textures as
//               an option to display while the main texture image is
//               being loaded from disk.
//
//               Unlike get_ram_image(), this function will always
//               return immediately.  Either the simple image is
//               available, or it is not.
//
//               The "simple" image is always 4 components, 1 byte
//               each, regardless of the parameters of the full
//               texture.  The simple image is only supported for
//               ordinary 2-d textures.
////////////////////////////////////////////////////////////////////
86
inline ConstPointerToArray< unsigned char > Texture::get_simple_ram_image(void) const;

2431 20 set_simple_ram_image 0 4 2892 29 Texture::set_simple_ram_image 0 1 1060 1051
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_simple_ram_image
//       Access: Published
//  Description: Replaces the internal "simple" texture image.  This
//               can be used as an option to display while the main
//               texture image is being loaded from disk.  It is
//               normally a very small image, 16x16 or smaller (and
//               maybe even 1x1), that is designed to give just enough
//               sense of color to serve as a placeholder until the
//               full texture is available.
//
//               The "simple" image is always 4 components, 1 byte
//               each, regardless of the parameters of the full
//               texture.  The simple image is only supported for
//               ordinary 2-d textures.
//
//               Also see generate_simple_ram_image(),
//               modify_simple_ram_image(), and
//               new_simple_ram_image().
////////////////////////////////////////////////////////////////////
110
inline void Texture::set_simple_ram_image(ConstPointerToArray< unsigned char > image, int x_size, int y_size);

2432 23 modify_simple_ram_image 0 4 2892 32 Texture::modify_simple_ram_image 0 1 1061 346
////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_simple_ram_image
//       Access: Published
//  Description: Returns a modifiable pointer to the internal "simple"
//               texture image.  See set_simple_ram_image().
////////////////////////////////////////////////////////////////////
71
PointerToArray< unsigned char > Texture::modify_simple_ram_image(void);

2433 20 new_simple_ram_image 0 4 2892 29 Texture::new_simple_ram_image 0 1 1062 413
////////////////////////////////////////////////////////////////////
//     Function: Texture::new_simple_ram_image
//       Access: Published
//  Description: Creates an empty array for the simple ram image of
//               the indicated size, and returns a modifiable pointer
//               to the new array.  See set_simple_ram_image().
////////////////////////////////////////////////////////////////////
86
PointerToArray< unsigned char > Texture::new_simple_ram_image(int x_size, int y_size);

2434 25 generate_simple_ram_image 0 4 2892 34 Texture::generate_simple_ram_image 0 1 1063 453
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_simple_ram_image
//       Access: Published
//  Description: Computes the "simple" ram image by loading the main
//               RAM image, if it is not already available, and
//               reducing it to 16x16 or smaller.  This may be an
//               expensive operation.
////////////////////////////////////////////////////////////////////
46
void Texture::generate_simple_ram_image(void);

2435 22 clear_simple_ram_image 0 4 2892 31 Texture::clear_simple_ram_image 0 1 1064 267
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_simple_ram_image
//       Access: Published
//  Description: Discards the current "simple" image.
////////////////////////////////////////////////////////////////////
50
inline void Texture::clear_simple_ram_image(void);

2436 4 peek 0 4 2892 13 Texture::peek 0 1 1065 826
////////////////////////////////////////////////////////////////////
//     Function: Texture::peek
//       Access: Published
//  Description: Returns a TexturePeeker object that can be used to
//               examine the individual texels stored within this
//               Texture by (u, v) coordinate.
//
//               If the texture has a ram image resident, that image
//               is used.  If it does not have a full ram image but
//               does have a simple_ram_image resident, that image is
//               used instead.  If neither image is resident the full
//               image is reloaded.
//
//               Returns NULL if the texture cannot find an image to
//               load, or the texture format is incompatible.
////////////////////////////////////////////////////////////////////
47
PointerTo< TexturePeeker > Texture::peek(void);

2437 23 get_properties_modified 0 4 2892 32 Texture::get_properties_modified 0 1 1066 403
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_properties_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture properties
//               (unrelated to the image) are modified.
////////////////////////////////////////////////////////////////////
62
inline UpdateSeq Texture::get_properties_modified(void) const;

2438 18 get_image_modified 0 4 2892 27 Texture::get_image_modified 0 1 1067 399
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_image_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture image data
//               (including mipmap levels) are modified.
////////////////////////////////////////////////////////////////////
57
inline UpdateSeq Texture::get_image_modified(void) const;

2439 25 get_simple_image_modified 0 4 2892 34 Texture::get_simple_image_modified 0 1 1068 390
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_image_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture's "simple"
//               image data is modified.
////////////////////////////////////////////////////////////////////
64
inline UpdateSeq Texture::get_simple_image_modified(void) const;

2440 22 set_auto_texture_scale 0 4 2892 31 Texture::set_auto_texture_scale 0 1 1069 421
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_auto_texture_scale
//       Access: Published
//  Description: Specifies the power-of-2 texture-scaling mode that
//               will be applied to this particular texture when it is
//               next loaded from disk.  See set_textures_power_2().
////////////////////////////////////////////////////////////////////
68
inline void Texture::set_auto_texture_scale(AutoTextureScale scale);

2441 22 get_auto_texture_scale 0 4 2892 31 Texture::get_auto_texture_scale 0 1 1070 419
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_auto_texture_scale
//       Access: Published
//  Description: Returns the power-of-2 texture-scaling mode that will
//               be applied to this particular texture when it is next
//               loaded from disk.  See set_textures_power_2().
////////////////////////////////////////////////////////////////////
68
inline AutoTextureScale Texture::get_auto_texture_scale(void) const;

2442 22 has_auto_texture_scale 0 4 2892 31 Texture::has_auto_texture_scale 0 1 1071 387
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_auto_texture_scale
//       Access: Published
//  Description: Returns true if set_auto_texture_scale() has been set
//               to something other than ATS_unspecified for this
//               particular texture.
////////////////////////////////////////////////////////////////////
56
inline bool Texture::has_auto_texture_scale(void) const;

2443 7 prepare 0 4 2892 16 Texture::prepare 0 1 1072 655
////////////////////////////////////////////////////////////////////
//     Function: Texture::prepare
//       Access: Published
//  Description: Indicates that the texture should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
////////////////////////////////////////////////////////////////////
65
void Texture::prepare(PreparedGraphicsObjects *prepared_objects);

2444 11 is_prepared 0 4 2892 20 Texture::is_prepared 0 1 1073 374
////////////////////////////////////////////////////////////////////
//     Function: Texture::is_prepared
//       Access: Published
//  Description: Returns true if the texture has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
////////////////////////////////////////////////////////////////////
75
bool Texture::is_prepared(PreparedGraphicsObjects *prepared_objects) const;

2445 18 was_image_modified 0 4 2892 27 Texture::was_image_modified 0 1 1074 437
////////////////////////////////////////////////////////////////////
//     Function: Texture::was_image_modified
//       Access: Published
//  Description: Returns true if the texture needs to be re-loaded
//               onto the indicated GSG, either because its image data
//               is out-of-date, or because it's not fully prepared
//               now.
////////////////////////////////////////////////////////////////////
82
bool Texture::was_image_modified(PreparedGraphicsObjects *prepared_objects) const;

2446 19 get_data_size_bytes 0 4 2892 28 Texture::get_data_size_bytes 0 1 1075 639
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_data_size_bytes
//       Access: Public
//  Description: Returns the number of bytes which the texture is
//               reported to consume within graphics memory, for the
//               indicated GSG.  This may return a nonzero value even
//               if the texture is not currently resident; you should
//               also check get_resident() if you want to know how
//               much space the texture is actually consuming right
//               now.
////////////////////////////////////////////////////////////////////
91
unsigned int Texture::get_data_size_bytes(PreparedGraphicsObjects *prepared_objects) const;

2447 10 get_active 0 4 2892 19 Texture::get_active 0 1 1076 325
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_active
//       Access: Public
//  Description: Returns true if this Texture was rendered in the most
//               recent frame within the indicated GSG.
////////////////////////////////////////////////////////////////////
74
bool Texture::get_active(PreparedGraphicsObjects *prepared_objects) const;

2448 12 get_resident 0 4 2892 21 Texture::get_resident 0 1 1077 353
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_resident
//       Access: Public
//  Description: Returns true if this Texture is reported to be
//               resident within graphics memory for the indicated
//               GSG.
////////////////////////////////////////////////////////////////////
76
bool Texture::get_resident(PreparedGraphicsObjects *prepared_objects) const;

2449 7 release 0 4 2892 16 Texture::release 0 1 1078 394
////////////////////////////////////////////////////////////////////
//     Function: Texture::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
65
bool Texture::release(PreparedGraphicsObjects *prepared_objects);

2450 11 release_all 0 4 2892 20 Texture::release_all 0 1 1079 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
31
int Texture::release_all(void);

2451 23 estimate_texture_memory 0 4 2892 32 Texture::estimate_texture_memory 0 1 1080 775
////////////////////////////////////////////////////////////////////
//     Function: Texture::estimate_texture_memory
//       Access: Published
//  Description: Estimates the amount of texture memory that will be
//               consumed by loading this texture.  This returns a
//               value that is not specific to any particular graphics
//               card or driver; it tries to make a reasonable
//               assumption about how a driver will load the texture.
//               It does not account for texture compression or
//               anything fancy.  This is mainly useful for debugging
//               and reporting purposes.
//
//               Returns a value in bytes.
////////////////////////////////////////////////////////////////////
58
unsigned int Texture::estimate_texture_memory(void) const;

2452 12 set_aux_data 0 4 2892 21 Texture::set_aux_data 0 1 1081 523
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_aux_data
//       Access: Published
//  Description: Records an arbitrary object in the Texture,
//               associated with a specified key.  The object may
//               later be retrieved by calling get_aux_data() with the
//               same key.
//
//               These data objects are not recorded to a bam or txo
//               file.
////////////////////////////////////////////////////////////////////
91
void Texture::set_aux_data(basic_string< char > const &key, TypedReferenceCount *aux_data);

2453 14 clear_aux_data 0 4 2892 23 Texture::clear_aux_data 0 1 1082 296
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_aux_data
//       Access: Published
//  Description: Removes a record previously recorded via
//               set_aux_data().
////////////////////////////////////////////////////////////////////
62
void Texture::clear_aux_data(basic_string< char > const &key);

2454 12 get_aux_data 0 4 2892 21 Texture::get_aux_data 0 1 1083 383
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_aux_data
//       Access: Published
//  Description: Returns a record previously recorded via
//               set_aux_data().  Returns NULL if there was no record
//               associated with the indicated key.
////////////////////////////////////////////////////////////////////
82
TypedReferenceCount *Texture::get_aux_data(basic_string< char > const &key) const;

2455 20 set_textures_power_2 0 4 2892 29 Texture::set_textures_power_2 0 1 1084 520
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_textures_power_2
//       Access: Published, Static
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control the scaling of textures in
//               general, if a particular texture does not override
//               this.  See also set_auto_texture_scale() for the
//               per-texture override.
////////////////////////////////////////////////////////////////////
73
static inline void Texture::set_textures_power_2(AutoTextureScale scale);

2456 20 get_textures_power_2 0 4 2892 29 Texture::get_textures_power_2 0 1 1085 536
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_textures_power_2
//       Access: Published, Static
//  Description: This flag returns ATS_none, ATS_up, or ATS_down
//               and controls the scaling of textures in general.  It
//               is initialized from the config variable of the same
//               name, but it can be subsequently adjusted.  See also
//               get_auto_texture_scale().
////////////////////////////////////////////////////////////////////
67
static inline AutoTextureScale Texture::get_textures_power_2(void);

2457 20 has_textures_power_2 0 4 2892 29 Texture::has_textures_power_2 0 1 1086 452
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_textures_power_2
//       Access: Published, Static
//  Description: If true, then get_textures_power_2 has been
//               set using set_textures_power_2.
//               If false, then get_textures_power_2 simply
//               returns the config variable of the same name.
////////////////////////////////////////////////////////////////////
55
static inline bool Texture::has_textures_power_2(void);

2458 12 set_filename 0 4 2892 21 Texture::set_filename 0 1 1087 834
// These are published, but in general, you shouldn't be mucking
// with these values; they are set automatically when a texture is
// loaded.

////////////////////////////////////////////////////////////////////
//     Function: Texture::set_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               contents.  Normally, this is set automatically when
//               the image is loaded, for instance via
//               Texture::read().
//
//               The Texture's get_name() function used to return
//               the filename, but now returns just the basename
//               (without the extension), which is a more useful name
//               for identifying an image in show code.
////////////////////////////////////////////////////////////////////
60
inline void Texture::set_filename(Filename const &filename);

2459 14 clear_filename 0 4 2892 23 Texture::clear_filename 0 1 1088 457
// These are published, but in general, you shouldn't be mucking
// with these values; they are set automatically when a texture is
// loaded.

////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_filename().
////////////////////////////////////////////////////////////////////
42
inline void Texture::clear_filename(void);

2460 18 set_alpha_filename 0 4 2892 27 Texture::set_alpha_filename 0 1 1089 915
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               alpha channel contents.  Normally, this is set
//               automatically when the image is loaded, for instance
//               via Texture::read().
//
//               The Texture's get_filename() function returns the
//               name of the image file that was loaded into the
//               buffer.  In the case where a texture specified two
//               separate files to load, a 1- or 3-channel color image
//               and a 1-channel alpha image, this Filename is update
//               to contain the name of the image file that was loaded
//               into the buffer's alpha channel.
////////////////////////////////////////////////////////////////////
72
inline void Texture::set_alpha_filename(Filename const &alpha_filename);

2461 20 clear_alpha_filename 0 4 2892 29 Texture::clear_alpha_filename 0 1 1090 325
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_alpha_filename().
////////////////////////////////////////////////////////////////////
48
inline void Texture::clear_alpha_filename(void);

2462 12 set_fullpath 0 4 2892 21 Texture::set_fullpath 0 1 1091 470
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's contents, as found along the search path.
//               Normally, this is set automatically when the image is
//               loaded, for instance via Texture::read().
////////////////////////////////////////////////////////////////////
60
inline void Texture::set_fullpath(Filename const &fullpath);

2463 14 clear_fullpath 0 4 2892 23 Texture::clear_fullpath 0 1 1092 313
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_fullpath().
////////////////////////////////////////////////////////////////////
42
inline void Texture::clear_fullpath(void);

2464 18 set_alpha_fullpath 0 4 2892 27 Texture::set_alpha_fullpath 0 1 1093 508
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's alpha channel contents, as found along the
//               search path.  Normally, this is set automatically
//               when the image is loaded, for instance via
//               Texture::read().
////////////////////////////////////////////////////////////////////
72
inline void Texture::set_alpha_fullpath(Filename const &alpha_fullpath);

2465 20 clear_alpha_fullpath 0 4 2892 29 Texture::clear_alpha_fullpath 0 1 1094 325
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_alpha_fullpath().
////////////////////////////////////////////////////////////////////
48
inline void Texture::clear_alpha_fullpath(void);

2466 10 set_x_size 0 4 2892 19 Texture::set_x_size 0 1 1095 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_x_size
//       Access: Published
//  Description: Changes the x size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_x_size(int x_size);

2467 10 set_y_size 0 4 2892 19 Texture::set_y_size 0 1 1096 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_y_size
//       Access: Published
//  Description: Changes the y size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_y_size(int y_size);

2468 10 set_z_size 0 4 2892 19 Texture::set_z_size 0 1 1097 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_z_size
//       Access: Published
//  Description: Changes the z size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_z_size(int z_size);

2469 13 set_num_views 0 4 2892 22 Texture::set_num_views 0 1 1098 866
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_num_views
//       Access: Published
//  Description: Sets the number of "views" within a texture.  A view
//               is a completely separate image stored within the
//               Texture object.  Most textures have only one view,
//               but a stereo texture, for instance, may have two
//               views, a left and a right image.  Other uses for
//               multiple views are not yet defined.
//
//               If this value is greater than one, the additional
//               views are accessed as additional pages beyond
//               get_z_size().
//
//               This also implicitly unloads the texture if it has
//               already been loaded.
////////////////////////////////////////////////////////////////////
50
inline void Texture::set_num_views(int num_views);

2470 14 get_pad_x_size 0 4 2892 23 Texture::get_pad_x_size 0 1 1099 273
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_x_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
////////////////////////////////////////////////////////////////////
47
inline int Texture::get_pad_x_size(void) const;

2471 14 get_pad_y_size 0 4 2892 23 Texture::get_pad_y_size 0 1 1100 273
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_y_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
////////////////////////////////////////////////////////////////////
47
inline int Texture::get_pad_y_size(void) const;

2472 14 get_pad_z_size 0 4 2892 23 Texture::get_pad_z_size 0 1 1101 273
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_z_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
////////////////////////////////////////////////////////////////////
47
inline int Texture::get_pad_z_size(void) const;

2473 13 get_tex_scale 0 4 2892 22 Texture::get_tex_scale 0 1 1102 866
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_tex_scale
//       Access: Published
//  Description: Returns a scale pair that is suitable for applying to
//               geometry via NodePath::set_tex_scale(), which will
//               convert texture coordinates on the geometry from the
//               range 0..1 into the appropriate range to render the
//               video part of the texture.
//
//               This is necessary only if a padding size has been set
//               via set_pad_size() (or implicitly via something like
//               "textures-power-2 pad" in the config.prc file).  In
//               this case, this is a convenient way to generate UV's
//               that reflect the built-in padding size.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f Texture::get_tex_scale(void) const;

2474 12 set_pad_size 0 4 2892 21 Texture::set_pad_size 0 4 1103 1104 1105 1106 813
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_pad_size
//       Access: Published
//  Description: Sets the size of the pad region.
//
//               Sometimes, when a video card demands power-of-two
//               textures, it is necessary to create a big texture
//               and then only use a portion of it.  The pad region
//               indicates which portion of the texture is not
//               really in use.  All operations use the texture
//               as a whole, including the pad region, unless they
//               explicitly state that they use only the non-pad
//               region.
//
//               Changing the texture's size clears the pad region.
////////////////////////////////////////////////////////////////////
73
inline void Texture::set_pad_size(int x = (0), int y = (0), int z = (0));

2475 15 set_size_padded 0 4 2892 24 Texture::set_size_padded 0 4 1107 1108 1109 1110 348
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_size_padded
//       Access: Published
//  Description: Changes the size of the texture, padding
//               if necessary, and setting the pad region
//               as well.
////////////////////////////////////////////////////////////////////
69
void Texture::set_size_padded(int x = (1), int y = (1), int z = (1));

2476 20 get_orig_file_x_size 0 4 2892 29 Texture::get_orig_file_x_size 0 1 1111 414
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_x_size
//       Access: Published
//  Description: Returns the X size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
////////////////////////////////////////////////////////////////////
53
inline int Texture::get_orig_file_x_size(void) const;

2477 20 get_orig_file_y_size 0 4 2892 29 Texture::get_orig_file_y_size 0 1 1112 414
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_y_size
//       Access: Published
//  Description: Returns the Y size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
////////////////////////////////////////////////////////////////////
53
inline int Texture::get_orig_file_y_size(void) const;

2478 20 get_orig_file_z_size 0 4 2892 29 Texture::get_orig_file_z_size 0 1 1113 414
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_z_size
//       Access: Published
//  Description: Returns the Z size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
////////////////////////////////////////////////////////////////////
53
inline int Texture::get_orig_file_z_size(void) const;

2479 18 set_orig_file_size 0 4 2892 27 Texture::set_orig_file_size 0 2 1114 1115 343
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_orig_file_size
//       Access: Published
//  Description: Specifies the size of the texture as it exists in its
//               original disk file, before any Panda scaling.
////////////////////////////////////////////////////////////////////
60
void Texture::set_orig_file_size(int x, int y, int z = (1));

2480 10 set_format 0 4 2892 19 Texture::set_format 0 1 1116 333
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_format
//       Access: Published
//  Description: Changes the format value for the texture components.
//               This implicitly sets num_components as well.
////////////////////////////////////////////////////////////////////
56
inline void Texture::set_format(Texture::Format format);

2481 18 set_component_type 0 4 2892 27 Texture::set_component_type 0 1 1117 340
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_component_type
//       Access: Published
//  Description: Changes the data value for the texture components.
//               This implicitly sets component_width as well.
////////////////////////////////////////////////////////////////////
79
inline void Texture::set_component_type(Texture::ComponentType component_type);

2482 21 set_loaded_from_image 0 4 2892 30 Texture::set_loaded_from_image 0 1 1118 553
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_image
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  You should also
//               ensure the filename has been set correctly.  When
//               this flag is true, the texture may be automatically
//               reloaded when its ram image needs to be replaced.
////////////////////////////////////////////////////////////////////
49
inline void Texture::set_loaded_from_image(void);

2483 21 get_loaded_from_image 0 4 2892 30 Texture::get_loaded_from_image 0 1 1119 383
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_image
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  See
//               set_loaded_from_image().
////////////////////////////////////////////////////////////////////
55
inline bool Texture::get_loaded_from_image(void) const;

2484 19 set_loaded_from_txo 0 4 2892 28 Texture::set_loaded_from_txo 0 1 1120 452
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_txo
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a txo file.  You probably shouldn't be
//               setting this directly; it is set automatically when a
//               Texture is loaded.
////////////////////////////////////////////////////////////////////
47
inline void Texture::set_loaded_from_txo(void);

2485 19 get_loaded_from_txo 0 4 2892 28 Texture::get_loaded_from_txo 0 1 1121 321
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_txo
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a txo file.
////////////////////////////////////////////////////////////////////
53
inline bool Texture::get_loaded_from_txo(void) const;

2486 9 is_mipmap 0 4 2892 18 Texture::is_mipmap 0 1 1122 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::is_mipmap
//       Access: Published, Static
//  Description: Returns true if the indicated filter type requires
//               the use of mipmaps, or false if it does not.
////////////////////////////////////////////////////////////////////
57
static bool Texture::is_mipmap(Texture::FilterType type);

2487 28 get_match_framebuffer_format 0 4 2892 37 Texture::get_match_framebuffer_format 0 1 1123 588
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_match_framebuffer_format
//       Access: Public
//  Description: Returns true if the special flag was set that
//               indicates to the GSG that the Texture's format should
//               be chosen to exactly match the framebuffer's format,
//               presumably because the application intends to copy
//               image data from the framebuffer into the Texture (or
//               vice-versa).
////////////////////////////////////////////////////////////////////
62
inline bool Texture::get_match_framebuffer_format(void) const;

2488 28 set_match_framebuffer_format 0 4 2892 37 Texture::set_match_framebuffer_format 0 1 1124 743
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_match_framebuffer_format
//       Access: Public
//  Description: Sets the special flag that, if true, indicates to the
//               GSG that the Texture's format should be chosen to
//               exactly match the framebuffer's format, presumably
//               because the application intends to copy image data
//               from the framebuffer into the Texture (or
//               vice-versa).
//
//               This sets only the graphics card's idea of the
//               texture format; it is not related to the
//               system-memory format.
////////////////////////////////////////////////////////////////////
61
inline void Texture::set_match_framebuffer_format(bool flag);

2489 25 get_post_load_store_cache 0 4 2892 34 Texture::get_post_load_store_cache 0 1 1125 336
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_post_load_store_cache
//       Access: Public
//  Description: Returns the setting of the post_load_store_cache
//               flag.  See set_post_load_store_cache().
////////////////////////////////////////////////////////////////////
59
inline bool Texture::get_post_load_store_cache(void) const;

2490 25 set_post_load_store_cache 0 4 2892 34 Texture::set_post_load_store_cache 0 1 1126 742
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_post_load_store_cache
//       Access: Public
//  Description: Sets the post_load_store_cache flag.  When this is
//               set, the next time the texture is loaded on a GSG, it
//               will automatically extract its RAM image from the GSG
//               and save it to the global BamCache.
//
//               This is used to store compressed RAM images in the
//               BamCache.  This flag should not be set explicitly; it
//               is set automatically by the TexturePool when
//               model-cache-compressed-textures is set true.
////////////////////////////////////////////////////////////////////
58
inline void Texture::set_post_load_store_cache(bool flag);

2491 11 prepare_now 0 4 2892 20 Texture::prepare_now 0 1 1127 889
////////////////////////////////////////////////////////////////////
//     Function: Texture::prepare_now
//       Access: Published
//  Description: Creates a context for the texture on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) TextureContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a texture does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
////////////////////////////////////////////////////////////////////
122
TextureContext *Texture::prepare_now(int view, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

2492 13 up_to_power_2 0 4 2892 22 Texture::up_to_power_2 0 1 1128 310
////////////////////////////////////////////////////////////////////
//     Function: Texture::up_to_power_2
//       Access: Published, Static
//  Description: Returns the smallest power of 2 greater than or equal
//               to value.
////////////////////////////////////////////////////////////////////
45
static int Texture::up_to_power_2(int value);

2493 15 down_to_power_2 0 4 2892 24 Texture::down_to_power_2 0 1 1129 308
////////////////////////////////////////////////////////////////////
//     Function: Texture::down_to_power_2
//       Access: Published, Static
//  Description: Returns the largest power of 2 less than or equal
//               to value.
////////////////////////////////////////////////////////////////////
47
static int Texture::down_to_power_2(int value);

2494 16 consider_rescale 0 4 2892 25 Texture::consider_rescale 0 3 1130 1131 1132 1118
////////////////////////////////////////////////////////////////////
//     Function: Texture::consider_rescale
//       Access: Published
//  Description: Asks the PNMImage to change its scale when it reads
//               the image, according to the whims of the Config.prc
//               file.
//
//               This method should be called after
//               pnmimage.read_header() has been called, but before
//               pnmimage.read().  Also see rescale_texture().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::consider_rescale
//       Access: Published, Static
//  Description: Asks the PNMImage to change its scale when it reads
//               the image, according to the whims of the Config.prc
//               file.
//
//               This method should be called after
//               pnmimage.read_header() has been called, but before
//               pnmimage.read().  Also see rescale_texture().
////////////////////////////////////////////////////////////////////
201
void Texture::consider_rescale(PNMImage &pnmimage);
static void Texture::consider_rescale(PNMImage &pnmimage, basic_string< char > const &name, AutoTextureScale auto_texture_scale = (ATS_unspecified));

2495 15 rescale_texture 0 4 2892 24 Texture::rescale_texture 0 1 1133 711
////////////////////////////////////////////////////////////////////
//     Function: Texture::rescale_texture
//       Access: Published
//  Description: This method is similar to consider_rescale(), but
//               instead of scaling a separate PNMImage, it will ask
//               the Texture to rescale its own internal image to a
//               power of 2, according to the config file
//               requirements.  This may be useful after loading a
//               Texture image by hand, instead of reading it from a
//               disk file.  Returns true if the texture is changed,
//               false if it was not.
////////////////////////////////////////////////////////////////////
43
inline bool Texture::rescale_texture(void);

2496 19 format_texture_type 0 4 2892 28 Texture::format_texture_type 0 1 1134 314
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_texture_type
//       Access: Published, Static
//  Description: Returns the indicated TextureType converted to a
//               string word.
////////////////////////////////////////////////////////////////////
82
static basic_string< char > Texture::format_texture_type(Texture::TextureType tt);

2497 19 string_texture_type 0 4 2892 28 Texture::string_texture_type 0 1 1135 320
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_texture_type
//       Access: Published, Static
//  Description: Returns the TextureType corresponding to the
//               indicated string word.
////////////////////////////////////////////////////////////////////
90
static Texture::TextureType Texture::string_texture_type(basic_string< char > const &str);

2498 21 format_component_type 0 4 2892 30 Texture::format_component_type 0 1 1136 318
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_component_type
//       Access: Published, Static
//  Description: Returns the indicated ComponentType converted to a
//               string word.
////////////////////////////////////////////////////////////////////
86
static basic_string< char > Texture::format_component_type(Texture::ComponentType ct);

2499 21 string_component_type 0 4 2892 30 Texture::string_component_type 0 1 1137 324
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_component_type
//       Access: Published, Static
//  Description: Returns the ComponentType corresponding to the
//               indicated string word.
////////////////////////////////////////////////////////////////////
94
static Texture::ComponentType Texture::string_component_type(basic_string< char > const &str);

2500 13 format_format 0 4 2892 22 Texture::format_format 0 1 1138 303
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_format
//       Access: Published, Static
//  Description: Returns the indicated Format converted to a
//               string word.
////////////////////////////////////////////////////////////////////
70
static basic_string< char > Texture::format_format(Texture::Format f);

2501 13 string_format 0 4 2892 22 Texture::string_format 0 1 1139 309
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_format
//       Access: Published, Static
//  Description: Returns the Format corresponding to the
//               indicated string word.
////////////////////////////////////////////////////////////////////
79
static Texture::Format Texture::string_format(basic_string< char > const &str);

2502 18 format_filter_type 0 4 2892 27 Texture::format_filter_type 0 1 1140 312
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_filter_type
//       Access: Published, Static
//  Description: Returns the indicated FilterType converted to a
//               string word.
////////////////////////////////////////////////////////////////////
80
static basic_string< char > Texture::format_filter_type(Texture::FilterType ft);

2503 18 string_filter_type 0 4 2892 27 Texture::string_filter_type 0 1 1141 406
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_filter_type
//       Access: Public
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_invalid if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
88
static Texture::FilterType Texture::string_filter_type(basic_string< char > const &str);

2504 16 format_wrap_mode 0 4 2892 25 Texture::format_wrap_mode 0 1 1142 308
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_wrap_mode
//       Access: Published, Static
//  Description: Returns the indicated WrapMode converted to a
//               string word.
////////////////////////////////////////////////////////////////////
76
static basic_string< char > Texture::format_wrap_mode(Texture::WrapMode wm);

2505 16 string_wrap_mode 0 4 2892 25 Texture::string_wrap_mode 0 1 1143 400
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_wrap_mode
//       Access: Public
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_invalid if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
84
static Texture::WrapMode Texture::string_wrap_mode(basic_string< char > const &str);

2506 23 format_compression_mode 0 4 2892 32 Texture::format_compression_mode 0 1 1144 322
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_compression_mode
//       Access: Published, Static
//  Description: Returns the indicated CompressionMode converted to a
//               string word.
////////////////////////////////////////////////////////////////////
90
static basic_string< char > Texture::format_compression_mode(Texture::CompressionMode cm);

2507 23 string_compression_mode 0 4 2892 32 Texture::string_compression_mode 0 1 1145 328
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_compression_mode
//       Access: Public
//  Description: Returns the CompressionMode value associated with the
//               given string representation.
////////////////////////////////////////////////////////////////////
98
static Texture::CompressionMode Texture::string_compression_mode(basic_string< char > const &str);

2508 20 format_quality_level 0 4 2892 29 Texture::format_quality_level 0 1 1146 316
////////////////////////////////////////////////////////////////////
//     Function: Texture::format_quality_level
//       Access: Published, Static
//  Description: Returns the indicated QualityLevel converted to a
//               string word.
////////////////////////////////////////////////////////////////////
85
static basic_string< char > Texture::format_quality_level(Texture::QualityLevel tql);

2509 20 string_quality_level 0 4 2892 29 Texture::string_quality_level 0 1 1147 322
////////////////////////////////////////////////////////////////////
//     Function: Texture::string_quality_level
//       Access: Public
//  Description: Returns the QualityLevel value associated with the
//               given string representation.
////////////////////////////////////////////////////////////////////
92
static Texture::QualityLevel Texture::string_quality_level(basic_string< char > const &str);

2510 14 get_class_type 0 4 2892 23 Texture::get_class_type 0 1 1148 0
48
static TypeHandle Texture::get_class_type(void);

2511 4 load 0 4 2900 12 Shader::load 0 4 1153 1154 1155 1156 566
////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: Loads the shader with the given filename.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: This variant of Shader::load loads all shader
//               programs separately.
////////////////////////////////////////////////////////////////////
270
static PointerTo< Shader > Shader::load(Filename const &file, Shader::ShaderLanguage const &lang = (SL_none));
static PointerTo< Shader > Shader::load(Shader::ShaderLanguage const &lang, Filename const &vertex, Filename const &fragment, Filename const &geometry = (""));

2512 4 make 0 4 2900 12 Shader::make 0 4 1157 1158 1159 1160 553
//////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the string as shader body.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the strings as shader bodies.
//////////////////////////////////////////////////////////////////////
318
static PointerTo< Shader > Shader::make(basic_string< char > const &body, Shader::ShaderLanguage const &lang = (SL_none));
static PointerTo< Shader > Shader::make(Shader::ShaderLanguage const &lang, basic_string< char > const &vertex, basic_string< char > const &fragment, basic_string< char > const &geometry = (""));

2513 12 get_filename 0 4 2900 20 Shader::get_filename 0 2 1161 1162 815
// Filename: shader.I
// Heavily Modified:  jyelon (Sep05)
// Updated by: fperazzi, PandaSE(06Apr10)
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_filename
//       Access: Public
//  Description: Return the Shader's filename for the given shader
//               type.
////////////////////////////////////////////////////////////////////
93
inline Filename const Shader::get_filename(Shader::ShaderType const &type = (ST_none)) const;

2514 8 get_text 0 4 2900 16 Shader::get_text 0 2 1163 1164 264
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_text
//       Access: Public
//  Description: Return the Shader's text for the given shader type.
////////////////////////////////////////////////////////////////////
102
inline basic_string< char > const &Shader::get_text(Shader::ShaderType const &type = (ST_none)) const;

2515 14 get_error_flag 0 4 2900 22 Shader::get_error_flag 0 1 1165 399
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_error_flag
//       Access: Public
//  Description: Returns true if the shader contains a compile-time
//               error.  This doesn't tell you whether or not the
//               shader is supported on the current video card.
////////////////////////////////////////////////////////////////////
53
inline bool const Shader::get_error_flag(void) const;

2516 12 get_language 0 4 2900 20 Shader::get_language 0 1 1166 298
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_language
//       Access: Published
//  Description: Returns the shader language in which this shader
//               was written.
////////////////////////////////////////////////////////////////////
69
inline Shader::ShaderLanguage const Shader::get_language(void) const;

2517 22 get_shader_utilization 0 4 2900 30 Shader::get_shader_utilization 0 1 1167 510
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_shader_utilization
//       Access: Published, Static
//  Description: This flag returns SUT_none, SUT_basic, or
//               SUT_advanced and controls the automatic generation
//               of shaders.  It is initialized from the config
//               variable of the same name, but it can be 
//               subsequently adjusted.
////////////////////////////////////////////////////////////////////
69
static inline ShaderUtilization Shader::get_shader_utilization(void);

2518 22 set_shader_utilization 0 4 2900 30 Shader::set_shader_utilization 0 1 1168 382
////////////////////////////////////////////////////////////////////
//     Function: Shader::set_shader_utilization
//       Access: Published, Static
//  Description: Set this flag to SUT_none, SUT_basic, or
//               SUT_advanced to limit panda's automatic shader
//               generation facilities.
////////////////////////////////////////////////////////////////////
73
static inline void Shader::set_shader_utilization(ShaderUtilization utl);

2519 23 have_shader_utilization 0 4 2900 31 Shader::have_shader_utilization 0 1 1169 460
////////////////////////////////////////////////////////////////////
//     Function: Shader::have_shader_utilization
//       Access: Published, Static
//  Description: If true, then get_shader_utilization has been
//               set using set_shader_utilization.
//               If false, then get_shader_utilization simply
//               returns the config variable of the same name.
////////////////////////////////////////////////////////////////////
57
static inline bool Shader::have_shader_utilization(void);

2520 7 prepare 0 4 2900 15 Shader::prepare 0 1 1170 653
////////////////////////////////////////////////////////////////////
//     Function: Shader::prepare
//       Access: Published
//  Description: Indicates that the shader should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
////////////////////////////////////////////////////////////////////
64
void Shader::prepare(PreparedGraphicsObjects *prepared_objects);

2521 11 is_prepared 0 4 2900 19 Shader::is_prepared 0 1 1171 372
////////////////////////////////////////////////////////////////////
//     Function: Shader::is_prepared
//       Access: Published
//  Description: Returns true if the shader has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
////////////////////////////////////////////////////////////////////
74
bool Shader::is_prepared(PreparedGraphicsObjects *prepared_objects) const;

2522 7 release 0 4 2900 15 Shader::release 0 1 1172 393
////////////////////////////////////////////////////////////////////
//     Function: Shader::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
64
bool Shader::release(PreparedGraphicsObjects *prepared_objects);

2523 11 release_all 0 4 2900 19 Shader::release_all 0 1 1173 391
////////////////////////////////////////////////////////////////////
//     Function: Shader::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
30
int Shader::release_all(void);

2524 11 prepare_now 0 4 2900 19 Shader::prepare_now 0 1 1174 885
////////////////////////////////////////////////////////////////////
//     Function: Shader::prepare_now
//       Access: Published
//  Description: Creates a context for the shader on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) ShaderContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a shader does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
////////////////////////////////////////////////////////////////////
110
ShaderContext *Shader::prepare_now(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

2525 14 get_class_type 0 4 2900 22 Shader::get_class_type 0 1 1175 0
47
static TypeHandle Shader::get_class_type(void);

2526 8 get_name 0 4 2906 33 PreparedGraphicsObjects::get_name 0 1 1176 913
// Filename: preparedGraphicsObjects.I
// Created by:  drose (23Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_name
//       Access: Public
//  Description: Returns the name of the PreparedGraphicsObjects
//               structure.  This is an arbitrary name that serves
//               mainly to uniquify the context for PStats reporting.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > const &PreparedGraphicsObjects::get_name(void) const;

2527 25 set_graphics_memory_limit 0 4 2906 50 PreparedGraphicsObjects::set_graphics_memory_limit 0 1 1177 873
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::set_graphics_memory_limit
//       Access: Public
//  Description: Sets an artificial cap on graphics memory that
//               will be imposed on this GSG.
//
//               This limits the total amount of graphics memory,
//               including texture memory and vertex buffer memory,
//               that will be consumed by the GSG, regardless of
//               whether the hardware claims to provide more graphics
//               memory than this. It is useful to put a ceiling on
//               graphics memory consumed, since some drivers seem to
//               allow the application to consume more memory than the
//               hardware can realistically support.
////////////////////////////////////////////////////////////////////
76
void PreparedGraphicsObjects::set_graphics_memory_limit(unsigned int limit);

2528 25 get_graphics_memory_limit 0 4 2906 50 PreparedGraphicsObjects::get_graphics_memory_limit 0 1 1178 394
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_graphics_memory_limit
//       Access: Public
//  Description: Returns the artificial cap on graphics memory that
//               will be imposed on this GSG.  See
//               set_graphics_memory_limit().
////////////////////////////////////////////////////////////////////
83
inline unsigned int PreparedGraphicsObjects::get_graphics_memory_limit(void) const;

2529 24 show_graphics_memory_lru 0 4 2906 49 PreparedGraphicsObjects::show_graphics_memory_lru 0 1 1179 393
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::show_graphics_memory_lru
//       Access: Public
//  Description: Writes to the indicated ostream a report of how the
//               various textures and vertex buffers are allocated in
//               the LRU.
////////////////////////////////////////////////////////////////////
75
void PreparedGraphicsObjects::show_graphics_memory_lru(ostream &out) const;

2530 23 show_residency_trackers 0 4 2906 48 PreparedGraphicsObjects::show_residency_trackers 0 1 1180 392
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::show_residency_trackers
//       Access: Public
//  Description: Writes to the indicated ostream a report of how the
//               various textures and vertex buffers are allocated in
//               the LRU.
////////////////////////////////////////////////////////////////////
74
void PreparedGraphicsObjects::show_residency_trackers(ostream &out) const;

2531 11 release_all 0 4 2906 36 PreparedGraphicsObjects::release_all 0 1 1181 284
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all
//       Access: Public
//  Description: Releases all prepared objects of all kinds at once.
////////////////////////////////////////////////////////////////////
55
inline void PreparedGraphicsObjects::release_all(void);

2532 14 get_num_queued 0 4 2906 39 PreparedGraphicsObjects::get_num_queued 0 1 1182 346
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued
//       Access: Public
//  Description: Returns the number of objects of any kind that have
//               been enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
63
inline int PreparedGraphicsObjects::get_num_queued(void) const;

2533 16 get_num_prepared 0 4 2906 41 PreparedGraphicsObjects::get_num_prepared 0 1 1183 341
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared
//       Access: Public
//  Description: Returns the number of objects of any kind that have
//               already been prepared on this GSG.
////////////////////////////////////////////////////////////////////
65
inline int PreparedGraphicsObjects::get_num_prepared(void) const;

2534 15 enqueue_texture 0 4 2906 40 PreparedGraphicsObjects::enqueue_texture 0 1 1184 413
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_texture
//       Access: Public
//  Description: Indicates that a texture would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
////////////////////////////////////////////////////////////////////
60
void PreparedGraphicsObjects::enqueue_texture(Texture *tex);

2535 17 is_texture_queued 0 4 2906 42 PreparedGraphicsObjects::is_texture_queued 0 1 1185 329
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_texture_queued
//       Access: Public
//  Description: Returns true if the texture has been queued on this
//               GSG, false otherwise.
////////////////////////////////////////////////////////////////////
74
bool PreparedGraphicsObjects::is_texture_queued(Texture const *tex) const;

2536 15 dequeue_texture 0 4 2906 40 PreparedGraphicsObjects::dequeue_texture 0 1 1186 733
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_texture
//       Access: Public
//  Description: Removes a texture from the queued list of textures to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the texture will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the texture is
//               successfully dequeued, false if it had not been
//               queued.
////////////////////////////////////////////////////////////////////
60
bool PreparedGraphicsObjects::dequeue_texture(Texture *tex);

2537 19 is_texture_prepared 0 4 2906 44 PreparedGraphicsObjects::is_texture_prepared 0 1 1187 333
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_texture_prepared
//       Access: Public
//  Description: Returns true if the texture has been prepared on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
76
bool PreparedGraphicsObjects::is_texture_prepared(Texture const *tex) const;

2538 15 release_texture 0 4 2906 40 PreparedGraphicsObjects::release_texture 0 2 1188 1189 1171
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_texture
//       Access: Public
//  Description: Indicates that a texture context, created by a
//               previous call to prepare_texture(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release textures--this
//               prevents conflicts from threading or multiple GSG's
//               sharing textures (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_texture is called).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_texture
//       Access: Public
//  Description: Releases a texture if it has already been prepared,
//               or removes it from the preparation queue.
////////////////////////////////////////////////////////////////////
127
void PreparedGraphicsObjects::release_texture(TextureContext *tc);
void PreparedGraphicsObjects::release_texture(Texture *tex);

2539 20 release_all_textures 0 4 2906 45 PreparedGraphicsObjects::release_all_textures 0 1 1190 460
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_textures
//       Access: Public
//  Description: Releases all textures at once.  This will force them
//               to be reloaded into texture memory for all GSG's that
//               share this object.  Returns the number of textures
//               released.
////////////////////////////////////////////////////////////////////
56
int PreparedGraphicsObjects::release_all_textures(void);

2540 23 get_num_queued_textures 0 4 2906 48 PreparedGraphicsObjects::get_num_queued_textures 0 1 1191 344
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_textures
//       Access: Public
//  Description: Returns the number of textures that have been
//               enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
65
int PreparedGraphicsObjects::get_num_queued_textures(void) const;

2541 25 get_num_prepared_textures 0 4 2906 50 PreparedGraphicsObjects::get_num_prepared_textures 0 1 1192 339
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_textures
//       Access: Public
//  Description: Returns the number of textures that have already been
//               prepared on this GSG.
////////////////////////////////////////////////////////////////////
67
int PreparedGraphicsObjects::get_num_prepared_textures(void) const;

2542 19 prepare_texture_now 0 4 2906 44 PreparedGraphicsObjects::prepare_texture_now 0 1 1193 1165
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_texture_now
//       Access: Public
//  Description: Immediately creates a new TextureContext for the
//               indicated texture and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use enqueue_texture() instead.
//
//               Normally, this function is not called directly.  Call
//               Texture::prepare_now() instead.
//
//               The TextureContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular texture, and will exist as long as the
//               texture is ready to be rendered.
//
//               When either the Texture or the
//               PreparedGraphicsObjects object destructs, the
//               TextureContext will be deleted.
////////////////////////////////////////////////////////////////////
117
TextureContext *PreparedGraphicsObjects::prepare_texture_now(Texture *tex, int view, GraphicsStateGuardianBase *gsg);

2543 12 enqueue_geom 0 4 2906 37 PreparedGraphicsObjects::enqueue_geom 0 1 1194 407
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_geom
//       Access: Public
//  Description: Indicates that a geom would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
////////////////////////////////////////////////////////////////////
55
void PreparedGraphicsObjects::enqueue_geom(Geom *geom);

2544 14 is_geom_queued 0 4 2906 39 PreparedGraphicsObjects::is_geom_queued 0 1 1195 323
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_geom_queued
//       Access: Public
//  Description: Returns true if the geom has been queued on this
//               GSG, false otherwise.
////////////////////////////////////////////////////////////////////
69
bool PreparedGraphicsObjects::is_geom_queued(Geom const *geom) const;

2545 12 dequeue_geom 0 4 2906 37 PreparedGraphicsObjects::dequeue_geom 0 1 1196 718
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_geom
//       Access: Public
//  Description: Removes a geom from the queued list of geoms to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the geom will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the geom is
//               successfully dequeued, false if it had not been
//               queued.
////////////////////////////////////////////////////////////////////
55
bool PreparedGraphicsObjects::dequeue_geom(Geom *geom);

2546 16 is_geom_prepared 0 4 2906 41 PreparedGraphicsObjects::is_geom_prepared 0 1 1197 336
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_geom_prepared
//       Access: Public
//  Description: Returns true if the vertex buffer has been prepared on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
71
bool PreparedGraphicsObjects::is_geom_prepared(Geom const *geom) const;

2547 12 release_geom 0 4 2906 37 PreparedGraphicsObjects::release_geom 0 1 1198 804
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_geom
//       Access: Public
//  Description: Indicates that a geom context, created by a
//               previous call to prepare_geom(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release geoms--this
//               prevents conflicts from threading or multiple GSG's
//               sharing geoms (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_geom is called).
////////////////////////////////////////////////////////////////////
60
void PreparedGraphicsObjects::release_geom(GeomContext *gc);

2548 17 release_all_geoms 0 4 2906 42 PreparedGraphicsObjects::release_all_geoms 0 1 1199 448
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_geoms
//       Access: Public
//  Description: Releases all geoms at once.  This will force them
//               to be reloaded into geom memory for all GSG's that
//               share this object.  Returns the number of geoms
//               released.
////////////////////////////////////////////////////////////////////
53
int PreparedGraphicsObjects::release_all_geoms(void);

2549 20 get_num_queued_geoms 0 4 2906 45 PreparedGraphicsObjects::get_num_queued_geoms 0 1 1200 338
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_geoms
//       Access: Public
//  Description: Returns the number of geoms that have been
//               enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
62
int PreparedGraphicsObjects::get_num_queued_geoms(void) const;

2550 22 get_num_prepared_geoms 0 4 2906 47 PreparedGraphicsObjects::get_num_prepared_geoms 0 1 1201 333
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_geoms
//       Access: Public
//  Description: Returns the number of geoms that have already been
//               prepared on this GSG.
////////////////////////////////////////////////////////////////////
64
int PreparedGraphicsObjects::get_num_prepared_geoms(void) const;

2551 16 prepare_geom_now 0 4 2906 41 PreparedGraphicsObjects::prepare_geom_now 0 1 1202 1132
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_geom_now
//       Access: Public
//  Description: Immediately creates a new GeomContext for the
//               indicated geom and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               geoms.  If this is not necessarily the case, you
//               should use enqueue_geom() instead.
//
//               Normally, this function is not called directly.  Call
//               Geom::prepare_now() instead.
//
//               The GeomContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular geom, and will exist as long as the
//               geom is ready to be rendered.
//
//               When either the Geom or the
//               PreparedGraphicsObjects object destructs, the
//               GeomContext will be deleted.
////////////////////////////////////////////////////////////////////
99
GeomContext *PreparedGraphicsObjects::prepare_geom_now(Geom *geom, GraphicsStateGuardianBase *gsg);

2552 14 enqueue_shader 0 4 2906 39 PreparedGraphicsObjects::enqueue_shader 0 1 1203 411
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_shader
//       Access: Public
//  Description: Indicates that a shader would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
////////////////////////////////////////////////////////////////////
61
void PreparedGraphicsObjects::enqueue_shader(Shader *shader);

2553 16 is_shader_queued 0 4 2906 41 PreparedGraphicsObjects::is_shader_queued 0 1 1204 327
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_shader_queued
//       Access: Public
//  Description: Returns true if the shader has been queued on this
//               GSG, false otherwise.
////////////////////////////////////////////////////////////////////
75
bool PreparedGraphicsObjects::is_shader_queued(Shader const *shader) const;

2554 14 dequeue_shader 0 4 2906 39 PreparedGraphicsObjects::dequeue_shader 0 1 1205 728
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_shader
//       Access: Public
//  Description: Removes a shader from the queued list of shaders to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the shader will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the shader is
//               successfully dequeued, false if it had not been
//               queued.
////////////////////////////////////////////////////////////////////
61
bool PreparedGraphicsObjects::dequeue_shader(Shader *shader);

2555 18 is_shader_prepared 0 4 2906 43 PreparedGraphicsObjects::is_shader_prepared 0 1 1206 331
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_shader_prepared
//       Access: Public
//  Description: Returns true if the shader has been prepared on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
77
bool PreparedGraphicsObjects::is_shader_prepared(Shader const *shader) const;

2556 14 release_shader 0 4 2906 39 PreparedGraphicsObjects::release_shader 0 1 1207 816
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_shader
//       Access: Public
//  Description: Indicates that a shader context, created by a
//               previous call to prepare_shader(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release shaders--this
//               prevents conflicts from threading or multiple GSG's
//               sharing shaders (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_shader is called).
////////////////////////////////////////////////////////////////////
64
void PreparedGraphicsObjects::release_shader(ShaderContext *sc);

2557 19 release_all_shaders 0 4 2906 44 PreparedGraphicsObjects::release_all_shaders 0 1 1208 456
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_shaders
//       Access: Public
//  Description: Releases all shaders at once.  This will force them
//               to be reloaded into shader memory for all GSG's that
//               share this object.  Returns the number of shaders
//               released.
////////////////////////////////////////////////////////////////////
55
int PreparedGraphicsObjects::release_all_shaders(void);

2558 22 get_num_queued_shaders 0 4 2906 47 PreparedGraphicsObjects::get_num_queued_shaders 0 1 1209 342
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_shaders
//       Access: Public
//  Description: Returns the number of shaders that have been
//               enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
64
int PreparedGraphicsObjects::get_num_queued_shaders(void) const;

2559 24 get_num_prepared_shaders 0 4 2906 49 PreparedGraphicsObjects::get_num_prepared_shaders 0 1 1210 337
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_shaders
//       Access: Public
//  Description: Returns the number of shaders that have already been
//               prepared on this GSG.
////////////////////////////////////////////////////////////////////
66
int PreparedGraphicsObjects::get_num_prepared_shaders(void) const;

2560 18 prepare_shader_now 0 4 2906 43 PreparedGraphicsObjects::prepare_shader_now 0 1 1211 1154
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_shader_now
//       Access: Public
//  Description: Immediately creates a new ShaderContext for the
//               indicated shader and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               shaders.  If this is not necessarily the case, you
//               should use enqueue_shader() instead.
//
//               Normally, this function is not called directly.  Call
//               Shader::prepare_now() instead.
//
//               The ShaderContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular shader, and will exist as long as the
//               shader is ready to be rendered.
//
//               When either the Shader or the
//               PreparedGraphicsObjects object destructs, the
//               ShaderContext will be deleted.
////////////////////////////////////////////////////////////////////
107
ShaderContext *PreparedGraphicsObjects::prepare_shader_now(Shader *shader, GraphicsStateGuardianBase *gsg);

2561 21 enqueue_vertex_buffer 0 4 2906 46 PreparedGraphicsObjects::enqueue_vertex_buffer 0 1 1212 418
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_vertex_buffer
//       Access: Public
//  Description: Indicates that a buffer would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
////////////////////////////////////////////////////////////////////
79
void PreparedGraphicsObjects::enqueue_vertex_buffer(GeomVertexArrayData *data);

2562 23 is_vertex_buffer_queued 0 4 2906 48 PreparedGraphicsObjects::is_vertex_buffer_queued 0 1 1213 341
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_vertex_buffer_queued
//       Access: Public
//  Description: Returns true if the vertex buffer has been queued on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
93
bool PreparedGraphicsObjects::is_vertex_buffer_queued(GeomVertexArrayData const *data) const;

2563 21 dequeue_vertex_buffer 0 4 2906 46 PreparedGraphicsObjects::dequeue_vertex_buffer 0 1 1214 737
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_vertex_buffer
//       Access: Public
//  Description: Removes a buffer from the queued list of data
//               arrays to be prepared.  Normally it is not necessary
//               to call this, unless you change your mind about
//               preparing it at the last minute, since the data will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the buffer is
//               successfully dequeued, false if it had not been
//               queued.
////////////////////////////////////////////////////////////////////
79
bool PreparedGraphicsObjects::dequeue_vertex_buffer(GeomVertexArrayData *data);

2564 25 is_vertex_buffer_prepared 0 4 2906 50 PreparedGraphicsObjects::is_vertex_buffer_prepared 0 1 1215 345
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_vertex_buffer_prepared
//       Access: Public
//  Description: Returns true if the vertex buffer has been prepared on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
95
bool PreparedGraphicsObjects::is_vertex_buffer_prepared(GeomVertexArrayData const *data) const;

2565 21 release_vertex_buffer 0 4 2906 46 PreparedGraphicsObjects::release_vertex_buffer 0 1 1216 831
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_vertex_buffer
//       Access: Public
//  Description: Indicates that a data context, created by a
//               previous call to prepare_vertex_buffer(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release datas--this
//               prevents conflicts from threading or multiple GSG's
//               sharing datas (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_vertex_buffer is called).
////////////////////////////////////////////////////////////////////
78
void PreparedGraphicsObjects::release_vertex_buffer(VertexBufferContext *vbc);

2566 26 release_all_vertex_buffers 0 4 2906 51 PreparedGraphicsObjects::release_all_vertex_buffers 0 1 1217 457
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_vertex_buffers
//       Access: Public
//  Description: Releases all datas at once.  This will force them
//               to be reloaded into data memory for all GSG's that
//               share this object.  Returns the number of datas
//               released.
////////////////////////////////////////////////////////////////////
62
int PreparedGraphicsObjects::release_all_vertex_buffers(void);

2567 29 get_num_queued_vertex_buffers 0 4 2906 54 PreparedGraphicsObjects::get_num_queued_vertex_buffers 0 1 1218 356
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_vertex_buffers
//       Access: Public
//  Description: Returns the number of vertex buffers that have been
//               enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
71
int PreparedGraphicsObjects::get_num_queued_vertex_buffers(void) const;

2568 31 get_num_prepared_vertex_buffers 0 4 2906 56 PreparedGraphicsObjects::get_num_prepared_vertex_buffers 0 1 1219 351
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_vertex_buffers
//       Access: Public
//  Description: Returns the number of vertex buffers that have
//               already been prepared on this GSG.
////////////////////////////////////////////////////////////////////
73
int PreparedGraphicsObjects::get_num_prepared_vertex_buffers(void) const;

2569 25 prepare_vertex_buffer_now 0 4 2906 50 PreparedGraphicsObjects::prepare_vertex_buffer_now 0 1 1220 1174
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_vertex_buffer_now
//       Access: Public
//  Description: Immediately creates a new VertexBufferContext for the
//               indicated data and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use enqueue_vertex_buffer() instead.
//
//               Normally, this function is not called directly.  Call
//               Data::prepare_now() instead.
//
//               The VertexBufferContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular data, and will exist as long as the
//               data is ready to be rendered.
//
//               When either the Data or the
//               PreparedGraphicsObjects object destructs, the
//               VertexBufferContext will be deleted.
////////////////////////////////////////////////////////////////////
131
VertexBufferContext *PreparedGraphicsObjects::prepare_vertex_buffer_now(GeomVertexArrayData *data, GraphicsStateGuardianBase *gsg);

2570 20 enqueue_index_buffer 0 4 2906 45 PreparedGraphicsObjects::enqueue_index_buffer 0 1 1221 417
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_index_buffer
//       Access: Public
//  Description: Indicates that a buffer would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
////////////////////////////////////////////////////////////////////
72
void PreparedGraphicsObjects::enqueue_index_buffer(GeomPrimitive *data);

2571 22 is_index_buffer_queued 0 4 2906 47 PreparedGraphicsObjects::is_index_buffer_queued 0 1 1222 339
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_index_buffer_queued
//       Access: Public
//  Description: Returns true if the index buffer has been queued on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
86
bool PreparedGraphicsObjects::is_index_buffer_queued(GeomPrimitive const *data) const;

2572 20 dequeue_index_buffer 0 4 2906 45 PreparedGraphicsObjects::dequeue_index_buffer 0 1 1223 736
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_index_buffer
//       Access: Public
//  Description: Removes a buffer from the queued list of data
//               arrays to be prepared.  Normally it is not necessary
//               to call this, unless you change your mind about
//               preparing it at the last minute, since the data will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the buffer is
//               successfully dequeued, false if it had not been
//               queued.
////////////////////////////////////////////////////////////////////
72
bool PreparedGraphicsObjects::dequeue_index_buffer(GeomPrimitive *data);

2573 24 is_index_buffer_prepared 0 4 2906 49 PreparedGraphicsObjects::is_index_buffer_prepared 0 1 1224 343
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_index_buffer_prepared
//       Access: Public
//  Description: Returns true if the index buffer has been prepared on
//               this GSG, false otherwise.
////////////////////////////////////////////////////////////////////
88
bool PreparedGraphicsObjects::is_index_buffer_prepared(GeomPrimitive const *data) const;

2574 20 release_index_buffer 0 4 2906 45 PreparedGraphicsObjects::release_index_buffer 0 1 1225 828
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_index_buffer
//       Access: Public
//  Description: Indicates that a data context, created by a
//               previous call to prepare_index_buffer(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release datas--this
//               prevents conflicts from threading or multiple GSG's
//               sharing datas (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_index_buffer is called).
////////////////////////////////////////////////////////////////////
76
void PreparedGraphicsObjects::release_index_buffer(IndexBufferContext *ibc);

2575 25 release_all_index_buffers 0 4 2906 50 PreparedGraphicsObjects::release_all_index_buffers 0 1 1226 456
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_index_buffers
//       Access: Public
//  Description: Releases all datas at once.  This will force them
//               to be reloaded into data memory for all GSG's that
//               share this object.  Returns the number of datas
//               released.
////////////////////////////////////////////////////////////////////
61
int PreparedGraphicsObjects::release_all_index_buffers(void);

2576 28 get_num_queued_index_buffers 0 4 2906 53 PreparedGraphicsObjects::get_num_queued_index_buffers 0 1 1227 354
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_index_buffers
//       Access: Public
//  Description: Returns the number of index buffers that have been
//               enqueued to be prepared on this GSG.
////////////////////////////////////////////////////////////////////
70
int PreparedGraphicsObjects::get_num_queued_index_buffers(void) const;

2577 30 get_num_prepared_index_buffers 0 4 2906 55 PreparedGraphicsObjects::get_num_prepared_index_buffers 0 1 1228 349
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_index_buffers
//       Access: Public
//  Description: Returns the number of index buffers that have
//               already been prepared on this GSG.
////////////////////////////////////////////////////////////////////
72
int PreparedGraphicsObjects::get_num_prepared_index_buffers(void) const;

2578 24 prepare_index_buffer_now 0 4 2906 49 PreparedGraphicsObjects::prepare_index_buffer_now 0 1 1229 1169
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_index_buffer_now
//       Access: Public
//  Description: Immediately creates a new IndexBufferContext for the
//               indicated data and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use enqueue_index_buffer() instead.
//
//               Normally, this function is not called directly.  Call
//               Data::prepare_now() instead.
//
//               The IndexBufferContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular data, and will exist as long as the
//               data is ready to be rendered.
//
//               When either the Data or the
//               PreparedGraphicsObjects object destructs, the
//               IndexBufferContext will be deleted.
////////////////////////////////////////////////////////////////////
123
IndexBufferContext *PreparedGraphicsObjects::prepare_index_buffer_now(GeomPrimitive *data, GraphicsStateGuardianBase *gsg);

2579 23 upcast_to_BufferContext 0 12 2907 43 IndexBufferContext::upcast_to_BufferContext 0 1 1235 47
upcast from IndexBufferContext to BufferContext
65
BufferContext *IndexBufferContext::upcast_to_BufferContext(void);

2580 30 downcast_to_IndexBufferContext 0 12 2874 45 BufferContext::downcast_to_IndexBufferContext 0 1 1236 49
downcast from BufferContext to IndexBufferContext
72
IndexBufferContext *BufferContext::downcast_to_IndexBufferContext(void);

2581 25 upcast_to_AdaptiveLruPage 0 12 2907 45 IndexBufferContext::upcast_to_AdaptiveLruPage 0 1 1237 49
upcast from IndexBufferContext to AdaptiveLruPage
69
AdaptiveLruPage *IndexBufferContext::upcast_to_AdaptiveLruPage(void);

2582 30 downcast_to_IndexBufferContext 0 12 2830 47 AdaptiveLruPage::downcast_to_IndexBufferContext 0 1 1238 51
downcast from AdaptiveLruPage to IndexBufferContext
74
IndexBufferContext *AdaptiveLruPage::downcast_to_IndexBufferContext(void);

2583 8 get_data 0 4 2907 28 IndexBufferContext::get_data 0 1 1230 299
////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::get_data
//       Access: Public
//  Description: Returns the pointer to the client-side array data
//               object.
////////////////////////////////////////////////////////////////////
63
inline GeomPrimitive *IndexBufferContext::get_data(void) const;

2584 12 changed_size 0 4 2907 32 IndexBufferContext::changed_size 0 1 1231 333
////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::changed_size
//       Access: Public
//  Description: Returns true if the data has changed size since the
//               last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
94
inline bool IndexBufferContext::changed_size(GeomPrimitivePipelineReader const *reader) const;

2585 18 changed_usage_hint 0 4 2907 38 IndexBufferContext::changed_usage_hint 0 1 1232 349
////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::changed_usage_hint
//       Access: Public
//  Description: Returns true if the data has changed its usage hint
//               since the last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
100
inline bool IndexBufferContext::changed_usage_hint(GeomPrimitivePipelineReader const *reader) const;

2586 12 was_modified 0 4 2907 32 IndexBufferContext::was_modified 0 1 1233 334
////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::was_modified
//       Access: Public
//  Description: Returns true if the data has been modified since the
//               last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
94
inline bool IndexBufferContext::was_modified(GeomPrimitivePipelineReader const *reader) const;

2587 14 get_class_type 0 4 2907 34 IndexBufferContext::get_class_type 0 1 1234 0
59
static TypeHandle IndexBufferContext::get_class_type(void);

2588 19 ~IndexBufferContext 0 4 2907 39 IndexBufferContext::~IndexBufferContext 0 0 0
46
IndexBufferContext::~IndexBufferContext(void);

2589 9 make_copy 0 4 2908 15 Lens::make_copy 0 1 1239 0
58
virtual PointerTo< Lens > Lens::make_copy(void) const = 0;

2590 7 extrude 0 4 2908 13 Lens::extrude 0 2 1240 1241 2120
// Filename: lens.I
// Created by:  drose (29Nov01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
201
inline bool Lens::extrude(LPoint2f const &point2d, LPoint3f &near_point, LPoint3f &far_point) const;
inline bool Lens::extrude(LPoint3f const &point2d, LPoint3f &near_point, LPoint3f &far_point) const;

2591 11 extrude_vec 0 4 2908 17 Lens::extrude_vec 0 2 1242 1243 1838
////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
159
inline bool Lens::extrude_vec(LPoint2f const &point2d, LVector3f &vec3d) const;
inline bool Lens::extrude_vec(LPoint3f const &point2d, LVector3f &vec3d) const;

2592 7 project 0 4 2908 13 Lens::project 0 2 1244 1245 1751
////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               The z coordinate will also be set to a value in the
//               range (-1, 1), where 1 represents a point on the near
//               plane, and -1 represents a point on the far plane.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
////////////////////////////////////////////////////////////////////
153
inline bool Lens::project(LPoint3f const &point3d, LPoint3f &point2d) const;
inline bool Lens::project(LPoint3f const &point3d, LPoint2f &point2d) const;

2593 16 set_change_event 0 4 2908 22 Lens::set_change_event 0 1 1246 643
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_change_event
//       Access: Published
//  Description: Sets the name of the event that will be generated
//               whenever any properties of the Lens have
//               changed.  If this is not set for a particular lens,
//               no event will be generated.
//
//               The event is thrown with one parameter, the lens
//               itself.  This can be used to automatically track
//               changes to camera fov, etc. in the application.
////////////////////////////////////////////////////////////////////
70
inline void Lens::set_change_event(basic_string< char > const &event);

2594 16 get_change_event 0 4 2908 22 Lens::get_change_event 0 1 1247 370
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_change_event
//       Access: Published
//  Description: Returns the name of the event that will be generated
//               whenever any properties of this particular Lens have
//               changed.
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &Lens::get_change_event(void) const;

2595 21 set_coordinate_system 0 4 2908 27 Lens::set_coordinate_system 0 1 1248 385
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
////////////////////////////////////////////////////////////////////
54
void Lens::set_coordinate_system(CoordinateSystem cs);

2596 21 get_coordinate_system 0 4 2908 27 Lens::get_coordinate_system 0 1 1249 383
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
////////////////////////////////////////////////////////////////////
64
inline CoordinateSystem Lens::get_coordinate_system(void) const;

2597 5 clear 0 4 2908 11 Lens::clear 0 1 1250 289
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear
//       Access: Published
//  Description: Resets all lens parameters to their initial default
//               settings.
////////////////////////////////////////////////////////////////////
23
void Lens::clear(void);

2598 13 set_film_size 0 4 2908 19 Lens::set_film_size 0 3 1251 1252 1253 2825
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the horizontal size of the film without changing
//               its shape.  The aspect ratio remains unchanged; this
//               computes the vertical size of the film to
//               automatically maintain the aspect ratio.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
////////////////////////////////////////////////////////////////////
167
inline void Lens::set_film_size(float width);
inline void Lens::set_film_size(float width, float height);
inline void Lens::set_film_size(LVecBase2f const &film_size);

2599 13 get_film_size 0 4 2908 19 Lens::get_film_size 0 1 1254 324
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_size
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_film_size().
////////////////////////////////////////////////////////////////////
57
inline LVecBase2f const &Lens::get_film_size(void) const;

2600 15 set_film_offset 0 4 2908 21 Lens::set_film_offset 0 2 1255 1256 898
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
////////////////////////////////////////////////////////////////////
118
inline void Lens::set_film_offset(float x, float y);
inline void Lens::set_film_offset(LVecBase2f const &film_offset);

2601 15 get_film_offset 0 4 2908 21 Lens::get_film_offset 0 1 1257 326
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_offset
//       Access: Published
//  Description: Returns the horizontal and vertical offset amounts of
//               this Lens.  See set_film_offset().
////////////////////////////////////////////////////////////////////
58
inline LVector2f const &Lens::get_film_offset(void) const;

2602 16 set_focal_length 0 4 2908 22 Lens::set_focal_length 0 1 1258 515
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_focal_length
//       Access: Published
//  Description: Sets the focal length of the lens.  This may adjust
//               the field-of-view correspondingly, and is an
//               alternate way to specify field of view.
//
//               For certain kinds of lenses (e.g. OrthographicLens),
//               the focal length has no meaning.
////////////////////////////////////////////////////////////////////
55
inline void Lens::set_focal_length(float focal_length);

2603 16 get_focal_length 0 4 2908 22 Lens::get_focal_length 0 1 1259 527
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_focal_length
//       Access: Published
//  Description: Returns the focal length of the lens.  This may have
//               been set explicitly by a previous call to
//               set_focal_length(), or it may be computed based on
//               the lens' fov and film_size.  For certain kinds of
//               lenses, the focal length has no meaning.
////////////////////////////////////////////////////////////////////
48
inline float Lens::get_focal_length(void) const;

2604 11 set_min_fov 0 4 2908 17 Lens::set_min_fov 0 1 1260 836
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_min_fov
//       Access: Published
//  Description: Sets the field of view of the smallest dimension of
//               the window.  If the window is wider than it is tall,
//               this specifies the vertical field of view; if it is
//               taller than it is wide, this specifies the horizontal
//               field of view.
//
//               In many cases, this is preferable to setting either
//               the horizontal or vertical field of view explicitly.
//               Setting this parameter means that pulling the window
//               wider will widen the field of view, which is usually
//               what you expect to happen.
////////////////////////////////////////////////////////////////////
38
void Lens::set_min_fov(float min_fov);

2605 7 set_fov 0 4 2908 13 Lens::set_fov 0 3 1261 1262 1263 1651
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the horizontal field of view of the lens without
//               changing the aspect ratio.  The vertical field of
//               view is adjusted to maintain the same aspect ratio.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthoLens),
//               the field of view has no meaning.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthographicLens),
//               the field of view has no meaning.
////////////////////////////////////////////////////////////////////
138
inline void Lens::set_fov(float fov);
inline void Lens::set_fov(float hfov, float vfov);
inline void Lens::set_fov(LVecBase2f const &fov);

2606 7 get_fov 0 4 2908 13 Lens::get_fov 0 1 1264 312
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_fov
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_fov().
////////////////////////////////////////////////////////////////////
51
inline LVecBase2f const &Lens::get_fov(void) const;

2607 8 get_hfov 0 4 2908 14 Lens::get_hfov 0 1 1265 292
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_hfov
//       Access: Published
//  Description: Returns the horizontal component of fov only.  See
//               get_fov().
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_hfov(void) const;

2608 8 get_vfov 0 4 2908 14 Lens::get_vfov 0 1 1266 290
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_vfov
//       Access: Published
//  Description: Returns the vertical component of fov only.  See
//               get_fov().
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_vfov(void) const;

2609 11 get_min_fov 0 4 2908 17 Lens::get_min_fov 0 1 1267 321
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_min_fov
//       Access: Published
//  Description: Returns the field of view of the narrowest dimension
//               of the window.  See set_min_fov().
////////////////////////////////////////////////////////////////////
36
float Lens::get_min_fov(void) const;

2610 16 set_aspect_ratio 0 4 2908 22 Lens::set_aspect_ratio 0 1 1268 444
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_aspect_ratio
//       Access: Published
//  Description: Sets the aspect ratio of the lens.  This is the ratio
//               of the height to the width of the generated image.
//               Setting this overrides the two-parameter fov or film
//               size setting.
////////////////////////////////////////////////////////////////////
55
inline void Lens::set_aspect_ratio(float aspect_ratio);

2611 16 get_aspect_ratio 0 4 2908 22 Lens::get_aspect_ratio 0 1 1269 368
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_aspect_ratio
//       Access: Published
//  Description: Returns the aspect ratio of the Lens.  This is
//               determined based on the indicated film size; see
//               set_film_size().
////////////////////////////////////////////////////////////////////
48
inline float Lens::get_aspect_ratio(void) const;

2612 8 set_near 0 4 2908 14 Lens::set_near 0 1 1270 377
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near
//       Access: Published
//  Description: Defines the position of the near plane (or cylinder,
//               sphere, whatever).  Points closer to the lens than
//               this may not be rendered.
////////////////////////////////////////////////////////////////////
48
inline void Lens::set_near(float near_distance);

2613 8 get_near 0 4 2908 14 Lens::get_near 0 1 1271 302
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_near
//       Access: Published
//  Description: Returns the position of the near plane (or cylinder,
//               sphere, whatever).
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_near(void) const;

2614 7 set_far 0 4 2908 13 Lens::set_far 0 1 1272 378
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_far
//       Access: Published
//  Description: Defines the position of the far plane (or cylinder,
//               sphere, whatever).  Points farther from the lens than
//               this may not be rendered.
////////////////////////////////////////////////////////////////////
46
inline void Lens::set_far(float far_distance);

2615 7 get_far 0 4 2908 13 Lens::get_far 0 1 1273 300
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_far
//       Access: Published
//  Description: Returns the position of the far plane (or cylinder,
//               sphere, whatever).
////////////////////////////////////////////////////////////////////
39
inline float Lens::get_far(void) const;

2616 12 set_near_far 0 4 2908 18 Lens::set_near_far 0 1 1274 265
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near_far
//       Access: Published
//  Description: Simultaneously changes the near and far planes.
////////////////////////////////////////////////////////////////////
72
inline void Lens::set_near_far(float near_distance, float far_distance);

2617 16 get_default_near 0 4 2908 22 Lens::get_default_near 0 1 1275 391
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_near
//       Access: Published, Static
//  Description: Returns the default near plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
////////////////////////////////////////////////////////////////////
42
static float Lens::get_default_near(void);

2618 15 get_default_far 0 4 2908 21 Lens::get_default_far 0 1 1276 389
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_far
//       Access: Published, Static
//  Description: Returns the default far plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
////////////////////////////////////////////////////////////////////
41
static float Lens::get_default_far(void);

2619 12 set_view_hpr 0 4 2908 18 Lens::set_view_hpr 0 2 1277 1278 1188
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
////////////////////////////////////////////////////////////////////
111
inline void Lens::set_view_hpr(float h, float p, float r);
void Lens::set_view_hpr(LVecBase3f const &view_hpr);

2620 12 get_view_hpr 0 4 2908 18 Lens::get_view_hpr 0 1 1279 268
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_hpr
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
////////////////////////////////////////////////////////////////////
49
LVecBase3f const &Lens::get_view_hpr(void) const;

2621 15 set_view_vector 0 4 2908 21 Lens::set_view_vector 0 2 1280 1281 882
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
////////////////////////////////////////////////////////////////////
174
inline void Lens::set_view_vector(float x, float y, float z, float i, float j, float k);
void Lens::set_view_vector(LVector3f const &view_vector, LVector3f const &up_vector);

2622 15 get_view_vector 0 4 2908 21 Lens::get_view_vector 0 1 1282 269
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_vector
//       Access: Published
//  Description: Returns the axis along which the lens is facing.
////////////////////////////////////////////////////////////////////
51
LVector3f const &Lens::get_view_vector(void) const;

2623 13 get_up_vector 0 4 2908 19 Lens::get_up_vector 0 1 1283 329
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_up_vector
//       Access: Published
//  Description: Returns the axis perpendicular to the camera's view
//               vector that indicates the "up" direction.
////////////////////////////////////////////////////////////////////
49
LVector3f const &Lens::get_up_vector(void) const;

2624 15 get_nodal_point 0 4 2908 21 Lens::get_nodal_point 0 1 1284 317
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_nodal_point
//       Access: Published
//  Description: Returns the center point of the lens: the point from
//               which the lens is viewing.
////////////////////////////////////////////////////////////////////
43
LPoint3f Lens::get_nodal_point(void) const;

2625 24 set_interocular_distance 0 4 2908 30 Lens::set_interocular_distance 0 1 1285 796
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_interocular_distance
//       Access: Published
//  Description: Sets the distance between the left and right eyes of
//               a stereo camera.  This distance is used to apply a
//               stereo effect when the lens is rendered on a stereo
//               display region.  It only has an effect on a
//               PerspectiveLens.
//
//               The left eye and the right eye are each offset along
//               the X axis by half of this distance, so that this
//               parameter specifies the total distance between them.
//
//               Also see set_convergence_distance(), which relates.
////////////////////////////////////////////////////////////////////
71
inline void Lens::set_interocular_distance(float interocular_distance);

2626 24 get_interocular_distance 0 4 2908 30 Lens::get_interocular_distance 0 1 1286 261
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_interocular_distance
//       Access: Published
//  Description: See set_interocular_distance().
////////////////////////////////////////////////////////////////////
56
inline float Lens::get_interocular_distance(void) const;

2627 24 set_convergence_distance 0 4 2908 30 Lens::set_convergence_distance 0 1 1287 1237
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_convergence_distance
//       Access: Published
//  Description: Sets the distance between between the camera plane
//               and the point in the distance that the left and right
//               eyes are both looking at.  This distance is used to
//               apply a stereo effect when the lens is rendered on a
//               stereo display region.  It only has an effect on a
//               PerspectiveLens.
//
//               This parameter must be greater than 0, but may be as
//               large as you like.  It controls the amount to which
//               the two eyes are directed inwards towards each other,
//               which is a normal property of stereo vision.  It is a
//               distance, not an angle; normally this should be set
//               to the distance from the camera to the area of
//               interest in your scene.  If you want to simulate
//               parallel stereo, set this value to a very large
//               number.
//
//               Also see set_interocular_distance(), which relates.
////////////////////////////////////////////////////////////////////
71
inline void Lens::set_convergence_distance(float convergence_distance);

2628 24 get_convergence_distance 0 4 2908 30 Lens::get_convergence_distance 0 1 1288 261
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_convergence_distance
//       Access: Published
//  Description: See set_convergence_distance().
////////////////////////////////////////////////////////////////////
56
inline float Lens::get_convergence_distance(void) const;

2629 12 set_view_mat 0 4 2908 18 Lens::set_view_mat 0 1 1289 831
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_mat
//       Access: Published
//  Description: Sets an arbitrary transformation on the lens.  This
//               replaces the individual transformation components
//               like set_view_hpr().
//
//               Setting a transformation here will have a slightly
//               different effect than putting one on the LensNode
//               that contains this lens.  In particular, lighting and
//               other effects computations will still be performed on
//               the lens in its untransformed (facing forward)
//               position, but the actual projection matrix will be
//               transformed by this matrix.
////////////////////////////////////////////////////////////////////
58
inline void Lens::set_view_mat(LMatrix4f const &view_mat);

2630 12 get_view_mat 0 4 2908 18 Lens::get_view_mat 0 1 1290 268
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_mat
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f const &Lens::get_view_mat(void) const;

2631 14 clear_view_mat 0 4 2908 20 Lens::clear_view_mat 0 1 1291 258
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_view_mat
//       Access: Published
//  Description: Resets the lens transform to identity.
////////////////////////////////////////////////////////////////////
32
void Lens::clear_view_mat(void);

2632 12 set_keystone 0 4 2908 18 Lens::set_keystone 0 1 1292 989
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_keystone
//       Access: Published
//  Description: Indicates the ratio of keystone correction to perform
//               on the lens, in each of three axes.  This will build
//               a special non-affine scale factor into the projection
//               matrix that will compensate for keystoning of a
//               projected image; this can be used to compensate for a
//               projector that for physical reasons cannot be aimed
//               directly at its screen.  
//
//               The default value is taken from the default-keystone
//               Config variable.  0, 0 indicates no keystone
//               correction; specify a small value (usually in the
//               range -1 .. 1) in either the x or y position to
//               generate a keystone correction in that axis.
////////////////////////////////////////////////////////////////////
52
void Lens::set_keystone(LVecBase2f const &keystone);

2633 12 get_keystone 0 4 2908 18 Lens::get_keystone 0 1 1293 290
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_keystone
//       Access: Published
//  Description: Returns the keystone correction specified for the
//               lens.
////////////////////////////////////////////////////////////////////
56
inline LVecBase2f const &Lens::get_keystone(void) const;

2634 14 clear_keystone 0 4 2908 20 Lens::clear_keystone 0 1 1294 258
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_keystone
//       Access: Published
//  Description: Disables the lens keystone correction.
////////////////////////////////////////////////////////////////////
32
void Lens::clear_keystone(void);

2635 24 set_frustum_from_corners 0 4 2908 30 Lens::set_frustum_from_corners 0 1 1295 3080
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_frustum_from_corners
//       Access: Published
//  Description: Sets up the lens to use the frustum defined by the
//               four indicated points.  This is most useful for a
//               PerspectiveLens, but it may be called for other kinds
//               of lenses as well.
//
//               The frustum will be rooted at the origin (or by
//               whatever translation might have been specified in a
//               previous call to set_view_mat).
//
//               It is legal for the four points not to be arranged in
//               a rectangle; if this is the case, the frustum will be
//               fitted as tightly as possible to cover all four
//               points.
//
//               The flags parameter contains the union of one or more
//               of the following bits to control the behavior of this
//               function:
//
//               FC_roll - If this is included, the camera may be
//               rotated so that its up vector is perpendicular to the
//               top line.  Otherwise, the standard up vector is used.
//
//               FC_camera_plane - This allows the camera plane to be
//               adjusted to be as nearly perpendicular to the center
//               of the frustum as possible.  Without this bit, the
//               orientation camera plane is defined by position of
//               the four points (which should all be coplanar).  With
//               this bit, the camera plane is arbitarary, and may be
//               chosen so that the four points do not themselves lie
//               in the camera plane (but the points will still be
//               within the frustum).
//
//               FC_off_axis - This allows the resulting frustum to be
//               off-axis to get the tightest possible fit.  Without
//               this bit, the viewing axis will be centered within
//               the frustum, but there may be more wasted space along
//               the edges.
//
//               FC_aspect_ratio - This allows the frustum to be
//               scaled non-proportionately in the vertical and
//               horizontal dimensions, if necessary, to get a tighter
//               fit.  Without this bit, the current aspect ratio will
//               be preserved.
//
//               FC_shear - This allows the frustum to be sheared, if
//               necessary, to get the tightest possible fit.  This
//               may result in a parallelogram-based frustum, which
//               will give a slanted appearance to the rendered image.
//               Without this bit, the frustum will be
//               rectangle-based.
//
//               In general, if 0 is passed in as the value for flags,
//               the generated frustum will be a loose fit but sane;
//               if -1 is passed in, it will be a tighter fit and
//               possibly screwy.
////////////////////////////////////////////////////////////////////
135
void Lens::set_frustum_from_corners(LVecBase3f const &ul, LVecBase3f const &ur, LVecBase3f const &ll, LVecBase3f const &lr, int flags);

2636 13 recompute_all 0 4 2908 19 Lens::recompute_all 0 1 1296 405
////////////////////////////////////////////////////////////////////
//     Function: Lens::recompute_all
//       Access: Published
//  Description: Forces all internal parameters of the Lens to be
//               recomputed.  Normally, this should never need to be
//               called; it is provided only to assist in debugging.
////////////////////////////////////////////////////////////////////
31
void Lens::recompute_all(void);

2637 9 is_linear 0 4 2908 15 Lens::is_linear 0 1 1297 464
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_linear
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a linear
//               projection (e.g. PerspectiveLens, OrthographicLens),
//               and therefore there is a valid matrix returned by
//               get_projection_mat(), or false otherwise.
////////////////////////////////////////////////////////////////////
41
virtual bool Lens::is_linear(void) const;

2638 14 is_perspective 0 4 2908 20 Lens::is_perspective 0 1 1298 372
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_perspective
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a perspective
//               projection (i.e. it is a PerspectiveLens), false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool Lens::is_perspective(void) const;

2639 15 is_orthographic 0 4 2908 21 Lens::is_orthographic 0 1 1299 375
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_orthographic
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a orthographic
//               projection (i.e. it is a OrthographicLens), false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool Lens::is_orthographic(void) const;

2640 13 make_geometry 0 4 2908 19 Lens::make_geometry 0 1 1300 515
////////////////////////////////////////////////////////////////////
//     Function: Lens::make_geometry
//       Access: Published, Virtual
//  Description: Allocates and returns a new Geom that can be rendered
//               to show a visible representation of the frustum used
//               for this kind of lens, if it makes sense to do
//               so.  If a visible representation cannot be created,
//               returns NULL.
////////////////////////////////////////////////////////////////////
52
virtual PointerTo< Geom > Lens::make_geometry(void);

2641 11 make_bounds 0 4 2908 17 Lens::make_bounds 0 1 1301 450
////////////////////////////////////////////////////////////////////
//     Function: Lens::make_bounds
//       Access: Published, Virtual
//  Description: Allocates and returns a new BoundingVolume that
//               encloses the frustum used for this kind of
//               lens, if possible.  If a suitable bounding
//               volume cannot be created, returns NULL.
////////////////////////////////////////////////////////////////////
66
virtual PointerTo< BoundingVolume > Lens::make_bounds(void) const;

2642 18 get_projection_mat 0 4 2908 24 Lens::get_projection_mat 0 2 1302 1303 441
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat
//       Access: Published
//  Description: Returns the complete transformation matrix from a 3-d
//               point in space to a point on the film, if such a
//               matrix exists, or the identity matrix if the lens is
//               nonlinear.
////////////////////////////////////////////////////////////////////
96
inline LMatrix4f const &Lens::get_projection_mat(Lens::StereoChannel channel = (SC_mono)) const;

2643 22 get_projection_mat_inv 0 4 2908 28 Lens::get_projection_mat_inv 0 2 1304 1305 376
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a 2-d point
//               on the film to a 3-d vector in space, if such a
//               matrix exists.
////////////////////////////////////////////////////////////////////
100
inline LMatrix4f const &Lens::get_projection_mat_inv(Lens::StereoChannel channel = (SC_mono)) const;

2644 12 get_film_mat 0 4 2908 18 Lens::get_film_mat 0 1 1306 322
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               behind the lens to a point on the film.
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f const &Lens::get_film_mat(void) const;

2645 16 get_film_mat_inv 0 4 2908 22 Lens::get_film_mat_inv 0 1 1307 326
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point on
//               the film to a point behind the lens.
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f const &Lens::get_film_mat_inv(void) const;

2646 12 get_lens_mat 0 4 2908 18 Lens::get_lens_mat 0 1 1308 324
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               in front of the lens to a point in space.
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f const &Lens::get_lens_mat(void) const;

2647 16 get_lens_mat_inv 0 4 2908 22 Lens::get_lens_mat_inv 0 1 1309 328
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point in
//               space to a point in front of the lens.
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f const &Lens::get_lens_mat_inv(void) const;

2648 6 output 0 4 2908 12 Lens::output 0 1 1310 221
////////////////////////////////////////////////////////////////////
//     Function: Lens::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual void Lens::output(ostream &out) const;

2649 5 write 0 4 2908 11 Lens::write 0 2 1311 1312 220
////////////////////////////////////////////////////////////////////
//     Function: Lens::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
69
virtual void Lens::write(ostream &out, int indent_level = (0)) const;

2650 15 get_last_change 0 4 2908 21 Lens::get_last_change 0 1 1313 447
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_last_change
//       Access: Published
//  Description: Returns the UpdateSeq that is incremented whenever
//               the lens properties are changed.  As long as this
//               number remains the same, you may assume the lens
//               properties are unchanged.
////////////////////////////////////////////////////////////////////
51
inline UpdateSeq Lens::get_last_change(void) const;

2651 14 get_class_type 0 4 2908 20 Lens::get_class_type 0 1 1314 0
45
static TypeHandle Lens::get_class_type(void);

2652 5 ~Lens 0 4 2908 11 Lens::~Lens 0 0 0
18
Lens::~Lens(void);

2653 37 upcast_to_TypedWritableReferenceCount 0 12 2911 47 Material::upcast_to_TypedWritableReferenceCount 0 1 1351 51
upcast from Material to TypedWritableReferenceCount
83
TypedWritableReferenceCount *Material::upcast_to_TypedWritableReferenceCount(void);

2654 20 downcast_to_Material 0 12 2843 49 TypedWritableReferenceCount::downcast_to_Material 0 1 1352 53
downcast from TypedWritableReferenceCount to Material
66
Material *TypedWritableReferenceCount::downcast_to_Material(void);

2655 17 upcast_to_Namable 0 12 2911 27 Material::upcast_to_Namable 0 1 1353 31
upcast from Material to Namable
43
Namable *Material::upcast_to_Namable(void);

2656 20 downcast_to_Material 0 12 2829 29 Namable::downcast_to_Material 0 1 1354 33
downcast from Namable to Material
46
Material *Namable::downcast_to_Material(void);

2657 8 Material 0 4 2911 18 Material::Material 0 3 1315 1316 1317 930
// Filename: material.I
// Created by:  mike (05Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Material::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline Material::Material(basic_string< char > const &name = (""));
inline Material::Material(Material const &copy);

2658 10 operator = 0 4 2911 20 Material::operator = 0 1 1318 233
////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void Material::operator =(Material const &copy);

2659 9 ~Material 0 4 2911 19 Material::~Material 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Material::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
virtual inline Material::~Material(void);

2660 11 get_default 0 4 2911 21 Material::get_default 0 1 1319 258
////////////////////////////////////////////////////////////////////
//     Function: Material::get_default
//       Access: Published, Static
//  Description: Returns the default material.
////////////////////////////////////////////////////////////////////
52
static inline Material *Material::get_default(void);

2661 11 has_ambient 0 4 2911 21 Material::has_ambient 0 1 1320 331
////////////////////////////////////////////////////////////////////
//     Function: Material::has_ambient
//       Access: Published
//  Description: Returns true if the ambient color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Material::has_ambient(void) const;

2662 11 get_ambient 0 4 2911 21 Material::get_ambient 0 1 1321 367
////////////////////////////////////////////////////////////////////
//     Function: Material::get_ambient
//       Access: Published
//  Description: Returns the ambient color setting, if it has been
//               set.  Returns (0,0,0,0) if the ambient color has not
//               been set.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &Material::get_ambient(void) const;

2663 11 set_ambient 0 4 2911 21 Material::set_ambient 0 1 1322 592
////////////////////////////////////////////////////////////////////
//     Function: Material::set_ambient
//       Access: Published
//  Description: Specifies the ambient color setting of the material.
//               This will be the multiplied by any ambient lights in
//               effect on the material to set its base color.
//
//               This is the color of the object as it appears in the
//               absence of direct light.
//
//               If this is not set, the object color will be used.
////////////////////////////////////////////////////////////////////
52
void Material::set_ambient(LVecBase4f const &color);

2664 13 clear_ambient 0 4 2911 23 Material::clear_ambient 0 1 1323 276
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_ambient
//       Access: Published
//  Description: Removes the explicit ambient color from the material.
////////////////////////////////////////////////////////////////////
42
inline void Material::clear_ambient(void);

2665 11 has_diffuse 0 4 2911 21 Material::has_diffuse 0 1 1324 331
////////////////////////////////////////////////////////////////////
//     Function: Material::has_diffuse
//       Access: Published
//  Description: Returns true if the diffuse color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Material::has_diffuse(void) const;

2666 11 get_diffuse 0 4 2911 21 Material::get_diffuse 0 1 1325 367
////////////////////////////////////////////////////////////////////
//     Function: Material::get_diffuse
//       Access: Published
//  Description: Returns the diffuse color setting, if it has been
//               set.  Returns (1,1,1,1) if the diffuse color has not
//               been set.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &Material::get_diffuse(void) const;

2667 11 set_diffuse 0 4 2911 21 Material::set_diffuse 0 1 1326 709
////////////////////////////////////////////////////////////////////
//     Function: Material::set_diffuse
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to get the color in the parts of the
//               object illuminated by the lights.
//
//               This is the primary color of an object; the color of
//               the object as it appears in direct light, in the
//               absence of highlights.
//
//               If this is not set, the object color will be used.
////////////////////////////////////////////////////////////////////
52
void Material::set_diffuse(LVecBase4f const &color);

2668 13 clear_diffuse 0 4 2911 23 Material::clear_diffuse 0 1 1327 276
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_diffuse
//       Access: Published
//  Description: Removes the explicit diffuse color from the material.
////////////////////////////////////////////////////////////////////
42
inline void Material::clear_diffuse(void);

2669 12 has_specular 0 4 2911 22 Material::has_specular 0 1 1328 333
////////////////////////////////////////////////////////////////////
//     Function: Material::has_specular
//       Access: Published
//  Description: Returns true if the specular color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool Material::has_specular(void) const;

2670 12 get_specular 0 4 2911 22 Material::get_specular 0 1 1329 370
////////////////////////////////////////////////////////////////////
//     Function: Material::get_specular
//       Access: Published
//  Description: Returns the specular color setting, if it has been
//               set.  Returns (0,0,0,0) if the specular color has not
//               been set.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &Material::get_specular(void) const;

2671 12 set_specular 0 4 2911 22 Material::set_specular 0 1 1330 637
////////////////////////////////////////////////////////////////////
//     Function: Material::set_specular
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to compute the color of specular
//               highlights on the object.
//
//               This is the highlight color of an object: the color
//               of small highlight reflections.
//
//               If this is not set, highlights will not appear.
////////////////////////////////////////////////////////////////////
53
void Material::set_specular(LVecBase4f const &color);

2672 14 clear_specular 0 4 2911 24 Material::clear_specular 0 1 1331 278
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_specular
//       Access: Published
//  Description: Removes the explicit specular color from the material.
////////////////////////////////////////////////////////////////////
43
inline void Material::clear_specular(void);

2673 12 has_emission 0 4 2911 22 Material::has_emission 0 1 1332 333
////////////////////////////////////////////////////////////////////
//     Function: Material::has_emission
//       Access: Published
//  Description: Returns true if the emission color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool Material::has_emission(void) const;

2674 12 get_emission 0 4 2911 22 Material::get_emission 0 1 1333 370
////////////////////////////////////////////////////////////////////
//     Function: Material::get_emission
//       Access: Published
//  Description: Returns the emission color setting, if it has been
//               set.  Returns (0,0,0,0) if the emission color has not
//               been set.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &Material::get_emission(void) const;

2675 12 set_emission 0 4 2911 22 Material::set_emission 0 1 1334 768
////////////////////////////////////////////////////////////////////
//     Function: Material::set_emission
//       Access: Published
//  Description: Specifies the emission color setting of the material.
//               This is the color of the object as it appears in the
//               absence of any light whatsover, including ambient
//               light.  It is as if the object is glowing by this
//               color (although of course it will not illuminate
//               neighboring objects).
//
//               If this is not set, the object will not glow by its
//               own light and will only appear visible in the
//               presence of one or more lights.
////////////////////////////////////////////////////////////////////
53
void Material::set_emission(LVecBase4f const &color);

2676 14 clear_emission 0 4 2911 24 Material::clear_emission 0 1 1335 278
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_emission
//       Access: Published
//  Description: Removes the explicit emission color from the material.
////////////////////////////////////////////////////////////////////
43
inline void Material::clear_emission(void);

2677 13 get_shininess 0 4 2911 23 Material::get_shininess 0 1 1336 270
////////////////////////////////////////////////////////////////////
//     Function: Material::get_shininess
//       Access: Published
//  Description: Returns the shininess exponent of the material.
////////////////////////////////////////////////////////////////////
49
inline float Material::get_shininess(void) const;

2678 13 set_shininess 0 4 2911 23 Material::set_shininess 0 1 1337 598
////////////////////////////////////////////////////////////////////
//     Function: Material::set_shininess
//       Access: Published
//  Description: Sets the shininess exponent of the material.  This
//               controls the size of the specular highlight spot.  In
//               general, larger number produce a smaller specular
//               highlight, which makes the object appear shinier.
//               Smaller numbers produce a larger highlight, which
//               makes the object appear less shiny.
////////////////////////////////////////////////////////////////////
53
inline void Material::set_shininess(float shininess);

2679 9 get_local 0 4 2911 19 Material::get_local 0 1 1338 267
////////////////////////////////////////////////////////////////////
//     Function: Material::get_local
//       Access: Published
//  Description: Returns the local viewer flag.  Set set_local().
////////////////////////////////////////////////////////////////////
44
inline bool Material::get_local(void) const;

2680 9 set_local 0 4 2911 19 Material::set_local 0 1 1339 519
////////////////////////////////////////////////////////////////////
//     Function: Material::set_local
//       Access: Published
//  Description: Sets the local viewer flag.  Set this true to enable
//               camera-relative specular highlights, or false to use
//               orthogonal specular highlights.  The default value is
//               true.  Applications that use orthogonal projection
//               should specify false.
////////////////////////////////////////////////////////////////////
44
inline void Material::set_local(bool local);

2681 11 get_twoside 0 4 2911 21 Material::get_twoside 0 1 1340 306
////////////////////////////////////////////////////////////////////
//     Function: Material::get_twoside
//       Access: Published
//  Description: Returns the state of the two-sided lighting flag.
//               See set_twoside().
////////////////////////////////////////////////////////////////////
46
inline bool Material::get_twoside(void) const;

2682 11 set_twoside 0 4 2911 21 Material::set_twoside 0 1 1341 513
////////////////////////////////////////////////////////////////////
//     Function: Material::set_twoside
//       Access: Published
//  Description: Set this true to enable two-sided lighting.  When
//               two-sided lighting is on, both sides of a polygon
//               will be lit by this material.  The default is for
//               two-sided lighting to be off, in which case only the
//               front surface is lit.
////////////////////////////////////////////////////////////////////
48
inline void Material::set_twoside(bool twoside);

2683 11 operator == 0 4 2911 21 Material::operator == 0 1 1342 220
////////////////////////////////////////////////////////////////////
//     Function: Material::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Material::operator ==(Material const &other) const;

2684 11 operator != 0 4 2911 21 Material::operator != 0 1 1343 220
////////////////////////////////////////////////////////////////////
//     Function: Material::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Material::operator !=(Material const &other) const;

2685 10 operator < 0 4 2911 20 Material::operator < 0 1 1344 219
////////////////////////////////////////////////////////////////////
//     Function: Material::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool Material::operator <(Material const &other) const;

2686 10 compare_to 0 4 2911 20 Material::compare_to 0 1 1345 535
////////////////////////////////////////////////////////////////////
//     Function: Material::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this material
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.  The
//               sorting order is arbitrary and largely meaningless,
//               except to differentiate different materials.
////////////////////////////////////////////////////////////////////
54
int Material::compare_to(Material const &other) const;

2687 6 output 0 4 2911 16 Material::output 0 1 1346 215
////////////////////////////////////////////////////////////////////
//     Function: Material::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
void Material::output(ostream &out) const;

2688 5 write 0 4 2911 15 Material::write 0 1 1347 214
////////////////////////////////////////////////////////////////////
//     Function: Material::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
void Material::write(ostream &out, int indent) const;

2689 16 is_attrib_locked 0 4 2911 26 Material::is_attrib_locked 0 1 1348 225
////////////////////////////////////////////////////////////////////
//     Function: Material::is_attrib_locked
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool Material::is_attrib_locked(void) const;

2690 15 set_attrib_lock 0 4 2911 25 Material::set_attrib_lock 0 1 1349 224
////////////////////////////////////////////////////////////////////
//     Function: Material::set_attrib_lock
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void Material::set_attrib_lock(void);

2691 14 get_class_type 0 4 2911 24 Material::get_class_type 0 1 1350 0
49
static TypeHandle Material::get_class_type(void);

2692 12 get_material 0 4 2912 26 MaterialPool::get_material 0 1 1355 1538
// Filename: materialPool.I
// Created by:  drose (30Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::get_material
//       Access: Public, Static
//  Description: Returns a Material pointer that represents the
//               same material described by temp, except that it is a
//               shared pointer.
//
//               Each call to get_material() passing an equivalent
//               Material pointer will return the same shared pointer.
//
//               If you modify the shared pointer, it will
//               automatically disassociate it from the pool.
//
//               Also, the return value may be a different pointer
//               than that passed in, or it may be the same pointer.
//               In either case, the passed in pointer has now been
//               sacrificed to the greater good and should not be used
//               again (like any other PointerTo, it will be freed
//               when the last reference count is removed).
////////////////////////////////////////////////////////////////////
67
static inline Material *MaterialPool::get_material(Material *temp);

2693 16 release_material 0 4 2912 30 MaterialPool::release_material 0 1 1356 283
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::release_material
//       Access: Published, Static
//  Description: Removes the indicated material from the pool.
////////////////////////////////////////////////////////////////////
66
static inline void MaterialPool::release_material(Material *temp);

2694 21 release_all_materials 0 4 2912 35 MaterialPool::release_all_materials 0 1 1357 336
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::release_all_materials
//       Access: Published, Static
//  Description: Releases all materials in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
61
static inline void MaterialPool::release_all_materials(void);

2695 15 garbage_collect 0 4 2912 29 MaterialPool::garbage_collect 0 1 1358 481
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those materials in the pool that have a
//               reference count of exactly 1; i.e. only those
//               materials that are not being used outside of the pool.
//               Returns the number of materials released.
////////////////////////////////////////////////////////////////////
54
static inline int MaterialPool::garbage_collect(void);

2696 13 list_contents 0 4 2912 27 MaterialPool::list_contents 0 1 1359 320
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
61
static inline void MaterialPool::list_contents(ostream &out);

2697 5 write 0 4 2912 19 MaterialPool::write 0 1 1360 315
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::write
//       Access: Published, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
46
static void MaterialPool::write(ostream &out);

2698 13 ~MaterialPool 0 4 2912 27 MaterialPool::~MaterialPool 0 0 0
34
MaterialPool::~MaterialPool(void);

2699 10 MatrixLens 0 4 2913 22 MatrixLens::MatrixLens 0 1 1361 931
// Filename: matrixLens.I
// Created by:  drose (12Dec01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline MatrixLens::MatrixLens(void);

2700 12 set_user_mat 0 4 2913 24 MatrixLens::set_user_mat 0 1 1362 938
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_user_mat
//       Access: Published
//  Description: Explicitly specifies the projection matrix.  This
//               matrix should convert X and Y to the range
//               [-film_size/2, film_size/2], where (-fs/2,-fs/2) is
//               the lower left corner of the screen and (fs/2, fs/2)
//               is the upper right.  Z should go to the range [-1,
//               1], where -1 is the far plane and 1 is the near
//               plane.  Note that this is a left-handed Y-up
//               coordinate system.
//
//               The default film_size for a MatrixLens is 2, so the
//               default range is [-1, 1] for both X and Y.  This is
//               consistent with the GL conventions for projection
//               matrices.
////////////////////////////////////////////////////////////////////
64
inline void MatrixLens::set_user_mat(LMatrix4f const &user_mat);

2701 12 get_user_mat 0 4 2913 24 MatrixLens::get_user_mat 0 1 1363 404
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_user_mat
//       Access: Published
//  Description: Returns the explicit projection matrix as set by the
//               user.  This does not include transforms on the lens
//               or film (e.g. a film offset or view hpr).
////////////////////////////////////////////////////////////////////
61
inline LMatrix4f const &MatrixLens::get_user_mat(void) const;

2702 16 set_left_eye_mat 0 4 2913 28 MatrixLens::set_left_eye_mat 0 1 1364 761
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_left_eye_mat
//       Access: Published
//  Description: Sets a custom projection matrix for the left eye.
//               This is only used if the lens is attached to a stereo
//               camera, in which case the left eye matrix will be
//               used to draw the scene in the left eye (but the
//               center matrix--the user_mat--will still be used to
//               cull the scene).
//
//               This matrix should not be too different from the
//               center matrix (set by set_user_mat()) or culling
//               errors may become obvious.
////////////////////////////////////////////////////////////////////
68
inline void MatrixLens::set_left_eye_mat(LMatrix4f const &user_mat);

2703 18 clear_left_eye_mat 0 4 2913 30 MatrixLens::clear_left_eye_mat 0 1 1365 380
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::clear_left_eye_mat
//       Access: Published
//  Description: Removes the custom projection matrix set for the left
//               eye, and uses the center matrix (set by set_user_mat)
//               instead.
////////////////////////////////////////////////////////////////////
49
inline void MatrixLens::clear_left_eye_mat(void);

2704 16 has_left_eye_mat 0 4 2913 28 MatrixLens::has_left_eye_mat 0 1 1366 441
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::has_left_eye_mat
//       Access: Published
//  Description: Returns true if the camera has a custom projection
//               matrix set for the left eye, or false if the center
//               matrix (set by set_user_mat) will be used for the
//               left eye.
////////////////////////////////////////////////////////////////////
53
inline bool MatrixLens::has_left_eye_mat(void) const;

2705 16 get_left_eye_mat 0 4 2913 28 MatrixLens::get_left_eye_mat 0 1 1367 396
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_left_eye_mat
//       Access: Published
//  Description: Returns the custom projection matrix for the left
//               eye, if any, or the center matrix if there is no
//               custom matrix set for the left eye.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f const &MatrixLens::get_left_eye_mat(void) const;

2706 17 set_right_eye_mat 0 4 2913 29 MatrixLens::set_right_eye_mat 0 1 1368 765
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_right_eye_mat
//       Access: Published
//  Description: Sets a custom projection matrix for the right eye.
//               This is only used if the lens is attached to a stereo
//               camera, in which case the right eye matrix will be
//               used to draw the scene in the right eye (but the
//               center matrix--the user_mat--will still be used to
//               cull the scene).
//
//               This matrix should not be too different from the
//               center matrix (set by set_user_mat()) or culling
//               errors may become obvious.
////////////////////////////////////////////////////////////////////
69
inline void MatrixLens::set_right_eye_mat(LMatrix4f const &user_mat);

2707 19 clear_right_eye_mat 0 4 2913 31 MatrixLens::clear_right_eye_mat 0 1 1369 382
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::clear_right_eye_mat
//       Access: Published
//  Description: Removes the custom projection matrix set for the right
//               eye, and uses the center matrix (set by set_user_mat)
//               instead.
////////////////////////////////////////////////////////////////////
50
inline void MatrixLens::clear_right_eye_mat(void);

2708 17 has_right_eye_mat 0 4 2913 29 MatrixLens::has_right_eye_mat 0 1 1370 444
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::has_right_eye_mat
//       Access: Published
//  Description: Returns true if the camera has a custom projection
//               matrix set for the right eye, or false if the center
//               matrix (set by set_user_mat) will be used for the
//               right eye.
////////////////////////////////////////////////////////////////////
54
inline bool MatrixLens::has_right_eye_mat(void) const;

2709 17 get_right_eye_mat 0 4 2913 29 MatrixLens::get_right_eye_mat 0 1 1371 399
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_right_eye_mat
//       Access: Published
//  Description: Returns the custom projection matrix for the right
//               eye, if any, or the center matrix if there is no
//               custom matrix set for the right eye.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4f const &MatrixLens::get_right_eye_mat(void) const;

2710 14 get_class_type 0 4 2913 26 MatrixLens::get_class_type 0 1 1372 0
51
static TypeHandle MatrixLens::get_class_type(void);

2711 11 ~MatrixLens 0 4 2913 23 MatrixLens::~MatrixLens 0 0 0
30
MatrixLens::~MatrixLens(void);

2712 16 OrthographicLens 0 4 2914 34 OrthographicLens::OrthographicLens 0 1 1373 948
// Filename: orthographicLens.I
// Created by:  mike (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OrthographicLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OrthographicLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline OrthographicLens::OrthographicLens(void);

2713 14 get_class_type 0 4 2914 32 OrthographicLens::get_class_type 0 1 1374 0
57
static TypeHandle OrthographicLens::get_class_type(void);

2714 17 ~OrthographicLens 0 4 2914 35 OrthographicLens::~OrthographicLens 0 0 0
42
OrthographicLens::~OrthographicLens(void);

2715 15 PerspectiveLens 0 4 2915 32 PerspectiveLens::PerspectiveLens 0 2 1375 1376 1172
// Filename: perspectiveLens.I
// Created by:  drose (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
111
inline PerspectiveLens::PerspectiveLens(void);
inline PerspectiveLens::PerspectiveLens(float hfov, float vfov);

2716 14 get_class_type 0 4 2915 31 PerspectiveLens::get_class_type 0 1 1377 0
56
static TypeHandle PerspectiveLens::get_class_type(void);

2717 16 ~PerspectiveLens 0 4 2915 33 PerspectiveLens::~PerspectiveLens 0 0 0
40
PerspectiveLens::~PerspectiveLens(void);

2718 20 TextureReloadRequest 0 4 2916 42 TextureReloadRequest::TextureReloadRequest 0 1 1378 854
// Filename: textureReloadRequest.I
// Created by:  drose (12Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::Constructor
//       Access: Published
//  Description: Create a new TextureReloadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
155
inline TextureReloadRequest::TextureReloadRequest(basic_string< char > const &name, PreparedGraphicsObjects *pgo, Texture *texture, bool allow_compressed);

2719 29 get_prepared_graphics_objects 0 4 2916 51 TextureReloadRequest::get_prepared_graphics_objects 0 1 1379 366
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_prepared_graphics_objects
//       Access: Published
//  Description: Returns the PreparedGraphicsObjects object associated with
//               this asynchronous TextureReloadRequest.
////////////////////////////////////////////////////////////////////
96
inline PreparedGraphicsObjects *TextureReloadRequest::get_prepared_graphics_objects(void) const;

2720 11 get_texture 0 4 2916 33 TextureReloadRequest::get_texture 0 1 1380 332
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_texture
//       Access: Published
//  Description: Returns the Texture object associated with
//               this asynchronous TextureReloadRequest.
////////////////////////////////////////////////////////////////////
62
inline Texture *TextureReloadRequest::get_texture(void) const;

2721 20 get_allow_compressed 0 4 2916 42 TextureReloadRequest::get_allow_compressed 0 1 1381 350
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_allow_compressed
//       Access: Published
//  Description: Returns the "allow compressed" flag associated with
//               this asynchronous TextureReloadRequest.
////////////////////////////////////////////////////////////////////
67
inline bool TextureReloadRequest::get_allow_compressed(void) const;

2722 8 is_ready 0 4 2916 30 TextureReloadRequest::is_ready 0 1 1382 320
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.
////////////////////////////////////////////////////////////////////
55
inline bool TextureReloadRequest::is_ready(void) const;

2723 14 get_class_type 0 4 2916 36 TextureReloadRequest::get_class_type 0 1 1383 0
61
static TypeHandle TextureReloadRequest::get_class_type(void);

2724 21 ~TextureReloadRequest 0 4 2916 43 TextureReloadRequest::~TextureReloadRequest 0 0 0
50
TextureReloadRequest::~TextureReloadRequest(void);

2725 23 upcast_to_BufferContext 0 12 2917 39 TextureContext::upcast_to_BufferContext 0 1 1391 43
upcast from TextureContext to BufferContext
61
BufferContext *TextureContext::upcast_to_BufferContext(void);

2726 26 downcast_to_TextureContext 0 12 2874 41 BufferContext::downcast_to_TextureContext 0 1 1392 45
downcast from BufferContext to TextureContext
64
TextureContext *BufferContext::downcast_to_TextureContext(void);

2727 25 upcast_to_AdaptiveLruPage 0 12 2917 41 TextureContext::upcast_to_AdaptiveLruPage 0 1 1393 45
upcast from TextureContext to AdaptiveLruPage
65
AdaptiveLruPage *TextureContext::upcast_to_AdaptiveLruPage(void);

2728 26 downcast_to_TextureContext 0 12 2830 43 AdaptiveLruPage::downcast_to_TextureContext 0 1 1394 47
downcast from AdaptiveLruPage to TextureContext
66
TextureContext *AdaptiveLruPage::downcast_to_TextureContext(void);

2729 11 get_texture 0 4 2917 27 TextureContext::get_texture 0 1 1384 294
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::get_texture
//       Access: Public
//  Description: Returns the pointer to the associated Texture
//               object.
////////////////////////////////////////////////////////////////////
56
inline Texture *TextureContext::get_texture(void) const;

2730 8 get_view 0 4 2917 24 TextureContext::get_view 0 1 1385 394
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::get_view
//       Access: Public
//  Description: Returns the specific view of a multiview texture this
//               context represents.  In the usual case, with a
//               non-multiview texture, this will be 0.
////////////////////////////////////////////////////////////////////
48
inline int TextureContext::get_view(void) const;

2731 12 was_modified 0 4 2917 28 TextureContext::was_modified 0 1 1386 371
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_modified
//       Access: Public
//  Description: Returns true if the texture properties or image have
//               been modified since the last time mark_loaded() was
//               called.
////////////////////////////////////////////////////////////////////
53
inline bool TextureContext::was_modified(void) const;

2732 23 was_properties_modified 0 4 2917 39 TextureContext::was_properties_modified 0 1 1387 398
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_properties_modified
//       Access: Public
//  Description: Returns true if the texture properties (unrelated to
//               the image) have been modified since the last time
//               mark_loaded() was called.
////////////////////////////////////////////////////////////////////
64
inline bool TextureContext::was_properties_modified(void) const;

2733 18 was_image_modified 0 4 2917 34 TextureContext::was_image_modified 0 1 1388 345
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_image_modified
//       Access: Public
//  Description: Returns true if the texture image has been modified
//               since the last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
59
inline bool TextureContext::was_image_modified(void) const;

2734 25 was_simple_image_modified 0 4 2917 41 TextureContext::was_simple_image_modified 0 1 1389 387
////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_simple_image_modified
//       Access: Public
//  Description: Returns true if the texture's "simple" image has been
//               modified since the last time mark_simple_loaded() was
//               called.
////////////////////////////////////////////////////////////////////
66
inline bool TextureContext::was_simple_image_modified(void) const;

2735 14 get_class_type 0 4 2917 30 TextureContext::get_class_type 0 1 1390 0
55
static TypeHandle TextureContext::get_class_type(void);

2736 15 ~TextureContext 0 4 2917 31 TextureContext::~TextureContext 0 0 0
38
TextureContext::~TextureContext(void);

2737 10 get_shader 0 4 2918 25 ShaderContext::get_shader 0 1 1395 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderContext::get_expansion
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline Shader *ShaderContext::get_shader(void) const;

2738 14 get_class_type 0 4 2918 29 ShaderContext::get_class_type 0 1 1396 0
54
static TypeHandle ShaderContext::get_class_type(void);

2739 14 ~ShaderContext 0 4 2918 29 ShaderContext::~ShaderContext 0 0 0
36
ShaderContext::~ShaderContext(void);

2740 16 UserVertexSlider 0 4 2919 34 UserVertexSlider::UserVertexSlider 0 2 1397 1398 460
////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
131
UserVertexSlider::UserVertexSlider(basic_string< char > const &name);
UserVertexSlider::UserVertexSlider(InternalName const *name);

2741 10 set_slider 0 4 2919 28 UserVertexSlider::set_slider 0 1 1399 754
// Filename: userVertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::set_slider
//       Access: Published
//  Description: Stores the indicated slider value.
////////////////////////////////////////////////////////////////////
55
inline void UserVertexSlider::set_slider(float slider);

2742 14 get_class_type 0 4 2919 32 UserVertexSlider::get_class_type 0 1 1400 0
57
static TypeHandle UserVertexSlider::get_class_type(void);

2743 17 ~UserVertexSlider 0 4 2919 35 UserVertexSlider::~UserVertexSlider 0 0 0
42
UserVertexSlider::~UserVertexSlider(void);

2744 19 UserVertexTransform 0 4 2920 40 UserVertexTransform::UserVertexTransform 0 1 1401 232
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
UserVertexTransform::UserVertexTransform(basic_string< char > const &name);

2745 8 get_name 0 4 2920 29 UserVertexTransform::get_name 0 1 1402 806
// Filename: userVertexTransform.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor.
//               Completely arbitrary.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &UserVertexTransform::get_name(void) const;

2746 10 set_matrix 0 4 2920 31 UserVertexTransform::set_matrix 0 1 1403 259
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::set_matrix
//       Access: Published
//  Description: Stores the indicated matrix.
////////////////////////////////////////////////////////////////////
69
inline void UserVertexTransform::set_matrix(LMatrix4f const &matrix);

2747 14 get_class_type 0 4 2920 35 UserVertexTransform::get_class_type 0 1 1404 0
60
static TypeHandle UserVertexTransform::get_class_type(void);

2748 20 ~UserVertexTransform 0 4 2920 41 UserVertexTransform::~UserVertexTransform 0 0 0
48
UserVertexTransform::~UserVertexTransform(void);

2749 17 upcast_to_Texture 0 12 2921 31 VideoTexture::upcast_to_Texture 0 1 1409 35
upcast from VideoTexture to Texture
47
Texture *VideoTexture::upcast_to_Texture(void);

2750 24 downcast_to_VideoTexture 0 12 2892 33 Texture::downcast_to_VideoTexture 0 1 1410 37
downcast from Texture to VideoTexture
54
VideoTexture *Texture::downcast_to_VideoTexture(void);

2751 23 upcast_to_AnimInterface 0 12 2921 37 VideoTexture::upcast_to_AnimInterface 0 1 1411 41
upcast from VideoTexture to AnimInterface
59
AnimInterface *VideoTexture::upcast_to_AnimInterface(void);

2752 24 downcast_to_VideoTexture 0 12 2922 39 AnimInterface::downcast_to_VideoTexture 0 1 1412 43
downcast from AnimInterface to VideoTexture
60
VideoTexture *AnimInterface::downcast_to_VideoTexture(void);

2753 18 get_keep_ram_image 0 4 2921 32 VideoTexture::get_keep_ram_image 0 1 1405 482
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
////////////////////////////////////////////////////////////////////
58
virtual bool VideoTexture::get_keep_ram_image(void) const;

2754 15 get_video_width 0 4 2921 29 VideoTexture::get_video_width 0 1 1406 951
// Filename: videoTexture.I
// Created by:  drose (21Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_width
//       Access: Published
//  Description: Returns the width in texels of the source video
//               stream.  This is not necessarily the width of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
53
inline int VideoTexture::get_video_width(void) const;

2755 16 get_video_height 0 4 2921 30 VideoTexture::get_video_height 0 1 1407 466
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_height
//       Access: Published
//  Description: Returns the height in texels of the source video
//               stream.  This is not necessarily the height of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
54
inline int VideoTexture::get_video_height(void) const;

2756 14 get_class_type 0 4 2921 28 VideoTexture::get_class_type 0 1 1408 0
53
static TypeHandle VideoTexture::get_class_type(void);

2757 13 ~VideoTexture 0 4 2921 27 VideoTexture::~VideoTexture 0 0 0
34
VideoTexture::~VideoTexture(void);

2758 23 upcast_to_BufferContext 0 12 2923 44 VertexBufferContext::upcast_to_BufferContext 0 1 1418 48
upcast from VertexBufferContext to BufferContext
66
BufferContext *VertexBufferContext::upcast_to_BufferContext(void);

2759 31 downcast_to_VertexBufferContext 0 12 2874 46 BufferContext::downcast_to_VertexBufferContext 0 1 1419 50
downcast from BufferContext to VertexBufferContext
74
VertexBufferContext *BufferContext::downcast_to_VertexBufferContext(void);

2760 25 upcast_to_AdaptiveLruPage 0 12 2923 46 VertexBufferContext::upcast_to_AdaptiveLruPage 0 1 1420 50
upcast from VertexBufferContext to AdaptiveLruPage
70
AdaptiveLruPage *VertexBufferContext::upcast_to_AdaptiveLruPage(void);

2761 31 downcast_to_VertexBufferContext 0 12 2830 48 AdaptiveLruPage::downcast_to_VertexBufferContext 0 1 1421 52
downcast from AdaptiveLruPage to VertexBufferContext
76
VertexBufferContext *AdaptiveLruPage::downcast_to_VertexBufferContext(void);

2762 8 get_data 0 4 2923 29 VertexBufferContext::get_data 0 1 1413 300
////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::get_data
//       Access: Public
//  Description: Returns the pointer to the client-side array data
//               object.
////////////////////////////////////////////////////////////////////
70
inline GeomVertexArrayData *VertexBufferContext::get_data(void) const;

2763 12 changed_size 0 4 2923 33 VertexBufferContext::changed_size 0 1 1414 334
////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::changed_size
//       Access: Public
//  Description: Returns true if the data has changed size since the
//               last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
93
inline bool VertexBufferContext::changed_size(GeomVertexArrayDataHandle const *reader) const;

2764 18 changed_usage_hint 0 4 2923 39 VertexBufferContext::changed_usage_hint 0 1 1415 350
////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::changed_usage_hint
//       Access: Public
//  Description: Returns true if the data has changed its usage hint
//               since the last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
99
inline bool VertexBufferContext::changed_usage_hint(GeomVertexArrayDataHandle const *reader) const;

2765 12 was_modified 0 4 2923 33 VertexBufferContext::was_modified 0 1 1416 335
////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::was_modified
//       Access: Public
//  Description: Returns true if the data has been modified since the
//               last time mark_loaded() was called.
////////////////////////////////////////////////////////////////////
93
inline bool VertexBufferContext::was_modified(GeomVertexArrayDataHandle const *reader) const;

2766 14 get_class_type 0 4 2923 35 VertexBufferContext::get_class_type 0 1 1417 0
60
static TypeHandle VertexBufferContext::get_class_type(void);

2767 20 ~VertexBufferContext 0 4 2923 41 VertexBufferContext::~VertexBufferContext 0 0 0
48
VertexBufferContext::~VertexBufferContext(void);

2768 17 TextureCollection 0 4 2924 36 TextureCollection::TextureCollection 0 3 1422 1423 1424 923
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Constructor
//       Access: Published
//  Description: This special constructor accepts a Python list of
//               Textures.  Since this constructor accepts a generic
//               PyObject *, it should be the last constructor listed
//               in the class record.
////////////////////////////////////////////////////////////////////
186
TextureCollection::TextureCollection(void);
TextureCollection::TextureCollection(TextureCollection const &copy);
TextureCollection::TextureCollection(PyObject *self, PyObject *sequence);

2769 10 operator = 0 4 2924 29 TextureCollection::operator = 0 1 1425 242
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void TextureCollection::operator =(TextureCollection const &copy);

2770 18 ~TextureCollection 0 4 2924 37 TextureCollection::~TextureCollection 0 0 721
// Filename: textureCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline TextureCollection::~TextureCollection(void);

2771 10 __reduce__ 0 4 2924 29 TextureCollection::__reduce__ 0 1 1426 327
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
62
PyObject *TextureCollection::__reduce__(PyObject *self) const;

2772 11 add_texture 0 4 2924 30 TextureCollection::add_texture 0 1 1427 282
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_texture
//       Access: Published
//  Description: Adds a new Texture to the collection.
////////////////////////////////////////////////////////////////////
54
void TextureCollection::add_texture(Texture *texture);

2773 14 remove_texture 0 4 2924 33 TextureCollection::remove_texture 0 1 1428 406
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_texture
//       Access: Published
//  Description: Removes the indicated Texture from the collection.
//               Returns true if the texture was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
57
bool TextureCollection::remove_texture(Texture *texture);

2774 17 add_textures_from 0 4 2924 36 TextureCollection::add_textures_from 0 1 1429 482
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_textures_from
//       Access: Published
//  Description: Adds all the Textures indicated in the other
//               collection to this texture.  The other textures are simply
//               appended to the end of the textures in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
74
void TextureCollection::add_textures_from(TextureCollection const &other);

2775 20 remove_textures_from 0 4 2924 39 TextureCollection::remove_textures_from 0 1 1430 336
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_textures_from
//       Access: Published
//  Description: Removes from this collection all of the Textures
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
77
void TextureCollection::remove_textures_from(TextureCollection const &other);

2776 25 remove_duplicate_textures 0 4 2924 44 TextureCollection::remove_duplicate_textures 0 1 1431 473
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_duplicate_textures
//       Access: Published
//  Description: Removes any duplicate entries of the same Textures
//               on this collection.  If a Texture appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
56
void TextureCollection::remove_duplicate_textures(void);

2777 11 has_texture 0 4 2924 30 TextureCollection::has_texture 0 1 1432 329
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::has_texture
//       Access: Published
//  Description: Returns true if the indicated Texture appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool TextureCollection::has_texture(Texture *texture) const;

2778 5 clear 0 4 2924 24 TextureCollection::clear 0 1 1433 265
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::clear
//       Access: Published
//  Description: Removes all Textures from the collection.
////////////////////////////////////////////////////////////////////
36
void TextureCollection::clear(void);

2779 12 find_texture 0 4 2924 31 TextureCollection::find_texture 0 1 1434 372
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::find_texture
//       Access: Published
//  Description: Returns the texture in the collection with the
//               indicated name, if any, or NULL if no texture has
//               that name.
////////////////////////////////////////////////////////////////////
81
Texture *TextureCollection::find_texture(basic_string< char > const &name) const;

2780 16 get_num_textures 0 4 2924 35 TextureCollection::get_num_textures 0 1 1435 284
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of Textures in the collection.
////////////////////////////////////////////////////////////////////
52
int TextureCollection::get_num_textures(void) const;

2781 11 get_texture 0 4 2924 30 TextureCollection::get_texture 0 1 1436 272
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth Texture in the collection.
////////////////////////////////////////////////////////////////////
57
Texture *TextureCollection::get_texture(int index) const;

2782 11 operator [] 0 4 2924 30 TextureCollection::operator [] 0 1 1437 392
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator []
//       Access: Published
//  Description: Returns the nth Texture in the collection.  This is
//               the same as get_texture(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
57
Texture *TextureCollection::operator [](int index) const;

2783 4 size 0 4 2924 23 TextureCollection::size 0 1 1438 336
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::size
//       Access: Published
//  Description: Returns the number of textures in the collection.  This
//               is the same thing as get_num_textures().
////////////////////////////////////////////////////////////////////
40
int TextureCollection::size(void) const;

2784 11 operator += 0 4 2924 30 TextureCollection::operator += 0 1 1439 278
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
75
inline void TextureCollection::operator +=(TextureCollection const &other);

2785 10 operator + 0 4 2924 29 TextureCollection::operator + 0 1 1440 322
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator +
//       Access: Published
//  Description: Returns a TextureCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
93
inline TextureCollection TextureCollection::operator +(TextureCollection const &other) const;

2786 6 append 0 4 2924 25 TextureCollection::append 0 1 1441 450
// Method names to satisfy Python's conventions.

////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::append
//       Access: Published
//  Description: Adds a new Texture to the collection.  This method
//               duplicates the add_texture() method; it is provided to
//               satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
56
inline void TextureCollection::append(Texture *texture);

2787 6 extend 0 4 2924 25 TextureCollection::extend 0 1 1442 451
// Method names to satisfy Python's conventions.

////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
70
inline void TextureCollection::extend(TextureCollection const &other);

2788 6 output 0 4 2924 25 TextureCollection::output 0 1 1443 334
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
51
void TextureCollection::output(ostream &out) const;

2789 5 write 0 4 2924 24 TextureCollection::write 0 2 1444 1445 338
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
74
void TextureCollection::write(ostream &out, int indent_level = (0)) const;

2790 11 has_texture 0 4 2925 24 TexturePool::has_texture 0 1 1446 874
// Filename: texturePool.I
// Created by:  drose (26Apr00)
// Updated by: fperazzi, PandaSE(29Apr10) (added load_2d_texture_array)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_texture
//       Access: Published, Static
//  Description: Returns true if the texture has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
70
static inline bool TexturePool::has_texture(Filename const &filename);

2791 14 verify_texture 0 4 2925 27 TexturePool::verify_texture 0 1 1447 611
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::verify_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_texture() with the same texture name will
//               return a valid Texture pointer.
////////////////////////////////////////////////////////////////////
73
static inline bool TexturePool::verify_texture(Filename const &filename);

2792 12 load_texture 0 4 2925 25 TexturePool::load_texture 0 9 1448 1449 1450 1451 1452 1453 1454 1455 1456 1673
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
////////////////////////////////////////////////////////////////////
415
static inline Texture *TexturePool::load_texture(Filename const &filename, int primary_file_num_channels = (0), bool read_mipmaps = (0), LoaderOptions const &options = ((())));
static inline Texture *TexturePool::load_texture(Filename const &filename, Filename const &alpha_filename, int primary_file_num_channels = (0), int alpha_file_channel = (0), bool read_mipmaps = (0), LoaderOptions const &options = ((())));

2793 15 load_3d_texture 0 4 2925 28 TexturePool::load_3d_texture 0 3 1457 1458 1459 833
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_3d_texture
//       Access: Published, Static
//  Description: Loads a 3-D texture that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 3-d level.
////////////////////////////////////////////////////////////////////
150
static inline Texture *TexturePool::load_3d_texture(Filename const &filename_pattern, bool read_mipmaps = (0), LoaderOptions const &options = ((())));

2794 21 load_2d_texture_array 0 4 2925 34 TexturePool::load_2d_texture_array 0 3 1460 1461 1462 845
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_2d_texture_array
//       Access: Published, Static
//  Description: Loads a 2-D texture array that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 2-d level.
////////////////////////////////////////////////////////////////////
156
static inline Texture *TexturePool::load_2d_texture_array(Filename const &filename_pattern, bool read_mipmaps = (0), LoaderOptions const &options = ((())));

2795 13 load_cube_map 0 4 2925 26 TexturePool::load_cube_map 0 3 1463 1464 1465 798
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_cube_map
//       Access: Published, Static
//  Description: Loads a cube map texture that is specified with a
//               series of 6 pages, numbered 0 through 5.  The
//               filename should include a sequence of one or more
//               hash characters ("#") which will be filled in with
//               the index number of each pagee.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the face number, 0 through 5.
////////////////////////////////////////////////////////////////////
148
static inline Texture *TexturePool::load_cube_map(Filename const &filename_pattern, bool read_mipmaps = (0), LoaderOptions const &options = ((())));

2796 26 get_normalization_cube_map 0 4 2925 39 TexturePool::get_normalization_cube_map 0 1 1466 619
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_normalization_cube_map
//       Access: Published, Static
//  Description: Returns a standard Texture object that has been
//               created with
//               Texture::generate_normalization_cube_map().  This
//               Texture may be shared by any application code
//               requiring a normalization cube map.  It will be at
//               least as large as the specified size, though it may
//               be larger.
////////////////////////////////////////////////////////////////////
73
static inline Texture *TexturePool::get_normalization_cube_map(int size);

2797 19 get_alpha_scale_map 0 4 2925 32 TexturePool::get_alpha_scale_map 0 1 1467 598
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_alpha_scale_map
//       Access: Published, Static
//  Description: Returns a standard Texture object that has been
//               created with Texture::generate_alpha_scale_map().
//
//               This Texture object is used internally by Panda to
//               apply an alpha scale to an object (instead of munging
//               its vertices) when gsg->get_alpha_scale_via_texture()
//               returns true.
////////////////////////////////////////////////////////////////////
62
static inline Texture *TexturePool::get_alpha_scale_map(void);

2798 11 add_texture 0 4 2925 24 TexturePool::add_texture 0 1 1468 509
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::add_texture
//       Access: Published, Static
//  Description: Adds the indicated already-loaded texture to the
//               pool.  The texture must have a filename set for its
//               name.  The texture will always replace any
//               previously-loaded texture in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
62
static inline void TexturePool::add_texture(Texture *texture);

2799 15 release_texture 0 4 2925 28 TexturePool::release_texture 0 1 1469 733
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_texture
//       Access: Published, Static
//  Description: Removes the indicated texture from the pool,
//               indicating it will never be loaded again; the texture
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every texture
//               every loaded, and textures will never be freed.
//
//               The texture's name should not have been changed
//               during its lifetime, or this function may fail to
//               locate it in the pool.
////////////////////////////////////////////////////////////////////
66
static inline void TexturePool::release_texture(Texture *texture);

2800 20 release_all_textures 0 4 2925 33 TexturePool::release_all_textures 0 1 1470 333
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_all_textures
//       Access: Published, Static
//  Description: Releases all textures in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
59
static inline void TexturePool::release_all_textures(void);

2801 6 rehash 0 4 2925 19 TexturePool::rehash 0 1 1471 378
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::rehash
//       Access: Published, Static
//  Description: Should be called when the model-path changes, to blow
//               away the cache of texture pathnames found along the
//               model-path.
////////////////////////////////////////////////////////////////////
45
static inline void TexturePool::rehash(void);

2802 15 garbage_collect 0 4 2925 28 TexturePool::garbage_collect 0 1 1472 480
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::garbage_collect
//       Access: Published, Static
//  Description: Releases only those textures in the pool that have a
//               reference count of exactly 1; i.e. only those
//               textures that are not being used outside of the pool.
//               Returns the number of textures released.
////////////////////////////////////////////////////////////////////
53
static inline int TexturePool::garbage_collect(void);

2803 13 list_contents 0 4 2925 26 TexturePool::list_contents 0 2 1473 1474 603
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::list_contents
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexturePool::list_contents
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to cout
////////////////////////////////////////////////////////////////////
113
static inline void TexturePool::list_contents(ostream &out);
static inline void TexturePool::list_contents(void);

2804 12 find_texture 0 4 2925 25 TexturePool::find_texture 0 1 1475 449
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::find_texture
//       Access: Published, Static
//  Description: Returns the first texture found in the pool that
//               matches the indicated name (which may contain
//               wildcards).  Returns the texture if it is found, or
//               NULL if it is not.
////////////////////////////////////////////////////////////////////
83
static inline Texture *TexturePool::find_texture(basic_string< char > const &name);

2805 17 find_all_textures 0 4 2925 30 TexturePool::find_all_textures 0 2 1476 1477 382
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::find_all_textures
//       Access: Published, Static
//  Description: Returns the set of all textures found in the pool
//               that match the indicated name (which may contain
//               wildcards).
////////////////////////////////////////////////////////////////////
105
static inline TextureCollection TexturePool::find_all_textures(basic_string< char > const &name = ("*"));

2806 22 set_fake_texture_image 0 4 2925 35 TexturePool::set_fake_texture_image 0 1 1478 355
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::set_fake_texture_image
//       Access: Published, Static
//  Description: Sets a bogus filename that will be loaded in lieu of
//               any textures requested from this point on.
////////////////////////////////////////////////////////////////////
81
static inline void TexturePool::set_fake_texture_image(Filename const &filename);

2807 24 clear_fake_texture_image 0 4 2925 37 TexturePool::clear_fake_texture_image 0 1 1479 330
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::clear_fake_texture_image
//       Access: Published, Static
//  Description: Restores normal behavior of loading the textures
//               actually requested.
////////////////////////////////////////////////////////////////////
63
static inline void TexturePool::clear_fake_texture_image(void);

2808 22 has_fake_texture_image 0 4 2925 35 TexturePool::has_fake_texture_image 0 1 1480 353
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_fake_texture_image
//       Access: Published, Static
//  Description: Returns true if fake_texture_image mode has been
//               enabled, false if we are in the normal mode.
////////////////////////////////////////////////////////////////////
61
static inline bool TexturePool::has_fake_texture_image(void);

2809 22 get_fake_texture_image 0 4 2925 35 TexturePool::get_fake_texture_image 0 1 1481 349
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_fake_texture_image
//       Access: Published, Static
//  Description: Returns the filename that was specified with a
//               previous call to set_fake_texture_image().
////////////////////////////////////////////////////////////////////
72
static inline Filename const &TexturePool::get_fake_texture_image(void);

2810 12 make_texture 0 4 2925 25 TexturePool::make_texture 0 1 1482 452
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::make_texture
//       Access: Published, Static
//  Description: Creates a new Texture object of the appropriate type
//               for the indicated filename extension, according to
//               the types that have been registered via
//               register_texture_type().
////////////////////////////////////////////////////////////////////
100
static inline PointerTo< Texture > TexturePool::make_texture(basic_string< char > const &extension);

2811 5 write 0 4 2925 18 TexturePool::write 0 1 1483 345
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::write
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
//               For debugging.
////////////////////////////////////////////////////////////////////
45
static void TexturePool::write(ostream &out);

2812 12 ~TexturePool 0 4 2925 25 TexturePool::~TexturePool 0 0 0
32
TexturePool::~TexturePool(void);

2813 10 get_x_size 0 4 2926 25 TexturePeeker::get_x_size 0 1 1484 449
////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_x_size
//       Access: Published
//  Description: Returns the width of the texture image that is
//               contributing to the TexturePeeker's information.
//               This may be either the Texture's full width, or its
//               simple ram image's width.
////////////////////////////////////////////////////////////////////
49
inline int TexturePeeker::get_x_size(void) const;

2814 10 get_y_size 0 4 2926 25 TexturePeeker::get_y_size 0 1 1485 452
////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_y_size
//       Access: Published
//  Description: Returns the height of the texture image that is
//               contributing to the TexturePeeker's information.
//               This may be either the Texture's full height, or its
//               simple ram image's height.
////////////////////////////////////////////////////////////////////
49
inline int TexturePeeker::get_y_size(void) const;

2815 10 get_z_size 0 4 2926 25 TexturePeeker::get_z_size 0 1 1486 337
////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_z_size
//       Access: Published
//  Description: Returns the depth of the texture image that is
//               contributing to the TexturePeeker's information.
////////////////////////////////////////////////////////////////////
49
inline int TexturePeeker::get_z_size(void) const;

2816 6 lookup 0 4 2926 21 TexturePeeker::lookup 0 2 1487 1488 1223
////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::lookup
//       Access: Published
//  Description: Fills "color" with the RGBA color of the texel at
//               point (u, v).
//
//               The texel color is determined via nearest-point
//               sampling (no filtering of adjacent pixels),
//               regardless of the filter type associated with the
//               texture.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::lookup
//       Access: Published
//  Description: Fills "color" with the RGBA color of the texel at
//               point (u, v, w).
//
//               The texel color is determined via nearest-point
//               sampling (no filtering of adjacent pixels),
//               regardless of the filter type associated with the
//               texture.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
////////////////////////////////////////////////////////////////////
150
void TexturePeeker::lookup(LVecBase4f &color, float u, float v) const;
void TexturePeeker::lookup(LVecBase4f &color, float u, float v, float w) const;

2817 11 filter_rect 0 4 2926 26 TexturePeeker::filter_rect 0 2 1489 1490 1128
////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::filter_rect
//       Access: Published
//  Description: Fills "color" with the average RGBA color of the
//               texels within the rectangle defined by the specified
//               coordinate range.
//
//               The texel color is linearly filtered over the entire
//               region.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::filter_rect
//       Access: Published
//  Description: Fills "color" with the average RGBA color of the
//               texels within the rectangle defined by the specified
//               coordinate range.
//
//               The texel color is linearly filtered over the entire
//               region.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
////////////////////////////////////////////////////////////////////
245
void TexturePeeker::filter_rect(LVecBase4f &color, float min_u, float min_v, float max_u, float max_v) const;
void TexturePeeker::filter_rect(LVecBase4f &color, float min_u, float min_v, float min_w, float max_u, float max_v, float max_w) const;

2818 14 ~TexturePeeker 0 4 2926 29 TexturePeeker::~TexturePeeker 0 0 0
36
TexturePeeker::~TexturePeeker(void);

2819 9 get_stage 0 4 2927 27 TextureStagePool::get_stage 0 1 1491 1552
// Filename: textureStagePool.I
// Created by:  drose (03May10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::get_stage
//       Access: Public, Static
//  Description: Returns a TextureStage pointer that represents the
//               same TextureStage described by temp, except that it is a
//               shared pointer.
//
//               Each call to get_stage() passing an equivalent
//               TextureStage pointer will return the same shared pointer.
//
//               If you modify the shared pointer, it will
//               automatically disassociate it from the pool.
//
//               Also, the return value may be a different pointer
//               than that passed in, or it may be the same pointer.
//               In either case, the passed in pointer has now been
//               sacrificed to the greater good and should not be used
//               again (like any other PointerTo, it will be freed
//               when the last reference count is removed).
////////////////////////////////////////////////////////////////////
76
static inline TextureStage *TextureStagePool::get_stage(TextureStage *temp);

2820 13 release_stage 0 4 2927 31 TextureStagePool::release_stage 0 1 1492 288
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::release_stage
//       Access: Published, Static
//  Description: Removes the indicated TextureStage from the pool.
////////////////////////////////////////////////////////////////////
71
static inline void TextureStagePool::release_stage(TextureStage *temp);

2821 18 release_all_stages 0 4 2927 36 TextureStagePool::release_all_stages 0 1 1493 341
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::release_all_stages
//       Access: Published, Static
//  Description: Releases all TextureStages in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
62
static inline void TextureStagePool::release_all_stages(void);

2822 8 set_mode 0 4 2927 26 TextureStagePool::set_mode 0 1 1494 847
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::set_mode
//       Access: Published, Static
//  Description: Specifies the fundamental operating mode of the
//               TextureStagePool.
//
//               If this is M_none, each call to get_stage() returns
//               the same TextureStage pointer that was passed in (the
//               pool is effectively disabled).  If this is M_name,
//               each call to get_stage() returns the last
//               TextureStage passed in with the same name, whether it
//               has different properties or not.  If this is
//               M_unique, then each call to get_stage() returns only
//               TextureStages with identical properties.
////////////////////////////////////////////////////////////////////
75
static inline void TextureStagePool::set_mode(TextureStagePool::Mode mode);

2823 8 get_mode 0 4 2927 26 TextureStagePool::get_mode 0 1 1495 331
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::get_mode
//       Access: Published, Static
//  Description: Returns the fundamental operating mode of the
//               TextureStagePool.  See set_mode().
////////////////////////////////////////////////////////////////////
70
static inline TextureStagePool::Mode TextureStagePool::get_mode(void);

2824 15 garbage_collect 0 4 2927 33 TextureStagePool::garbage_collect 0 1 1496 497
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those TextureStages in the pool that have a
//               reference count of exactly 1; i.e. only those
//               TextureStages that are not being used outside of the pool.
//               Returns the number of TextureStages released.
////////////////////////////////////////////////////////////////////
58
static inline int TextureStagePool::garbage_collect(void);

2825 13 list_contents 0 4 2927 31 TextureStagePool::list_contents 0 1 1497 328
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the TextureStage pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
65
static inline void TextureStagePool::list_contents(ostream &out);

2826 5 write 0 4 2927 23 TextureStagePool::write 0 1 1498 323
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::write
//       Access: Published, Static
//  Description: Lists the contents of the TextureStage pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
50
static void TextureStagePool::write(ostream &out);

2827 17 ~TextureStagePool 0 4 2927 35 TextureStagePool::~TextureStagePool 0 0 0
42
TextureStagePool::~TextureStagePool(void);

1498
1 14 Dtool_qQJqxyGj 0 7 3 2931 1500 14 Dtool_qQJqxyGj 224 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2929  8 max_size 1 2930  
2 14 Dtool_qQJqXnUx 0 6 5 2930 0 14 Dtool_qQJqXnUx 797 // Filename: adaptiveLru.I
// Created by:  drose (03Sep08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_total_size
//       Access: Published
//  Description: Returns the total size of all objects currently
//               active on the LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
3 14 Dtool_qQJqeXT1 0 6 6 2930 0 14 Dtool_qQJqeXT1 319 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_max_size
//       Access: Published
//  Description: Returns the max size of all objects that are allowed
//               to be active on the LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
4 14 Dtool_qQJqhriC 0 4 7 2934 0 14 Dtool_qQJqhriC 385 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_max_size
//       Access: Published
//  Description: Changes the max size of all objects that are allowed
//               to be active on the LRU.
//
//               If the size is (size_t)-1, there is no limit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2931  8 max_size 1 2930  
5 14 Dtool_qQJqvTZs 0 6 8 2930 0 14 Dtool_qQJqvTZs 339 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::count_active_size
//       Access: Published
//  Description: Returns the total size of the pages that were
//               enqueued since the last call to begin_epoch().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
6 14 Dtool_qQJqpDj_ 0 4 9 2934 0 14 Dtool_qQJqpDj_ 277 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::consider_evict
//       Access: Published
//  Description: Evicts a sequence of objects if the queue is full.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2931  
7 14 Dtool_qQJqoyK_ 0 4 10 2934 0 14 Dtool_qQJqoyK_ 373 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::evict_to
//       Access: Published
//  Description: Evicts a sequence of objects until the queue fits
//               within the indicated target size, regardless of its
//               normal max size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2931  11 target_size 1 2930  
8 14 Dtool_qQJqsjHe 0 4 11 2934 0 14 Dtool_qQJqsjHe 443 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::begin_epoch
//       Access: Published
//  Description: Marks the end of the previous epoch and the beginning
//               of the next one.  This will evict any objects that
//               are pending eviction, and also update any internal
//               bookkeeping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2931  
9 14 Dtool_qQJqUtAt 0 6 12 2935 0 14 Dtool_qQJqUtAt 365 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::validate
//       Access: Published
//  Description: Checks that the LRU is internally self-consistent.
//               Returns true if successful, false if there is some
//               problem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2931  
10 14 Dtool_qQJqbxSr 0 4 13 2934 0 14 Dtool_qQJqbxSr 219 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2932  3 out 1 2936  
11 14 Dtool_qQJqO1xT 0 4 14 2934 0 14 Dtool_qQJqO1xT 227 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2932  3 out 1 2936  12 indent_level 1 2938  
12 14 Dtool_qQJqTzQj 0 4 15 2934 0 14 Dtool_qQJqTzQj 314 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_weight
//       Access: Published
//  Description: Specifies the weight value used to compute the
//               exponential moving average.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2931  6 weight 1 2939  
13 14 Dtool_qQJqbvB0 0 6 16 2939 0 14 Dtool_qQJqbvB0 312 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_weight
//       Access: Published
//  Description: Returns the weight value used to compute the
//               exponential moving average.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
14 14 Dtool_qQJqq5Z4 0 4 17 2934 0 14 Dtool_qQJqq5Z4 486 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::set_max_updates_per_frame
//       Access: Published
//  Description: Specifies the maximum number of pages the AdaptiveLru
//               will update each frame.  This is a performance
//               optimization: keeping this number low limits the
//               impact of the AdaptiveLru's adaptive algorithm.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2931  21 max_updates_per_frame 1 2938  
15 14 Dtool_qQJqPZ2i 0 6 18 2938 0 14 Dtool_qQJqPZ2i 330 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLru::get_max_updates_per_frame
//       Access: Published
//  Description: Returns the maximum number of pages the AdaptiveLru
//               will update each frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
16 14 Dtool_qQJqqFXo 0 7 26 2942 1521 14 Dtool_qQJqqFXo 233 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Copy Constructor
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2940  
17 14 Dtool_qQJqazFB 0 7 26 2942 1521 14 Dtool_qQJqazFB 228 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Constructor
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 1 8 lru_size 1 2930  
18 14 Dtool_qQJqnYpU 0 6 27 2942 0 14 Dtool_qQJqnYpU 241 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::Copy Assignment Operator
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2942  4 copy 1 2940  
19 14 Dtool_qQJqBueE 0 6 29 2931 0 14 Dtool_qQJqBueE 335 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::enqueue_lru
//       Access: Published
//  Description: Returns the LRU that manages this page, or NULL if it
//               is not currently managed by any LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
20 14 Dtool_qQJqj1mJ 0 4 30 2934 0 14 Dtool_qQJqj1mJ 445 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::enqueue_lru
//       Access: Published
//  Description: Adds the page to the LRU for the first time, or marks
//               it recently-accessed if it has already been added.
//
//               If lru is NULL, it means to remove this page from its
//               LRU.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2942  3 lru 1 2931  
21 14 Dtool_qQJqZq_w 0 4 31 2934 0 14 Dtool_qQJqZq_w 266 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::dequeue_lru
//       Access: Published
//  Description: Removes the page from its AdaptiveLru.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2942  
22 14 Dtool_qQJqiZg4 0 4 32 2934 0 14 Dtool_qQJqiZg4 485 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the AdaptiveLru queue it is already on.
//
//               This method is const because it's not technically
//               modifying the contents of the page itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
23 14 Dtool_qQJqoKjs 0 4 32 2934 0 14 Dtool_qQJqoKjs 348 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the specified AdaptiveLru queue.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2942  3 lru 1 2931  
24 14 Dtool_qQJqdAA_ 0 6 33 2930 0 14 Dtool_qQJqdAA_ 320 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_lru_size
//       Access: Published
//  Description: Returns the size of this page as reported to the LRU,
//               presumably in bytes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
25 14 Dtool_qQJqxp0u 0 4 34 2934 0 14 Dtool_qQJqxp0u 330 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::set_lru_size
//       Access: Published
//  Description: Specifies the size of this page, presumably in bytes,
//               although any unit is possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2942  8 lru_size 1 2930  
26 14 Dtool_qQJqtQMW 0 4 35 2934 0 14 Dtool_qQJqtQMW 814 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::evict_lru
//       Access: Published, Virtual
//  Description: Evicts the page from the LRU.  Called internally when
//               the LRU determines that it is full.  May also be
//               called externally when necessary to explicitly evict
//               the page.
//
//               It is legal for this method to either evict the page
//               as requested, do nothing (in which case the eviction
//               will be requested again at the next epoch), or
//               requeue itself on the tail of the queue (in which
//               case the eviction will be requested again much
//               later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2942  
27 14 Dtool_qQJqG6th 0 4 36 2934 0 14 Dtool_qQJqG6th 232 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  3 out 1 2936  
28 14 Dtool_qQJqPkPo 0 4 37 2934 0 14 Dtool_qQJqPkPo 231 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2940  3 out 1 2936  12 indent_level 1 2938  
29 14 Dtool_qQJqkY_n 0 6 38 2930 0 14 Dtool_qQJqkY_n 375 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_num_frames
//       Access: Published
//  Description: Returns the number of frames since the page was first
//               added to its LRU.  Returns 0 if it does not have an
//               LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
30 14 Dtool_qQJqYSeb 0 6 39 2930 0 14 Dtool_qQJqYSeb 386 ////////////////////////////////////////////////////////////////////
//     Function: AdaptiveLruPage::get_num_inactive_frames
//       Access: Published
//  Description: Returns the number of frames since the page was last
//               accessed on its LRU.  Returns 0 if it does not have
//               an LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
31 14 Dtool_qQJqGUEb 0 7 50 2943 1543 14 Dtool_qQJqGUEb 735 // Filename: geomVertexAnimationSpec.I
// Created by:  drose (29Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
32 14 Dtool_qQJqMDwM 0 7 50 2943 1543 14 Dtool_qQJqMDwM 241 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 other 1 2944  
33 14 Dtool_qQJqwAfZ 0 6 51 2943 0 14 Dtool_qQJqwAfZ 249 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  5 other 1 2944  
34 14 Dtool_qQJqVYja 0 6 52 2840 0 14 Dtool_qQJqVYja 315 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_animation_type
//       Access: Published
//  Description: Returns the type of animation represented by this
//               spec.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
35 14 Dtool_qQJq1Mf5 0 6 53 2938 0 14 Dtool_qQJq1Mf5 479 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_num_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  It specifies the maximum number of
//               transforms that might be simultaneously applied to
//               any one vertex by the data in this format.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
36 14 Dtool_qQJqW3oB 0 6 54 2935 0 14 Dtool_qQJqW3oB 529 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_indexed_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  If true, it indicates that the format
//               uses indexed animation tables.  It is false if each
//               vertex will reference the first _num_transforms
//               table entries only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
37 14 Dtool_qQJq43Cj 0 4 55 2934 0 14 Dtool_qQJq43Cj 313 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_none
//       Access: Published
//  Description: Specifies that no vertex animation is represented by
//               this spec.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2943  
38 14 Dtool_qQJqBxbM 0 4 56 2934 0 14 Dtool_qQJqBxbM 419 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_panda
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               Panda.  This is the most general setting and can
//               handle any kind of vertex animation represented.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2943  
39 14 Dtool_qQJqlRAp 0 4 57 2934 0 14 Dtool_qQJqlRAp 721 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_hardware
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               the graphics hardware (or at least by the graphics
//               backend API, which is actually still free to animate
//               the vertices on the CPU).
//
//               This is only legal if the graphics hardware can
//               support the specified limits on number of transforms
//               and/or indexed transforms.  Also, no current graphics
//               API's support morphing.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2943  14 num_transforms 1 2938  18 indexed_transforms 1 2935  
40 14 Dtool_qQJqkx4C 0 4 58 2934 0 14 Dtool_qQJqkx4C 231 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  3 out 1 2936  
41 14 Dtool_qQJqys3i 0 7 62 2946 0 14 Dtool_qQJqys3i 1307 // Filename: internalName.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: InternalName::make
//       Access: Published, Static
//  Description: The public interface for constructing an InternalName
//               pointer.  This will return a new InternalName
//               representing the indicated name, if this is the first
//               time the particular name has been requested; if the
//               name is already in use, it will return the existing
//               pointer.
//
//               If the string contains the '.' character, the string
//               will be divided at the dots and the so-defined
//               hierarchy of names will be registered.  This is
//               handled transparently.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
42 14 Dtool_qQJqOYJi 0 7 62 2946 0 14 Dtool_qQJqOYJi 301 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::make
//       Access: Published, Static
//  Description: Make using a string and an integer.  Concatenates
//               the two.
//////////////////////////////////////////////////////////////////// 2 4 name 1 2929  5 index 1 2938  
43 14 Dtool_qQJqyvtN 0 7 63 2946 0 14 Dtool_qQJqyvtN 475 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::append
//       Access: Published
//  Description: Constructs a new InternalName based on this name,
//               with the indicated string following it.  This is a
//               cheaper way to construct a hierarchical name than
//               InternalName::make(parent->get_name() + ".basename").
//////////////////////////////////////////////////////////////////// 2 4 this 3 2946  8 basename 1 2929  
44 14 Dtool_qQJqxW48 0 7 64 2946 0 14 Dtool_qQJqxW48 328 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_parent
//       Access: Published
//  Description: Return the parent of this InternalName.  All names
//               have a parent, except the root name.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
45 14 Dtool_qQJqKewZ 0 6 65 2929 0 14 Dtool_qQJqKewZ 320 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_name
//       Access: Published
//  Description: Returns the complete name represented by the
//               InternalName and all of its parents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
46 14 Dtool_qQJqlDZ2 0 6 66 2929 0 14 Dtool_qQJqlDZ2 404 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_basename
//       Access: Published
//  Description: Return the name represented by just this particular
//               InternalName object, ignoring its parents names.
//               This is everything after the rightmost dot.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
47 14 Dtool_qQJqUWKQ 0 6 67 2938 0 14 Dtool_qQJqUWKQ 584 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::find_ancestor
//       Access: Published
//  Description: Returns the index of the ancestor with the indicated
//               basename, or -1 if no ancestor has that basename.
//               Returns 0 if this name has the basename.
//
//               This index value may be passed to get_ancestor() or
//               get_net_basename() to retrieve more information about
//               the indicated name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  8 basename 1 2929  
48 14 Dtool_qQJqymmN 0 7 68 2947 0 14 Dtool_qQJqymmN 481 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_ancestor
//       Access: Published
//  Description: Returns the ancestor with the indicated index number.
//               0 is this name itself, 1 is the name's parent, 2 is
//               the parent's parent, and so on.  If there are not
//               enough ancestors, returns the root InternalName.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 n 1 2938  
49 14 Dtool_qQJqDhts 0 7 69 2947 0 14 Dtool_qQJqDhts 460 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_top
//       Access: Published
//  Description: Returns the oldest ancestor in the InternalName's
//               chain, not counting the root.  This will be the first
//               name in the string, e.g. "texcoord.foo.bar" will
//               return the InternalName "texcoord".
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
50 14 Dtool_qQJqi8VP 0 6 70 2929 0 14 Dtool_qQJqi8VP 456 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_net_basename
//       Access: Published
//  Description: Returns the basename of this name prefixed by the
//               indicated number of ancestors.  0 is this name's
//               basename, 1 is parent.basename, 2 is
//               grandparent.parent.basename, and so on.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 n 1 2938  
51 14 Dtool_qQJq1gHV 0 4 71 2934 0 14 Dtool_qQJq1gHV 220 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  3 out 1 2936  
52 14 Dtool_qQJqOVm7 0 7 72 2946 0 14 Dtool_qQJqOVm7 438 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_root
//       Access: Published, Static
//  Description: Returns the standard root InternalName.  This is the
//               root of all other InternalNames.  It has no name
//               itself, and it is the only InternalName with no
//               parent.
//////////////////////////////////////////////////////////////////// 0 
53 14 Dtool_qQJq6f4T 0 7 73 2946 0 14 Dtool_qQJq6f4T 273 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_error
//       Access: Published, Static
//  Description: Returns the standard InternalName "error".
//////////////////////////////////////////////////////////////////// 0 
54 14 Dtool_qQJqa072 0 7 74 2946 0 14 Dtool_qQJqa072 400 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_vertex
//       Access: Published, Static
//  Description: Returns the standard InternalName "vertex".  This is
//               the column header for the 3-d or 4-d vertex position
//               information for each vertex.
//////////////////////////////////////////////////////////////////// 0 
55 14 Dtool_qQJq2d7w 0 7 75 2946 0 14 Dtool_qQJq2d7w 381 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_normal
//       Access: Published, Static
//  Description: Returns the standard InternalName "normal".  This is
//               the column header for the 3-d lighting normal for
//               each vertex.
//////////////////////////////////////////////////////////////////// 0 
56 14 Dtool_qQJqBCM_ 0 7 76 2946 0 14 Dtool_qQJqBCM_ 593 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent
//       Access: Published, Static
//  Description: Returns the standard InternalName "tangent".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to the normal and in the
//               direction of the U texture coordinate change.  It is
//               used for deriving bump maps.
//////////////////////////////////////////////////////////////////// 0 
57 14 Dtool_qQJqTpIr 0 7 77 2946 0 14 Dtool_qQJqTpIr 457 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent_name
//       Access: Published, Static
//  Description: Returns the InternalName "tangent.name", where name
//               is the supplied string.  This is the column header
//               for the tangent associated with the named texture
//               coordinate set.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
58 14 Dtool_qQJqgGjH 0 7 78 2946 0 14 Dtool_qQJqgGjH 634 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal
//       Access: Published, Static
//  Description: Returns the standard InternalName "binormal".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to both the normal and the
//               tangent, and in the direction of the V texture
//               coordinate change.  It is used for deriving bump
//               maps.
//////////////////////////////////////////////////////////////////// 0 
59 14 Dtool_qQJq3sMn 0 7 79 2946 0 14 Dtool_qQJq3sMn 460 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal_name
//       Access: Published, Static
//  Description: Returns the InternalName "binormal.name", where name
//               is the supplied string.  This is the column header
//               for the binormal associated with the named texture
//               coordinate set.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
60 14 Dtool_qQJqaaiB 0 7 80 2946 0 14 Dtool_qQJqaaiB 517 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord
//       Access: Published, Static
//  Description: Returns the standard InternalName "texcoord".  This
//               is the column header for the default texture
//               coordinate set for each vertex.  It is also used for
//               identifying the default texture coordinate set in a
//               TextureStage.
//////////////////////////////////////////////////////////////////// 0 
61 14 Dtool_qQJq0OLh 0 7 81 2946 0 14 Dtool_qQJq0OLh 548 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord_name
//       Access: Published, Static
//  Description: Returns the InternalName "texcoord.name", where name
//               is the supplied string.  This is the column header
//               for the named texture coordinate set for each vertex.
//               It is also used for identifying the named texture
//               coordinate set in a TextureStage.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
62 14 Dtool_qQJqkPBk 0 7 82 2946 0 14 Dtool_qQJqkPBk 383 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_color
//       Access: Published, Static
//  Description: Returns the standard InternalName "color".  This is
//               the column header for the 4-component color value for
//               each vertex.
//////////////////////////////////////////////////////////////////// 0 
63 14 Dtool_qQJqEmsm 0 7 83 2946 0 14 Dtool_qQJqEmsm 500 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_rotate
//       Access: Published, Static
//  Description: Returns the standard InternalName "rotate".  This is
//               the column header for the floating-point rotate
//               value, which represents a number of degrees
//               counter-clockwise to rotate each point or point
//               sprite.
//////////////////////////////////////////////////////////////////// 0 
64 14 Dtool_qQJq1bcz 0 7 84 2946 0 14 Dtool_qQJq1bcz 505 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_size
//       Access: Published, Static
//  Description: Returns the standard InternalName "size".  This is
//               the column header for the floating-point size value,
//               which overrides the thickness parameter of the
//               RenderModeAttrib on a per-vertex (e.g. per-point)
//               basis.
//////////////////////////////////////////////////////////////////// 0 
65 14 Dtool_qQJqoQxT 0 7 85 2946 0 14 Dtool_qQJqoQxT 535 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_aspect_ratio
//       Access: Published, Static
//  Description: Returns the standard InternalName "aspect_ratio".
//               This is the column header for the floating-point
//               aspect ratio value, which is used to define
//               non-square points.  This number is the ratio x / y,
//               where y is the point size (above).
//////////////////////////////////////////////////////////////////// 0 
66 14 Dtool_qQJqOgr2 0 7 86 2946 0 14 Dtool_qQJqOgr2 553 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_blend
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_blend".
//               This is the column header for the integer
//               transform_blend index, which is used to define vertex
//               animation on the CPU by indexing to a particular
//               vertex weighting from the TransformBlendTable.
//////////////////////////////////////////////////////////////////// 0 
67 14 Dtool_qQJqZaFB 0 7 87 2946 0 14 Dtool_qQJqZaFB 823 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_weight
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_weight".
//               This is the column header for the n-component
//               transform_weight value, which is used in conjuntion
//               with "transform_index" to define vertex animation on
//               the graphics card.  The transform_weight value
//               specifies the weight of the nth transform.  By
//               convention, there are 1 fewer weight values than
//               transforms, since the weights are assumed to sum to 1
//               (and the last value is therefore implicit).
//////////////////////////////////////////////////////////////////// 0 
68 14 Dtool_qQJqPrB9 0 7 88 2946 0 14 Dtool_qQJqPrB9 795 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_index".
//               This is the column header for the n-component
//               transform_index value, which is used in conjuntion
//               with "transform_weight" to define vertex animation on
//               the graphics card.  The transform_index value
//               specifies the nth transform, by lookup in the
//               TransformTable.  The transform_index column may be
//               omitted, in which case the nth transform is the nth
//               entry in the table.
//////////////////////////////////////////////////////////////////// 0 
69 14 Dtool_qQJqZ7iC 0 7 89 2946 0 14 Dtool_qQJqZ7iC 655 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_morph
//       Access: Published, Static
//  Description: Returns an InternalName derived from the given base
//               column name and the given slider name, which is the
//               column header for the offset vector that should be
//               applied to the base column name when the named morph
//               slider is engaged.
//
//               Each morph slider requires a set of n morph columns,
//               one for each base column it applies to.
//////////////////////////////////////////////////////////////////// 2 6 column 1 2946  6 slider 1 2929  
70 14 Dtool_qQJqTtkc 0 7 90 2946 0 14 Dtool_qQJqTtkc 515 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "index".  This is
//               the column header for the integer vertex index.  It
//               is not used in the vertex data itself, but is used in
//               the GeomPrimitive structure to index into the vertex
//               data.
//////////////////////////////////////////////////////////////////// 0 
71 14 Dtool_qQJqr1c_ 0 7 91 2946 0 14 Dtool_qQJqr1c_ 342 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_world
//       Access: Published, Static
//  Description: Returns the standard InternalName "world".  This is
//               used as a keyword in the shader subsystem.
//////////////////////////////////////////////////////////////////// 0 
72 14 Dtool_qQJqJLm5 0 7 92 2946 0 14 Dtool_qQJqJLm5 344 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_camera
//       Access: Published, Static
//  Description: Returns the standard InternalName "camera".  This is
//               used as a keyword in the shader subsystem.
//////////////////////////////////////////////////////////////////// 0 
73 14 Dtool_qQJqSAUz 0 7 93 2946 0 14 Dtool_qQJqSAUz 342 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_model
//       Access: Published, Static
//  Description: Returns the standard InternalName "model".  This is
//               used as a keyword in the shader subsystem.
//////////////////////////////////////////////////////////////////// 0 
74 14 Dtool_qQJqokyx 0 7 94 2946 0 14 Dtool_qQJqokyx 340 ////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_view
//       Access: Published, Static
//  Description: Returns the standard InternalName "view".  This is
//               used as a keyword in the shader subsystem.
//////////////////////////////////////////////////////////////////// 0 
75 14 Dtool_qQJqAZei 0 7 95 2950 0 14 Dtool_qQJqAZei 0 0 
76 14 Dtool_qQJqvt5j 0 7 97 2953 1580 14 Dtool_qQJqvt5j 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2951  
77 14 Dtool_qQJqrXRr 0 7 97 2953 1580 14 Dtool_qQJqrXRr 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  5 start 1 2938  16 column_alignment 1 2938  
78 14 Dtool_qQJqqHP9 0 7 97 2953 1580 14 Dtool_qQJqqHP9 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  5 start 1 2938  
79 14 Dtool_qQJqqipz 0 6 98 2953 0 14 Dtool_qQJqqipz 242 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2953  4 copy 1 2951  
80 14 Dtool_qQJqdOcj 0 7 100 2946 0 14 Dtool_qQJqdOcj 541 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_name
//       Access: Published
//  Description: Returns the name of this particular data field,
//               e.g. "vertex" or "normal".  The name may be a
//               user-defined string, or it may be one of the standard
//               system-defined field types.  Only the system-defined
//               field types are used for the actual rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
81 14 Dtool_qQJq_29x 0 6 101 2938 0 14 Dtool_qQJq_29x 464 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_components
//       Access: Published
//  Description: Returns the number of components of the column:
//               the number of instances of the NumericType in each
//               element.  This is usually, but not always, the same
//               thing as get_num_values().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
82 14 Dtool_qQJqVlzN 0 6 102 2938 0 14 Dtool_qQJqVlzN 648 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_values
//       Access: Published
//  Description: Returns the number of numeric values of the column:
//               the number of distinct numeric values that go into
//               each element.  This is usually, but not always, the
//               same thing as get_num_components(); the difference is
//               in the case of a composite numeric type like
//               NT_packed_dcba, which has four numeric values per
//               component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
83 14 Dtool_qQJq_YBU 0 6 103 2838 0 14 Dtool_qQJq_YBU 319 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_numeric_type
//       Access: Published
//  Description: Returns the token representing the numeric type of
//               the data storage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
84 14 Dtool_qQJqWN4C 0 6 104 2839 0 14 Dtool_qQJqWN4C 319 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_contents
//       Access: Published
//  Description: Returns the token representing the semantic meaning of
//               the stored value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
85 14 Dtool_qQJqKNfk 0 6 105 2938 0 14 Dtool_qQJqKNfk 392 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_start
//       Access: Published
//  Description: Returns the byte within the array record at which
//               this column starts.  This can be set to non-zero
//               to implement interleaved arrays.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
86 14 Dtool_qQJqi3H3 0 6 106 2938 0 14 Dtool_qQJqi3H3 601 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_column_alignment
//       Access: Published
//  Description: Returns the alignment requirements for this column.
//               If this is greater than 1, it restricts the column to
//               appear only on memory addresses that are integer
//               multiples of this value; this has implications for
//               this column's start value, as well as the stride of
//               the resulting array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
87 14 Dtool_qQJqTwV4 0 6 107 2938 0 14 Dtool_qQJqTwV4 351 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_component_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each component
//               (that is, by one element of the numeric type).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
88 14 Dtool_qQJqcXJp 0 6 108 2938 0 14 Dtool_qQJqcXJp 347 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_total_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each element of
//               the column: component_bytes * num_components.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
89 14 Dtool_qQJqQEWs 0 6 109 2935 0 14 Dtool_qQJqQEWs 727 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::has_homogeneous_coord
//       Access: Published
//  Description: Returns true if this Contents type is one that
//               includes a homogeneous coordinate in the fourth
//               component, or false otherwise.  If this is true,
//               correct operation on the vertex data may require
//               scaling by the homogeneous coordinate from time to
//               time (but in general this is handled automatically if
//               you use the 3-component or smaller forms of
//               get_data() and set_data()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2951  
90 14 Dtool_qQJqZDLZ 0 6 110 2935 0 14 Dtool_qQJqZDLZ 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::overlaps_with
//       Access: Published
//  Description: Returns true if this column overlaps with any of
//               the bytes in the indicated range, false if it does
//               not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2951  10 start_byte 1 2938  9 num_bytes 1 2938  
91 14 Dtool_qQJqs2pJ 0 6 111 2935 0 14 Dtool_qQJqs2pJ 419 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::is_bytewise_equivalent
//       Access: Published
//  Description: Returns true if the data store of this column is
//               exactly the same as that of the other, irrespective
//               of name or start position within the record.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  5 other 1 2951  
92 14 Dtool_qQJqWRGX 0 4 112 2934 0 14 Dtool_qQJqWRGX 224 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  3 out 1 2936  
93 14 Dtool_qQJqqhGa 0 7 118 2954 1600 14 Dtool_qQJqqhGa 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
94 14 Dtool_qQJqEyku 0 7 118 2954 1600 14 Dtool_qQJqEyku 239 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2955  
95 14 Dtool_qQJqwQuB 0 7 118 2954 1600 14 Dtool_qQJqwQuB 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 5 name0 1 2946  15 num_components0 1 2938  13 numeric_type0 1 2838  9 contents0 1 2839  
96 14 Dtool_qQJqMGCQ 0 7 118 2954 1600 14 Dtool_qQJqMGCQ 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 5 name0 1 2946  15 num_components0 1 2938  13 numeric_type0 1 2838  9 contents0 1 2839  5 name1 1 2946  15 num_components1 1 2938  13 numeric_type1 1 2838  9 contents1 1 2839  
97 14 Dtool_qQJqrTBZ 0 7 118 2954 1600 14 Dtool_qQJqrTBZ 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 12 5 name0 1 2946  15 num_components0 1 2938  13 numeric_type0 1 2838  9 contents0 1 2839  5 name1 1 2946  15 num_components1 1 2938  13 numeric_type1 1 2838  9 contents1 1 2839  5 name2 1 2946  15 num_components2 1 2938  13 numeric_type2 1 2838  9 contents2 1 2839  
98 14 Dtool_qQJqI38U 0 7 118 2954 1600 14 Dtool_qQJqI38U 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 16 5 name0 1 2946  15 num_components0 1 2938  13 numeric_type0 1 2838  9 contents0 1 2839  5 name1 1 2946  15 num_components1 1 2938  13 numeric_type1 1 2838  9 contents1 1 2839  5 name2 1 2946  15 num_components2 1 2938  13 numeric_type2 1 2838  9 contents2 1 2839  5 name3 1 2946  15 num_components3 1 2938  13 numeric_type3 1 2838  9 contents3 1 2839  
99 14 Dtool_qQJq6hwa 0 7 119 2954 1600 14 Dtool_qQJq6hwa 247 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  4 copy 1 2955  
100 14 Dtool_qQJqnmU1 0 6 121 2935 0 14 Dtool_qQJqnmU1 380 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::unref
//       Access: Published, Virtual
//  Description: This method overrides ReferenceCount::unref() to
//               unregister the object when its reference count goes
//               to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
101 14 Dtool_qQJqUdKQ 0 6 122 2935 0 14 Dtool_qQJqUdKQ 965 // Filename: geomVertexArrayFormat.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
102 14 Dtool_qQJqojG9 0 7 123 2955 0 14 Dtool_qQJqojG9 774 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This is similar to
//               GeomVertexFormat::register_format(), except that you
//               generally need not call it explicitly.  Calling
//               GeomVertexFormat::register_format() automatically
//               registers all of the nested array formats.
//////////////////////////////////////////////////////////////////// 1 6 format 1 2955  
103 14 Dtool_qQJqJA_4 0 6 124 2938 0 14 Dtool_qQJqJA_4 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_stride
//       Access: Published
//  Description: Returns the total number of bytes reserved in the
//               array for each vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
104 14 Dtool_qQJqkPw2 0 4 125 2934 0 14 Dtool_qQJqkPw2 443 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::set_stride
//       Access: Published
//  Description: Changes the total number of bytes reserved in the
//               array for each vertex.  You may not reduce this below
//               get_total_bytes(), but you may increase it
//               arbitrarily.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  6 stride 1 2938  
105 14 Dtool_qQJq5U9H 0 6 126 2938 0 14 Dtool_qQJq5U9H 659 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_pad_to
//       Access: Published
//  Description: Returns the byte divisor to which the data record
//               must be padded to meet hardware limitations.  For
//               instance, if this is 4, the stride will be
//               automatically rounded up to the next multiple of 4
//               bytes.  This value is automatically increased as
//               needed to ensure the individual numeric components in
//               the array are word-aligned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
106 14 Dtool_qQJqugvF 0 4 127 2934 0 14 Dtool_qQJqugvF 666 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::set_pad_to
//       Access: Published
//  Description: Explicitly sets the byte divisor to which the data
//               record must be padded to meet hardware limitations.
//               See get_pad_to().  Normally it is not necessary to
//               call this unless you have some specific requirements
//               for row-to-row data alignment.  Note that this value
//               may be automatically increased at each subsequent
//               call to add_column().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  6 pad_to 1 2938  
107 14 Dtool_qQJqt2Rt 0 6 128 2938 0 14 Dtool_qQJqt2Rt 380 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_total_bytes
//       Access: Published
//  Description: Returns the total number of bytes used by the data
//               types within the format, including gaps between
//               elements.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
108 14 Dtool_qQJqGAtY 0 6 129 2938 0 14 Dtool_qQJqGAtY 828 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               Adding a column with the same name as a previous
//               type, or that overlaps with one or more previous
//               types, quietly removes the previous type(s).
//
//               The return value is the index number of the new data
//               type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  6 column 1 2951  
109 14 Dtool_qQJqC7ye 0 6 129 2938 0 14 Dtool_qQJqC7ye 631 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               The return value is the index number of the new data
//               type.
//////////////////////////////////////////////////////////////////// 7 4 this 3 2954  4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  5 start 1 2938  16 column_alignment 1 2938  
110 14 Dtool_qQJqNwWT 0 6 129 2938 0 14 Dtool_qQJqNwWT 631 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               The return value is the index number of the new data
//               type.
//////////////////////////////////////////////////////////////////// 6 4 this 3 2954  4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  5 start 1 2938  
111 14 Dtool_qQJqRipt 0 6 129 2938 0 14 Dtool_qQJqRipt 631 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               The return value is the index number of the new data
//               type.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2954  4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  
112 14 Dtool_qQJqvK2M 0 4 130 2934 0 14 Dtool_qQJqvK2M 346 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::remove_column
//       Access: Published
//  Description: Removes the column with the indicated name, if
//               any.  This leaves a gap in the byte structure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  4 name 1 2947  
113 14 Dtool_qQJq2EfH 0 4 131 2934 0 14 Dtool_qQJq2EfH 343 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::clear_columns
//       Access: Published
//  Description: Removes all columns previously added, sets the
//               stride to zero, and prepares to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
114 14 Dtool_qQJqnS7c 0 4 132 2934 0 14 Dtool_qQJqnS7c 272 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::pack_columns
//       Access: Published
//  Description: Removes wasted space between columns.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
115 14 Dtool_qQJqruWO 0 4 133 2934 0 14 Dtool_qQJqruWO 648 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::align_columns_for_animation
//       Access: Published
//  Description: Reprocesses the columns in the format to align the
//               C_point and C_vector columns to 16-byte boundaries to
//               allow for the more efficient SSE2 operations
//               (assuming SSE2 is enabled in the build).
//
//               The caller is responsible for testing
//               vertex_animation_align_16 to decide whether to call
//               this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
116 14 Dtool_qQJq5qdH 0 6 134 2938 0 14 Dtool_qQJq5qdH 308 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_num_columns
//       Access: Published
//  Description: Returns the number of different columns in the
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
117 14 Dtool_qQJqC_4r 0 6 135 2951 0 14 Dtool_qQJqC_4r 333 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  4 name 1 2947  
118 14 Dtool_qQJq0ltF 0 6 135 2951 0 14 Dtool_qQJq0ltF 269 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  1 i 1 2938  
119 14 Dtool_qQJqxBGV 0 6 135 2951 0 14 Dtool_qQJqxBGV 378 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the first specification that overlaps with
//               any of the indicated bytes in the range, or NULL if
//               none do.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2955  10 start_byte 1 2938  9 num_bytes 1 2938  
120 14 Dtool_qQJqq1M5 0 6 136 2935 0 14 Dtool_qQJqq1M5 314 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  4 name 1 2947  
121 14 Dtool_qQJqHc2c 0 6 137 2935 0 14 Dtool_qQJqHc2c 614 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_data_subset_of
//       Access: Published
//  Description: Returns true if all of the fields in this array
//               format are also present and equivalent in the other
//               array format, and in the same byte positions, and the
//               stride is the same.  That is, true if this format can
//               share the same data pointer as the other format (with
//               possibly some unused gaps).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  5 other 1 2955  
122 14 Dtool_qQJqbNhQ 0 6 138 2938 0 14 Dtool_qQJqbNhQ 330 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::count_unused_space
//       Access: Published
//  Description: Returns the number of bytes per row that are not
//               assigned to any column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2955  
123 14 Dtool_qQJq8gQJ 0 4 139 2934 0 14 Dtool_qQJq8gQJ 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  3 out 1 2936  
124 14 Dtool_qQJq2XPr 0 4 140 2934 0 14 Dtool_qQJq2XPr 228 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2955  3 out 1 2936  12 indent_level 1 2938  
125 14 Dtool_qQJqXOR_ 0 4 140 2934 0 14 Dtool_qQJqXOR_ 228 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2955  3 out 1 2936  
126 14 Dtool_qQJqx1_X 0 4 141 2934 0 14 Dtool_qQJqx1_X 238 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write_with_data
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2955  3 out 1 2936  12 indent_level 1 2938  10 array_data 1 2957  
127 14 Dtool_qQJqqo7q 0 7 142 2950 0 14 Dtool_qQJqqo7q 0 0 
128 14 Dtool_qQJq7ZDF 0 7 114 2959 0 14 Dtool_qQJq7ZDF 0 1 4 this 3 2954  
129 14 Dtool_qQJqt0mx 0 7 115 2954 1600 14 Dtool_qQJqt0mx 0 1 4 this 3 2959  
130 14 Dtool_qQJqbG5U 0 6 116 2960 0 14 Dtool_qQJqbG5U 0 1 4 this 3 2954  
131 14 Dtool_qQJqo05j 0 7 117 2954 1600 14 Dtool_qQJqo05j 0 1 4 this 3 2960  
132 14 Dtool_qQJqp5IE 0 7 148 2961 1629 14 Dtool_qQJqp5IE 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
133 14 Dtool_qQJq0V7R 0 7 148 2961 1629 14 Dtool_qQJq0V7R 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 12 array_format 1 2955  
134 14 Dtool_qQJqekha 0 7 148 2961 1629 14 Dtool_qQJqekha 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2962  
135 14 Dtool_qQJqqp4g 0 7 149 2961 1629 14 Dtool_qQJqqp4g 242 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  4 copy 1 2962  
136 14 Dtool_qQJqwY7m 0 6 151 2935 0 14 Dtool_qQJqwY7m 375 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::unref
//       Access: Published, Virtual
//  Description: This method overrides ReferenceCount::unref() to
//               unregister the object when its reference count goes
//               to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
137 14 Dtool_qQJqYvVU 0 6 152 2935 0 14 Dtool_qQJqYvVU 463 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
138 14 Dtool_qQJqnlvK 0 7 153 2962 0 14 Dtool_qQJqnlvK 362 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: This flavor of register_format() implicitly creates a
//               one-array vertex format from the array definition.
//////////////////////////////////////////////////////////////////// 1 6 format 1 2955  
139 14 Dtool_qQJqF5LQ 0 7 153 2962 0 14 Dtool_qQJqF5LQ 849 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This must be called before a format may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
//////////////////////////////////////////////////////////////////// 1 6 format 1 2962  
140 14 Dtool_qQJqRiXK 0 6 154 2944 0 14 Dtool_qQJqRiXK 351 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_animation
//       Access: Published
//  Description: Returns the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
141 14 Dtool_qQJqWlqH 0 4 155 2934 0 14 Dtool_qQJqWlqH 555 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_animation
//       Access: Published
//  Description: Resets the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
//               You should also, of course, change the columns in the
//               tables accordingly.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  9 animation 1 2944  
142 14 Dtool_qQJq8LzX 0 7 156 2962 0 14 Dtool_qQJq8LzX 646 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_post_animated_format
//       Access: Published
//  Description: Returns a suitable vertex format for sending the
//               animated vertices to the graphics backend.  This is
//               the same format as the source format, with the
//               CPU-animation data elements removed.
//
//               This may only be called after the format has been
//               registered.  The return value will have been already
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
143 14 Dtool_qQJqKWDM 0 7 157 2962 0 14 Dtool_qQJqKWDM 791 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_union_format
//       Access: Published
//  Description: Returns a new GeomVertexFormat that includes all of
//               the columns defined in either this GeomVertexFormat
//               or the other one.  If any column is defined in both
//               formats with different sizes (for instance, texcoord2
//               vs. texcoord3), the new format will include the
//               larger of the two definitions.
//
//               This may only be called after both source formats
//               have been registered.  The return value will also
//               have been already registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  5 other 1 2962  
144 14 Dtool_qQJqxaAs 0 6 158 2938 0 14 Dtool_qQJqxaAs 506 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays required by
//               the format.  If the array data is completely
//               interleaved, this will be 1; if it is completely
//               parallel, this will be the same as the number of data
//               types.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
145 14 Dtool_qQJqcEF8 0 7 159 2955 0 14 Dtool_qQJqcEF8 304 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array
//       Access: Published
//  Description: Returns the description of the nth array used by the
//               format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  5 array 1 2938  
146 14 Dtool_qQJqz1Gg 0 7 160 2954 1600 14 Dtool_qQJqz1Gg 470 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated array.
//               This means duplicating it if it is shared or
//               registered.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  5 array 1 2938  
147 14 Dtool_qQJqjkFu 0 4 161 2934 0 14 Dtool_qQJqjkFu 371 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_array
//       Access: Published
//  Description: Replaces the definition of the indicated array.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2961  5 array 1 2938  6 format 1 2955  
148 14 Dtool_qQJq4DUv 0 4 162 2934 0 14 Dtool_qQJq4DUv 365 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_array
//       Access: Published
//  Description: Removes the nth array from the format.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  5 array 1 2938  
149 14 Dtool_qQJqIwkF 0 6 163 2938 0 14 Dtool_qQJqIwkF 534 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::add_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays included within this vertex format definition.
//               The return value is the index number of the new
//               array.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  12 array_format 1 2955  
150 14 Dtool_qQJqntYu 0 4 164 2934 0 14 Dtool_qQJqntYu 570 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::insert_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays at the indicated position.  This works just
//               like add_array(), except that you can specify which
//               array index the new array should have.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2961  5 array 1 2938  12 array_format 1 2955  
151 14 Dtool_qQJqQpcp 0 4 165 2934 0 14 Dtool_qQJqQpcp 413 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::clear_arrays
//       Access: Published
//  Description: Removes all of the array definitions from the format
//               and starts over.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2961  
152 14 Dtool_qQJqEb8v 0 6 166 2938 0 14 Dtool_qQJqEb8v 336 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_columns
//       Access: Published
//  Description: Returns the total number of different columns in
//               the specification, across all arrays.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
153 14 Dtool_qQJq7nrL 0 6 167 2938 0 14 Dtool_qQJq7nrL 766 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               indicated column, or -1 if no arrays contained
//               that name.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  4 name 1 2947  
154 14 Dtool_qQJqkTim 0 6 167 2938 0 14 Dtool_qQJqkTim 604 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               ith column.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 i 1 2938  
155 14 Dtool_qQJqzgLi 0 6 168 2951 0 14 Dtool_qQJqzgLi 441 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.  Use get_array_with()
//               to determine which array this column is associated
//               with.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  4 name 1 2947  
156 14 Dtool_qQJqfLGP 0 6 168 2951 0 14 Dtool_qQJqfLGP 308 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the specification,
//               across all arrays.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 i 1 2938  
157 14 Dtool_qQJqrn1o 0 6 169 2935 0 14 Dtool_qQJqrn1o 310 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::has_column
//       Access: Published
//  Description: Returns true if the format has the named column,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  4 name 1 2947  
158 14 Dtool_qQJqGmoS 0 4 170 2934 0 14 Dtool_qQJqGmoS 663 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_column
//       Access: Published
//  Description: Removes the named column from the format, from
//               whichever array it exists in.  If there are other
//               columns remaining in the array, the array is left
//               with a gap where the column used to be; if this
//               was the only column in the array, the array is
//               removed.
//
//               This may not be called once the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2961  4 name 1 2947  
159 14 Dtool_qQJqytua 0 4 171 2934 0 14 Dtool_qQJqytua 267 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::pack_columns
//       Access: Published
//  Description: Removes wasted space between columns.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2961  
160 14 Dtool_qQJqGdZz 0 4 172 2934 0 14 Dtool_qQJqGdZz 552 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::align_columns_for_animation
//       Access: Published
//  Description: Reprocesses the columns in the format to align the
//               C_point and C_vector columns to 16-byte boundaries to
//               allow for the more efficient SSE2 operations
//               (assuming SSE2 is enabled in the build).
//
//               Also see maybe_align_columns_for_animation().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2961  
161 14 Dtool_qQJqRJ5L 0 4 173 2934 0 14 Dtool_qQJqRJ5L 439 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::maybe_align_columns_for_animation
//       Access: Published
//  Description: Calls align_columns_for_animation() if this format's
//               AnimationSpec indicates that it contains animated
//               vertices, and if vertex-animation-align-16 is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2961  
162 14 Dtool_qQJqMqq8 0 6 174 2938 0 14 Dtool_qQJqMqq8 427 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_points
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent points in space.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
163 14 Dtool_qQJq6NwG 0 7 175 2947 0 14 Dtool_qQJq6NwG 497 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_point
//       Access: Published
//  Description: Returns the name of the nth point column.  This
//               represents a point in space, which should be
//               transformed by any spatial transform matrix.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
164 14 Dtool_qQJqNM2c 0 6 176 2938 0 14 Dtool_qQJqNM2c 432 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_vectors
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent directional vectors.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
165 14 Dtool_qQJqoLMd 0 7 177 2947 0 14 Dtool_qQJqoLMd 532 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_vector
//       Access: Published
//  Description: Returns the name of the nth vector column.  This
//               represents a directional vector, which should be
//               transformed by any spatial transform matrix as a
//               vector.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
166 14 Dtool_qQJqKJ7H 0 6 178 2938 0 14 Dtool_qQJqKJ7H 434 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_texcoords
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent texture coordinates.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
167 14 Dtool_qQJqe93W 0 7 179 2947 0 14 Dtool_qQJqe93W 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_texcoord
//       Access: Published
//  Description: Returns the name of the nth texcoord column.  This
//               represents a texture coordinate.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
168 14 Dtool_qQJqFthv 0 6 180 2938 0 14 Dtool_qQJqFthv 424 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_morphs
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent morph deltas.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
169 14 Dtool_qQJqhHKj 0 7 181 2947 0 14 Dtool_qQJqhHKj 587 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_slider
//       Access: Published
//  Description: Returns the slider name associated with the nth morph
//               column.  This is the name of the slider that will
//               control the morph, and should be defined within the
//               SliderTable associated with the GeomVertexData.
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
170 14 Dtool_qQJqINRc 0 7 182 2947 0 14 Dtool_qQJqINRc 562 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_base
//       Access: Published
//  Description: Returns the name of the base column that the nth
//               morph modifies.  This column will also be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
171 14 Dtool_qQJqu_vz 0 7 183 2947 0 14 Dtool_qQJqu_vz 685 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_delta
//       Access: Published
//  Description: Returns the name of the column that defines the
//               nth morph.  This contains the delta offsets that are
//               to be applied to the column defined by
//               get_morph_base().  This column will be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  1 n 1 2938  
172 14 Dtool_qQJqyJ2Q 0 4 184 2934 0 14 Dtool_qQJqyJ2Q 224 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  3 out 1 2936  
173 14 Dtool_qQJqQ_2h 0 4 185 2934 0 14 Dtool_qQJqQ_2h 223 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2962  3 out 1 2936  12 indent_level 1 2938  
174 14 Dtool_qQJqKeYr 0 4 185 2934 0 14 Dtool_qQJqKeYr 223 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2962  3 out 1 2936  
175 14 Dtool_qQJqFtTt 0 4 186 2934 0 14 Dtool_qQJqFtTt 233 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write_with_data
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2962  3 out 1 2936  12 indent_level 1 2938  4 data 1 2964  
176 14 Dtool_qQJqM264 0 7 187 2962 0 14 Dtool_qQJqM264 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3
//       Access: Published, Static
//  Description: Returns a standard vertex format with just a
//               3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
177 14 Dtool_qQJqw8Vh 0 7 188 2962 0 14 Dtool_qQJqw8Vh 344 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 3-component
//               normal and a 3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
178 14 Dtool_qQJq6P2g 0 7 189 2962 0 14 Dtool_qQJq6P2g 378 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair and a 3-component vertex
//               position.
//////////////////////////////////////////////////////////////////// 0 
179 14 Dtool_qQJqp05G 0 7 190 2962 0 14 Dtool_qQJqp05G 403 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 3-component normal, and a
//               3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
180 14 Dtool_qQJqm2WG 0 7 191 2962 0 14 Dtool_qQJqm2WG 338 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color and a 3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
181 14 Dtool_qQJqE76r 0 7 192 2962 0 14 Dtool_qQJqE76r 397 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, and a
//               3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
182 14 Dtool_qQJqxdLR 0 7 193 2962 0 14 Dtool_qQJqxdLR 380 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color, a 3-component normal, and a 3-component vertex
//               position.
//////////////////////////////////////////////////////////////////// 0 
183 14 Dtool_qQJqaDrT 0 7 194 2962 0 14 Dtool_qQJqaDrT 438 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, a
//               3-component normal, and a 3-component vertex
//               position.
//////////////////////////////////////////////////////////////////// 0 
184 14 Dtool_qQJqlkvh 0 7 195 2962 0 14 Dtool_qQJqlkvh 343 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color and a 3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
185 14 Dtool_qQJqEtTH 0 7 196 2962 0 14 Dtool_qQJqEtTH 402 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, and a
//               3-component vertex position.
//////////////////////////////////////////////////////////////////// 0 
186 14 Dtool_qQJq_Erc 0 7 197 2962 0 14 Dtool_qQJq_Erc 385 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color, a 3-component normal, and a 3-component vertex
//               position.
//////////////////////////////////////////////////////////////////// 0 
187 14 Dtool_qQJqE8Lf 0 7 198 2962 0 14 Dtool_qQJqE8Lf 443 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, a
//               3-component normal, and a 3-component vertex
//               position.
//////////////////////////////////////////////////////////////////// 0 
188 14 Dtool_qQJqzbuh 0 7 199 2950 0 14 Dtool_qQJqzbuh 0 0 
189 14 Dtool_qQJqN_wu 0 7 144 2959 0 14 Dtool_qQJqN_wu 0 1 4 this 3 2961  
190 14 Dtool_qQJq8_96 0 7 145 2961 1629 14 Dtool_qQJq8_96 0 1 4 this 3 2959  
191 14 Dtool_qQJqrIs2 0 6 146 2960 0 14 Dtool_qQJqrIs2 0 1 4 this 3 2961  
192 14 Dtool_qQJqCWg5 0 7 147 2961 1629 14 Dtool_qQJqCWg5 0 1 4 this 3 2960  
193 14 Dtool_qQJqWCR8 0 7 206 2966 1684 14 Dtool_qQJqWCR8 222 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2929  8 max_size 1 2930  
194 14 Dtool_qQJqIU8b 0 6 208 2930 0 14 Dtool_qQJqIU8b 793 // Filename: simpleLru.I
// Created by:  drose (11May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::get_total_size
//       Access: Published
//  Description: Returns the total size of all objects currently
//               active on the LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2967  
195 14 Dtool_qQJqn39j 0 6 209 2930 0 14 Dtool_qQJqn39j 317 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::get_max_size
//       Access: Published
//  Description: Returns the max size of all objects that are allowed
//               to be active on the LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2967  
196 14 Dtool_qQJqOAtG 0 4 210 2934 0 14 Dtool_qQJqOAtG 383 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::set_max_size
//       Access: Published
//  Description: Changes the max size of all objects that are allowed
//               to be active on the LRU.
//
//               If the size is (size_t)-1, there is no limit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  8 max_size 1 2930  
197 14 Dtool_qQJqZ43l 0 6 211 2930 0 14 Dtool_qQJqZ43l 337 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::count_active_size
//       Access: Published
//  Description: Returns the total size of the pages that were
//               enqueued since the last call to begin_epoch().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2967  
198 14 Dtool_qQJqsoHP 0 4 212 2934 0 14 Dtool_qQJqsoHP 275 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::consider_evict
//       Access: Published
//  Description: Evicts a sequence of objects if the queue is full.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
199 14 Dtool_qQJqDpX5 0 4 213 2934 0 14 Dtool_qQJqDpX5 371 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::evict_to
//       Access: Published
//  Description: Evicts a sequence of objects until the queue fits
//               within the indicated target size, regardless of its
//               normal max size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  11 target_size 1 2930  
200 14 Dtool_qQJqVVhc 0 4 214 2934 0 14 Dtool_qQJqVVhc 441 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::begin_epoch
//       Access: Published
//  Description: Marks the end of the previous epoch and the beginning
//               of the next one.  This will evict any objects that
//               are pending eviction, and also update any internal
//               bookkeeping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
201 14 Dtool_qQJqmsnP 0 6 215 2935 0 14 Dtool_qQJqmsnP 363 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::validate
//       Access: Published
//  Description: Checks that the LRU is internally self-consistent.
//               Returns true if successful, false if there is some
//               problem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
202 14 Dtool_qQJqqPtY 0 4 216 2934 0 14 Dtool_qQJqqPtY 217 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2967  3 out 1 2936  
203 14 Dtool_qQJqrtzP 0 4 217 2934 0 14 Dtool_qQJqrtzP 225 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLru::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2967  3 out 1 2936  12 indent_level 1 2938  
204 14 Dtool_qQJqxmc_ 0 6 202 2969 0 14 Dtool_qQJqxmc_ 0 1 4 this 3 2966  
205 14 Dtool_qQJqA2hR 0 6 203 2966 0 14 Dtool_qQJqA2hR 0 1 4 this 3 2969  
206 14 Dtool_qQJqh2gg 0 6 204 2970 0 14 Dtool_qQJqh2gg 0 1 4 this 3 2966  
207 14 Dtool_qQJqW73I 0 6 205 2966 0 14 Dtool_qQJqW73I 0 1 4 this 3 2970  
208 14 Dtool_qQJq82WX 0 7 221 2973 1699 14 Dtool_qQJq82WX 231 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Copy Constructor
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2971  
209 14 Dtool_qQJqsh7I 0 7 221 2973 1699 14 Dtool_qQJqsh7I 226 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Constructor
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 1 8 lru_size 1 2930  
210 14 Dtool_qQJqkQLb 0 6 222 2973 0 14 Dtool_qQJqkQLb 239 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::Copy Assignment Operator
//       Access: Protected
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  4 copy 1 2971  
211 14 Dtool_qQJqgsYL 0 6 224 2966 0 14 Dtool_qQJqgsYL 329 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::get_lru
//       Access: Published
//  Description: Returns the LRU that manages this page, or NULL if it
//               is not currently managed by any LRU.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2971  
212 14 Dtool_qQJqgmxN 0 4 225 2934 0 14 Dtool_qQJqgmxN 443 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::enqueue_lru
//       Access: Published
//  Description: Adds the page to the LRU for the first time, or marks
//               it recently-accessed if it has already been added.
//
//               If lru is NULL, it means to remove this page from its
//               LRU.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  3 lru 1 2966  
213 14 Dtool_qQJq6EK8 0 4 226 2934 0 14 Dtool_qQJq6EK8 262 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::dequeue_lru
//       Access: Published
//  Description: Removes the page from its SimpleLru.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2973  
214 14 Dtool_qQJq86pG 0 4 227 2934 0 14 Dtool_qQJq86pG 481 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the SimpleLru queue it is already on.
//
//               This method is const because it's not technically
//               modifying the contents of the page itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2971  
215 14 Dtool_qQJq42nn 0 4 227 2934 0 14 Dtool_qQJq42nn 344 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::mark_used_lru
//       Access: Published
//  Description: To be called when the page is used; this will move it
//               to the tail of the specified SimpleLru queue.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  3 lru 1 2966  
216 14 Dtool_qQJq9Ymk 0 6 228 2930 0 14 Dtool_qQJq9Ymk 318 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::get_lru_size
//       Access: Published
//  Description: Returns the size of this page as reported to the LRU,
//               presumably in bytes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2971  
217 14 Dtool_qQJqwPv_ 0 4 229 2934 0 14 Dtool_qQJqwPv_ 328 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::set_lru_size
//       Access: Published
//  Description: Specifies the size of this page, presumably in bytes,
//               although any unit is possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  8 lru_size 1 2930  
218 14 Dtool_qQJqmn5q 0 4 230 2934 0 14 Dtool_qQJqmn5q 812 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::evict_lru
//       Access: Published, Virtual
//  Description: Evicts the page from the LRU.  Called internally when
//               the LRU determines that it is full.  May also be
//               called externally when necessary to explicitly evict
//               the page.
//
//               It is legal for this method to either evict the page
//               as requested, do nothing (in which case the eviction
//               will be requested again at the next epoch), or
//               requeue itself on the tail of the queue (in which
//               case the eviction will be requested again much
//               later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2973  
219 14 Dtool_qQJqsT_n 0 4 231 2934 0 14 Dtool_qQJqsT_n 230 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2971  3 out 1 2936  
220 14 Dtool_qQJqPnar 0 4 232 2934 0 14 Dtool_qQJqPnar 229 ////////////////////////////////////////////////////////////////////
//     Function: SimpleLruPage::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2971  3 out 1 2936  12 indent_level 1 2938  
221 14 Dtool_qQJqDeYC 0 6 219 2969 0 14 Dtool_qQJqDeYC 0 1 4 this 3 2973  
222 14 Dtool_qQJqvoUi 0 6 220 2973 0 14 Dtool_qQJqvoUi 0 1 4 this 3 2969  
223 14 Dtool_qQJqAKb_ 0 7 236 2976 1712 14 Dtool_qQJqAKb_ 719 // Filename: simpleAllocator.I
// Created by:  drose (12May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 8 max_size 1 2930  4 lock 1 2974  
224 14 Dtool_qQJqgUYw 0 6 238 2977 0 14 Dtool_qQJqgUYw 451 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::alloc
//       Access: Published
//  Description: Allocates a new block.  Returns NULL if a block of the
//               requested size cannot be allocated.
//
//               To free the allocated block, call block->free(), or
//               simply delete the block pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2976  4 size 1 2930  
225 14 Dtool_qQJqV32t 0 6 239 2935 0 14 Dtool_qQJqV32t 336 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::is_empty
//       Access: Published
//  Description: Returns true if there are no blocks allocated on this
//               page, or false if there is at least one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2978  
226 14 Dtool_qQJqL7lg 0 6 240 2930 0 14 Dtool_qQJqL7lg 275 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_total_size
//       Access: Published
//  Description: Returns the total size of allocated objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2978  
227 14 Dtool_qQJqMk0g 0 6 241 2930 0 14 Dtool_qQJqMk0g 279 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_max_size
//       Access: Published
//  Description: Returns the available space for allocated objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2978  
228 14 Dtool_qQJqvToR 0 4 242 2934 0 14 Dtool_qQJqvToR 417 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::set_max_size
//       Access: Published
//  Description: Changes the available space for allocated objects.
//               This will not affect any already-allocated objects,
//               but will have an effect on future calls to alloc().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2976  8 max_size 1 2930  
229 14 Dtool_qQJq_b_b 0 6 243 2930 0 14 Dtool_qQJq_b_b 595 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_contiguous
//       Access: Published
//  Description: Returns an upper-bound estimate of the size of the
//               largest contiguous block that may be allocated.  It
//               is guaranteed that an attempt to allocate a block
//               larger than this will fail, though it is not
//               guaranteed that an attempt to allocate a block this
//               size or smaller will succeed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2978  
230 14 Dtool_qQJqlSlL 0 6 244 2977 0 14 Dtool_qQJqlSlL 338 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::get_first_block
//       Access: Published
//  Description: Returns a pointer to the first allocated block, or
//               NULL if there are no allocated blocks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2978  
231 14 Dtool_qQJqZUMQ 0 4 245 2934 0 14 Dtool_qQJqZUMQ 223 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2978  3 out 1 2936  
232 14 Dtool_qQJqoxAv 0 4 246 2934 0 14 Dtool_qQJqoxAv 222 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocator::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2978  3 out 1 2936  
233 14 Dtool_qQJqyigB 0 6 234 2969 0 14 Dtool_qQJqyigB 0 1 4 this 3 2976  
234 14 Dtool_qQJqwHGI 0 6 235 2976 0 14 Dtool_qQJqwHGI 0 1 4 this 3 2969  
235 14 Dtool_qQJqrDch 0 4 249 2934 0 14 Dtool_qQJqrDch 255 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::free
//       Access: Published
//  Description: Releases the allocated space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2977  
236 14 Dtool_qQJq_zTh 0 6 250 2976 0 14 Dtool_qQJq_zTh 351 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_allocator
//       Access: Published
//  Description: Returns the SimpleAllocator object that owns this
//               block.  Returns NULL if the block has been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
237 14 Dtool_qQJq5gUU 0 6 251 2930 0 14 Dtool_qQJq5gUU 347 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_start
//       Access: Published
//  Description: Returns the starting point of this block.  It is an
//               error to call this if the block has been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
238 14 Dtool_qQJqkC4A 0 6 252 2930 0 14 Dtool_qQJqkC4A 336 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_size
//       Access: Published
//  Description: Returns the size of this block.  It is an
//               error to call this if the block has been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
239 14 Dtool_qQJq_Bfv 0 6 253 2935 0 14 Dtool_qQJq_Bfv 315 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::is_free
//       Access: Published
//  Description: Returns true if the block has been freed, false if it
//               is still valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
240 14 Dtool_qQJq4hsY 0 6 254 2930 0 14 Dtool_qQJq4hsY 344 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_max_size
//       Access: Published
//  Description: Returns the maximum size this block can be
//               reallocated to, as limited by the following block.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
241 14 Dtool_qQJqbE5E 0 6 255 2935 0 14 Dtool_qQJqbE5E 392 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::realloc
//       Access: Published
//  Description: Changes the size of this block to the specified size.
//               Returns true if the change is accepted, false if
//               there was not enough room.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2977  4 size 1 2930  
242 14 Dtool_qQJqZ89A 0 6 256 2977 0 14 Dtool_qQJqZ89A 359 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::get_next_block
//       Access: Published
//  Description: Returns a pointer to the next allocated block in the
//               chain, or NULL if there are no more allocated blocks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
243 14 Dtool_qQJqWCb3 0 4 257 2934 0 14 Dtool_qQJqWCb3 228 ////////////////////////////////////////////////////////////////////
//     Function: SimpleAllocatorBlock::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  3 out 1 2936  
244 14 Dtool_qQJqnubX 0 6 259 2935 0 14 Dtool_qQJqnubX 858 // Filename: vertexDataSaveFile.I
// Created by:  drose (12May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::is_valid
//       Access: Public
//  Description: Returns true if the save file was successfully
//               created and is ready for use, false if there was an
//               error.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2982  
245 14 Dtool_qQJqy5ur 0 6 260 2930 0 14 Dtool_qQJqy5ur 334 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::get_total_file_size
//       Access: Public
//  Description: Returns the amount of space consumed by the save
//               file, including unused portions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2982  
246 14 Dtool_qQJqyuVv 0 6 261 2930 0 14 Dtool_qQJqyuVv 326 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataSaveFile::get_used_file_size
//       Access: Public
//  Description: Returns the amount of space within the save file that
//               is currently in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2982  
247 14 Dtool_qQJqGjlN 0 6 268 2854 0 14 Dtool_qQJqGjlN 874 // Filename: vertexDataPage.I
// Created by:  drose (04Jun07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_ram_class
//       Access: Published
//  Description: Returns the current ram class of the array.  If this
//               is other than RC_resident, the array data is not
//               resident in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
248 14 Dtool_qQJqlZJd 0 6 269 2854 0 14 Dtool_qQJqlZJd 484 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_pending_ram_class
//       Access: Published
//  Description: Returns the pending ram class of the array.  If this
//               is different from get_ram_class(), this page has been
//               queued to be processed by the thread.  Eventually the
//               page will be set to this ram class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
249 14 Dtool_qQJq0sB_ 0 4 270 2934 0 14 Dtool_qQJq0sB_ 379 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::request_resident
//       Access: Published
//  Description: Ensures that the page will become resident soon.
//               Future calls to get_page_data() will eventually
//               return non-NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2986  
250 14 Dtool_qQJqQei8 0 7 271 2987 1770 14 Dtool_qQJqQei8 450 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::alloc
//       Access: Published
//  Description: Allocates a new block.  Returns NULL if a block of the
//               requested size cannot be allocated.
//
//               To free the allocated block, call block->free(), or
//               simply delete the block pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2986  4 size 1 2930  
251 14 Dtool_qQJq8RXh 0 7 272 2987 1770 14 Dtool_qQJq8RXh 337 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_first_block
//       Access: Published
//  Description: Returns a pointer to the first allocated block, or
//               NULL if there are no allocated blocks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
252 14 Dtool_qQJqsBRf 0 6 273 2988 0 14 Dtool_qQJqsBRf 274 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_book
//       Access: Published
//  Description: Returns a pointer to the book that owns this page.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
253 14 Dtool_qQJqBaNj 0 6 274 2966 0 14 Dtool_qQJqBaNj 377 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_global_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the VertexDataPage's with the indicated
//               RamClass.
//////////////////////////////////////////////////////////////////// 1 6 rclass 1 2854  
254 14 Dtool_qQJqRT83 0 6 275 2966 0 14 Dtool_qQJqRT83 392 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_pending_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the VertexDataPage's that are pending
//               processing by the thread.
//////////////////////////////////////////////////////////////////// 0 
255 14 Dtool_qQJqbvJb 0 6 276 2989 0 14 Dtool_qQJqbvJb 378 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_save_file
//       Access: Published, Static
//  Description: Returns the global VertexDataSaveFile that will be
//               used to save vertex data buffers to disk when
//               necessary.
//////////////////////////////////////////////////////////////////// 0 
256 14 Dtool_qQJqA0f9 0 6 277 2935 0 14 Dtool_qQJqA0f9 467 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::save_to_disk
//       Access: Published
//  Description: Writes the page to disk, but does not evict it from
//               memory or affect its LRU status.  If it gets evicted
//               later without having been modified, it will not need
//               to write itself to disk again.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2986  
257 14 Dtool_qQJq4TuW 0 6 278 2938 0 14 Dtool_qQJq4TuW 589 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_threads
//       Access: Published, Static
//  Description: Returns the number of threads that have been spawned
//               to service vertex paging requests, or 0 if no threads
//               have been spawned (which may mean either that all
//               paging requests will be handled by the main thread,
//               or simply that no paging requests have yet been
//               issued).
//////////////////////////////////////////////////////////////////// 0 
258 14 Dtool_qQJqQnzR 0 6 279 2938 0 14 Dtool_qQJqQnzR 342 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_pending_reads
//       Access: Published, Static
//  Description: Returns the number of read requests that are waiting
//               to be serviced by a thread.
//////////////////////////////////////////////////////////////////// 0 
259 14 Dtool_qQJqYKfR 0 6 280 2938 0 14 Dtool_qQJqYKfR 344 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::get_num_pending_writes
//       Access: Published, Static
//  Description: Returns the number of write requests that are waiting
//               to be serviced by a thread.
//////////////////////////////////////////////////////////////////// 0 
260 14 Dtool_qQJqw48g 0 4 281 2934 0 14 Dtool_qQJqw48g 397 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::stop_threads
//       Access: Published, Static
//  Description: Call this to stop the paging threads, if they were
//               started.  This may block until all of the pending
//               tasks have been completed.
//////////////////////////////////////////////////////////////////// 0 
261 14 Dtool_qQJqltyp 0 4 282 2934 0 14 Dtool_qQJqltyp 323 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::flush_threads
//       Access: Published, Static
//  Description: Waits for all of the pending thread tasks to finish
//               before returning.
//////////////////////////////////////////////////////////////////// 0 
262 14 Dtool_qQJqv4iR 0 4 283 2934 0 14 Dtool_qQJqv4iR 231 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2984  3 out 1 2936  
263 14 Dtool_qQJqRjs_ 0 4 284 2934 0 14 Dtool_qQJqRjs_ 230 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataPage::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2984  3 out 1 2936  12 indent_level 1 2938  
264 14 Dtool_qQJqLmIp 0 7 285 2950 0 14 Dtool_qQJqLmIp 0 0 
265 14 Dtool_qQJq_hfI 0 6 263 2976 0 14 Dtool_qQJq_hfI 0 1 4 this 3 2986  
266 14 Dtool_qQJqIIRM 0 6 264 2986 0 14 Dtool_qQJqIIRM 0 1 4 this 3 2976  
267 14 Dtool_qQJq0Sgy 0 6 265 2973 0 14 Dtool_qQJq0Sgy 0 1 4 this 3 2986  
268 14 Dtool_qQJq1BoZ 0 6 266 2986 0 14 Dtool_qQJq1BoZ 0 1 4 this 3 2973  
269 14 Dtool_qQJqGCC5 0 7 287 2988 1758 14 Dtool_qQJqGCC5 227 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 block_size 1 2930  
270 14 Dtool_qQJqVohj 0 7 289 2987 1770 14 Dtool_qQJqVohj 795 // Filename: vertexDataBook.I
// Created by:  drose (16May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::alloc
//       Access: Published
//  Description: Allocates and returns a new VertexDataBuffer of the
//               requested size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2988  4 size 1 2930  
271 14 Dtool_qQJqD1E5 0 6 290 2938 0 14 Dtool_qQJqD1E5 278 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::get_num_pages
//       Access: Published
//  Description: Returns the number of pages created for the book.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
272 14 Dtool_qQJq_dT3 0 6 291 2930 0 14 Dtool_qQJq_dT3 328 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_total_page_size
//       Access: Published
//  Description: Returns the total size of all bytes owned by all
//               pages owned by this book.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
273 14 Dtool_qQJqU33Z 0 6 291 2930 0 14 Dtool_qQJqU33Z 379 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_total_page_size
//       Access: Published
//  Description: Returns the total size of all bytes owned by all
//               pages owned by this book that have the indicated ram
//               class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2990  9 ram_class 1 2854  
274 14 Dtool_qQJqCckZ 0 6 292 2930 0 14 Dtool_qQJqCckZ 331 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_allocated_size
//       Access: Published
//  Description: Returns the total size of all bytes allocated within
//               pages owned by this book.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
275 14 Dtool_qQJqa3kc 0 6 292 2930 0 14 Dtool_qQJqa3kc 382 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::count_allocated_size
//       Access: Published
//  Description: Returns the total size of all bytes allocated within
//               pages owned by this book that have the indicated ram
//               class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2990  9 ram_class 1 2854  
276 14 Dtool_qQJqHGdk 0 4 293 2934 0 14 Dtool_qQJqHGdk 486 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBook::save_to_disk
//       Access: Published
//  Description: Writes all pages to disk immediately, just in case
//               they get evicted later.  It makes sense to make this
//               call just before taking down a loading screen, to
//               minimize chugs from saving pages inadvertently later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2988  
277 14 Dtool_qQJqMpZV 0 6 300 2986 0 14 Dtool_qQJqMpZV 296 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBlock::get_page
//       Access: Published
//  Description: Returns the page from which this buffer was
//               allocated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
278 14 Dtool_qQJqeWNA 0 7 301 2987 1770 14 Dtool_qQJqeWNA 354 ////////////////////////////////////////////////////////////////////
//     Function: VertexDataBlock::get_next_block
//       Access: Published
//  Description: Returns a pointer to the next allocated block in the
//               chain, or NULL if there are no more allocated blocks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
279 14 Dtool_qQJqDYtB 0 6 295 2977 0 14 Dtool_qQJqDYtB 0 1 4 this 3 2987  
280 14 Dtool_qQJqs_mf 0 7 296 2987 1770 14 Dtool_qQJqs_mf 0 1 4 this 3 2977  
281 14 Dtool_qQJqGSOQ 0 7 298 2994 0 14 Dtool_qQJqGSOQ 0 1 4 this 3 2987  
282 14 Dtool_qQJq_JZ_ 0 7 299 2987 1770 14 Dtool_qQJq_JZ_ 0 1 4 this 3 2994  
283 14 Dtool_qQJqVjYG 0 7 312 2995 1779 14 Dtool_qQJqVjYG 237 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2957  
284 14 Dtool_qQJqL33s 0 7 312 2995 1779 14 Dtool_qQJqL33s 232 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 12 array_format 1 2955  10 usage_hint 1 2834  
285 14 Dtool_qQJqo2Ms 0 7 313 2995 1779 14 Dtool_qQJqo2Ms 490 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexArrayData
//               that is actively being used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  4 copy 1 2957  
286 14 Dtool_qQJqBzaq 0 4 315 2934 0 14 Dtool_qQJqBzaq 0 2 4 this 3 2995  4 size 1 2930  
287 14 Dtool_qQJqaxwn 0 6 318 2938 0 14 Dtool_qQJqaxwn 330 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::compare_to
//       Access: Published
//  Description: Returns 0 if the two arrays are equivalent, even if
//               they are not the same pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  5 other 1 2957  
288 14 Dtool_qQJq3CJD 0 7 319 2955 0 14 Dtool_qQJq3CJD 784 // Filename: geomVertexArrayData.I
// Created by:  drose (17Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_array_format
//       Access: Published
//  Description: Returns the format object that describes this array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
289 14 Dtool_qQJqxPce 0 6 320 2834 0 14 Dtool_qQJqxPce 409 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that describes to the
//               rendering backend how often the vertex data will be
//               modified and/or rendered.  See geomEnums.h.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
290 14 Dtool_qQJqvFNt 0 4 321 2934 0 14 Dtool_qQJqvFNt 514 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this array.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  10 usage_hint 1 2834  
291 14 Dtool_qQJqW_sd 0 6 322 2935 0 14 Dtool_qQJqW_sd 404 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  4 name 1 2947  
292 14 Dtool_qQJqC4RN 0 6 323 2938 0 14 Dtool_qQJqC4RN 454 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored in the array,
//               based on the number of bytes and the stride.  This
//               should be the same for all arrays within a given
//               GeomVertexData object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
293 14 Dtool_qQJqTaOY 0 6 324 2935 0 14 Dtool_qQJqTaOY 1075 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows.
//
//               Normally, you would not call this directly, since all
//               of the arrays in a particular GeomVertexData must
//               have the same number of rows; instead, call
//               GeomVertexData::set_num_rows().
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               The new vertex data is initialized to 0, including
//               the "color" column (but see
//               GeomVertexData::set_num_rows()).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  1 n 1 2938  
294 14 Dtool_qQJqwI3w 0 6 325 2935 0 14 Dtool_qQJqwI3w 757 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::unclean_set_num_rows
//       Access: Published
//  Description: This method behaves like set_num_rows(), except the
//               new data is not initialized.  Furthermore, after this
//               call, *any* of the data in the GeomVertexArrayData
//               may be uninitialized, including the earlier rows.
//
//               Normally, you would not call this directly, since all
//               of the arrays in a particular GeomVertexData must
//               have the same number of rows; instead, call
//               GeomVertexData::unclean_set_num_rows().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  1 n 1 2938  
295 14 Dtool_qQJqAyse 0 6 326 2935 0 14 Dtool_qQJqAyse 611 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for n rows is
//               allocated, so that you may increase the number of
//               rows to n without causing a new memory allocation.
//               This is a performance optimization only; it is
//               especially useful when you know ahead of time that
//               you will be adding n rows to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  1 n 1 2938  
296 14 Dtool_qQJqWjyr 0 4 327 2934 0 14 Dtool_qQJqWjyr 329 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::clear_rows
//       Access: Published
//  Description: Removes all of the rows in the array.
//               Functionally equivalent to set_num_rows(0).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2995  
297 14 Dtool_qQJqfqwK 0 6 328 2938 0 14 Dtool_qQJqfqwK 288 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
298 14 Dtool_qQJqTXp2 0 7 329 2997 0 14 Dtool_qQJqTXp2 377 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the array vertex data is
//               modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
299 14 Dtool_qQJq5jFI 0 4 330 2934 0 14 Dtool_qQJq5jFI 227 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  3 out 1 2936  
300 14 Dtool_qQJq4Lek 0 4 331 2934 0 14 Dtool_qQJq4Lek 226 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2957  3 out 1 2936  12 indent_level 1 2938  
301 14 Dtool_qQJq5_AK 0 4 331 2934 0 14 Dtool_qQJq5_AK 226 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  3 out 1 2936  
302 14 Dtool_qQJq_mAM 0 6 332 2935 0 14 Dtool_qQJq_mAM 566 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns true, the next call to
//               get_handle()->get_read_pointer() will probably not
//               block.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
303 14 Dtool_qQJqWh8V 0 7 333 3001 0 14 Dtool_qQJqWh8V 529 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_handle
//       Access: Published
//  Description: Returns an object that can be used to read the actual
//               data bytes stored in the array.  Calling this method
//               locks the data, and will block any other threads
//               attempting to read or write the data, until the
//               returned object destructs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  14 current_thread 1 2999  
304 14 Dtool_qQJq7UXr 0 7 333 3001 0 14 Dtool_qQJq7UXr 529 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_handle
//       Access: Published
//  Description: Returns an object that can be used to read the actual
//               data bytes stored in the array.  Calling this method
//               locks the data, and will block any other threads
//               attempting to read or write the data, until the
//               returned object destructs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2957  
305 14 Dtool_qQJqY1wV 0 7 334 3002 1814 14 Dtool_qQJqY1wV 541 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::modify_handle
//       Access: Published
//  Description: Returns an object that can be used to read or write
//               the actual data bytes stored in the array.  Calling
//               this method locks the data, and will block any other
//               threads attempting to read or write the data, until
//               the returned object destructs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  14 current_thread 1 2999  
306 14 Dtool_qQJqIcmt 0 7 334 3002 1814 14 Dtool_qQJqIcmt 541 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::modify_handle
//       Access: Published
//  Description: Returns an object that can be used to read or write
//               the actual data bytes stored in the array.  Calling
//               this method locks the data, and will block any other
//               threads attempting to read or write the data, until
//               the returned object destructs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2995  
307 14 Dtool_qQJqKLkX 0 4 335 2934 0 14 Dtool_qQJqKLkX 648 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::prepare
//       Access: Public
//  Description: Indicates that the data should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               data is already loaded into the GSG if it is expected
//               to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               datas from a user interface standpoint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  16 prepared_objects 1 3003  
308 14 Dtool_qQJq_PUd 0 6 336 2935 0 14 Dtool_qQJq_PUd 383 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::is_prepared
//       Access: Published
//  Description: Returns true if the data has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  16 prepared_objects 1 3003  
309 14 Dtool_qQJqJDsu 0 6 337 3006 0 14 Dtool_qQJqJDsu 894 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::prepare_now
//       Access: Public
//  Description: Creates a context for the data on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) VertexBufferContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a data does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2995  16 prepared_objects 1 3003  3 gsg 1 3004  
310 14 Dtool_qQJqKEuC 0 6 338 2935 0 14 Dtool_qQJqKEuC 400 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::release
//       Access: Public
//  Description: Frees the data context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2995  16 prepared_objects 1 3003  
311 14 Dtool_qQJq_7uC 0 6 339 2938 0 14 Dtool_qQJq_7uC 398 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::release_all
//       Access: Public
//  Description: Frees the context allocated on all objects for which
//               the data has been declared.  Returns the number of
//               contexts which have been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2995  
312 14 Dtool_qQJqqXbF 0 6 340 2966 0 14 Dtool_qQJqqXbF 399 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_independent_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the GeomVertexArrayData's that have not (yet)
//               been paged out.
//////////////////////////////////////////////////////////////////// 0 
313 14 Dtool_qQJqEw5_ 0 6 341 2966 0 14 Dtool_qQJqEw5_ 400 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_small_lru
//       Access: Published, Static
//  Description: Returns a pointer to the global LRU object that
//               manages the GeomVertexArrayData's that are deemed too
//               small to be paged out.
//////////////////////////////////////////////////////////////////// 0 
314 14 Dtool_qQJqsD26 0 4 342 2934 0 14 Dtool_qQJqsD26 382 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::lru_epoch
//       Access: Published, Static
//  Description: Marks that an epoch has passed in each LRU.  Asks the
//               LRU's to consider whether they should perform
//               evictions.
//////////////////////////////////////////////////////////////////// 0 
315 14 Dtool_qQJqFQim 0 6 343 2988 0 14 Dtool_qQJqFQim 338 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_book
//       Access: Published, Static
//  Description: Returns the global VertexDataBook that will be
//               used to allocate vertex data buffers.
//////////////////////////////////////////////////////////////////// 0 
316 14 Dtool_qQJqNsR3 0 7 344 2950 0 14 Dtool_qQJqNsR3 0 0 
317 14 Dtool_qQJqurBl 0 7 306 3007 0 14 Dtool_qQJqurBl 0 1 4 this 3 2995  
318 14 Dtool_qQJqHqaf 0 7 307 2995 1779 14 Dtool_qQJqHqaf 0 1 4 this 3 3007  
319 14 Dtool_qQJqi7GK 0 6 308 2973 0 14 Dtool_qQJqi7GK 0 1 4 this 3 2995  
320 14 Dtool_qQJqR3m1 0 7 309 2995 1779 14 Dtool_qQJqR3m1 0 1 4 this 3 2973  
321 14 Dtool_qQJqSXKf 0 6 310 2960 0 14 Dtool_qQJqSXKf 0 1 4 this 3 2995  
322 14 Dtool_qQJqIzps 0 7 311 2995 1779 14 Dtool_qQJqIzps 0 1 4 this 3 2960  
323 14 Dtool_qQJquaEm 0 7 351 2995 1779 14 Dtool_qQJquaEm 236 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_object
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3002  
324 14 Dtool_qQJqaPDR 0 7 351 2957 0 14 Dtool_qQJqaPDR 236 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_object
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
325 14 Dtool_qQJqksp0 0 7 352 2955 0 14 Dtool_qQJqksp0 243 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_array_format
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
326 14 Dtool_qQJqtdrI 0 6 353 2834 0 14 Dtool_qQJqtdrI 241 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_usage_hint
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
327 14 Dtool_qQJqi9M9 0 6 354 2938 0 14 Dtool_qQJqi9M9 239 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_num_rows
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
328 14 Dtool_qQJq_DY4 0 6 355 2935 0 14 Dtool_qQJq_DY4 236 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_num_rows
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3002  1 n 1 2938  
329 14 Dtool_qQJqJbnk 0 6 356 2935 0 14 Dtool_qQJqJbnk 244 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::unclean_set_num_rows
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3002  1 n 1 2938  
330 14 Dtool_qQJqAN5W 0 6 357 2935 0 14 Dtool_qQJqAN5W 240 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::reserve_num_rows
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3002  1 n 1 2938  
331 14 Dtool_qQJqRt2b 0 4 358 2934 0 14 Dtool_qQJqRt2b 237 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::clear_rows
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3002  
332 14 Dtool_qQJqs9ud 0 6 359 2938 0 14 Dtool_qQJqs9ud 246 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_data_size_bytes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
333 14 Dtool_qQJqlsYT 0 7 360 2997 0 14 Dtool_qQJqlsYT 239 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_modified
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
334 14 Dtool_qQJqjdit 0 6 361 2935 0 14 Dtool_qQJqjdit 566 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns true, the next call to
//               get_handle()->get_read_pointer() will probably not
//               block.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
335 14 Dtool_qQJq1fE3 0 4 362 2934 0 14 Dtool_qQJq1fE3 289 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::copy_data_from
//       Access: Public
//  Description: Copies the entire data array from the other object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3002  5 other 1 3001  
336 14 Dtool_qQJqgUq0 0 4 363 2934 0 14 Dtool_qQJqgUq0 476 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::copy_subdata_from
//       Access: Public
//  Description: Copies a portion of the data array from the other
//               object into a portion of the data array of this
//               object.  If to_size != from_size, the size of this
//               data array is adjusted accordingly.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3002  8 to_start 1 2930  7 to_size 1 2930  5 other 1 3001  10 from_start 1 2930  9 from_size 1 2930  
337 14 Dtool_qQJqYqmb 0 6 364 2929 0 14 Dtool_qQJqYqmb 445 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_data
//       Access: Published
//  Description: Returns the entire raw data of the
//               GeomVertexArrayData object, formatted as a string.
//               This is primarily for the benefit of high-level
//               languages such as Python.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
338 14 Dtool_qQJqazuk 0 4 365 2934 0 14 Dtool_qQJqazuk 415 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_data
//       Access: Public
//  Description: Replaces the entire raw data array with the contents
//               of the indicated string.  This is primarily for the
//               benefit of high-level languages like Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3002  4 data 1 2929  
339 14 Dtool_qQJqEi7l 0 6 366 2929 0 14 Dtool_qQJqEi7l 453 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::get_subdata
//       Access: Published
//  Description: Returns a subset of the raw data of the
//               GeomVertexArrayData object, formatted as a string.
//               This is primarily for the benefit of high-level
//               languages such as Python.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3001  5 start 1 2930  4 size 1 2930  
340 14 Dtool_qQJqaKat 0 4 367 2934 0 14 Dtool_qQJqaKat 518 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::set_subdata
//       Access: Public
//  Description: Replaces a portion of the data array from the
//               indicated string.  If size != data.size(), the size
//               of this data array is adjusted accordingly.
//
//               This is primarily for the benefit of high-level
//               languages like Python.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3002  5 start 1 2930  4 size 1 2930  4 data 1 2929  
341 14 Dtool_qQJqyhDL 0 4 368 2934 0 14 Dtool_qQJqyhDL 271 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayDataHandle::mark_used
//       Access: Published
//  Description: Marks the array data recently-used.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
342 14 Dtool_qQJqVIB7 0 7 369 2950 0 14 Dtool_qQJqVIB7 0 0 
343 14 Dtool_qQJqThJE 0 7 346 2994 0 14 Dtool_qQJqThJE 0 1 4 this 3 3002  
344 14 Dtool_qQJqYaNv 0 7 347 3002 1814 14 Dtool_qQJqYaNv 0 1 4 this 3 2994  
345 14 Dtool_qQJq4wn1 0 6 348 2960 0 14 Dtool_qQJq4wn1 0 1 4 this 3 3002  
346 14 Dtool_qQJqL1Nu 0 7 349 3002 1814 14 Dtool_qQJqL1Nu 0 1 4 this 3 2960  
347 14 Dtool_qQJqMcfF 0 4 371 2934 0 14 Dtool_qQJqMcfF 1310 // Filename: geomCacheManager.I
// Created by:  drose (11Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::set_max_size
//       Access: Published
//  Description: Specifies the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  This limit is flexible, and may be
//               temporarily exceeded if many different Geoms are
//               pre-processed during the space of a single frame.
//
//               This is not a limit on the actual vertex data, which
//               is what it is; it is also not a limit on the amount
//               of memory used by the video driver or the system
//               graphics interface, which Panda has no control over.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3008  8 max_size 1 2938  
348 14 Dtool_qQJq6AF8 0 6 372 2938 0 14 Dtool_qQJq6AF8 390 ////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_max_size
//       Access: Published
//  Description: Returns the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  See set_max_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
349 14 Dtool_qQJqgQI0 0 6 373 2938 0 14 Dtool_qQJqgQI0 285 ////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_total_size
//       Access: Published
//  Description: Returns the number of entries currently in the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
350 14 Dtool_qQJq6vsj 0 4 374 2934 0 14 Dtool_qQJq6vsj 269 ////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::flush
//       Access: Published
//  Description: Immediately empties all elements in the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3010  
351 14 Dtool_qQJqqysg 0 6 375 3010 0 14 Dtool_qQJqqysg 281 ////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the global cache manager pointer.
//////////////////////////////////////////////////////////////////// 0 
352 14 Dtool_qQJqp1ZT 0 4 377 2934 0 14 Dtool_qQJqp1ZT 0 2 4 this 3 3011  6 matrix 1 3013  
353 14 Dtool_qQJqrQqo 0 4 378 2934 0 14 Dtool_qQJqrQqo 579 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::mult_matrix
//       Access: Published, Virtual
//  Description: Premultiplies this transform's matrix with the
//               indicated previous matrix, so that the result is the
//               net composition of the given transform with this
//               transform.  The result is stored in the parameter
//               "result", which should not be the same matrix as
//               previous.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3011  6 result 1 3013  8 previous 1 3015  
354 14 Dtool_qQJqJ_5x 0 4 379 2934 0 14 Dtool_qQJqJ_5x 477 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::accumulate_matrix
//       Access: Published, Virtual
//  Description: Adds the value of this transform's matrix, modified
//               by the indicated weight, into the indicated
//               accumulation matrix.  This is used to compute the
//               result of several blended transforms.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3011  5 accum 1 3013  6 weight 1 2939  
355 14 Dtool_qQJqzf8x 0 7 380 2997 0 14 Dtool_qQJqzf8x 871 // Filename: vertexTransform.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_matrix() changes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3011  14 current_thread 1 2999  
356 14 Dtool_qQJqXeSn 0 4 381 2934 0 14 Dtool_qQJqXeSn 232 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3011  3 out 1 2936  
357 14 Dtool_qQJqeY1t 0 4 382 2934 0 14 Dtool_qQJqeY1t 231 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3011  3 out 1 2936  12 indent_level 1 2938  
358 14 Dtool_qQJqdZCF 0 7 383 2997 0 14 Dtool_qQJqdZCF 765 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_next_modified
//       Access: Public, Static
//  Description: Returns a monotonically increasing sequence.  Each
//               time this is called, a new sequence number is
//               returned, higher than the previous value.
//
//               This is used to ensure that all
//               VertexTransform::get_modified() calls return an
//               increasing number in the same space, so that
//               TransformBlend::get_modified() is easy to determine.
//               It is similar to Geom::get_modified(), but it is in a
//               different space.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 2999  
359 14 Dtool_qQJqLuIx 0 7 384 2997 0 14 Dtool_qQJqLuIx 474 ////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_global_modified
//       Access: Published, Static
//  Description: Returns the currently highest
//               VertexTransform::get_modified() value in the world.
//               This can be used as a quick way to determine if any
//               VertexTransforms have changed value recently.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 2999  
360 14 Dtool_qQJqRa2Z 0 7 385 2950 0 14 Dtool_qQJqRa2Z 0 0 
361 14 Dtool_qQJq9dPL 0 7 387 3017 0 14 Dtool_qQJq9dPL 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
362 14 Dtool_qQJqTts5 0 7 387 3017 0 14 Dtool_qQJqTts5 232 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3018  
363 14 Dtool_qQJqUxgN 0 7 388 3017 0 14 Dtool_qQJqUxgN 240 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3017  4 copy 1 3018  
364 14 Dtool_qQJqmQpE 0 6 389 2935 0 14 Dtool_qQJqmQpE 997 // Filename: transformTable.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of transforms in
//               a TransformTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3018  
365 14 Dtool_qQJq8IXz 0 7 390 3018 0 14 Dtool_qQJq8IXz 927 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::register_table
//       Access: Published, Static
//  Description: Registers a TransformTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a TransformTable may no longer be
//               modified (although the individual VertexTransform
//               objects may modify their reported transforms).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
//////////////////////////////////////////////////////////////////// 1 5 table 1 3018  
366 14 Dtool_qQJq5H42 0 6 391 2938 0 14 Dtool_qQJq5H42 280 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3018  
367 14 Dtool_qQJqgSIY 0 7 392 3011 0 14 Dtool_qQJqgSIY 268 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_transform
//       Access: Published
//  Description: Returns the nth transform in the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  1 n 1 2938  
368 14 Dtool_qQJqaOQ4 0 7 393 2997 0 14 Dtool_qQJqaOQ4 569 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexTransforms in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexTransform
//               changes.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  14 current_thread 1 2999  
369 14 Dtool_qQJq9zOW 0 4 394 2934 0 14 Dtool_qQJq9zOW 310 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::set_transform
//       Access: Published
//  Description: Replaces the nth transform.  Only valid for
//               unregistered tables.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3017  1 n 1 2938  9 transform 1 3011  
370 14 Dtool_qQJqWMbq 0 4 395 2934 0 14 Dtool_qQJqWMbq 312 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::remove_transform
//       Access: Published
//  Description: Removes the nth transform.  Only valid for
//               unregistered tables.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3017  1 n 1 2938  
371 14 Dtool_qQJqu_JV 0 6 396 2938 0 14 Dtool_qQJqu_JV 562 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::add_transform
//       Access: Published
//  Description: Adds a new transform to the table and returns the
//               index number of the new transform.  Only valid for
//               unregistered tables.
//
//               This does not automatically uniquify the pointer; if
//               the transform is already present in the table, it
//               will be added twice.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3017  9 transform 1 3011  
372 14 Dtool_qQJq6U5C 0 4 397 2934 0 14 Dtool_qQJq6U5C 221 ////////////////////////////////////////////////////////////////////
//     Function: TransformTable::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  3 out 1 2936  
373 14 Dtool_qQJqdFiZ 0 7 398 2950 0 14 Dtool_qQJqdFiZ 0 0 
374 14 Dtool_qQJqe0eS 0 7 400 3020 1862 14 Dtool_qQJqe0eS 717 // Filename: transformBlend.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
375 14 Dtool_qQJqRqL0 0 7 400 3020 1862 14 Dtool_qQJqRqL0 232 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3021  
376 14 Dtool_qQJqE4vc 0 7 400 3020 1862 14 Dtool_qQJqE4vc 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 10 transform0 1 3011  7 weight0 1 2939  
377 14 Dtool_qQJq5cWw 0 7 400 3020 1862 14 Dtool_qQJq5cWw 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 10 transform0 1 3011  7 weight0 1 2939  10 transform1 1 3011  7 weight1 1 2939  
378 14 Dtool_qQJqmVV1 0 7 400 3020 1862 14 Dtool_qQJqmVV1 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 10 transform0 1 3011  7 weight0 1 2939  10 transform1 1 3011  7 weight1 1 2939  10 transform2 1 3011  7 weight2 1 2939  
379 14 Dtool_qQJqkvBo 0 7 400 3020 1862 14 Dtool_qQJqkvBo 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 10 transform0 1 3011  7 weight0 1 2939  10 transform1 1 3011  7 weight1 1 2939  10 transform2 1 3011  7 weight2 1 2939  10 transform3 1 3011  7 weight3 1 2939  
380 14 Dtool_qQJqKjWy 0 6 401 3020 0 14 Dtool_qQJqKjWy 240 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3020  4 copy 1 3021  
381 14 Dtool_qQJqoz5o 0 6 403 2938 0 14 Dtool_qQJqoz5o 300 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::compare_to
//       Access: Published
//  Description: Defines an arbitrary ordering for TransformBlend
//               objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  5 other 1 3021  
382 14 Dtool_qQJq_D64 0 6 404 2935 0 14 Dtool_qQJq_D64 226 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator <
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  5 other 1 3021  
383 14 Dtool_qQJqZE3n 0 6 405 2935 0 14 Dtool_qQJqZE3n 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator ==
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  5 other 1 3021  
384 14 Dtool_qQJqZmxW 0 6 406 2935 0 14 Dtool_qQJqZmxW 227 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator !=
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  5 other 1 3021  
385 14 Dtool_qQJquVAn 0 4 407 2934 0 14 Dtool_qQJquVAn 344 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::add_transform
//       Access: Published
//  Description: Adds a new transform to the blend.  If the transform
//               already existed, increases its weight factor.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3020  9 transform 1 3011  6 weight 1 2939  
386 14 Dtool_qQJq9e42 0 4 408 2934 0 14 Dtool_qQJq9e42 279 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::remove_transform
//       Access: Published
//  Description: Removes the indicated transform from the blend.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3020  9 transform 1 3011  
387 14 Dtool_qQJqfmAH 0 4 409 2934 0 14 Dtool_qQJqfmAH 458 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::limit_transforms
//       Access: Published
//  Description: If the total number of transforms in the blend
//               exceeds max_transforms, removes the n least-important
//               transforms as needed to reduce the number of
//               transforms to max_transforms.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3020  14 max_transforms 1 2938  
388 14 Dtool_qQJqKUUu 0 4 410 2934 0 14 Dtool_qQJqKUUu 456 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::normalize_weights
//       Access: Published
//  Description: Rescales all of the weights on the various transforms
//               so that they sum to 1.0.  It is generally a good idea
//               to call this after adding or removing transforms from
//               the blend.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3020  
389 14 Dtool_qQJq5JYU 0 6 411 2935 0 14 Dtool_qQJq5JYU 317 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::has_transform
//       Access: Published
//  Description: Returns true if the blend has the indicated
//               transform, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  9 transform 1 3011  
390 14 Dtool_qQJqlw9I 0 6 412 2939 0 14 Dtool_qQJqlw9I 364 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the indicated
//               transform, or 0 if there is no entry for the
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  9 transform 1 3011  
391 14 Dtool_qQJqgwvf 0 6 412 2939 0 14 Dtool_qQJqgwvf 323 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the nth transform
//               stored in the blend object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2938  
392 14 Dtool_qQJqdJun 0 6 413 2938 0 14 Dtool_qQJqdJun 311 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms stored in the blend
//               object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3021  
393 14 Dtool_qQJqcj_I 0 7 414 3011 0 14 Dtool_qQJqcj_I 299 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_transform
//       Access: Published
//  Description: Returns the nth transform stored in the blend
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2938  
394 14 Dtool_qQJqZdFH 0 4 415 2934 0 14 Dtool_qQJqZdFH 300 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_transform
//       Access: Published
//  Description: Replaces the nth transform stored in the blend
//               object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3020  1 n 1 2938  9 transform 1 3011  
395 14 Dtool_qQJqfU3_ 0 4 416 2934 0 14 Dtool_qQJqfU3_ 324 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_weight
//       Access: Published
//  Description: Replaces the weight associated with the nth transform
//               stored in the blend object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3020  1 n 1 2938  6 weight 1 2939  
396 14 Dtool_qQJqbanF 0 4 417 2934 0 14 Dtool_qQJqbanF 405 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::update_blend
//       Access: Published
//  Description: Recomputes the internal representation of the blend
//               value, if necessary.  You should call this before
//               calling get_blend() or transform_point().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  14 current_thread 1 2999  
397 14 Dtool_qQJq3RLn 0 4 418 2934 0 14 Dtool_qQJq3RLn 522 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_blend
//       Access: Published
//  Description: Returns the current value of the blend, based on the
//               current value of all of the nested transform objects
//               and their associated weights.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  6 result 1 3013  14 current_thread 1 2999  
398 14 Dtool_qQJq3v55 0 4 419 2934 0 14 Dtool_qQJq3v55 419 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point (double)
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3023  14 current_thread 1 2999  
399 14 Dtool_qQJqHON6 0 4 419 2934 0 14 Dtool_qQJqHON6 410 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3025  14 current_thread 1 2999  
400 14 Dtool_qQJqFz5p 0 4 419 2934 0 14 Dtool_qQJqFz5p 419 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point (double)
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3027  14 current_thread 1 2999  
401 14 Dtool_qQJqVVNq 0 4 419 2934 0 14 Dtool_qQJqVVNq 410 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3029  14 current_thread 1 2999  
402 14 Dtool_qQJquO9h 0 4 420 2934 0 14 Dtool_qQJquO9h 421 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_vector (double)
//       Access: Published
//  Description: Transforms the indicated vector by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3031  14 current_thread 1 2999  
403 14 Dtool_qQJqrOZa 0 4 420 2934 0 14 Dtool_qQJqrOZa 412 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_vector
//       Access: Published
//  Description: Transforms the indicated vector by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  5 point 1 3033  14 current_thread 1 2999  
404 14 Dtool_qQJq6lHp 0 7 421 2997 0 14 Dtool_qQJq6lHp 351 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least as often as the result of get_blend() changes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  14 current_thread 1 2999  
405 14 Dtool_qQJqaozy 0 4 422 2934 0 14 Dtool_qQJqaozy 222 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  3 out 1 2936  
406 14 Dtool_qQJqfQ_g 0 4 423 2934 0 14 Dtool_qQJqfQ_g 221 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3021  3 out 1 2936  12 indent_level 1 2938  
407 14 Dtool_qQJq5_ZK 0 7 424 2950 0 14 Dtool_qQJq5_ZK 0 0 
408 14 Dtool_qQJqeE_A 0 7 426 3035 0 14 Dtool_qQJqeE_A 232 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
409 14 Dtool_qQJq_bjS 0 7 426 3035 0 14 Dtool_qQJq_bjS 237 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3036  
410 14 Dtool_qQJq3Q0k 0 7 427 3035 0 14 Dtool_qQJq3Q0k 245 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  4 copy 1 3036  
411 14 Dtool_qQJq0EyH 0 6 428 2938 0 14 Dtool_qQJq0EyH 817 // Filename: transformBlendTable.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_blends
//       Access: Published
//  Description: Returns the total number of different blend
//               combinations in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3036  
412 14 Dtool_qQJq5_i5 0 6 429 3021 0 14 Dtool_qQJq5_i5 265 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_blend
//       Access: Published
//  Description: Returns the nth blend in the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3036  1 n 1 2938  
413 14 Dtool_qQJqJ4l9 0 7 430 2997 0 14 Dtool_qQJqJ4l9 382 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least when any TransformBlends within the table
//               have changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3036  14 current_thread 1 2999  
414 14 Dtool_qQJq8ENT 0 4 431 2934 0 14 Dtool_qQJq8ENT 311 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::set_blend
//       Access: Published
//  Description: Replaces the blend at the nth position with the
//               indicated value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3035  1 n 1 2938  5 blend 1 3021  
415 14 Dtool_qQJqx_oD 0 4 432 2934 0 14 Dtool_qQJqx_oD 271 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::remove_blend
//       Access: Published
//  Description: Removes the blend at the nth position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  1 n 1 2938  
416 14 Dtool_qQJq3OCx 0 6 433 2938 0 14 Dtool_qQJq3OCx 414 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::add_blend
//       Access: Published
//  Description: Adds a new blend to the table, and returns its
//               index number.  If there is already an identical blend
//               in the table, simply returns that number instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  5 blend 1 3021  
417 14 Dtool_qQJq3o16 0 6 434 2938 0 14 Dtool_qQJq3o16 603 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of unique VertexTransform objects
//               represented in the table.  This will correspond to
//               the size of the TransformTable object that would
//               represent the same table.  This is also the same
//               limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transform_indices().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3036  
418 14 Dtool_qQJqjqiw 0 6 435 2938 0 14 Dtool_qQJqjqiw 503 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_max_simultaneous_transforms
//       Access: Published
//  Description: Returns the maximum number of unique VertexTransform
//               objects that are applied to any one vertex
//               simultaneously.  This is the same limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transforms().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3036  
419 14 Dtool_qQJqiJI_ 0 4 436 2934 0 14 Dtool_qQJqiJI_ 383 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::set_rows
//       Access: Published
//  Description: Specifies the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  4 rows 1 3038  
420 14 Dtool_qQJqGxKd 0 6 437 3038 0 14 Dtool_qQJqGxKd 381 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_rows
//       Access: Published
//  Description: Returns the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3036  
421 14 Dtool_qQJqQ3il 0 6 438 3041 0 14 Dtool_qQJqQ3il 458 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::modify_rows
//       Access: Published
//  Description: Returns a modifiable reference to the SparseArray
//               that specifies the subset of rows (vertices) in the
//               associated GeomVertexData that this
//               TransformBlendTable actually affects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
422 14 Dtool_qQJqDcUt 0 4 439 2934 0 14 Dtool_qQJqDcUt 226 ////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3036  3 out 1 2936  12 indent_level 1 2938  
423 14 Dtool_qQJqplHA 0 7 440 2950 0 14 Dtool_qQJqplHA 0 0 
424 14 Dtool_qQJqcSPk 0 7 442 2947 0 14 Dtool_qQJqcSPk 945 // Filename: vertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_name
//       Access: Published
//  Description: Returns the name of this particular slider.  Every
//               unique blend shape within a particular Geom must be
//               identified with a different name, which is shared by
//               the slider that controls it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3042  
425 14 Dtool_qQJq7HBY 0 6 443 2939 0 14 Dtool_qQJq7HBY 0 1 4 this 3 3042  
426 14 Dtool_qQJqQyex 0 7 444 2997 0 14 Dtool_qQJqQyex 377 ////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_slider() changes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3042  14 current_thread 1 2999  
427 14 Dtool_qQJq2_kf 0 4 445 2934 0 14 Dtool_qQJq2_kf 229 ////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3042  3 out 1 2936  
428 14 Dtool_qQJqzQrv 0 4 446 2934 0 14 Dtool_qQJqzQrv 228 ////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3042  3 out 1 2936  12 indent_level 1 2938  
429 14 Dtool_qQJqad8s 0 7 447 2950 0 14 Dtool_qQJqad8s 0 0 
430 14 Dtool_qQJq_4qZ 0 7 449 3044 0 14 Dtool_qQJq_4qZ 224 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
431 14 Dtool_qQJqFKDH 0 7 449 3044 0 14 Dtool_qQJqFKDH 229 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3045  
432 14 Dtool_qQJqloXJ 0 7 450 3044 0 14 Dtool_qQJqloXJ 237 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3044  4 copy 1 3045  
433 14 Dtool_qQJq181P 0 6 451 2935 0 14 Dtool_qQJq181P 985 // Filename: sliderTable.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of sliders in
//               a SliderTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3045  
434 14 Dtool_qQJqMgH_ 0 7 452 3045 0 14 Dtool_qQJqMgH_ 912 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::register_table
//       Access: Published, Static
//  Description: Registers a SliderTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a SliderTable may no longer be
//               modified (although the individual VertexSlider
//               objects may modify their reported sliders).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
//////////////////////////////////////////////////////////////////// 1 5 table 1 3045  
435 14 Dtool_qQJqWedP 0 6 453 2938 0 14 Dtool_qQJqWedP 271 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_num_sliders
//       Access: Published
//  Description: Returns the number of sliders in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3045  
436 14 Dtool_qQJqiKKK 0 7 454 3042 0 14 Dtool_qQJqiKKK 259 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_slider
//       Access: Published
//  Description: Returns the nth slider in the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  1 n 1 2938  
437 14 Dtool_qQJqnGgJ 0 6 455 3038 0 14 Dtool_qQJqnGgJ 320 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_slider_rows
//       Access: Published
//  Description: Returns the set of rows (vertices) governed by the
//               nth slider in the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  1 n 1 2938  
438 14 Dtool_qQJqLzF1 0 6 456 3038 0 14 Dtool_qQJqLzF1 416 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::find_sliders
//       Access: Published
//  Description: Returns a list of slider indices that represent the
//               list of sliders with the indicated name, or an empty
//               SparseArray if no slider in the table has that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  4 name 1 2947  
439 14 Dtool_qQJq_R_2 0 6 457 2935 0 14 Dtool_qQJq_R_2 329 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::has_slider
//       Access: Published
//  Description: Returns true if the table has at least one slider by
//               the indicated name, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  4 name 1 2947  
440 14 Dtool_qQJqy3YI 0 6 458 2935 0 14 Dtool_qQJqy3YI 309 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_empty
//       Access: Published
//  Description: Returns true if the table has no sliders, false if it
//               has at least one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3045  
441 14 Dtool_qQJqWdqY 0 7 459 2997 0 14 Dtool_qQJqWdqY 560 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexSliders in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexSlider
//               changes.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  14 current_thread 1 2999  
442 14 Dtool_qQJqRlhx 0 4 460 2934 0 14 Dtool_qQJqRlhx 301 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::set_slider
//       Access: Published
//  Description: Replaces the nth slider.  Only valid for
//               unregistered tables.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3044  1 n 1 2938  6 slider 1 3042  
443 14 Dtool_qQJqow2A 0 4 461 2934 0 14 Dtool_qQJqow2A 327 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::set_slider_rows
//       Access: Published
//  Description: Replaces the rows affected by the nth slider.  Only
//               valid for unregistered tables.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3044  1 n 1 2938  4 rows 1 3038  
444 14 Dtool_qQJqDBVG 0 4 462 2934 0 14 Dtool_qQJqDBVG 303 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::remove_slider
//       Access: Published
//  Description: Removes the nth slider.  Only valid for
//               unregistered tables.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3044  1 n 1 2938  
445 14 Dtool_qQJqQ5UW 0 6 463 2938 0 14 Dtool_qQJqQ5UW 373 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::add_slider
//       Access: Published
//  Description: Adds a new slider to the table, and returns the
//               index number of the new slider.  Only valid for
//               unregistered tables.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3044  6 slider 1 3042  4 rows 1 3038  
446 14 Dtool_qQJqLkXb 0 4 464 2934 0 14 Dtool_qQJqLkXb 218 ////////////////////////////////////////////////////////////////////
//     Function: SliderTable::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  3 out 1 2936  
447 14 Dtool_qQJqcIiW 0 7 465 2950 0 14 Dtool_qQJqcIiW 0 0 
448 14 Dtool_qQJqKRDk 0 7 471 3047 1929 14 Dtool_qQJqKRDk 232 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2964  
449 14 Dtool_qQJqRp_z 0 7 471 3047 1929 14 Dtool_qQJqRp_z 477 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: This constructor copies all of the basic properties
//               of the source VertexData, like usage_hint and
//               animation tables, but does not copy the actual data,
//               and it allows you to specify a different format.
//////////////////////////////////////////////////////////////////// 2 4 copy 1 2964  6 format 1 2962  
450 14 Dtool_qQJqrYjH 0 7 471 3047 1929 14 Dtool_qQJqrYjH 227 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2929  6 format 1 2962  10 usage_hint 1 2834  
451 14 Dtool_qQJqDxOu 0 7 472 3047 1929 14 Dtool_qQJqDxOu 480 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexData that is
//               actively being used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  4 copy 1 2964  
452 14 Dtool_qQJqpkcB 0 4 474 2934 0 14 Dtool_qQJqpkcB 0 2 4 this 3 3047  4 size 1 2930  
453 14 Dtool_qQJqhhxk 0 6 477 2938 0 14 Dtool_qQJqhhxk 326 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::compare_to
//       Access: Published
//  Description: Returns 0 if the two objects are equivalent, even if
//               they are not the same pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 other 1 2964  
454 14 Dtool_qQJqBGI0 0 6 478 2929 0 14 Dtool_qQJqBGI0 866 // Filename: geomVertexData.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor, if any.
//               This name is reported on the PStats graph for vertex
//               computations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
455 14 Dtool_qQJqiYq5 0 4 479 2934 0 14 Dtool_qQJqiYq5 345 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_name
//       Access: Published
//  Description: Changes the name of the vertex data.  This name is
//               reported on the PStats graph for vertex computations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  4 name 1 2929  
456 14 Dtool_qQJqs9db 0 6 480 2834 0 14 Dtool_qQJqs9db 778 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that was passed to the
//               constructor, and which will be passed to each array
//               data object created initially, and arrays created as
//               the result of a convert_to() operation.  See
//               geomEnums.h.
//
//               However, each individual array may be replaced with a
//               different array object with an independent usage hint
//               specified, so there is no guarantee that the
//               individual arrays all have the same usage_hint.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
457 14 Dtool_qQJqk_1i 0 4 481 2934 0 14 Dtool_qQJqk_1i 580 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this vertex data, and
//               for all of the arrays that share this data.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  10 usage_hint 1 2834  
458 14 Dtool_qQJq67sy 0 7 482 2962 0 14 Dtool_qQJq67sy 318 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_format
//       Access: Published
//  Description: Returns a pointer to the GeomVertexFormat structure
//               that defines this data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
459 14 Dtool_qQJqD1zm 0 4 483 2934 0 14 Dtool_qQJqD1zm 585 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_format
//       Access: Published
//  Description: Changes the format of the vertex data.  If the data
//               is not empty, this will implicitly change every row
//               to match the new format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  6 format 1 2962  
460 14 Dtool_qQJq88D7 0 6 484 2935 0 14 Dtool_qQJq88D7 398 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::has_column
//       Access: Published
//  Description: Returns true if the data has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  4 name 1 2947  
461 14 Dtool_qQJqxs3S 0 6 485 2938 0 14 Dtool_qQJqxs3S 362 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored within all the
//               arrays.  All arrays store data for the same n
//               rows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
462 14 Dtool_qQJqtnWY 0 6 486 2935 0 14 Dtool_qQJqtnWY 1250 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows in all of
//               the various arrays (presumably by adding rows).
//
//               The new vertex data is initialized to 0, except for
//               the "color" column, which is initialized to (1, 1, 1,
//               1).
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               Although this method is Published, application code
//               only very rarely has any need to call it.  Instead,
//               you should use the GeomVertexWriter to build up the
//               rows in a GeomVertexData object automatically,
//               without need to explicitly set the number of
//               rows.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  1 n 1 2938  
463 14 Dtool_qQJq0MpE 0 6 487 2935 0 14 Dtool_qQJq0MpE 1085 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::unclean_set_num_rows
//       Access: Published
//  Description: This method behaves like set_num_rows(), except the
//               new data is not initialized.  Furthermore, after this
//               call, *any* of the data in the GeomVertexData may be
//               uninitialized, including the earlier rows.
//
//               This is intended for applications that are about to
//               completely fill the GeomVertexData with new data
//               anyway; it provides a tiny performance boost over
//               set_num_rows().
//
//               Although this method is Published, application code
//               only very rarely has any need to call it.  Instead,
//               you should use the GeomVertexWriter to build up the
//               rows in a GeomVertexData object automatically,
//               without need to explicitly set the number of
//               rows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  1 n 1 2938  
464 14 Dtool_qQJqFkl7 0 6 488 2935 0 14 Dtool_qQJqFkl7 606 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for n rows is
//               allocated, so that you may increase the number of
//               rows to n without causing a new memory allocation.
//               This is a performance optimization only; it is
//               especially useful when you know ahead of time that
//               you will be adding n rows to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  1 n 1 2938  
465 14 Dtool_qQJqv6Ji 0 4 489 2934 0 14 Dtool_qQJqv6Ji 554 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_rows
//       Access: Published
//  Description: Removes all of the rows from the arrays;
//               functionally equivalent to set_num_rows(0) (but
//               faster).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
466 14 Dtool_qQJqLk3d 0 6 490 2938 0 14 Dtool_qQJqLk3d 376 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays stored within
//               the data.  This must match
//               get_format()->get_num_arrays().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
467 14 Dtool_qQJqB79G 0 7 491 2957 0 14 Dtool_qQJqB79G 412 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_array
//       Access: Published
//  Description: Returns a const pointer to the vertex data for the
//               indicated array, for application code to directly
//               examine (but not modify) the underlying vertex data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  1 i 1 2938  
468 14 Dtool_qQJqodUJ 0 7 492 2995 1779 14 Dtool_qQJqodUJ 757 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated vertex
//               array, so that application code may directly
//               manipulate the data.  You should avoid changing
//               the length of this array, since all of the arrays
//               should be kept in sync--use set_num_rows()
//               instead.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  1 i 1 2938  
469 14 Dtool_qQJqtWDK 0 4 493 2934 0 14 Dtool_qQJqtWDK 667 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_array
//       Access: Published
//  Description: Replaces the indicated vertex data array with
//               a completely new array.  You should be careful that
//               the new array has the same length and format as the
//               old one, unless you know what you are doing.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3047  1 i 1 2938  5 array 1 2957  
470 14 Dtool_qQJqBS4c 0 7 494 3018 0 14 Dtool_qQJqBS4c 868 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_table
//       Access: Published
//  Description: Returns a const pointer to the TransformTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the
//               graphics hardware (but also see
//               get_transform_blend_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformTable assigned (which implies the
//               vertices will not be animated by the graphics
//               hardware).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
471 14 Dtool_qQJqsx_5 0 4 495 2934 0 14 Dtool_qQJqsx_5 708 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_table
//       Access: Published
//  Description: Replaces the TransformTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_index" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  5 table 1 3018  
472 14 Dtool_qQJqYfui 0 4 496 2934 0 14 Dtool_qQJqYfui 401 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_table
//       Access: Published
//  Description: Sets the TransformTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables hardware-driven vertex animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
473 14 Dtool_qQJqFkfO 0 7 497 3036 0 14 Dtool_qQJqFkfO 816 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_blend_table
//       Access: Published
//  Description: Returns a const pointer to the TransformBlendTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the CPU
//               (but also see get_transform_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformBlendTable assigned (which implies
//               the vertices will not be animated by the CPU).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
474 14 Dtool_qQJqfufT 0 7 498 3035 0 14 Dtool_qQJqfufT 665 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_transform_blend_table
//       Access: Published
//  Description: Returns a modifiable pointer to the current
//               TransformBlendTable on this vertex data, if any, or
//               NULL if there is not a TransformBlendTable.  See
//               get_transform_blend_table().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
475 14 Dtool_qQJq7Mco 0 4 499 2934 0 14 Dtool_qQJq7Mco 719 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_blend_table
//       Access: Published
//  Description: Replaces the TransformBlendTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_blend" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  5 table 1 3036  
476 14 Dtool_qQJqkA3X 0 4 500 2934 0 14 Dtool_qQJqkA3X 407 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_blend_table
//       Access: Published
//  Description: Sets the TransformBlendTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables CPU-driven vertex animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
477 14 Dtool_qQJqED2E 0 7 501 3045 0 14 Dtool_qQJqED2E 558 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_slider_table
//       Access: Published
//  Description: Returns a const pointer to the SliderTable
//               assigned to this data.  Vertices within the vertex
//               data will look up their morph offsets, if any, within
//               this table.
//
//               This will return NULL if the vertex data does not
//               have a SliderTable assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
478 14 Dtool_qQJq__9X 0 4 502 2934 0 14 Dtool_qQJq__9X 777 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_slider_table
//       Access: Published
//  Description: Replaces the SliderTable on this vertex
//               data with the indicated table.  There should be an
//               entry in this table for each kind of morph offset
//               defined in the vertex data.
//
//               The SliderTable object must have been registered
//               prior to setting it on the GeomVertexData.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  5 table 1 3045  
479 14 Dtool_qQJqFr1M 0 4 503 2934 0 14 Dtool_qQJqFr1M 392 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_slider_table
//       Access: Published
//  Description: Sets the SliderTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables morph (blend shape) animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
480 14 Dtool_qQJqBRE9 0 6 504 2938 0 14 Dtool_qQJqBRE9 332 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_bytes
//       Access: Published
//  Description: Returns the total number of bytes consumed by the
//               different arrays of the vertex data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
481 14 Dtool_qQJqvZmm 0 7 505 2997 0 14 Dtool_qQJqvZmm 366 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex data is
//               modified.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  14 current_thread 1 2999  
482 14 Dtool_qQJqdUin 0 7 505 2997 0 14 Dtool_qQJqdUin 366 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex data is
//               modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
483 14 Dtool_qQJqOOPS 0 6 506 2935 0 14 Dtool_qQJqOOPS 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::request_resident
//       Access: Published
//  Description: Returns true if the vertex data is currently resident
//               in memory.  If this returns false, the vertex data will
//               be brought back into memory shortly; try again later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
484 14 Dtool_qQJqI7Mn 0 4 507 2934 0 14 Dtool_qQJqI7Mn 1099 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_from
//       Access: Published
//  Description: Copies all the data from the other array into the
//               corresponding data types in this array, by matching
//               data types name-by-name.
//
//               keep_data_objects specifies what to do when one or
//               more of the arrays can be copied without the need to
//               apply any conversion operation.  If it is true, the
//               original GeomVertexArrayData objects in this object
//               are retained, and their data arrays are copied
//               byte-by-byte from the source; if it is false, then the
//               GeomVertexArrayData objects are copied pointerwise
//               from the source.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3047  6 source 1 2964  17 keep_data_objects 1 2935  14 current_thread 1 2999  
485 14 Dtool_qQJqTi_p 0 4 507 2934 0 14 Dtool_qQJqTi_p 1099 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_from
//       Access: Published
//  Description: Copies all the data from the other array into the
//               corresponding data types in this array, by matching
//               data types name-by-name.
//
//               keep_data_objects specifies what to do when one or
//               more of the arrays can be copied without the need to
//               apply any conversion operation.  If it is true, the
//               original GeomVertexArrayData objects in this object
//               are retained, and their data arrays are copied
//               byte-by-byte from the source; if it is false, then the
//               GeomVertexArrayData objects are copied pointerwise
//               from the source.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3047  6 source 1 2964  17 keep_data_objects 1 2935  
486 14 Dtool_qQJq6qtd 0 4 508 2934 0 14 Dtool_qQJq6qtd 643 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_row_from
//       Access: Published
//  Description: Copies a single row of the data from the other array
//               into the indicated row of this array.  In this case,
//               the source format must exactly match the destination
//               format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3047  8 dest_row 1 2938  6 source 1 2964  10 source_row 1 2938  14 current_thread 1 2999  
487 14 Dtool_qQJqUeFN 0 7 509 2964 0 14 Dtool_qQJqUeFN 408 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::convert_to
//       Access: Published
//  Description: Returns a new GeomVertexData that represents the same
//               contents as this one, with all data types matched up
//               name-by-name to the indicated new format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  10 new_format 1 2962  
488 14 Dtool_qQJqLmTH 0 7 510 2964 0 14 Dtool_qQJqLmTH 466 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table modified in-place to apply the indicated scale.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  11 color_scale 1 3048  
489 14 Dtool_qQJqnR2X 0 7 510 2964 0 14 Dtool_qQJqnR2X 599 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table that has been
//               scaled by the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2964  11 color_scale 1 3048  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  
490 14 Dtool_qQJqYUcy 0 7 511 2964 0 14 Dtool_qQJqYUcy 453 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               data modified in-place with the new value.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 color 1 3048  
491 14 Dtool_qQJqpU_h 0 7 511 2964 0 14 Dtool_qQJqpU_h 599 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table for which each
//               vertex has the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2964  5 color 1 3048  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  
492 14 Dtool_qQJqpzio 0 7 512 2964 0 14 Dtool_qQJqpzio 577 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::reverse_normals
//       Access: Published
//  Description: Returns a new GeomVertexData object with the normal
//               data modified in-place, so that each lighting normal
//               is now facing in the opposite direction.
//
//               If the vertex data does not include a normal column,
//               this returns the original GeomVertexData object,
//               unchanged.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
493 14 Dtool_qQJqNBVp 0 7 513 2964 0 14 Dtool_qQJqNBVp 1321 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::animate_vertices
//       Access: Published
//  Description: Returns a GeomVertexData that represents the results
//               of computing the vertex animation on the CPU for this
//               GeomVertexData.
//
//               If there is no CPU-defined vertex animation on this
//               object, this just returns the original object.
//
//               If there is vertex animation, but the VertexTransform
//               values have not changed since last time, this may
//               return the same pointer it returned previously.  Even
//               if the VertexTransform values have changed, it may
//               still return the same pointer, but with its contents
//               modified (this is preferred, since it allows the
//               graphics backend to update vertex buffers optimally).
//
//               If force is false, this method may return immediately
//               with stale data, if the vertex data is not completely
//               resident.  If force is true, this method will never
//               return stale data, but may block until the data is
//               available.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2964  5 force 1 2935  14 current_thread 1 2999  
494 14 Dtool_qQJqd9F_ 0 4 514 2934 0 14 Dtool_qQJqd9F_ 555 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_animated_vertices
//       Access: Published
//  Description: Removes the cache of animated vertices computed by a
//               previous call to animate_vertices() within the same
//               frame.  This will force the next call to
//               animate_vertices() to recompute these values from
//               scratch.  Normally it is not necessary to call this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
495 14 Dtool_qQJqS7Do 0 4 515 2934 0 14 Dtool_qQJqS7Do 461 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform matrix to all of the
//               vertices in the GeomVertexData.  The transform is
//               applied to all "point" and "vector" type columns
//               described in the format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  3 mat 1 3015  
496 14 Dtool_qQJqd_zj 0 4 515 2934 0 14 Dtool_qQJqd_zj 486 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform matrix to all of the
//               vertices from begin_row up to but not including
//               end_row.  The transform is applied to all "point" and
//               "vector" type columns described in the format.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3047  3 mat 1 3015  9 begin_row 1 2938  7 end_row 1 2938  
497 14 Dtool_qQJqwwi1 0 7 516 3047 1929 14 Dtool_qQJqwwi1 776 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::replace_column
//       Access: Published
//  Description: Returns a new GeomVertexData object, suitable for
//               modification, with the indicated data type replaced
//               with a new table filled with undefined values.  The
//               new table will be added as a new array; if the old
//               table was interleaved with a previous array, the
//               previous array will not be repacked.
//
//               If num_components is 0, the indicated name is simply
//               removed from the type, without replacing it with
//               anything else.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2964  4 name 1 2946  14 num_components 1 2938  12 numeric_type 1 2838  8 contents 1 2839  
498 14 Dtool_qQJqnWTw 0 4 517 2934 0 14 Dtool_qQJqnWTw 222 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 out 1 2936  
499 14 Dtool_qQJqsKfe 0 4 518 2934 0 14 Dtool_qQJqsKfe 221 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2964  3 out 1 2936  12 indent_level 1 2938  
500 14 Dtool_qQJqUjPx 0 4 518 2934 0 14 Dtool_qQJqUjPx 221 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 out 1 2936  
501 14 Dtool_qQJqNTZJ 0 4 519 2934 0 14 Dtool_qQJqNTZJ 324 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::describe_vertex
//       Access: Published
//  Description: Writes a verbose, human-friendly description of the
//               indicated vertex number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2964  3 out 1 2936  3 row 1 2938  
502 14 Dtool_qQJqZI16 0 4 520 2934 0 14 Dtool_qQJqZI16 556 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
503 14 Dtool_qQJqn1dY 0 4 521 2934 0 14 Dtool_qQJqn1dY 608 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
504 14 Dtool_qQJqIU4H 0 7 522 2950 0 14 Dtool_qQJqIU4H 0 0 
505 14 Dtool_qQJqkRv_ 0 7 467 3007 0 14 Dtool_qQJqkRv_ 0 1 4 this 3 3047  
506 14 Dtool_qQJqT3AG 0 7 468 3047 1929 14 Dtool_qQJqT3AG 0 1 4 this 3 3007  
507 14 Dtool_qQJqVY07 0 6 469 2960 0 14 Dtool_qQJqVY07 0 1 4 this 3 3047  
508 14 Dtool_qQJqLM59 0 7 470 3047 1929 14 Dtool_qQJqLM59 0 1 4 this 3 2960  
509 14 Dtool_qQJqIczb 0 7 525 3051 1982 14 Dtool_qQJqIczb 769 // Filename: animateVerticesRequest.I
// Created by:  pratt (20Nov07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimateVerticesRequest::Constructor
//       Access: Published
//  Description: Create a new AnimateVerticesRequest.
//////////////////////////////////////////////////////////////////// 1 16 geom_vertex_data 1 3047  
510 14 Dtool_qQJqbyCH 0 6 526 2935 0 14 Dtool_qQJqbyCH 322 ////////////////////////////////////////////////////////////////////
//     Function: AnimateVerticesRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3052  
511 14 Dtool_qQJqM1oU 0 7 527 2950 0 14 Dtool_qQJqM1oU 0 0 
512 14 Dtool_qQJqjSRf 0 7 531 2950 0 14 Dtool_qQJqjSRf 0 0 
513 14 Dtool_qQJqB9LY 0 6 537 2930 0 14 Dtool_qQJqB9LY 1039 // Filename: bufferContext.I
// Created by:  drose (16Mar06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_data_size_bytes
//       Access: Public
//  Description: Returns the number of bytes previously reported for
//               the data object.  This is used to track changes in
//               the data object's allocated size; if it changes from
//               this, we need to create a new buffer.  This is also
//               used to track memory utilization in PStats.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
514 14 Dtool_qQJq7v5_ 0 7 538 2997 0 14 Dtool_qQJq7v5_ 320 ////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_modified
//       Access: Public
//  Description: Returns the UpdateSeq that was recorded the last time
//               mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
515 14 Dtool_qQJqlXDp 0 6 539 2935 0 14 Dtool_qQJqlXDp 382 ////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_active
//       Access: Public
//  Description: Returns the active flag associated with this object.
//               An object is considered "active" if it was rendered
//               in the current frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
516 14 Dtool_qQJq3xOQ 0 6 540 2935 0 14 Dtool_qQJq3xOQ 396 ////////////////////////////////////////////////////////////////////
//     Function: BufferContext::get_resident
//       Access: Public
//  Description: Returns the resident flag associated with this
//               object.  An object is considered "resident" if it
//               appears to be resident in texture memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
517 14 Dtool_qQJqL17V 0 7 541 2950 0 14 Dtool_qQJqL17V 0 0 
518 14 Dtool_qQJqJsWn 0 6 534 3057 0 14 Dtool_qQJqJsWn 0 1 4 this 3 3056  
519 14 Dtool_qQJqAKtd 0 6 535 3056 0 14 Dtool_qQJqAKtd 0 1 4 this 3 3057  
520 14 Dtool_qQJqxNhI 0 7 547 3058 1998 14 Dtool_qQJqxNhI 478 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomPrimitive that is
//               actively being used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  4 copy 1 3059  
521 14 Dtool_qQJq7TKD 0 4 549 2934 0 14 Dtool_qQJq7TKD 0 2 4 this 3 3058  4 size 1 2930  
522 14 Dtool_qQJqkToi 0 7 552 3058 1998 14 Dtool_qQJqkToi 0 1 4 this 3 3059  
523 14 Dtool_qQJqGgvy 0 6 553 2837 0 14 Dtool_qQJqGgvy 0 1 4 this 3 3059  
524 14 Dtool_qQJqdMe3 0 6 554 2938 0 14 Dtool_qQJqdMe3 397 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_geom_rendering
//       Access: Published, Virtual
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
525 14 Dtool_qQJq7mHk 0 6 555 2836 0 14 Dtool_qQJq7mHk 905 // Filename: geomPrimitive.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_shade_model
//       Access: Published
//  Description: Returns the ShadeModel hint for this primitive.
//               This is intended as a hint to the renderer to tell it
//               how the per-vertex colors and normals are applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
526 14 Dtool_qQJqloHJ 0 4 556 2934 0 14 Dtool_qQJqloHJ 865 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_shade_model
//       Access: Published
//  Description: Changes the ShadeModel hint for this primitive.
//               This is different from the ShadeModelAttrib that
//               might also be applied from the scene graph.  This
//               does not affect the shade model that is in effect
//               when rendering, but rather serves as a hint to the
//               renderer to tell it how the per-vertex colors and
//               normals on this primitive are applied.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  11 shade_model 1 2836  
527 14 Dtool_qQJqrTA_ 0 6 557 2834 0 14 Dtool_qQJqrTA_ 921 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint for this primitive.  See
//               geomEnums.h.  This has nothing to do with the usage
//               hint associated with the primitive's vertices; this
//               only specifies how often the vertex indices that
//               define the primitive will be modified.
//
//               It is perfectly legal (and, in fact, common) for a
//               GeomPrimitive to have UH_static on itself, while
//               referencing vertex data with UH_dynamic.  This means
//               that the vertices themselves will be animated, but
//               the primitive will always reference the same set of
//               vertices from the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
528 14 Dtool_qQJqpILm 0 4 558 2934 0 14 Dtool_qQJqpILm 512 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this primitive.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  10 usage_hint 1 2834  
529 14 Dtool_qQJqqhQw 0 6 559 2838 0 14 Dtool_qQJqqhQw 342 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_index_type
//       Access: Public
//  Description: Returns the numeric type of the index column.
//               Normally, this will be either NT_uint16 or NT_uint32.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
530 14 Dtool_qQJqAwMD 0 4 560 2934 0 14 Dtool_qQJqAwMD 939 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_index_type
//       Access: Published
//  Description: Changes the numeric type of the index column.
//               Normally, this should be either NT_uint16 or
//               NT_uint32.
//
//               The index type must be large enough to include all of
//               the index values in the primitive.  It may be
//               automatically elevated, if necessary, to a larger
//               index type, by a subsequent call to add_index() that
//               names an index value that does not fit in the index
//               type you specify.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  10 index_type 1 2838  
531 14 Dtool_qQJqjrU4 0 6 561 2935 0 14 Dtool_qQJqjrU4 439 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_composite
//       Access: Published
//  Description: Returns true if the primitive is a composite
//               primitive such as a tristrip or trifan, or false if
//               it is a fundamental primitive such as a collection of
//               triangles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
532 14 Dtool_qQJq6QHh 0 6 562 2935 0 14 Dtool_qQJq6QHh 683 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_indexed
//       Access: Published
//  Description: Returns true if the primitive is indexed, false
//               otherwise.  An indexed primitive stores a table of
//               index numbers into its GeomVertexData, so that it can
//               reference the vertices in any order.  A nonindexed
//               primitive, on the other hand, stores only the first
//               vertex number and number of vertices used, so that it
//               can only reference the vertices consecutively.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
533 14 Dtool_qQJqmlTX 0 6 563 2938 0 14 Dtool_qQJqmlTX 536 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_first_vertex
//       Access: Published
//  Description: Returns the first vertex number referenced by the
//               primitive.  This is particularly important in the
//               case of a nonindexed primitive, in which case
//               get_first_vertex() and get_num_vertices() completely
//               define the extent of the vertex range.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
534 14 Dtool_qQJqvNCm 0 6 564 2938 0 14 Dtool_qQJqvNCm 321 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices used by all the
//               primitives in this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
535 14 Dtool_qQJqResf 0 6 565 2938 0 14 Dtool_qQJqResf 267 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_vertex
//       Access: Published
//  Description: Returns the ith vertex index in the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 i 1 2938  
536 14 Dtool_qQJqfZh_ 0 4 566 2934 0 14 Dtool_qQJqfZh_ 780 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the list of vertex
//               indices used by the graphics primitive type.  To
//               define a primitive, you must call add_vertex() for
//               each vertex of the new primitive, and then call
//               close_primitive() after you have specified the last
//               vertex of each primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  6 vertex 1 2938  
537 14 Dtool_qQJqHQPq 0 4 567 2934 0 14 Dtool_qQJqHQPq 255 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  2 v1 1 2938  2 v2 1 2938  
538 14 Dtool_qQJqjcFB 0 4 567 2934 0 14 Dtool_qQJqjcFB 255 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3058  2 v1 1 2938  2 v2 1 2938  2 v3 1 2938  
539 14 Dtool_qQJq2Q0u 0 4 567 2934 0 14 Dtool_qQJq2Q0u 255 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3058  2 v1 1 2938  2 v2 1 2938  2 v3 1 2938  2 v4 1 2938  
540 14 Dtool_qQJqa2sp 0 4 568 2934 0 14 Dtool_qQJqa2sp 531 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_consecutive_vertices
//       Access: Published
//  Description: Adds a consecutive sequence of vertices, beginning at
//               start, to the primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  5 start 1 2938  12 num_vertices 1 2938  
541 14 Dtool_qQJq7DMY 0 4 569 2934 0 14 Dtool_qQJq7DMY 621 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_next_vertices
//       Access: Published
//  Description: Adds the next n vertices in sequence, beginning from
//               the last vertex added to the primitive + 1.
//
//               This is most useful when you are building up a
//               primitive and a GeomVertexData at the same time, and
//               you just want the primitive to reference the first n
//               vertices from the data, then the next n, and so on.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  12 num_vertices 1 2938  
542 14 Dtool_qQJqlGV6 0 4 570 2934 0 14 Dtool_qQJqlGV6 1259 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::reserve_num_vertices
//       Access: Published
//  Description: This ensures that enough memory space for n vertices
//               is allocated, so that you may increase the number of
//               vertices to n without causing a new memory
//               allocation.  This is a performance optimization only;
//               it is especially useful when you know ahead of time
//               that you will be adding n vertices to the primitive.
//
//               Note that the total you specify here should also
//               include implicit vertices which may be added at each
//               close_primitive() call, according to
//               get_num_unused_vertices_per_primitive().
//
//               Note also that making this call will implicitly make
//               the primitive indexed if it is not already, which
//               could result in a performance *penalty*.  If you
//               would prefer not to lose the nonindexed nature of
//               your existing GeomPrimitives, check is_indexed()
//               before making this call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  12 num_vertices 1 2938  
543 14 Dtool_qQJq6fGw 0 6 571 2935 0 14 Dtool_qQJq6fGw 654 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::close_primitive
//       Access: Published
//  Description: Indicates that the previous n calls to add_vertex(),
//               since the last call to close_primitive(), have fully
//               defined a new primitive.  Returns true if successful,
//               false otherwise.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
544 14 Dtool_qQJqM1Rt 0 4 572 2934 0 14 Dtool_qQJqM1Rt 527 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::clear_vertices
//       Access: Published
//  Description: Removes all of the vertices and primitives from the
//               object, so they can be re-added.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
545 14 Dtool_qQJqLbh3 0 4 573 2934 0 14 Dtool_qQJqLbh3 508 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::offset_vertices
//       Access: Published
//  Description: Adds the indicated offset to all vertices used by the
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  6 offset 1 2938  
546 14 Dtool_qQJq6uw4 0 4 574 2934 0 14 Dtool_qQJq6uw4 390 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_nonindexed
//       Access: Published
//  Description: Converts the primitive from indexed to nonindexed by
//               duplicating vertices as necessary into the indicated
//               dest GeomVertexData.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  4 dest 1 3047  6 source 1 2964  
547 14 Dtool_qQJqxTd_ 0 4 575 2934 0 14 Dtool_qQJqxTd_ 383 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::pack_vertices
//       Access: Published
//  Description: Packs the vertices used by the primitive from the
//               indicated source array onto the end of the indicated
//               destination array.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  4 dest 1 3047  6 source 1 2964  
548 14 Dtool_qQJqKY2E 0 4 576 2934 0 14 Dtool_qQJqKY2E 817 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_indexed
//       Access: Published
//  Description: Converts the primitive from nonindexed form to
//               indexed form.  This will simply create an index table
//               that is numbered consecutively from
//               get_first_vertex(); it does not automatically
//               collapse together identical vertices that may have
//               been split apart by a previous call to
//               make_nonindexed().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
549 14 Dtool_qQJq6WIt 0 6 577 2938 0 14 Dtool_qQJq6WIt 372 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_primitives
//       Access: Published
//  Description: Returns the number of individual primitives stored
//               within this object.  All primitives are the same
//               type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
550 14 Dtool_qQJqsxUL 0 6 578 2938 0 14 Dtool_qQJqsxUL 800 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_start
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive starts.  
//
//               If i is one more than the highest valid primitive
//               vertex, the return value will be one more than the
//               last valid vertex.  Thus, it is generally true that
//               the vertices used by a particular primitive i are the
//               set get_primitive_start(n) <= vi <
//               get_primitive_start(n + 1) (although this range also
//               includes the unused vertices between primitives).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
551 14 Dtool_qQJqB_K0 0 6 579 2938 0 14 Dtool_qQJqB_K0 408 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_end
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive ends.  This is one past the last
//               valid element for the nth primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
552 14 Dtool_qQJqn6mz 0 6 580 2938 0 14 Dtool_qQJqn6mz 406 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_vertices
//       Access: Published
//  Description: Returns the number of vertices used by the nth
//               primitive.  This is the same thing as
//               get_primitive_end(n) - get_primitive_start(n).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
553 14 Dtool_qQJqaEOa 0 6 581 2938 0 14 Dtool_qQJqaEOa 393 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by all the
//               primitives in this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
554 14 Dtool_qQJq4WCg 0 6 582 2938 0 14 Dtool_qQJq4WCg 402 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by the nth
//               primitive in this object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
555 14 Dtool_qQJqB5d5 0 6 583 2938 0 14 Dtool_qQJqB5d5 328 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by all
//               the primitives in this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
556 14 Dtool_qQJq4mcR 0 6 584 2938 0 14 Dtool_qQJq4mcR 337 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by the
//               nth primitive in this object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
557 14 Dtool_qQJqDfoY 0 6 585 2938 0 14 Dtool_qQJqDfoY 328 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by all
//               the primitives in this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
558 14 Dtool_qQJqyuOO 0 6 586 2938 0 14 Dtool_qQJqyuOO 337 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by the
//               nth primitive in this object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  1 n 1 2938  
559 14 Dtool_qQJquWdu 0 7 587 3059 0 14 Dtool_qQJquWdu 795 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::decompose
//       Access: Published
//  Description: Decomposes a complex primitive type into a simpler
//               primitive type, for instance triangle strips to
//               triangles, and returns a pointer to the new primitive
//               definition.  If the decomposition cannot be
//               performed, this might return the original object.
//
//               This method is useful for application code that wants
//               to iterate through the set of triangles on the
//               primitive without having to write handlers for each
//               possible kind of primitive type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
560 14 Dtool_qQJqyITm 0 7 588 3059 0 14 Dtool_qQJqyITm 739 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::rotate
//       Access: Published
//  Description: Returns a new primitive with the shade_model reversed
//               (if it is flat shaded), if possible.  If the
//               primitive type cannot be rotated, returns the
//               original primitive, unrotated.
//
//               If the current shade_model indicates
//               flat_vertex_last, this should bring the last vertex
//               to the first position; if it indicates
//               flat_vertex_first, this should bring the first vertex
//               to the last position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
561 14 Dtool_qQJqjOE1 0 7 589 3059 0 14 Dtool_qQJqjOE1 842 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::doubleside
//       Access: Published
//  Description: Duplicates triangles in the primitive so that each
//               triangle is back-to-back with another triangle facing
//               in the opposite direction.  Note that this doesn't
//               affect vertex normals, so this operation alone won't
//               work in the presence of lighting (but see
//               SceneGraphReducer::doubleside()).
//
//               Also see CullFaceAttrib, which can enable rendering
//               of both sides of a triangle without having to
//               duplicate it (but which doesn't necessarily work in
//               the presence of lighting).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
562 14 Dtool_qQJqIkTm 0 7 590 3059 0 14 Dtool_qQJqIkTm 823 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::reverse
//       Access: Published
//  Description: Reverses the winding order in the primitive so that
//               each triangle is facing in the opposite direction it
//               was originally.  Note that this doesn't affect vertex
//               normals, so this operation alone won't work in the
//               presence of lighting (but see
//               SceneGraphReducer::reverse()).
//
//               Also see CullFaceAttrib, which can change the visible
//               direction of a triangle without having to duplicate
//               it (but which doesn't necessarily work in the
//               presence of lighting).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
563 14 Dtool_qQJq9Uwk 0 7 591 3059 0 14 Dtool_qQJq9Uwk 672 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::match_shade_model
//       Access: Published
//  Description: Returns a new primitive that is compatible with the
//               indicated shade model, if possible, or NULL if this
//               is not possible.
//
//               In most cases, this will return either NULL or the
//               original primitive.  In the case of a
//               SM_flat_first_vertex vs. a SM_flat_last_vertex (or
//               vice-versa), however, it will return a rotated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  11 shade_model 1 2836  
564 14 Dtool_qQJqqobv 0 7 592 3059 0 14 Dtool_qQJqqobv 519 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_points
//       Access: Published
//  Description: Returns a new GeomPoints primitive that represents
//               each of the vertices in the original primitive,
//               rendered exactly once.  If the original primitive is
//               already a GeomPoints primitive, returns the original
//               primitive unchanged.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
565 14 Dtool_qQJqj0Et 0 6 593 2938 0 14 Dtool_qQJqj0Et 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the primitive
//               and its index table(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
566 14 Dtool_qQJq1Cqn 0 6 594 2938 0 14 Dtool_qQJq1Cqn 308 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the vertices
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
567 14 Dtool_qQJq30ZO 0 7 595 2997 0 14 Dtool_qQJq30ZO 372 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex index array is
//               modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
568 14 Dtool_qQJqjotH 0 6 596 2935 0 14 Dtool_qQJqjotH 451 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::request_resident
//       Access: Published
//  Description: Returns true if the primitive data is currently
//               resident in memory.  If this returns false, the
//               primitive data will be brought back into memory
//               shortly; try again later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
569 14 Dtool_qQJqnNd0 0 6 597 2935 0 14 Dtool_qQJqnNd0 455 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::check_valid
//       Access: Published
//  Description: Verifies that the primitive only references vertices
//               that actually exist within the indicated
//               GeomVertexData.  Returns true if the primitive
//               appears to be valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  11 vertex_data 1 2964  
570 14 Dtool_qQJqa1o6 0 4 598 2934 0 14 Dtool_qQJqa1o6 230 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3059  3 out 1 2936  
571 14 Dtool_qQJqbNE_ 0 4 599 2934 0 14 Dtool_qQJqbNE_ 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3059  3 out 1 2936  12 indent_level 1 2938  
572 14 Dtool_qQJqBUuv 0 7 600 2957 0 14 Dtool_qQJqBUuv 812 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_vertices
//       Access: Published
//  Description: Returns a const pointer to the vertex index array so
//               application code can read it directly.  This might
//               return NULL if the primitive is nonindexed.  Do not
//               attempt to modify the returned array; use
//               modify_vertices() or set_vertices() for this.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
573 14 Dtool_qQJq1PQG 0 7 601 2995 1779 14 Dtool_qQJq1PQG 1321 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::modify_vertices
//       Access: Published
//  Description: Returns a modifiable pointer to the vertex index
//               list, so application code can directly fiddle with
//               this data.  Use with caution, since there are no
//               checks that the data will be left in a stable state.
//
//               If this is called on a nonindexed primitive, it will
//               implicitly be converted to an indexed primitive.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  12 num_vertices 1 2938  
574 14 Dtool_qQJqf53e 0 7 601 2995 1779 14 Dtool_qQJqf53e 1321 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::modify_vertices
//       Access: Published
//  Description: Returns a modifiable pointer to the vertex index
//               list, so application code can directly fiddle with
//               this data.  Use with caution, since there are no
//               checks that the data will be left in a stable state.
//
//               If this is called on a nonindexed primitive, it will
//               implicitly be converted to an indexed primitive.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
575 14 Dtool_qQJqXyE_ 0 4 602 2934 0 14 Dtool_qQJqXyE_ 1115 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_vertices
//       Access: Published
//  Description: Completely replaces the vertex index list with a new
//               table.  Chances are good that you should also replace
//               the ends list with set_ends() at the same time.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  8 vertices 1 2957  12 num_vertices 1 2938  
576 14 Dtool_qQJqC9oy 0 4 602 2934 0 14 Dtool_qQJqC9oy 1115 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_vertices
//       Access: Published
//  Description: Completely replaces the vertex index list with a new
//               table.  Chances are good that you should also replace
//               the ends list with set_ends() at the same time.
//
//               If num_vertices is not -1, it specifies an artificial
//               limit to the number of vertices in the array.
//               Otherwise, all of the vertices in the array will be
//               used.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  8 vertices 1 2957  
577 14 Dtool_qQJq1R4R 0 4 603 2934 0 14 Dtool_qQJq1R4R 808 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_nonindexed_vertices
//       Access: Published
//  Description: Sets the primitive up as a nonindexed primitive,
//               using the indicated vertex range.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 3 4 this 3 3058  12 first_vertex 1 2938  12 num_vertices 1 2938  
578 14 Dtool_qQJqhg3p 0 6 604 2938 0 14 Dtool_qQJqhg3p 642 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_index_stride
//       Access: Published
//  Description: A convenience function to return the gap between
//               successive index numbers, in bytes, of the index
//               data.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
579 14 Dtool_qQJqQK6w 0 7 605 3062 0 14 Dtool_qQJqQK6w 936 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_ends
//       Access: Published
//  Description: Returns a const pointer to the primitive ends
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               modify_ends() or set_ends() for this.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
580 14 Dtool_qQJqUB9R 0 7 606 3064 0 14 Dtool_qQJqUB9R 1159 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::modify_ends
//       Access: Published
//  Description: Returns a modifiable pointer to the primitive ends
//               array, so application code can directly fiddle with
//               this data.  Use with caution, since there are no
//               checks that the data will be left in a stable state.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
581 14 Dtool_qQJqX0vg 0 4 607 2934 0 14 Dtool_qQJqX0vg 1117 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_ends
//       Access: Published
//  Description: Completely replaces the primitive ends array with
//               a new table.  Chances are good that you should also
//               replace the vertices list with set_vertices() at the
//               same time.
//
//               Note that simple primitive types, like triangles, do
//               not have a ends array: since all the primitives
//               have the same number of vertices, it is not needed.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 2 4 this 3 3058  4 ends 1 3062  
582 14 Dtool_qQJqKKGR 0 7 608 2957 0 14 Dtool_qQJqKKGR 827 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_mins
//       Access: Published
//  Description: Returns a const pointer to the primitive mins
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               set_minmax() for this.
//
//               Note that simple primitive types, like triangles, do
//               not have a mins array.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
583 14 Dtool_qQJqJsTw 0 7 609 2957 0 14 Dtool_qQJqJsTw 818 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_maxs
//       Access: Published
//  Description: Returns a const pointer to the primitive maxs
//               array so application code can read it directly.  Do
//               not attempt to modify the returned array; use
//               set_minmax().
//
//               Note that simple primitive types, like triangles, do
//               not have a maxs array.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
584 14 Dtool_qQJqq8m_ 0 4 610 2934 0 14 Dtool_qQJqq8m_ 1093 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_minmax
//       Access: Published
//  Description: Explicitly specifies the minimum and maximum
//               vertices, as well as the lists of per-component min
//               and max.
//
//               Use this method with extreme caution.  It's generally
//               better to let the GeomPrimitive compute these
//               explicitly, unless for some reason you can do it
//               faster and you absolutely need the speed improvement.
//
//               Note that any modification to the vertex array will
//               normally cause this to be recomputed, unless you set
//               it immediately again.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 5 4 this 3 3058  10 min_vertex 1 2938  10 max_vertex 1 2938  4 mins 1 2995  4 maxs 1 2995  
585 14 Dtool_qQJqO9Lj 0 4 611 2934 0 14 Dtool_qQJqO9Lj 643 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::clear_minmax
//       Access: Published
//  Description: Undoes a previous call to set_minmax(), and allows
//               the minimum and maximum values to be recomputed
//               normally.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
586 14 Dtool_qQJqTWqZ 0 6 612 2938 0 14 Dtool_qQJqTWqZ 948 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_vertices_per_primitive
//       Access: Published, Virtual
//  Description: If the primitive type is a simple type in which all
//               primitives have the same number of vertices, like
//               triangles, returns the number of vertices per
//               primitive.  If the primitive type is a more complex
//               type in which different primitives might have
//               different numbers of vertices, for instance a
//               triangle strip, returns 0.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
587 14 Dtool_qQJqUxr2 0 6 613 2938 0 14 Dtool_qQJqUxr2 654 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_min_num_vertices_per_primitive
//       Access: Published, Virtual
//  Description: Returns the minimum number of vertices that must be
//               added before close_primitive() may legally be called.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
588 14 Dtool_qQJqUSE8 0 6 614 2938 0 14 Dtool_qQJqUSE8 845 ////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_unused_vertices_per_primitive
//       Access: Published, Virtual
//  Description: Returns the number of vertices that are added between
//               primitives that aren't, strictly speaking, part of
//               the primitives themselves.  This is used, for
//               instance, to define degenerate triangles to connect
//               otherwise disconnected triangle strips.
//
//               This method is intended for low-level usage only.
//               There are higher-level methods for more common usage.
//               We recommend you do not use this method directly.  If
//               you do, be sure you know what you are doing!
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
589 14 Dtool_qQJqPsal 0 7 615 2950 0 14 Dtool_qQJqPsal 0 0 
590 14 Dtool_qQJqlsEr 0 7 543 3007 0 14 Dtool_qQJqlsEr 0 1 4 this 3 3058  
591 14 Dtool_qQJqdtth 0 7 544 3058 1998 14 Dtool_qQJqdtth 0 1 4 this 3 3007  
592 14 Dtool_qQJqsYAl 0 6 545 2960 0 14 Dtool_qQJqsYAl 0 1 4 this 3 3058  
593 14 Dtool_qQJq94K1 0 7 546 3058 1998 14 Dtool_qQJq94K1 0 1 4 this 3 2960  
594 14 Dtool_qQJqboYF 0 7 617 3065 0 14 Dtool_qQJqboYF 757 // Filename: textureStage.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Copy Constructor
//       Access: Published
//  Description: Initialize the texture stage from other
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3065  
595 14 Dtool_qQJqMbzz 0 7 617 3065 0 14 Dtool_qQJqMbzz 269 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Constructor
//       Access: Published
//  Description: Initialize the texture stage at construction
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
596 14 Dtool_qQJqAOWV 0 7 618 3065 0 14 Dtool_qQJqAOWV 262 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator =
//       Access: Published
//  Description: just copy the members of other to this
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  4 copy 1 3066  
597 14 Dtool_qQJqCd_b 0 4 623 2934 0 14 Dtool_qQJqCd_b 260 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_name
//       Access: Published
//  Description: Changes the name of this texture stage
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  4 name 1 2929  
598 14 Dtool_qQJqqybK 0 6 624 2929 0 14 Dtool_qQJqqybK 260 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_name
//       Access: Published
//  Description: Returns the name of this texture stage
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
599 14 Dtool_qQJqx_xd 0 4 625 2934 0 14 Dtool_qQJqx_xd 768 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_sort
//       Access: Published
//  Description: Changes the order in which the texture associated
//               with this stage is rendered relative to the other
//               texture stages.  When geometry is rendered with
//               multiple textures, the textures are rendered in order
//               from the lowest sort number to the highest sort
//               number.
//
//               Also see set_priority(), which is used to select the
//               most important textures for rendering when some must
//               be omitted because of hardware limitations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  4 sort 1 2938  
600 14 Dtool_qQJqediB 0 6 626 2938 0 14 Dtool_qQJqediB 267 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_sort
//       Access: Published
//  Description: Returns the sort order of this texture stage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
601 14 Dtool_qQJq53u_ 0 4 627 2934 0 14 Dtool_qQJq53u_ 919 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_priority
//       Access: Published
//  Description: Changes the relative importance of the texture
//               associated with this stage relative to the other
//               texture stages that are applied simultaneously.
//
//               This is unrelated to set_sort(), which controls the
//               order in which multiple textures are applied.  The
//               priority number is used to decide which of the
//               requested textures are to be selected for rendering
//               when more textures are requested than the hardware
//               will support.  The highest-priority n textures are
//               selected for rendering, and then rendered in order by
//               their sort factor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  8 priority 1 2938  
602 14 Dtool_qQJqvd5l 0 6 628 2938 0 14 Dtool_qQJqvd5l 406 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_priority
//       Access: Published
//  Description: Returns the priority associated with this stage.
//
//               This is specially helpful for cards that do not
//               support more than n stages of multi-texturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
603 14 Dtool_qQJqIE53 0 4 629 2934 0 14 Dtool_qQJqIE53 412 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  4 name 1 2946  
604 14 Dtool_qQJqSh4R 0 4 629 2934 0 14 Dtool_qQJqSh4R 412 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  13 texcoord_name 1 2929  
605 14 Dtool_qQJq6ntn 0 7 630 2946 0 14 Dtool_qQJq6ntn 255 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_texcoord_name
//       Access: Published
//  Description: Returns the InternalName
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
606 14 Dtool_qQJq_lwU 0 4 631 2934 0 14 Dtool_qQJq_lwU 256 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_mode
//       Access: Published
//  Description: Set the mode of this texture stage
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  4 mode 1 2877  
607 14 Dtool_qQJqHG0A 0 6 632 2877 0 14 Dtool_qQJqHG0A 251 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_mode
//       Access: Published
//  Description: Return the mode of this stage
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
608 14 Dtool_qQJqQ9nf 0 6 633 2935 0 14 Dtool_qQJqQ9nf 416 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::is_fixed_function
//       Access: Published
//  Description: Returns true if the TextureStage is relevant to
//               the classic fixed function pipeline.  This excludes
//               texture stages such as normal mapping and the like.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
609 14 Dtool_qQJqtRyD 0 4 634 2934 0 14 Dtool_qQJqtRyD 251 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_color
//       Access: Published
//  Description: Set the color for this stage
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  5 color 1 3048  
610 14 Dtool_qQJqX3mA 0 7 635 3068 0 14 Dtool_qQJqX3mA 254 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_color
//       Access: Published
//  Description: return the color for this stage
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
611 14 Dtool_qQJqjqP6 0 4 636 2934 0 14 Dtool_qQJqjqP6 490 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when the mode is
//               CM_combine.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  9 rgb_scale 1 2938  
612 14 Dtool_qQJqb_0B 0 6 637 2938 0 14 Dtool_qQJqb_0B 247 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_rgb_scale
//       Access: Published
//  Description: See set_rgb_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
613 14 Dtool_qQJqRljB 0 4 638 2934 0 14 Dtool_qQJqRljB 465 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when the mode is CM_combine.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  11 alpha_scale 1 2938  
614 14 Dtool_qQJqABTl 0 6 639 2938 0 14 Dtool_qQJqABTl 251 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_alpha_scale
//       Access: Published
//  Description: See set_alpha_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
615 14 Dtool_qQJqIuf8 0 4 640 2934 0 14 Dtool_qQJqIuf8 825 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage will be supplied as the
//               "last_saved_result" source for any future stages,
//               until the next TextureStage with a saved_result set
//               true is encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  12 saved_result 1 2935  
616 14 Dtool_qQJq_NSV 0 6 641 2935 0 14 Dtool_qQJq_NSV 324 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
617 14 Dtool_qQJqO2iR 0 4 642 2934 0 14 Dtool_qQJqO2iR 654 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_tex_view_offset
//       Access: Published
//  Description: Sets the tex_view_offset value.  This is used only
//               when a special multiview texture is bound to the
//               TextureStage, and it selects the particular view of
//               the texture that is to be used.
//
//               This value is added to the similar parameter on
//               DisplayRegion to derive the final texture view index
//               that is selected for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3065  15 tex_view_offset 1 2938  
618 14 Dtool_qQJqzas7 0 6 643 2938 0 14 Dtool_qQJqzas7 328 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_tex_view_offset
//       Access: Published
//  Description: Returns the current setting of the tex_view_offset.
//               See set_tex_view_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
619 14 Dtool_qQJqjFHN 0 4 644 2934 0 14 Dtool_qQJqjFHN 384 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  
620 14 Dtool_qQJqgYLT 0 4 644 2934 0 14 Dtool_qQJqgYLT 437 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  7 source1 1 2879  8 operand1 1 2880  
621 14 Dtool_qQJqmXix 0 4 644 2934 0 14 Dtool_qQJqmXix 388 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  7 source1 1 2879  8 operand1 1 2880  7 source2 1 2879  8 operand2 1 2880  
622 14 Dtool_qQJq0fyd 0 6 645 2878 0 14 Dtool_qQJq0fyd 258 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_mode
//       Access: Published
//  Description: Get the combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
623 14 Dtool_qQJqIBF9 0 6 646 2938 0 14 Dtool_qQJqIBF9 401 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_rgb_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_rgb_sourceN() and
//               get_combine_rgb_operandN().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
624 14 Dtool_qQJqqKNk 0 6 647 2879 0 14 Dtool_qQJqqKNk 268 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source0
//       Access: Published
//  Description: Get source0 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
625 14 Dtool_qQJqNrxE 0 6 648 2880 0 14 Dtool_qQJqNrxE 270 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand0
//       Access: Published
//  Description: Get operand0 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
626 14 Dtool_qQJqrKSy 0 6 649 2879 0 14 Dtool_qQJqrKSy 268 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source1
//       Access: Published
//  Description: Get source1 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
627 14 Dtool_qQJqkrRI 0 6 650 2880 0 14 Dtool_qQJqkrRI 270 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand1
//       Access: Published
//  Description: Get operand1 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
628 14 Dtool_qQJqpKbA 0 6 651 2879 0 14 Dtool_qQJqpKbA 268 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source2
//       Access: Published
//  Description: Get source2 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
629 14 Dtool_qQJq7oxL 0 6 652 2880 0 14 Dtool_qQJq7oxL 270 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand2
//       Access: Published
//  Description: Get operand2 of combine_rgb_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
630 14 Dtool_qQJqrsCd 0 4 653 2934 0 14 Dtool_qQJqrsCd 386 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  
631 14 Dtool_qQJquvSR 0 4 653 2934 0 14 Dtool_qQJquvSR 439 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  7 source1 1 2879  8 operand1 1 2880  
632 14 Dtool_qQJqjhJH 0 4 653 2934 0 14 Dtool_qQJqjhJH 390 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3065  4 mode 1 2878  7 source0 1 2879  8 operand0 1 2880  7 source1 1 2879  8 operand1 1 2880  7 source2 1 2879  8 operand2 1 2880  
633 14 Dtool_qQJqTu_C 0 6 654 2878 0 14 Dtool_qQJqTu_C 253 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha
//       Access: Published
//  Description: Get combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
634 14 Dtool_qQJqOFQQ 0 6 655 2938 0 14 Dtool_qQJqOFQQ 407 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_alpha_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_alpha_sourceN() and
//               get_combine_alpha_operandN().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
635 14 Dtool_qQJqqzUQ 0 6 656 2879 0 14 Dtool_qQJqqzUQ 272 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source0
//       Access: Published
//  Description: Get source0 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
636 14 Dtool_qQJq7D7X 0 6 657 2880 0 14 Dtool_qQJq7D7X 274 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand0
//       Access: Published
//  Description: Get operand0 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
637 14 Dtool_qQJqEkUA 0 6 658 2879 0 14 Dtool_qQJqEkUA 272 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source1
//       Access: Published
//  Description: Get source1 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
638 14 Dtool_qQJqDSFY 0 6 659 2880 0 14 Dtool_qQJqDSFY 274 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand1
//       Access: Published
//  Description: Get operand1 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
639 14 Dtool_qQJquaUw 0 6 660 2879 0 14 Dtool_qQJquaUw 272 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source2
//       Access: Published
//  Description: Get source2 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
640 14 Dtool_qQJqLhOY 0 6 661 2880 0 14 Dtool_qQJqLhOY 274 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand2
//       Access: Published
//  Description: Get operand2 of combine_alpha_mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
641 14 Dtool_qQJqQupz 0 6 662 2935 0 14 Dtool_qQJqQupz 377 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::involves_color_scale
//       Access: Published
//  Description: Returns true if the TextureStage is affected by the
//               setting of the current ColorScaleAttrib, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
642 14 Dtool_qQJqMbyj 0 6 663 2935 0 14 Dtool_qQJqMbyj 364 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_color
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               whatever color is specified in set_color(), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
643 14 Dtool_qQJqp2np 0 6 664 2935 0 14 Dtool_qQJqp2np 331 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_primary_color
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               the CS_primary_color combine source.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
644 14 Dtool_qQJq17UF 0 6 665 2935 0 14 Dtool_qQJq17UF 335 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_last_saved_result
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               the CS_primary_color combine source.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
645 14 Dtool_qQJqhPPh 0 6 666 2935 0 14 Dtool_qQJqhPPh 224 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  5 other 1 3066  
646 14 Dtool_qQJqSGPZ 0 6 667 2935 0 14 Dtool_qQJqSGPZ 224 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  5 other 1 3066  
647 14 Dtool_qQJqc8r6 0 6 668 2935 0 14 Dtool_qQJqc8r6 223 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator <
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  5 other 1 3066  
648 14 Dtool_qQJqS7S7 0 6 669 2938 0 14 Dtool_qQJqS7S7 540 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this TextureStage
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.  The
//               sorting order is arbitrary and largely meaningless,
//               except to differentiate different stages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  5 other 1 3066  
649 14 Dtool_qQJqMLKu 0 4 670 2934 0 14 Dtool_qQJqMLKu 256 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Writes the details of this stage
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  3 out 1 2936  
650 14 Dtool_qQJqkmyF 0 4 671 2934 0 14 Dtool_qQJqkmyF 249 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Just a single line output
//////////////////////////////////////////////////////////////////// 2 4 this 3 3066  3 out 1 2936  
651 14 Dtool_qQJqHR5s 0 7 672 3065 0 14 Dtool_qQJqHR5s 447 ////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_default
//       Access: Published, Static
//  Description: Returns the default TextureStage that will be used
//               for all texturing that does not name a particular
//               stage.  This generally handles the normal
//               single-texture case.
//////////////////////////////////////////////////////////////////// 0 
652 14 Dtool_qQJqpjIT 0 7 673 2950 0 14 Dtool_qQJqpjIT 0 0 
653 14 Dtool_qQJqA5hw 0 7 679 3069 2125 14 Dtool_qQJqA5hw 217 ////////////////////////////////////////////////////////////////////
//     Function: Geom::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 data 1 2964  
654 14 Dtool_qQJqk_XE 0 7 680 3069 2125 14 Dtool_qQJqk_XE 460 ////////////////////////////////////////////////////////////////////
//     Function: Geom::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a Geom that is actively
//               being used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  4 copy 1 3070  
655 14 Dtool_qQJqqLk7 0 4 682 2934 0 14 Dtool_qQJqqLk7 0 2 4 this 3 3069  4 size 1 2930  
656 14 Dtool_qQJqIdD3 0 7 685 3069 2125 14 Dtool_qQJqIdD3 458 ////////////////////////////////////////////////////////////////////
//     Function: Geom::make_copy
//       Access: Protected, Virtual
//  Description: Returns a newly-allocated Geom that is a shallow copy
//               of this one.  It will be a different Geom pointer,
//               but its internal data may or may not be shared with
//               that of the original Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
657 14 Dtool_qQJqznC4 0 6 686 2837 0 14 Dtool_qQJqznC4 1144 // Filename: geom.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive_type
//       Access: Published
//  Description: Returns the fundamental primitive type that is common
//               to all GeomPrimitives added within the Geom.  All
//               nested primitives within a particular Geom must be
//               the same type (that is, you can mix triangles and
//               tristrips, because they are both the same fundamental
//               type PT_polygons, but you cannot mix triangles and
//               points withn the same Geom).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
658 14 Dtool_qQJqhDDD 0 6 687 2836 0 14 Dtool_qQJqhDDD 359 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_shade_model
//       Access: Published
//  Description: Returns the shade model common to all of the
//               individual GeomPrimitives that have been added to the
//               geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
659 14 Dtool_qQJq18Ae 0 6 688 2938 0 14 Dtool_qQJq18Ae 374 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_geom_rendering
//       Access: Published
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
660 14 Dtool_qQJqiZFS 0 6 689 2834 0 14 Dtool_qQJqiZFS 381 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_usage_hint
//       Access: Published
//  Description: Returns the minimum (i.e. most dynamic) usage_hint
//               among all of the individual GeomPrimitives that have
//               been added to the geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
661 14 Dtool_qQJqSB4T 0 4 690 2934 0 14 Dtool_qQJqSB4T 558 ////////////////////////////////////////////////////////////////////
//     Function: Geom::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for all of the primitives
//               on this Geom to the same value.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  10 usage_hint 1 2834  
662 14 Dtool_qQJqlhS_ 0 7 691 2964 0 14 Dtool_qQJqlhS_ 387 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_vertex_data
//       Access: Published
//  Description: Returns a const pointer to the GeomVertexData,
//               for application code to directly examine (but not
//               modify) the geom's underlying data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  14 current_thread 1 2999  
663 14 Dtool_qQJqohq0 0 7 691 2964 0 14 Dtool_qQJqohq0 387 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_vertex_data
//       Access: Published
//  Description: Returns a const pointer to the GeomVertexData,
//               for application code to directly examine (but not
//               modify) the geom's underlying data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
664 14 Dtool_qQJqAtYT 0 7 692 3047 1929 14 Dtool_qQJqAtYT 583 ////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_vertex_data
//       Access: Published
//  Description: Returns a modifiable pointer to the GeomVertexData,
//               so that application code may directly maniuplate the
//               geom's underlying data.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
665 14 Dtool_qQJqWBrG 0 4 693 2934 0 14 Dtool_qQJqWBrG 512 ////////////////////////////////////////////////////////////////////
//     Function: Geom::set_vertex_data
//       Access: Published
//  Description: Replaces the Geom's underlying vertex data table with
//               a completely new table.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  4 data 1 2964  
666 14 Dtool_qQJqCOPz 0 4 694 2934 0 14 Dtool_qQJqCOPz 847 ////////////////////////////////////////////////////////////////////
//     Function: Geom::offset_vertices
//       Access: Published
//  Description: Replaces a Geom's vertex table with a new table, and
//               simultaneously adds the indicated offset to all
//               vertex references within the Geom's primitives.  This
//               is intended to be used to combine multiple
//               GeomVertexDatas from different Geoms into a single
//               big buffer, with each Geom referencing a subset of
//               the vertices in the buffer.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  4 data 1 2964  6 offset 1 2938  
667 14 Dtool_qQJqM2BD 0 6 695 2938 0 14 Dtool_qQJqM2BD 728 ////////////////////////////////////////////////////////////////////
//     Function: Geom::make_nonindexed
//       Access: Published
//  Description: Converts the geom from indexed to nonindexed by
//               duplicating vertices as necessary.  If composite_only
//               is true, then only composite primitives such as
//               trifans and tristrips are converted.  Returns the
//               number of GeomPrimitive objects converted.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  14 composite_only 1 2935  
668 14 Dtool_qQJqjKBW 0 6 696 2935 0 14 Dtool_qQJqjKBW 337 ////////////////////////////////////////////////////////////////////
//     Function: Geom::is_empty
//       Access: Published
//  Description: Returns true if there appear to be no vertices to be
//               rendered by this Geom, false if has some actual data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
669 14 Dtool_qQJqLxLL 0 6 697 2938 0 14 Dtool_qQJqLxLL 395 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_primitives
//       Access: Published
//  Description: Returns the number of GeomPrimitive objects stored
//               within the Geom, each of which represents a number of
//               primitives of a particular type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
670 14 Dtool_qQJqHXk3 0 7 698 3059 0 14 Dtool_qQJqHXk3 464 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive
//       Access: Published
//  Description: Returns a const pointer to the ith GeomPrimitive
//               object stored within the Geom.  Use this call only to
//               inspect the ith object; use modify_primitive() or
//               set_primitive() if you want to modify it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  1 i 1 2938  
671 14 Dtool_qQJqtI4K 0 7 699 3058 1998 14 Dtool_qQJqtI4K 632 ////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_primitive
//       Access: Published
//  Description: Returns a modifiable pointer to the ith GeomPrimitive
//               object stored within the Geom, so application code
//               can directly manipulate the properties of this
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  1 i 1 2938  
672 14 Dtool_qQJqvY3W 0 4 700 2934 0 14 Dtool_qQJqvY3W 514 ////////////////////////////////////////////////////////////////////
//     Function: Geom::set_primitive
//       Access: Published
//  Description: Replaces the ith GeomPrimitive object stored within
//               the Geom with the new object.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  1 i 1 2938  9 primitive 1 3059  
673 14 Dtool_qQJq4qtW 0 4 701 2934 0 14 Dtool_qQJq4qtW 637 ////////////////////////////////////////////////////////////////////
//     Function: Geom::add_primitive
//       Access: Published
//  Description: Adds a new GeomPrimitive structure to the Geom
//               object.  This specifies a particular subset of
//               vertices that are used to define geometric primitives
//               of the indicated type.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  9 primitive 1 3059  
674 14 Dtool_qQJqmtla 0 4 702 2934 0 14 Dtool_qQJqmtla 459 ////////////////////////////////////////////////////////////////////
//     Function: Geom::remove_primitive
//       Access: Published
//  Description: Removes the ith primitive from the list.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  1 i 1 2938  
675 14 Dtool_qQJqYAGE 0 4 703 2934 0 14 Dtool_qQJqYAGE 633 ////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_primitives
//       Access: Published
//  Description: Removes all the primitives from the Geom object (but
//               keeps the same table of vertices).  You may then
//               re-add primitives one at a time via calls to
//               add_primitive().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
676 14 Dtool_qQJq6GgV 0 7 704 3069 2125 14 Dtool_qQJq6GgV 354 ////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::decompose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
677 14 Dtool_qQJqLQaK 0 7 705 3069 2125 14 Dtool_qQJqLQaK 357 ////////////////////////////////////////////////////////////////////
//     Function: Geom::doubleside
//       Access: Published
//  Description: Doublesides all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::doubleside().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
678 14 Dtool_qQJqEJJU 0 7 706 3069 2125 14 Dtool_qQJqEJJU 348 ////////////////////////////////////////////////////////////////////
//     Function: Geom::reverse
//       Access: Published
//  Description: Reverses all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::reverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
679 14 Dtool_qQJqPWLU 0 7 707 3069 2125 14 Dtool_qQJqPWLU 345 ////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::rotate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
680 14 Dtool_qQJqctAJ 0 7 708 3069 2125 14 Dtool_qQJqctAJ 890 ////////////////////////////////////////////////////////////////////
//     Function: Geom::unify
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single (or as few as possible, within the
//               constraints of max_indices) primitive objects.  This
//               may require decomposing the primitives if, for
//               instance, the Geom contains both triangle strips and
//               triangle fans.
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3070  11 max_indices 1 2938  14 preserve_order 1 2935  
681 14 Dtool_qQJqqMSd 0 7 709 3069 2125 14 Dtool_qQJqqMSd 319 ////////////////////////////////////////////////////////////////////
//     Function: Geom::make_points
//       Access: Published
//  Description: Returns a new Geom with points at all the vertices.
//               See GeomPrimitive::make_points().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
682 14 Dtool_qQJqlrdj 0 4 710 2934 0 14 Dtool_qQJqlrdj 568 ////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose_in_place
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::decompose().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
683 14 Dtool_qQJqRWxI 0 4 711 2934 0 14 Dtool_qQJqRWxI 571 ////////////////////////////////////////////////////////////////////
//     Function: Geom::doubleside_in_place
//       Access: Published
//  Description: Doublesides all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::doubleside().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
684 14 Dtool_qQJqDe1_ 0 4 712 2934 0 14 Dtool_qQJqDe1_ 562 ////////////////////////////////////////////////////////////////////
//     Function: Geom::reverse_in_place
//       Access: Published
//  Description: Reverses all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::reverse().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
685 14 Dtool_qQJqHZg5 0 4 713 2934 0 14 Dtool_qQJqHZg5 559 ////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate_in_place
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::rotate().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
686 14 Dtool_qQJqiehR 0 4 714 2934 0 14 Dtool_qQJqiehR 1096 ////////////////////////////////////////////////////////////////////
//     Function: Geom::unify_in_place
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single (or as few as possible, within the
//               constraints of max_indices) primitive objects.  This
//               may require decomposing the primitives if, for
//               instance, the Geom contains both triangle strips and
//               triangle fans.
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  11 max_indices 1 2938  14 preserve_order 1 2935  
687 14 Dtool_qQJqJfCo 0 4 715 2934 0 14 Dtool_qQJqJfCo 567 ////////////////////////////////////////////////////////////////////
//     Function: Geom::make_points_in_place
//       Access: Published
//  Description: Replaces the GeomPrimitives within this Geom with
//               corresponding GeomPoints.  See
//               GeomPrimitive::make_points().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
688 14 Dtool_qQJqyUv9 0 6 716 2935 0 14 Dtool_qQJqyUv9 792 ////////////////////////////////////////////////////////////////////
//     Function: Geom::copy_primitives_from
//       Access: Published, Virtual
//  Description: Copies the primitives from the indicated Geom into
//               this one.  This does require that both Geoms contain
//               the same fundamental type primitives, both have a
//               compatible shade model, and both use the same
//               GeomVertexData.  Both Geoms must also be the same
//               specific class type (i.e. if one is a GeomTextGlyph,
//               they both must be.)
//
//               Returns true if the copy is successful, or false
//               otherwise (because the Geoms were mismatched).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  5 other 1 3070  
689 14 Dtool_qQJqgSfK 0 6 717 2938 0 14 Dtool_qQJqgSfK 341 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the geom and
//               its primitives (but not including its vertex table).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
690 14 Dtool_qQJqKP2k 0 7 718 2997 0 14 Dtool_qQJqKP2k 564 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time any of the primitives in
//               the Geom is modified, or the set of primitives is
//               modified.  However, this does not include
//               modifications to the vertex data, which should be
//               tested separately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  14 current_thread 1 2999  
691 14 Dtool_qQJqHKFV 0 7 718 2997 0 14 Dtool_qQJqHKFV 564 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time any of the primitives in
//               the Geom is modified, or the set of primitives is
//               modified.  However, this does not include
//               modifications to the vertex data, which should be
//               tested separately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
692 14 Dtool_qQJqs4wf 0 6 719 2935 0 14 Dtool_qQJqs4wf 571 ////////////////////////////////////////////////////////////////////
//     Function: Geom::request_resident
//       Access: Published
//  Description: Returns true if all the primitive arrays are
//               currently resident in memory.  If this returns false,
//               the data will be brought back into memory shortly;
//               try again later.
//
//               This does not also test the Geom's associated
//               GeomVertexData.  That must be tested separately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
693 14 Dtool_qQJqYlMV 0 4 720 2934 0 14 Dtool_qQJqYlMV 808 ////////////////////////////////////////////////////////////////////
//     Function: Geom::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform to all of the
//               vertices in the Geom.  If the Geom happens to share a
//               vertex table with another Geom, this operation will
//               duplicate the vertex table instead of breaking the
//               other Geom; however, if multiple Geoms with shared
//               tables are transformed by the same matrix, they will
//               no longer share tables after the operation.  Consider
//               using the GeomTransformer if you will be applying the
//               same transform to multiple Geoms.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  3 mat 1 3015  
694 14 Dtool_qQJqRtQb 0 6 721 2935 0 14 Dtool_qQJqRtQb 460 ////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the geom's GeomVertexData.  Returns true if the geom
//               appears to be valid, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
695 14 Dtool_qQJqdH6F 0 6 721 2935 0 14 Dtool_qQJqdH6F 463 ////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the indicated GeomVertexData.  Returns true if the
//               geom appears to be valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  11 vertex_data 1 2964  
696 14 Dtool_qQJq9WkK 0 7 722 3074 0 14 Dtool_qQJq9WkK 257 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds
//       Access: Published
//  Description: Returns the bounding volume for the Geom.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  14 current_thread 1 2999  
697 14 Dtool_qQJq5pRF 0 7 722 3074 0 14 Dtool_qQJq5pRF 257 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds
//       Access: Published
//  Description: Returns the bounding volume for the Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
698 14 Dtool_qQJqkkOF 0 6 723 2938 0 14 Dtool_qQJqkkOF 316 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_nested_vertices
//       Access: Published
//  Description: Returns the number of vertices rendered by all
//               primitives within the Geom.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  14 current_thread 1 2999  
699 14 Dtool_qQJq7ykk 0 6 723 2938 0 14 Dtool_qQJq7ykk 316 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_nested_vertices
//       Access: Published
//  Description: Returns the number of vertices rendered by all
//               primitives within the Geom.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
700 14 Dtool_qQJqM7bs 0 4 724 2934 0 14 Dtool_qQJqM7bs 390 ////////////////////////////////////////////////////////////////////
//     Function: Geom::mark_bounds_stale
//       Access: Published
//  Description: Marks the bounding volume of the Geom as stale so
//               that it should be recomputed.  Usually it is not
//               necessary to call this explicitly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
701 14 Dtool_qQJq_N_x 0 4 725 2934 0 14 Dtool_qQJq_N_x 969 ////////////////////////////////////////////////////////////////////
//     Function: Geom::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this Geom.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               a BoundingBox is created.
//
//               This affects the implicit bounding volume only.  If
//               an explicit bounding volume is set on the Geom with
//               set_bounds(), that bounding volume type is used.
//               (This is different behavior from the similar method
//               on PandaNode.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  11 bounds_type 1 3075  
702 14 Dtool_qQJqQxyc 0 6 726 3075 0 14 Dtool_qQJqQxyc 298 ////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds_type
//       Access: Published
//  Description: Returns the bounding volume type set with
//               set_bounds_type().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3070  
703 14 Dtool_qQJqnNw_ 0 4 727 2934 0 14 Dtool_qQJqnNw_ 726 ////////////////////////////////////////////////////////////////////
//     Function: Geom::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed; call clear_bounds() if you would like to
//               return the bounding volume to its default behavior.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  6 volume 1 3074  
704 14 Dtool_qQJq92vG 0 4 728 2934 0 14 Dtool_qQJq92vG 614 ////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the bounding volume to be
//               automatically computed once more based on the
//               vertices.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
705 14 Dtool_qQJqrXR3 0 4 729 2934 0 14 Dtool_qQJqrXR3 221 ////////////////////////////////////////////////////////////////////
//     Function: Geom::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  3 out 1 2936  
706 14 Dtool_qQJqC21S 0 4 730 2934 0 14 Dtool_qQJqC21S 220 ////////////////////////////////////////////////////////////////////
//     Function: Geom::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3070  3 out 1 2936  12 indent_level 1 2938  
707 14 Dtool_qQJq0uiX 0 4 730 2934 0 14 Dtool_qQJq0uiX 220 ////////////////////////////////////////////////////////////////////
//     Function: Geom::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  3 out 1 2936  
708 14 Dtool_qQJqr67p 0 4 731 2934 0 14 Dtool_qQJqr67p 546 ////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
709 14 Dtool_qQJqC0IT 0 4 732 2934 0 14 Dtool_qQJqC0IT 598 ////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  14 current_thread 1 2999  
710 14 Dtool_qQJqkUN5 0 4 733 2934 0 14 Dtool_qQJqkUN5 640 ////////////////////////////////////////////////////////////////////
//     Function: Geom::prepare
//       Access: Published
//  Description: Indicates that the geom should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               geom is already loaded into geom memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               geoms from a user interface standpoint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  16 prepared_objects 1 3003  
711 14 Dtool_qQJqir4R 0 6 734 2935 0 14 Dtool_qQJqir4R 368 ////////////////////////////////////////////////////////////////////
//     Function: Geom::is_prepared
//       Access: Published
//  Description: Returns true if the geom has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3070  16 prepared_objects 1 3003  
712 14 Dtool_qQJqYDlG 0 6 735 2935 0 14 Dtool_qQJqYDlG 388 ////////////////////////////////////////////////////////////////////
//     Function: Geom::release
//       Access: Published
//  Description: Frees the geom context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  16 prepared_objects 1 3003  
713 14 Dtool_qQJqtSn_ 0 6 736 2938 0 14 Dtool_qQJqtSn_ 386 ////////////////////////////////////////////////////////////////////
//     Function: Geom::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the geom has been declared.  Returns the number of
//               contexts which have been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
714 14 Dtool_qQJqptAs 0 6 737 3076 0 14 Dtool_qQJqptAs 871 ////////////////////////////////////////////////////////////////////
//     Function: Geom::prepare_now
//       Access: Public
//  Description: Creates a context for the geom on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) GeomContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               geoms.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a geom does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  16 prepared_objects 1 3003  3 gsg 1 3004  
715 14 Dtool_qQJqyQKN 0 7 738 2950 0 14 Dtool_qQJqyQKN 0 0 
716 14 Dtool_qQJqMO36 0 7 675 3007 0 14 Dtool_qQJqMO36 0 1 4 this 3 3069  
717 14 Dtool_qQJq7MTJ 0 7 676 3069 2125 14 Dtool_qQJq7MTJ 0 1 4 this 3 3007  
718 14 Dtool_qQJq9JLK 0 6 677 2960 0 14 Dtool_qQJq9JLK 0 1 4 this 3 3069  
719 14 Dtool_qQJqcioB 0 7 678 3069 2125 14 Dtool_qQJqcioB 0 1 4 this 3 2960  
720 14 Dtool_qQJqonzp 0 7 740 3069 2125 14 Dtool_qQJqonzp 220 ////////////////////////////////////////////////////////////////////
//     Function: GeomContext::get_geom
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3077  
721 14 Dtool_qQJqZbHT 0 7 741 2950 0 14 Dtool_qQJqZbHT 0 0 
722 14 Dtool_qQJqlaZi 0 7 744 3079 1998 14 Dtool_qQJqlaZi 222 ////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
723 14 Dtool_qQJqZdk3 0 7 744 3079 1998 14 Dtool_qQJqZdk3 227 ////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3080  
724 14 Dtool_qQJq_7pA 0 7 745 2950 0 14 Dtool_qQJq_7pA 0 0 
725 14 Dtool_qQJq3Ci0 0 7 747 3082 1998 14 Dtool_qQJq3Ci0 227 ////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
726 14 Dtool_qQJqRSrb 0 7 747 3082 1998 14 Dtool_qQJqRSrb 232 ////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3083  
727 14 Dtool_qQJqnUZ3 0 7 748 2950 0 14 Dtool_qQJqnUZ3 0 0 
728 14 Dtool_qQJqDbke 0 7 750 3085 1998 14 Dtool_qQJqDbke 223 ////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
729 14 Dtool_qQJq2L6_ 0 7 750 3085 1998 14 Dtool_qQJq2L6_ 228 ////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3086  
730 14 Dtool_qQJqmrqc 0 7 751 2950 0 14 Dtool_qQJqmrqc 0 0 
731 14 Dtool_qQJqlM_V 0 7 753 3088 1998 14 Dtool_qQJqlM_V 226 ////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
732 14 Dtool_qQJql_JA 0 7 753 3088 1998 14 Dtool_qQJql_JA 231 ////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3089  
733 14 Dtool_qQJqNvut 0 7 754 2950 0 14 Dtool_qQJqNvut 0 0 
734 14 Dtool_qQJqBV_D 0 7 756 3091 1998 14 Dtool_qQJqBV_D 224 ////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
735 14 Dtool_qQJqHwh3 0 7 756 3091 1998 14 Dtool_qQJqHwh3 229 ////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3092  
736 14 Dtool_qQJqe_RP 0 7 757 2950 0 14 Dtool_qQJqe_RP 0 0 
737 14 Dtool_qQJqxfLD 0 7 759 3094 1998 14 Dtool_qQJqxfLD 226 ////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 usage_hint 1 2834  
738 14 Dtool_qQJqARnF 0 7 759 3094 1998 14 Dtool_qQJqARnF 231 ////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3095  
739 14 Dtool_qQJqib35 0 7 760 2950 0 14 Dtool_qQJqib35 0 0 
740 14 Dtool_qQJqeBP0 0 7 762 3097 2200 14 Dtool_qQJqeBP0 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2957  14 current_thread 1 2999  
741 14 Dtool_qQJqmHyG 0 7 762 3097 2200 14 Dtool_qQJqmHyG 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 1 10 array_data 1 2957  
742 14 Dtool_qQJqHXtj 0 7 762 3097 2200 14 Dtool_qQJqHXtj 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 3 10 array_data 1 2957  6 column 1 2938  14 current_thread 1 2999  
743 14 Dtool_qQJqfOvI 0 7 762 3097 2200 14 Dtool_qQJqfOvI 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2957  6 column 1 2938  
744 14 Dtool_qQJq_TF4 0 7 762 3097 2200 14 Dtool_qQJq_TF4 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 2964  4 name 1 2947  14 current_thread 1 2999  
745 14 Dtool_qQJqFPmQ 0 7 762 3097 2200 14 Dtool_qQJqFPmQ 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 2964  4 name 1 2947  
746 14 Dtool_qQJqzNo1 0 7 762 3097 2200 14 Dtool_qQJqzNo1 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 2964  14 current_thread 1 2999  
747 14 Dtool_qQJqUq8_ 0 7 762 3097 2200 14 Dtool_qQJqUq8_ 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 1 11 vertex_data 1 2964  
748 14 Dtool_qQJqBv7a 0 7 762 3097 2200 14 Dtool_qQJqBv7a 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 2964  4 name 1 2929  14 current_thread 1 2999  
749 14 Dtool_qQJqxxdz 0 7 762 3097 2200 14 Dtool_qQJqxxdz 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 2964  4 name 1 2929  
750 14 Dtool_qQJqr9yT 0 7 762 3097 2200 14 Dtool_qQJqr9yT 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3098  
751 14 Dtool_qQJq0qj3 0 7 762 3097 2200 14 Dtool_qQJq0qj3 930 // Filename: geomVertexReader.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexReader.  You must use
//               the assignment operator to assign a valid
//               GeomVertexReader to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 2999  
752 14 Dtool_qQJqU4ZP 0 7 762 3097 2200 14 Dtool_qQJqU4ZP 930 // Filename: geomVertexReader.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexReader.  You must use
//               the assignment operator to assign a valid
//               GeomVertexReader to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 0 
753 14 Dtool_qQJqDEdr 0 6 763 3097 0 14 Dtool_qQJqDEdr 242 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  4 copy 1 3098  
754 14 Dtool_qQJq8urn 0 7 765 2964 0 14 Dtool_qQJq8urn 408 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               reader is processing.  This may return NULL if the
//               reader was constructed with just an array pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
755 14 Dtool_qQJq73al 0 7 766 2957 0 14 Dtool_qQJq73al 325 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               reader is currently processing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
756 14 Dtool_qQJqF5IG 0 7 767 3001 0 14 Dtool_qQJqF5IG 400 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array_handle
//       Access: Published
//  Description: Returns the read handle to the array object that the
//               read is currently processing.  This low-level call
//               should be used with caution.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
757 14 Dtool_qQJqPakB 0 6 768 2930 0 14 Dtool_qQJqPakB 459 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexReader directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
758 14 Dtool_qQJqmRbR 0 7 769 2999 0 14 Dtool_qQJqmRbR 359 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
759 14 Dtool_qQJqIfYI 0 4 770 2934 0 14 Dtool_qQJqIfYI 928 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_force
//       Access: Published
//  Description: Sets the value of the force flag.  When this is true
//               (the default), vertex data will be paged in from disk
//               if necessary.  When this is false, the GeomVertexData
//               will simply return a failure code when attempting to
//               read vertex data that is not resident (but will put
//               it on the queue to become resident later).
//
//               Normally, vertex data is always resident, so this
//               will not be an issue.  It is only possible for vertex
//               data to be nonresident if you have enabled vertex
//               paging via the GeomVertexArrayData and VertexDataPage
//               interfaces.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  5 force 1 2935  
760 14 Dtool_qQJqKuql 0 6 771 2935 0 14 Dtool_qQJqKuql 298 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_force
//       Access: Published
//  Description: Returns the value of the force flag.  See
//               set_force().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
761 14 Dtool_qQJquxhQ 0 6 772 2935 0 14 Dtool_qQJquxhQ 616 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  4 name 1 2947  
762 14 Dtool_qQJqR1Ec 0 6 772 2935 0 14 Dtool_qQJqR1Ec 616 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  4 name 1 2929  
763 14 Dtool_qQJqJFVC 0 6 772 2935 0 14 Dtool_qQJqJFVC 638 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  6 column 1 2938  
764 14 Dtool_qQJqIqjd 0 6 772 2935 0 14 Dtool_qQJqIqjd 638 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the indicated column
//               description on the given array.
//
//               This also resets the current read row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3097  5 array 1 2938  6 column 1 2951  
765 14 Dtool_qQJqQtEQ 0 4 773 2934 0 14 Dtool_qQJqQtEQ 272 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::clear
//       Access: Published
//  Description: Resets the GeomVertexReader to the initial state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
766 14 Dtool_qQJqqVEq 0 6 774 2935 0 14 Dtool_qQJqqVEq 445 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist (or if get_force() is false and the vertex data
//               is nonresident).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
767 14 Dtool_qQJqIsz6 0 6 775 2938 0 14 Dtool_qQJqIsz6 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the reader is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
768 14 Dtool_qQJqiUaj 0 6 776 2951 0 14 Dtool_qQJqiUaj 316 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               reader is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
769 14 Dtool_qQJqvEm8 0 4 777 2934 0 14 Dtool_qQJqvEm8 655 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  3 row 1 2938  
770 14 Dtool_qQJq9pTB 0 4 778 2934 0 14 Dtool_qQJq9pTB 533 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               reader will begin reading from the indicated row;
//               each subsequent get_data*() call will return the data
//               from the subsequent row.  If set_column() is called,
//               the reader will return to this row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3097  3 row 1 2938  
771 14 Dtool_qQJqVMpp 0 6 779 2938 0 14 Dtool_qQJqVMpp 375 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_start_row
//       Access: Published
//  Description: Returns the row index at which the reader started.
//               It will return to this row if you reset the current
//               column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
772 14 Dtool_qQJqGqgQ 0 6 780 2938 0 14 Dtool_qQJqGqgQ 339 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_read_row
//       Access: Published
//  Description: Returns the row index from which the data will be
//               retrieved by the next call to get_data*().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
773 14 Dtool_qQJqtH9p 0 6 781 2935 0 14 Dtool_qQJqtH9p 440 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::is_at_end
//       Access: Published
//  Description: Returns true if the reader is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to get_data*() will result in a
//               crash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3098  
774 14 Dtool_qQJqvgRZ 0 6 782 2939 0 14 Dtool_qQJqvgRZ 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
775 14 Dtool_qQJqvQzs 0 6 783 3100 0 14 Dtool_qQJqvQzs 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
776 14 Dtool_qQJqoAVA 0 6 784 3103 0 14 Dtool_qQJqoAVA 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
777 14 Dtool_qQJqow2T 0 6 785 3048 0 14 Dtool_qQJqow2T 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
778 14 Dtool_qQJqDgh3 0 6 786 3106 0 14 Dtool_qQJqDgh3 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
779 14 Dtool_qQJqcQDL 0 6 787 3107 0 14 Dtool_qQJqcQDL 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
780 14 Dtool_qQJqcAle 0 6 788 3110 0 14 Dtool_qQJqcAle 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
781 14 Dtool_qQJqcwGy 0 6 789 3113 0 14 Dtool_qQJqcwGy 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4d
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
782 14 Dtool_qQJqLRcd 0 6 790 2939 0 14 Dtool_qQJqLRcd 368 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
783 14 Dtool_qQJqLB_w 0 6 791 3100 0 14 Dtool_qQJqLB_w 368 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
784 14 Dtool_qQJqIxhE 0 6 792 3103 0 14 Dtool_qQJqIxhE 368 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
785 14 Dtool_qQJqIhDY 0 6 793 3048 0 14 Dtool_qQJqIhDY 368 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
786 14 Dtool_qQJqMh5r 0 6 794 2938 0 14 Dtool_qQJqMh5r 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
787 14 Dtool_qQJqMRb_ 0 4 795 2934 0 14 Dtool_qQJqMRb_ 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
788 14 Dtool_qQJqNB9S 0 4 796 2934 0 14 Dtool_qQJqNB9S 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
789 14 Dtool_qQJqNxem 0 4 797 2934 0 14 Dtool_qQJqNxem 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3097  
790 14 Dtool_qQJqWNtp 0 4 798 2934 0 14 Dtool_qQJqWNtp 224 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3098  3 out 1 2936  
791 14 Dtool_qQJqDYGf 0 7 800 3116 2237 14 Dtool_qQJqDYGf 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2995  14 current_thread 1 2999  
792 14 Dtool_qQJqm1bv 0 7 800 3116 2237 14 Dtool_qQJqm1bv 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 1 10 array_data 1 2995  
793 14 Dtool_qQJqBk28 0 7 800 3116 2237 14 Dtool_qQJqBk28 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 3 10 array_data 1 2995  6 column 1 2938  14 current_thread 1 2999  
794 14 Dtool_qQJq8wdd 0 7 800 3116 2237 14 Dtool_qQJq8wdd 322 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2995  6 column 1 2938  
795 14 Dtool_qQJqiSJf 0 7 800 3116 2237 14 Dtool_qQJqiSJf 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 3047  4 name 1 2947  14 current_thread 1 2999  
796 14 Dtool_qQJqOMjg 0 7 800 3116 2237 14 Dtool_qQJqOMjg 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  4 name 1 2947  
797 14 Dtool_qQJq_sLT 0 7 800 3116 2237 14 Dtool_qQJq_sLT 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  14 current_thread 1 2999  
798 14 Dtool_qQJqiuVb 0 7 800 3116 2237 14 Dtool_qQJqiuVb 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 1 11 vertex_data 1 3047  
799 14 Dtool_qQJqbStq 0 7 800 3116 2237 14 Dtool_qQJqbStq 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 3047  4 name 1 2929  14 current_thread 1 2999  
800 14 Dtool_qQJqvIHs 0 7 800 3116 2237 14 Dtool_qQJqvIHs 417 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  4 name 1 2929  
801 14 Dtool_qQJq3jti 0 7 800 3116 2237 14 Dtool_qQJq3jti 234 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3117  
802 14 Dtool_qQJqWOrH 0 7 800 3116 2237 14 Dtool_qQJqWOrH 930 // Filename: geomVertexWriter.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexWriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexWriter to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 2999  
803 14 Dtool_qQJq_1gf 0 7 800 3116 2237 14 Dtool_qQJq_1gf 930 // Filename: geomVertexWriter.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexWriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexWriter to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 0 
804 14 Dtool_qQJqR3bG 0 6 801 3116 0 14 Dtool_qQJqR3bG 242 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 copy 1 3117  
805 14 Dtool_qQJq1wqw 0 7 803 3047 1929 14 Dtool_qQJq1wqw 408 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               writer is processing.  This may return NULL if the
//               writer was constructed with just an array pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
806 14 Dtool_qQJq4pZu 0 7 804 2995 1779 14 Dtool_qQJq4pZu 325 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               writer is currently processing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
807 14 Dtool_qQJqefIP 0 7 805 3002 1814 14 Dtool_qQJqefIP 523 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array_handle
//       Access: Published
//  Description: Returns the write handle to the array object that the
//               writer is currently processing.  This low-level call
//               should be used with caution; be careful with
//               modifying the data in the handle out from under the
//               GeomVertexWriter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
808 14 Dtool_qQJqkglK 0 6 806 2930 0 14 Dtool_qQJqkglK 459 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexWriter directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
809 14 Dtool_qQJqRIaa 0 7 807 2999 0 14 Dtool_qQJqRIaa 359 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
810 14 Dtool_qQJqnXgZ 0 6 808 2935 0 14 Dtool_qQJqnXgZ 613 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 name 1 2947  
811 14 Dtool_qQJqAfCl 0 6 808 2935 0 14 Dtool_qQJqAfCl 617 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 name 1 2929  
812 14 Dtool_qQJq4bSL 0 6 808 2935 0 14 Dtool_qQJq4bSL 639 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  6 column 1 2938  
813 14 Dtool_qQJq5him 0 6 808 2935 0 14 Dtool_qQJq5him 639 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the indicated column
//               description on the given array.
//
//               This also resets the current write row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  5 array 1 2938  6 column 1 2951  
814 14 Dtool_qQJqh0DZ 0 4 809 2934 0 14 Dtool_qQJqh0DZ 272 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::clear
//       Access: Published
//  Description: Resets the GeomVertexWriter to the initial state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3116  
815 14 Dtool_qQJqTc4i 0 6 810 2935 0 14 Dtool_qQJqTc4i 597 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::reserve_num_rows
//       Access: Published
//  Description: This ensures that enough memory space for num_rows is
//               allocated, so that you may add up to num_rows rows
//               without causing a new memory allocation.  This is a
//               performance optimization only; it is especially
//               useful when you know the number of rows you will be
//               adding ahead of time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  8 num_rows 1 2938  
816 14 Dtool_qQJq7zCz 0 6 811 2935 0 14 Dtool_qQJq7zCz 364 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
817 14 Dtool_qQJqImzD 0 6 812 2938 0 14 Dtool_qQJqImzD 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the writer is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
818 14 Dtool_qQJqTOZs 0 6 813 2951 0 14 Dtool_qQJqTOZs 316 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               writer is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
819 14 Dtool_qQJqX9mF 0 4 814 2934 0 14 Dtool_qQJqX9mF 655 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  3 row 1 2938  
820 14 Dtool_qQJqk3SK 0 4 815 2934 0 14 Dtool_qQJqk3SK 530 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               writer will begin writing to the indicated row;
//               each subsequent set_data*() call will store the data
//               into the subsequent row.  If set_column() is called,
//               the writer will return to this row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  3 row 1 2938  
821 14 Dtool_qQJqiCoy 0 6 816 2938 0 14 Dtool_qQJqiCoy 376 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the writer
//               started.  It will return to this row if you reset
//               the current column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
822 14 Dtool_qQJqDv2U 0 6 817 2938 0 14 Dtool_qQJqDv2U 368 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_write_row
//       Access: Published
//  Description: Returns the row index to which the data will be
//               written at the next call to set_data*() or
//               add_data*().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
823 14 Dtool_qQJqqN8y 0 6 818 2935 0 14 Dtool_qQJqqN8y 509 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::is_at_end
//       Access: Published
//  Description: Returns true if the writer is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to set_data*() will result in a
//               crash, but another call to add_data*() will add a new
//               row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3117  
824 14 Dtool_qQJq8dnY 0 4 819 2934 0 14 Dtool_qQJq8dnY 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2939  
825 14 Dtool_qQJquO4g 0 4 820 2934 0 14 Dtool_qQJquO4g 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3100  
826 14 Dtool_qQJqmeMu 0 4 820 2934 0 14 Dtool_qQJqmeMu 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 2939  1 y 1 2939  
827 14 Dtool_qQJqH_73 0 4 821 2934 0 14 Dtool_qQJqH_73 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3103  
828 14 Dtool_qQJq_DXP 0 4 821 2934 0 14 Dtool_qQJq_DXP 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  
829 14 Dtool_qQJqfh9O 0 4 822 2934 0 14 Dtool_qQJqfh9O 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3048  
830 14 Dtool_qQJqKTZT 0 4 822 2934 0 14 Dtool_qQJqKTZT 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  1 w 1 2939  
831 14 Dtool_qQJqMHKv 0 4 823 2934 0 14 Dtool_qQJqMHKv 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1d
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3106  
832 14 Dtool_qQJqBWJf 0 4 824 2934 0 14 Dtool_qQJqBWJf 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3107  
833 14 Dtool_qQJqzkV3 0 4 824 2934 0 14 Dtool_qQJqzkV3 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 3106  1 y 1 3106  
834 14 Dtool_qQJqeZK2 0 4 825 2934 0 14 Dtool_qQJqeZK2 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3110  
835 14 Dtool_qQJqEWjv 0 4 825 2934 0 14 Dtool_qQJqEWjv 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 3106  1 y 1 3106  1 z 1 3106  
836 14 Dtool_qQJq2IMN 0 4 826 2934 0 14 Dtool_qQJq2IMN 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3113  
837 14 Dtool_qQJqK68x 0 4 826 2934 0 14 Dtool_qQJqK68x 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 3106  1 y 1 3106  1 z 1 3106  1 w 1 3106  
838 14 Dtool_qQJqALgB 0 4 827 2934 0 14 Dtool_qQJqALgB 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2939  
839 14 Dtool_qQJqlmr8 0 4 828 2934 0 14 Dtool_qQJqlmr8 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3100  
840 14 Dtool_qQJqoTF7 0 4 828 2934 0 14 Dtool_qQJqoTF7 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 2939  1 y 1 2939  
841 14 Dtool_qQJq7WSe 0 4 829 2934 0 14 Dtool_qQJq7WSe 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3103  
842 14 Dtool_qQJqkmAV 0 4 829 2934 0 14 Dtool_qQJqkmAV 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  
843 14 Dtool_qQJq4G9_ 0 4 830 2934 0 14 Dtool_qQJq4G9_ 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3048  
844 14 Dtool_qQJqyjDS 0 4 830 2934 0 14 Dtool_qQJqyjDS 428 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  1 w 1 2939  
845 14 Dtool_qQJqWrrr 0 4 831 2934 0 14 Dtool_qQJqWrrr 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2938  
846 14 Dtool_qQJqsRPt 0 4 832 2934 0 14 Dtool_qQJqsRPt 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 a 1 2938  1 b 1 2938  
847 14 Dtool_qQJqRmzc 0 4 833 2934 0 14 Dtool_qQJqRmzc 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 a 1 2938  1 b 1 2938  1 c 1 2938  
848 14 Dtool_qQJqdVco 0 4 834 2934 0 14 Dtool_qQJqdVco 429 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 a 1 2938  1 b 1 2938  1 c 1 2938  1 d 1 2938  
849 14 Dtool_qQJq5Qu1 0 4 835 2934 0 14 Dtool_qQJq5Qu1 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2939  
850 14 Dtool_qQJqsnA_ 0 4 836 2934 0 14 Dtool_qQJqsnA_ 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3100  
851 14 Dtool_qQJqn5UL 0 4 836 2934 0 14 Dtool_qQJqn5UL 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 2939  1 y 1 2939  
852 14 Dtool_qQJqEXCV 0 4 837 2934 0 14 Dtool_qQJqEXCV 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3103  
853 14 Dtool_qQJq72es 0 4 837 2934 0 14 Dtool_qQJq72es 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  
854 14 Dtool_qQJqdGEs 0 4 838 2934 0 14 Dtool_qQJqdGEs 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3048  
855 14 Dtool_qQJqNOgw 0 4 838 2934 0 14 Dtool_qQJqNOgw 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  1 w 1 2939  
856 14 Dtool_qQJqCaRM 0 4 839 2934 0 14 Dtool_qQJqCaRM 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1d
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3106  
857 14 Dtool_qQJq8cQ8 0 4 840 2934 0 14 Dtool_qQJq8cQ8 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3107  
858 14 Dtool_qQJqwNcU 0 4 840 2934 0 14 Dtool_qQJqwNcU 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2d
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 3106  1 y 1 3106  
859 14 Dtool_qQJqUsST 0 4 841 2934 0 14 Dtool_qQJqUsST 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3110  
860 14 Dtool_qQJqODqM 0 4 841 2934 0 14 Dtool_qQJqODqM 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3d
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 3106  1 y 1 3106  1 z 1 3106  
861 14 Dtool_qQJqt_Uq 0 4 842 2934 0 14 Dtool_qQJqt_Uq 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3113  
862 14 Dtool_qQJqEFEP 0 4 842 2934 0 14 Dtool_qQJqEFEP 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4d
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 3106  1 y 1 3106  1 z 1 3106  1 w 1 3106  
863 14 Dtool_qQJqHmpe 0 4 843 2934 0 14 Dtool_qQJqHmpe 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2939  
864 14 Dtool_qQJqkZyZ 0 4 844 2934 0 14 Dtool_qQJqkZyZ 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3100  
865 14 Dtool_qQJquGMY 0 4 844 2934 0 14 Dtool_qQJquGMY 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 x 1 2939  1 y 1 2939  
866 14 Dtool_qQJqlJb7 0 4 845 2934 0 14 Dtool_qQJqlJb7 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3103  
867 14 Dtool_qQJqr5Iy 0 4 845 2934 0 14 Dtool_qQJqr5Iy 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  
868 14 Dtool_qQJq75Dd 0 4 846 2934 0 14 Dtool_qQJq75Dd 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 3048  
869 14 Dtool_qQJq1OKv 0 4 846 2934 0 14 Dtool_qQJq1OKv 449 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 x 1 2939  1 y 1 2939  1 z 1 2939  1 w 1 2939  
870 14 Dtool_qQJqMcyI 0 4 847 2934 0 14 Dtool_qQJqMcyI 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3116  4 data 1 2938  
871 14 Dtool_qQJqrwVK 0 4 848 2934 0 14 Dtool_qQJqrwVK 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3116  1 a 1 2938  1 b 1 2938  
872 14 Dtool_qQJqWt75 0 4 849 2934 0 14 Dtool_qQJqWt75 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3116  1 a 1 2938  1 b 1 2938  1 c 1 2938  
873 14 Dtool_qQJqngjF 0 4 850 2934 0 14 Dtool_qQJqngjF 450 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3116  1 a 1 2938  1 b 1 2938  1 c 1 2938  1 d 1 2938  
874 14 Dtool_qQJqtLsy 0 4 851 2934 0 14 Dtool_qQJqtLsy 224 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3117  3 out 1 2936  
875 14 Dtool_qQJq8imG 0 7 857 3119 2293 14 Dtool_qQJq8imG 326 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2995  14 current_thread 1 2999  
876 14 Dtool_qQJq1co3 0 7 857 3119 2293 14 Dtool_qQJq1co3 326 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 1 10 array_data 1 2995  
877 14 Dtool_qQJqOzcs 0 7 857 3119 2293 14 Dtool_qQJqOzcs 326 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 3 10 array_data 1 2995  6 column 1 2938  14 current_thread 1 2999  
878 14 Dtool_qQJq9WgO 0 7 857 3119 2293 14 Dtool_qQJq9WgO 326 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
//////////////////////////////////////////////////////////////////// 2 10 array_data 1 2995  6 column 1 2938  
879 14 Dtool_qQJq0Ah6 0 7 857 3119 2293 14 Dtool_qQJq0Ah6 423 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 3047  4 name 1 2947  14 current_thread 1 2999  
880 14 Dtool_qQJq6OpO 0 7 857 3119 2293 14 Dtool_qQJq6OpO 423 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  4 name 1 2947  
881 14 Dtool_qQJqdx2Z 0 7 857 3119 2293 14 Dtool_qQJqdx2Z 327 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  14 current_thread 1 2999  
882 14 Dtool_qQJqV_Yy 0 7 857 3119 2293 14 Dtool_qQJqV_Yy 327 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.
//////////////////////////////////////////////////////////////////// 1 11 vertex_data 1 3047  
883 14 Dtool_qQJqWJQ_ 0 7 857 3119 2293 14 Dtool_qQJqWJQ_ 423 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 3 11 vertex_data 1 3047  4 name 1 2929  14 current_thread 1 2999  
884 14 Dtool_qQJqRgWT 0 7 857 3119 2293 14 Dtool_qQJqRgWT 423 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
//////////////////////////////////////////////////////////////////// 2 11 vertex_data 1 3047  4 name 1 2929  
885 14 Dtool_qQJqNKr7 0 7 857 3119 2293 14 Dtool_qQJqNKr7 236 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3120  
886 14 Dtool_qQJqGqJ9 0 7 857 3119 2293 14 Dtool_qQJqGqJ9 938 // Filename: geomVertexRewriter.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexRewriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexRewriter to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 2999  
887 14 Dtool_qQJqy1ru 0 7 857 3119 2293 14 Dtool_qQJqy1ru 938 // Filename: geomVertexRewriter.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexRewriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexRewriter to this object before you can use
//               it.
//////////////////////////////////////////////////////////////////// 0 
888 14 Dtool_qQJq0WpY 0 6 858 3119 0 14 Dtool_qQJq0WpY 244 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  4 copy 1 3120  
889 14 Dtool_qQJqwH9m 0 7 860 3047 1929 14 Dtool_qQJqwH9m 315 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               rewriter is processing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
890 14 Dtool_qQJqIWNZ 0 7 861 2995 1779 14 Dtool_qQJqIWNZ 329 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               rewriter is currently processing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
891 14 Dtool_qQJqcvWQ 0 7 862 3002 1814 14 Dtool_qQJqcvWQ 529 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array_handle
//       Access: Published
//  Description: Returns the write handle to the array object that the
//               rewriter is currently processing.  This low-level call
//               should be used with caution; be careful with
//               modifying the data in the handle out from under the
//               GeomVertexRewriter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
892 14 Dtool_qQJqT7B_ 0 6 863 2930 0 14 Dtool_qQJqT7B_ 463 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_stride
//       Access: Published
//  Description: Returns the per-row stride (bytes between consecutive
//               rows) of the underlying vertex array.  This low-level
//               information is normally not needed to use the
//               GeomVertexRewriter directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
893 14 Dtool_qQJqVgpy 0 7 864 2999 0 14 Dtool_qQJqVgpy 361 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_current_thread
//       Access: Published
//  Description: Returns the Thread pointer of the currently-executing
//               thread, as passed to the constructor of this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
894 14 Dtool_qQJq9TSi 0 6 865 2935 0 14 Dtool_qQJq9TSi 653 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  4 name 1 2947  
895 14 Dtool_qQJq5ySQ 0 6 865 2935 0 14 Dtool_qQJq5ySQ 653 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  4 name 1 2929  
896 14 Dtool_qQJqXLoW 0 6 865 2935 0 14 Dtool_qQJqXLoW 675 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  6 column 1 2938  
897 14 Dtool_qQJq46ti 0 6 865 2935 0 14 Dtool_qQJq46ti 667 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the indicated column
//               description on the given array.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3119  5 array 1 2938  6 column 1 2951  
898 14 Dtool_qQJqnxC8 0 4 866 2934 0 14 Dtool_qQJqnxC8 276 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::clear
//       Access: Published
//  Description: Resets the GeomVertexRewriter to the initial state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3119  
899 14 Dtool_qQJqboKu 0 6 867 2935 0 14 Dtool_qQJqboKu 366 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
900 14 Dtool_qQJqvQZb 0 6 868 2938 0 14 Dtool_qQJqvQZb 327 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the rewriter is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
901 14 Dtool_qQJqxqWN 0 6 869 2951 0 14 Dtool_qQJqxqWN 320 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               rewriter is working on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
902 14 Dtool_qQJqDb_9 0 4 870 2934 0 14 Dtool_qQJqDb_9 657 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_row_unsafe
//       Access: Published
//  Description: Sets the start row to the indicated value, without
//               internal checks.  This is the same as set_row(), but
//               it does not check for the possibility that the array
//               has been reallocated internally for some reason; use
//               only when you are confident that the array is
//               unchanged and you really need every bit of available
//               performance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  3 row 1 2938  
903 14 Dtool_qQJqYAs_ 0 4 871 2934 0 14 Dtool_qQJqYAs_ 379 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_row
//       Access: Published
//  Description: Sets the start, write, and write index to the
//               indicated value.  The rewriter will begin traversing
//               from the given row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3119  3 row 1 2938  
904 14 Dtool_qQJqQVW0 0 6 872 2938 0 14 Dtool_qQJqQVW0 380 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the rewriter
//               started.  It will return to this row if you reset
//               the current column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
905 14 Dtool_qQJqVwyF 0 6 873 2935 0 14 Dtool_qQJqVwyF 348 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::is_at_end
//       Access: Published
//  Description: Returns true if the reader or writer is currently at
//               the end of the list of vertices, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3120  
906 14 Dtool_qQJqHXoX 0 4 874 2934 0 14 Dtool_qQJqHXoX 226 ////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3120  3 out 1 2936  
907 14 Dtool_qQJqJzBL 0 6 853 3116 0 14 Dtool_qQJqJzBL 0 1 4 this 3 3119  
908 14 Dtool_qQJq_ksb 0 6 854 3119 0 14 Dtool_qQJq_ksb 0 1 4 this 3 3116  
909 14 Dtool_qQJqgjnL 0 6 855 3097 0 14 Dtool_qQJqgjnL 0 1 4 this 3 3119  
910 14 Dtool_qQJqmisS 0 6 856 3119 0 14 Dtool_qQJqmisS 0 1 4 this 3 3097  
911 14 Dtool_qQJqDKCe 0 7 887 3122 2314 14 Dtool_qQJqDKCe 446 ////////////////////////////////////////////////////////////////////
//     Function: Texture::Constructor
//       Access: Published
//  Description: Constructs an empty texture.  The default is to set
//               up the texture as an empty 2-d texture; follow up
//               with one of the variants of setup_texture() if this
//               is not what you want.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
912 14 Dtool_qQJqN0nZ 0 7 887 3122 2314 14 Dtool_qQJqN0nZ 446 ////////////////////////////////////////////////////////////////////
//     Function: Texture::Constructor
//       Access: Published
//  Description: Constructs an empty texture.  The default is to set
//               up the texture as an empty 2-d texture; follow up
//               with one of the variants of setup_texture() if this
//               is not what you want.
//////////////////////////////////////////////////////////////////// 0 
913 14 Dtool_qQJqdxyB 0 7 889 3122 2314 14 Dtool_qQJqdxyB 1236 // Filename: texture.I
// Created by:  drose (05Feb99)
// Updated by: fperazzi, PandaSE(29Apr10) (added setup_2d_texture_array)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_copy
//       Access: Published
//  Description: Returns a new copy of the same Texture.  This copy,
//               if applied to geometry, will be copied into texture
//               as a separate texture from the original, so it will
//               be duplicated in texture memory (and may be
//               independently modified if desired).
//
//               If the Texture is a VideoTexture, the resulting
//               duplicate may be animated independently of the
//               original.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
914 14 Dtool_qQJqadfr 0 4 890 2934 0 14 Dtool_qQJqadfr 316 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear
//       Access: Published, Virtual
//  Description: Reinitializes the texture to its default, empty
//               state (except for the name).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
915 14 Dtool_qQJqkdtv 0 4 891 2934 0 14 Dtool_qQJqkdtv 425 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_texture
//       Access: Published
//  Description: Sets the texture to the indicated type and
//               dimensions, presumably in preparation for calling
//               read() or load(), or set_ram_image() or
//               modify_ram_image().
//////////////////////////////////////////////////////////////////// 7 4 this 3 3122  12 texture_type 1 2893  6 x_size 1 2938  6 y_size 1 2938  6 z_size 1 2938  14 component_type 1 2894  6 format 1 2895  
916 14 Dtool_qQJq3hn1 0 4 892 2934 0 14 Dtool_qQJq3hn1 399 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
917 14 Dtool_qQJqVMou 0 4 892 2934 0 14 Dtool_qQJqVMou 440 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  6 x_size 1 2938  14 component_type 1 2894  6 format 1 2895  
918 14 Dtool_qQJq_Wx1 0 4 893 2934 0 14 Dtool_qQJq_Wx1 399 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
919 14 Dtool_qQJqHAEk 0 4 893 2934 0 14 Dtool_qQJqHAEk 440 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3122  6 x_size 1 2938  6 y_size 1 2938  14 component_type 1 2894  6 format 1 2895  
920 14 Dtool_qQJq31mJ 0 4 894 2934 0 14 Dtool_qQJq31mJ 515 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with no
//               dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 z_size 1 2938  
921 14 Dtool_qQJqnH71 0 4 894 2934 0 14 Dtool_qQJqnH71 515 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with no
//               dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
922 14 Dtool_qQJqlbzO 0 4 894 2934 0 14 Dtool_qQJqlbzO 440 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3122  6 x_size 1 2938  6 y_size 1 2938  6 z_size 1 2938  14 component_type 1 2894  6 format 1 2895  
923 14 Dtool_qQJqrJje 0 4 895 2934 0 14 Dtool_qQJqrJje 402 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
924 14 Dtool_qQJqIwnH 0 4 895 2934 0 14 Dtool_qQJqIwnH 627 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with
//               the specified dimensions and properties.  Follow up
//               with set_ram_image() or modify_ram_image() to fill
//               the image data.  
//
//               Note that a cube map should always consist of six
//               square images, so x_size and y_size will be the same,
//               and z_size is always 6.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  4 size 1 2938  14 component_type 1 2894  6 format 1 2895  
925 14 Dtool_qQJqDjNf 0 4 896 2934 0 14 Dtool_qQJqDjNf 527 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture_array
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture array with
//               no dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 z_size 1 2938  
926 14 Dtool_qQJqOrCy 0 4 896 2934 0 14 Dtool_qQJqOrCy 527 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture_array
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture array with
//               no dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
927 14 Dtool_qQJq9eC1 0 4 896 2934 0 14 Dtool_qQJq9eC1 451 ////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture_array
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture array with the
//               specified dimensions and properties. Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3122  6 x_size 1 2938  6 y_size 1 2938  6 z_size 1 2938  14 component_type 1 2894  6 format 1 2895  
928 14 Dtool_qQJqAcPV 0 4 897 2934 0 14 Dtool_qQJqAcPV 601 ////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_normalization_cube_map
//       Access: Published
//  Description: Generates a special cube map image in the texture
//               that can be used to apply bump mapping effects: for
//               each texel in the cube map that is indexed by the 3-d
//               texture coordinates (x, y, z), the resulting value is
//               the normalized vector (x, y, z) (compressed from
//               -1..1 into 0..1).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 size 1 2938  
929 14 Dtool_qQJq8Ql8 0 4 898 2934 0 14 Dtool_qQJq8Ql8 534 ////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_alpha_scale_map
//       Access: Published
//  Description: Generates a special 256x1 1-d texture that can be
//               used to apply an arbitrary alpha scale to objects by
//               judicious use of texture matrix.  The texture is a
//               gradient, with an alpha of 0 on the left (U = 0), and
//               255 on the right (U = 1).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
930 14 Dtool_qQJqK0KH 0 6 899 2935 0 14 Dtool_qQJqK0KH 519 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Combine a 3-component image with a grayscale image
//               to get a 4-component image.
//
//               See the description of the full-parameter read()
//               method for the meaning of the
//               primary_file_num_channels and alpha_file_channel
//               parameters.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3122  8 fullpath 1 3125  14 alpha_fullpath 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  7 options 1 3128  
931 14 Dtool_qQJqoATv 0 6 899 2935 0 14 Dtool_qQJqoATv 519 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Combine a 3-component image with a grayscale image
//               to get a 4-component image.
//
//               See the description of the full-parameter read()
//               method for the meaning of the
//               primary_file_num_channels and alpha_file_channel
//               parameters.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3122  8 fullpath 1 3125  14 alpha_fullpath 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  
932 14 Dtool_qQJqWYJ9 0 6 899 2935 0 14 Dtool_qQJqWYJ9 3902 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the texture from the indicated filename.  If
//               primary_file_num_channels is not 0, it specifies the
//               number of components to downgrade the image to if it
//               is greater than this number.
//
//               If the filename has the extension .txo, this
//               implicitly reads a texture object instead of a
//               filename (which replaces all of the texture
//               properties).  In this case, all the rest of the
//               parameters are ignored, and the filename should not
//               contain any hash marks; just the one named file will
//               be read, since a single .txo file can contain all
//               pages and mipmaps necessary to define a texture.
//
//               If alpha_fullpath is not empty, it specifies the name
//               of a file from which to retrieve the alpha.  In this
//               case, alpha_file_channel represents the numeric
//               channel of this image file to use as the resulting
//               texture's alpha channel; usually, this is 0 to
//               indicate the grayscale combination of r, g, b; or it
//               may be a one-based channel number, e.g. 1 for the red
//               channel, 2 for the green channel, and so on.
//
//               If read pages is false, then z indicates the page
//               number into which this image will be assigned.
//               Normally this is 0 for the first (or only) page of
//               the texture.  3-D textures have one page for each
//               level of depth, and cube map textures always have six
//               pages.
//
//               If read_pages is true, multiple images will be read
//               at once, one for each page of a cube map or a 3-D
//               texture.  In this case, the filename should contain a
//               sequence of one or more hash marks ("#") which will
//               be filled in with the z value of each page,
//               zero-based.  In this case, the z parameter indicates
//               the maximum z value that will be loaded, or 0 to load
//               all filenames that exist.
//
//               If read_mipmaps is false, then n indicates the mipmap
//               level to which this image will be assigned.  Normally
//               this is 0 for the base texture image, but it is
//               possible to load custom mipmap levels into the later
//               images.  After the base texture image is loaded (thus
//               defining the size of the texture), you can call
//               get_expected_num_mipmap_levels() to determine the
//               maximum sensible value for n.
//
//               If read_mipmaps is true, multiple images will be read
//               as above, but this time the images represent the
//               different mipmap levels of the texture image.  In
//               this case, the n parameter indicates the maximum n
//               value that will be loaded, or 0 to load all filenames
//               that exist (up to the expected number of mipmap
//               levels).
//
//               If both read_pages and read_mipmaps is true, then
//               both sequences will be read; the filename should
//               contain two sequences of hash marks, separated by
//               some character such as a hyphen, underscore, or dot.
//               The first hash mark sequence will be filled in with
//               the mipmap level, while the second hash mark sequence
//               will be the page index.
//
//               This method implicitly sets keep_ram_image to false.
//////////////////////////////////////////////////////////////////// 11 4 this 3 3122  8 fullpath 1 3125  14 alpha_fullpath 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  1 z 1 2938  1 n 1 2938  10 read_pages 1 2935  12 read_mipmaps 1 2935  6 record 1 3131  7 options 1 3128  
933 14 Dtool_qQJqnxxV 0 6 899 2935 0 14 Dtool_qQJqnxxV 3902 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the texture from the indicated filename.  If
//               primary_file_num_channels is not 0, it specifies the
//               number of components to downgrade the image to if it
//               is greater than this number.
//
//               If the filename has the extension .txo, this
//               implicitly reads a texture object instead of a
//               filename (which replaces all of the texture
//               properties).  In this case, all the rest of the
//               parameters are ignored, and the filename should not
//               contain any hash marks; just the one named file will
//               be read, since a single .txo file can contain all
//               pages and mipmaps necessary to define a texture.
//
//               If alpha_fullpath is not empty, it specifies the name
//               of a file from which to retrieve the alpha.  In this
//               case, alpha_file_channel represents the numeric
//               channel of this image file to use as the resulting
//               texture's alpha channel; usually, this is 0 to
//               indicate the grayscale combination of r, g, b; or it
//               may be a one-based channel number, e.g. 1 for the red
//               channel, 2 for the green channel, and so on.
//
//               If read pages is false, then z indicates the page
//               number into which this image will be assigned.
//               Normally this is 0 for the first (or only) page of
//               the texture.  3-D textures have one page for each
//               level of depth, and cube map textures always have six
//               pages.
//
//               If read_pages is true, multiple images will be read
//               at once, one for each page of a cube map or a 3-D
//               texture.  In this case, the filename should contain a
//               sequence of one or more hash marks ("#") which will
//               be filled in with the z value of each page,
//               zero-based.  In this case, the z parameter indicates
//               the maximum z value that will be loaded, or 0 to load
//               all filenames that exist.
//
//               If read_mipmaps is false, then n indicates the mipmap
//               level to which this image will be assigned.  Normally
//               this is 0 for the base texture image, but it is
//               possible to load custom mipmap levels into the later
//               images.  After the base texture image is loaded (thus
//               defining the size of the texture), you can call
//               get_expected_num_mipmap_levels() to determine the
//               maximum sensible value for n.
//
//               If read_mipmaps is true, multiple images will be read
//               as above, but this time the images represent the
//               different mipmap levels of the texture image.  In
//               this case, the n parameter indicates the maximum n
//               value that will be loaded, or 0 to load all filenames
//               that exist (up to the expected number of mipmap
//               levels).
//
//               If both read_pages and read_mipmaps is true, then
//               both sequences will be read; the filename should
//               contain two sequences of hash marks, separated by
//               some character such as a hyphen, underscore, or dot.
//               The first hash mark sequence will be filled in with
//               the mipmap level, while the second hash mark sequence
//               will be the page index.
//
//               This method implicitly sets keep_ram_image to false.
//////////////////////////////////////////////////////////////////// 10 4 this 3 3122  8 fullpath 1 3125  14 alpha_fullpath 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  1 z 1 2938  1 n 1 2938  10 read_pages 1 2935  12 read_mipmaps 1 2935  6 record 1 3131  
934 14 Dtool_qQJqf347 0 6 899 2935 0 14 Dtool_qQJqf347 3902 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the texture from the indicated filename.  If
//               primary_file_num_channels is not 0, it specifies the
//               number of components to downgrade the image to if it
//               is greater than this number.
//
//               If the filename has the extension .txo, this
//               implicitly reads a texture object instead of a
//               filename (which replaces all of the texture
//               properties).  In this case, all the rest of the
//               parameters are ignored, and the filename should not
//               contain any hash marks; just the one named file will
//               be read, since a single .txo file can contain all
//               pages and mipmaps necessary to define a texture.
//
//               If alpha_fullpath is not empty, it specifies the name
//               of a file from which to retrieve the alpha.  In this
//               case, alpha_file_channel represents the numeric
//               channel of this image file to use as the resulting
//               texture's alpha channel; usually, this is 0 to
//               indicate the grayscale combination of r, g, b; or it
//               may be a one-based channel number, e.g. 1 for the red
//               channel, 2 for the green channel, and so on.
//
//               If read pages is false, then z indicates the page
//               number into which this image will be assigned.
//               Normally this is 0 for the first (or only) page of
//               the texture.  3-D textures have one page for each
//               level of depth, and cube map textures always have six
//               pages.
//
//               If read_pages is true, multiple images will be read
//               at once, one for each page of a cube map or a 3-D
//               texture.  In this case, the filename should contain a
//               sequence of one or more hash marks ("#") which will
//               be filled in with the z value of each page,
//               zero-based.  In this case, the z parameter indicates
//               the maximum z value that will be loaded, or 0 to load
//               all filenames that exist.
//
//               If read_mipmaps is false, then n indicates the mipmap
//               level to which this image will be assigned.  Normally
//               this is 0 for the base texture image, but it is
//               possible to load custom mipmap levels into the later
//               images.  After the base texture image is loaded (thus
//               defining the size of the texture), you can call
//               get_expected_num_mipmap_levels() to determine the
//               maximum sensible value for n.
//
//               If read_mipmaps is true, multiple images will be read
//               as above, but this time the images represent the
//               different mipmap levels of the texture image.  In
//               this case, the n parameter indicates the maximum n
//               value that will be loaded, or 0 to load all filenames
//               that exist (up to the expected number of mipmap
//               levels).
//
//               If both read_pages and read_mipmaps is true, then
//               both sequences will be read; the filename should
//               contain two sequences of hash marks, separated by
//               some character such as a hyphen, underscore, or dot.
//               The first hash mark sequence will be filled in with
//               the mipmap level, while the second hash mark sequence
//               will be the page index.
//
//               This method implicitly sets keep_ram_image to false.
//////////////////////////////////////////////////////////////////// 9 4 this 3 3122  8 fullpath 1 3125  14 alpha_fullpath 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  1 z 1 2938  1 n 1 2938  10 read_pages 1 2935  12 read_mipmaps 1 2935  
935 14 Dtool_qQJqgNgF 0 6 899 2935 0 14 Dtool_qQJqgNgF 255 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the named filename into the texture.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  8 fullpath 1 3125  7 options 1 3128  
936 14 Dtool_qQJq3IDU 0 6 899 2935 0 14 Dtool_qQJq3IDU 255 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the named filename into the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 fullpath 1 3125  
937 14 Dtool_qQJqf1WO 0 6 899 2935 0 14 Dtool_qQJqf1WO 524 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads a single file into a single page or mipmap
//               level, or automatically reads a series of files into
//               a series of pages and/or mipmap levels.
//
//               See the description of the full-parameter read()
//               method for the meaning of the various parameters.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3122  8 fullpath 1 3125  1 z 1 2938  1 n 1 2938  10 read_pages 1 2935  12 read_mipmaps 1 2935  7 options 1 3128  
938 14 Dtool_qQJq1czw 0 6 899 2935 0 14 Dtool_qQJq1czw 524 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads a single file into a single page or mipmap
//               level, or automatically reads a series of files into
//               a series of pages and/or mipmap levels.
//
//               See the description of the full-parameter read()
//               method for the meaning of the various parameters.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3122  8 fullpath 1 3125  1 z 1 2938  1 n 1 2938  10 read_pages 1 2935  12 read_mipmaps 1 2935  
939 14 Dtool_qQJqHtFt 0 6 900 2935 0 14 Dtool_qQJqHtFt 255 ////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes the texture to the named filename.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 fullpath 1 3125  
940 14 Dtool_qQJqyISG 0 6 900 2935 0 14 Dtool_qQJqyISG 3125 ////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes a single page or mipmap level to a single
//               file, or automatically writes a series of pages
//               and/or mipmap levels to a numbered series of files.
//
//               If the filename ends in the extension .txo, this
//               implicitly writes a Panda texture object (.txo)
//               instead of an image file.  In this case, the
//               remaining parameters are ignored, and only one file
//               is written, which will contain all of the pages and
//               resident mipmap levels in the texture.
//
//               If write_pages is false, then z indicates the page
//               number to write.  3-D textures have one page number
//               for each level of depth; cube maps have six pages
//               number 0 through 5.  Other kinds of textures have
//               only one page, numbered 0.  If there are multiple
//               views, the range of z is increased; the total range
//               is [0, get_num_pages()).
//
//               If write_pages is true, then all pages of the texture
//               will be written.  In this case z is ignored, and the
//               filename should contain a sequence of hash marks
//               ("#") which will be filled in with the page index
//               number.
//
//               If write_mipmaps is false, then n indicates the
//               mipmap level number to write.  Normally, this is 0,
//               for the base texture image.  Normally, the mipmap
//               levels of a texture are not available in RAM (they
//               are generated automatically by the graphics card).
//               However, if you have the mipmap levels available, for
//               instance because you called
//               generate_ram_mipmap_images() to generate them
//               internally, or you called
//               GraphicsEngine::extract_texture_data() to retrieve
//               them from the graphics card, then you may write out
//               each mipmap level with this parameter.
//
//               If write_mipmaps is true, then all mipmap levels of
//               the texture will be written.  In this case n is
//               ignored, and the filename should contain a sequence
//               of hash marks ("#") which will be filled in with the
//               mipmap level number.
//
//               If both write_pages and write_mipmaps is true, then
//               all pages and all mipmap levels will be written.  In
//               this case, the filename should contain two different
//               sequences of hash marks, separated by a character
//               such as a hyphen, underscore, or dot.  The first hash
//               mark sequence will be filled in with the mipmap
//               level, while the second hash mark sequence will be
//               the page index.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3122  8 fullpath 1 3125  1 z 1 2938  1 n 1 2938  11 write_pages 1 2935  13 write_mipmaps 1 2935  
941 14 Dtool_qQJqR4MB 0 4 900 2934 0 14 Dtool_qQJqR4MB 324 ////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Not to be confused with write(Filename), this method
//               simply describes the texture properties.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3123  3 out 1 2936  12 indent_level 1 2938  
942 14 Dtool_qQJqaEMT 0 6 901 2935 0 14 Dtool_qQJqaEMT 692 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read_txo
//       Access: Published
//  Description: Reads the texture from a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//               This only works if the txo file contains a static
//               Texture image, as opposed to a subclass of Texture
//               such as a movie texture.
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  2 in 1 3133  8 filename 1 2929  
943 14 Dtool_qQJqXtbC 0 6 901 2935 0 14 Dtool_qQJqXtbC 692 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read_txo
//       Access: Published
//  Description: Reads the texture from a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//               This only works if the txo file contains a static
//               Texture image, as opposed to a subclass of Texture
//               such as a movie texture.
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  2 in 1 3133  
944 14 Dtool_qQJqzerW 0 7 902 3122 2314 14 Dtool_qQJqzerW 621 ////////////////////////////////////////////////////////////////////
//     Function: Texture::make_from_txo
//       Access: Published, Static
//  Description: Constructs a new Texture object from the txo file.
//               This is similar to Texture::read_txo(), but it
//               constructs and returns a new object, which allows it
//               to return a subclass of Texture (for instance, a
//               movie texture).
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
//////////////////////////////////////////////////////////////////// 2 2 in 1 3133  8 filename 1 2929  
945 14 Dtool_qQJqO0E1 0 7 902 3122 2314 14 Dtool_qQJqO0E1 621 ////////////////////////////////////////////////////////////////////
//     Function: Texture::make_from_txo
//       Access: Published, Static
//  Description: Constructs a new Texture object from the txo file.
//               This is similar to Texture::read_txo(), but it
//               constructs and returns a new object, which allows it
//               to return a subclass of Texture (for instance, a
//               movie texture).
//
//               Pass a real filename if it is available, or empty
//               string if it is not.
//////////////////////////////////////////////////////////////////// 1 2 in 1 3133  
946 14 Dtool_qQJq9lbk 0 6 903 2935 0 14 Dtool_qQJq9lbk 463 ////////////////////////////////////////////////////////////////////
//     Function: Texture::write_txo
//       Access: Published
//  Description: Writes the texture to a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//
//               The filename is just for reference.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3123  3 out 1 2936  8 filename 1 2929  
947 14 Dtool_qQJqdBCU 0 6 903 2935 0 14 Dtool_qQJqdBCU 463 ////////////////////////////////////////////////////////////////////
//     Function: Texture::write_txo
//       Access: Published
//  Description: Writes the texture to a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//
//               The filename is just for reference.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  3 out 1 2936  
948 14 Dtool_qQJqDJc5 0 6 904 2935 0 14 Dtool_qQJqDJc5 674 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read_dds
//       Access: Published
//  Description: Reads the texture from a DDS file object.  This is a
//               Microsoft-defined file format; it is similar in
//               principle to a txo object, in that it is designed to
//               contain the texture image in a form as similar as
//               possible to its runtime image, and it can contain
//               mipmaps, pre-compressed textures, and so on.
//
//               As with read_txo, the filename is just for reference.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  2 in 1 3133  8 filename 1 2929  11 header_only 1 2935  
949 14 Dtool_qQJqeulj 0 6 904 2935 0 14 Dtool_qQJqeulj 674 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read_dds
//       Access: Published
//  Description: Reads the texture from a DDS file object.  This is a
//               Microsoft-defined file format; it is similar in
//               principle to a txo object, in that it is designed to
//               contain the texture image in a form as similar as
//               possible to its runtime image, and it can contain
//               mipmaps, pre-compressed textures, and so on.
//
//               As with read_txo, the filename is just for reference.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  2 in 1 3133  8 filename 1 2929  
950 14 Dtool_qQJqTL1S 0 6 904 2935 0 14 Dtool_qQJqTL1S 674 ////////////////////////////////////////////////////////////////////
//     Function: Texture::read_dds
//       Access: Published
//  Description: Reads the texture from a DDS file object.  This is a
//               Microsoft-defined file format; it is similar in
//               principle to a txo object, in that it is designed to
//               contain the texture image in a form as similar as
//               possible to its runtime image, and it can contain
//               mipmaps, pre-compressed textures, and so on.
//
//               As with read_txo, the filename is just for reference.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  2 in 1 3133  
951 14 Dtool_qQJq9q5b 0 6 905 2935 0 14 Dtool_qQJq9q5b 259 ////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Replaces the texture with the indicated image.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  8 pnmimage 1 3135  7 options 1 3128  
952 14 Dtool_qQJqBHdq 0 6 905 2935 0 14 Dtool_qQJqBHdq 259 ////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Replaces the texture with the indicated image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 pnmimage 1 3135  
953 14 Dtool_qQJq5L4C 0 6 905 2935 0 14 Dtool_qQJq5L4C 305 ////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Stores the indicated image in the given page and
//               mipmap level.  See read().
//////////////////////////////////////////////////////////////////// 5 4 this 3 3122  8 pnmimage 1 3135  1 z 1 2938  1 n 1 2938  7 options 1 3128  
954 14 Dtool_qQJqQG98 0 6 905 2935 0 14 Dtool_qQJqQG98 305 ////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Stores the indicated image in the given page and
//               mipmap level.  See read().
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  8 pnmimage 1 3135  1 z 1 2938  1 n 1 2938  
955 14 Dtool_qQJqfuOO 0 6 906 2935 0 14 Dtool_qQJqfuOO 306 ////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the texture to the indicated PNMImage, but does
//               not write it to disk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  8 pnmimage 1 3138  
956 14 Dtool_qQJqGqUB 0 6 906 2935 0 14 Dtool_qQJqGqUB 304 ////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the indicated page and mipmap level of the
//               texture to the PNMImage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3123  8 pnmimage 1 3138  1 z 1 2938  1 n 1 2938  
957 14 Dtool_qQJqCVZW 0 6 907 2935 0 14 Dtool_qQJqCVZW 532 ////////////////////////////////////////////////////////////////////
//     Function: Texture::reload
//       Access: Published
//  Description: Re-reads the Texture from its disk file.  Useful when
//               you know the image on disk has recently changed, and
//               you want to update the Texture image.
//
//               Returns true on success, false on failure (in which
//               case, the Texture may or may not still be valid).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
958 14 Dtool_qQJqJ8Qn 0 7 908 3122 2314 14 Dtool_qQJqJ8Qn 444 ////////////////////////////////////////////////////////////////////
//     Function: Texture::load_related
//       Access: Published
//  Description: Loads a texture whose filename is derived by
//               concatenating a suffix to the filename of this
//               texture.  May return NULL, for example, if this
//               texture doesn't have a filename.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  6 suffix 1 2947  
959 14 Dtool_qQJqW7Cs 0 6 909 2935 0 14 Dtool_qQJqW7Cs 318 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_filename
//       Access: Published
//  Description: Returns true if the filename has been set and
//               is available.  See set_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
960 14 Dtool_qQJqMiw2 0 6 910 3125 0 14 Dtool_qQJqMiw2 371 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_filename
//       Access: Published
//  Description: Returns the filename that has been set.  This is the
//               name of the file as it was requested.  Also see
//               get_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
961 14 Dtool_qQJqc1WY 0 6 911 2935 0 14 Dtool_qQJqc1WY 336 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_filename
//       Access: Published
//  Description: Returns true if the alpha_filename has been set and
//               is available.  See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
962 14 Dtool_qQJqBYEj 0 6 912 3125 0 14 Dtool_qQJqBYEj 475 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_filename
//       Access: Published
//  Description: Returns the alpha_filename that has been set.  If
//               this is set, it represents the name of the alpha
//               component, which is stored in a separate file.  See
//               also get_filename(), and get_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
963 14 Dtool_qQJqestn 0 6 913 2935 0 14 Dtool_qQJqestn 318 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_fullpath
//       Access: Published
//  Description: Returns true if the fullpath has been set and
//               is available.  See set_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
964 14 Dtool_qQJqEHay 0 6 914 3125 0 14 Dtool_qQJqEHay 376 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_fullpath
//       Access: Published
//  Description: Returns the fullpath that has been set.  This is the
//               full path to the file as it was found along the
//               texture search path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
965 14 Dtool_qQJqQ97B 0 6 915 2935 0 14 Dtool_qQJqQ97B 336 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_fullpath
//       Access: Published
//  Description: Returns true if the alpha_fullpath has been set and
//               is available.  See set_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
966 14 Dtool_qQJqKSqM 0 6 916 3125 0 14 Dtool_qQJqKSqM 430 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_fullpath
//       Access: Published
//  Description: 
//               Returns the alpha_fullpath that has been set.  This
//               is the full path to the alpha part of the image file
//               as it was found along the texture search path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
967 14 Dtool_qQJqp9VG 0 6 917 2938 0 14 Dtool_qQJqp9VG 268 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_x_size
//       Access: Published
//  Description: Returns the width of the texture image in texels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
968 14 Dtool_qQJqA91J 0 6 918 2938 0 14 Dtool_qQJqA91J 321 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_y_size
//       Access: Published
//  Description: Returns the height of the texture image in texels.
//               For a 1-d texture, this will be 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
969 14 Dtool_qQJqf_VN 0 6 919 2938 0 14 Dtool_qQJqf_VN 392 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_z_size
//       Access: Published
//  Description: Returns the depth of the texture image in texels.
//               For a 1-d texture or 2-d texture, this will be 1.
//               For a cube map texture, this will be 6.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
970 14 Dtool_qQJq4jq1 0 6 920 2938 0 14 Dtool_qQJq4jq1 758 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_views
//       Access: Published
//  Description: Returns the number of "views" in the texture.  A view
//               is a completely separate image stored within the
//               Texture object.  Most textures have only one view,
//               but a stereo texture, for instance, may have two
//               views, a left and a right image.  Other uses for
//               multiple views are not yet defined.
//
//               If this value is greater than one, the additional
//               views are accessed as additional pages beyond
//               get_z_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
971 14 Dtool_qQJqSk4O 0 6 921 2938 0 14 Dtool_qQJqSk4O 604 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_pages
//       Access: Published
//  Description: Returns the total number of pages in the texture.  
//               Each "page" is a 2-d texture image within the larger
//               image--a face of a cube map, or a level of a 3-d
//               texture.  Normally, get_num_pages() is the same as
//               get_z_size().  However, in a multiview texture, this
//               returns get_z_size() * get_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
972 14 Dtool_qQJqWv_P 0 6 922 2938 0 14 Dtool_qQJqWv_P 456 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_components
//       Access: Published
//  Description: Returns the number of color components for each texel
//               of the texture image.  This is 3 for an rgb texture
//               or 4 for an rgba texture; it may also be 1 or 2 for a
//               grayscale texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
973 14 Dtool_qQJqqXBq 0 6 923 2938 0 14 Dtool_qQJqqXBq 390 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_width
//       Access: Published
//  Description: Returns the number of bytes stored for each color
//               component of a texel.  Typically this is 1, but it
//               may be 2 for 16-bit texels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
974 14 Dtool_qQJqvw9T 0 6 924 2893 0 14 Dtool_qQJqvw9T 275 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_texture_type
//       Access: Published
//  Description: Returns the overall interpretation of the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
975 14 Dtool_qQJqN7UC 0 6 925 2895 0 14 Dtool_qQJqN7UC 392 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_format
//       Access: Published
//  Description: Returns the format of the texture, which represents
//               both the semantic meaning of the texels and, to some
//               extent, their storage information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
976 14 Dtool_qQJqrqBI 0 6 926 2894 0 14 Dtool_qQJqrqBI 312 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_type
//       Access: Published
//  Description: Returns the numeric interpretation of each component
//               of the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
977 14 Dtool_qQJqkX83 0 4 927 2934 0 14 Dtool_qQJqkX83 218 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_u
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 wrap 1 2897  
978 14 Dtool_qQJqSp8_ 0 4 928 2934 0 14 Dtool_qQJqSp8_ 218 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_v
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 wrap 1 2897  
979 14 Dtool_qQJqBo8F 0 4 929 2934 0 14 Dtool_qQJqBo8F 270 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_w
//       Access: Published
//  Description: The W wrap direction is only used for 3-d textures.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 wrap 1 2897  
980 14 Dtool_qQJqmEu7 0 4 930 2934 0 14 Dtool_qQJqmEu7 221 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 filter 1 2896  
981 14 Dtool_qQJq8Kn6 0 4 931 2934 0 14 Dtool_qQJq8Kn6 221 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 filter 1 2896  
982 14 Dtool_qQJqGRw3 0 4 932 2934 0 14 Dtool_qQJqGRw3 733 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_anisotropic_degree
//       Access: Published
//  Description: Specifies the level of anisotropic filtering to apply
//               to the texture.  Set this 0 to indicate the default
//               value, which is specified in the
//               texture-anisotropic-degree config variable.
//
//               To explicitly disable anisotropic filtering, set this
//               value to 1.  To explicitly enable anisotropic
//               filtering, set it to a value higher than 1; larger
//               numbers indicate greater degrees of filtering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  18 anisotropic_degree 1 2938  
983 14 Dtool_qQJq2r4a 0 4 933 2934 0 14 Dtool_qQJq2r4a 446 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_border_color
//       Access: Published
//  Description: Specifies the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  5 color 1 3048  
984 14 Dtool_qQJqHB8q 0 4 934 2934 0 14 Dtool_qQJqHB8q 1037 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_compression
//       Access: Published
//  Description: Requests that this particular Texture be compressed
//               when it is loaded into texture memory.  
//
//               This refers to the internal compression of the
//               texture image within texture memory; it is not
//               related to jpeg or png compression, which are disk
//               file compression formats.  The actual disk file that
//               generated this texture may be stored in a compressed
//               or uncompressed format supported by Panda; it will be
//               decompressed on load, and then recompressed by the
//               graphics API if this parameter is not CM_off.
//
//               If the GSG does not support this texture compression
//               mode, the texture will silently be loaded
//               uncompressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  11 compression 1 2898  
985 14 Dtool_qQJqGh2R 0 4 935 2934 0 14 Dtool_qQJqGh2R 905 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_render_to_texture
//       Access: Published
//  Description: Sets a flag on the texture that indicates whether the
//               texture is intended to be used as a direct-render
//               target, by binding a framebuffer to a texture and
//               rendering directly into the texture.
//
//               This controls some low-level choices made about the
//               texture object itself.  For instance, compressed
//               textures are disallowed when this flag is set true.
//
//               Normally, a user should not need to set this flag
//               directly; it is set automatically by the low-level
//               display code when a texture is bound to a
//               framebuffer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  17 render_to_texture 1 2935  
986 14 Dtool_qQJqDAco 0 6 936 2897 0 14 Dtool_qQJqDAco 292 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_u
//       Access: Published
//  Description: Returns the wrap mode of the texture in the U
//               direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
987 14 Dtool_qQJqVHcv 0 6 937 2897 0 14 Dtool_qQJqVHcv 292 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_v
//       Access: Published
//  Description: Returns the wrap mode of the texture in the V
//               direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
988 14 Dtool_qQJqnFc2 0 6 938 2897 0 14 Dtool_qQJqnFc2 355 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_w
//       Access: Published
//  Description: Returns the wrap mode of the texture in the W
//               direction.  This is the depth direction of 3-d
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
989 14 Dtool_qQJqmseL 0 6 939 2896 0 14 Dtool_qQJqmseL 487 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_minfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               minification.  If this is one of the mipmap
//               constants, then the texture requires mipmaps.  This
//               may return FT_default; see also
//               get_effective_minfilter().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
990 14 Dtool_qQJq8eYK 0 6 940 2896 0 14 Dtool_qQJq8eYK 435 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_magfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               magnification.  The mipmap constants are invalid
//               here.  This may return FT_default; see also
//               get_effective_minfilter().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
991 14 Dtool_qQJq_kUZ 0 6 941 2896 0 14 Dtool_qQJq_kUZ 465 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_minfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               minification, with special treatment for FT_default.
//               This will normally not return FT_default, unless
//               there is an error in the config file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
992 14 Dtool_qQJqGq5U 0 6 942 2896 0 14 Dtool_qQJqGq5U 466 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_magfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               magnification, with special treatment for FT_default.
//               This will normally not return FT_default, unless
//               there is an error in the config file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
993 14 Dtool_qQJqRCMk 0 6 943 2938 0 14 Dtool_qQJqRCMk 463 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the degree of anisotropic filtering that
//               should be applied to the texture.  This value may
//               return 0, indicating the default value; see also
//               get_effective_anisotropic_degree.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
994 14 Dtool_qQJqYHP8 0 6 944 2938 0 14 Dtool_qQJqYHP8 459 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_anisotropic_degree
//       Access: Published
//  Description: Returns the degree of anisotropic filtering that
//               should be applied to the texture.  This value will
//               normally not return 0, unless there is an error in
//               the config file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
995 14 Dtool_qQJqrLZH 0 7 945 3068 0 14 Dtool_qQJqrLZH 444 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_border_color
//       Access: Published
//  Description: Returns the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
996 14 Dtool_qQJqekiK 0 6 946 2898 0 14 Dtool_qQJqekiK 765 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_compression
//       Access: Published
//  Description: Returns the compression mode requested for this
//               particular texture, or CM_off if the texture is not
//               to be compressed.
//
//               If a value other than CM_off is returned, this is
//               not a guarantee that the texture is actually
//               successfully compressed on the GSG.  It may be that
//               the GSG does not support the requested compression
//               mode, in which case the texture may actually be
//               stored uncompressed in texture memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
997 14 Dtool_qQJqnJ0_ 0 6 947 2935 0 14 Dtool_qQJqnJ0_ 764 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_compression
//       Access: Published
//  Description: Returns true if the texture indicates it wants to be
//               compressed, either with CM_on or higher, or
//               CM_default and compressed-textures is true.
//
//               If true returned, this is not a guarantee that the
//               texture is actually successfully compressed on the
//               GSG.  It may be that the GSG does not support the
//               requested compression mode, in which case the texture
//               may actually be stored uncompressed in texture
//               memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
998 14 Dtool_qQJqh_qK 0 6 948 2935 0 14 Dtool_qQJqh_qK 701 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_render_to_texture
//       Access: Published
//  Description: Returns a flag on the texture that indicates whether the
//               texture is intended to be used as a direct-render
//               target, by binding a framebuffer to a texture and
//               rendering directly into the texture.
//
//               Normally, a user should not need to set this flag
//               directly; it is set automatically by the low-level
//               display code when a texture is bound to a
//               framebuffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
999 14 Dtool_qQJqYXSi 0 6 949 2935 0 14 Dtool_qQJqYXSi 355 ////////////////////////////////////////////////////////////////////
//     Function: Texture::uses_mipmaps
//       Access: Public
//  Description: Returns true if the minfilter settings on this
//               texture indicate the use of mipmapping, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1000 14 Dtool_qQJqLupG 0 4 950 2934 0 14 Dtool_qQJqLupG 535 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_quality_level
//       Access: Public
//  Description: Sets a hint to the renderer about the desired
//               performance / quality tradeoff for this particular
//               texture.  This is most useful for the tinydisplay
//               software renderer; for normal, hardware-accelerated
//               renderers, this may have little or no effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  13 quality_level 1 2899  
1001 14 Dtool_qQJqr4ct 0 6 951 2899 0 14 Dtool_qQJqr4ct 392 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_quality_level
//       Access: Public
//  Description: Returns the current quality_level hint.  See
//               set_quality_level().  This value may return
//               QL_default; see get_effective_quality_level().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1002 14 Dtool_qQJqycUh 0 6 952 2899 0 14 Dtool_qQJqycUh 519 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_effective_quality_level
//       Access: Public
//  Description: Returns the current quality_level hint, or the global
//               default quality_level if this texture doesn't specify
//               a quality level.  This value will not normally return
//               QL_default (unless there is an error in the config
//               file)
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1003 14 Dtool_qQJq9PeO 0 6 953 2938 0 14 Dtool_qQJq9PeO 536 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_num_mipmap_levels
//       Access: Published
//  Description: Returns the number of mipmap levels that should be
//               defined for this texture, given the texture's size.
//
//               Note that this returns a number appropriate for
//               mipmapping, even if the texture does not currently
//               have mipmapping enabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1004 14 Dtool_qQJq_Vjv 0 6 954 2938 0 14 Dtool_qQJq_Vjv 338 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_x_size
//       Access: Published
//  Description: Returns the x_size that the nth mipmap level should
//               have, based on the texture's size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1005 14 Dtool_qQJqAwmv 0 6 955 2938 0 14 Dtool_qQJqAwmv 338 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_y_size
//       Access: Published
//  Description: Returns the y_size that the nth mipmap level should
//               have, based on the texture's size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1006 14 Dtool_qQJqScov 0 6 956 2938 0 14 Dtool_qQJqScov 338 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_z_size
//       Access: Published
//  Description: Returns the z_size that the nth mipmap level should
//               have, based on the texture's size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1007 14 Dtool_qQJq6Oji 0 6 957 2938 0 14 Dtool_qQJq6Oji 566 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_num_pages
//       Access: Published
//  Description: Returns the total number of pages that the nth mipmap
//               level should have, based on the texture's size.  This
//               is usually the same as get_expected_mipmap_z_size(),
//               except for a multiview texture, in which case it is
//               get_expected_mipmap_z_size() * get_num_views().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1008 14 Dtool_qQJq6jZY 0 6 958 2935 0 14 Dtool_qQJq6jZY 1616 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_image
//       Access: Published
//  Description: Returns true if the Texture has its image contents
//               available in main RAM, false if it exists only in
//               texture memory or in the prepared GSG context.
//
//               Note that this has nothing to do with whether
//               get_ram_image() will fail or not.  Even if
//               has_ram_image() returns false, get_ram_image() may
//               still return a valid RAM image, because
//               get_ram_image() will automatically load the texture
//               from disk if necessary.  The only thing
//               has_ram_image() tells you is whether the texture is
//               available right now without hitting the disk first.
//
//               Note also that if an application uses only one GSG,
//               it may appear that has_ram_image() returns true if
//               the texture has not yet been loaded by the GSG, but
//               this correlation is not true in general and should
//               not be depended on.  Specifically, if an application
//               ever uses multiple GSG's in its lifetime (for
//               instance, by opening more than one window, or by
//               closing its window and opening another one later),
//               then has_ram_image() may well return false on
//               textures that have never been loaded on the current
//               GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1009 14 Dtool_qQJqFOOW 0 6 959 2935 0 14 Dtool_qQJqFOOW 401 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_uncompressed_ram_image
//       Access: Published
//  Description: Returns true if the Texture has its image contents
//               available in main RAM and is uncompressed, false
//               otherwise.  See has_ram_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1010 14 Dtool_qQJqbDJE 0 6 960 2935 0 14 Dtool_qQJqbDJE 578 ////////////////////////////////////////////////////////////////////
//     Function: Texture::might_have_ram_image
//       Access: Published
//  Description: Returns true if the texture's image contents are
//               currently available in main RAM, or there is reason
//               to believe it can be loaded on demand.  That is, this
//               function returns a "best guess" as to whether
//               get_ram_image() will succeed without actually calling
//               it first.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1011 14 Dtool_qQJqxRV8 0 6 961 2930 0 14 Dtool_qQJqxRV8 388 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_size
//       Access: Published
//  Description: Returns the total number of bytes used by the
//               in-memory image, across all pages and views, or 0 if
//               there is no in-memory image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1012 14 Dtool_qQJqUCh5 0 6 962 2930 0 14 Dtool_qQJqUCh5 467 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_view_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per view, or 0 if there is no in-memory image.
//               Since each view is a stack of z_size pages, this is
//               get_z_size() * get_ram_page_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1013 14 Dtool_qQJqyOvS 0 6 963 2930 0 14 Dtool_qQJqyOvS 647 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page, or 0 if there is no in-memory image.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1014 14 Dtool_qQJqR2lC 0 6 964 2930 0 14 Dtool_qQJqR2lC 378 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image, based on the texture
//               parameters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1015 14 Dtool_qQJqCoXN 0 6 965 2930 0 14 Dtool_qQJqCoXN 447 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture.  For a 2-d or 1-d
//               texture, this is the same as
//               get_expected_ram_image_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1016 14 Dtool_qQJqptvV 0 7 966 3140 0 14 Dtool_qQJqptvV 1676 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               texture.  If the texture does not currently have an
//               associated RAM image, and the texture was generated
//               by loading an image from a disk file (the most common
//               case), this forces the reload of the same texture.
//               This can happen if keep_texture_ram is configured to
//               false, and we have previously prepared this texture
//               with a GSG.
//
//               Note that it is not correct to call has_ram_image()
//               first to test whether this function will fail.  A
//               false return value from has_ram_image() indicates
//               only that get_ram_image() may need to reload the
//               texture from disk, which it will do automatically.
//               However, you can call might_have_ram_image(), which
//               will return true if the ram image exists, or there is
//               a reasonable reason to believe it can be loaded.
//
//               On the other hand, it is possible that the texture
//               cannot be found on disk or is otherwise unavailable.
//               If that happens, this function will return NULL.
//               There is no way to predict with 100% accuracy whether
//               get_ram_image() will return NULL without calling it
//               first; might_have_ram_image() is the closest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1017 14 Dtool_qQJqEnmq 0 6 967 2898 0 14 Dtool_qQJqEnmq 633 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_compression
//       Access: Published
//  Description: Returns the compression mode in which the ram image
//               is already stored pre-compressed.  If this is other
//               than CM_off, you cannot rely on the contents of the
//               ram image to be anything predicatable (it will not be
//               an array of x by y pixels, and it probably won't have
//               the same length as get_expected_ram_image_size()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1018 14 Dtool_qQJqgWYd 0 7 968 3140 0 14 Dtool_qQJqgWYd 973 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_uncompressed_ram_image
//       Access: Published
//  Description: Returns the system-RAM image associated with the
//               texture, in an uncompressed form if at all possible.
//
//               If get_ram_image_compression() is CM_off, then the
//               system-RAM image is already uncompressed, and this
//               returns the same thing as get_ram_image().
//
//               If get_ram_image_compression() is anything else, then
//               the system-RAM image is compressed.  In this case,
//               the image will be reloaded from the *original* file
//               (not from the cache), in the hopes that an
//               uncompressed image will be found there.
//
//               If an uncompressed image cannot be found, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1019 14 Dtool_qQJq2ylx 0 7 969 3140 0 14 Dtool_qQJq2ylx 1762 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_as
//       Access: Published
//  Description: Returns the uncompressed system-RAM image data
//               associated with the texture. Rather than
//               just returning a pointer to the data, like
//               get_uncompressed_ram_image, this function first
//               processes the data and reorders the components
//               using the specified format string, and places these
//               into a new char array. The 'format' argument should
//               specify in which order the components of the texture
//               must be. For example, valid format strings are
//               "RGBA", "GA", "ABRG" or "AAA". A component can
//               also be written as "0" or "1", which means an
//               empty/black or a full/white channel, respectively.
//               This function is particularly useful to
//               copy an image in-memory to a different library
//               (for example, PIL or wxWidgets) that require
//               a different component order than Panda's internal
//               format, BGRA. Note, however, that this conversion
//               can still be too slow if you want to do it every
//               frame, and should thus be avoided for that purpose.
//               The only requirement for the reordering is that
//               an uncompressed image must be available. If the
//               RAM image is compressed, it will attempt to re-load
//               the texture from disk, if it doesn't find an
//               uncompressed image there, it will return NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  16 requested_format 1 2929  
1020 14 Dtool_qQJq3zLa 0 7 970 3142 0 14 Dtool_qQJq3zLa 517 ////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image.
//               This assumes the RAM image should be uncompressed.
//               If the RAM image has been dumped, or is stored
//               compressed, creates a new one.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1021 14 Dtool_qQJqODVV 0 7 971 3142 0 14 Dtool_qQJqODVV 455 ////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               texture, if any, and allocates a new buffer of the
//               appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1022 14 Dtool_qQJqj2am 0 4 972 2934 0 14 Dtool_qQJqj2am 501 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data.  If compression is not CM_off, it indicates
//               that the new data is already pre-compressed in the
//               indicated format.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  5 image 1 3140  11 compression 1 2898  9 page_size 1 2930  
1023 14 Dtool_qQJqWlIK 0 4 972 2934 0 14 Dtool_qQJqWlIK 501 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data.  If compression is not CM_off, it indicates
//               that the new data is already pre-compressed in the
//               indicated format.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  5 image 1 3140  11 compression 1 2898  
1024 14 Dtool_qQJqdI4d 0 4 972 2934 0 14 Dtool_qQJqdI4d 501 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data.  If compression is not CM_off, it indicates
//               that the new data is already pre-compressed in the
//               indicated format.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  5 image 1 3140  
1025 14 Dtool_qQJqShS5 0 4 973 2934 0 14 Dtool_qQJqShS5 597 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image_as
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data, converting it first if necessary from the
//               indicated component-order format.  See
//               get_ram_image_as() for specifications about the
//               format.  This method cannot support compressed image
//               data or sub-pages; use set_ram_image() for that.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  5 image 1 3140  15 provided_format 1 2929  
1026 14 Dtool_qQJqpFgH 0 4 974 2934 0 14 Dtool_qQJqpFgH 262 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1027 14 Dtool_qQJq_1DJ 0 4 975 2934 0 14 Dtool_qQJq_1DJ 827 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_keep_ram_image
//       Access: Published
//  Description: Sets the flag that indicates whether this Texture is
//               eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.
//
//               This will be false for most textures, which can
//               reload their images if needed by rereading the input
//               file.  However, textures that were generated
//               dynamically and cannot be easily reloaded will want
//               to set this flag to true, so that the texture will
//               always keep its image copy around.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  14 keep_ram_image 1 2935  
1028 14 Dtool_qQJqprTa 0 6 976 2935 0 14 Dtool_qQJqprTa 477 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1029 14 Dtool_qQJq8zCz 0 6 977 2935 0 14 Dtool_qQJq8zCz 464 ////////////////////////////////////////////////////////////////////
//     Function: Texture::is_cacheable
//       Access: Published, Virtual
//  Description: Returns true if there is enough information in this
//               Texture object to write it to the bam cache
//               successfully, false otherwise.  For most textures,
//               this is the same as has_ram_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1030 14 Dtool_qQJq4X6Q 0 6 978 2935 0 14 Dtool_qQJq4X6Q 1257 ////////////////////////////////////////////////////////////////////
//     Function: Texture::compress_ram_image
//       Access: Published
//  Description: Attempts to compress the texture's RAM image
//               internally, to a format supported by the indicated
//               GSG.  In order for this to work, the squish library
//               must have been compiled into Panda.
//
//               If compression is CM_on, then an appropriate
//               compression method that is supported by the indicated
//               GSG is automatically chosen.  If the GSG pointer is
//               NULL, any of the standard DXT1/3/5 compression
//               methods will be used, regardless of whether it is
//               supported.
//
//               If compression is any specific compression method,
//               that method is used regardless of whether the GSG
//               supports it.
//
//               quality_level determines the speed/quality tradeoff
//               of the compression.  If it is QL_default, the
//               texture's own quality_level parameter is used.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  11 compression 1 2898  13 quality_level 1 2899  3 gsg 1 3004  
1031 14 Dtool_qQJqn3DR 0 6 978 2935 0 14 Dtool_qQJqn3DR 1257 ////////////////////////////////////////////////////////////////////
//     Function: Texture::compress_ram_image
//       Access: Published
//  Description: Attempts to compress the texture's RAM image
//               internally, to a format supported by the indicated
//               GSG.  In order for this to work, the squish library
//               must have been compiled into Panda.
//
//               If compression is CM_on, then an appropriate
//               compression method that is supported by the indicated
//               GSG is automatically chosen.  If the GSG pointer is
//               NULL, any of the standard DXT1/3/5 compression
//               methods will be used, regardless of whether it is
//               supported.
//
//               If compression is any specific compression method,
//               that method is used regardless of whether the GSG
//               supports it.
//
//               quality_level determines the speed/quality tradeoff
//               of the compression.  If it is QL_default, the
//               texture's own quality_level parameter is used.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  11 compression 1 2898  13 quality_level 1 2899  
1032 14 Dtool_qQJq50a4 0 6 978 2935 0 14 Dtool_qQJq50a4 1257 ////////////////////////////////////////////////////////////////////
//     Function: Texture::compress_ram_image
//       Access: Published
//  Description: Attempts to compress the texture's RAM image
//               internally, to a format supported by the indicated
//               GSG.  In order for this to work, the squish library
//               must have been compiled into Panda.
//
//               If compression is CM_on, then an appropriate
//               compression method that is supported by the indicated
//               GSG is automatically chosen.  If the GSG pointer is
//               NULL, any of the standard DXT1/3/5 compression
//               methods will be used, regardless of whether it is
//               supported.
//
//               If compression is any specific compression method,
//               that method is used regardless of whether the GSG
//               supports it.
//
//               quality_level determines the speed/quality tradeoff
//               of the compression.  If it is QL_default, the
//               texture's own quality_level parameter is used.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  11 compression 1 2898  
1033 14 Dtool_qQJqHzZo 0 6 978 2935 0 14 Dtool_qQJqHzZo 1257 ////////////////////////////////////////////////////////////////////
//     Function: Texture::compress_ram_image
//       Access: Published
//  Description: Attempts to compress the texture's RAM image
//               internally, to a format supported by the indicated
//               GSG.  In order for this to work, the squish library
//               must have been compiled into Panda.
//
//               If compression is CM_on, then an appropriate
//               compression method that is supported by the indicated
//               GSG is automatically chosen.  If the GSG pointer is
//               NULL, any of the standard DXT1/3/5 compression
//               methods will be used, regardless of whether it is
//               supported.
//
//               If compression is any specific compression method,
//               that method is used regardless of whether the GSG
//               supports it.
//
//               quality_level determines the speed/quality tradeoff
//               of the compression.  If it is QL_default, the
//               texture's own quality_level parameter is used.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1034 14 Dtool_qQJqrKga 0 6 979 2935 0 14 Dtool_qQJqrKga 573 ////////////////////////////////////////////////////////////////////
//     Function: Texture::uncompress_ram_image
//       Access: Published
//  Description: Attempts to uncompress the texture's RAM image
//               internally.  In order for this to work, the squish
//               library must have been compiled into Panda, and the
//               ram image must be compressed in a format supported by
//               squish.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1035 14 Dtool_qQJqsZCn 0 6 980 2938 0 14 Dtool_qQJqsZCn 584 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_ram_mipmap_images
//       Access: Published
//  Description: Returns the maximum number of mipmap level images
//               available in system memory.  The actual number may be
//               less than this (that is, there might be gaps in the
//               sequence); use has_ram_mipmap_image() to verify each
//               level.
//
//               Also see get_num_loadable_ram_mipmap_images().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1036 14 Dtool_qQJqPYfR 0 6 981 2935 0 14 Dtool_qQJqPYfR 608 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_mipmap_image
//       Access: Published
//  Description: Returns true if the Texture has the nth mipmap level
//               available in system memory, false otherwise.  If the
//               texture's minfilter mode requires mipmapping (see
//               uses_mipmaps()), and all the texture's mipmap levels
//               are not available when the texture is rendered, they
//               will be generated automatically.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1037 14 Dtool_qQJqUZqM 0 6 982 2938 0 14 Dtool_qQJqUZqM 955 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_loadable_ram_mipmap_images
//       Access: Published
//  Description: Returns the number of contiguous mipmap levels that
//               exist in RAM, up until the first gap in the sequence.
//               It is guaranteed that at least mipmap levels [0,
//               get_num_ram_mipmap_images()) exist.
//
//               The number returned will never exceed the number of
//               required mipmap images based on the size of the
//               texture and its filter mode.
//
//               This method is different from
//               get_num_ram_mipmap_images() in that it returns only
//               the number of mipmap levels that can actually be
//               usefully loaded, regardless of the actual number that
//               may be stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1038 14 Dtool_qQJquUo_ 0 6 983 2935 0 14 Dtool_qQJquUo_ 403 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_all_ram_mipmap_images
//       Access: Published
//  Description: Returns true if all expected mipmap levels have been
//               defined and exist in the system RAM, or false if even
//               one mipmap level is missing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1039 14 Dtool_qQJqIt9g 0 6 984 2930 0 14 Dtool_qQJqIt9g 402 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image for mipmap level n, or 0 if there is no
//               in-memory image for this mipmap level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1040 14 Dtool_qQJqql85 0 6 985 2930 0 14 Dtool_qQJqql85 913 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_view_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per view for mipmap level n, or 0 if there is
//               no in-memory image for this mipmap level.
//
//               A "view" is a collection of z_size pages for each
//               mipmap level.  Most textures have only one view,
//               except for multiview or stereo textures.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_mipmap_view_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1041 14 Dtool_qQJqrxQs 0 6 986 2930 0 14 Dtool_qQJqrxQs 719 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page for mipmap level n, or 0 if there is
//               no in-memory image for this mipmap level.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_mipmap_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1042 14 Dtool_qQJq18J3 0 6 987 2930 0 14 Dtool_qQJq18J3 404 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image for mipmap level n, based on
//               the texture parameters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1043 14 Dtool_qQJqKTPS 0 6 988 2930 0 14 Dtool_qQJqKTPS 547 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_view_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by each view of the in-memory image for mipmap level
//               n, based on the texture parameters.  For a normal,
//               non-multiview texture, this is the same as
//               get_expected_ram_mipmap_image_size(n).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1044 14 Dtool_qQJqmvjI 0 6 989 2930 0 14 Dtool_qQJqmvjI 480 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture, for mipmap level n.
//               For a 2-d or 1-d texture, this is the same as
//               get_expected_ram_mipmap_view_size(n).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1045 14 Dtool_qQJqnFOc 0 7 990 3140 0 14 Dtool_qQJqnFOc 400 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               nth mipmap level, if present.  Returns NULL if the
//               nth mipmap level is not present.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1046 14 Dtool_qQJqT52p 0 4 991 2934 0 14 Dtool_qQJqT52p 447 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_pointer
//       Access: Published
//  Description: Similiar to get_ram_mipmap_image(), however, in this
//               case the void pointer for the given ram image is
//               returned.  This will be NULL unless it has been
//               explicitly set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  1 n 1 2938  
1047 14 Dtool_qQJqFscn 0 7 992 3142 0 14 Dtool_qQJqFscn 511 ////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_mipmap_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image
//               for the nth mipmap level.  This assumes the RAM image
//               is uncompressed; if this is not the case, raises an
//               assertion.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  1 n 1 2938  
1048 14 Dtool_qQJq0yn2 0 7 993 3142 0 14 Dtool_qQJq0yn2 471 ////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               nth mipmap level, if any, and allocates a new buffer
//               of the appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  1 n 1 2938  
1049 14 Dtool_qQJqIzqO 0 4 995 2934 0 14 Dtool_qQJqIzqO 592 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_pointer_from_int
//       Access: Published
//  Description: Accepts a raw pointer cast as an int, which is then
//               passed to set_ram_mipmap_pointer(); see the
//               documentation for that method.
//
//               This variant is particularly useful to set an
//               external pointer from a language like Python, which
//               doesn't support void pointers directly.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  7 pointer 1 3143  1 n 1 2938  9 page_size 1 2938  
1050 14 Dtool_qQJqNhUE 0 4 996 2934 0 14 Dtool_qQJqNhUE 556 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_image
//       Access: Published
//  Description: Replaces the current system-RAM image for the
//               indicated mipmap level with the new data.  If
//               compression is not CM_off, it indicates that the new
//               data is already pre-compressed in the indicated
//               format.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  1 n 1 2938  5 image 1 3140  9 page_size 1 2930  
1051 14 Dtool_qQJqtuFT 0 4 996 2934 0 14 Dtool_qQJqtuFT 556 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_image
//       Access: Published
//  Description: Replaces the current system-RAM image for the
//               indicated mipmap level with the new data.  If
//               compression is not CM_off, it indicates that the new
//               data is already pre-compressed in the indicated
//               format.
//
//               This does *not* affect keep_ram_image.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  1 n 1 2938  5 image 1 3140  
1052 14 Dtool_qQJqYq5x 0 4 997 2934 0 14 Dtool_qQJqYq5x 311 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the nth
//               mipmap level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  1 n 1 2938  
1053 14 Dtool_qQJq_KKM 0 4 998 2934 0 14 Dtool_qQJq_KKM 342 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_images
//       Access: Published
//  Description: Discards the current system-RAM image for all
//               mipmap levels, except level 0 (the base image).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1054 14 Dtool_qQJqvPAg 0 4 999 2934 0 14 Dtool_qQJqvPAg 794 ////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_ram_mipmap_images
//       Access: Published
//  Description: Automatically fills in the n mipmap levels of the
//               Texture, based on the texture's source image.  This
//               requires the texture's uncompressed ram image to be
//               available in system memory.  If it is not already, it
//               will be fetched if possible.
//
//               This call is not normally necessary, since the mipmap
//               levels will be generated automatically if needed.
//               But there may be certain cases in which you would
//               like to call this explicitly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1055 14 Dtool_qQJqjKHa 0 6 1000 2938 0 14 Dtool_qQJqjKHa 276 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_x_size
//       Access: Published
//  Description: Returns the width of the "simple" image in texels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1056 14 Dtool_qQJqzoaa 0 6 1001 2938 0 14 Dtool_qQJqzoaa 277 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_y_size
//       Access: Published
//  Description: Returns the height of the "simple" image in texels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1057 14 Dtool_qQJqF9NW 0 6 1002 2935 0 14 Dtool_qQJqF9NW 326 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_simple_ram_image
//       Access: Published, Virtual
//  Description: Returns true if the Texture has a "simple" image
//               available in main RAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1058 14 Dtool_qQJqHF_T 0 6 1003 2930 0 14 Dtool_qQJqHF_T 340 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the "simple"
//               image, or 0 if there is no simple image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1059 14 Dtool_qQJqtR6g 0 7 1004 3140 0 14 Dtool_qQJqtR6g 879 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_ram_image
//       Access: Published
//  Description: Returns the image data associated with the "simple"
//               texture image.  This is provided for some textures as
//               an option to display while the main texture image is
//               being loaded from disk.
//
//               Unlike get_ram_image(), this function will always
//               return immediately.  Either the simple image is
//               available, or it is not.
//
//               The "simple" image is always 4 components, 1 byte
//               each, regardless of the parameters of the full
//               texture.  The simple image is only supported for
//               ordinary 2-d textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1060 14 Dtool_qQJqVbFL 0 4 1005 2934 0 14 Dtool_qQJqVbFL 1051 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_simple_ram_image
//       Access: Published
//  Description: Replaces the internal "simple" texture image.  This
//               can be used as an option to display while the main
//               texture image is being loaded from disk.  It is
//               normally a very small image, 16x16 or smaller (and
//               maybe even 1x1), that is designed to give just enough
//               sense of color to serve as a placeholder until the
//               full texture is available.
//
//               The "simple" image is always 4 components, 1 byte
//               each, regardless of the parameters of the full
//               texture.  The simple image is only supported for
//               ordinary 2-d textures.
//
//               Also see generate_simple_ram_image(),
//               modify_simple_ram_image(), and
//               new_simple_ram_image().
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  5 image 1 3140  6 x_size 1 2938  6 y_size 1 2938  
1061 14 Dtool_qQJqnWcl 0 7 1006 3142 0 14 Dtool_qQJqnWcl 346 ////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_simple_ram_image
//       Access: Published
//  Description: Returns a modifiable pointer to the internal "simple"
//               texture image.  See set_simple_ram_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1062 14 Dtool_qQJqlEaN 0 7 1007 3142 0 14 Dtool_qQJqlEaN 413 ////////////////////////////////////////////////////////////////////
//     Function: Texture::new_simple_ram_image
//       Access: Published
//  Description: Creates an empty array for the simple ram image of
//               the indicated size, and returns a modifiable pointer
//               to the new array.  See set_simple_ram_image().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  6 x_size 1 2938  6 y_size 1 2938  
1063 14 Dtool_qQJqi9_G 0 4 1008 2934 0 14 Dtool_qQJqi9_G 453 ////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_simple_ram_image
//       Access: Published
//  Description: Computes the "simple" ram image by loading the main
//               RAM image, if it is not already available, and
//               reducing it to 16x16 or smaller.  This may be an
//               expensive operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1064 14 Dtool_qQJq3521 0 4 1009 2934 0 14 Dtool_qQJq3521 267 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_simple_ram_image
//       Access: Published
//  Description: Discards the current "simple" image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1065 14 Dtool_qQJq0K12 0 7 1010 3144 2818 14 Dtool_qQJq0K12 826 ////////////////////////////////////////////////////////////////////
//     Function: Texture::peek
//       Access: Published
//  Description: Returns a TexturePeeker object that can be used to
//               examine the individual texels stored within this
//               Texture by (u, v) coordinate.
//
//               If the texture has a ram image resident, that image
//               is used.  If it does not have a full ram image but
//               does have a simple_ram_image resident, that image is
//               used instead.  If neither image is resident the full
//               image is reloaded.
//
//               Returns NULL if the texture cannot find an image to
//               load, or the texture format is incompatible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1066 14 Dtool_qQJqhBtw 0 7 1011 2997 0 14 Dtool_qQJqhBtw 403 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_properties_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture properties
//               (unrelated to the image) are modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1067 14 Dtool_qQJqTeDG 0 7 1012 2997 0 14 Dtool_qQJqTeDG 399 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_image_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture image data
//               (including mipmap levels) are modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1068 14 Dtool_qQJq12pR 0 7 1013 2997 0 14 Dtool_qQJq12pR 390 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_simple_image_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture's "simple"
//               image data is modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1069 14 Dtool_qQJq7xr7 0 4 1014 2934 0 14 Dtool_qQJq7xr7 421 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_auto_texture_scale
//       Access: Published
//  Description: Specifies the power-of-2 texture-scaling mode that
//               will be applied to this particular texture when it is
//               next loaded from disk.  See set_textures_power_2().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  5 scale 1 3145  
1070 14 Dtool_qQJqu3_O 0 6 1015 3145 0 14 Dtool_qQJqu3_O 419 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_auto_texture_scale
//       Access: Published
//  Description: Returns the power-of-2 texture-scaling mode that will
//               be applied to this particular texture when it is next
//               loaded from disk.  See set_textures_power_2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1071 14 Dtool_qQJq0fRE 0 6 1016 2935 0 14 Dtool_qQJq0fRE 387 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_auto_texture_scale
//       Access: Published
//  Description: Returns true if set_auto_texture_scale() has been set
//               to something other than ATS_unspecified for this
//               particular texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1072 14 Dtool_qQJqLFHv 0 4 1017 2934 0 14 Dtool_qQJqLFHv 655 ////////////////////////////////////////////////////////////////////
//     Function: Texture::prepare
//       Access: Published
//  Description: Indicates that the texture should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  16 prepared_objects 1 3003  
1073 14 Dtool_qQJqgvjn 0 6 1018 2935 0 14 Dtool_qQJqgvjn 374 ////////////////////////////////////////////////////////////////////
//     Function: Texture::is_prepared
//       Access: Published
//  Description: Returns true if the texture has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  16 prepared_objects 1 3003  
1074 14 Dtool_qQJqUPgs 0 6 1019 2935 0 14 Dtool_qQJqUPgs 437 ////////////////////////////////////////////////////////////////////
//     Function: Texture::was_image_modified
//       Access: Published
//  Description: Returns true if the texture needs to be re-loaded
//               onto the indicated GSG, either because its image data
//               is out-of-date, or because it's not fully prepared
//               now.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  16 prepared_objects 1 3003  
1075 14 Dtool_qQJqWC_V 0 6 1020 2930 0 14 Dtool_qQJqWC_V 639 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_data_size_bytes
//       Access: Public
//  Description: Returns the number of bytes which the texture is
//               reported to consume within graphics memory, for the
//               indicated GSG.  This may return a nonzero value even
//               if the texture is not currently resident; you should
//               also check get_resident() if you want to know how
//               much space the texture is actually consuming right
//               now.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  16 prepared_objects 1 3003  
1076 14 Dtool_qQJqo8z_ 0 6 1021 2935 0 14 Dtool_qQJqo8z_ 325 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_active
//       Access: Public
//  Description: Returns true if this Texture was rendered in the most
//               recent frame within the indicated GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  16 prepared_objects 1 3003  
1077 14 Dtool_qQJqUPUd 0 6 1022 2935 0 14 Dtool_qQJqUPUd 353 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_resident
//       Access: Public
//  Description: Returns true if this Texture is reported to be
//               resident within graphics memory for the indicated
//               GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  16 prepared_objects 1 3003  
1078 14 Dtool_qQJqv3AE 0 6 1023 2935 0 14 Dtool_qQJqv3AE 394 ////////////////////////////////////////////////////////////////////
//     Function: Texture::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  16 prepared_objects 1 3003  
1079 14 Dtool_qQJqH_Et 0 6 1024 2938 0 14 Dtool_qQJqH_Et 392 ////////////////////////////////////////////////////////////////////
//     Function: Texture::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1080 14 Dtool_qQJqp5Zg 0 6 1025 2930 0 14 Dtool_qQJqp5Zg 775 ////////////////////////////////////////////////////////////////////
//     Function: Texture::estimate_texture_memory
//       Access: Published
//  Description: Estimates the amount of texture memory that will be
//               consumed by loading this texture.  This returns a
//               value that is not specific to any particular graphics
//               card or driver; it tries to make a reasonable
//               assumption about how a driver will load the texture.
//               It does not account for texture compression or
//               anything fancy.  This is mainly useful for debugging
//               and reporting purposes.
//
//               Returns a value in bytes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1081 14 Dtool_qQJqNHbm 0 4 1026 2934 0 14 Dtool_qQJqNHbm 523 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_aux_data
//       Access: Published
//  Description: Records an arbitrary object in the Texture,
//               associated with a specified key.  The object may
//               later be retrieved by calling get_aux_data() with the
//               same key.
//
//               These data objects are not recorded to a bam or txo
//               file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  3 key 1 2929  8 aux_data 1 3146  
1082 14 Dtool_qQJq8EWP 0 4 1027 2934 0 14 Dtool_qQJq8EWP 296 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_aux_data
//       Access: Published
//  Description: Removes a record previously recorded via
//               set_aux_data().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  3 key 1 2929  
1083 14 Dtool_qQJqkzsv 0 7 1028 3146 0 14 Dtool_qQJqkzsv 383 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_aux_data
//       Access: Published
//  Description: Returns a record previously recorded via
//               set_aux_data().  Returns NULL if there was no record
//               associated with the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3123  3 key 1 2929  
1084 14 Dtool_qQJqesKC 0 4 1029 2934 0 14 Dtool_qQJqesKC 520 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_textures_power_2
//       Access: Published, Static
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control the scaling of textures in
//               general, if a particular texture does not override
//               this.  See also set_auto_texture_scale() for the
//               per-texture override.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3145  
1085 14 Dtool_qQJqvjA4 0 6 1030 3145 0 14 Dtool_qQJqvjA4 536 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_textures_power_2
//       Access: Published, Static
//  Description: This flag returns ATS_none, ATS_up, or ATS_down
//               and controls the scaling of textures in general.  It
//               is initialized from the config variable of the same
//               name, but it can be subsequently adjusted.  See also
//               get_auto_texture_scale().
//////////////////////////////////////////////////////////////////// 0 
1086 14 Dtool_qQJqHLSt 0 6 1031 2935 0 14 Dtool_qQJqHLSt 452 ////////////////////////////////////////////////////////////////////
//     Function: Texture::has_textures_power_2
//       Access: Published, Static
//  Description: If true, then get_textures_power_2 has been
//               set using set_textures_power_2.
//               If false, then get_textures_power_2 simply
//               returns the config variable of the same name.
//////////////////////////////////////////////////////////////////// 0 
1087 14 Dtool_qQJqxxu1 0 4 1032 2934 0 14 Dtool_qQJqxxu1 690 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               contents.  Normally, this is set automatically when
//               the image is loaded, for instance via
//               Texture::read().
//
//               The Texture's get_name() function used to return
//               the filename, but now returns just the basename
//               (without the extension), which is a more useful name
//               for identifying an image in show code.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 filename 1 3125  
1088 14 Dtool_qQJq1EJs 0 4 1033 2934 0 14 Dtool_qQJq1EJs 313 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1089 14 Dtool_qQJqm10_ 0 4 1034 2934 0 14 Dtool_qQJqm10_ 915 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               alpha channel contents.  Normally, this is set
//               automatically when the image is loaded, for instance
//               via Texture::read().
//
//               The Texture's get_filename() function returns the
//               name of the image file that was loaded into the
//               buffer.  In the case where a texture specified two
//               separate files to load, a 1- or 3-channel color image
//               and a 1-channel alpha image, this Filename is update
//               to contain the name of the image file that was loaded
//               into the buffer's alpha channel.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  14 alpha_filename 1 3125  
1090 14 Dtool_qQJqniFu 0 4 1035 2934 0 14 Dtool_qQJqniFu 325 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1091 14 Dtool_qQJqwCYx 0 4 1036 2934 0 14 Dtool_qQJqwCYx 470 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's contents, as found along the search path.
//               Normally, this is set automatically when the image is
//               loaded, for instance via Texture::read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 fullpath 1 3125  
1092 14 Dtool_qQJq_nbF 0 4 1037 2934 0 14 Dtool_qQJq_nbF 313 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1093 14 Dtool_qQJq66Zo 0 4 1038 2934 0 14 Dtool_qQJq66Zo 508 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's alpha channel contents, as found along the
//               search path.  Normally, this is set automatically
//               when the image is loaded, for instance via
//               Texture::read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  14 alpha_fullpath 1 3125  
1094 14 Dtool_qQJqQc0_ 0 4 1039 2934 0 14 Dtool_qQJqQc0_ 325 ////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1095 14 Dtool_qQJqzob9 0 4 1040 2934 0 14 Dtool_qQJqzob9 371 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_x_size
//       Access: Published
//  Description: Changes the x size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 x_size 1 2938  
1096 14 Dtool_qQJqLp7A 0 4 1041 2934 0 14 Dtool_qQJqLp7A 371 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_y_size
//       Access: Published
//  Description: Changes the y size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 y_size 1 2938  
1097 14 Dtool_qQJqipbE 0 4 1042 2934 0 14 Dtool_qQJqipbE 371 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_z_size
//       Access: Published
//  Description: Changes the z size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 z_size 1 2938  
1098 14 Dtool_qQJqaw4x 0 4 1043 2934 0 14 Dtool_qQJqaw4x 866 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_num_views
//       Access: Published
//  Description: Sets the number of "views" within a texture.  A view
//               is a completely separate image stored within the
//               Texture object.  Most textures have only one view,
//               but a stereo texture, for instance, may have two
//               views, a left and a right image.  Other uses for
//               multiple views are not yet defined.
//
//               If this value is greater than one, the additional
//               views are accessed as additional pages beyond
//               get_z_size().
//
//               This also implicitly unloads the texture if it has
//               already been loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  9 num_views 1 2938  
1099 14 Dtool_qQJq6S4x 0 6 1044 2938 0 14 Dtool_qQJq6S4x 273 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_x_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1100 14 Dtool_qQJq_SGO 0 6 1045 2938 0 14 Dtool_qQJq_SGO 273 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_y_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1101 14 Dtool_qQJqBSUq 0 6 1046 2938 0 14 Dtool_qQJqBSUq 273 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_pad_z_size
//       Access: Published
//  Description: Returns size of the pad region.  See set_pad_size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1102 14 Dtool_qQJqpphB 0 7 1047 3147 0 14 Dtool_qQJqpphB 866 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_tex_scale
//       Access: Published
//  Description: Returns a scale pair that is suitable for applying to
//               geometry via NodePath::set_tex_scale(), which will
//               convert texture coordinates on the geometry from the
//               range 0..1 into the appropriate range to render the
//               video part of the texture.
//
//               This is necessary only if a padding size has been set
//               via set_pad_size() (or implicitly via something like
//               "textures-power-2 pad" in the config.prc file).  In
//               this case, this is a convenient way to generate UV's
//               that reflect the built-in padding size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1103 14 Dtool_qQJqNa2k 0 4 1048 2934 0 14 Dtool_qQJqNa2k 813 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_pad_size
//       Access: Published
//  Description: Sets the size of the pad region.
//
//               Sometimes, when a video card demands power-of-two
//               textures, it is necessary to create a big texture
//               and then only use a portion of it.  The pad region
//               indicates which portion of the texture is not
//               really in use.  All operations use the texture
//               as a whole, including the pad region, unless they
//               explicitly state that they use only the non-pad
//               region.
//
//               Changing the texture's size clears the pad region.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  1 x 1 2938  1 y 1 2938  1 z 1 2938  
1104 14 Dtool_qQJqI6hq 0 4 1048 2934 0 14 Dtool_qQJqI6hq 813 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_pad_size
//       Access: Published
//  Description: Sets the size of the pad region.
//
//               Sometimes, when a video card demands power-of-two
//               textures, it is necessary to create a big texture
//               and then only use a portion of it.  The pad region
//               indicates which portion of the texture is not
//               really in use.  All operations use the texture
//               as a whole, including the pad region, unless they
//               explicitly state that they use only the non-pad
//               region.
//
//               Changing the texture's size clears the pad region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  1 x 1 2938  1 y 1 2938  
1105 14 Dtool_qQJqzpXt 0 4 1048 2934 0 14 Dtool_qQJqzpXt 813 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_pad_size
//       Access: Published
//  Description: Sets the size of the pad region.
//
//               Sometimes, when a video card demands power-of-two
//               textures, it is necessary to create a big texture
//               and then only use a portion of it.  The pad region
//               indicates which portion of the texture is not
//               really in use.  All operations use the texture
//               as a whole, including the pad region, unless they
//               explicitly state that they use only the non-pad
//               region.
//
//               Changing the texture's size clears the pad region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  1 x 1 2938  
1106 14 Dtool_qQJqsnEy 0 4 1048 2934 0 14 Dtool_qQJqsnEy 813 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_pad_size
//       Access: Published
//  Description: Sets the size of the pad region.
//
//               Sometimes, when a video card demands power-of-two
//               textures, it is necessary to create a big texture
//               and then only use a portion of it.  The pad region
//               indicates which portion of the texture is not
//               really in use.  All operations use the texture
//               as a whole, including the pad region, unless they
//               explicitly state that they use only the non-pad
//               region.
//
//               Changing the texture's size clears the pad region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1107 14 Dtool_qQJqP_Qd 0 4 1049 2934 0 14 Dtool_qQJqP_Qd 348 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_size_padded
//       Access: Published
//  Description: Changes the size of the texture, padding
//               if necessary, and setting the pad region
//               as well.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  1 x 1 2938  1 y 1 2938  1 z 1 2938  
1108 14 Dtool_qQJqf7Uc 0 4 1049 2934 0 14 Dtool_qQJqf7Uc 348 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_size_padded
//       Access: Published
//  Description: Changes the size of the texture, padding
//               if necessary, and setting the pad region
//               as well.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  1 x 1 2938  1 y 1 2938  
1109 14 Dtool_qQJq0f17 0 4 1049 2934 0 14 Dtool_qQJq0f17 348 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_size_padded
//       Access: Published
//  Description: Changes the size of the texture, padding
//               if necessary, and setting the pad region
//               as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  1 x 1 2938  
1110 14 Dtool_qQJq5TOP 0 4 1049 2934 0 14 Dtool_qQJq5TOP 348 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_size_padded
//       Access: Published
//  Description: Changes the size of the texture, padding
//               if necessary, and setting the pad region
//               as well.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1111 14 Dtool_qQJqhkHc 0 6 1050 2938 0 14 Dtool_qQJqhkHc 414 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_x_size
//       Access: Published
//  Description: Returns the X size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1112 14 Dtool_qQJqdmHq 0 6 1051 2938 0 14 Dtool_qQJqdmHq 414 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_y_size
//       Access: Published
//  Description: Returns the Y size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1113 14 Dtool_qQJq5rH4 0 6 1052 2938 0 14 Dtool_qQJq5rH4 414 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_orig_file_z_size
//       Access: Published
//  Description: Returns the Z size of the original disk image that
//               this Texture was loaded from (if it came from a disk
//               file), before any automatic rescaling by Panda.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1114 14 Dtool_qQJqpqd5 0 4 1053 2934 0 14 Dtool_qQJqpqd5 343 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_orig_file_size
//       Access: Published
//  Description: Specifies the size of the texture as it exists in its
//               original disk file, before any Panda scaling.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  1 x 1 2938  1 y 1 2938  1 z 1 2938  
1115 14 Dtool_qQJqPjli 0 4 1053 2934 0 14 Dtool_qQJqPjli 343 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_orig_file_size
//       Access: Published
//  Description: Specifies the size of the texture as it exists in its
//               original disk file, before any Panda scaling.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3122  1 x 1 2938  1 y 1 2938  
1116 14 Dtool_qQJqtpDw 0 4 1054 2934 0 14 Dtool_qQJqtpDw 333 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_format
//       Access: Published
//  Description: Changes the format value for the texture components.
//               This implicitly sets num_components as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  6 format 1 2895  
1117 14 Dtool_qQJqQhrN 0 4 1055 2934 0 14 Dtool_qQJqQhrN 340 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_component_type
//       Access: Published
//  Description: Changes the data value for the texture components.
//               This implicitly sets component_width as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  14 component_type 1 2894  
1118 14 Dtool_qQJq2KhW 0 4 1056 2934 0 14 Dtool_qQJq2KhW 553 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_image
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  You should also
//               ensure the filename has been set correctly.  When
//               this flag is true, the texture may be automatically
//               reloaded when its ram image needs to be replaced.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1119 14 Dtool_qQJqLfRY 0 6 1057 2935 0 14 Dtool_qQJqLfRY 383 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_image
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  See
//               set_loaded_from_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1120 14 Dtool_qQJqh42H 0 4 1058 2934 0 14 Dtool_qQJqh42H 452 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_txo
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a txo file.  You probably shouldn't be
//               setting this directly; it is set automatically when a
//               Texture is loaded.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1121 14 Dtool_qQJqmAs_ 0 6 1059 2935 0 14 Dtool_qQJqmAs_ 321 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_txo
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a txo file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1122 14 Dtool_qQJqscHG 0 6 1060 2935 0 14 Dtool_qQJqscHG 338 ////////////////////////////////////////////////////////////////////
//     Function: Texture::is_mipmap
//       Access: Published, Static
//  Description: Returns true if the indicated filter type requires
//               the use of mipmaps, or false if it does not.
//////////////////////////////////////////////////////////////////// 1 4 type 1 2896  
1123 14 Dtool_qQJq608G 0 6 1061 2935 0 14 Dtool_qQJq608G 588 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_match_framebuffer_format
//       Access: Public
//  Description: Returns true if the special flag was set that
//               indicates to the GSG that the Texture's format should
//               be chosen to exactly match the framebuffer's format,
//               presumably because the application intends to copy
//               image data from the framebuffer into the Texture (or
//               vice-versa).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1124 14 Dtool_qQJqsRvh 0 4 1062 2934 0 14 Dtool_qQJqsRvh 743 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_match_framebuffer_format
//       Access: Public
//  Description: Sets the special flag that, if true, indicates to the
//               GSG that the Texture's format should be chosen to
//               exactly match the framebuffer's format, presumably
//               because the application intends to copy image data
//               from the framebuffer into the Texture (or
//               vice-versa).
//
//               This sets only the graphics card's idea of the
//               texture format; it is not related to the
//               system-memory format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 flag 1 2935  
1125 14 Dtool_qQJqZVP_ 0 6 1063 2935 0 14 Dtool_qQJqZVP_ 336 ////////////////////////////////////////////////////////////////////
//     Function: Texture::get_post_load_store_cache
//       Access: Public
//  Description: Returns the setting of the post_load_store_cache
//               flag.  See set_post_load_store_cache().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3123  
1126 14 Dtool_qQJquxvY 0 4 1064 2934 0 14 Dtool_qQJquxvY 742 ////////////////////////////////////////////////////////////////////
//     Function: Texture::set_post_load_store_cache
//       Access: Public
//  Description: Sets the post_load_store_cache flag.  When this is
//               set, the next time the texture is loaded on a GSG, it
//               will automatically extract its RAM image from the GSG
//               and save it to the global BamCache.
//
//               This is used to store compressed RAM images in the
//               BamCache.  This flag should not be set explicitly; it
//               is set automatically by the TexturePool when
//               model-cache-compressed-textures is set true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  4 flag 1 2935  
1127 14 Dtool_qQJqufIe 0 6 1065 3148 0 14 Dtool_qQJqufIe 889 ////////////////////////////////////////////////////////////////////
//     Function: Texture::prepare_now
//       Access: Published
//  Description: Creates a context for the texture on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) TextureContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a texture does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3122  4 view 1 2938  16 prepared_objects 1 3003  3 gsg 1 3004  
1128 14 Dtool_qQJqRUGo 0 6 1066 2938 0 14 Dtool_qQJqRUGo 310 ////////////////////////////////////////////////////////////////////
//     Function: Texture::up_to_power_2
//       Access: Published, Static
//  Description: Returns the smallest power of 2 greater than or equal
//               to value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 2938  
1129 14 Dtool_qQJqO34N 0 6 1067 2938 0 14 Dtool_qQJqO34N 308 ////////////////////////////////////////////////////////////////////
//     Function: Texture::down_to_power_2
//       Access: Published, Static
//  Description: Returns the largest power of 2 less than or equal
//               to value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 2938  
1130 14 Dtool_qQJq2TNp 0 4 1068 2934 0 14 Dtool_qQJq2TNp 554 ////////////////////////////////////////////////////////////////////
//     Function: Texture::consider_rescale
//       Access: Published
//  Description: Asks the PNMImage to change its scale when it reads
//               the image, according to the whims of the Config.prc
//               file.
//
//               This method should be called after
//               pnmimage.read_header() has been called, but before
//               pnmimage.read().  Also see rescale_texture().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3122  8 pnmimage 1 3138  
1131 14 Dtool_qQJqCZYI 0 4 1068 2934 0 14 Dtool_qQJqCZYI 562 ////////////////////////////////////////////////////////////////////
//     Function: Texture::consider_rescale
//       Access: Published, Static
//  Description: Asks the PNMImage to change its scale when it reads
//               the image, according to the whims of the Config.prc
//               file.
//
//               This method should be called after
//               pnmimage.read_header() has been called, but before
//               pnmimage.read().  Also see rescale_texture().
//////////////////////////////////////////////////////////////////// 3 8 pnmimage 1 3138  4 name 1 2929  18 auto_texture_scale 1 3145  
1132 14 Dtool_qQJqt_Or 0 4 1068 2934 0 14 Dtool_qQJqt_Or 562 ////////////////////////////////////////////////////////////////////
//     Function: Texture::consider_rescale
//       Access: Published, Static
//  Description: Asks the PNMImage to change its scale when it reads
//               the image, according to the whims of the Config.prc
//               file.
//
//               This method should be called after
//               pnmimage.read_header() has been called, but before
//               pnmimage.read().  Also see rescale_texture().
//////////////////////////////////////////////////////////////////// 2 8 pnmimage 1 3138  4 name 1 2929  
1133 14 Dtool_qQJqAcI4 0 6 1069 2935 0 14 Dtool_qQJqAcI4 711 ////////////////////////////////////////////////////////////////////
//     Function: Texture::rescale_texture
//       Access: Published
//  Description: This method is similar to consider_rescale(), but
//               instead of scaling a separate PNMImage, it will ask
//               the Texture to rescale its own internal image to a
//               power of 2, according to the config file
//               requirements.  This may be useful after loading a
//               Texture image by hand, instead of reading it from a
//               disk file.  Returns true if the texture is changed,
//               false if it was not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3122  
1134 14 Dtool_qQJqaQx8 0 6 1070 2929 0 14 Dtool_qQJqaQx8 314 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_texture_type
//       Access: Published, Static
//  Description: Returns the indicated TextureType converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 2 tt 1 2893  
1135 14 Dtool_qQJq_WYZ 0 6 1071 2893 0 14 Dtool_qQJq_WYZ 320 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_texture_type
//       Access: Published, Static
//  Description: Returns the TextureType corresponding to the
//               indicated string word.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1136 14 Dtool_qQJqpkXc 0 6 1072 2929 0 14 Dtool_qQJqpkXc 318 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_component_type
//       Access: Published, Static
//  Description: Returns the indicated ComponentType converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 2 ct 1 2894  
1137 14 Dtool_qQJqK8YF 0 6 1073 2894 0 14 Dtool_qQJqK8YF 324 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_component_type
//       Access: Published, Static
//  Description: Returns the ComponentType corresponding to the
//               indicated string word.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1138 14 Dtool_qQJqs0zV 0 6 1074 2929 0 14 Dtool_qQJqs0zV 303 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_format
//       Access: Published, Static
//  Description: Returns the indicated Format converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 1 f 1 2895  
1139 14 Dtool_qQJqW1Ht 0 6 1075 2895 0 14 Dtool_qQJqW1Ht 309 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_format
//       Access: Published, Static
//  Description: Returns the Format corresponding to the
//               indicated string word.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1140 14 Dtool_qQJq2Nj6 0 6 1076 2929 0 14 Dtool_qQJq2Nj6 312 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_filter_type
//       Access: Published, Static
//  Description: Returns the indicated FilterType converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 2 ft 1 2896  
1141 14 Dtool_qQJqS9la 0 6 1077 2896 0 14 Dtool_qQJqS9la 406 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_filter_type
//       Access: Public
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_invalid if the string
//               does not match any known FilterType value.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1142 14 Dtool_qQJqHmVJ 0 6 1078 2929 0 14 Dtool_qQJqHmVJ 308 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_wrap_mode
//       Access: Published, Static
//  Description: Returns the indicated WrapMode converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 2 wm 1 2897  
1143 14 Dtool_qQJqyzim 0 6 1079 2897 0 14 Dtool_qQJqyzim 400 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_wrap_mode
//       Access: Public
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_invalid if the string
//               does not match any known WrapMode value.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1144 14 Dtool_qQJqBL3k 0 6 1080 2929 0 14 Dtool_qQJqBL3k 322 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_compression_mode
//       Access: Published, Static
//  Description: Returns the indicated CompressionMode converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 2 cm 1 2898  
1145 14 Dtool_qQJqCA1d 0 6 1081 2898 0 14 Dtool_qQJqCA1d 328 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_compression_mode
//       Access: Public
//  Description: Returns the CompressionMode value associated with the
//               given string representation.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1146 14 Dtool_qQJqgZEo 0 6 1082 2929 0 14 Dtool_qQJqgZEo 316 ////////////////////////////////////////////////////////////////////
//     Function: Texture::format_quality_level
//       Access: Published, Static
//  Description: Returns the indicated QualityLevel converted to a
//               string word.
//////////////////////////////////////////////////////////////////// 1 3 tql 1 2899  
1147 14 Dtool_qQJqENGH 0 6 1083 2899 0 14 Dtool_qQJqENGH 322 ////////////////////////////////////////////////////////////////////
//     Function: Texture::string_quality_level
//       Access: Public
//  Description: Returns the QualityLevel value associated with the
//               given string representation.
//////////////////////////////////////////////////////////////////// 1 3 str 1 2929  
1148 14 Dtool_qQJqoC2_ 0 7 1084 2950 0 14 Dtool_qQJqoC2_ 0 0 
1149 14 Dtool_qQJqYako 0 7 876 2959 0 14 Dtool_qQJqYako 0 1 4 this 3 3122  
1150 14 Dtool_qQJqc1xv 0 7 877 3122 2314 14 Dtool_qQJqc1xv 0 1 4 this 3 2959  
1151 14 Dtool_qQJqOTYU 0 6 878 2970 0 14 Dtool_qQJqOTYU 0 1 4 this 3 3122  
1152 14 Dtool_qQJqSRIH 0 7 879 3122 2314 14 Dtool_qQJqSRIH 0 1 4 this 3 2970  
1153 14 Dtool_qQJqlkb4 0 7 1091 3149 0 14 Dtool_qQJqlkb4 261 ////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: Loads the shader with the given filename.
//////////////////////////////////////////////////////////////////// 2 4 file 1 3125  4 lang 1 2902  
1154 14 Dtool_qQJqJQge 0 7 1091 3149 0 14 Dtool_qQJqJQge 261 ////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: Loads the shader with the given filename.
//////////////////////////////////////////////////////////////////// 1 4 file 1 3125  
1155 14 Dtool_qQJqHylL 0 7 1091 3149 0 14 Dtool_qQJqHylL 303 ////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: This variant of Shader::load loads all shader
//               programs separately.
//////////////////////////////////////////////////////////////////// 4 4 lang 1 2902  6 vertex 1 3125  8 fragment 1 3125  8 geometry 1 3125  
1156 14 Dtool_qQJq7Ee5 0 7 1091 3149 0 14 Dtool_qQJq7Ee5 303 ////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description: This variant of Shader::load loads all shader
//               programs separately.
//////////////////////////////////////////////////////////////////// 3 4 lang 1 2902  6 vertex 1 3125  8 fragment 1 3125  
1157 14 Dtool_qQJqXaSs 0 7 1092 3149 0 14 Dtool_qQJqXaSs 277 //////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the strings as shader bodies.
////////////////////////////////////////////////////////////////////// 4 4 lang 1 2902  6 vertex 1 2929  8 fragment 1 2929  8 geometry 1 2929  
1158 14 Dtool_qQJqTwTL 0 7 1092 3149 0 14 Dtool_qQJqTwTL 277 //////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the strings as shader bodies.
////////////////////////////////////////////////////////////////////// 3 4 lang 1 2902  6 vertex 1 2929  8 fragment 1 2929  
1159 14 Dtool_qQJq8uJm 0 7 1092 3149 0 14 Dtool_qQJq8uJm 274 //////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the string as shader body.
////////////////////////////////////////////////////////////////////// 2 4 body 1 2929  4 lang 1 2902  
1160 14 Dtool_qQJqZPVQ 0 7 1092 3149 0 14 Dtool_qQJqZPVQ 274 //////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description: Loads the shader, using the string as shader body.
////////////////////////////////////////////////////////////////////// 1 4 body 1 2929  
1161 14 Dtool_qQJqz0qU 0 7 1093 3125 0 14 Dtool_qQJqz0qU 815 // Filename: shader.I
// Heavily Modified:  jyelon (Sep05)
// Updated by: fperazzi, PandaSE(06Apr10)
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_filename
//       Access: Public
//  Description: Return the Shader's filename for the given shader
//               type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3150  4 type 1 2903  
1162 14 Dtool_qQJqlNEW 0 7 1093 3125 0 14 Dtool_qQJqlNEW 815 // Filename: shader.I
// Heavily Modified:  jyelon (Sep05)
// Updated by: fperazzi, PandaSE(06Apr10)
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_filename
//       Access: Public
//  Description: Return the Shader's filename for the given shader
//               type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3150  
1163 14 Dtool_qQJq_cue 0 6 1094 2929 0 14 Dtool_qQJq_cue 264 ////////////////////////////////////////////////////////////////////
//     Function: Shader::get_text
//       Access: Public
//  Description: Return the Shader's text for the given shader type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3150  4 type 1 2903  
1164 14 Dtool_qQJqdfN0 0 6 1094 2929 0 14 Dtool_qQJqdfN0 264 ////////////////////////////////////////////////////////////////////
//     Function: Shader::get_text
//       Access: Public
//  Description: Return the Shader's text for the given shader type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3150  
1165 14 Dtool_qQJqcUW2 0 6 1095 2935 0 14 Dtool_qQJqcUW2 399 ////////////////////////////////////////////////////////////////////
//     Function: Shader::get_error_flag
//       Access: Public
//  Description: Returns true if the shader contains a compile-time
//               error.  This doesn't tell you whether or not the
//               shader is supported on the current video card.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3150  
1166 14 Dtool_qQJqXpMn 0 6 1096 2902 0 14 Dtool_qQJqXpMn 298 ////////////////////////////////////////////////////////////////////
//     Function: Shader::get_language
//       Access: Published
//  Description: Returns the shader language in which this shader
//               was written.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3150  
1167 14 Dtool_qQJqhnk1 0 6 1097 2858 0 14 Dtool_qQJqhnk1 510 ////////////////////////////////////////////////////////////////////
//     Function: Shader::get_shader_utilization
//       Access: Published, Static
//  Description: This flag returns SUT_none, SUT_basic, or
//               SUT_advanced and controls the automatic generation
//               of shaders.  It is initialized from the config
//               variable of the same name, but it can be 
//               subsequently adjusted.
//////////////////////////////////////////////////////////////////// 0 
1168 14 Dtool_qQJqlu7c 0 4 1098 2934 0 14 Dtool_qQJqlu7c 382 ////////////////////////////////////////////////////////////////////
//     Function: Shader::set_shader_utilization
//       Access: Published, Static
//  Description: Set this flag to SUT_none, SUT_basic, or
//               SUT_advanced to limit panda's automatic shader
//               generation facilities.
//////////////////////////////////////////////////////////////////// 1 3 utl 1 2858  
1169 14 Dtool_qQJqlvLD 0 6 1099 2935 0 14 Dtool_qQJqlvLD 460 ////////////////////////////////////////////////////////////////////
//     Function: Shader::have_shader_utilization
//       Access: Published, Static
//  Description: If true, then get_shader_utilization has been
//               set using set_shader_utilization.
//               If false, then get_shader_utilization simply
//               returns the config variable of the same name.
//////////////////////////////////////////////////////////////////// 0 
1170 14 Dtool_qQJq_Ayr 0 4 1100 2934 0 14 Dtool_qQJq_Ayr 653 ////////////////////////////////////////////////////////////////////
//     Function: Shader::prepare
//       Access: Published
//  Description: Indicates that the shader should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  16 prepared_objects 1 3003  
1171 14 Dtool_qQJq5KiR 0 6 1101 2935 0 14 Dtool_qQJq5KiR 372 ////////////////////////////////////////////////////////////////////
//     Function: Shader::is_prepared
//       Access: Published
//  Description: Returns true if the shader has already been prepared
//               or enqueued for preparation on the indicated GSG,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3150  16 prepared_objects 1 3003  
1172 14 Dtool_qQJqnXbA 0 6 1102 2935 0 14 Dtool_qQJqnXbA 393 ////////////////////////////////////////////////////////////////////
//     Function: Shader::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3149  16 prepared_objects 1 3003  
1173 14 Dtool_qQJqr_x5 0 6 1103 2938 0 14 Dtool_qQJqr_x5 391 ////////////////////////////////////////////////////////////////////
//     Function: Shader::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3149  
1174 14 Dtool_qQJqLkrK 0 6 1104 3152 0 14 Dtool_qQJqLkrK 885 ////////////////////////////////////////////////////////////////////
//     Function: Shader::prepare_now
//       Access: Published
//  Description: Creates a context for the shader on the particular
//               GSG, if it does not already exist.  Returns the new
//               (or old) ShaderContext.  This assumes that the
//               GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use prepare() instead.
//
//               Normally, this is not called directly except by the
//               GraphicsStateGuardian; a shader does not need to be
//               explicitly prepared by the user before it may be
//               rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3149  16 prepared_objects 1 3003  3 gsg 1 3004  
1175 14 Dtool_qQJqshVA 0 7 1105 2950 0 14 Dtool_qQJqshVA 0 0 
1176 14 Dtool_qQJqYQCx 0 6 1107 2929 0 14 Dtool_qQJqYQCx 913 // Filename: preparedGraphicsObjects.I
// Created by:  drose (23Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_name
//       Access: Public
//  Description: Returns the name of the PreparedGraphicsObjects
//               structure.  This is an arbitrary name that serves
//               mainly to uniquify the context for PStats reporting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1177 14 Dtool_qQJqrCqr 0 4 1108 2934 0 14 Dtool_qQJqrCqr 873 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::set_graphics_memory_limit
//       Access: Public
//  Description: Sets an artificial cap on graphics memory that
//               will be imposed on this GSG.
//
//               This limits the total amount of graphics memory,
//               including texture memory and vertex buffer memory,
//               that will be consumed by the GSG, regardless of
//               whether the hardware claims to provide more graphics
//               memory than this. It is useful to put a ceiling on
//               graphics memory consumed, since some drivers seem to
//               allow the application to consume more memory than the
//               hardware can realistically support.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  5 limit 1 2930  
1178 14 Dtool_qQJqHVn7 0 6 1109 2930 0 14 Dtool_qQJqHVn7 394 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_graphics_memory_limit
//       Access: Public
//  Description: Returns the artificial cap on graphics memory that
//               will be imposed on this GSG.  See
//               set_graphics_memory_limit().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1179 14 Dtool_qQJq7kCt 0 4 1110 2934 0 14 Dtool_qQJq7kCt 393 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::show_graphics_memory_lru
//       Access: Public
//  Description: Writes to the indicated ostream a report of how the
//               various textures and vertex buffers are allocated in
//               the LRU.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  3 out 1 2936  
1180 14 Dtool_qQJq_dtz 0 4 1111 2934 0 14 Dtool_qQJq_dtz 392 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::show_residency_trackers
//       Access: Public
//  Description: Writes to the indicated ostream a report of how the
//               various textures and vertex buffers are allocated in
//               the LRU.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  3 out 1 2936  
1181 14 Dtool_qQJqPjRE 0 4 1112 2934 0 14 Dtool_qQJqPjRE 284 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all
//       Access: Public
//  Description: Releases all prepared objects of all kinds at once.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1182 14 Dtool_qQJqd65a 0 6 1113 2938 0 14 Dtool_qQJqd65a 346 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued
//       Access: Public
//  Description: Returns the number of objects of any kind that have
//               been enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1183 14 Dtool_qQJqHyvR 0 6 1114 2938 0 14 Dtool_qQJqHyvR 341 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared
//       Access: Public
//  Description: Returns the number of objects of any kind that have
//               already been prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1184 14 Dtool_qQJqNPdY 0 4 1115 2934 0 14 Dtool_qQJqNPdY 413 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_texture
//       Access: Public
//  Description: Indicates that a texture would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  3 tex 1 3122  
1185 14 Dtool_qQJqoYyp 0 6 1116 2935 0 14 Dtool_qQJqoYyp 329 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_texture_queued
//       Access: Public
//  Description: Returns true if the texture has been queued on this
//               GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  3 tex 1 3123  
1186 14 Dtool_qQJqg8Go 0 6 1117 2935 0 14 Dtool_qQJqg8Go 733 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_texture
//       Access: Public
//  Description: Removes a texture from the queued list of textures to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the texture will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the texture is
//               successfully dequeued, false if it had not been
//               queued.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  3 tex 1 3122  
1187 14 Dtool_qQJqQPDT 0 6 1118 2935 0 14 Dtool_qQJqQPDT 333 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_texture_prepared
//       Access: Public
//  Description: Returns true if the texture has been prepared on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  3 tex 1 3123  
1188 14 Dtool_qQJqeQq5 0 4 1119 2934 0 14 Dtool_qQJqeQq5 347 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_texture
//       Access: Public
//  Description: Releases a texture if it has already been prepared,
//               or removes it from the preparation queue.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  3 tex 1 3122  
1189 14 Dtool_qQJqdS7O 0 4 1119 2934 0 14 Dtool_qQJqdS7O 822 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_texture
//       Access: Public
//  Description: Indicates that a texture context, created by a
//               previous call to prepare_texture(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release textures--this
//               prevents conflicts from threading or multiple GSG's
//               sharing textures (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_texture is called).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  2 tc 1 3148  
1190 14 Dtool_qQJquR_j 0 6 1120 2938 0 14 Dtool_qQJquR_j 460 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_textures
//       Access: Public
//  Description: Releases all textures at once.  This will force them
//               to be reloaded into texture memory for all GSG's that
//               share this object.  Returns the number of textures
//               released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1191 14 Dtool_qQJqICur 0 6 1121 2938 0 14 Dtool_qQJqICur 344 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_textures
//       Access: Public
//  Description: Returns the number of textures that have been
//               enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1192 14 Dtool_qQJqXCZH 0 6 1122 2938 0 14 Dtool_qQJqXCZH 339 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_textures
//       Access: Public
//  Description: Returns the number of textures that have already been
//               prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1193 14 Dtool_qQJqZBOa 0 6 1123 3148 0 14 Dtool_qQJqZBOa 1165 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_texture_now
//       Access: Public
//  Description: Immediately creates a new TextureContext for the
//               indicated texture and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               textures.  If this is not necessarily the case, you
//               should use enqueue_texture() instead.
//
//               Normally, this function is not called directly.  Call
//               Texture::prepare_now() instead.
//
//               The TextureContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular texture, and will exist as long as the
//               texture is ready to be rendered.
//
//               When either the Texture or the
//               PreparedGraphicsObjects object destructs, the
//               TextureContext will be deleted.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3003  3 tex 1 3122  4 view 1 2938  3 gsg 1 3004  
1194 14 Dtool_qQJq2FRy 0 4 1124 2934 0 14 Dtool_qQJq2FRy 407 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_geom
//       Access: Public
//  Description: Indicates that a geom would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 geom 1 3069  
1195 14 Dtool_qQJqTyPQ 0 6 1125 2935 0 14 Dtool_qQJqTyPQ 323 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_geom_queued
//       Access: Public
//  Description: Returns true if the geom has been queued on this
//               GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 geom 1 3070  
1196 14 Dtool_qQJqYS6B 0 6 1126 2935 0 14 Dtool_qQJqYS6B 718 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_geom
//       Access: Public
//  Description: Removes a geom from the queued list of geoms to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the geom will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the geom is
//               successfully dequeued, false if it had not been
//               queued.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 geom 1 3069  
1197 14 Dtool_qQJqRZ4p 0 6 1127 2935 0 14 Dtool_qQJqRZ4p 336 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_geom_prepared
//       Access: Public
//  Description: Returns true if the vertex buffer has been prepared on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 geom 1 3070  
1198 14 Dtool_qQJqEwwc 0 4 1128 2934 0 14 Dtool_qQJqEwwc 804 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_geom
//       Access: Public
//  Description: Indicates that a geom context, created by a
//               previous call to prepare_geom(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release geoms--this
//               prevents conflicts from threading or multiple GSG's
//               sharing geoms (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_geom is called).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  2 gc 1 3076  
1199 14 Dtool_qQJqXAXg 0 6 1129 2938 0 14 Dtool_qQJqXAXg 448 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_geoms
//       Access: Public
//  Description: Releases all geoms at once.  This will force them
//               to be reloaded into geom memory for all GSG's that
//               share this object.  Returns the number of geoms
//               released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1200 14 Dtool_qQJqju5r 0 6 1130 2938 0 14 Dtool_qQJqju5r 338 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_geoms
//       Access: Public
//  Description: Returns the number of geoms that have been
//               enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1201 14 Dtool_qQJqlNOP 0 6 1131 2938 0 14 Dtool_qQJqlNOP 333 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_geoms
//       Access: Public
//  Description: Returns the number of geoms that have already been
//               prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1202 14 Dtool_qQJqWiMo 0 6 1132 3076 0 14 Dtool_qQJqWiMo 1132 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_geom_now
//       Access: Public
//  Description: Immediately creates a new GeomContext for the
//               indicated geom and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               geoms.  If this is not necessarily the case, you
//               should use enqueue_geom() instead.
//
//               Normally, this function is not called directly.  Call
//               Geom::prepare_now() instead.
//
//               The GeomContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular geom, and will exist as long as the
//               geom is ready to be rendered.
//
//               When either the Geom or the
//               PreparedGraphicsObjects object destructs, the
//               GeomContext will be deleted.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3003  4 geom 1 3069  3 gsg 1 3004  
1203 14 Dtool_qQJqh4uF 0 4 1133 2934 0 14 Dtool_qQJqh4uF 411 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_shader
//       Access: Public
//  Description: Indicates that a shader would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  6 shader 1 3149  
1204 14 Dtool_qQJqDjcB 0 6 1134 2935 0 14 Dtool_qQJqDjcB 327 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_shader_queued
//       Access: Public
//  Description: Returns true if the shader has been queued on this
//               GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  6 shader 1 3150  
1205 14 Dtool_qQJqCMYV 0 6 1135 2935 0 14 Dtool_qQJqCMYV 728 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_shader
//       Access: Public
//  Description: Removes a shader from the queued list of shaders to
//               be prepared.  Normally it is not necessary to call
//               this, unless you change your mind about preparing it
//               at the last minute, since the shader will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the shader is
//               successfully dequeued, false if it had not been
//               queued.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  6 shader 1 3149  
1206 14 Dtool_qQJqaDD4 0 6 1136 2935 0 14 Dtool_qQJqaDD4 331 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_shader_prepared
//       Access: Public
//  Description: Returns true if the shader has been prepared on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  6 shader 1 3150  
1207 14 Dtool_qQJqz1gv 0 4 1137 2934 0 14 Dtool_qQJqz1gv 816 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_shader
//       Access: Public
//  Description: Indicates that a shader context, created by a
//               previous call to prepare_shader(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release shaders--this
//               prevents conflicts from threading or multiple GSG's
//               sharing shaders (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_shader is called).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  2 sc 1 3152  
1208 14 Dtool_qQJqw9cE 0 6 1138 2938 0 14 Dtool_qQJqw9cE 456 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_shaders
//       Access: Public
//  Description: Releases all shaders at once.  This will force them
//               to be reloaded into shader memory for all GSG's that
//               share this object.  Returns the number of shaders
//               released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1209 14 Dtool_qQJqsW_l 0 6 1139 2938 0 14 Dtool_qQJqsW_l 342 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_shaders
//       Access: Public
//  Description: Returns the number of shaders that have been
//               enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1210 14 Dtool_qQJqJ4b8 0 6 1140 2938 0 14 Dtool_qQJqJ4b8 337 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_shaders
//       Access: Public
//  Description: Returns the number of shaders that have already been
//               prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1211 14 Dtool_qQJqtzQ6 0 6 1141 3152 0 14 Dtool_qQJqtzQ6 1154 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_shader_now
//       Access: Public
//  Description: Immediately creates a new ShaderContext for the
//               indicated shader and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               shaders.  If this is not necessarily the case, you
//               should use enqueue_shader() instead.
//
//               Normally, this function is not called directly.  Call
//               Shader::prepare_now() instead.
//
//               The ShaderContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular shader, and will exist as long as the
//               shader is ready to be rendered.
//
//               When either the Shader or the
//               PreparedGraphicsObjects object destructs, the
//               ShaderContext will be deleted.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3003  6 shader 1 3149  3 gsg 1 3004  
1212 14 Dtool_qQJqu6up 0 4 1142 2934 0 14 Dtool_qQJqu6up 418 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_vertex_buffer
//       Access: Public
//  Description: Indicates that a buffer would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 data 1 2995  
1213 14 Dtool_qQJqquoX 0 6 1143 2935 0 14 Dtool_qQJqquoX 341 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_vertex_buffer_queued
//       Access: Public
//  Description: Returns true if the vertex buffer has been queued on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 data 1 2957  
1214 14 Dtool_qQJqLJX5 0 6 1144 2935 0 14 Dtool_qQJqLJX5 737 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_vertex_buffer
//       Access: Public
//  Description: Removes a buffer from the queued list of data
//               arrays to be prepared.  Normally it is not necessary
//               to call this, unless you change your mind about
//               preparing it at the last minute, since the data will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the buffer is
//               successfully dequeued, false if it had not been
//               queued.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 data 1 2995  
1215 14 Dtool_qQJqk_iN 0 6 1145 2935 0 14 Dtool_qQJqk_iN 345 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_vertex_buffer_prepared
//       Access: Public
//  Description: Returns true if the vertex buffer has been prepared on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 data 1 2957  
1216 14 Dtool_qQJqG_cY 0 4 1146 2934 0 14 Dtool_qQJqG_cY 831 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_vertex_buffer
//       Access: Public
//  Description: Indicates that a data context, created by a
//               previous call to prepare_vertex_buffer(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release datas--this
//               prevents conflicts from threading or multiple GSG's
//               sharing datas (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_vertex_buffer is called).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  3 vbc 1 3006  
1217 14 Dtool_qQJqVTDu 0 6 1147 2938 0 14 Dtool_qQJqVTDu 457 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_vertex_buffers
//       Access: Public
//  Description: Releases all datas at once.  This will force them
//               to be reloaded into data memory for all GSG's that
//               share this object.  Returns the number of datas
//               released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1218 14 Dtool_qQJqfJRJ 0 6 1148 2938 0 14 Dtool_qQJqfJRJ 356 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_vertex_buffers
//       Access: Public
//  Description: Returns the number of vertex buffers that have been
//               enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1219 14 Dtool_qQJqJAM0 0 6 1149 2938 0 14 Dtool_qQJqJAM0 351 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_vertex_buffers
//       Access: Public
//  Description: Returns the number of vertex buffers that have
//               already been prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1220 14 Dtool_qQJqaZFQ 0 6 1150 3006 0 14 Dtool_qQJqaZFQ 1174 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_vertex_buffer_now
//       Access: Public
//  Description: Immediately creates a new VertexBufferContext for the
//               indicated data and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use enqueue_vertex_buffer() instead.
//
//               Normally, this function is not called directly.  Call
//               Data::prepare_now() instead.
//
//               The VertexBufferContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular data, and will exist as long as the
//               data is ready to be rendered.
//
//               When either the Data or the
//               PreparedGraphicsObjects object destructs, the
//               VertexBufferContext will be deleted.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3003  4 data 1 2995  3 gsg 1 3004  
1221 14 Dtool_qQJqZjaO 0 4 1151 2934 0 14 Dtool_qQJqZjaO 417 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::enqueue_index_buffer
//       Access: Public
//  Description: Indicates that a buffer would like to be put on the
//               list to be prepared when the GSG is next ready to
//               do this (presumably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 data 1 3058  
1222 14 Dtool_qQJqT7He 0 6 1152 2935 0 14 Dtool_qQJqT7He 339 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_index_buffer_queued
//       Access: Public
//  Description: Returns true if the index buffer has been queued on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 data 1 3059  
1223 14 Dtool_qQJq63Fe 0 6 1153 2935 0 14 Dtool_qQJq63Fe 736 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::dequeue_index_buffer
//       Access: Public
//  Description: Removes a buffer from the queued list of data
//               arrays to be prepared.  Normally it is not necessary
//               to call this, unless you change your mind about
//               preparing it at the last minute, since the data will
//               automatically be dequeued and prepared at the next
//               frame.
//
//               The return value is true if the buffer is
//               successfully dequeued, false if it had not been
//               queued.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  4 data 1 3058  
1224 14 Dtool_qQJqgEBh 0 6 1154 2935 0 14 Dtool_qQJqgEBh 343 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::is_index_buffer_prepared
//       Access: Public
//  Description: Returns true if the index buffer has been prepared on
//               this GSG, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3153  4 data 1 3059  
1225 14 Dtool_qQJqZTVa 0 4 1155 2934 0 14 Dtool_qQJqZTVa 828 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_index_buffer
//       Access: Public
//  Description: Indicates that a data context, created by a
//               previous call to prepare_index_buffer(), is no longer
//               needed.  The driver resources will not be freed until
//               some GSG calls update(), indicating it is at a
//               stage where it is ready to release datas--this
//               prevents conflicts from threading or multiple GSG's
//               sharing datas (we have no way of knowing which
//               graphics context is currently active, or what state
//               it's in, at the time release_index_buffer is called).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3003  3 ibc 1 3155  
1226 14 Dtool_qQJq4P7Q 0 6 1156 2938 0 14 Dtool_qQJq4P7Q 456 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::release_all_index_buffers
//       Access: Public
//  Description: Releases all datas at once.  This will force them
//               to be reloaded into data memory for all GSG's that
//               share this object.  Returns the number of datas
//               released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3003  
1227 14 Dtool_qQJquvlm 0 6 1157 2938 0 14 Dtool_qQJquvlm 354 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_queued_index_buffers
//       Access: Public
//  Description: Returns the number of index buffers that have been
//               enqueued to be prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1228 14 Dtool_qQJqkjD_ 0 6 1158 2938 0 14 Dtool_qQJqkjD_ 349 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::get_num_prepared_index_buffers
//       Access: Public
//  Description: Returns the number of index buffers that have
//               already been prepared on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3153  
1229 14 Dtool_qQJqgeRQ 0 6 1159 3155 0 14 Dtool_qQJqgeRQ 1169 ////////////////////////////////////////////////////////////////////
//     Function: PreparedGraphicsObjects::prepare_index_buffer_now
//       Access: Public
//  Description: Immediately creates a new IndexBufferContext for the
//               indicated data and returns it.  This assumes that
//               the GraphicsStateGuardian is the currently active
//               rendering context and that it is ready to accept new
//               datas.  If this is not necessarily the case, you
//               should use enqueue_index_buffer() instead.
//
//               Normally, this function is not called directly.  Call
//               Data::prepare_now() instead.
//
//               The IndexBufferContext contains all of the pertinent
//               information needed by the GSG to keep track of this
//               one particular data, and will exist as long as the
//               data is ready to be rendered.
//
//               When either the Data or the
//               PreparedGraphicsObjects object destructs, the
//               IndexBufferContext will be deleted.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3003  4 data 1 3058  3 gsg 1 3004  
1230 14 Dtool_qQJqYwcR 0 7 1165 3058 1998 14 Dtool_qQJqYwcR 299 ////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::get_data
//       Access: Public
//  Description: Returns the pointer to the client-side array data
//               object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3156  
1231 14 Dtool_qQJqLghl 0 6 1166 2935 0 14 Dtool_qQJqLghl 333 ////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::changed_size
//       Access: Public
//  Description: Returns true if the data has changed size since the
//               last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3156  6 reader 1 3158  
1232 14 Dtool_qQJqz_JI 0 6 1167 2935 0 14 Dtool_qQJqz_JI 349 ////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::changed_usage_hint
//       Access: Public
//  Description: Returns true if the data has changed its usage hint
//               since the last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3156  6 reader 1 3158  
1233 14 Dtool_qQJqkpYP 0 6 1168 2935 0 14 Dtool_qQJqkpYP 334 ////////////////////////////////////////////////////////////////////
//     Function: IndexBufferContext::was_modified
//       Access: Public
//  Description: Returns true if the data has been modified since the
//               last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3156  6 reader 1 3158  
1234 14 Dtool_qQJqR3r5 0 7 1169 2950 0 14 Dtool_qQJqR3r5 0 0 
1235 14 Dtool_qQJqSySx 0 6 1161 3056 0 14 Dtool_qQJqSySx 0 1 4 this 3 3155  
1236 14 Dtool_qQJqLVke 0 6 1162 3155 0 14 Dtool_qQJqLVke 0 1 4 this 3 3056  
1237 14 Dtool_qQJqC0d6 0 6 1163 2942 0 14 Dtool_qQJqC0d6 0 1 4 this 3 3155  
1238 14 Dtool_qQJq5yF6 0 6 1164 3155 0 14 Dtool_qQJq5yF6 0 1 4 this 3 2942  
1239 14 Dtool_qQJqg23I 0 7 1173 3163 2652 14 Dtool_qQJqg23I 0 1 4 this 3 3161  
1240 14 Dtool_qQJqFXAo 0 6 1174 2935 0 14 Dtool_qQJqFXAo 1266 // Filename: lens.I
// Created by:  drose (29Nov01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               Returns true if the vector is defined, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3161  7 point2d 1 3164  10 near_point 1 3025  9 far_point 1 3025  
1241 14 Dtool_qQJqVxUo 0 6 1174 2935 0 14 Dtool_qQJqVxUo 852 ////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3161  7 point2d 1 3167  10 near_point 1 3025  9 far_point 1 3025  
1242 14 Dtool_qQJqB8vq 0 6 1175 2935 0 14 Dtool_qQJqB8vq 885 ////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               Returns true if the vector is defined, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3161  7 point2d 1 3164  5 vec3d 1 3033  
1243 14 Dtool_qQJq6Owq 0 6 1175 2935 0 14 Dtool_qQJq6Owq 951 ////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3161  7 point2d 1 3167  5 vec3d 1 3033  
1244 14 Dtool_qQJqy6hM 0 6 1176 2935 0 14 Dtool_qQJqy6hM 769 ////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3161  7 point3d 1 3167  7 point2d 1 3169  
1245 14 Dtool_qQJqyFwN 0 6 1176 2935 0 14 Dtool_qQJqyFwN 980 ////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               The z coordinate will also be set to a value in the
//               range (-1, 1), where 1 represents a point on the near
//               plane, and -1 represents a point on the far plane.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3161  7 point3d 1 3167  7 point2d 1 3025  
1246 14 Dtool_qQJqOGXC 0 4 1177 2934 0 14 Dtool_qQJqOGXC 643 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_change_event
//       Access: Published
//  Description: Sets the name of the event that will be generated
//               whenever any properties of the Lens have
//               changed.  If this is not set for a particular lens,
//               no event will be generated.
//
//               The event is thrown with one parameter, the lens
//               itself.  This can be used to automatically track
//               changes to camera fov, etc. in the application.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  5 event 1 2929  
1247 14 Dtool_qQJqI_Ni 0 6 1178 2929 0 14 Dtool_qQJqI_Ni 370 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_change_event
//       Access: Published
//  Description: Returns the name of the event that will be generated
//               whenever any properties of this particular Lens have
//               changed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1248 14 Dtool_qQJq0iUE 0 4 1179 2934 0 14 Dtool_qQJq0iUE 385 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  2 cs 1 3170  
1249 14 Dtool_qQJqsmpX 0 6 1180 3170 0 14 Dtool_qQJqsmpX 383 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1250 14 Dtool_qQJqOuga 0 4 1181 2934 0 14 Dtool_qQJqOuga 289 ////////////////////////////////////////////////////////////////////
//     Function: Lens::clear
//       Access: Published
//  Description: Resets all lens parameters to their initial default
//               settings.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
1251 14 Dtool_qQJqkLtR 0 4 1182 2934 0 14 Dtool_qQJqkLtR 1181 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  9 film_size 1 3100  
1252 14 Dtool_qQJqlFkr 0 4 1182 2934 0 14 Dtool_qQJqlFkr 459 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the horizontal size of the film without changing
//               its shape.  The aspect ratio remains unchanged; this
//               computes the vertical size of the film to
//               automatically maintain the aspect ratio.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  5 width 1 2939  
1253 14 Dtool_qQJq0VW8 0 4 1182 2934 0 14 Dtool_qQJq0VW8 1181 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3163  5 width 1 2939  6 height 1 2939  
1254 14 Dtool_qQJqpaPJ 0 6 1183 3100 0 14 Dtool_qQJqpaPJ 324 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_size
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_film_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1255 14 Dtool_qQJq54pC 0 4 1184 2934 0 14 Dtool_qQJq54pC 448 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  11 film_offset 1 3100  
1256 14 Dtool_qQJqbcn6 0 4 1184 2934 0 14 Dtool_qQJqbcn6 448 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3163  1 x 1 2939  1 y 1 2939  
1257 14 Dtool_qQJqY8t_ 0 6 1185 3171 0 14 Dtool_qQJqY8t_ 326 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_offset
//       Access: Published
//  Description: Returns the horizontal and vertical offset amounts of
//               this Lens.  See set_film_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1258 14 Dtool_qQJqNiTK 0 4 1186 2934 0 14 Dtool_qQJqNiTK 515 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_focal_length
//       Access: Published
//  Description: Sets the focal length of the lens.  This may adjust
//               the field-of-view correspondingly, and is an
//               alternate way to specify field of view.
//
//               For certain kinds of lenses (e.g. OrthographicLens),
//               the focal length has no meaning.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  12 focal_length 1 2939  
1259 14 Dtool_qQJqaQhl 0 6 1187 2939 0 14 Dtool_qQJqaQhl 527 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_focal_length
//       Access: Published
//  Description: Returns the focal length of the lens.  This may have
//               been set explicitly by a previous call to
//               set_focal_length(), or it may be computed based on
//               the lens' fov and film_size.  For certain kinds of
//               lenses, the focal length has no meaning.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1260 14 Dtool_qQJqi1Mq 0 4 1188 2934 0 14 Dtool_qQJqi1Mq 836 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_min_fov
//       Access: Published
//  Description: Sets the field of view of the smallest dimension of
//               the window.  If the window is wider than it is tall,
//               this specifies the vertical field of view; if it is
//               taller than it is wide, this specifies the horizontal
//               field of view.
//
//               In many cases, this is preferable to setting either
//               the horizontal or vertical field of view explicitly.
//               Setting this parameter means that pulling the window
//               wider will widen the field of view, which is usually
//               what you expect to happen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  7 min_fov 1 2939  
1261 14 Dtool_qQJqTIxI 0 4 1189 2934 0 14 Dtool_qQJqTIxI 626 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthographicLens),
//               the field of view has no meaning.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  3 fov 1 3100  
1262 14 Dtool_qQJqZkJq 0 4 1189 2934 0 14 Dtool_qQJqZkJq 402 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the horizontal field of view of the lens without
//               changing the aspect ratio.  The vertical field of
//               view is adjusted to maintain the same aspect ratio.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  3 fov 1 2939  
1263 14 Dtool_qQJqwNaC 0 4 1189 2934 0 14 Dtool_qQJqwNaC 619 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthoLens),
//               the field of view has no meaning.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3163  4 hfov 1 2939  4 vfov 1 2939  
1264 14 Dtool_qQJqGTNq 0 6 1190 3100 0 14 Dtool_qQJqGTNq 312 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_fov
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_fov().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1265 14 Dtool_qQJqFGjN 0 6 1191 2939 0 14 Dtool_qQJqFGjN 292 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_hfov
//       Access: Published
//  Description: Returns the horizontal component of fov only.  See
//               get_fov().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1266 14 Dtool_qQJq9tnO 0 6 1192 2939 0 14 Dtool_qQJq9tnO 290 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_vfov
//       Access: Published
//  Description: Returns the vertical component of fov only.  See
//               get_fov().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1267 14 Dtool_qQJquTcw 0 6 1193 2939 0 14 Dtool_qQJquTcw 321 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_min_fov
//       Access: Published
//  Description: Returns the field of view of the narrowest dimension
//               of the window.  See set_min_fov().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1268 14 Dtool_qQJq_kwh 0 4 1194 2934 0 14 Dtool_qQJq_kwh 444 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_aspect_ratio
//       Access: Published
//  Description: Sets the aspect ratio of the lens.  This is the ratio
//               of the height to the width of the generated image.
//               Setting this overrides the two-parameter fov or film
//               size setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  12 aspect_ratio 1 2939  
1269 14 Dtool_qQJqjb98 0 6 1195 2939 0 14 Dtool_qQJqjb98 368 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_aspect_ratio
//       Access: Published
//  Description: Returns the aspect ratio of the Lens.  This is
//               determined based on the indicated film size; see
//               set_film_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1270 14 Dtool_qQJq2Qgw 0 4 1196 2934 0 14 Dtool_qQJq2Qgw 377 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near
//       Access: Published
//  Description: Defines the position of the near plane (or cylinder,
//               sphere, whatever).  Points closer to the lens than
//               this may not be rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  13 near_distance 1 2939  
1271 14 Dtool_qQJqvVA4 0 6 1197 2939 0 14 Dtool_qQJqvVA4 302 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_near
//       Access: Published
//  Description: Returns the position of the near plane (or cylinder,
//               sphere, whatever).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1272 14 Dtool_qQJqcoiP 0 4 1198 2934 0 14 Dtool_qQJqcoiP 378 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_far
//       Access: Published
//  Description: Defines the position of the far plane (or cylinder,
//               sphere, whatever).  Points farther from the lens than
//               this may not be rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  12 far_distance 1 2939  
1273 14 Dtool_qQJq9WmP 0 6 1199 2939 0 14 Dtool_qQJq9WmP 300 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_far
//       Access: Published
//  Description: Returns the position of the far plane (or cylinder,
//               sphere, whatever).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1274 14 Dtool_qQJq9vjM 0 4 1200 2934 0 14 Dtool_qQJq9vjM 265 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near_far
//       Access: Published
//  Description: Simultaneously changes the near and far planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3163  13 near_distance 1 2939  12 far_distance 1 2939  
1275 14 Dtool_qQJqyde1 0 6 1201 2939 0 14 Dtool_qQJqyde1 391 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_near
//       Access: Published, Static
//  Description: Returns the default near plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
//////////////////////////////////////////////////////////////////// 0 
1276 14 Dtool_qQJqChjq 0 6 1202 2939 0 14 Dtool_qQJqChjq 389 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_far
//       Access: Published, Static
//  Description: Returns the default far plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
//////////////////////////////////////////////////////////////////// 0 
1277 14 Dtool_qQJqHI9n 0 4 1203 2934 0 14 Dtool_qQJqHI9n 593 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  8 view_hpr 1 3103  
1278 14 Dtool_qQJqlvxd 0 4 1203 2934 0 14 Dtool_qQJqlvxd 593 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3163  1 h 1 2939  1 p 1 2939  1 r 1 2939  
1279 14 Dtool_qQJqzOnI 0 6 1204 3103 0 14 Dtool_qQJqzOnI 268 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_hpr
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1280 14 Dtool_qQJqumpn 0 4 1205 2934 0 14 Dtool_qQJqumpn 440 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3163  11 view_vector 1 3174  9 up_vector 1 3174  
1281 14 Dtool_qQJqRtqd 0 4 1205 2934 0 14 Dtool_qQJqRtqd 440 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
//////////////////////////////////////////////////////////////////// 7 4 this 3 3163  1 x 1 2939  1 y 1 2939  1 z 1 2939  1 i 1 2939  1 j 1 2939  1 k 1 2939  
1282 14 Dtool_qQJqyzLu 0 6 1206 3174 0 14 Dtool_qQJqyzLu 269 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_vector
//       Access: Published
//  Description: Returns the axis along which the lens is facing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1283 14 Dtool_qQJqryc7 0 6 1207 3174 0 14 Dtool_qQJqryc7 329 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_up_vector
//       Access: Published
//  Description: Returns the axis perpendicular to the camera's view
//               vector that indicates the "up" direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1284 14 Dtool_qQJqDlmp 0 7 1208 3025 0 14 Dtool_qQJqDlmp 317 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_nodal_point
//       Access: Published
//  Description: Returns the center point of the lens: the point from
//               which the lens is viewing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1285 14 Dtool_qQJqohPi 0 4 1209 2934 0 14 Dtool_qQJqohPi 796 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_interocular_distance
//       Access: Published
//  Description: Sets the distance between the left and right eyes of
//               a stereo camera.  This distance is used to apply a
//               stereo effect when the lens is rendered on a stereo
//               display region.  It only has an effect on a
//               PerspectiveLens.
//
//               The left eye and the right eye are each offset along
//               the X axis by half of this distance, so that this
//               parameter specifies the total distance between them.
//
//               Also see set_convergence_distance(), which relates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  20 interocular_distance 1 2939  
1286 14 Dtool_qQJqCou8 0 6 1210 2939 0 14 Dtool_qQJqCou8 261 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_interocular_distance
//       Access: Published
//  Description: See set_interocular_distance().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1287 14 Dtool_qQJqKsi1 0 4 1211 2934 0 14 Dtool_qQJqKsi1 1237 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_convergence_distance
//       Access: Published
//  Description: Sets the distance between between the camera plane
//               and the point in the distance that the left and right
//               eyes are both looking at.  This distance is used to
//               apply a stereo effect when the lens is rendered on a
//               stereo display region.  It only has an effect on a
//               PerspectiveLens.
//
//               This parameter must be greater than 0, but may be as
//               large as you like.  It controls the amount to which
//               the two eyes are directed inwards towards each other,
//               which is a normal property of stereo vision.  It is a
//               distance, not an angle; normally this should be set
//               to the distance from the camera to the area of
//               interest in your scene.  If you want to simulate
//               parallel stereo, set this value to a very large
//               number.
//
//               Also see set_interocular_distance(), which relates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  20 convergence_distance 1 2939  
1288 14 Dtool_qQJqjWCQ 0 6 1212 2939 0 14 Dtool_qQJqjWCQ 261 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_convergence_distance
//       Access: Published
//  Description: See set_convergence_distance().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1289 14 Dtool_qQJqL_7i 0 4 1213 2934 0 14 Dtool_qQJqL_7i 831 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_mat
//       Access: Published
//  Description: Sets an arbitrary transformation on the lens.  This
//               replaces the individual transformation components
//               like set_view_hpr().
//
//               Setting a transformation here will have a slightly
//               different effect than putting one on the LensNode
//               that contains this lens.  In particular, lighting and
//               other effects computations will still be performed on
//               the lens in its untransformed (facing forward)
//               position, but the actual projection matrix will be
//               transformed by this matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  8 view_mat 1 3015  
1290 14 Dtool_qQJqM_m4 0 6 1214 3015 0 14 Dtool_qQJqM_m4 268 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_mat
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1291 14 Dtool_qQJqkqkp 0 4 1215 2934 0 14 Dtool_qQJqkqkp 258 ////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_view_mat
//       Access: Published
//  Description: Resets the lens transform to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
1292 14 Dtool_qQJqZFPx 0 4 1216 2934 0 14 Dtool_qQJqZFPx 989 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_keystone
//       Access: Published
//  Description: Indicates the ratio of keystone correction to perform
//               on the lens, in each of three axes.  This will build
//               a special non-affine scale factor into the projection
//               matrix that will compensate for keystoning of a
//               projected image; this can be used to compensate for a
//               projector that for physical reasons cannot be aimed
//               directly at its screen.  
//
//               The default value is taken from the default-keystone
//               Config variable.  0, 0 indicates no keystone
//               correction; specify a small value (usually in the
//               range -1 .. 1) in either the x or y position to
//               generate a keystone correction in that axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3163  8 keystone 1 3100  
1293 14 Dtool_qQJqvPzC 0 6 1217 3100 0 14 Dtool_qQJqvPzC 290 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_keystone
//       Access: Published
//  Description: Returns the keystone correction specified for the
//               lens.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1294 14 Dtool_qQJqp1qZ 0 4 1218 2934 0 14 Dtool_qQJqp1qZ 258 ////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_keystone
//       Access: Published
//  Description: Disables the lens keystone correction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
1295 14 Dtool_qQJqEH8Q 0 4 1220 2934 0 14 Dtool_qQJqEH8Q 3080 ////////////////////////////////////////////////////////////////////
//     Function: Lens::set_frustum_from_corners
//       Access: Published
//  Description: Sets up the lens to use the frustum defined by the
//               four indicated points.  This is most useful for a
//               PerspectiveLens, but it may be called for other kinds
//               of lenses as well.
//
//               The frustum will be rooted at the origin (or by
//               whatever translation might have been specified in a
//               previous call to set_view_mat).
//
//               It is legal for the four points not to be arranged in
//               a rectangle; if this is the case, the frustum will be
//               fitted as tightly as possible to cover all four
//               points.
//
//               The flags parameter contains the union of one or more
//               of the following bits to control the behavior of this
//               function:
//
//               FC_roll - If this is included, the camera may be
//               rotated so that its up vector is perpendicular to the
//               top line.  Otherwise, the standard up vector is used.
//
//               FC_camera_plane - This allows the camera plane to be
//               adjusted to be as nearly perpendicular to the center
//               of the frustum as possible.  Without this bit, the
//               orientation camera plane is defined by position of
//               the four points (which should all be coplanar).  With
//               this bit, the camera plane is arbitarary, and may be
//               chosen so that the four points do not themselves lie
//               in the camera plane (but the points will still be
//               within the frustum).
//
//               FC_off_axis - This allows the resulting frustum to be
//               off-axis to get the tightest possible fit.  Without
//               this bit, the viewing axis will be centered within
//               the frustum, but there may be more wasted space along
//               the edges.
//
//               FC_aspect_ratio - This allows the frustum to be
//               scaled non-proportionately in the vertical and
//               horizontal dimensions, if necessary, to get a tighter
//               fit.  Without this bit, the current aspect ratio will
//               be preserved.
//
//               FC_shear - This allows the frustum to be sheared, if
//               necessary, to get the tightest possible fit.  This
//               may result in a parallelogram-based frustum, which
//               will give a slanted appearance to the rendered image.
//               Without this bit, the frustum will be
//               rectangle-based.
//
//               In general, if 0 is passed in as the value for flags,
//               the generated frustum will be a loose fit but sane;
//               if -1 is passed in, it will be a tighter fit and
//               possibly screwy.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3163  2 ul 1 3103  2 ur 1 3103  2 ll 1 3103  2 lr 1 3103  5 flags 1 2938  
1296 14 Dtool_qQJqSJre 0 4 1221 2934 0 14 Dtool_qQJqSJre 405 ////////////////////////////////////////////////////////////////////
//     Function: Lens::recompute_all
//       Access: Published
//  Description: Forces all internal parameters of the Lens to be
//               recomputed.  Normally, this should never need to be
//               called; it is provided only to assist in debugging.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
1297 14 Dtool_qQJq6Z__ 0 6 1222 2935 0 14 Dtool_qQJq6Z__ 464 ////////////////////////////////////////////////////////////////////
//     Function: Lens::is_linear
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a linear
//               projection (e.g. PerspectiveLens, OrthographicLens),
//               and therefore there is a valid matrix returned by
//               get_projection_mat(), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1298 14 Dtool_qQJqBoQp 0 6 1223 2935 0 14 Dtool_qQJqBoQp 372 ////////////////////////////////////////////////////////////////////
//     Function: Lens::is_perspective
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a perspective
//               projection (i.e. it is a PerspectiveLens), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1299 14 Dtool_qQJqlQp5 0 6 1224 2935 0 14 Dtool_qQJqlQp5 375 ////////////////////////////////////////////////////////////////////
//     Function: Lens::is_orthographic
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a orthographic
//               projection (i.e. it is a OrthographicLens), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1300 14 Dtool_qQJqJeEy 0 7 1225 3069 2125 14 Dtool_qQJqJeEy 515 ////////////////////////////////////////////////////////////////////
//     Function: Lens::make_geometry
//       Access: Published, Virtual
//  Description: Allocates and returns a new Geom that can be rendered
//               to show a visible representation of the frustum used
//               for this kind of lens, if it makes sense to do
//               so.  If a visible representation cannot be created,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3163  
1301 14 Dtool_qQJqb5g0 0 7 1226 3176 0 14 Dtool_qQJqb5g0 450 ////////////////////////////////////////////////////////////////////
//     Function: Lens::make_bounds
//       Access: Published, Virtual
//  Description: Allocates and returns a new BoundingVolume that
//               encloses the frustum used for this kind of
//               lens, if possible.  If a suitable bounding
//               volume cannot be created, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1302 14 Dtool_qQJqAAmb 0 6 1227 3015 0 14 Dtool_qQJqAAmb 441 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat
//       Access: Published
//  Description: Returns the complete transformation matrix from a 3-d
//               point in space to a point on the film, if such a
//               matrix exists, or the identity matrix if the lens is
//               nonlinear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3161  7 channel 1 2909  
1303 14 Dtool_qQJqrmTG 0 6 1227 3015 0 14 Dtool_qQJqrmTG 441 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat
//       Access: Published
//  Description: Returns the complete transformation matrix from a 3-d
//               point in space to a point on the film, if such a
//               matrix exists, or the identity matrix if the lens is
//               nonlinear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1304 14 Dtool_qQJqK_5F 0 6 1228 3015 0 14 Dtool_qQJqK_5F 376 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a 2-d point
//               on the film to a 3-d vector in space, if such a
//               matrix exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3161  7 channel 1 2909  
1305 14 Dtool_qQJqmcoU 0 6 1228 3015 0 14 Dtool_qQJqmcoU 376 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a 2-d point
//               on the film to a 3-d vector in space, if such a
//               matrix exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1306 14 Dtool_qQJqOjJ3 0 6 1229 3015 0 14 Dtool_qQJqOjJ3 322 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               behind the lens to a point on the film.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1307 14 Dtool_qQJqHzXh 0 6 1230 3015 0 14 Dtool_qQJqHzXh 326 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point on
//               the film to a point behind the lens.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1308 14 Dtool_qQJqFMDf 0 6 1231 3015 0 14 Dtool_qQJqFMDf 324 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               in front of the lens to a point in space.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1309 14 Dtool_qQJqAERJ 0 6 1232 3015 0 14 Dtool_qQJqAERJ 328 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point in
//               space to a point in front of the lens.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1310 14 Dtool_qQJqB_GJ 0 4 1233 2934 0 14 Dtool_qQJqB_GJ 221 ////////////////////////////////////////////////////////////////////
//     Function: Lens::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3161  3 out 1 2936  
1311 14 Dtool_qQJqpMpk 0 4 1234 2934 0 14 Dtool_qQJqpMpk 220 ////////////////////////////////////////////////////////////////////
//     Function: Lens::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3161  3 out 1 2936  12 indent_level 1 2938  
1312 14 Dtool_qQJqtXWp 0 4 1234 2934 0 14 Dtool_qQJqtXWp 220 ////////////////////////////////////////////////////////////////////
//     Function: Lens::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3161  3 out 1 2936  
1313 14 Dtool_qQJqgaL6 0 7 1235 2997 0 14 Dtool_qQJqgaL6 447 ////////////////////////////////////////////////////////////////////
//     Function: Lens::get_last_change
//       Access: Published
//  Description: Returns the UpdateSeq that is incremented whenever
//               the lens properties are changed.  As long as this
//               number remains the same, you may assume the lens
//               properties are unchanged.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3161  
1314 14 Dtool_qQJqX6_e 0 7 1236 2950 0 14 Dtool_qQJqX6_e 0 0 
1315 14 Dtool_qQJqGQ_b 0 7 1243 3179 2659 14 Dtool_qQJqGQ_b 225 ////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3177  
1316 14 Dtool_qQJqF7Ty 0 7 1243 3179 2659 14 Dtool_qQJqF7Ty 703 // Filename: material.I
// Created by:  mike (05Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Material::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
1317 14 Dtool_qQJq__MD 0 7 1243 3179 2659 14 Dtool_qQJq__MD 703 // Filename: material.I
// Created by:  mike (05Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Material::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1318 14 Dtool_qQJq9ooi 0 7 1244 3179 2659 14 Dtool_qQJq9ooi 233 ////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  4 copy 1 3177  
1319 14 Dtool_qQJqVX0q 0 7 1246 3179 2659 14 Dtool_qQJqVX0q 258 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_default
//       Access: Published, Static
//  Description: Returns the default material.
//////////////////////////////////////////////////////////////////// 0 
1320 14 Dtool_qQJq7f5w 0 6 1247 2935 0 14 Dtool_qQJq7f5w 331 ////////////////////////////////////////////////////////////////////
//     Function: Material::has_ambient
//       Access: Published
//  Description: Returns true if the ambient color has been explicitly
//               set for this material, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1321 14 Dtool_qQJqZcqI 0 6 1248 3048 0 14 Dtool_qQJqZcqI 367 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_ambient
//       Access: Published
//  Description: Returns the ambient color setting, if it has been
//               set.  Returns (0,0,0,0) if the ambient color has not
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1322 14 Dtool_qQJq34VB 0 4 1249 2934 0 14 Dtool_qQJq34VB 592 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_ambient
//       Access: Published
//  Description: Specifies the ambient color setting of the material.
//               This will be the multiplied by any ambient lights in
//               effect on the material to set its base color.
//
//               This is the color of the object as it appears in the
//               absence of direct light.
//
//               If this is not set, the object color will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  5 color 1 3048  
1323 14 Dtool_qQJqefxD 0 4 1250 2934 0 14 Dtool_qQJqefxD 276 ////////////////////////////////////////////////////////////////////
//     Function: Material::clear_ambient
//       Access: Published
//  Description: Removes the explicit ambient color from the material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
1324 14 Dtool_qQJqUInK 0 6 1251 2935 0 14 Dtool_qQJqUInK 331 ////////////////////////////////////////////////////////////////////
//     Function: Material::has_diffuse
//       Access: Published
//  Description: Returns true if the diffuse color has been explicitly
//               set for this material, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1325 14 Dtool_qQJq7Iai 0 6 1252 3048 0 14 Dtool_qQJq7Iai 367 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_diffuse
//       Access: Published
//  Description: Returns the diffuse color setting, if it has been
//               set.  Returns (1,1,1,1) if the diffuse color has not
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1326 14 Dtool_qQJqZ0Eb 0 4 1253 2934 0 14 Dtool_qQJqZ0Eb 709 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_diffuse
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to get the color in the parts of the
//               object illuminated by the lights.
//
//               This is the primary color of an object; the color of
//               the object as it appears in direct light, in the
//               absence of highlights.
//
//               If this is not set, the object color will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  5 color 1 3048  
1327 14 Dtool_qQJqAqqE 0 4 1254 2934 0 14 Dtool_qQJqAqqE 276 ////////////////////////////////////////////////////////////////////
//     Function: Material::clear_diffuse
//       Access: Published
//  Description: Removes the explicit diffuse color from the material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
1328 14 Dtool_qQJqW6_3 0 6 1255 2935 0 14 Dtool_qQJqW6_3 333 ////////////////////////////////////////////////////////////////////
//     Function: Material::has_specular
//       Access: Published
//  Description: Returns true if the specular color has been explicitly
//               set for this material, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1329 14 Dtool_qQJq8lwP 0 6 1256 3048 0 14 Dtool_qQJq8lwP 370 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_specular
//       Access: Published
//  Description: Returns the specular color setting, if it has been
//               set.  Returns (0,0,0,0) if the specular color has not
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1330 14 Dtool_qQJqdfyI 0 4 1257 2934 0 14 Dtool_qQJqdfyI 637 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_specular
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to compute the color of specular
//               highlights on the object.
//
//               This is the highlight color of an object: the color
//               of small highlight reflections.
//
//               If this is not set, highlights will not appear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  5 color 1 3048  
1331 14 Dtool_qQJqcNUr 0 4 1258 2934 0 14 Dtool_qQJqcNUr 278 ////////////////////////////////////////////////////////////////////
//     Function: Material::clear_specular
//       Access: Published
//  Description: Removes the explicit specular color from the material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
1332 14 Dtool_qQJq03rd 0 6 1259 2935 0 14 Dtool_qQJq03rd 333 ////////////////////////////////////////////////////////////////////
//     Function: Material::has_emission
//       Access: Published
//  Description: Returns true if the emission color has been explicitly
//               set for this material, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1333 14 Dtool_qQJqb2c1 0 6 1260 3048 0 14 Dtool_qQJqb2c1 370 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_emission
//       Access: Published
//  Description: Returns the emission color setting, if it has been
//               set.  Returns (0,0,0,0) if the emission color has not
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1334 14 Dtool_qQJqwIeu 0 4 1261 2934 0 14 Dtool_qQJqwIeu 768 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_emission
//       Access: Published
//  Description: Specifies the emission color setting of the material.
//               This is the color of the object as it appears in the
//               absence of any light whatsover, including ambient
//               light.  It is as if the object is glowing by this
//               color (although of course it will not illuminate
//               neighboring objects).
//
//               If this is not set, the object will not glow by its
//               own light and will only appear visible in the
//               presence of one or more lights.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  5 color 1 3048  
1335 14 Dtool_qQJqjKsu 0 4 1262 2934 0 14 Dtool_qQJqjKsu 278 ////////////////////////////////////////////////////////////////////
//     Function: Material::clear_emission
//       Access: Published
//  Description: Removes the explicit emission color from the material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
1336 14 Dtool_qQJq8cpp 0 6 1263 2939 0 14 Dtool_qQJq8cpp 270 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_shininess
//       Access: Published
//  Description: Returns the shininess exponent of the material.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1337 14 Dtool_qQJq_D1v 0 4 1264 2934 0 14 Dtool_qQJq_D1v 598 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_shininess
//       Access: Published
//  Description: Sets the shininess exponent of the material.  This
//               controls the size of the specular highlight spot.  In
//               general, larger number produce a smaller specular
//               highlight, which makes the object appear shinier.
//               Smaller numbers produce a larger highlight, which
//               makes the object appear less shiny.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  9 shininess 1 2939  
1338 14 Dtool_qQJqGt_1 0 6 1265 2935 0 14 Dtool_qQJqGt_1 267 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_local
//       Access: Published
//  Description: Returns the local viewer flag.  Set set_local().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1339 14 Dtool_qQJq9DMm 0 4 1266 2934 0 14 Dtool_qQJq9DMm 519 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_local
//       Access: Published
//  Description: Sets the local viewer flag.  Set this true to enable
//               camera-relative specular highlights, or false to use
//               orthogonal specular highlights.  The default value is
//               true.  Applications that use orthogonal projection
//               should specify false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  5 local 1 2935  
1340 14 Dtool_qQJqJTRL 0 6 1267 2935 0 14 Dtool_qQJqJTRL 306 ////////////////////////////////////////////////////////////////////
//     Function: Material::get_twoside
//       Access: Published
//  Description: Returns the state of the two-sided lighting flag.
//               See set_twoside().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1341 14 Dtool_qQJq06bF 0 4 1268 2934 0 14 Dtool_qQJq06bF 513 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_twoside
//       Access: Published
//  Description: Set this true to enable two-sided lighting.  When
//               two-sided lighting is on, both sides of a polygon
//               will be lit by this material.  The default is for
//               two-sided lighting to be off, in which case only the
//               front surface is lit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3179  7 twoside 1 2935  
1342 14 Dtool_qQJqNdw5 0 6 1269 2935 0 14 Dtool_qQJqNdw5 220 ////////////////////////////////////////////////////////////////////
//     Function: Material::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  5 other 1 3177  
1343 14 Dtool_qQJqvnf5 0 6 1270 2935 0 14 Dtool_qQJqvnf5 220 ////////////////////////////////////////////////////////////////////
//     Function: Material::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  5 other 1 3177  
1344 14 Dtool_qQJqwWha 0 6 1271 2935 0 14 Dtool_qQJqwWha 219 ////////////////////////////////////////////////////////////////////
//     Function: Material::operator <
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  5 other 1 3177  
1345 14 Dtool_qQJqlFQk 0 6 1272 2938 0 14 Dtool_qQJqlFQk 535 ////////////////////////////////////////////////////////////////////
//     Function: Material::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this material
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.  The
//               sorting order is arbitrary and largely meaningless,
//               except to differentiate different materials.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  5 other 1 3177  
1346 14 Dtool_qQJqhHq5 0 4 1273 2934 0 14 Dtool_qQJqhHq5 215 ////////////////////////////////////////////////////////////////////
//     Function: Material::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3177  3 out 1 2936  
1347 14 Dtool_qQJqO3W7 0 4 1274 2934 0 14 Dtool_qQJqO3W7 214 ////////////////////////////////////////////////////////////////////
//     Function: Material::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3177  3 out 1 2936  6 indent 1 2938  
1348 14 Dtool_qQJqpdX4 0 6 1275 2935 0 14 Dtool_qQJqpdX4 225 ////////////////////////////////////////////////////////////////////
//     Function: Material::is_attrib_locked
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3177  
1349 14 Dtool_qQJqw3QT 0 4 1276 2934 0 14 Dtool_qQJqw3QT 224 ////////////////////////////////////////////////////////////////////
//     Function: Material::set_attrib_lock
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3179  
1350 14 Dtool_qQJqc7AP 0 7 1277 2950 0 14 Dtool_qQJqc7AP 0 0 
1351 14 Dtool_qQJqAyQo 0 7 1239 2959 0 14 Dtool_qQJqAyQo 0 1 4 this 3 3179  
1352 14 Dtool_qQJqUatZ 0 7 1240 3179 2659 14 Dtool_qQJqUatZ 0 1 4 this 3 2959  
1353 14 Dtool_qQJq_v5f 0 6 1241 2970 0 14 Dtool_qQJq_v5f 0 1 4 this 3 3179  
1354 14 Dtool_qQJqA_vV 0 7 1242 3179 2659 14 Dtool_qQJqA_vV 0 1 4 this 3 2970  
1355 14 Dtool_qQJqwqW_ 0 7 1279 3179 2659 14 Dtool_qQJqwqW_ 1538 // Filename: materialPool.I
// Created by:  drose (30Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::get_material
//       Access: Public, Static
//  Description: Returns a Material pointer that represents the
//               same material described by temp, except that it is a
//               shared pointer.
//
//               Each call to get_material() passing an equivalent
//               Material pointer will return the same shared pointer.
//
//               If you modify the shared pointer, it will
//               automatically disassociate it from the pool.
//
//               Also, the return value may be a different pointer
//               than that passed in, or it may be the same pointer.
//               In either case, the passed in pointer has now been
//               sacrificed to the greater good and should not be used
//               again (like any other PointerTo, it will be freed
//               when the last reference count is removed).
//////////////////////////////////////////////////////////////////// 1 4 temp 1 3179  
1356 14 Dtool_qQJqDER0 0 4 1280 2934 0 14 Dtool_qQJqDER0 283 ////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::release_material
//       Access: Published, Static
//  Description: Removes the indicated material from the pool.
//////////////////////////////////////////////////////////////////// 1 4 temp 1 3179  
1357 14 Dtool_qQJqUKsK 0 4 1281 2934 0 14 Dtool_qQJqUKsK 336 ////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::release_all_materials
//       Access: Published, Static
//  Description: Releases all materials in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1358 14 Dtool_qQJqWM0z 0 6 1282 2938 0 14 Dtool_qQJqWM0z 481 ////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those materials in the pool that have a
//               reference count of exactly 1; i.e. only those
//               materials that are not being used outside of the pool.
//               Returns the number of materials released.
//////////////////////////////////////////////////////////////////// 0 
1359 14 Dtool_qQJq6ZKx 0 4 1283 2934 0 14 Dtool_qQJq6ZKx 320 ////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
1360 14 Dtool_qQJq7VUC 0 4 1284 2934 0 14 Dtool_qQJq7VUC 315 ////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::write
//       Access: Published, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
1361 14 Dtool_qQJqCN5B 0 7 1287 3180 2711 14 Dtool_qQJqCN5B 705 // Filename: matrixLens.I
// Created by:  drose (12Dec01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1362 14 Dtool_qQJqxIxS 0 4 1288 2934 0 14 Dtool_qQJqxIxS 938 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_user_mat
//       Access: Published
//  Description: Explicitly specifies the projection matrix.  This
//               matrix should convert X and Y to the range
//               [-film_size/2, film_size/2], where (-fs/2,-fs/2) is
//               the lower left corner of the screen and (fs/2, fs/2)
//               is the upper right.  Z should go to the range [-1,
//               1], where -1 is the far plane and 1 is the near
//               plane.  Note that this is a left-handed Y-up
//               coordinate system.
//
//               The default film_size for a MatrixLens is 2, so the
//               default range is [-1, 1] for both X and Y.  This is
//               consistent with the GL conventions for projection
//               matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3180  8 user_mat 1 3015  
1363 14 Dtool_qQJqN4l8 0 6 1289 3015 0 14 Dtool_qQJqN4l8 404 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_user_mat
//       Access: Published
//  Description: Returns the explicit projection matrix as set by the
//               user.  This does not include transforms on the lens
//               or film (e.g. a film offset or view hpr).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3181  
1364 14 Dtool_qQJqVMQA 0 4 1290 2934 0 14 Dtool_qQJqVMQA 761 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_left_eye_mat
//       Access: Published
//  Description: Sets a custom projection matrix for the left eye.
//               This is only used if the lens is attached to a stereo
//               camera, in which case the left eye matrix will be
//               used to draw the scene in the left eye (but the
//               center matrix--the user_mat--will still be used to
//               cull the scene).
//
//               This matrix should not be too different from the
//               center matrix (set by set_user_mat()) or culling
//               errors may become obvious.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3180  8 user_mat 1 3015  
1365 14 Dtool_qQJqzLCn 0 4 1291 2934 0 14 Dtool_qQJqzLCn 380 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::clear_left_eye_mat
//       Access: Published
//  Description: Removes the custom projection matrix set for the left
//               eye, and uses the center matrix (set by set_user_mat)
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3180  
1366 14 Dtool_qQJqfGR4 0 6 1292 2935 0 14 Dtool_qQJqfGR4 441 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::has_left_eye_mat
//       Access: Published
//  Description: Returns true if the camera has a custom projection
//               matrix set for the left eye, or false if the center
//               matrix (set by set_user_mat) will be used for the
//               left eye.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3181  
1367 14 Dtool_qQJqcMKo 0 6 1293 3015 0 14 Dtool_qQJqcMKo 396 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_left_eye_mat
//       Access: Published
//  Description: Returns the custom projection matrix for the left
//               eye, if any, or the center matrix if there is no
//               custom matrix set for the left eye.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3181  
1368 14 Dtool_qQJqMH4j 0 4 1294 2934 0 14 Dtool_qQJqMH4j 765 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_right_eye_mat
//       Access: Published
//  Description: Sets a custom projection matrix for the right eye.
//               This is only used if the lens is attached to a stereo
//               camera, in which case the right eye matrix will be
//               used to draw the scene in the right eye (but the
//               center matrix--the user_mat--will still be used to
//               cull the scene).
//
//               This matrix should not be too different from the
//               center matrix (set by set_user_mat()) or culling
//               errors may become obvious.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3180  8 user_mat 1 3015  
1369 14 Dtool_qQJqZ82q 0 4 1295 2934 0 14 Dtool_qQJqZ82q 382 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::clear_right_eye_mat
//       Access: Published
//  Description: Removes the custom projection matrix set for the right
//               eye, and uses the center matrix (set by set_user_mat)
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3180  
1370 14 Dtool_qQJqP55w 0 6 1296 2935 0 14 Dtool_qQJqP55w 444 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::has_right_eye_mat
//       Access: Published
//  Description: Returns true if the camera has a custom projection
//               matrix set for the right eye, or false if the center
//               matrix (set by set_user_mat) will be used for the
//               right eye.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3181  
1371 14 Dtool_qQJqTRzg 0 6 1297 3015 0 14 Dtool_qQJqTRzg 399 ////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_right_eye_mat
//       Access: Published
//  Description: Returns the custom projection matrix for the right
//               eye, if any, or the center matrix if there is no
//               custom matrix set for the right eye.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3181  
1372 14 Dtool_qQJqpeVf 0 7 1298 2950 0 14 Dtool_qQJqpeVf 0 0 
1373 14 Dtool_qQJq01XU 0 7 1301 3183 2714 14 Dtool_qQJq01XU 716 // Filename: orthographicLens.I
// Created by:  mike (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OrthographicLens::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1374 14 Dtool_qQJqlLeB 0 7 1302 2950 0 14 Dtool_qQJqlLeB 0 0 
1375 14 Dtool_qQJq6Ayf 0 7 1305 3184 2717 14 Dtool_qQJq6Ayf 715 // Filename: perspectiveLens.I
// Created by:  drose (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1376 14 Dtool_qQJqJoB6 0 7 1305 3184 2717 14 Dtool_qQJqJoB6 224 ////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 hfov 1 2939  4 vfov 1 2939  
1377 14 Dtool_qQJqMg_O 0 7 1306 2950 0 14 Dtool_qQJqMg_O 0 0 
1378 14 Dtool_qQJq_A2c 0 7 1309 3185 2724 14 Dtool_qQJq_A2c 854 // Filename: textureReloadRequest.I
// Created by:  drose (12Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::Constructor
//       Access: Published
//  Description: Create a new TextureReloadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 4 4 name 1 2929  3 pgo 1 3003  7 texture 1 3122  16 allow_compressed 1 2935  
1379 14 Dtool_qQJqMVC8 0 7 1310 3003 0 14 Dtool_qQJqMVC8 366 ////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_prepared_graphics_objects
//       Access: Published
//  Description: Returns the PreparedGraphicsObjects object associated with
//               this asynchronous TextureReloadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3186  
1380 14 Dtool_qQJqN1sj 0 7 1311 3122 2314 14 Dtool_qQJqN1sj 332 ////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_texture
//       Access: Published
//  Description: Returns the Texture object associated with
//               this asynchronous TextureReloadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3186  
1381 14 Dtool_qQJq2GyL 0 6 1312 2935 0 14 Dtool_qQJq2GyL 350 ////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::get_allow_compressed
//       Access: Published
//  Description: Returns the "allow compressed" flag associated with
//               this asynchronous TextureReloadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3186  
1382 14 Dtool_qQJq3Flo 0 6 1313 2935 0 14 Dtool_qQJq3Flo 320 ////////////////////////////////////////////////////////////////////
//     Function: TextureReloadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3186  
1383 14 Dtool_qQJqX90D 0 7 1314 2950 0 14 Dtool_qQJqX90D 0 0 
1384 14 Dtool_qQJqNASE 0 7 1321 3122 2314 14 Dtool_qQJqNASE 294 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::get_texture
//       Access: Public
//  Description: Returns the pointer to the associated Texture
//               object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1385 14 Dtool_qQJqEeGI 0 6 1322 2938 0 14 Dtool_qQJqEeGI 394 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::get_view
//       Access: Public
//  Description: Returns the specific view of a multiview texture this
//               context represents.  In the usual case, with a
//               non-multiview texture, this will be 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1386 14 Dtool_qQJqZ7uI 0 6 1323 2935 0 14 Dtool_qQJqZ7uI 371 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_modified
//       Access: Public
//  Description: Returns true if the texture properties or image have
//               been modified since the last time mark_loaded() was
//               called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1387 14 Dtool_qQJqCrzx 0 6 1324 2935 0 14 Dtool_qQJqCrzx 398 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_properties_modified
//       Access: Public
//  Description: Returns true if the texture properties (unrelated to
//               the image) have been modified since the last time
//               mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1388 14 Dtool_qQJqZRbs 0 6 1325 2935 0 14 Dtool_qQJqZRbs 345 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_image_modified
//       Access: Public
//  Description: Returns true if the texture image has been modified
//               since the last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1389 14 Dtool_qQJqDHZn 0 6 1326 2935 0 14 Dtool_qQJqDHZn 387 ////////////////////////////////////////////////////////////////////
//     Function: TextureContext::was_simple_image_modified
//       Access: Public
//  Description: Returns true if the texture's "simple" image has been
//               modified since the last time mark_simple_loaded() was
//               called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3188  
1390 14 Dtool_qQJq8H0S 0 7 1327 2950 0 14 Dtool_qQJq8H0S 0 0 
1391 14 Dtool_qQJqclHN 0 6 1317 3056 0 14 Dtool_qQJqclHN 0 1 4 this 3 3148  
1392 14 Dtool_qQJqo_gM 0 6 1318 3148 0 14 Dtool_qQJqo_gM 0 1 4 this 3 3056  
1393 14 Dtool_qQJqi_kf 0 6 1319 2942 0 14 Dtool_qQJqi_kf 0 1 4 this 3 3148  
1394 14 Dtool_qQJqhXLx 0 6 1320 3148 0 14 Dtool_qQJqhXLx 0 1 4 this 3 2942  
1395 14 Dtool_qQJqxCTe 0 7 1330 3149 0 14 Dtool_qQJqxCTe 227 ////////////////////////////////////////////////////////////////////
//     Function: ShaderContext::get_expansion
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3190  
1396 14 Dtool_qQJqtn7K 0 7 1331 2950 0 14 Dtool_qQJqtn7K 0 0 
1397 14 Dtool_qQJqKfaE 0 7 1334 3192 2743 14 Dtool_qQJqKfaE 229 ////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2947  
1398 14 Dtool_qQJqOLRn 0 7 1334 3192 2743 14 Dtool_qQJqOLRn 229 ////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
1399 14 Dtool_qQJqg4r3 0 4 1335 2934 0 14 Dtool_qQJqg4r3 754 // Filename: userVertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::set_slider
//       Access: Published
//  Description: Stores the indicated slider value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3192  6 slider 1 2939  
1400 14 Dtool_qQJqTUi2 0 7 1336 2950 0 14 Dtool_qQJqTUi2 0 0 
1401 14 Dtool_qQJqkABz 0 7 1339 3193 2748 14 Dtool_qQJqkABz 232 ////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
1402 14 Dtool_qQJqi0yN 0 6 1340 2929 0 14 Dtool_qQJqi0yN 806 // Filename: userVertexTransform.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor.
//               Completely arbitrary.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3194  
1403 14 Dtool_qQJqukq7 0 4 1341 2934 0 14 Dtool_qQJqukq7 259 ////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::set_matrix
//       Access: Published
//  Description: Stores the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3193  6 matrix 1 3015  
1404 14 Dtool_qQJq8sV1 0 7 1342 2950 0 14 Dtool_qQJq8sV1 0 0 
1405 14 Dtool_qQJqbypD 0 6 1350 2935 0 14 Dtool_qQJqbypD 482 ////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3196  
1406 14 Dtool_qQJqlySi 0 6 1351 2938 0 14 Dtool_qQJqlySi 951 // Filename: videoTexture.I
// Created by:  drose (21Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_width
//       Access: Published
//  Description: Returns the width in texels of the source video
//               stream.  This is not necessarily the width of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3196  
1407 14 Dtool_qQJq7ggt 0 6 1352 2938 0 14 Dtool_qQJq7ggt 466 ////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_height
//       Access: Published
//  Description: Returns the height in texels of the source video
//               stream.  This is not necessarily the height of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3196  
1408 14 Dtool_qQJqhRqO 0 7 1353 2950 0 14 Dtool_qQJqhRqO 0 0 
1409 14 Dtool_qQJq_R9F 0 7 1345 3122 2314 14 Dtool_qQJq_R9F 0 1 4 this 3 3198  
1410 14 Dtool_qQJqyy0u 0 7 1346 3198 2757 14 Dtool_qQJqyy0u 0 1 4 this 3 3122  
1411 14 Dtool_qQJqVQwW 0 6 1348 3199 0 14 Dtool_qQJqVQwW 0 1 4 this 3 3198  
1412 14 Dtool_qQJqNNh3 0 7 1349 3198 2757 14 Dtool_qQJqNNh3 0 1 4 this 3 3199  
1413 14 Dtool_qQJqGt8g 0 7 1360 2995 1779 14 Dtool_qQJqGt8g 300 ////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::get_data
//       Access: Public
//  Description: Returns the pointer to the client-side array data
//               object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3200  
1414 14 Dtool_qQJq5_9B 0 6 1361 2935 0 14 Dtool_qQJq5_9B 334 ////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::changed_size
//       Access: Public
//  Description: Returns true if the data has changed size since the
//               last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3200  6 reader 1 3001  
1415 14 Dtool_qQJqDYdg 0 6 1362 2935 0 14 Dtool_qQJqDYdg 350 ////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::changed_usage_hint
//       Access: Public
//  Description: Returns true if the data has changed its usage hint
//               since the last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3200  6 reader 1 3001  
1416 14 Dtool_qQJqFhc_ 0 6 1363 2935 0 14 Dtool_qQJqFhc_ 335 ////////////////////////////////////////////////////////////////////
//     Function: VertexBufferContext::was_modified
//       Access: Public
//  Description: Returns true if the data has been modified since the
//               last time mark_loaded() was called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3200  6 reader 1 3001  
1417 14 Dtool_qQJqtgdo 0 7 1364 2950 0 14 Dtool_qQJqtgdo 0 0 
1418 14 Dtool_qQJqYZFd 0 6 1356 3056 0 14 Dtool_qQJqYZFd 0 1 4 this 3 3006  
1419 14 Dtool_qQJqKnn9 0 6 1357 3006 0 14 Dtool_qQJqKnn9 0 1 4 this 3 3056  
1420 14 Dtool_qQJqiFDC 0 6 1358 2942 0 14 Dtool_qQJqiFDC 0 1 4 this 3 3006  
1421 14 Dtool_qQJqaGdu 0 6 1359 3006 0 14 Dtool_qQJqaGdu 0 1 4 this 3 2942  
1422 14 Dtool_qQJqsz_w 0 7 1367 3202 2770 14 Dtool_qQJqsz_w 229 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1423 14 Dtool_qQJqFrcz 0 7 1367 3202 2770 14 Dtool_qQJqFrcz 456 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Constructor
//       Access: Published
//  Description: This special constructor accepts a Python list of
//               Textures.  Since this constructor accepts a generic
//               PyObject *, it should be the last constructor listed
//               in the class record.
//////////////////////////////////////////////////////////////////// 2 4 self 1 3203  8 sequence 1 3203  
1424 14 Dtool_qQJqG2Wq 0 7 1367 3202 2770 14 Dtool_qQJqG2Wq 234 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3205  
1425 14 Dtool_qQJquUB_ 0 6 1368 3202 0 14 Dtool_qQJquUB_ 242 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  4 copy 1 3205  
1426 14 Dtool_qQJqwLl_ 0 6 1370 3203 0 14 Dtool_qQJqwLl_ 327 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  4 self 1 3203  
1427 14 Dtool_qQJqqcTz 0 4 1371 2934 0 14 Dtool_qQJqqcTz 282 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_texture
//       Access: Published
//  Description: Adds a new Texture to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  7 texture 1 3122  
1428 14 Dtool_qQJq1SuY 0 6 1372 2935 0 14 Dtool_qQJq1SuY 406 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_texture
//       Access: Published
//  Description: Removes the indicated Texture from the collection.
//               Returns true if the texture was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  7 texture 1 3122  
1429 14 Dtool_qQJqBW2_ 0 4 1373 2934 0 14 Dtool_qQJqBW2_ 482 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_textures_from
//       Access: Published
//  Description: Adds all the Textures indicated in the other
//               collection to this texture.  The other textures are simply
//               appended to the end of the textures in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  5 other 1 3205  
1430 14 Dtool_qQJqubPS 0 4 1374 2934 0 14 Dtool_qQJqubPS 336 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_textures_from
//       Access: Published
//  Description: Removes from this collection all of the Textures
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  5 other 1 3205  
1431 14 Dtool_qQJqJXB3 0 4 1375 2934 0 14 Dtool_qQJqJXB3 473 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_duplicate_textures
//       Access: Published
//  Description: Removes any duplicate entries of the same Textures
//               on this collection.  If a Texture appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3202  
1432 14 Dtool_qQJqeRIZ 0 6 1376 2935 0 14 Dtool_qQJqeRIZ 329 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::has_texture
//       Access: Published
//  Description: Returns true if the indicated Texture appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  7 texture 1 3122  
1433 14 Dtool_qQJqf_8F 0 4 1377 2934 0 14 Dtool_qQJqf_8F 265 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::clear
//       Access: Published
//  Description: Removes all Textures from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3202  
1434 14 Dtool_qQJqusRb 0 7 1378 3122 2314 14 Dtool_qQJqusRb 372 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::find_texture
//       Access: Published
//  Description: Returns the texture in the collection with the
//               indicated name, if any, or NULL if no texture has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  4 name 1 2929  
1435 14 Dtool_qQJqrq1E 0 6 1379 2938 0 14 Dtool_qQJqrq1E 284 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of Textures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3205  
1436 14 Dtool_qQJqXzkn 0 7 1380 3122 2314 14 Dtool_qQJqXzkn 272 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth Texture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  5 index 1 2938  
1437 14 Dtool_qQJqeP4T 0 7 1381 3122 2314 14 Dtool_qQJqeP4T 392 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator []
//       Access: Published
//  Description: Returns the nth Texture in the collection.  This is
//               the same as get_texture(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  5 index 1 2938  
1438 14 Dtool_qQJq7T26 0 6 1382 2938 0 14 Dtool_qQJq7T26 336 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::size
//       Access: Published
//  Description: Returns the number of textures in the collection.  This
//               is the same thing as get_num_textures().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3205  
1439 14 Dtool_qQJqdAPK 0 6 1383 3202 0 14 Dtool_qQJqdAPK 278 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  5 other 1 3205  
1440 14 Dtool_qQJq_iXU 0 7 1384 3202 2770 14 Dtool_qQJq_iXU 322 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator +
//       Access: Published
//  Description: Returns a TextureCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  5 other 1 3205  
1441 14 Dtool_qQJqrzMd 0 4 1385 2934 0 14 Dtool_qQJqrzMd 400 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::append
//       Access: Published
//  Description: Adds a new Texture to the collection.  This method
//               duplicates the add_texture() method; it is provided to
//               satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  7 texture 1 3122  
1442 14 Dtool_qQJqwLXu 0 4 1386 2934 0 14 Dtool_qQJqwLXu 401 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3202  5 other 1 3205  
1443 14 Dtool_qQJq2Sw8 0 4 1387 2934 0 14 Dtool_qQJq2Sw8 334 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  3 out 1 2936  
1444 14 Dtool_qQJqfS_c 0 4 1388 2934 0 14 Dtool_qQJqfS_c 338 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3205  3 out 1 2936  12 indent_level 1 2938  
1445 14 Dtool_qQJqkwgN 0 4 1388 2934 0 14 Dtool_qQJqkwgN 338 ////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3205  3 out 1 2936  
1446 14 Dtool_qQJqobpI 0 6 1390 2935 0 14 Dtool_qQJqobpI 874 // Filename: texturePool.I
// Created by:  drose (26Apr00)
// Updated by: fperazzi, PandaSE(29Apr10) (added load_2d_texture_array)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_texture
//       Access: Published, Static
//  Description: Returns true if the texture has ever been loaded,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3125  
1447 14 Dtool_qQJq8SGI 0 6 1391 2935 0 14 Dtool_qQJq8SGI 611 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::verify_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_texture() with the same texture name will
//               return a valid Texture pointer.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3125  
1448 14 Dtool_qQJqDNKc 0 7 1392 3122 2314 14 Dtool_qQJqDNKc 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
//////////////////////////////////////////////////////////////////// 6 8 filename 1 3125  14 alpha_filename 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  12 read_mipmaps 1 2935  7 options 1 3128  
1449 14 Dtool_qQJqzR0_ 0 7 1392 3122 2314 14 Dtool_qQJqzR0_ 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
//////////////////////////////////////////////////////////////////// 5 8 filename 1 3125  14 alpha_filename 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  12 read_mipmaps 1 2935  
1450 14 Dtool_qQJqkfGU 0 7 1392 3122 2314 14 Dtool_qQJqkfGU 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
//////////////////////////////////////////////////////////////////// 4 8 filename 1 3125  14 alpha_filename 1 3125  25 primary_file_num_channels 1 2938  18 alpha_file_channel 1 2938  
1451 14 Dtool_qQJqtJ8W 0 7 1392 3122 2314 14 Dtool_qQJqtJ8W 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
//////////////////////////////////////////////////////////////////// 3 8 filename 1 3125  14 alpha_filename 1 3125  25 primary_file_num_channels 1 2938  
1452 14 Dtool_qQJqKwXY 0 7 1392 3122 2314 14 Dtool_qQJqKwXY 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3125  14 alpha_filename 1 3125  
1453 14 Dtool_qQJq1c0U 0 7 1392 3122 2314 14 Dtool_qQJq1c0U 826 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//////////////////////////////////////////////////////////////////// 4 8 filename 1 3125  25 primary_file_num_channels 1 2938  12 read_mipmaps 1 2935  7 options 1 3128  
1454 14 Dtool_qQJq2xUh 0 7 1392 3122 2314 14 Dtool_qQJq2xUh 826 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//////////////////////////////////////////////////////////////////// 3 8 filename 1 3125  25 primary_file_num_channels 1 2938  12 read_mipmaps 1 2935  
1455 14 Dtool_qQJqyJ3b 0 7 1392 3122 2314 14 Dtool_qQJqyJ3b 826 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3125  25 primary_file_num_channels 1 2938  
1456 14 Dtool_qQJqK7P8 0 7 1392 3122 2314 14 Dtool_qQJqK7P8 826 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3125  
1457 14 Dtool_qQJq_1y1 0 7 1393 3122 2314 14 Dtool_qQJq_1y1 833 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_3d_texture
//       Access: Published, Static
//  Description: Loads a 3-D texture that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 3-d level.
//////////////////////////////////////////////////////////////////// 3 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  7 options 1 3128  
1458 14 Dtool_qQJqBx44 0 7 1393 3122 2314 14 Dtool_qQJqBx44 833 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_3d_texture
//       Access: Published, Static
//  Description: Loads a 3-D texture that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 3-d level.
//////////////////////////////////////////////////////////////////// 2 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  
1459 14 Dtool_qQJqGNtw 0 7 1393 3122 2314 14 Dtool_qQJqGNtw 833 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_3d_texture
//       Access: Published, Static
//  Description: Loads a 3-D texture that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 3-d level.
//////////////////////////////////////////////////////////////////// 1 16 filename_pattern 1 3125  
1460 14 Dtool_qQJqVdFO 0 7 1394 3122 2314 14 Dtool_qQJqVdFO 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_2d_texture_array
//       Access: Published, Static
//  Description: Loads a 2-D texture array that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 2-d level.
//////////////////////////////////////////////////////////////////// 3 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  7 options 1 3128  
1461 14 Dtool_qQJqt_6S 0 7 1394 3122 2314 14 Dtool_qQJqt_6S 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_2d_texture_array
//       Access: Published, Static
//  Description: Loads a 2-D texture array that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 2-d level.
//////////////////////////////////////////////////////////////////// 2 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  
1462 14 Dtool_qQJqBHlG 0 7 1394 3122 2314 14 Dtool_qQJqBHlG 845 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_2d_texture_array
//       Access: Published, Static
//  Description: Loads a 2-D texture array that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 2-d level.
//////////////////////////////////////////////////////////////////// 1 16 filename_pattern 1 3125  
1463 14 Dtool_qQJqc_3A 0 7 1395 3122 2314 14 Dtool_qQJqc_3A 798 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_cube_map
//       Access: Published, Static
//  Description: Loads a cube map texture that is specified with a
//               series of 6 pages, numbered 0 through 5.  The
//               filename should include a sequence of one or more
//               hash characters ("#") which will be filled in with
//               the index number of each pagee.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the face number, 0 through 5.
//////////////////////////////////////////////////////////////////// 3 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  7 options 1 3128  
1464 14 Dtool_qQJq_XKI 0 7 1395 3122 2314 14 Dtool_qQJq_XKI 798 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_cube_map
//       Access: Published, Static
//  Description: Loads a cube map texture that is specified with a
//               series of 6 pages, numbered 0 through 5.  The
//               filename should include a sequence of one or more
//               hash characters ("#") which will be filled in with
//               the index number of each pagee.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the face number, 0 through 5.
//////////////////////////////////////////////////////////////////// 2 16 filename_pattern 1 3125  12 read_mipmaps 1 2935  
1465 14 Dtool_qQJqbYrw 0 7 1395 3122 2314 14 Dtool_qQJqbYrw 798 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_cube_map
//       Access: Published, Static
//  Description: Loads a cube map texture that is specified with a
//               series of 6 pages, numbered 0 through 5.  The
//               filename should include a sequence of one or more
//               hash characters ("#") which will be filled in with
//               the index number of each pagee.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the face number, 0 through 5.
//////////////////////////////////////////////////////////////////// 1 16 filename_pattern 1 3125  
1466 14 Dtool_qQJqg89z 0 7 1396 3122 2314 14 Dtool_qQJqg89z 619 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_normalization_cube_map
//       Access: Published, Static
//  Description: Returns a standard Texture object that has been
//               created with
//               Texture::generate_normalization_cube_map().  This
//               Texture may be shared by any application code
//               requiring a normalization cube map.  It will be at
//               least as large as the specified size, though it may
//               be larger.
//////////////////////////////////////////////////////////////////// 1 4 size 1 2938  
1467 14 Dtool_qQJqatPj 0 7 1397 3122 2314 14 Dtool_qQJqatPj 598 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_alpha_scale_map
//       Access: Published, Static
//  Description: Returns a standard Texture object that has been
//               created with Texture::generate_alpha_scale_map().
//
//               This Texture object is used internally by Panda to
//               apply an alpha scale to an object (instead of munging
//               its vertices) when gsg->get_alpha_scale_via_texture()
//               returns true.
//////////////////////////////////////////////////////////////////// 0 
1468 14 Dtool_qQJqnyxl 0 4 1398 2934 0 14 Dtool_qQJqnyxl 509 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::add_texture
//       Access: Published, Static
//  Description: Adds the indicated already-loaded texture to the
//               pool.  The texture must have a filename set for its
//               name.  The texture will always replace any
//               previously-loaded texture in the pool that had the
//               same filename.
//////////////////////////////////////////////////////////////////// 1 7 texture 1 3122  
1469 14 Dtool_qQJqp_Lr 0 4 1399 2934 0 14 Dtool_qQJqp_Lr 733 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_texture
//       Access: Published, Static
//  Description: Removes the indicated texture from the pool,
//               indicating it will never be loaded again; the texture
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every texture
//               every loaded, and textures will never be freed.
//
//               The texture's name should not have been changed
//               during its lifetime, or this function may fail to
//               locate it in the pool.
//////////////////////////////////////////////////////////////////// 1 7 texture 1 3122  
1470 14 Dtool_qQJqA290 0 4 1400 2934 0 14 Dtool_qQJqA290 333 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_all_textures
//       Access: Published, Static
//  Description: Releases all textures in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1471 14 Dtool_qQJqNlv5 0 4 1401 2934 0 14 Dtool_qQJqNlv5 378 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::rehash
//       Access: Published, Static
//  Description: Should be called when the model-path changes, to blow
//               away the cache of texture pathnames found along the
//               model-path.
//////////////////////////////////////////////////////////////////// 0 
1472 14 Dtool_qQJqfx9C 0 6 1402 2938 0 14 Dtool_qQJqfx9C 480 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::garbage_collect
//       Access: Published, Static
//  Description: Releases only those textures in the pool that have a
//               reference count of exactly 1; i.e. only those
//               textures that are not being used outside of the pool.
//               Returns the number of textures released.
//////////////////////////////////////////////////////////////////// 0 
1473 14 Dtool_qQJqUiu_ 0 4 1403 2934 0 14 Dtool_qQJqUiu_ 280 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::list_contents
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to cout
//////////////////////////////////////////////////////////////////// 0 
1474 14 Dtool_qQJqbY3s 0 4 1403 2934 0 14 Dtool_qQJqbY3s 321 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::list_contents
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
1475 14 Dtool_qQJq1Y6W 0 7 1404 3122 2314 14 Dtool_qQJq1Y6W 449 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::find_texture
//       Access: Published, Static
//  Description: Returns the first texture found in the pool that
//               matches the indicated name (which may contain
//               wildcards).  Returns the texture if it is found, or
//               NULL if it is not.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
1476 14 Dtool_qQJqmCik 0 7 1405 3202 2770 14 Dtool_qQJqmCik 382 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::find_all_textures
//       Access: Published, Static
//  Description: Returns the set of all textures found in the pool
//               that match the indicated name (which may contain
//               wildcards).
//////////////////////////////////////////////////////////////////// 1 4 name 1 2929  
1477 14 Dtool_qQJqNHeD 0 7 1405 3202 2770 14 Dtool_qQJqNHeD 382 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::find_all_textures
//       Access: Published, Static
//  Description: Returns the set of all textures found in the pool
//               that match the indicated name (which may contain
//               wildcards).
//////////////////////////////////////////////////////////////////// 0 
1478 14 Dtool_qQJq7xO0 0 4 1406 2934 0 14 Dtool_qQJq7xO0 355 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::set_fake_texture_image
//       Access: Published, Static
//  Description: Sets a bogus filename that will be loaded in lieu of
//               any textures requested from this point on.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3125  
1479 14 Dtool_qQJqF81s 0 4 1407 2934 0 14 Dtool_qQJqF81s 330 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::clear_fake_texture_image
//       Access: Published, Static
//  Description: Restores normal behavior of loading the textures
//               actually requested.
//////////////////////////////////////////////////////////////////// 0 
1480 14 Dtool_qQJqXpQC 0 6 1408 2935 0 14 Dtool_qQJqXpQC 353 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_fake_texture_image
//       Access: Published, Static
//  Description: Returns true if fake_texture_image mode has been
//               enabled, false if we are in the normal mode.
//////////////////////////////////////////////////////////////////// 0 
1481 14 Dtool_qQJqOn7_ 0 6 1409 3125 0 14 Dtool_qQJqOn7_ 349 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_fake_texture_image
//       Access: Published, Static
//  Description: Returns the filename that was specified with a
//               previous call to set_fake_texture_image().
//////////////////////////////////////////////////////////////////// 0 
1482 14 Dtool_qQJqSwzz 0 7 1410 3122 2314 14 Dtool_qQJqSwzz 452 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::make_texture
//       Access: Published, Static
//  Description: Creates a new Texture object of the appropriate type
//               for the indicated filename extension, according to
//               the types that have been registered via
//               register_texture_type().
//////////////////////////////////////////////////////////////////// 1 9 extension 1 2929  
1483 14 Dtool_qQJqA_aL 0 4 1411 2934 0 14 Dtool_qQJqA_aL 345 ////////////////////////////////////////////////////////////////////
//     Function: TexturePool::write
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
//               For debugging.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
1484 14 Dtool_qQJqqJgl 0 6 1414 2938 0 14 Dtool_qQJqqJgl 449 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_x_size
//       Access: Published
//  Description: Returns the width of the texture image that is
//               contributing to the TexturePeeker's information.
//               This may be either the Texture's full width, or its
//               simple ram image's width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3207  
1485 14 Dtool_qQJq3igF 0 6 1415 2938 0 14 Dtool_qQJq3igF 452 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_y_size
//       Access: Published
//  Description: Returns the height of the texture image that is
//               contributing to the TexturePeeker's information.
//               This may be either the Texture's full height, or its
//               simple ram image's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3207  
1486 14 Dtool_qQJqRHhl 0 6 1416 2938 0 14 Dtool_qQJqRHhl 337 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::get_z_size
//       Access: Published
//  Description: Returns the depth of the texture image that is
//               contributing to the TexturePeeker's information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3207  
1487 14 Dtool_qQJqUMM4 0 4 1417 2934 0 14 Dtool_qQJqUMM4 609 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::lookup
//       Access: Published
//  Description: Fills "color" with the RGBA color of the texel at
//               point (u, v).
//
//               The texel color is determined via nearest-point
//               sampling (no filtering of adjacent pixels),
//               regardless of the filter type associated with the
//               texture.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3207  5 color 1 3068  1 u 1 2939  1 v 1 2939  
1488 14 Dtool_qQJqXgie 0 4 1417 2934 0 14 Dtool_qQJqXgie 612 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::lookup
//       Access: Published
//  Description: Fills "color" with the RGBA color of the texel at
//               point (u, v, w).
//
//               The texel color is determined via nearest-point
//               sampling (no filtering of adjacent pixels),
//               regardless of the filter type associated with the
//               texture.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3207  5 color 1 3068  1 u 1 2939  1 v 1 2939  1 w 1 2939  
1489 14 Dtool_qQJq2wqQ 0 4 1418 2934 0 14 Dtool_qQJq2wqQ 563 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::filter_rect
//       Access: Published
//  Description: Fills "color" with the average RGBA color of the
//               texels within the rectangle defined by the specified
//               coordinate range.
//
//               The texel color is linearly filtered over the entire
//               region.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3207  5 color 1 3068  5 min_u 1 2939  5 min_v 1 2939  5 max_u 1 2939  5 max_v 1 2939  
1490 14 Dtool_qQJq_YIi 0 4 1418 2934 0 14 Dtool_qQJq_YIi 563 ////////////////////////////////////////////////////////////////////
//     Function: TexturePeeker::filter_rect
//       Access: Published
//  Description: Fills "color" with the average RGBA color of the
//               texels within the rectangle defined by the specified
//               coordinate range.
//
//               The texel color is linearly filtered over the entire
//               region.  u, v, and w will wrap around regardless of
//               the texture's wrap mode.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3207  5 color 1 3068  5 min_u 1 2939  5 min_v 1 2939  5 min_w 1 2939  5 max_u 1 2939  5 max_v 1 2939  5 max_w 1 2939  
1491 14 Dtool_qQJqfazs 0 7 1422 3065 0 14 Dtool_qQJqfazs 1552 // Filename: textureStagePool.I
// Created by:  drose (03May10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::get_stage
//       Access: Public, Static
//  Description: Returns a TextureStage pointer that represents the
//               same TextureStage described by temp, except that it is a
//               shared pointer.
//
//               Each call to get_stage() passing an equivalent
//               TextureStage pointer will return the same shared pointer.
//
//               If you modify the shared pointer, it will
//               automatically disassociate it from the pool.
//
//               Also, the return value may be a different pointer
//               than that passed in, or it may be the same pointer.
//               In either case, the passed in pointer has now been
//               sacrificed to the greater good and should not be used
//               again (like any other PointerTo, it will be freed
//               when the last reference count is removed).
//////////////////////////////////////////////////////////////////// 1 4 temp 1 3065  
1492 14 Dtool_qQJqqpzp 0 4 1423 2934 0 14 Dtool_qQJqqpzp 288 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::release_stage
//       Access: Published, Static
//  Description: Removes the indicated TextureStage from the pool.
//////////////////////////////////////////////////////////////////// 1 4 temp 1 3065  
1493 14 Dtool_qQJqMtyA 0 4 1424 2934 0 14 Dtool_qQJqMtyA 341 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::release_all_stages
//       Access: Published, Static
//  Description: Releases all TextureStages in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1494 14 Dtool_qQJqESQc 0 4 1425 2934 0 14 Dtool_qQJqESQc 847 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::set_mode
//       Access: Published, Static
//  Description: Specifies the fundamental operating mode of the
//               TextureStagePool.
//
//               If this is M_none, each call to get_stage() returns
//               the same TextureStage pointer that was passed in (the
//               pool is effectively disabled).  If this is M_name,
//               each call to get_stage() returns the last
//               TextureStage passed in with the same name, whether it
//               has different properties or not.  If this is
//               M_unique, then each call to get_stage() returns only
//               TextureStages with identical properties.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 2928  
1495 14 Dtool_qQJqJOKA 0 6 1426 2928 0 14 Dtool_qQJqJOKA 331 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::get_mode
//       Access: Published, Static
//  Description: Returns the fundamental operating mode of the
//               TextureStagePool.  See set_mode().
//////////////////////////////////////////////////////////////////// 0 
1496 14 Dtool_qQJqqXaZ 0 6 1427 2938 0 14 Dtool_qQJqqXaZ 497 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those TextureStages in the pool that have a
//               reference count of exactly 1; i.e. only those
//               TextureStages that are not being used outside of the pool.
//               Returns the number of TextureStages released.
//////////////////////////////////////////////////////////////////// 0 
1497 14 Dtool_qQJq7BOt 0 4 1428 2934 0 14 Dtool_qQJq7BOt 328 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the TextureStage pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
1498 14 Dtool_qQJqXgUq 0 4 1429 2934 0 14 Dtool_qQJqXgUq 323 ////////////////////////////////////////////////////////////////////
//     Function: TextureStagePool::write
//       Access: Published, Static
//  Description: Lists the contents of the TextureStage pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 2936  
382
2828 11 AdaptiveLru 0 26625 11 AdaptiveLru 11 AdaptiveLru 0 0 0 1 1499 1500 0 14 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 0 0 1 0 2829 0 0 0 0 572
////////////////////////////////////////////////////////////////////
//       Class : AdaptiveLru
// Description : A basic LRU-type algorithm, except that it is
//               adaptive and attempts to avoid evicting pages that
//               have been used more frequently (even if less
//               recently) than other pages.
//
//               The interface is designed to be identical to that for
//               SimpleLru, so that it may be used as a drop-in
//               replacement.
////////////////////////////////////////////////////////////////////

2829 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

2830 15 AdaptiveLruPage 0 26625 15 AdaptiveLruPage 15 AdaptiveLruPage 0 0 0 1 1519 1521 0 12 1520 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 0 0 2 3 2831 1515 1516 3 2832 1517 1518 0 0 918
////////////////////////////////////////////////////////////////////
//       Class : AdaptiveLruPage
// Description : One atomic piece that may be managed by a AdaptiveLru
//               chain.  To use this class, inherit from it and
//               override evict_lru().
//
//               This class multiply inherits from two classes which
//               in turn both inherit from LinkedListNode.  This is
//               just a sneaky C++ trick to allow this class to
//               inherit from LinkedListNode twice, so that pages can
//               be stored on two different linked lists
//               simultaneously.  The AdaptiveLru class depends on
//               this; it maintains its pages in two different lists,
//               one grouped by priority, and one in order by next
//               partial update needs.
////////////////////////////////////////////////////////////////////

2831 26 AdaptiveLruPageDynamicList 0 1050625 26 AdaptiveLruPageDynamicList 26 AdaptiveLruPageDynamicList 0 0 0 0 0 0 0 0 0 0 0 0 114
// See the comment in the head of AdaptiveLruPage, below, for an
// explanation of these two silly little classes.

2832 25 AdaptiveLruPageStaticList 0 1050625 25 AdaptiveLruPageStaticList 25 AdaptiveLruPageStaticList 0 0 0 0 0 0 0 0 0 0 0 0 0

2833 9 GeomEnums 0 141313 9 GeomEnums 9 GeomEnums 0 0 0 0 1533 0 0 0 0 0 0 7 2834 2835 2836 2837 2838 2839 2840 400
////////////////////////////////////////////////////////////////////
//       Class : GeomEnums
// Description : This class exists just to provide scoping for the
//               various enumerated types used by Geom,
//               GeomVertexData, GeomVertexArrayData, GeomPrimitive,
//               and other related classes.
////////////////////////////////////////////////////////////////////

2834 9 UsageHint 0 794624 20 GeomEnums::UsageHint 20 GeomEnums::UsageHint 2833 0 0 0 0 0 0 0 0 0 5 9 UH_client 20 GeomEnums::UH_client 0 9 UH_stream 20 GeomEnums::UH_stream 1 10 UH_dynamic 21 GeomEnums::UH_dynamic 2 9 UH_static 20 GeomEnums::UH_static 3 14 UH_unspecified 25 GeomEnums::UH_unspecified 4 0 382
// The usage hint describes to the rendering backend how often the
// data in question will be modified and/or rendered.  It allows the
// backend to make appropriate choices about what part of memory the
// data should be stored in.
// The hint is provided as a performance optimization only, and does
// not constrain actual usage; although it may be an important
// optimization.

2835 13 GeomRendering 0 794624 24 GeomEnums::GeomRendering 24 GeomEnums::GeomRendering 2833 0 0 0 0 0 0 0 0 0 21 16 GR_indexed_point 27 GeomEnums::GR_indexed_point 1 16 GR_indexed_other 27 GeomEnums::GR_indexed_other 65536 15 GR_indexed_bits 26 GeomEnums::GR_indexed_bits 65537 8 GR_point 19 GeomEnums::GR_point 2 21 GR_point_uniform_size 32 GeomEnums::GR_point_uniform_size 4 17 GR_per_point_size 28 GeomEnums::GR_per_point_size 8 20 GR_point_perspective 31 GeomEnums::GR_point_perspective 16 21 GR_point_aspect_ratio 32 GeomEnums::GR_point_aspect_ratio 32 14 GR_point_scale 25 GeomEnums::GR_point_scale 64 15 GR_point_rotate 26 GeomEnums::GR_point_rotate 128 15 GR_point_sprite 26 GeomEnums::GR_point_sprite 256 26 GR_point_sprite_tex_matrix 37 GeomEnums::GR_point_sprite_tex_matrix 512 13 GR_point_bits 24 GeomEnums::GR_point_bits 1022 17 GR_triangle_strip 28 GeomEnums::GR_triangle_strip 1024 15 GR_triangle_fan 26 GeomEnums::GR_triangle_fan 2048 13 GR_line_strip 24 GeomEnums::GR_line_strip 4096 17 GR_composite_bits 28 GeomEnums::GR_composite_bits 7168 20 GR_flat_first_vertex 31 GeomEnums::GR_flat_first_vertex 8192 19 GR_flat_last_vertex 30 GeomEnums::GR_flat_last_vertex 16384 19 GR_shade_model_bits 30 GeomEnums::GR_shade_model_bits 24576 24 GR_texcoord_light_vector 35 GeomEnums::GR_texcoord_light_vector 32768 0 265
// This type specifies a number of bits that are used to represent
// the rendering requirements of a particular Geom, as well as the
// rendering capabilities of the GSG.  The difference between the
// two indicates whether the Geom needs to be munged for the GSG.

2836 10 ShadeModel 0 794624 21 GeomEnums::ShadeModel 21 GeomEnums::ShadeModel 2833 0 0 0 0 0 0 0 0 0 4 10 SM_uniform 21 GeomEnums::SM_uniform 0 9 SM_smooth 20 GeomEnums::SM_smooth 1 20 SM_flat_first_vertex 31 GeomEnums::SM_flat_first_vertex 2 19 SM_flat_last_vertex 30 GeomEnums::SM_flat_last_vertex 3 0 235
// The shade model specifies whether the per-vertex colors and
// normals indexed by a given primitive truly represent per-vertex
// colors and normals, or whether they actually represent
// per-triangle flat-shaded colors and normals.

2837 13 PrimitiveType 0 794624 24 GeomEnums::PrimitiveType 24 GeomEnums::PrimitiveType 2833 0 0 0 0 0 0 0 0 0 4 7 PT_none 18 GeomEnums::PT_none 0 11 PT_polygons 22 GeomEnums::PT_polygons 1 8 PT_lines 19 GeomEnums::PT_lines 2 9 PT_points 20 GeomEnums::PT_points 3 0 165
// The primitive type represents the core primitive type of a
// particular GeomPrimitive.  It's used for determining what kind of
// antialiasing should be enabled.

2838 11 NumericType 0 794624 22 GeomEnums::NumericType 22 GeomEnums::NumericType 2833 0 0 0 0 0 0 0 0 0 8 8 NT_uint8 19 GeomEnums::NT_uint8 0 9 NT_uint16 20 GeomEnums::NT_uint16 1 9 NT_uint32 20 GeomEnums::NT_uint32 2 14 NT_packed_dcba 25 GeomEnums::NT_packed_dcba 3 14 NT_packed_dabc 25 GeomEnums::NT_packed_dabc 4 10 NT_float32 21 GeomEnums::NT_float32 5 10 NT_float64 21 GeomEnums::NT_float64 6 11 NT_stdfloat 22 GeomEnums::NT_stdfloat 7 0 120
// The numeric type determines what physical representation is used
// to encode a numeric value within the vertex data.

2839 8 Contents 0 794624 19 GeomEnums::Contents 19 GeomEnums::Contents 2833 0 0 0 0 0 0 0 0 0 8 7 C_other 18 GeomEnums::C_other 0 7 C_point 18 GeomEnums::C_point 1 12 C_clip_point 23 GeomEnums::C_clip_point 2 8 C_vector 19 GeomEnums::C_vector 3 10 C_texcoord 21 GeomEnums::C_texcoord 4 7 C_color 18 GeomEnums::C_color 5 7 C_index 18 GeomEnums::C_index 6 13 C_morph_delta 24 GeomEnums::C_morph_delta 7 0 194
// The contents determine the semantic meaning of a numeric value
// within the vertex data.  This is also used to determine what
// automatic transforms might be applied to the various columns.

2840 13 AnimationType 0 794624 24 GeomEnums::AnimationType 24 GeomEnums::AnimationType 2833 0 0 0 0 0 0 0 0 0 3 7 AT_none 18 GeomEnums::AT_none 0 8 AT_panda 19 GeomEnums::AT_panda 1 11 AT_hardware 22 GeomEnums::AT_hardware 2 0 86
// The type of animation data that is represented by a particular
// GeomVertexFormat.

2841 23 GeomVertexAnimationSpec 0 141313 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 1 1534 1543 0 8 1535 1536 1537 1538 1539 1540 1541 1542 0 0 1 0 2833 0 0 0 0 881
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexAnimationSpec
// Description : This object describes how the vertex animation, if
//               any, represented in a GeomVertexData is encoded.
//
//               Vertex animation includes soft-skinned skeleton
//               animation and morphs (blend shapes), and might be
//               performed on the CPU by Panda, or passed down to the
//               graphics backed to be performed on the hardware
//               (depending on the hardware's advertised
//               capabilities).
//
//               Changing this setting doesn't by itself change the
//               way the animation is actually performed; this just
//               specifies how the vertices are set up to be animated.
////////////////////////////////////////////////////////////////////

2842 12 InternalName 0 75777 12 InternalName 12 InternalName 0 0 0 0 0 0 34 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 0 0 1 0 2843 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

2843 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2844 16 GeomVertexColumn 0 26625 16 GeomVertexColumn 16 GeomVertexColumn 0 0 0 1 1578 1580 0 14 1579 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 0 0 1 0 2833 0 0 0 0 441
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexColumn
// Description : This defines how a single column is interleaved
//               within a vertex array stored within a Geom.  The
//               GeomVertexArrayFormat class maintains a list of these
//               to completely define a particular array structure.
////////////////////////////////////////////////////////////////////

2845 21 GeomVertexArrayFormat 0 26625 21 GeomVertexArrayFormat 21 GeomVertexArrayFormat 0 0 0 1 1598 1600 0 23 1599 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1 3210 0 2 3 2843 1594 1595 3 2833 1596 1597 0 0 1094
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexArrayFormat
// Description : This describes the structure of a single array within
//               a Geom data.  See GeomVertexFormat for the parent
//               class which collects together all of the individual
//               GeomVertexArrayFormat objects.
//
//               A particular array may include any number of standard
//               or user-defined columns.  All columns consist of a
//               sequence of one or more numeric values, packed in any
//               of a variety of formats; the semantic meaning of each
//               column is defined in general with its contents
//               member, and in particular by its name.  The standard
//               array types used most often are named "vertex",
//               "normal", "texcoord", and "color"; other kinds of
//               data may be piggybacked into the data record simply
//               by choosing a unique name.
////////////////////////////////////////////////////////////////////

2846 16 GeomVertexFormat 0 26625 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 1 1627 1629 0 50 1628 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 8 3211 3212 3213 3214 3215 3216 3217 3218 0 2 3 2843 1623 1624 3 2833 1625 1626 0 0 1366
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexFormat
// Description : This class defines the physical layout of the vertex
//               data stored within a Geom.  The layout consists of a
//               list of named columns, each of which has a numeric
//               type and a size.
//
//               The columns are typically interleaved within a single
//               array, but they may also be distributed among
//               multiple different arrays; at the extreme, each
//               column may be alone within its own array (which
//               amounts to a parallel-array definition).
//
//               Thus, a GeomVertexFormat is really a list of
//               GeomVertexArrayFormats, each of which contains a list
//               of columns.  However, a particular column name should
//               not appear more than once in the format, even between
//               different arrays.
//
//               There are a handful of standard pre-defined
//               GeomVertexFormat objects, or you may define your own
//               as needed.  You may record any combination of
//               standard and/or user-defined columns in your custom
//               GeomVertexFormat constructions.
////////////////////////////////////////////////////////////////////

2847 9 SimpleLru 0 26625 9 SimpleLru 9 SimpleLru 0 0 0 1 1683 1684 0 10 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 0 0 2 3 2848 1679 1680 3 2829 1681 1682 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : SimpleLru
// Description : An implementation of a very simple LRU algorithm.
//               Also see AdaptiveLru.
////////////////////////////////////////////////////////////////////

2848 14 LinkedListNode 0 2049 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

2849 13 SimpleLruPage 0 26625 13 SimpleLruPage 13 SimpleLruPage 0 0 0 1 1697 1699 0 10 1698 1700 1701 1702 1703 1704 1705 1706 1707 1708 0 0 1 3 2848 1695 1696 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : SimpleLruPage
// Description : One atomic piece that may be managed by a SimpleLru
//               chain.  To use this class, inherit from it and
//               override evict_lru().
////////////////////////////////////////////////////////////////////

2850 15 SimpleAllocator 0 26625 15 SimpleAllocator 15 SimpleAllocator 0 0 0 1 1711 1712 0 9 1713 1714 1715 1716 1717 1718 1719 1720 1721 0 0 1 3 2848 1709 1710 0 0 465
////////////////////////////////////////////////////////////////////
//       Class : SimpleAllocator
// Description : An implementation of a very simple block allocator.
//               This class can allocate ranges of nonnegative
//               integers within a specified upper limit; it uses a
//               simple first-fit algorithm to find the next available
//               space.
////////////////////////////////////////////////////////////////////

2851 20 SimpleAllocatorBlock 0 26625 20 SimpleAllocatorBlock 20 SimpleAllocatorBlock 0 0 0 0 1722 0 9 1723 1724 1725 1726 1727 1728 1729 1730 1731 0 0 1 0 2848 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : SimpleAllocatorBlock
// Description : A single block as returned from
//               SimpleAllocator::alloc().
////////////////////////////////////////////////////////////////////

2852 18 VertexDataSaveFile 0 75777 18 VertexDataSaveFile 18 VertexDataSaveFile 0 0 0 0 1712 0 3 1732 1733 1734 0 0 1 0 2850 0 0 0 0 399
////////////////////////////////////////////////////////////////////
//       Class : VertexDataSaveFile
// Description : A temporary file to hold the vertex data that has
//               been evicted from memory and written to disk.  All
//               vertex data arrays are written into one large flat
//               file.
////////////////////////////////////////////////////////////////////

2853 14 VertexDataPage 0 43009 14 VertexDataPage 14 VertexDataPage 0 0 0 0 0 0 18 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 0 0 2 3 2850 1735 1736 3 2849 1737 1738 0 1 2854 410
////////////////////////////////////////////////////////////////////
//       Class : VertexDataPage
// Description : A block of bytes that holds one or more
//               VertexDataBlocks.  The entire page may be paged out,
//               in the form of in-memory compression or to an on-disk
//               cache file, if necessary.
////////////////////////////////////////////////////////////////////

2854 8 RamClass 0 794624 24 VertexDataPage::RamClass 24 VertexDataPage::RamClass 2853 0 0 0 0 0 0 0 0 0 4 11 RC_resident 27 VertexDataPage::RC_resident 0 13 RC_compressed 29 VertexDataPage::RC_compressed 1 7 RC_disk 23 VertexDataPage::RC_disk 2 14 RC_end_of_list 30 VertexDataPage::RC_end_of_list 3 0 159
// These are used to indicate the current residency state of the
// page, which may or may not have been temporarily evicted to
// satisfy memory requirements.

2855 14 VertexDataBook 0 26625 14 VertexDataBook 14 VertexDataBook 0 0 0 1 1757 1758 0 5 1759 1760 1761 1762 1763 0 0 0 0 0 295
////////////////////////////////////////////////////////////////////
//       Class : VertexDataBook
// Description : A collection of VertexDataPages, which can be used to
//               allocate new VertexDataBlock objects.
////////////////////////////////////////////////////////////////////

2856 15 VertexDataBlock 0 141313 15 VertexDataBlock 15 VertexDataBlock 0 0 0 0 1770 0 2 1768 1769 0 0 2 3 2851 1764 1765 3 2857 1766 1767 0 0 304
////////////////////////////////////////////////////////////////////
//       Class : VertexDataBlock
// Description : A block of bytes that stores the actual raw vertex
//               data referenced by a GeomVertexArrayData object.
////////////////////////////////////////////////////////////////////

2857 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

2858 17 ShaderUtilization 0 532481 17 ShaderUtilization 17 ShaderUtilization 0 0 0 0 0 0 0 0 0 0 4 8 SUT_none 8 SUT_none 0 9 SUT_basic 9 SUT_basic 1 12 SUT_advanced 12 SUT_advanced 2 15 SUT_unspecified 15 SUT_unspecified 3 0 0

2859 19 GeomVertexArrayData 0 26625 19 GeomVertexArrayData 19 GeomVertexArrayData 0 0 0 1 1777 1779 0 31 1778 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 0 0 3 3 2860 1771 1772 3 2849 1773 1774 3 2833 1775 1776 0 0 1052
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexArrayData
// Description : This is the data for one array of a GeomVertexData
//               structure.  Many GeomVertexData structures will only
//               define one array, with all data elements interleaved
//               (DirectX 8.0 and before insisted on this format);
//               some will define multiple arrays.  
//
//               DirectX calls this concept of one array a "stream".
//               It also closely correlates with the concept of a
//               vertex buffer.
//
//               This object is just a block of data.  In general, you
//               should not be directly messing with this object from
//               application code.  See GeomVertexData for the
//               organizing structure, and see
//               GeomVertexReader/Writer/Rewriter for high-level tools
//               to manipulate the actual vertex data.
////////////////////////////////////////////////////////////////////

2860 17 CopyOnWriteObject 0 2049 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 0 0 0 0 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

2861 25 GeomVertexArrayDataHandle 0 26625 25 GeomVertexArrayDataHandle 25 GeomVertexArrayDataHandle 0 0 0 0 1814 0 19 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 0 0 2 3 2857 1810 1811 3 2833 1812 1813 0 0 840
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexArrayDataHandle
// Description : This data object is returned by
//               GeomVertexArrayData::get_handle() or modify_handle().
//               As long as it exists, the data is locked; when the
//               last of these destructs, the data is unlocked.
//
//               Only one thread at a time may lock the data; other
//               threads attempting to lock the data will block.  A
//               given thread may simultaneously lock the data
//               multiple times.
//
//               This class serves in lieu of a pair of
//               GeomVertexArrayDataPipelineReader and
//               GeomVertexArrayDataPipelineWriter classes
////////////////////////////////////////////////////////////////////

2862 16 GeomCacheManager 0 43009 16 GeomCacheManager 16 GeomCacheManager 0 0 0 0 0 0 5 1834 1835 1836 1837 1838 0 0 0 0 0 998
////////////////////////////////////////////////////////////////////
//       Class : GeomCacheManager
// Description : This is used to keep track of, and limit the size of,
//               the cache of munged vertices, which would otherwise
//               be distributed through all of the GeomVertexData
//               objects in the system.
//
//               The actual data in the cache is not stored here, but
//               rather it is distributed among the various
//               GeomVertexData source objects.  This allows the cache
//               data to propagate through the multiprocess pipeline.
//
//               This structure actually caches any of a number of
//               different types of pointers, and mixes them all up in
//               the same LRU cache list.  Some of them (such as
//               GeomMunger) are reference-counted here in the cache;
//               most are not.
////////////////////////////////////////////////////////////////////

2863 15 VertexTransform 0 75777 15 VertexTransform 15 VertexTransform 0 0 0 0 0 0 9 1839 1840 1841 1842 1843 1844 1845 1846 1847 0 0 1 0 2843 0 0 0 0 558
////////////////////////////////////////////////////////////////////
//       Class : VertexTransform
// Description : This is an abstract base class that holds a pointer
//               to some transform, computed in some arbitrary way,
//               that is to be applied to vertices during rendering.
//               This is used to implement soft-skinned and animated
//               vertices.  Derived classes will define how the
//               transform is actually computed.
////////////////////////////////////////////////////////////////////

2864 14 TransformTable 0 75777 14 TransformTable 14 TransformTable 0 0 0 1 1848 0 0 11 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1 3219 0 1 0 2843 0 0 0 0 593
////////////////////////////////////////////////////////////////////
//       Class : TransformTable
// Description : Stores the total set of VertexTransforms that the
//               vertices in a particular GeomVertexData object might
//               depend on.
//
//               This structure is used for a GeomVertexData set up to
//               compute its dynamic vertices on the graphics card.
//               See TransformBlendTable for one set up to compute
//               its dynamic vertices on the CPU.
////////////////////////////////////////////////////////////////////

2865 14 TransformBlend 0 26625 14 TransformBlend 14 TransformBlend 0 0 0 1 1860 1862 0 23 1861 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1 3220 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : TransformBlend
// Description : This defines a single entry in a
//               TransformBlendTable.  It represents a unique
//               combination of VertexTransform pointers and blend
//               amounts.
////////////////////////////////////////////////////////////////////

2866 19 TransformBlendTable 0 75777 19 TransformBlendTable 19 TransformBlendTable 0 0 0 1 1885 0 0 14 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1 3221 0 1 0 2860 0 0 0 0 867
////////////////////////////////////////////////////////////////////
//       Class : TransformBlendTable
// Description : This structure collects together the different
//               combinations of transforms and blend amounts used by
//               a GeomVertexData, to facilitate computing dynamic
//               vertices on the CPU at runtime.  Each vertex has a
//               pointer to exactly one of the entries in this table,
//               and each entry defines a number of transform/blend
//               combinations.
//
//               This structure is used for a GeomVertexData set up to
//               compute its dynamic vertices on the CPU.  See
//               TransformTable for one set up to compute its
//               dynamic vertices on the graphics card.
////////////////////////////////////////////////////////////////////

2867 12 VertexSlider 0 75777 12 VertexSlider 12 VertexSlider 0 0 0 0 0 0 6 1900 1901 1902 1903 1904 1905 0 0 1 0 2843 0 0 0 0 607
////////////////////////////////////////////////////////////////////
//       Class : VertexSlider
// Description : This is an abstract base class that retains some
//               slider value, which is a linear value that typically
//               ranges from 0.0 to 1.0, and is used to control the
//               animation of morphs (blend shapes).
//
//               It is similar to VertexTransform, which keeps a full
//               4x4 transform matrix, but the VertexSlider only keeps
//               a single float value.
////////////////////////////////////////////////////////////////////

2868 11 SliderTable 0 75777 11 SliderTable 11 SliderTable 0 0 0 1 1906 0 0 16 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1 3222 0 1 0 2843 0 0 0 0 696
////////////////////////////////////////////////////////////////////
//       Class : SliderTable
// Description : Stores the total set of VertexSliders that the
//               vertices in a particular GeomVertexData object might
//               depend on.
//
//               This is similar to a TransformTable, but it stores
//               VertexSliders instead of VertexTransforms, and it
//               stores them by name instead of by index number.
//               Also, it is only used when animating vertices on the
//               CPU, since GPU's don't support morphs at this point
//               in time.
////////////////////////////////////////////////////////////////////

2869 14 GeomVertexData 0 26625 14 GeomVertexData 14 GeomVertexData 0 0 0 1 1927 1929 0 50 1928 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1 3223 0 2 3 2860 1923 1924 3 2833 1925 1926 0 0 1574
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexData
// Description : This defines the actual numeric vertex data stored in
//               a Geom, in the structure defined by a particular
//               GeomVertexFormat object.
//
//               The data consists of one or more arrays, each of
//               which in turn consists of a series of rows, one per
//               vertex.  All arrays should have the same number of
//               rows; each vertex is defined by the column data from
//               a particular row across all arrays.
//
//               Often, there will be only one array per Geom, and the
//               various columns defined in the GeomVertexFormat will
//               be interleaved within that array.  However, it is
//               also possible to have multiple different arrays, with
//               a certain subset of the total columns defined in each
//               array.
//
//               However the data is distributed, the effect is of a
//               single table of vertices, where each vertex is
//               represented by one row of the table.
//
//               In general, application code should not attempt to
//               directly manipulate the vertex data through this
//               structure; instead, use the GeomVertexReader,
//               GeomVertexWriter, and GeomVertexRewriter objects to
//               read and write vertex data at a high level.
////////////////////////////////////////////////////////////////////

2870 22 AnimateVerticesRequest 0 141313 22 AnimateVerticesRequest 22 AnimateVerticesRequest 0 0 0 1 1979 1982 0 2 1980 1981 0 0 1 0 2871 0 0 0 0 937
////////////////////////////////////////////////////////////////////
//       Class : AnimateVerticesRequest
// Description : This class object manages a single asynchronous
//               request to animate vertices on a GeomVertexData
//               object.  animate_vertices will be called with
//               force=true (i.e. blocking) in a sub-thread (if
//               threading is available).  No result is stored or
//               returned from this object.  It is expected that the
//               result will be cached and available for immediate
//               use later during rendering.  Thus it is important
//               that the main thread block while these requests
//               are being run (presumably on multiple CPUs/cores),
//               to ensure that the data has been computed by the
//               time it's needed.
////////////////////////////////////////////////////////////////////

2871 9 AsyncTask 0 2049 9 AsyncTask 9 AsyncTask 0 0 0 0 0 0 0 0 0 0 0 0 434
////////////////////////////////////////////////////////////////////
//       Class : AsyncTask
// Description : This class represents a concrete task performed by an
//               AsyncManager.  Normally, you would subclass from this
//               class, and override do_task(), to define the
//               functionality you wish to have the task perform.
////////////////////////////////////////////////////////////////////

2872 12 SavedContext 0 141313 12 SavedContext 12 SavedContext 0 0 0 0 1984 0 1 1983 0 0 1 0 2873 0 0 0 0 395
////////////////////////////////////////////////////////////////////
//       Class : SavedContext
// Description : This is the base class for all GSG-specific context
//               objects, such as TextureContext and GeomContext.  It
//               exists mainly to provide some structural
//               organization.
////////////////////////////////////////////////////////////////////

2873 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

2874 13 BufferContext 0 26625 13 BufferContext 13 BufferContext 0 0 0 0 1987 0 5 1988 1989 1990 1991 1992 0 0 1 3 2872 1985 1986 0 0 752
////////////////////////////////////////////////////////////////////
//       Class : BufferContext
// Description : This is a base class for those kinds of SavedContexts
//               that occupy an easily-measured (and substantial)
//               number of bytes in the video card's frame buffer
//               memory or AGP memory.  At the present, this includes
//               most of the SavedContext types: VertexBufferContext
//               and IndexBufferContext, as well as TextureContext.
//
//               This class provides methods for tracking the video
//               memory utilization, as well as residency of each
//               object, via PStats.
////////////////////////////////////////////////////////////////////

2875 13 GeomPrimitive 0 26625 13 GeomPrimitive 13 GeomPrimitive 0 0 0 0 1998 0 68 1997 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 1 3224 0 2 3 2860 1993 1994 3 2833 1995 1996 0 0 1203
////////////////////////////////////////////////////////////////////
//       Class : GeomPrimitive
// Description : This is an abstract base class for a family of
//               classes that represent the fundamental geometry
//               primitives that may be stored in a Geom.
//
//               They all have in common the fact that they are
//               defined by tables of vertex data stored in a
//               GeomVertexData object.  Each GeomPrimitive object
//               contains an ordered list of integers, which index
//               into the vertex array defined by the GeomVertexData
//               and define the particular vertices of the
//               GeomVertexData that are used for this primitive.
//
//               The meaning of a given arrangement of vertices is
//               defined by each individual primitive type; for
//               instance, a GeomTriangle renders a triangle from each
//               three consecutive vertices, while a GeomTriangleStrip
//               renders a strip of (n - 2) connected triangles from
//               each sequence of n vertices.
////////////////////////////////////////////////////////////////////

2876 12 TextureStage 0 75777 12 TextureStage 12 TextureStage 0 0 0 1 2066 0 0 52 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 0 0 1 0 2843 0 0 0 4 2877 2878 2879 2880 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

2877 4 Mode 0 794624 18 TextureStage::Mode 18 TextureStage::Mode 2876 0 0 0 0 0 0 0 0 0 16 10 M_modulate 24 TextureStage::M_modulate 0 7 M_decal 21 TextureStage::M_decal 1 7 M_blend 21 TextureStage::M_blend 2 9 M_replace 23 TextureStage::M_replace 3 5 M_add 19 TextureStage::M_add 4 9 M_combine 23 TextureStage::M_combine 5 19 M_blend_color_scale 33 TextureStage::M_blend_color_scale 6 15 M_modulate_glow 29 TextureStage::M_modulate_glow 7 16 M_modulate_gloss 30 TextureStage::M_modulate_gloss 8 8 M_normal 22 TextureStage::M_normal 9 15 M_normal_height 29 TextureStage::M_normal_height 10 6 M_glow 20 TextureStage::M_glow 11 7 M_gloss 21 TextureStage::M_gloss 12 8 M_height 22 TextureStage::M_height 13 10 M_selector 24 TextureStage::M_selector 14 14 M_normal_gloss 28 TextureStage::M_normal_gloss 15 0 0

2878 11 CombineMode 0 794624 25 TextureStage::CombineMode 25 TextureStage::CombineMode 2876 0 0 0 0 0 0 0 0 0 9 12 CM_undefined 26 TextureStage::CM_undefined 0 10 CM_replace 24 TextureStage::CM_replace 1 11 CM_modulate 25 TextureStage::CM_modulate 2 6 CM_add 20 TextureStage::CM_add 3 13 CM_add_signed 27 TextureStage::CM_add_signed 4 14 CM_interpolate 28 TextureStage::CM_interpolate 5 11 CM_subtract 25 TextureStage::CM_subtract 6 11 CM_dot3_rgb 25 TextureStage::CM_dot3_rgb 7 12 CM_dot3_rgba 26 TextureStage::CM_dot3_rgba 8 0 0

2879 13 CombineSource 0 794624 27 TextureStage::CombineSource 27 TextureStage::CombineSource 2876 0 0 0 0 0 0 0 0 0 7 12 CS_undefined 26 TextureStage::CS_undefined 0 10 CS_texture 24 TextureStage::CS_texture 1 11 CS_constant 25 TextureStage::CS_constant 2 16 CS_primary_color 30 TextureStage::CS_primary_color 3 11 CS_previous 25 TextureStage::CS_previous 4 23 CS_constant_color_scale 37 TextureStage::CS_constant_color_scale 5 20 CS_last_saved_result 34 TextureStage::CS_last_saved_result 6 0 0

2880 14 CombineOperand 0 794624 28 TextureStage::CombineOperand 28 TextureStage::CombineOperand 2876 0 0 0 0 0 0 0 0 0 5 12 CO_undefined 26 TextureStage::CO_undefined 0 12 CO_src_color 26 TextureStage::CO_src_color 1 22 CO_one_minus_src_color 36 TextureStage::CO_one_minus_src_color 2 12 CO_src_alpha 26 TextureStage::CO_src_alpha 3 22 CO_one_minus_src_alpha 36 TextureStage::CO_one_minus_src_alpha 4 0 0

2881 4 Geom 0 26625 4 Geom 4 Geom 0 0 0 1 2123 2125 0 58 2124 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 1 3225 0 2 3 2860 2119 2120 3 2833 2121 2122 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

2882 11 GeomContext 0 141313 11 GeomContext 11 GeomContext 0 0 0 0 2185 0 2 2183 2184 0 0 1 0 2872 0 0 0 0 856
////////////////////////////////////////////////////////////////////
//       Class : GeomContext
// Description : This is a special class object that holds all the
//               information returned by a particular GSG to indicate
//               the geom's internal context identifier.
//
//               Geoms typically have an immediate-mode and a
//               retained-mode operation.  When using geoms in
//               retained-mode (in response to Geom::prepare()),
//               the GSG will create some internal handle for the
//               geom and store it here.  The geom stores all of
//               these handles internally.
//
//               In the case of OpenGL, for example, a GeomContext
//               corresponds to a display list identifier.
////////////////////////////////////////////////////////////////////

2883 9 GeomLines 0 75777 9 GeomLines 9 GeomLines 0 0 0 1 2186 1998 0 1 2187 0 0 1 0 2875 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : GeomLines
// Description : Defines a series of disconnected line segments.
////////////////////////////////////////////////////////////////////

2884 14 GeomLinestrips 0 75777 14 GeomLinestrips 14 GeomLinestrips 0 0 0 1 2188 1998 0 1 2189 0 0 1 0 2875 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : GeomLinestrips
// Description : Defines a series of line strips.
////////////////////////////////////////////////////////////////////

2885 10 GeomPoints 0 75777 10 GeomPoints 10 GeomPoints 0 0 0 1 2190 1998 0 1 2191 0 0 1 0 2875 0 0 0 0 223
////////////////////////////////////////////////////////////////////
//       Class : GeomPoints
// Description : Defines a series of disconnected points.
////////////////////////////////////////////////////////////////////

2886 13 GeomTriangles 0 75777 13 GeomTriangles 13 GeomTriangles 0 0 0 1 2192 1998 0 1 2193 0 0 1 0 2875 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : GeomTriangles
// Description : Defines a series of disconnected triangles.
////////////////////////////////////////////////////////////////////

2887 11 GeomTrifans 0 75777 11 GeomTrifans 11 GeomTrifans 0 0 0 1 2194 1998 0 1 2195 0 0 1 0 2875 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : GeomTrifans
// Description : Defines a series of triangle fans.
////////////////////////////////////////////////////////////////////

2888 13 GeomTristrips 0 75777 13 GeomTristrips 13 GeomTristrips 0 0 0 1 2196 1998 0 1 2197 0 0 1 0 2875 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : GeomTristrips
// Description : Defines a series of triangle strips.
////////////////////////////////////////////////////////////////////

2889 16 GeomVertexReader 0 26625 16 GeomVertexReader 16 GeomVertexReader 0 0 0 1 2198 2200 0 35 2199 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 0 0 1 0 2833 0 0 0 0 1792
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexReader
// Description : This object provides a high-level interface for
//               quickly reading a sequence of numeric values from a
//               vertex table. 
//
//               It is particularly optimized for reading a single
//               column of data values for a series of vertices,
//               without changing columns between each number.
//               Although you can also use one GeomVertexReader to
//               read across the columns if it is convenient, by
//               calling set_column() repeatedly at each vertex, it is
//               faster to read down the columns, and to use a
//               different GeomVertexReader for each column.
//
//               Note that a GeomVertexReader does not keep a
//               reference count to the actual vertex data buffer (it
//               grabs the current data buffer from the GeomVertexData
//               whenever set_column() is called).  This means that it
//               is important not to keep a GeomVertexReader object
//               around over a long period of time in which the data
//               buffer is likely to be deallocated; it is intended
//               for making a quick pass over the data in one session.
//
//               It also means that you should create any
//               GeomVertexWriters *before* creating GeomVertexReaders
//               on the same data, since the writer itself might cause
//               the vertex buffer to be deallocated.  Better yet, use
//               a GeomVertexRewriter if you are going to create both
//               of them anyway.
////////////////////////////////////////////////////////////////////

2890 16 GeomVertexWriter 0 26625 16 GeomVertexWriter 16 GeomVertexWriter 0 0 0 1 2235 2237 0 50 2236 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 0 0 1 0 2833 0 0 0 0 2541
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexWriter
// Description : This object provides a high-level interface for
//               quickly writing a sequence of numeric values from a
//               vertex table. 
//
//               This object can be used both to replace existing
//               vertices in the table, or to extend the table with
//               new vertices.  The set_data*() family of methods can
//               only be used to replace existing data; it is an error
//               to allow these to run past the end of the data.  The
//               add_data*() family of methods, on the other hand, can
//               be used to replace existing data or add new data; if
//               you call set_row() into the middle of existing
//               data the add_data*() methods will behave like the
//               corresponding set_data*(), but if they run past the
//               end of existing data they will quietly add new
//               vertices.
//
//               Like GeomVertexReader, the writer is particularly
//               optimized for writing a single column of data values
//               for a series of vertices, without changing columns
//               between each number.  Although you can also use one
//               GeomVertexWriter to write across the columns if it is
//               convenient, by calling set_column() repeatedly at
//               each vertex, it is faster to write down the columns,
//               and to use a different GeomVertexWriter for each
//               column.
//
//               Note that, like a GeomVertexReader, a
//               GeomVertexWriter does not keep a reference count to
//               the actual vertex data buffer.  This means that it is
//               important not to keep a GeomVertexWriter object
//               around over a long period of time in which the data
//               buffer is likely to be deallocated; it is intended
//               for making a quick pass over the data in one session.
//
//               It also means that you should create any
//               GeomVertexWriters *before* creating GeomVertexReaders
//               on the same data, since the writer itself might cause
//               the vertex buffer to be deallocated.  Better yet, use
//               a GeomVertexRewriter if you are going to create both
//               of them anyway.
////////////////////////////////////////////////////////////////////

2891 18 GeomVertexRewriter 0 26625 18 GeomVertexRewriter 18 GeomVertexRewriter 0 0 0 1 2291 2293 0 16 2292 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 0 0 2 3 2890 2287 2288 3 2889 2289 2290 0 0 988
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexRewriter
// Description : This object provides the functionality of both a
//               GeomVertexReader and a GeomVertexWriter, combined
//               together into one convenient package.  It is designed
//               for making a single pass over a GeomVertexData
//               object, modifying rows as it goes.
//
//               Although it doesn't provide any real performance
//               benefit over using a separate reader and writer on
//               the same data, it should probably be used in
//               preference to a separate reader and writer, because
//               it makes an effort to manage the reference counts
//               properly between the reader and the writer to avoid
//               accidentally dereferencing either array while
//               recopying.
////////////////////////////////////////////////////////////////////

2892 7 Texture 0 26625 7 Texture 7 Texture 0 0 0 1 2313 2314 0 196 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 0 0 2 3 2843 2309 2310 3 2829 2311 2312 0 7 2893 2894 2895 2896 2897 2898 2899 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

2893 11 TextureType 0 794624 20 Texture::TextureType 20 Texture::TextureType 2892 0 0 0 0 0 0 0 0 0 5 13 TT_1d_texture 22 Texture::TT_1d_texture 0 13 TT_2d_texture 22 Texture::TT_2d_texture 1 13 TT_3d_texture 22 Texture::TT_3d_texture 2 19 TT_2d_texture_array 28 Texture::TT_2d_texture_array 3 11 TT_cube_map 20 Texture::TT_cube_map 4 0 0

2894 13 ComponentType 0 794624 22 Texture::ComponentType 22 Texture::ComponentType 2892 0 0 0 0 0 0 0 0 0 4 15 T_unsigned_byte 24 Texture::T_unsigned_byte 0 16 T_unsigned_short 25 Texture::T_unsigned_short 1 7 T_float 16 Texture::T_float 2 19 T_unsigned_int_24_8 28 Texture::T_unsigned_int_24_8 3 0 0

2895 6 Format 0 794624 15 Texture::Format 15 Texture::Format 2892 0 0 0 0 0 0 0 0 0 26 15 F_depth_stencil 24 Texture::F_depth_stencil 1 13 F_color_index 22 Texture::F_color_index 2 5 F_red 14 Texture::F_red 3 7 F_green 16 Texture::F_green 4 6 F_blue 15 Texture::F_blue 5 7 F_alpha 16 Texture::F_alpha 6 5 F_rgb 14 Texture::F_rgb 7 6 F_rgb5 15 Texture::F_rgb5 8 6 F_rgb8 15 Texture::F_rgb8 9 7 F_rgb12 16 Texture::F_rgb12 10 8 F_rgb332 17 Texture::F_rgb332 11 6 F_rgba 15 Texture::F_rgba 12 6 F_rgbm 15 Texture::F_rgbm 13 7 F_rgba4 16 Texture::F_rgba4 14 7 F_rgba5 16 Texture::F_rgba5 15 7 F_rgba8 16 Texture::F_rgba8 16 8 F_rgba12 17 Texture::F_rgba12 17 11 F_luminance 20 Texture::F_luminance 18 17 F_luminance_alpha 26 Texture::F_luminance_alpha 19 21 F_luminance_alphamask 30 Texture::F_luminance_alphamask 20 8 F_rgba16 17 Texture::F_rgba16 21 8 F_rgba32 17 Texture::F_rgba32 22 17 F_depth_component 26 Texture::F_depth_component 23 19 F_depth_component16 28 Texture::F_depth_component16 24 19 F_depth_component24 28 Texture::F_depth_component24 25 19 F_depth_component32 28 Texture::F_depth_component32 26 0 0

2896 10 FilterType 0 794624 19 Texture::FilterType 19 Texture::FilterType 2892 0 0 0 0 0 0 0 0 0 9 10 FT_nearest 19 Texture::FT_nearest 0 9 FT_linear 18 Texture::FT_linear 1 25 FT_nearest_mipmap_nearest 34 Texture::FT_nearest_mipmap_nearest 2 24 FT_linear_mipmap_nearest 33 Texture::FT_linear_mipmap_nearest 3 24 FT_nearest_mipmap_linear 33 Texture::FT_nearest_mipmap_linear 4 23 FT_linear_mipmap_linear 32 Texture::FT_linear_mipmap_linear 5 9 FT_shadow 18 Texture::FT_shadow 6 10 FT_default 19 Texture::FT_default 7 10 FT_invalid 19 Texture::FT_invalid 8 0 0

2897 8 WrapMode 0 794624 17 Texture::WrapMode 17 Texture::WrapMode 2892 0 0 0 0 0 0 0 0 0 6 8 WM_clamp 17 Texture::WM_clamp 0 9 WM_repeat 18 Texture::WM_repeat 1 9 WM_mirror 18 Texture::WM_mirror 2 14 WM_mirror_once 23 Texture::WM_mirror_once 3 15 WM_border_color 24 Texture::WM_border_color 4 10 WM_invalid 19 Texture::WM_invalid 5 0 0

2898 15 CompressionMode 0 794624 24 Texture::CompressionMode 24 Texture::CompressionMode 2892 0 0 0 0 0 0 0 0 0 11 10 CM_default 19 Texture::CM_default 0 6 CM_off 15 Texture::CM_off 1 5 CM_on 14 Texture::CM_on 2 7 CM_fxt1 16 Texture::CM_fxt1 3 7 CM_dxt1 16 Texture::CM_dxt1 4 7 CM_dxt2 16 Texture::CM_dxt2 5 7 CM_dxt3 16 Texture::CM_dxt3 6 7 CM_dxt4 16 Texture::CM_dxt4 7 7 CM_dxt5 16 Texture::CM_dxt5 8 12 CM_pvr1_2bpp 21 Texture::CM_pvr1_2bpp 9 12 CM_pvr1_4bpp 21 Texture::CM_pvr1_4bpp 10 0 0

2899 12 QualityLevel 0 794624 21 Texture::QualityLevel 21 Texture::QualityLevel 2892 0 0 0 0 0 0 0 0 0 4 10 QL_default 19 Texture::QL_default 0 10 QL_fastest 19 Texture::QL_fastest 1 9 QL_normal 18 Texture::QL_normal 2 7 QL_best 16 Texture::QL_best 3 0 0

2900 6 Shader 0 75777 6 Shader 6 Shader 0 0 0 0 0 0 15 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 0 0 1 0 2901 0 0 0 4 2902 2903 2904 2905 421
////////////////////////////////////////////////////////////////////
//       Class : Shader
//      Summary: The Shader class is meant to select the Shader Language,
//               select the available profile, compile the shader, and 
//               finally compile and store the shader parameters  
//               in the appropriate structure.
////////////////////////////////////////////////////////////////////

2901 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2902 14 ShaderLanguage 0 794624 22 Shader::ShaderLanguage 22 Shader::ShaderLanguage 2900 0 0 0 0 0 0 0 0 0 3 7 SL_none 15 Shader::SL_none 0 5 SL_Cg 13 Shader::SL_Cg 1 7 SL_GLSL 15 Shader::SL_GLSL 2 0 0

2903 10 ShaderType 0 794624 18 Shader::ShaderType 18 Shader::ShaderType 2900 0 0 0 0 0 0 0 0 0 4 7 ST_none 15 Shader::ST_none 0 9 ST_vertex 17 Shader::ST_vertex 1 11 ST_fragment 19 Shader::ST_fragment 2 11 ST_geometry 19 Shader::ST_geometry 3 0 0

2904 16 AutoShaderSwitch 0 794624 24 Shader::AutoShaderSwitch 24 Shader::AutoShaderSwitch 2900 0 0 0 0 0 0 0 0 0 5 9 AS_normal 17 Shader::AS_normal 1 7 AS_glow 15 Shader::AS_glow 2 8 AS_gloss 16 Shader::AS_gloss 4 7 AS_ramp 15 Shader::AS_ramp 8 9 AS_shadow 17 Shader::AS_shadow 16 0 0

2905 13 AutoShaderBit 0 794624 21 Shader::AutoShaderBit 21 Shader::AutoShaderBit 2900 0 0 0 0 0 0 0 0 0 5 20 bit_AutoShaderNormal 28 Shader::bit_AutoShaderNormal 0 18 bit_AutoShaderGlow 26 Shader::bit_AutoShaderGlow 1 19 bit_AutoShaderGloss 27 Shader::bit_AutoShaderGloss 2 18 bit_AutoShaderRamp 26 Shader::bit_AutoShaderRamp 3 20 bit_AutoShaderShadow 28 Shader::bit_AutoShaderShadow 4 0 0

2906 23 PreparedGraphicsObjects 0 75777 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 53 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 0 0 1 0 2857 0 0 0 0 1037
////////////////////////////////////////////////////////////////////
//       Class : PreparedGraphicsObjects
// Description : A table of objects that are saved within the graphics
//               context for reference by handle later.  Generally,
//               this represents things like OpenGL texture objects or
//               display lists (or their equivalent on other
//               platforms).
//
//               This object simply records the pointers to the
//               context objects created by the individual GSG's;
//               these context objects will contain enough information
//               to reference or release the actual object stored
//               within the graphics context.
//
//               These tables may potentially be shared between
//               related graphics contexts, hence their storage here
//               in a separate object rather than as a part of the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////

2907 18 IndexBufferContext 0 141313 18 IndexBufferContext 18 IndexBufferContext 0 0 0 0 2588 0 5 2583 2584 2585 2586 2587 0 0 2 3 2874 2579 2580 3 2830 2581 2582 0 0 634
////////////////////////////////////////////////////////////////////
//       Class : IndexBufferContext
// Description : This is a special class object that holds all the
//               information returned by a particular GSG to indicate
//               the vertex data array's internal context identifier.
//
//               This allows the GSG to cache the vertex data array in
//               whatever way makes sense.  For instance, DirectX can
//               allocate a vertex buffer for the array.  OpenGL can
//               create a buffer object.
////////////////////////////////////////////////////////////////////

2908 4 Lens 0 141313 4 Lens 4 Lens 0 0 0 0 2652 0 63 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 0 0 1 0 2843 0 0 0 2 2909 2910 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

2909 13 StereoChannel 0 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 2908 0 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0 7 SC_left 13 Lens::SC_left 1 8 SC_right 14 Lens::SC_right 2 9 SC_stereo 15 Lens::SC_stereo 3 0 0

2910 11 FromCorners 0 794624 17 Lens::FromCorners 17 Lens::FromCorners 2908 0 0 0 0 0 0 0 0 0 6 7 FC_roll 13 Lens::FC_roll 1 15 FC_camera_plane 21 Lens::FC_camera_plane 2 11 FC_off_axis 17 Lens::FC_off_axis 4 15 FC_aspect_ratio 21 Lens::FC_aspect_ratio 8 8 FC_shear 14 Lens::FC_shear 16 11 FC_keystone 17 Lens::FC_keystone 32 0 183
// These flags are passed in as the last parameter to control the
// behavior of set_frustum_from_corners().  See the documentation
// for that method for an explanation of each flag.

2911 8 Material 0 26625 8 Material 8 Material 0 0 0 1 2657 2659 0 33 2658 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 0 0 2 3 2843 2653 2654 3 2829 2655 2656 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : Material
// Description : Defines the way an object appears in the presence of
//               lighting.  A material is only necessary if lighting
//               is to be enabled; otherwise, the material isn't used.
////////////////////////////////////////////////////////////////////

2912 12 MaterialPool 0 141313 12 MaterialPool 12 MaterialPool 0 0 0 0 2698 0 6 2692 2693 2694 2695 2696 2697 0 0 0 0 0 1029
////////////////////////////////////////////////////////////////////
//       Class : MaterialPool
// Description : The MaterialPool (there is only one in the universe)
//               serves to unify different pointers to the same
//               Material, so we do not (a) waste memory with many
//               different Material objects that are all equivalent,
//               and (b) waste time switching the graphics engine
//               between different Material states that are really the
//               same thing.
//
//               The idea is to create a temporary Material
//               representing the lighting state you want to apply,
//               then call get_material(), passing in your temporary
//               Material.  The return value will either be a new
//               Material object, or it may be the the same object you
//               supplied; in either case, it will have the same
//               value.
////////////////////////////////////////////////////////////////////

2913 10 MatrixLens 0 141313 10 MatrixLens 10 MatrixLens 0 0 0 1 2699 2711 0 11 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 0 0 1 0 2908 0 0 0 0 504
////////////////////////////////////////////////////////////////////
//       Class : MatrixLens
// Description : A completely generic linear lens.  This is provided
//               for the benefit of low-level code that wants to
//               specify a perspective or orthographic frustum via an
//               explicit projection matrix, but not mess around with
//               fov's or focal lengths or any of that nonsense.
////////////////////////////////////////////////////////////////////

2914 16 OrthographicLens 0 141313 16 OrthographicLens 16 OrthographicLens 0 0 0 1 2712 2714 0 1 2713 0 0 1 0 2908 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : OrthographicLens
// Description : An orthographic lens.  Although this kind of lens is
//               linear, like a PerspectiveLens, it doesn't respect
//               field-of-view or focal length parameters, and
//               adjusting these will have no effect.  Instead, its
//               field of view is controlled by adjusting the
//               film_size; the orthographic lens represents a planar
//               projection onto its imaginary film of the specified
//               size, hanging in space.
////////////////////////////////////////////////////////////////////

2915 15 PerspectiveLens 0 141313 15 PerspectiveLens 15 PerspectiveLens 0 0 0 1 2715 2717 0 1 2716 0 0 1 0 2908 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PerspectiveLens
// Description : A perspective-type lens: a normal camera.
////////////////////////////////////////////////////////////////////

2916 20 TextureReloadRequest 0 141313 20 TextureReloadRequest 20 TextureReloadRequest 0 0 0 1 2718 2724 0 5 2719 2720 2721 2722 2723 0 0 1 0 2871 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : TextureReloadRequest
// Description : This loader request will call
//               Texture::get_ram_image() in a sub-thread, to force
//               the texture's image to be re-read from disk.  It is
//               used by GraphicsStateGuardian::async_reload_texture(),
//               when get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////

2917 14 TextureContext 0 141313 14 TextureContext 14 TextureContext 0 0 0 0 2736 0 7 2729 2730 2731 2732 2733 2734 2735 0 0 2 3 2874 2725 2726 3 2830 2727 2728 0 0 748
////////////////////////////////////////////////////////////////////
//       Class : TextureContext
// Description : This is a special class object that holds all the
//               information returned by a particular GSG to indicate
//               the texture's internal context identifier.
//
//               Textures typically have an immediate-mode and a
//               retained-mode operation.  When using textures in
//               retained-mode (in response to Texture::prepare()),
//               the GSG will create some internal handle for the
//               texture and store it here.  The texture stores all of
//               these handles internally.
////////////////////////////////////////////////////////////////////

2918 13 ShaderContext 0 141313 13 ShaderContext 13 ShaderContext 0 0 0 0 2739 0 2 2737 2738 0 0 1 0 2872 0 0 0 0 679
////////////////////////////////////////////////////////////////////
//       Class : ShaderContext
// Description : The ShaderContext is meant to contain the compiled
//               version of a shader string.  ShaderContext is an
//               abstract base class, there will be a subclass of it
//               for each shader language and graphics API.
//               Since the languages are so different and the
//               graphics APIs have so little in common, the base
//               class contains almost nothing.  All the implementation
//               details are in the subclasses.
////////////////////////////////////////////////////////////////////

2919 16 UserVertexSlider 0 141313 16 UserVertexSlider 16 UserVertexSlider 0 0 0 1 2740 2743 0 2 2741 2742 0 0 1 0 2867 0 0 0 0 390
////////////////////////////////////////////////////////////////////
//       Class : UserVertexSlider
// Description : This is a specialization on VertexSlider that
//               allows the user to specify any arbitrary slider
//               valie he likes.  This is rarely used except for
//               testing.
////////////////////////////////////////////////////////////////////

2920 19 UserVertexTransform 0 141313 19 UserVertexTransform 19 UserVertexTransform 0 0 0 1 2744 2748 0 3 2745 2746 2747 0 0 1 0 2863 0 0 0 0 400
////////////////////////////////////////////////////////////////////
//       Class : UserVertexTransform
// Description : This is a specialization on VertexTransform that
//               allows the user to specify any arbitrary transform
//               matrix he likes.  This is rarely used except for
//               testing.
////////////////////////////////////////////////////////////////////

2921 12 VideoTexture 0 141313 12 VideoTexture 12 VideoTexture 0 0 0 0 2757 0 4 2753 2754 2755 2756 0 0 2 3 2892 2749 2750 3 2922 2751 2752 0 0 480
////////////////////////////////////////////////////////////////////
//       Class : VideoTexture
// Description : The base class for a family of animated Textures that
//               take their input from a video source, such as a movie
//               file.  These Textures may be stopped, started,
//               etc. using the AnimInterface controls, similar to an
//               animated character.
////////////////////////////////////////////////////////////////////

2922 13 AnimInterface 0 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

2923 19 VertexBufferContext 0 141313 19 VertexBufferContext 19 VertexBufferContext 0 0 0 0 2767 0 5 2762 2763 2764 2765 2766 0 0 2 3 2874 2758 2759 3 2830 2760 2761 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : VertexBufferContext
// Description : This is a special class object that holds all the
//               information returned by a particular GSG to indicate
//               the vertex data array's internal context identifier.
//
//               This allows the GSG to cache the vertex data array in
//               whatever way makes sense.  For instance, DirectX can
//               allocate a vertex buffer for the array.  OpenGL can
//               create a buffer object.
////////////////////////////////////////////////////////////////////

2924 17 TextureCollection 0 26625 17 TextureCollection 17 TextureCollection 0 0 0 1 2768 2770 0 20 2769 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 1 3226 0 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : TextureCollection
// Description : Manages a list of Texture objects, as returned by
//               TexturePool::find_all_textures().
////////////////////////////////////////////////////////////////////

2925 11 TexturePool 0 141313 11 TexturePool 11 TexturePool 0 0 0 0 2812 0 22 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 0 0 0 0 0 470
////////////////////////////////////////////////////////////////////
//       Class : TexturePool
// Description : This is the preferred interface for loading textures
//               from image files.  It unifies all references to the
//               same filename, so that multiple models that reference
//               the same textures don't waste texture memory
//               unnecessarily.
////////////////////////////////////////////////////////////////////

2926 13 TexturePeeker 0 141313 13 TexturePeeker 13 TexturePeeker 0 0 0 0 2818 0 5 2813 2814 2815 2816 2817 0 0 1 0 2857 0 0 0 0 386
////////////////////////////////////////////////////////////////////
//       Class : TexturePeeker
// Description : An instance of this object is returned by
//               Texture::peek().  This object allows quick and easy
//               inspection of a texture's texels by (u, v)
//               coordinates.
////////////////////////////////////////////////////////////////////

2927 16 TextureStagePool 0 141313 16 TextureStagePool 16 TextureStagePool 0 0 0 0 2827 0 8 2819 2820 2821 2822 2823 2824 2825 2826 0 0 0 0 1 2928 624
////////////////////////////////////////////////////////////////////
//       Class : TextureStagePool
// Description : The TextureStagePool (there is only one in the universe)
//               serves to unify different pointers to the same
//               TextureStage, mainly to help developers use a common
//               pointer to access things that are loaded from
//               different model files.
//
//               It runs in one of three different modes, according to
//               set_mode().  See that method for more information.
////////////////////////////////////////////////////////////////////

2928 4 Mode 0 794624 22 TextureStagePool::Mode 22 TextureStagePool::Mode 2927 0 0 0 0 0 0 0 0 0 3 6 M_none 24 TextureStagePool::M_none 0 6 M_name 24 TextureStagePool::M_name 1 8 M_unique 26 TextureStagePool::M_unique 2 0 0

2929 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2930 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2931 13 AdaptiveLru * 0 8576 13 AdaptiveLru * 13 AdaptiveLru * 0 0 2828 0 0 0 0 0 0 0 0 0 0

2932 19 AdaptiveLru const * 0 8576 19 AdaptiveLru const * 19 AdaptiveLru const * 0 0 2933 0 0 0 0 0 0 0 0 0 0

2933 17 AdaptiveLru const 0 8832 17 AdaptiveLru const 17 AdaptiveLru const 0 0 2828 0 0 0 0 0 0 0 0 0 0

2934 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2935 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2936 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2937 0 0 0 0 0 0 0 0 0 0

2937 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2938 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2939 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2940 23 AdaptiveLruPage const * 0 8576 23 AdaptiveLruPage const * 23 AdaptiveLruPage const * 0 0 2941 0 0 0 0 0 0 0 0 0 0

2941 21 AdaptiveLruPage const 0 8832 21 AdaptiveLruPage const 21 AdaptiveLruPage const 0 0 2830 0 0 0 0 0 0 0 0 0 0

2942 17 AdaptiveLruPage * 0 8576 17 AdaptiveLruPage * 17 AdaptiveLruPage * 0 0 2830 0 0 0 0 0 0 0 0 0 0

2943 25 GeomVertexAnimationSpec * 0 8576 25 GeomVertexAnimationSpec * 25 GeomVertexAnimationSpec * 0 0 2841 0 0 0 0 0 0 0 0 0 0

2944 31 GeomVertexAnimationSpec const * 0 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 2945 0 0 0 0 0 0 0 0 0 0

2945 29 GeomVertexAnimationSpec const 0 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 2841 0 0 0 0 0 0 0 0 0 0

2946 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 2842 0 0 0 0 0 0 0 0 0 0

2947 20 InternalName const * 0 8576 20 InternalName const * 20 InternalName const * 0 0 2948 0 0 0 0 0 0 0 0 0 0

2948 18 InternalName const 0 8832 18 InternalName const 18 InternalName const 0 0 2842 0 0 0 0 0 0 0 0 0 0

2949 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2950 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2949 0 0 0 0 0 0 0 0 0 0

2951 24 GeomVertexColumn const * 0 8576 24 GeomVertexColumn const * 24 GeomVertexColumn const * 0 0 2952 0 0 0 0 0 0 0 0 0 0

2952 22 GeomVertexColumn const 0 8832 22 GeomVertexColumn const 22 GeomVertexColumn const 0 0 2844 0 0 0 0 0 0 0 0 0 0

2953 18 GeomVertexColumn * 0 8576 18 GeomVertexColumn * 18 GeomVertexColumn * 0 0 2844 0 0 0 0 0 0 0 0 0 0

2954 23 GeomVertexArrayFormat * 0 8576 23 GeomVertexArrayFormat * 23 GeomVertexArrayFormat * 0 0 2845 0 0 0 0 0 0 0 0 0 0

2955 29 GeomVertexArrayFormat const * 0 8576 29 GeomVertexArrayFormat const * 29 GeomVertexArrayFormat const * 0 0 2956 0 0 0 0 0 0 0 0 0 0

2956 27 GeomVertexArrayFormat const 0 8832 27 GeomVertexArrayFormat const 27 GeomVertexArrayFormat const 0 0 2845 0 0 0 0 0 0 0 0 0 0

2957 27 GeomVertexArrayData const * 0 8576 27 GeomVertexArrayData const * 27 GeomVertexArrayData const * 0 0 2958 0 0 0 0 0 0 0 0 0 0

2958 25 GeomVertexArrayData const 0 8832 25 GeomVertexArrayData const 25 GeomVertexArrayData const 0 0 2859 0 0 0 0 0 0 0 0 0 0

2959 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 2843 0 0 0 0 0 0 0 0 0 0

2960 11 GeomEnums * 0 8576 11 GeomEnums * 11 GeomEnums * 0 0 2833 0 0 0 0 0 0 0 0 0 0

2961 18 GeomVertexFormat * 0 8576 18 GeomVertexFormat * 18 GeomVertexFormat * 0 0 2846 0 0 0 0 0 0 0 0 0 0

2962 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 2963 0 0 0 0 0 0 0 0 0 0

2963 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 2846 0 0 0 0 0 0 0 0 0 0

2964 22 GeomVertexData const * 0 8576 22 GeomVertexData const * 22 GeomVertexData const * 0 0 2965 0 0 0 0 0 0 0 0 0 0

2965 20 GeomVertexData const 0 8832 20 GeomVertexData const 20 GeomVertexData const 0 0 2869 0 0 0 0 0 0 0 0 0 0

2966 11 SimpleLru * 0 8576 11 SimpleLru * 11 SimpleLru * 0 0 2847 0 0 0 0 0 0 0 0 0 0

2967 17 SimpleLru const * 0 8576 17 SimpleLru const * 17 SimpleLru const * 0 0 2968 0 0 0 0 0 0 0 0 0 0

2968 15 SimpleLru const 0 8832 15 SimpleLru const 15 SimpleLru const 0 0 2847 0 0 0 0 0 0 0 0 0 0

2969 16 LinkedListNode * 0 8576 16 LinkedListNode * 16 LinkedListNode * 0 0 2848 0 0 0 0 0 0 0 0 0 0

2970 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 2829 0 0 0 0 0 0 0 0 0 0

2971 21 SimpleLruPage const * 0 8576 21 SimpleLruPage const * 21 SimpleLruPage const * 0 0 2972 0 0 0 0 0 0 0 0 0 0

2972 19 SimpleLruPage const 0 8832 19 SimpleLruPage const 19 SimpleLruPage const 0 0 2849 0 0 0 0 0 0 0 0 0 0

2973 15 SimpleLruPage * 0 8576 15 SimpleLruPage * 15 SimpleLruPage * 0 0 2849 0 0 0 0 0 0 0 0 0 0

2974 7 Mutex * 0 8576 7 Mutex * 7 Mutex * 0 0 2975 0 0 0 0 0 0 0 0 0 0

2975 5 Mutex 0 2048 5 Mutex 5 Mutex 0 0 0 0 0 0 0 0 0 0 0 0 0

2976 17 SimpleAllocator * 0 8576 17 SimpleAllocator * 17 SimpleAllocator * 0 0 2850 0 0 0 0 0 0 0 0 0 0

2977 22 SimpleAllocatorBlock * 0 8576 22 SimpleAllocatorBlock * 22 SimpleAllocatorBlock * 0 0 2851 0 0 0 0 0 0 0 0 0 0

2978 23 SimpleAllocator const * 0 8576 23 SimpleAllocator const * 23 SimpleAllocator const * 0 0 2979 0 0 0 0 0 0 0 0 0 0

2979 21 SimpleAllocator const 0 8832 21 SimpleAllocator const 21 SimpleAllocator const 0 0 2850 0 0 0 0 0 0 0 0 0 0

2980 28 SimpleAllocatorBlock const * 0 8576 28 SimpleAllocatorBlock const * 28 SimpleAllocatorBlock const * 0 0 2981 0 0 0 0 0 0 0 0 0 0

2981 26 SimpleAllocatorBlock const 0 8832 26 SimpleAllocatorBlock const 26 SimpleAllocatorBlock const 0 0 2851 0 0 0 0 0 0 0 0 0 0

2982 26 VertexDataSaveFile const * 0 8576 26 VertexDataSaveFile const * 26 VertexDataSaveFile const * 0 0 2983 0 0 0 0 0 0 0 0 0 0

2983 24 VertexDataSaveFile const 0 8832 24 VertexDataSaveFile const 24 VertexDataSaveFile const 0 0 2852 0 0 0 0 0 0 0 0 0 0

2984 22 VertexDataPage const * 0 8576 22 VertexDataPage const * 22 VertexDataPage const * 0 0 2985 0 0 0 0 0 0 0 0 0 0

2985 20 VertexDataPage const 0 8832 20 VertexDataPage const 20 VertexDataPage const 0 0 2853 0 0 0 0 0 0 0 0 0 0

2986 16 VertexDataPage * 0 8576 16 VertexDataPage * 16 VertexDataPage * 0 0 2853 0 0 0 0 0 0 0 0 0 0

2987 17 VertexDataBlock * 0 8576 17 VertexDataBlock * 17 VertexDataBlock * 0 0 2856 0 0 0 0 0 0 0 0 0 0

2988 16 VertexDataBook * 0 8576 16 VertexDataBook * 16 VertexDataBook * 0 0 2855 0 0 0 0 0 0 0 0 0 0

2989 20 VertexDataSaveFile * 0 8576 20 VertexDataSaveFile * 20 VertexDataSaveFile * 0 0 2852 0 0 0 0 0 0 0 0 0 0

2990 22 VertexDataBook const * 0 8576 22 VertexDataBook const * 22 VertexDataBook const * 0 0 2991 0 0 0 0 0 0 0 0 0 0

2991 20 VertexDataBook const 0 8832 20 VertexDataBook const 20 VertexDataBook const 0 0 2855 0 0 0 0 0 0 0 0 0 0

2992 23 VertexDataBlock const * 0 8576 23 VertexDataBlock const * 23 VertexDataBlock const * 0 0 2993 0 0 0 0 0 0 0 0 0 0

2993 21 VertexDataBlock const 0 8832 21 VertexDataBlock const 21 VertexDataBlock const 0 0 2856 0 0 0 0 0 0 0 0 0 0

2994 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2857 0 0 0 0 0 0 0 0 0 0

2995 21 GeomVertexArrayData * 0 8576 21 GeomVertexArrayData * 21 GeomVertexArrayData * 0 0 2859 0 0 0 0 0 0 0 0 0 0

2996 9 UpdateSeq 0 2048 9 UpdateSeq 9 UpdateSeq 0 0 0 0 0 0 0 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

2997 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 2996 0 0 0 0 0 0 0 0 0 0

2998 31 GeomVertexArrayDataHandle const 0 8832 31 GeomVertexArrayDataHandle const 31 GeomVertexArrayDataHandle const 0 0 2861 0 0 0 0 0 0 0 0 0 0

2999 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 3000 0 0 0 0 0 0 0 0 0 0

3000 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

3001 33 GeomVertexArrayDataHandle const * 0 8576 33 GeomVertexArrayDataHandle const * 33 GeomVertexArrayDataHandle const * 0 0 2998 0 0 0 0 0 0 0 0 0 0

3002 27 GeomVertexArrayDataHandle * 0 8576 27 GeomVertexArrayDataHandle * 27 GeomVertexArrayDataHandle * 0 0 2861 0 0 0 0 0 0 0 0 0 0

3003 25 PreparedGraphicsObjects * 0 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 2906 0 0 0 0 0 0 0 0 0 0

3004 27 GraphicsStateGuardianBase * 0 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 3005 0 0 0 0 0 0 0 0 0 0

3005 25 GraphicsStateGuardianBase 0 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 0 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

3006 21 VertexBufferContext * 0 8576 21 VertexBufferContext * 21 VertexBufferContext * 0 0 2923 0 0 0 0 0 0 0 0 0 0

3007 19 CopyOnWriteObject * 0 8576 19 CopyOnWriteObject * 19 CopyOnWriteObject * 0 0 2860 0 0 0 0 0 0 0 0 0 0

3008 24 GeomCacheManager const * 0 8576 24 GeomCacheManager const * 24 GeomCacheManager const * 0 0 3009 0 0 0 0 0 0 0 0 0 0

3009 22 GeomCacheManager const 0 8832 22 GeomCacheManager const 22 GeomCacheManager const 0 0 2862 0 0 0 0 0 0 0 0 0 0

3010 18 GeomCacheManager * 0 8576 18 GeomCacheManager * 18 GeomCacheManager * 0 0 2862 0 0 0 0 0 0 0 0 0 0

3011 23 VertexTransform const * 0 8576 23 VertexTransform const * 23 VertexTransform const * 0 0 3012 0 0 0 0 0 0 0 0 0 0

3012 21 VertexTransform const 0 8832 21 VertexTransform const 21 VertexTransform const 0 0 2863 0 0 0 0 0 0 0 0 0 0

3013 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3014 0 0 0 0 0 0 0 0 0 0

3014 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 3227 3228 3229 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3015 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3016 0 0 0 0 0 0 0 0 0 0

3016 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3014 0 0 0 0 0 0 0 0 0 0

3017 16 TransformTable * 0 8576 16 TransformTable * 16 TransformTable * 0 0 2864 0 0 0 0 0 0 0 0 0 0

3018 22 TransformTable const * 0 8576 22 TransformTable const * 22 TransformTable const * 0 0 3019 0 0 0 0 0 0 0 0 0 0

3019 20 TransformTable const 0 8832 20 TransformTable const 20 TransformTable const 0 0 2864 0 0 0 0 0 0 0 0 0 0

3020 16 TransformBlend * 0 8576 16 TransformBlend * 16 TransformBlend * 0 0 2865 0 0 0 0 0 0 0 0 0 0

3021 22 TransformBlend const * 0 8576 22 TransformBlend const * 22 TransformBlend const * 0 0 3022 0 0 0 0 0 0 0 0 0 0

3022 20 TransformBlend const 0 8832 20 TransformBlend const 20 TransformBlend const 0 0 2865 0 0 0 0 0 0 0 0 0 0

3023 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 3024 0 0 0 0 0 0 0 0 0 0

3024 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3025 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 3026 0 0 0 0 0 0 0 0 0 0

3026 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3027 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 3028 0 0 0 0 0 0 0 0 0 0

3028 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3029 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 3030 0 0 0 0 0 0 0 0 0 0

3030 8 LPoint4f 0 2048 8 LPoint4f 8 LPoint4f 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3031 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 3032 0 0 0 0 0 0 0 0 0 0

3032 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3033 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 3034 0 0 0 0 0 0 0 0 0 0

3034 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3035 21 TransformBlendTable * 0 8576 21 TransformBlendTable * 21 TransformBlendTable * 0 0 2866 0 0 0 0 0 0 0 0 0 0

3036 27 TransformBlendTable const * 0 8576 27 TransformBlendTable const * 27 TransformBlendTable const * 0 0 3037 0 0 0 0 0 0 0 0 0 0

3037 25 TransformBlendTable const 0 8832 25 TransformBlendTable const 25 TransformBlendTable const 0 0 2866 0 0 0 0 0 0 0 0 0 0

3038 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 3039 0 0 0 0 0 0 0 0 0 0

3039 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 3040 0 0 0 0 0 0 0 0 0 0

3040 11 SparseArray 0 2048 11 SparseArray 11 SparseArray 0 0 0 0 0 0 0 0 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : SparseArray
// Description : This class records a set of integers, where each
//               integer is either present or not present in the set.
//
//               It is similar in principle and in interface to a
//               BitArray (which can be thought of as a set of
//               integers, one integer corresponding to each different
//               bit position), but the SparseArray is implemented as
//               a list of min/max subrange lists, rather than as a
//               bitmask.  
//
//               This makes it particularly efficient for storing sets
//               which consist of large sections of consecutively
//               included or consecutively excluded elements, with
//               arbitrarily large integers, but particularly
//               inefficient for doing boolean operations such as & or
//               |.
//
//               Also, unlike BitArray, the SparseArray can store
//               negative integers.
////////////////////////////////////////////////////////////////////

3041 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 3040 0 0 0 0 0 0 0 0 0 0

3042 20 VertexSlider const * 0 8576 20 VertexSlider const * 20 VertexSlider const * 0 0 3043 0 0 0 0 0 0 0 0 0 0

3043 18 VertexSlider const 0 8832 18 VertexSlider const 18 VertexSlider const 0 0 2867 0 0 0 0 0 0 0 0 0 0

3044 13 SliderTable * 0 8576 13 SliderTable * 13 SliderTable * 0 0 2868 0 0 0 0 0 0 0 0 0 0

3045 19 SliderTable const * 0 8576 19 SliderTable const * 19 SliderTable const * 0 0 3046 0 0 0 0 0 0 0 0 0 0

3046 17 SliderTable const 0 8832 17 SliderTable const 17 SliderTable const 0 0 2868 0 0 0 0 0 0 0 0 0 0

3047 16 GeomVertexData * 0 8576 16 GeomVertexData * 16 GeomVertexData * 0 0 2869 0 0 0 0 0 0 0 0 0 0

3048 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3049 0 0 0 0 0 0 0 0 0 0

3049 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3050 0 0 0 0 0 0 0 0 0 0

3050 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3051 24 AnimateVerticesRequest * 0 8576 24 AnimateVerticesRequest * 24 AnimateVerticesRequest * 0 0 2870 0 0 0 0 0 0 0 0 0 0

3052 30 AnimateVerticesRequest const * 0 8576 30 AnimateVerticesRequest const * 30 AnimateVerticesRequest const * 0 0 3053 0 0 0 0 0 0 0 0 0 0

3053 28 AnimateVerticesRequest const 0 8832 28 AnimateVerticesRequest const 28 AnimateVerticesRequest const 0 0 2870 0 0 0 0 0 0 0 0 0 0

3054 21 BufferContext const * 0 8576 21 BufferContext const * 21 BufferContext const * 0 0 3055 0 0 0 0 0 0 0 0 0 0

3055 19 BufferContext const 0 8832 19 BufferContext const 19 BufferContext const 0 0 2874 0 0 0 0 0 0 0 0 0 0

3056 15 BufferContext * 0 8576 15 BufferContext * 15 BufferContext * 0 0 2874 0 0 0 0 0 0 0 0 0 0

3057 14 SavedContext * 0 8576 14 SavedContext * 14 SavedContext * 0 0 2872 0 0 0 0 0 0 0 0 0 0

3058 15 GeomPrimitive * 0 8576 15 GeomPrimitive * 15 GeomPrimitive * 0 0 2875 0 0 0 0 0 0 0 0 0 0

3059 21 GeomPrimitive const * 0 8576 21 GeomPrimitive const * 21 GeomPrimitive const * 0 0 3060 0 0 0 0 0 0 0 0 0 0

3060 19 GeomPrimitive const 0 8832 19 GeomPrimitive const 19 GeomPrimitive const 0 0 2875 0 0 0 0 0 0 0 0 0 0

3061 8 CPTA_int 0 2048 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

3062 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 3061 0 0 0 0 0 0 0 0 0 0

3063 7 PTA_int 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

3064 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 3063 0 0 0 0 0 0 0 0 0 0

3065 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 2876 0 0 0 0 0 0 0 0 0 0

3066 20 TextureStage const * 0 8576 20 TextureStage const * 20 TextureStage const * 0 0 3067 0 0 0 0 0 0 0 0 0 0

3067 18 TextureStage const 0 8832 18 TextureStage const 18 TextureStage const 0 0 2876 0 0 0 0 0 0 0 0 0 0

3068 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3050 0 0 0 0 0 0 0 0 0 0

3069 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 2881 0 0 0 0 0 0 0 0 0 0

3070 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 3071 0 0 0 0 0 0 0 0 0 0

3071 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 2881 0 0 0 0 0 0 0 0 0 0

3072 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 3073 0 0 0 0 0 0 0 0 0 0

3073 14 BoundingVolume 0 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

3074 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 3072 0 0 0 0 0 0 0 0 0 0

3075 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 3073 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

3076 13 GeomContext * 0 8576 13 GeomContext * 13 GeomContext * 0 0 2882 0 0 0 0 0 0 0 0 0 0

3077 19 GeomContext const * 0 8576 19 GeomContext const * 19 GeomContext const * 0 0 3078 0 0 0 0 0 0 0 0 0 0

3078 17 GeomContext const 0 8832 17 GeomContext const 17 GeomContext const 0 0 2882 0 0 0 0 0 0 0 0 0 0

3079 11 GeomLines * 0 8576 11 GeomLines * 11 GeomLines * 0 0 2883 0 0 0 0 0 0 0 0 0 0

3080 17 GeomLines const * 0 8576 17 GeomLines const * 17 GeomLines const * 0 0 3081 0 0 0 0 0 0 0 0 0 0

3081 15 GeomLines const 0 8832 15 GeomLines const 15 GeomLines const 0 0 2883 0 0 0 0 0 0 0 0 0 0

3082 16 GeomLinestrips * 0 8576 16 GeomLinestrips * 16 GeomLinestrips * 0 0 2884 0 0 0 0 0 0 0 0 0 0

3083 22 GeomLinestrips const * 0 8576 22 GeomLinestrips const * 22 GeomLinestrips const * 0 0 3084 0 0 0 0 0 0 0 0 0 0

3084 20 GeomLinestrips const 0 8832 20 GeomLinestrips const 20 GeomLinestrips const 0 0 2884 0 0 0 0 0 0 0 0 0 0

3085 12 GeomPoints * 0 8576 12 GeomPoints * 12 GeomPoints * 0 0 2885 0 0 0 0 0 0 0 0 0 0

3086 18 GeomPoints const * 0 8576 18 GeomPoints const * 18 GeomPoints const * 0 0 3087 0 0 0 0 0 0 0 0 0 0

3087 16 GeomPoints const 0 8832 16 GeomPoints const 16 GeomPoints const 0 0 2885 0 0 0 0 0 0 0 0 0 0

3088 15 GeomTriangles * 0 8576 15 GeomTriangles * 15 GeomTriangles * 0 0 2886 0 0 0 0 0 0 0 0 0 0

3089 21 GeomTriangles const * 0 8576 21 GeomTriangles const * 21 GeomTriangles const * 0 0 3090 0 0 0 0 0 0 0 0 0 0

3090 19 GeomTriangles const 0 8832 19 GeomTriangles const 19 GeomTriangles const 0 0 2886 0 0 0 0 0 0 0 0 0 0

3091 13 GeomTrifans * 0 8576 13 GeomTrifans * 13 GeomTrifans * 0 0 2887 0 0 0 0 0 0 0 0 0 0

3092 19 GeomTrifans const * 0 8576 19 GeomTrifans const * 19 GeomTrifans const * 0 0 3093 0 0 0 0 0 0 0 0 0 0

3093 17 GeomTrifans const 0 8832 17 GeomTrifans const 17 GeomTrifans const 0 0 2887 0 0 0 0 0 0 0 0 0 0

3094 15 GeomTristrips * 0 8576 15 GeomTristrips * 15 GeomTristrips * 0 0 2888 0 0 0 0 0 0 0 0 0 0

3095 21 GeomTristrips const * 0 8576 21 GeomTristrips const * 21 GeomTristrips const * 0 0 3096 0 0 0 0 0 0 0 0 0 0

3096 19 GeomTristrips const 0 8832 19 GeomTristrips const 19 GeomTristrips const 0 0 2888 0 0 0 0 0 0 0 0 0 0

3097 18 GeomVertexReader * 0 8576 18 GeomVertexReader * 18 GeomVertexReader * 0 0 2889 0 0 0 0 0 0 0 0 0 0

3098 24 GeomVertexReader const * 0 8576 24 GeomVertexReader const * 24 GeomVertexReader const * 0 0 3099 0 0 0 0 0 0 0 0 0 0

3099 22 GeomVertexReader const 0 8832 22 GeomVertexReader const 22 GeomVertexReader const 0 0 2889 0 0 0 0 0 0 0 0 0 0

3100 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3101 0 0 0 0 0 0 0 0 0 0

3101 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3102 0 0 0 0 0 0 0 0 0 0

3102 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3103 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3104 0 0 0 0 0 0 0 0 0 0

3104 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3105 0 0 0 0 0 0 0 0 0 0

3105 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3106 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3107 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 3108 0 0 0 0 0 0 0 0 0 0

3108 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 3109 0 0 0 0 0 0 0 0 0 0

3109 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3110 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 3111 0 0 0 0 0 0 0 0 0 0

3111 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 3112 0 0 0 0 0 0 0 0 0 0

3112 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3113 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 3114 0 0 0 0 0 0 0 0 0 0

3114 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 3115 0 0 0 0 0 0 0 0 0 0

3115 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3116 18 GeomVertexWriter * 0 8576 18 GeomVertexWriter * 18 GeomVertexWriter * 0 0 2890 0 0 0 0 0 0 0 0 0 0

3117 24 GeomVertexWriter const * 0 8576 24 GeomVertexWriter const * 24 GeomVertexWriter const * 0 0 3118 0 0 0 0 0 0 0 0 0 0

3118 22 GeomVertexWriter const 0 8832 22 GeomVertexWriter const 22 GeomVertexWriter const 0 0 2890 0 0 0 0 0 0 0 0 0 0

3119 20 GeomVertexRewriter * 0 8576 20 GeomVertexRewriter * 20 GeomVertexRewriter * 0 0 2891 0 0 0 0 0 0 0 0 0 0

3120 26 GeomVertexRewriter const * 0 8576 26 GeomVertexRewriter const * 26 GeomVertexRewriter const * 0 0 3121 0 0 0 0 0 0 0 0 0 0

3121 24 GeomVertexRewriter const 0 8832 24 GeomVertexRewriter const 24 GeomVertexRewriter const 0 0 2891 0 0 0 0 0 0 0 0 0 0

3122 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 2892 0 0 0 0 0 0 0 0 0 0

3123 15 Texture const * 0 8576 15 Texture const * 15 Texture const * 0 0 3124 0 0 0 0 0 0 0 0 0 0

3124 13 Texture const 0 8832 13 Texture const 13 Texture const 0 0 2892 0 0 0 0 0 0 0 0 0 0

3125 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 3126 0 0 0 0 0 0 0 0 0 0

3126 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 3127 0 0 0 0 0 0 0 0 0 0

3127 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

3128 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 3129 0 0 0 0 0 0 0 0 0 0

3129 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 3130 0 0 0 0 0 0 0 0 0 0

3130 13 LoaderOptions 0 2048 13 LoaderOptions 13 LoaderOptions 0 0 0 0 0 0 0 0 0 0 0 0 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

3131 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 3132 0 0 0 0 0 0 0 0 0 0

3132 14 BamCacheRecord 0 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

3133 9 istream * 0 8576 9 istream * 9 istream * 0 0 3134 0 0 0 0 0 0 0 0 0 0

3134 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

3135 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 3136 0 0 0 0 0 0 0 0 0 0

3136 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 3137 0 0 0 0 0 0 0 0 0 0

3137 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

3138 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 3137 0 0 0 0 0 0 0 0 0 0

3139 10 CPTA_uchar 0 2048 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

3140 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 3139 0 0 0 0 0 0 0 0 0 0

3141 9 PTA_uchar 0 2048 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

3142 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 3141 0 0 0 0 0 0 0 0 0 0

3143 7 __int64 0 8226 7 __int64 7 __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

3144 15 TexturePeeker * 0 8576 15 TexturePeeker * 15 TexturePeeker * 0 0 2926 0 0 0 0 0 0 0 0 0 0

3145 16 AutoTextureScale 0 532480 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0 8 ATS_down 8 ATS_down 1 6 ATS_up 6 ATS_up 2 7 ATS_pad 7 ATS_pad 3 15 ATS_unspecified 15 ATS_unspecified 4 0 0

3146 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2901 0 0 0 0 0 0 0 0 0 0

3147 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3102 0 0 0 0 0 0 0 0 0 0

3148 16 TextureContext * 0 8576 16 TextureContext * 16 TextureContext * 0 0 2917 0 0 0 0 0 0 0 0 0 0

3149 8 Shader * 0 8576 8 Shader * 8 Shader * 0 0 2900 0 0 0 0 0 0 0 0 0 0

3150 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 3151 0 0 0 0 0 0 0 0 0 0

3151 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 2900 0 0 0 0 0 0 0 0 0 0

3152 15 ShaderContext * 0 8576 15 ShaderContext * 15 ShaderContext * 0 0 2918 0 0 0 0 0 0 0 0 0 0

3153 31 PreparedGraphicsObjects const * 0 8576 31 PreparedGraphicsObjects const * 31 PreparedGraphicsObjects const * 0 0 3154 0 0 0 0 0 0 0 0 0 0

3154 29 PreparedGraphicsObjects const 0 8832 29 PreparedGraphicsObjects const 29 PreparedGraphicsObjects const 0 0 2906 0 0 0 0 0 0 0 0 0 0

3155 20 IndexBufferContext * 0 8576 20 IndexBufferContext * 20 IndexBufferContext * 0 0 2907 0 0 0 0 0 0 0 0 0 0

3156 26 IndexBufferContext const * 0 8576 26 IndexBufferContext const * 26 IndexBufferContext const * 0 0 3157 0 0 0 0 0 0 0 0 0 0

3157 24 IndexBufferContext const 0 8832 24 IndexBufferContext const 24 IndexBufferContext const 0 0 2907 0 0 0 0 0 0 0 0 0 0

3158 35 GeomPrimitivePipelineReader const * 0 8576 35 GeomPrimitivePipelineReader const * 35 GeomPrimitivePipelineReader const * 0 0 3159 0 0 0 0 0 0 0 0 0 0

3159 33 GeomPrimitivePipelineReader const 0 8832 33 GeomPrimitivePipelineReader const 33 GeomPrimitivePipelineReader const 0 0 3160 0 0 0 0 0 0 0 0 0 0

3160 27 GeomPrimitivePipelineReader 0 1050624 27 GeomPrimitivePipelineReader 27 GeomPrimitivePipelineReader 0 0 0 0 0 0 0 0 0 0 0 0 303
////////////////////////////////////////////////////////////////////
//       Class : GeomPrimitivePipelineReader
// Description : Encapsulates the data from a GeomPrimitive,
//               pre-fetched for one stage of the pipeline.
////////////////////////////////////////////////////////////////////

3161 12 Lens const * 0 8576 12 Lens const * 12 Lens const * 0 0 3162 0 0 0 0 0 0 0 0 0 0

3162 10 Lens const 0 8832 10 Lens const 10 Lens const 0 0 2908 0 0 0 0 0 0 0 0 0 0

3163 6 Lens * 0 8576 6 Lens * 6 Lens * 0 0 2908 0 0 0 0 0 0 0 0 0 0

3164 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 3165 0 0 0 0 0 0 0 0 0 0

3165 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 3166 0 0 0 0 0 0 0 0 0 0

3166 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3167 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3168 0 0 0 0 0 0 0 0 0 0

3168 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 3026 0 0 0 0 0 0 0 0 0 0

3169 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 3166 0 0 0 0 0 0 0 0 0 0

3170 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

3171 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 3172 0 0 0 0 0 0 0 0 0 0

3172 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 3173 0 0 0 0 0 0 0 0 0 0

3173 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3174 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 3175 0 0 0 0 0 0 0 0 0 0

3175 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 3034 0 0 0 0 0 0 0 0 0 0

3176 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 3073 0 0 0 0 0 0 0 0 0 0

3177 16 Material const * 0 8576 16 Material const * 16 Material const * 0 0 3178 0 0 0 0 0 0 0 0 0 0

3178 14 Material const 0 8832 14 Material const 14 Material const 0 0 2911 0 0 0 0 0 0 0 0 0 0

3179 10 Material * 0 8576 10 Material * 10 Material * 0 0 2911 0 0 0 0 0 0 0 0 0 0

3180 12 MatrixLens * 0 8576 12 MatrixLens * 12 MatrixLens * 0 0 2913 0 0 0 0 0 0 0 0 0 0

3181 18 MatrixLens const * 0 8576 18 MatrixLens const * 18 MatrixLens const * 0 0 3182 0 0 0 0 0 0 0 0 0 0

3182 16 MatrixLens const 0 8832 16 MatrixLens const 16 MatrixLens const 0 0 2913 0 0 0 0 0 0 0 0 0 0

3183 18 OrthographicLens * 0 8576 18 OrthographicLens * 18 OrthographicLens * 0 0 2914 0 0 0 0 0 0 0 0 0 0

3184 17 PerspectiveLens * 0 8576 17 PerspectiveLens * 17 PerspectiveLens * 0 0 2915 0 0 0 0 0 0 0 0 0 0

3185 22 TextureReloadRequest * 0 8576 22 TextureReloadRequest * 22 TextureReloadRequest * 0 0 2916 0 0 0 0 0 0 0 0 0 0

3186 28 TextureReloadRequest const * 0 8576 28 TextureReloadRequest const * 28 TextureReloadRequest const * 0 0 3187 0 0 0 0 0 0 0 0 0 0

3187 26 TextureReloadRequest const 0 8832 26 TextureReloadRequest const 26 TextureReloadRequest const 0 0 2916 0 0 0 0 0 0 0 0 0 0

3188 22 TextureContext const * 0 8576 22 TextureContext const * 22 TextureContext const * 0 0 3189 0 0 0 0 0 0 0 0 0 0

3189 20 TextureContext const 0 8832 20 TextureContext const 20 TextureContext const 0 0 2917 0 0 0 0 0 0 0 0 0 0

3190 21 ShaderContext const * 0 8576 21 ShaderContext const * 21 ShaderContext const * 0 0 3191 0 0 0 0 0 0 0 0 0 0

3191 19 ShaderContext const 0 8832 19 ShaderContext const 19 ShaderContext const 0 0 2918 0 0 0 0 0 0 0 0 0 0

3192 18 UserVertexSlider * 0 8576 18 UserVertexSlider * 18 UserVertexSlider * 0 0 2919 0 0 0 0 0 0 0 0 0 0

3193 21 UserVertexTransform * 0 8576 21 UserVertexTransform * 21 UserVertexTransform * 0 0 2920 0 0 0 0 0 0 0 0 0 0

3194 27 UserVertexTransform const * 0 8576 27 UserVertexTransform const * 27 UserVertexTransform const * 0 0 3195 0 0 0 0 0 0 0 0 0 0

3195 25 UserVertexTransform const 0 8832 25 UserVertexTransform const 25 UserVertexTransform const 0 0 2920 0 0 0 0 0 0 0 0 0 0

3196 20 VideoTexture const * 0 8576 20 VideoTexture const * 20 VideoTexture const * 0 0 3197 0 0 0 0 0 0 0 0 0 0

3197 18 VideoTexture const 0 8832 18 VideoTexture const 18 VideoTexture const 0 0 2921 0 0 0 0 0 0 0 0 0 0

3198 14 VideoTexture * 0 8576 14 VideoTexture * 14 VideoTexture * 0 0 2921 0 0 0 0 0 0 0 0 0 0

3199 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 2922 0 0 0 0 0 0 0 0 0 0

3200 27 VertexBufferContext const * 0 8576 27 VertexBufferContext const * 27 VertexBufferContext const * 0 0 3201 0 0 0 0 0 0 0 0 0 0

3201 25 VertexBufferContext const 0 8832 25 VertexBufferContext const 25 VertexBufferContext const 0 0 2923 0 0 0 0 0 0 0 0 0 0

3202 19 TextureCollection * 0 8576 19 TextureCollection * 19 TextureCollection * 0 0 2924 0 0 0 0 0 0 0 0 0 0

3203 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 3204 0 0 0 0 0 0 0 0 0 0

3204 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

3205 25 TextureCollection const * 0 8576 25 TextureCollection const * 25 TextureCollection const * 0 0 3206 0 0 0 0 0 0 0 0 0 0

3206 23 TextureCollection const 0 8832 23 TextureCollection const 23 TextureCollection const 0 0 2924 0 0 0 0 0 0 0 0 0 0

3207 21 TexturePeeker const * 0 8576 21 TexturePeeker const * 21 TexturePeeker const * 0 0 3208 0 0 0 0 0 0 0 0 0 0

3208 19 TexturePeeker const 0 8832 19 TexturePeeker const 19 TexturePeeker const 0 0 2926 0 0 0 0 0 0 0 0 0 0

3209 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
20
3210 0 0 113 11 get_columns 15 get_num_columns 10 get_column 
3211 0 0 143 10 get_arrays 14 get_num_arrays 9 get_array 
3212 0 0 143 11 get_columns 15 get_num_columns 10 get_column 
3213 0 0 143 10 get_points 14 get_num_points 9 get_point 
3214 0 0 143 11 get_vectors 15 get_num_vectors 10 get_vector 
3215 0 0 143 13 get_texcoords 17 get_num_texcoords 12 get_texcoord 
3216 0 0 143 17 get_morph_sliders 14 get_num_morphs 16 get_morph_slider 
3217 0 0 143 15 get_morph_bases 14 get_num_morphs 14 get_morph_base 
3218 0 0 143 16 get_morph_deltas 14 get_num_morphs 15 get_morph_delta 
3219 0 0 386 14 get_transforms 18 get_num_transforms 13 get_transform 
3220 0 0 399 14 get_transforms 18 get_num_transforms 13 get_transform 
3221 0 0 425 10 get_blends 14 get_num_blends 9 get_blend 
3222 0 0 448 11 get_sliders 15 get_num_sliders 10 get_slider 
3223 0 0 466 10 get_arrays 14 get_num_arrays 9 get_array 
3224 0 0 542 12 get_vertices 16 get_num_vertices 10 get_vertex 
3225 0 0 674 14 get_primitives 18 get_num_primitives 13 get_primitive 
3226 0 0 1366 12 get_textures 16 get_num_textures 11 get_texture 
3227 0 0 1877 8 get_rows 4 size 7 get_row 
3228 0 0 1877 8 get_cols 4 size 7 get_col 
3229 0 0 1877 9 get_row3s 4 size 8 get_row3 
