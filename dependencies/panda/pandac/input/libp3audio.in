1365929861
2 2
10 libp3audio 4 M_1l 5 panda 
93
120 16 FilterProperties 0 4 213 34 FilterProperties::FilterProperties 0 1 1 0
41
FilterProperties::FilterProperties(void);

121 5 clear 0 4 213 23 FilterProperties::clear 0 1 2 745
// Filename: filterProperties.I
// Created by: jyelon (01Aug2007)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::clear
//      Access: Published
// Description: Removes all DSP postprocessing.
////////////////////////////////////////////////////////////////////
42
inline void FilterProperties::clear(void);

122 11 add_lowpass 0 4 213 29 FilterProperties::add_lowpass 0 1 3 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::apply_lowpass
//      Access: Published
// Description: Add a lowpass filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
80
inline void FilterProperties::add_lowpass(float cutoff_freq, float resonance_q);

123 12 add_highpass 0 4 213 30 FilterProperties::add_highpass 0 1 4 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_highpass
//      Access: Published
// Description: Add a highpass filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
81
inline void FilterProperties::add_highpass(float cutoff_freq, float resonance_q);

124 8 add_echo 0 4 213 26 FilterProperties::add_echo 0 1 5 269
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_echo
//      Access: Published
// Description: Add a echo filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
98
inline void FilterProperties::add_echo(float drymix, float wetmix, float delay, float decayratio);

125 10 add_flange 0 4 213 28 FilterProperties::add_flange 0 1 6 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_flange
//      Access: Published
// Description: Add a flange filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
94
inline void FilterProperties::add_flange(float drymix, float wetmix, float depth, float rate);

126 11 add_distort 0 4 213 29 FilterProperties::add_distort 0 1 7 275
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_distort
//      Access: Published
// Description: Add a distort filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
55
inline void FilterProperties::add_distort(float level);

127 13 add_normalize 0 4 213 31 FilterProperties::add_normalize 0 1 8 279
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_normalize
//      Access: Published
// Description: Add a normalize filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
91
inline void FilterProperties::add_normalize(float fadetime, float threshold, float maxamp);

128 11 add_parameq 0 4 213 29 FilterProperties::add_parameq 0 1 9 275
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_parameq
//      Access: Published
// Description: Add a parameq filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
90
inline void FilterProperties::add_parameq(float center_freq, float bandwidth, float gain);

129 14 add_pitchshift 0 4 213 32 FilterProperties::add_pitchshift 0 1 10 281
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_pitchshift
//      Access: Published
// Description: Add a pitchshift filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
88
inline void FilterProperties::add_pitchshift(float pitch, float fftsize, float overlap);

130 10 add_chorus 0 4 213 28 FilterProperties::add_chorus 0 1 11 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_chorus
//      Access: Published
// Description: Add a chorus filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
145
inline void FilterProperties::add_chorus(float drymix, float wet1, float wet2, float wet3, float delay, float rate, float depth, float feedback);

131 10 add_reverb 0 4 213 28 FilterProperties::add_reverb 0 1 12 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_reverb
//      Access: Published
// Description: Add a reverb filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
110
inline void FilterProperties::add_reverb(float drymix, float wetmix, float roomsize, float damp, float width);

132 12 add_compress 0 4 213 30 FilterProperties::add_compress 0 1 13 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_compress
//      Access: Published
// Description: Add a compress filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
107
inline void FilterProperties::add_compress(float threshold, float attack, float release, float gainmakeup);

133 14 get_class_type 0 4 213 32 FilterProperties::get_class_type 0 1 14 0
57
static TypeHandle FilterProperties::get_class_type(void);

134 4 play 0 4 215 16 AudioSound::play 0 1 15 359
// For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect).
40
virtual void AudioSound::play(void) = 0;

135 4 stop 0 4 215 16 AudioSound::stop 0 1 16 359
// For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect).
40
virtual void AudioSound::stop(void) = 0;

136 8 set_loop 0 4 215 20 AudioSound::set_loop 0 2 17 18 67
// loop: false = play once; true = play forever.
// inits to false.
55
virtual void AudioSound::set_loop(bool loop = (1)) = 0;

137 8 get_loop 0 4 215 20 AudioSound::get_loop 0 1 19 67
// loop: false = play once; true = play forever.
// inits to false.
50
virtual bool AudioSound::get_loop(void) const = 0;

138 14 set_loop_count 0 4 215 26 AudioSound::set_loop_count 0 2 20 21 75
// loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1.
80
virtual void AudioSound::set_loop_count(unsigned long int loop_count = (1)) = 0;

139 14 get_loop_count 0 4 215 26 AudioSound::get_loop_count 0 1 22 75
// loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1.
69
virtual unsigned long int AudioSound::get_loop_count(void) const = 0;

140 8 set_time 0 4 215 20 AudioSound::set_time 0 2 23 24 688
// Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   PN_stdfloat percent_complete = s.get_time() / s.length();
62
virtual void AudioSound::set_time(float start_time = (0)) = 0;

141 8 get_time 0 4 215 20 AudioSound::get_time 0 1 25 688
// Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   PN_stdfloat percent_complete = s.get_time() / s.length();
51
virtual float AudioSound::get_time(void) const = 0;

142 10 set_volume 0 4 215 22 AudioSound::set_volume 0 2 26 27 47
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
60
virtual void AudioSound::set_volume(float volume = (1)) = 0;

143 10 get_volume 0 4 215 22 AudioSound::get_volume 0 1 28 47
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
53
virtual float AudioSound::get_volume(void) const = 0;

144 11 set_balance 0 4 215 23 AudioSound::set_balance 0 2 29 30 77
// -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0.
68
virtual void AudioSound::set_balance(float balance_right = (0)) = 0;

145 11 get_balance 0 4 215 23 AudioSound::get_balance 0 1 31 77
// -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0.
54
virtual float AudioSound::get_balance(void) const = 0;

146 13 set_play_rate 0 4 215 25 AudioSound::set_play_rate 0 2 32 33 64
// play_rate is any positive PN_stdfloat value.
// inits to 1.0.
66
virtual void AudioSound::set_play_rate(float play_rate = (1)) = 0;

147 13 get_play_rate 0 4 215 25 AudioSound::get_play_rate 0 1 34 64
// play_rate is any positive PN_stdfloat value.
// inits to 1.0.
56
virtual float AudioSound::get_play_rate(void) const = 0;

148 10 set_active 0 4 215 22 AudioSound::set_active 0 2 35 36 28
// inits to manager's state.
57
virtual void AudioSound::set_active(bool flag = (1)) = 0;

149 10 get_active 0 4 215 22 AudioSound::get_active 0 1 37 28
// inits to manager's state.
52
virtual bool AudioSound::get_active(void) const = 0;

150 18 set_finished_event 0 4 215 30 AudioSound::set_finished_event 0 1 38 126
// Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string.
83
virtual void AudioSound::set_finished_event(basic_string< char > const &event) = 0;

151 18 get_finished_event 0 4 215 30 AudioSound::get_finished_event 0 1 39 126
// Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string.
83
virtual basic_string< char > const &AudioSound::get_finished_event(void) const = 0;

152 8 get_name 0 4 215 20 AudioSound::get_name 0 1 40 47
// There is no set_name(), this is intentional.
73
virtual basic_string< char > const &AudioSound::get_name(void) const = 0;

153 6 length 0 4 215 18 AudioSound::length 0 1 41 35
// return: playing time in seconds.
49
virtual float AudioSound::length(void) const = 0;

154 17 set_3d_attributes 0 4 215 29 AudioSound::set_3d_attributes 0 1 42 177
// Controls the position of this sound's emitter.
// px, py and pz are the emitter's position.
// vx, vy and vz are the emitter's velocity in UNITS PER SECOND (default: meters).
103
virtual void AudioSound::set_3d_attributes(float px, float py, float pz, float vx, float vy, float vz);

155 17 get_3d_attributes 0 4 215 29 AudioSound::get_3d_attributes 0 0 0
109
virtual void AudioSound::get_3d_attributes(float *px, float *py, float *pz, float *vx, float *vy, float *vz);

156 19 set_3d_min_distance 0 4 215 31 AudioSound::set_3d_min_distance 0 1 43 175
// Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0
57
virtual void AudioSound::set_3d_min_distance(float dist);

157 19 get_3d_min_distance 0 4 215 31 AudioSound::get_3d_min_distance 0 1 44 175
// Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0
58
virtual float AudioSound::get_3d_min_distance(void) const;

158 19 set_3d_max_distance 0 4 215 31 AudioSound::set_3d_max_distance 0 1 45 222
// Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0
57
virtual void AudioSound::set_3d_max_distance(float dist);

159 19 get_3d_max_distance 0 4 215 31 AudioSound::get_3d_max_distance 0 1 46 222
// Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0
58
virtual float AudioSound::get_3d_max_distance(void) const;

160 15 get_speaker_mix 0 4 215 27 AudioSound::get_speaker_mix 0 1 47 314
// *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point.
55
virtual float AudioSound::get_speaker_mix(int speaker);

161 15 set_speaker_mix 0 4 215 27 AudioSound::set_speaker_mix 0 1 48 314
// *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point.
167
virtual void AudioSound::set_speaker_mix(float frontleft, float frontright, float center, float sub, float backleft, float backright, float sideleft, float sideright);

162 17 get_speaker_level 0 4 215 29 AudioSound::get_speaker_level 0 1 49 0
55
virtual float AudioSound::get_speaker_level(int index);

163 18 set_speaker_levels 0 4 215 30 AudioSound::set_speaker_levels 0 9 50 51 52 53 54 55 56 57 58 0
226
virtual void AudioSound::set_speaker_levels(float level1, float level2 = (-1), float level3 = (-1), float level4 = (-1), float level5 = (-1), float level6 = (-1), float level7 = (-1), float level8 = (-1), float level9 = (-1));

164 12 get_priority 0 4 215 24 AudioSound::get_priority 0 1 59 0
43
virtual int AudioSound::get_priority(void);

165 12 set_priority 0 4 215 24 AudioSound::set_priority 0 1 60 0
52
virtual void AudioSound::set_priority(int priority);

166 17 configure_filters 0 4 215 29 AudioSound::configure_filters 0 1 61 0
69
virtual bool AudioSound::configure_filters(FilterProperties *config);

167 6 status 0 4 215 18 AudioSound::status 0 1 62 0
67
virtual AudioSound::SoundStatus AudioSound::status(void) const = 0;

168 6 output 0 4 215 18 AudioSound::output 0 1 63 0
52
virtual void AudioSound::output(ostream &out) const;

169 5 write 0 4 215 17 AudioSound::write 0 1 64 0
51
virtual void AudioSound::write(ostream &out) const;

170 14 get_class_type 0 4 215 26 AudioSound::get_class_type 0 1 65 0
51
static TypeHandle AudioSound::get_class_type(void);

171 15 getSpeakerSetup 0 4 217 29 AudioManager::getSpeakerSetup 0 1 66 0
48
virtual int AudioManager::getSpeakerSetup(void);

172 15 setSpeakerSetup 0 4 217 29 AudioManager::setSpeakerSetup 0 1 67 0
82
virtual void AudioManager::setSpeakerSetup(AudioManager::SpeakerModeCategory cat);

173 17 configure_filters 0 4 217 31 AudioManager::configure_filters 0 1 68 0
71
virtual bool AudioManager::configure_filters(FilterProperties *config);

174 19 create_AudioManager 0 4 217 33 AudioManager::create_AudioManager 0 1 69 315
// Create an AudioManager for each category of sounds you have.
// E.g.
//   MySoundEffects = create_AudioManager::AudioManager();
//   MyMusicManager = create_AudioManager::AudioManager();
//   ...
//   my_sound = MySoundEffects.get_sound("neatSfx.mp3");
//   my_music = MyMusicManager.get_sound("introTheme.mid");
73
static PointerTo< AudioManager > AudioManager::create_AudioManager(void);

175 8 shutdown 0 4 217 22 AudioManager::shutdown 0 1 70 0
42
virtual void AudioManager::shutdown(void);

176 8 is_valid 0 4 217 22 AudioManager::is_valid 0 1 71 411
// If you're interested in knowing whether this audio manager
// is valid, here's the call to do it.  It is not necessary
// to check whether the audio manager is valid before making other
// calls.  You are free to use an invalid sound manager, you
// may get silent sounds from it though.  The sound manager and
// the sounds it creates should not crash the application even
// when the objects are not valid.
46
virtual bool AudioManager::is_valid(void) = 0;

177 9 get_sound 0 4 217 23 AudioManager::get_sound 0 6 72 73 74 75 76 77 32
// Get a sound:

// Get a sound:
280
virtual PointerTo< AudioSound > AudioManager::get_sound(basic_string< char > const &file_name, bool positional = (0), int mode = (SM_heuristic)) = 0;
virtual PointerTo< AudioSound > AudioManager::get_sound(MovieAudio *source, bool positional = (0), int mode = (SM_heuristic)) = 0;

178 14 get_null_sound 0 4 217 28 AudioManager::get_null_sound 0 1 78 0
59
PointerTo< AudioSound > AudioManager::get_null_sound(void);

179 13 uncache_sound 0 4 217 27 AudioManager::uncache_sound 0 1 79 281
// Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache.
84
virtual void AudioManager::uncache_sound(basic_string< char > const &file_name) = 0;

180 11 clear_cache 0 4 217 25 AudioManager::clear_cache 0 1 80 281
// Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache.
49
virtual void AudioManager::clear_cache(void) = 0;

181 15 set_cache_limit 0 4 217 29 AudioManager::set_cache_limit 0 1 81 0
67
virtual void AudioManager::set_cache_limit(unsigned int count) = 0;

182 15 get_cache_limit 0 4 217 29 AudioManager::get_cache_limit 0 1 82 0
67
virtual unsigned int AudioManager::get_cache_limit(void) const = 0;

183 10 set_volume 0 4 217 24 AudioManager::set_volume 0 1 83 206
// Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
56
virtual void AudioManager::set_volume(float volume) = 0;

184 10 get_volume 0 4 217 24 AudioManager::get_volume 0 1 84 206
// Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
55
virtual float AudioManager::get_volume(void) const = 0;

185 10 set_active 0 4 217 24 AudioManager::set_active 0 1 85 362
// Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true.
53
virtual void AudioManager::set_active(bool flag) = 0;

186 10 get_active 0 4 217 24 AudioManager::get_active 0 1 86 362
// Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true.
54
virtual bool AudioManager::get_active(void) const = 0;

187 26 set_concurrent_sound_limit 0 4 217 40 AudioManager::set_concurrent_sound_limit 0 2 87 88 347
// This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time.
84
virtual void AudioManager::set_concurrent_sound_limit(unsigned int limit = (0)) = 0;

188 26 get_concurrent_sound_limit 0 4 217 40 AudioManager::get_concurrent_sound_limit 0 1 89 347
// This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time.
78
virtual unsigned int AudioManager::get_concurrent_sound_limit(void) const = 0;

189 24 reduce_sounds_playing_to 0 4 217 38 AudioManager::reduce_sounds_playing_to 0 1 90 371
// This is likely to be a utility function for the concurrent_sound_limit
// options.  It is exposed as an API, because it's reasonable that it
// may be useful to be here.  It reduces the number of concurrently
// playing sounds to count by some implementation specific means.
// If the number of sounds currently playing is at or below count then
// there is no effect.
76
virtual void AudioManager::reduce_sounds_playing_to(unsigned int count) = 0;

190 15 stop_all_sounds 0 4 217 29 AudioManager::stop_all_sounds 0 1 91 182
// Stop playback on all sounds managed by this manager.
// This is effectively the same as reduce_sounds_playing_to(0), but
// this call may be for efficient on some implementations.
53
virtual void AudioManager::stop_all_sounds(void) = 0;

191 6 update 0 4 217 20 AudioManager::update 0 1 92 79
// This should be called every frame.  Failure to call could
// cause problems.
40
virtual void AudioManager::update(void);

192 32 audio_3d_set_listener_attributes 0 4 217 46 AudioManager::audio_3d_set_listener_attributes 0 1 93 327
// This controls the "set of ears" that listens to 3D spacialized sound
// px, py, pz are position coordinates. 
// vx, vy, vz are a velocity vector in UNITS PER SECOND (default: meters). 
// fx, fy and fz are the respective components of a unit forward-vector
// ux, uy and uz are the respective components of a unit up-vector
180
virtual void AudioManager::audio_3d_set_listener_attributes(float px, float py, float pz, float vx, float vy, float vz, float fx, float fy, float fz, float ux, float uy, float uz);

193 32 audio_3d_get_listener_attributes 0 4 217 46 AudioManager::audio_3d_get_listener_attributes 0 0 0
192
virtual void AudioManager::audio_3d_get_listener_attributes(float *px, float *py, float *pz, float *vx, float *vy, float *vz, float *fx, float *fy, float *fz, float *ux, float *uy, float *uz);

194 28 audio_3d_set_distance_factor 0 4 217 42 AudioManager::audio_3d_set_distance_factor 0 1 94 261
// Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet.
70
virtual void AudioManager::audio_3d_set_distance_factor(float factor);

195 28 audio_3d_get_distance_factor 0 4 217 42 AudioManager::audio_3d_get_distance_factor 0 1 95 261
// Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet.
69
virtual float AudioManager::audio_3d_get_distance_factor(void) const;

196 27 audio_3d_set_doppler_factor 0 4 217 41 AudioManager::audio_3d_set_doppler_factor 0 1 96 125
// Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0
69
virtual void AudioManager::audio_3d_set_doppler_factor(float factor);

197 27 audio_3d_get_doppler_factor 0 4 217 41 AudioManager::audio_3d_get_doppler_factor 0 1 97 125
// Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0
68
virtual float AudioManager::audio_3d_get_doppler_factor(void) const;

198 28 audio_3d_set_drop_off_factor 0 4 217 42 AudioManager::audio_3d_set_drop_off_factor 0 1 98 157
// Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0
70
virtual void AudioManager::audio_3d_set_drop_off_factor(float factor);

199 28 audio_3d_get_drop_off_factor 0 4 217 42 AudioManager::audio_3d_get_drop_off_factor 0 1 99 157
// Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0
69
virtual float AudioManager::audio_3d_get_drop_off_factor(void) const;

200 16 get_dls_pathname 0 4 217 30 AudioManager::get_dls_pathname 0 1 100 0
53
static Filename AudioManager::get_dls_pathname(void);

201 6 output 0 4 217 20 AudioManager::output 0 1 101 0
54
virtual void AudioManager::output(ostream &out) const;

202 5 write 0 4 217 19 AudioManager::write 0 1 102 0
53
virtual void AudioManager::write(ostream &out) const;

203 25 set_speaker_configuration 0 4 217 39 AudioManager::set_speaker_configuration 0 9 103 104 105 106 107 108 109 110 111 52
// set_speaker_configuration is a Miles only method.
379
virtual void AudioManager::set_speaker_configuration(LVecBase3f *speaker1, LVecBase3f *speaker2 = ((void *)(0)), LVecBase3f *speaker3 = ((void *)(0)), LVecBase3f *speaker4 = ((void *)(0)), LVecBase3f *speaker5 = ((void *)(0)), LVecBase3f *speaker6 = ((void *)(0)), LVecBase3f *speaker7 = ((void *)(0)), LVecBase3f *speaker8 = ((void *)(0)), LVecBase3f *speaker9 = ((void *)(0)));

204 14 get_class_type 0 4 217 28 AudioManager::get_class_type 0 1 112 0
53
static TypeHandle AudioManager::get_class_type(void);

205 16 AudioLoadRequest 0 4 221 34 AudioLoadRequest::AudioLoadRequest 0 1 113 842
// Filename: audioLoadRequest.I
// Created by:  drose (29Aug06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::Constructor
//       Access: Published
//  Description: Create a new AudioLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
126
inline AudioLoadRequest::AudioLoadRequest(AudioManager *audio_manager, basic_string< char > const &filename, bool positional);

206 17 get_audio_manager 0 4 221 35 AudioLoadRequest::get_audio_manager 0 1 114 328
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_audio_manager
//       Access: Published
//  Description: Returns the AudioManager that will serve this
//               asynchronous AudioLoadRequest.
////////////////////////////////////////////////////////////////////
69
inline AudioManager *AudioLoadRequest::get_audio_manager(void) const;

207 12 get_filename 0 4 221 30 AudioLoadRequest::get_filename 0 1 115 319
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous AudioLoadRequest.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > const &AudioLoadRequest::get_filename(void) const;

208 14 get_positional 0 4 221 32 AudioLoadRequest::get_positional 0 1 116 328
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_positional
//       Access: Published
//  Description: Returns the positional flag associated with this
//               asynchronous AudioLoadRequest.
////////////////////////////////////////////////////////////////////
57
inline bool AudioLoadRequest::get_positional(void) const;

209 8 is_ready 0 4 221 26 AudioLoadRequest::is_ready 0 1 117 416
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the sound loaded by calling get_sound().
////////////////////////////////////////////////////////////////////
51
inline bool AudioLoadRequest::is_ready(void) const;

210 9 get_sound 0 4 221 27 AudioLoadRequest::get_sound 0 1 118 410
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_sound
//       Access: Published
//  Description: Returns the sound that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
////////////////////////////////////////////////////////////////////
59
inline AudioSound *AudioLoadRequest::get_sound(void) const;

211 14 get_class_type 0 4 221 32 AudioLoadRequest::get_class_type 0 1 119 0
57
static TypeHandle AudioLoadRequest::get_class_type(void);

212 17 ~AudioLoadRequest 0 4 221 35 AudioLoadRequest::~AudioLoadRequest 0 0 0
42
AudioLoadRequest::~AudioLoadRequest(void);

119
1 14 Dtool_M_1lijEN 0 7 3 223 0 14 Dtool_M_1lijEN 0 0 
2 14 Dtool_M_1lk3Vr 0 4 4 224 0 14 Dtool_M_1lk3Vr 745 // Filename: filterProperties.I
// Created by: jyelon (01Aug2007)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::clear
//      Access: Published
// Description: Removes all DSP postprocessing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 223  
3 14 Dtool_M_1lB4GQ 0 4 5 224 0 14 Dtool_M_1lB4GQ 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::apply_lowpass
//      Access: Published
// Description: Add a lowpass filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 223  11 cutoff_freq 1 225  11 resonance_q 1 225  
4 14 Dtool_M_1l_Crd 0 4 6 224 0 14 Dtool_M_1l_Crd 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_highpass
//      Access: Published
// Description: Add a highpass filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 223  11 cutoff_freq 1 225  11 resonance_q 1 225  
5 14 Dtool_M_1lDehi 0 4 7 224 0 14 Dtool_M_1lDehi 269 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_echo
//      Access: Published
// Description: Add a echo filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 223  6 drymix 1 225  6 wetmix 1 225  5 delay 1 225  10 decayratio 1 225  
6 14 Dtool_M_1lssQI 0 4 8 224 0 14 Dtool_M_1lssQI 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_flange
//      Access: Published
// Description: Add a flange filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 223  6 drymix 1 225  6 wetmix 1 225  5 depth 1 225  4 rate 1 225  
7 14 Dtool_M_1lRVS0 0 4 9 224 0 14 Dtool_M_1lRVS0 275 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_distort
//      Access: Published
// Description: Add a distort filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 2 4 this 3 223  5 level 1 225  
8 14 Dtool_M_1lS5bH 0 4 10 224 0 14 Dtool_M_1lS5bH 279 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_normalize
//      Access: Published
// Description: Add a normalize filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 223  8 fadetime 1 225  9 threshold 1 225  6 maxamp 1 225  
9 14 Dtool_M_1lr_bf 0 4 11 224 0 14 Dtool_M_1lr_bf 275 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_parameq
//      Access: Published
// Description: Add a parameq filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 223  11 center_freq 1 225  9 bandwidth 1 225  4 gain 1 225  
10 14 Dtool_M_1lSrBA 0 4 12 224 0 14 Dtool_M_1lSrBA 281 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_pitchshift
//      Access: Published
// Description: Add a pitchshift filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 223  5 pitch 1 225  7 fftsize 1 225  7 overlap 1 225  
11 14 Dtool_M_1lENnG 0 4 13 224 0 14 Dtool_M_1lENnG 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_chorus
//      Access: Published
// Description: Add a chorus filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 9 4 this 3 223  6 drymix 1 225  4 wet1 1 225  4 wet2 1 225  4 wet3 1 225  5 delay 1 225  4 rate 1 225  5 depth 1 225  8 feedback 1 225  
12 14 Dtool_M_1l_I99 0 4 14 224 0 14 Dtool_M_1l_I99 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_reverb
//      Access: Published
// Description: Add a reverb filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 6 4 this 3 223  6 drymix 1 225  6 wetmix 1 225  8 roomsize 1 225  4 damp 1 225  5 width 1 225  
13 14 Dtool_M_1lF294 0 4 15 224 0 14 Dtool_M_1lF294 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_compress
//      Access: Published
// Description: Add a compress filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 223  9 threshold 1 225  6 attack 1 225  7 release 1 225  10 gainmakeup 1 225  
14 14 Dtool_M_1lAp3V 0 7 16 227 0 14 Dtool_M_1lAp3V 0 0 
15 14 Dtool_M_1l_vhh 0 4 18 224 0 14 Dtool_M_1l_vhh 359 // For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect). 1 4 this 3 228  
16 14 Dtool_M_1ldOiG 0 4 19 224 0 14 Dtool_M_1ldOiG 359 // For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect). 1 4 this 3 228  
17 14 Dtool_M_1lsQm7 0 4 20 224 0 14 Dtool_M_1lsQm7 67 // loop: false = play once; true = play forever.
// inits to false. 2 4 this 3 228  4 loop 1 229  
18 14 Dtool_M_1lepXp 0 4 20 224 0 14 Dtool_M_1lepXp 67 // loop: false = play once; true = play forever.
// inits to false. 1 4 this 3 228  
19 14 Dtool_M_1lk9fo 0 6 21 229 0 14 Dtool_M_1lk9fo 67 // loop: false = play once; true = play forever.
// inits to false. 1 4 this 3 230  
20 14 Dtool_M_1lZahU 0 4 22 224 0 14 Dtool_M_1lZahU 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 2 4 this 3 228  10 loop_count 1 232  
21 14 Dtool_M_1lVL64 0 4 22 224 0 14 Dtool_M_1lVL64 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 1 4 this 3 228  
22 14 Dtool_M_1lUTas 0 6 23 232 0 14 Dtool_M_1lUTas 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 1 4 this 3 230  
23 14 Dtool_M_1lsxJX 0 4 24 224 0 14 Dtool_M_1lsxJX 688 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   PN_stdfloat percent_complete = s.get_time() / s.length(); 2 4 this 3 228  10 start_time 1 225  
24 14 Dtool_M_1l2n_4 0 4 24 224 0 14 Dtool_M_1l2n_4 688 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   PN_stdfloat percent_complete = s.get_time() / s.length(); 1 4 this 3 228  
25 14 Dtool_M_1lhsI4 0 6 25 225 0 14 Dtool_M_1lhsI4 688 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   PN_stdfloat percent_complete = s.get_time() / s.length(); 1 4 this 3 230  
26 14 Dtool_M_1le1I3 0 4 26 224 0 14 Dtool_M_1le1I3 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 2 4 this 3 228  6 volume 1 225  
27 14 Dtool_M_1l7_nT 0 4 26 224 0 14 Dtool_M_1l7_nT 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 228  
28 14 Dtool_M_1lzxr3 0 6 27 225 0 14 Dtool_M_1lzxr3 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 230  
29 14 Dtool_M_1lnpIq 0 4 28 224 0 14 Dtool_M_1lnpIq 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 2 4 this 3 228  13 balance_right 1 225  
30 14 Dtool_M_1lJ3_4 0 4 28 224 0 14 Dtool_M_1lJ3_4 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 1 4 this 3 228  
31 14 Dtool_M_1lwRl7 0 6 29 225 0 14 Dtool_M_1lwRl7 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 1 4 this 3 230  
32 14 Dtool_M_1lE6kx 0 4 30 224 0 14 Dtool_M_1lE6kx 64 // play_rate is any positive PN_stdfloat value.
// inits to 1.0. 2 4 this 3 228  9 play_rate 1 225  
33 14 Dtool_M_1lgAS1 0 4 30 224 0 14 Dtool_M_1lgAS1 64 // play_rate is any positive PN_stdfloat value.
// inits to 1.0. 1 4 this 3 228  
34 14 Dtool_M_1lSK3c 0 6 31 225 0 14 Dtool_M_1lSK3c 64 // play_rate is any positive PN_stdfloat value.
// inits to 1.0. 1 4 this 3 230  
35 14 Dtool_M_1l_M0J 0 4 32 224 0 14 Dtool_M_1l_M0J 28 // inits to manager's state. 2 4 this 3 228  4 flag 1 229  
36 14 Dtool_M_1lTHGV 0 4 32 224 0 14 Dtool_M_1lTHGV 28 // inits to manager's state. 1 4 this 3 228  
37 14 Dtool_M_1lyDK5 0 6 33 229 0 14 Dtool_M_1lyDK5 28 // inits to manager's state. 1 4 this 3 230  
38 14 Dtool_M_1lkLpd 0 4 34 224 0 14 Dtool_M_1lkLpd 126 // Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string. 2 4 this 3 228  5 event 1 233  
39 14 Dtool_M_1lyGD1 0 6 35 233 0 14 Dtool_M_1lyGD1 126 // Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string. 1 4 this 3 230  
40 14 Dtool_M_1l10F5 0 6 36 233 0 14 Dtool_M_1l10F5 47 // There is no set_name(), this is intentional. 1 4 this 3 230  
41 14 Dtool_M_1l1TDx 0 6 37 225 0 14 Dtool_M_1l1TDx 35 // return: playing time in seconds. 1 4 this 3 230  
42 14 Dtool_M_1lOwRY 0 4 38 224 0 14 Dtool_M_1lOwRY 177 // Controls the position of this sound's emitter.
// px, py and pz are the emitter's position.
// vx, vy and vz are the emitter's velocity in UNITS PER SECOND (default: meters). 7 4 this 3 228  2 px 1 225  2 py 1 225  2 pz 1 225  2 vx 1 225  2 vy 1 225  2 vz 1 225  
43 14 Dtool_M_1lkQiv 0 4 40 224 0 14 Dtool_M_1lkQiv 175 // Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0 2 4 this 3 228  4 dist 1 225  
44 14 Dtool_M_1lO2dr 0 6 41 225 0 14 Dtool_M_1lO2dr 175 // Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0 1 4 this 3 230  
45 14 Dtool_M_1lq_vO 0 4 42 224 0 14 Dtool_M_1lq_vO 222 // Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0 2 4 this 3 228  4 dist 1 225  
46 14 Dtool_M_1lMIqK 0 6 43 225 0 14 Dtool_M_1lMIqK 222 // Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0 1 4 this 3 230  
47 14 Dtool_M_1lgKBm 0 6 44 225 0 14 Dtool_M_1lgKBm 314 // *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point. 2 4 this 3 228  7 speaker 1 234  
48 14 Dtool_M_1l7IMU 0 4 45 224 0 14 Dtool_M_1l7IMU 314 // *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point. 9 4 this 3 228  9 frontleft 1 225  10 frontright 1 225  6 center 1 225  3 sub 1 225  8 backleft 1 225  9 backright 1 225  8 sideleft 1 225  9 sideright 1 225  
49 14 Dtool_M_1lBoqv 0 6 46 225 0 14 Dtool_M_1lBoqv 0 2 4 this 3 228  5 index 1 234  
50 14 Dtool_M_1lny4l 0 4 47 224 0 14 Dtool_M_1lny4l 0 10 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  6 level5 1 225  6 level6 1 225  6 level7 1 225  6 level8 1 225  6 level9 1 225  
51 14 Dtool_M_1l7xhL 0 4 47 224 0 14 Dtool_M_1l7xhL 0 9 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  6 level5 1 225  6 level6 1 225  6 level7 1 225  6 level8 1 225  
52 14 Dtool_M_1lRQ7p 0 4 47 224 0 14 Dtool_M_1lRQ7p 0 8 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  6 level5 1 225  6 level6 1 225  6 level7 1 225  
53 14 Dtool_M_1l6fbA 0 4 47 224 0 14 Dtool_M_1l6fbA 0 7 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  6 level5 1 225  6 level6 1 225  
54 14 Dtool_M_1lmEB6 0 4 47 224 0 14 Dtool_M_1lmEB6 0 6 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  6 level5 1 225  
55 14 Dtool_M_1leJ_T 0 4 47 224 0 14 Dtool_M_1leJ_T 0 5 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  6 level4 1 225  
56 14 Dtool_M_1leTS6 0 4 47 224 0 14 Dtool_M_1leTS6 0 4 4 this 3 228  6 level1 1 225  6 level2 1 225  6 level3 1 225  
57 14 Dtool_M_1lk4Ci 0 4 47 224 0 14 Dtool_M_1lk4Ci 0 3 4 this 3 228  6 level1 1 225  6 level2 1 225  
58 14 Dtool_M_1lsaQ7 0 4 47 224 0 14 Dtool_M_1lsaQ7 0 2 4 this 3 228  6 level1 1 225  
59 14 Dtool_M_1lcxQw 0 6 48 234 0 14 Dtool_M_1lcxQw 0 1 4 this 3 228  
60 14 Dtool_M_1lwzLG 0 4 49 224 0 14 Dtool_M_1lwzLG 0 2 4 this 3 228  8 priority 1 234  
61 14 Dtool_M_1lhoiO 0 6 50 229 0 14 Dtool_M_1lhoiO 0 2 4 this 3 228  6 config 1 223  
62 14 Dtool_M_1lmGiV 0 6 52 216 0 14 Dtool_M_1lmGiV 0 1 4 this 3 230  
63 14 Dtool_M_1lhT27 0 4 53 224 0 14 Dtool_M_1lhT27 0 2 4 this 3 230  3 out 1 235  
64 14 Dtool_M_1l85SL 0 4 54 224 0 14 Dtool_M_1l85SL 0 2 4 this 3 230  3 out 1 235  
65 14 Dtool_M_1lwXI1 0 7 55 227 0 14 Dtool_M_1lwXI1 0 0 
66 14 Dtool_M_1l30SK 0 6 60 234 0 14 Dtool_M_1l30SK 0 1 4 this 3 237  
67 14 Dtool_M_1lWsSe 0 4 61 224 0 14 Dtool_M_1lWsSe 0 2 4 this 3 237  3 cat 1 218  
68 14 Dtool_M_1lhUR_ 0 6 62 229 0 14 Dtool_M_1lhUR_ 0 2 4 this 3 237  6 config 1 223  
69 14 Dtool_M_1lvL8W 0 7 63 237 0 14 Dtool_M_1lvL8W 315 // Create an AudioManager for each category of sounds you have.
// E.g.
//   MySoundEffects = create_AudioManager::AudioManager();
//   MyMusicManager = create_AudioManager::AudioManager();
//   ...
//   my_sound = MySoundEffects.get_sound("neatSfx.mp3");
//   my_music = MyMusicManager.get_sound("introTheme.mid"); 0 
70 14 Dtool_M_1lHh1v 0 4 64 224 0 14 Dtool_M_1lHh1v 0 1 4 this 3 237  
71 14 Dtool_M_1lYnlD 0 6 65 229 0 14 Dtool_M_1lYnlD 411 // If you're interested in knowing whether this audio manager
// is valid, here's the call to do it.  It is not necessary
// to check whether the audio manager is valid before making other
// calls.  You are free to use an invalid sound manager, you
// may get silent sounds from it though.  The sound manager and
// the sounds it creates should not crash the application even
// when the objects are not valid. 1 4 this 3 237  
72 14 Dtool_M_1lA0bS 0 7 66 228 0 14 Dtool_M_1lA0bS 15 // Get a sound: 4 4 this 3 237  6 source 1 238  10 positional 1 229  4 mode 1 234  
73 14 Dtool_M_1lC3Ua 0 7 66 228 0 14 Dtool_M_1lC3Ua 15 // Get a sound: 3 4 this 3 237  6 source 1 238  10 positional 1 229  
74 14 Dtool_M_1lP8Fq 0 7 66 228 0 14 Dtool_M_1lP8Fq 15 // Get a sound: 2 4 this 3 237  6 source 1 238  
75 14 Dtool_M_1l02J_ 0 7 66 228 0 14 Dtool_M_1l02J_ 15 // Get a sound: 4 4 this 3 237  9 file_name 1 233  10 positional 1 229  4 mode 1 234  
76 14 Dtool_M_1lz8cY 0 7 66 228 0 14 Dtool_M_1lz8cY 15 // Get a sound: 3 4 this 3 237  9 file_name 1 233  10 positional 1 229  
77 14 Dtool_M_1lyCgN 0 7 66 228 0 14 Dtool_M_1lyCgN 15 // Get a sound: 2 4 this 3 237  9 file_name 1 233  
78 14 Dtool_M_1lo8vb 0 7 67 228 0 14 Dtool_M_1lo8vb 0 1 4 this 3 237  
79 14 Dtool_M_1lPTiB 0 4 68 224 0 14 Dtool_M_1lPTiB 281 // Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache. 2 4 this 3 237  9 file_name 1 233  
80 14 Dtool_M_1lV3uV 0 4 69 224 0 14 Dtool_M_1lV3uV 281 // Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache. 1 4 this 3 237  
81 14 Dtool_M_1lJsMW 0 4 70 224 0 14 Dtool_M_1lJsMW 0 2 4 this 3 237  5 count 1 240  
82 14 Dtool_M_1lZu93 0 6 71 240 0 14 Dtool_M_1lZu93 0 1 4 this 3 241  
83 14 Dtool_M_1lqSxW 0 4 72 224 0 14 Dtool_M_1lqSxW 206 // Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0. 2 4 this 3 237  6 volume 1 225  
84 14 Dtool_M_1lr_Wv 0 6 73 225 0 14 Dtool_M_1lr_Wv 206 // Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 241  
85 14 Dtool_M_1lJ_GE 0 4 74 224 0 14 Dtool_M_1lJ_GE 362 // Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true. 2 4 this 3 237  4 flag 1 229  
86 14 Dtool_M_1lb_cl 0 6 75 229 0 14 Dtool_M_1lb_cl 362 // Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true. 1 4 this 3 241  
87 14 Dtool_M_1l0VhR 0 4 76 224 0 14 Dtool_M_1l0VhR 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 2 4 this 3 237  5 limit 1 240  
88 14 Dtool_M_1lRuKw 0 4 76 224 0 14 Dtool_M_1lRuKw 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 1 4 this 3 237  
89 14 Dtool_M_1l4gS3 0 6 77 240 0 14 Dtool_M_1l4gS3 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 1 4 this 3 241  
90 14 Dtool_M_1lUjBl 0 4 78 224 0 14 Dtool_M_1lUjBl 371 // This is likely to be a utility function for the concurrent_sound_limit
// options.  It is exposed as an API, because it's reasonable that it
// may be useful to be here.  It reduces the number of concurrently
// playing sounds to count by some implementation specific means.
// If the number of sounds currently playing is at or below count then
// there is no effect. 2 4 this 3 237  5 count 1 240  
91 14 Dtool_M_1lBZTi 0 4 79 224 0 14 Dtool_M_1lBZTi 182 // Stop playback on all sounds managed by this manager.
// This is effectively the same as reduce_sounds_playing_to(0), but
// this call may be for efficient on some implementations. 1 4 this 3 237  
92 14 Dtool_M_1lgvhM 0 4 80 224 0 14 Dtool_M_1lgvhM 79 // This should be called every frame.  Failure to call could
// cause problems. 1 4 this 3 237  
93 14 Dtool_M_1lBiqK 0 4 81 224 0 14 Dtool_M_1lBiqK 327 // This controls the "set of ears" that listens to 3D spacialized sound
// px, py, pz are position coordinates. 
// vx, vy, vz are a velocity vector in UNITS PER SECOND (default: meters). 
// fx, fy and fz are the respective components of a unit forward-vector
// ux, uy and uz are the respective components of a unit up-vector 13 4 this 3 237  2 px 1 225  2 py 1 225  2 pz 1 225  2 vx 1 225  2 vy 1 225  2 vz 1 225  2 fx 1 225  2 fy 1 225  2 fz 1 225  2 ux 1 225  2 uy 1 225  2 uz 1 225  
94 14 Dtool_M_1lBlhR 0 4 83 224 0 14 Dtool_M_1lBlhR 261 // Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet. 2 4 this 3 237  6 factor 1 225  
95 14 Dtool_M_1lhJ5G 0 6 84 225 0 14 Dtool_M_1lhJ5G 261 // Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet. 1 4 this 3 241  
96 14 Dtool_M_1lR8Fh 0 4 85 224 0 14 Dtool_M_1lR8Fh 125 // Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0 2 4 this 3 237  6 factor 1 225  
97 14 Dtool_M_1lhs_N 0 6 86 225 0 14 Dtool_M_1lhs_N 125 // Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0 1 4 this 3 241  
98 14 Dtool_M_1lQhOE 0 4 87 224 0 14 Dtool_M_1lQhOE 157 // Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0 2 4 this 3 237  6 factor 1 225  
99 14 Dtool_M_1lV1m5 0 6 88 225 0 14 Dtool_M_1lV1m5 157 // Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0 1 4 this 3 241  
100 14 Dtool_M_1lvzRi 0 7 89 244 0 14 Dtool_M_1lvzRi 0 0 
101 14 Dtool_M_1lvvgN 0 4 90 224 0 14 Dtool_M_1lvvgN 0 2 4 this 3 241  3 out 1 235  
102 14 Dtool_M_1l1L41 0 4 91 224 0 14 Dtool_M_1l1L41 0 2 4 this 3 241  3 out 1 235  
103 14 Dtool_M_1l0kBi 0 4 92 224 0 14 Dtool_M_1l0kBi 52 // set_speaker_configuration is a Miles only method. 10 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  8 speaker5 1 245  8 speaker6 1 245  8 speaker7 1 245  8 speaker8 1 245  8 speaker9 1 245  
104 14 Dtool_M_1larNz 0 4 92 224 0 14 Dtool_M_1larNz 52 // set_speaker_configuration is a Miles only method. 9 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  8 speaker5 1 245  8 speaker6 1 245  8 speaker7 1 245  8 speaker8 1 245  
105 14 Dtool_M_1luJu3 0 4 92 224 0 14 Dtool_M_1luJu3 52 // set_speaker_configuration is a Miles only method. 8 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  8 speaker5 1 245  8 speaker6 1 245  8 speaker7 1 245  
106 14 Dtool_M_1lzuyJ 0 4 92 224 0 14 Dtool_M_1lzuyJ 52 // set_speaker_configuration is a Miles only method. 7 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  8 speaker5 1 245  8 speaker6 1 245  
107 14 Dtool_M_1lr_3R 0 4 92 224 0 14 Dtool_M_1lr_3R 52 // set_speaker_configuration is a Miles only method. 6 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  8 speaker5 1 245  
108 14 Dtool_M_1lkCJy 0 4 92 224 0 14 Dtool_M_1lkCJy 52 // set_speaker_configuration is a Miles only method. 5 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  8 speaker4 1 245  
109 14 Dtool_M_1l9hNz 0 4 92 224 0 14 Dtool_M_1l9hNz 52 // set_speaker_configuration is a Miles only method. 4 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  8 speaker3 1 245  
110 14 Dtool_M_1lFzQ3 0 4 92 224 0 14 Dtool_M_1lFzQ3 52 // set_speaker_configuration is a Miles only method. 3 4 this 3 237  8 speaker1 1 245  8 speaker2 1 245  
111 14 Dtool_M_1l63gH 0 4 92 224 0 14 Dtool_M_1l63gH 52 // set_speaker_configuration is a Miles only method. 2 4 this 3 237  8 speaker1 1 245  
112 14 Dtool_M_1lbs2a 0 7 93 227 0 14 Dtool_M_1lbs2a 0 0 
113 14 Dtool_M_1lsPCP 0 7 96 247 212 14 Dtool_M_1lsPCP 842 // Filename: audioLoadRequest.I
// Created by:  drose (29Aug06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::Constructor
//       Access: Published
//  Description: Create a new AudioLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 3 13 audio_manager 1 237  8 filename 1 233  10 positional 1 229  
114 14 Dtool_M_1ltvZa 0 7 97 237 0 14 Dtool_M_1ltvZa 328 ////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_audio_manager
//       Access: Published
//  Description: Returns the AudioManager that will serve this
//               asynchronous AudioLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 248  
115 14 Dtool_M_1lIxF9 0 6 98 233 0 14 Dtool_M_1lIxF9 319 ////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous AudioLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 248  
116 14 Dtool_M_1l__jM 0 6 99 229 0 14 Dtool_M_1l__jM 328 ////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_positional
//       Access: Published
//  Description: Returns the positional flag associated with this
//               asynchronous AudioLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 248  
117 14 Dtool_M_1lseCz 0 6 100 229 0 14 Dtool_M_1lseCz 416 ////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the sound loaded by calling get_sound().
//////////////////////////////////////////////////////////////////// 1 4 this 3 248  
118 14 Dtool_M_1lUOQi 0 7 101 228 0 14 Dtool_M_1lUOQi 410 ////////////////////////////////////////////////////////////////////
//     Function: AudioLoadRequest::get_sound
//       Access: Published
//  Description: Returns the sound that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 248  
119 14 Dtool_M_1lz0Qm 0 7 102 227 0 14 Dtool_M_1lz0Qm 0 0 
38
213 16 FilterProperties 0 75777 16 FilterProperties 16 FilterProperties 0 0 0 1 120 0 0 13 121 122 123 124 125 126 127 128 129 130 131 132 133 0 0 1 0 214 0 0 0 0 243
////////////////////////////////////////////////////////////////////
//       Class : FilterProperties
// Description : Stores a configuration for a set of audio DSP filters.
////////////////////////////////////////////////////////////////////

214 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

215 10 AudioSound 0 75777 10 AudioSound 10 AudioSound 0 0 0 0 0 0 37 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 0 0 1 0 214 0 0 0 1 216 0

216 11 SoundStatus 0 794624 23 AudioSound::SoundStatus 23 AudioSound::SoundStatus 215 0 0 0 0 0 0 0 0 0 3 3 BAD 15 AudioSound::BAD 0 5 READY 17 AudioSound::READY 1 7 PLAYING 19 AudioSound::PLAYING 2 0 0

217 12 AudioManager 0 75777 12 AudioManager 12 AudioManager 0 0 0 0 0 0 34 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 0 0 1 0 214 0 0 0 3 218 219 220 0

218 19 SpeakerModeCategory 0 794624 33 AudioManager::SpeakerModeCategory 33 AudioManager::SpeakerModeCategory 217 0 0 0 0 0 0 0 0 0 10 15 SPEAKERMODE_raw 29 AudioManager::SPEAKERMODE_raw 0 16 SPEAKERMODE_mono 30 AudioManager::SPEAKERMODE_mono 1 18 SPEAKERMODE_stereo 32 AudioManager::SPEAKERMODE_stereo 2 16 SPEAKERMODE_quad 30 AudioManager::SPEAKERMODE_quad 3 20 SPEAKERMODE_surround 34 AudioManager::SPEAKERMODE_surround 4 19 SPEAKERMODE_5point1 33 AudioManager::SPEAKERMODE_5point1 5 19 SPEAKERMODE_7point1 33 AudioManager::SPEAKERMODE_7point1 6 20 SPEAKERMODE_prologic 34 AudioManager::SPEAKERMODE_prologic 7 15 SPEAKERMODE_max 29 AudioManager::SPEAKERMODE_max 8 17 SPEAKERMODE_COUNT 31 AudioManager::SPEAKERMODE_COUNT 9 0 0

219 9 SpeakerId 0 794624 23 AudioManager::SpeakerId 23 AudioManager::SpeakerId 217 0 0 0 0 0 0 0 0 0 10 8 SPK_none 22 AudioManager::SPK_none 0 13 SPK_frontleft 27 AudioManager::SPK_frontleft 1 14 SPK_frontright 28 AudioManager::SPK_frontright 2 10 SPK_center 24 AudioManager::SPK_center 3 7 SPK_sub 21 AudioManager::SPK_sub 4 12 SPK_backleft 26 AudioManager::SPK_backleft 5 13 SPK_backright 27 AudioManager::SPK_backright 6 12 SPK_sideleft 26 AudioManager::SPK_sideleft 7 13 SPK_sideright 27 AudioManager::SPK_sideright 8 9 SPK_COUNT 23 AudioManager::SPK_COUNT 9 0 0

220 10 StreamMode 0 794624 24 AudioManager::StreamMode 24 AudioManager::StreamMode 217 0 0 0 0 0 0 0 0 0 3 12 SM_heuristic 26 AudioManager::SM_heuristic 0 9 SM_sample 23 AudioManager::SM_sample 1 9 SM_stream 23 AudioManager::SM_stream 2 0 0

221 16 AudioLoadRequest 0 141313 16 AudioLoadRequest 16 AudioLoadRequest 0 0 0 1 205 212 0 6 206 207 208 209 210 211 0 0 1 0 222 0 0 0 0 554
////////////////////////////////////////////////////////////////////
//       Class : AudioLoadRequest
// Description : A class object that manages a single asynchronous
//               audio load request.  This works in conjunction with
//               the Loader class defined in pgraph, or really with
//               any AsyncTaskManager.  Create a new AudioLoadRequest,
//               and add it to the loader via load_async(), to begin
//               an asynchronous load.
////////////////////////////////////////////////////////////////////

222 9 AsyncTask 0 2049 9 AsyncTask 9 AsyncTask 0 0 0 0 0 0 0 0 0 0 0 0 434
////////////////////////////////////////////////////////////////////
//       Class : AsyncTask
// Description : This class represents a concrete task performed by an
//               AsyncManager.  Normally, you would subclass from this
//               class, and override do_task(), to define the
//               functionality you wish to have the task perform.
////////////////////////////////////////////////////////////////////

223 18 FilterProperties * 0 8576 18 FilterProperties * 18 FilterProperties * 0 0 213 0 0 0 0 0 0 0 0 0 0

224 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

225 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

226 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

227 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 226 0 0 0 0 0 0 0 0 0 0

228 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 215 0 0 0 0 0 0 0 0 0 0

229 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

230 18 AudioSound const * 0 8576 18 AudioSound const * 18 AudioSound const * 0 0 231 0 0 0 0 0 0 0 0 0 0

231 16 AudioSound const 0 8832 16 AudioSound const 16 AudioSound const 0 0 215 0 0 0 0 0 0 0 0 0 0

232 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

233 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

234 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

235 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 236 0 0 0 0 0 0 0 0 0 0

236 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

237 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 217 0 0 0 0 0 0 0 0 0 0

238 12 MovieAudio * 0 8576 12 MovieAudio * 12 MovieAudio * 0 0 239 0 0 0 0 0 0 0 0 0 0

239 10 MovieAudio 0 2048 10 MovieAudio 10 MovieAudio 0 0 0 0 0 0 0 0 0 0 0 0 673
////////////////////////////////////////////////////////////////////
//       Class : MovieAudio
// Description : A MovieAudio is actually any source that provides
//               a sequence of audio samples.  That could include an
//               AVI file, a microphone, or an internet TV station.
//
//               The difference between a MovieAudio and a
//               MovieAudioCursor is like the difference between a
//               filename and a file handle.  The MovieAudio just
//               indicates a particular movie.  The MovieAudioCursor
//               is what allows access.
////////////////////////////////////////////////////////////////////

240 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

241 20 AudioManager const * 0 8576 20 AudioManager const * 20 AudioManager const * 0 0 242 0 0 0 0 0 0 0 0 0 0

242 18 AudioManager const 0 8832 18 AudioManager const 18 AudioManager const 0 0 217 0 0 0 0 0 0 0 0 0 0

243 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

244 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 243 0 0 0 0 0 0 0 0 0 0

245 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 246 0 0 0 0 0 0 0 0 0 0

246 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

247 18 AudioLoadRequest * 0 8576 18 AudioLoadRequest * 18 AudioLoadRequest * 0 0 221 0 0 0 0 0 0 0 0 0 0

248 24 AudioLoadRequest const * 0 8576 24 AudioLoadRequest const * 24 AudioLoadRequest const * 0 0 249 0 0 0 0 0 0 0 0 0 0

249 22 AudioLoadRequest const 0 8832 22 AudioLoadRequest const 22 AudioLoadRequest const 0 0 221 0 0 0 0 0 0 0 0 0 0

250 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
0
