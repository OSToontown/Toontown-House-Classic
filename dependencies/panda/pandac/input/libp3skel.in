1365933254
2 2
9 libp3skel 4 5lWe 9 pandaskel 
12
12 9 BasicSkel 0 4 24 20 BasicSkel::BasicSkel 0 1 1 703
// Filename: basicSkel.I
// Created by: jyelon (31Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline BasicSkel::BasicSkel(void);

13 10 ~BasicSkel 0 4 24 21 BasicSkel::~BasicSkel 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
35
inline BasicSkel::~BasicSkel(void);

14 9 set_value 0 4 24 20 BasicSkel::set_value 0 1 2 301
// These inline functions allow you to get and set _value.

////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::set_value
//       Access: Public
//  Description: Stores an integer value.
////////////////////////////////////////////////////////////////////
40
inline void BasicSkel::set_value(int n);

15 9 get_value 0 4 24 20 BasicSkel::get_value 0 1 3 322
// These inline functions allow you to get and set _value.

////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
////////////////////////////////////////////////////////////////////
38
inline int BasicSkel::get_value(void);

16 13 set_value_alt 0 4 24 24 BasicSkel::set_value_alt 0 1 4 414
// These do the same thing as the functions above.

////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::set_value_alt
//       Access: Public
//  Description: Stores an integer value.  Exact same functionality
//               as set_value, except that this isn't an inline
//               function.
////////////////////////////////////////////////////////////////////
37
void BasicSkel::set_value_alt(int n);

17 13 get_value_alt 0 4 24 24 BasicSkel::get_value_alt 0 1 5 430
// These do the same thing as the functions above.

////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//               Exact same functionality as get_value, except
//               that this isn't an inline function.
////////////////////////////////////////////////////////////////////
35
int BasicSkel::get_value_alt(void);

18 9 TypedSkel 0 4 25 20 TypedSkel::TypedSkel 0 1 6 703
// Filename: typedSkel.I
// Created by: jyelon (31Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline TypedSkel::TypedSkel(void);

19 9 set_value 0 4 25 20 TypedSkel::set_value 0 1 7 301
// These inline functions allow you to get and set _value.

////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::set_value
//       Access: Public
//  Description: Stores an integer value.
////////////////////////////////////////////////////////////////////
40
inline void TypedSkel::set_value(int n);

20 9 get_value 0 4 25 20 TypedSkel::get_value 0 1 8 322
// These inline functions allow you to get and set _value.

////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
////////////////////////////////////////////////////////////////////
38
inline int TypedSkel::get_value(void);

21 13 set_value_alt 0 4 25 24 TypedSkel::set_value_alt 0 1 9 414
// These do the same thing as the functions above.

////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::set_value_alt
//       Access: Public
//  Description: Stores an integer value.  Exact same functionality
//               as set_value, except that this isn't an inline
//               function.
////////////////////////////////////////////////////////////////////
37
void TypedSkel::set_value_alt(int n);

22 13 get_value_alt 0 4 25 24 TypedSkel::get_value_alt 0 1 10 430
// These do the same thing as the functions above.

////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//               Exact same functionality as get_value, except
//               that this isn't an inline function.
////////////////////////////////////////////////////////////////////
35
int TypedSkel::get_value_alt(void);

23 14 get_class_type 0 4 25 25 TypedSkel::get_class_type 0 1 11 0
50
static TypeHandle TypedSkel::get_class_type(void);

11
1 14 Dtool_5lWerD4O 0 7 2 27 13 14 Dtool_5lWerD4O 703 // Filename: basicSkel.I
// Created by: jyelon (31Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_5lWexjnf 0 4 4 29 0 14 Dtool_5lWexjnf 241 ////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::set_value
//       Access: Public
//  Description: Stores an integer value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 27  1 n 1 28  
3 14 Dtool_5lWetZe4 0 6 5 28 0 14 Dtool_5lWetZe4 262 ////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 27  
4 14 Dtool_5lWeRwA3 0 4 6 29 0 14 Dtool_5lWeRwA3 362 ////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::set_value_alt
//       Access: Public
//  Description: Stores an integer value.  Exact same functionality
//               as set_value, except that this isn't an inline
//               function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 27  1 n 1 28  
5 14 Dtool_5lWenEGt 0 6 7 28 0 14 Dtool_5lWenEGt 378 ////////////////////////////////////////////////////////////////////
//     Function: BasicSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//               Exact same functionality as get_value, except
//               that this isn't an inline function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 27  
6 14 Dtool_5lWeju_v 0 7 10 30 0 14 Dtool_5lWeju_v 703 // Filename: typedSkel.I
// Created by: jyelon (31Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
7 14 Dtool_5lWemhhM 0 4 11 29 0 14 Dtool_5lWemhhM 241 ////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::set_value
//       Access: Public
//  Description: Stores an integer value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 30  1 n 1 28  
8 14 Dtool_5lWeCcYl 0 6 12 28 0 14 Dtool_5lWeCcYl 262 ////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 30  
9 14 Dtool_5lWek_6j 0 4 13 29 0 14 Dtool_5lWek_6j 362 ////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::set_value_alt
//       Access: Public
//  Description: Stores an integer value.  Exact same functionality
//               as set_value, except that this isn't an inline
//               function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 30  1 n 1 28  
10 14 Dtool_5lWeWLAa 0 6 14 28 0 14 Dtool_5lWeWLAa 378 ////////////////////////////////////////////////////////////////////
//     Function: TypedSkel::get_value
//       Access: Public
//  Description: Retreives a value that was previously stored.
//               Exact same functionality as get_value, except
//               that this isn't an inline function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 30  
11 14 Dtool_5lWeCU6I 0 7 15 32 0 14 Dtool_5lWeCU6I 0 0 
9
24 9 BasicSkel 0 26625 9 BasicSkel 9 BasicSkel 0 0 0 1 12 13 0 4 14 15 16 17 0 0 0 0 0 491
////////////////////////////////////////////////////////////////////
//       Class : BasicSkel
// Description : This is the most basic of the skeleton classes.
//               It stores an integer, and will return it on request.
//
//               The skeleton classes are intended to help you learn
//               how to add C++ classes to panda.  See also the manual,
//               "Adding C++ Classes to Panda."
////////////////////////////////////////////////////////////////////

25 9 TypedSkel 0 75777 9 TypedSkel 9 TypedSkel 0 0 0 1 18 0 0 5 19 20 21 22 23 0 0 1 0 26 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : TypedSkel
// Description : Skeleton object that inherits from TypedObject.
//               Stores an integer, and will return it on request.
//
//               The skeleton classes are intended to help you learn
//               how to add C++ classes to panda.  See also the manual,
//               "Adding C++ Classes to Panda."
////////////////////////////////////////////////////////////////////

26 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

27 11 BasicSkel * 0 8576 11 BasicSkel * 11 BasicSkel * 0 0 24 0 0 0 0 0 0 0 0 0 0

28 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

29 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

30 11 TypedSkel * 0 8576 11 TypedSkel * 11 TypedSkel * 0 0 25 0 0 0 0 0 0 0 0 0 0

31 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

32 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 31 0 0 0 0 0 0 0 0 0 0

0
0
0
