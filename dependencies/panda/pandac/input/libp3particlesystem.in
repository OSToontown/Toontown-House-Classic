1365933965
2 2
19 libp3particlesystem 4 BxOc 12 pandaphysics 
324
407 9 make_copy 0 4 731 30 BaseParticleEmitter::make_copy 0 1 1 0
70
virtual BaseParticleEmitter *BaseParticleEmitter::make_copy(void) = 0;

408 8 generate 0 4 731 29 BaseParticleEmitter::generate 0 1 2 231
////////////////////////////////////////////////////////////////////
//    Function : generate
//      Access : Public
// Description : parent generation function
////////////////////////////////////////////////////////////////////
66
void BaseParticleEmitter::generate(LPoint3f &pos, LVector3f &vel);

409 17 set_emission_type 0 4 731 38 BaseParticleEmitter::set_emission_type 0 1 3 735
// Filename: baseParticleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_emission_type
//      Access : Public
// Description : emission type assignment
////////////////////////////////////////////////////////////////////
89
inline void BaseParticleEmitter::set_emission_type(BaseParticleEmitter::emissionType et);

410 13 set_amplitude 0 4 731 34 BaseParticleEmitter::set_amplitude 0 1 4 230
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
// Description : amplitude assignment
////////////////////////////////////////////////////////////////////
56
inline void BaseParticleEmitter::set_amplitude(float a);

411 20 set_amplitude_spread 0 4 731 41 BaseParticleEmitter::set_amplitude_spread 0 1 5 244
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude_spread
//      Access : Public
// Description : amplitude spread assignment
////////////////////////////////////////////////////////////////////
64
inline void BaseParticleEmitter::set_amplitude_spread(float as);

412 16 set_offset_force 0 4 731 37 BaseParticleEmitter::set_offset_force 0 1 6 231
////////////////////////////////////////////////////////////////////
//    Function : set_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleEmitter::set_offset_force(LVector3f const &of);

413 26 set_explicit_launch_vector 0 4 731 47 BaseParticleEmitter::set_explicit_launch_vector 0 1 7 322
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_explicit_launch_vector
//      Access : Public
// Description : assignment of explicit emission launch vector
////////////////////////////////////////////////////////////////////
82
inline void BaseParticleEmitter::set_explicit_launch_vector(LVector3f const &elv);

414 18 set_radiate_origin 0 4 731 39 BaseParticleEmitter::set_radiate_origin 0 1 8 312
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_radiate_origin
//      Access : Public
// Description : assignment of radiate emission origin point
////////////////////////////////////////////////////////////////////
72
inline void BaseParticleEmitter::set_radiate_origin(LPoint3f const &ro);

415 17 get_emission_type 0 4 731 38 BaseParticleEmitter::get_emission_type 0 1 9 233
////////////////////////////////////////////////////////////////////
//    Function : get_emission_type
//      Access : Public
// Description : emission type query
////////////////////////////////////////////////////////////////////
92
inline BaseParticleEmitter::emissionType BaseParticleEmitter::get_emission_type(void) const;

416 13 get_amplitude 0 4 731 34 BaseParticleEmitter::get_amplitude 0 1 10 225
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
// Description : amplitude query
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleEmitter::get_amplitude(void) const;

417 20 get_amplitude_spread 0 4 731 41 BaseParticleEmitter::get_amplitude_spread 0 1 11 239
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude_spread
//      Access : Public
// Description : amplitude spread query
////////////////////////////////////////////////////////////////////
67
inline float BaseParticleEmitter::get_amplitude_spread(void) const;

418 16 get_offset_force 0 4 731 37 BaseParticleEmitter::get_offset_force 0 1 12 231
////////////////////////////////////////////////////////////////////
//    Function : get_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
67
inline LVector3f BaseParticleEmitter::get_offset_force(void) const;

419 26 get_explicit_launch_vector 0 4 731 47 BaseParticleEmitter::get_explicit_launch_vector 0 1 13 264
////////////////////////////////////////////////////////////////////
//    Function : get_explicit_launch_vector
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
77
inline LVector3f BaseParticleEmitter::get_explicit_launch_vector(void) const;

420 18 get_radiate_origin 0 4 731 39 BaseParticleEmitter::get_radiate_origin 0 1 14 256
////////////////////////////////////////////////////////////////////
//    Function : get_radiate_origin
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
68
inline LPoint3f BaseParticleEmitter::get_radiate_origin(void) const;

421 6 output 0 4 731 27 BaseParticleEmitter::output 0 1 15 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleEmitter::output(ostream &out) const;

422 5 write 0 4 731 26 BaseParticleEmitter::write 0 2 16 17 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleEmitter::write(ostream &out, int indent = (0)) const;

423 11 RingEmitter 0 4 734 24 RingEmitter::RingEmitter 0 2 18 19 445
////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
82
RingEmitter::RingEmitter(void);
RingEmitter::RingEmitter(RingEmitter const &copy);

424 10 set_radius 0 4 734 23 RingEmitter::set_radius 0 1 20 706
// Filename: ringEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
45
inline void RingEmitter::set_radius(float r);

425 9 set_angle 0 4 734 22 RingEmitter::set_angle 0 1 21 228
////////////////////////////////////////////////////////////////////
//    Function : set_angle
//      Access : public
// Description : angle of elevation set
////////////////////////////////////////////////////////////////////
48
inline void RingEmitter::set_angle(float angle);

426 17 set_radius_spread 0 4 734 30 RingEmitter::set_radius_spread 0 1 22 231
////////////////////////////////////////////////////////////////////
//    Function : set_radius_spread
//      Access : public
// Description : radius_spread set
////////////////////////////////////////////////////////////////////
57
inline void RingEmitter::set_radius_spread(float spread);

427 20 set_uniform_emission 0 4 734 33 RingEmitter::set_uniform_emission 0 1 23 252
////////////////////////////////////////////////////////////////////
//    Function : set_uniform_emission
//      Access : public
// Description : uniform_emission set               
////////////////////////////////////////////////////////////////////
68
inline void RingEmitter::set_uniform_emission(int uniform_emission);

428 10 get_radius 0 4 734 23 RingEmitter::get_radius 0 1 24 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
49
inline float RingEmitter::get_radius(void) const;

429 9 get_angle 0 4 734 22 RingEmitter::get_angle 0 1 25 228
////////////////////////////////////////////////////////////////////
//    Function : get_angle
//      Access : public
// Description : angle of elevation get
////////////////////////////////////////////////////////////////////
48
inline float RingEmitter::get_angle(void) const;

430 17 get_radius_spread 0 4 734 30 RingEmitter::get_radius_spread 0 1 26 231
////////////////////////////////////////////////////////////////////
//    Function : get_radius_spread
//      Access : public
// Description : radius_spread get
////////////////////////////////////////////////////////////////////
56
inline float RingEmitter::get_radius_spread(void) const;

431 20 get_uniform_emission 0 4 734 33 RingEmitter::get_uniform_emission 0 1 27 252
////////////////////////////////////////////////////////////////////
//    Function : get_uniform_emission
//      Access : public
// Description : uniform_emission get               
////////////////////////////////////////////////////////////////////
57
inline int RingEmitter::get_uniform_emission(void) const;

432 10 ArcEmitter 0 4 735 22 ArcEmitter::ArcEmitter 0 2 28 29 443
////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
77
ArcEmitter::ArcEmitter(void);
ArcEmitter::ArcEmitter(ArcEmitter const &copy);

433 15 set_start_angle 0 4 735 27 ArcEmitter::set_start_angle 0 1 30 715
// Filename: arcEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_start_angle
//      Access : public
// Description : start angle set
////////////////////////////////////////////////////////////////////
53
inline void ArcEmitter::set_start_angle(float angle);

434 13 set_end_angle 0 4 735 25 ArcEmitter::set_end_angle 0 1 31 223
////////////////////////////////////////////////////////////////////
//    Function : set_end_angle
//      Access : public
// Description : end angle set
////////////////////////////////////////////////////////////////////
51
inline void ArcEmitter::set_end_angle(float angle);

435 7 set_arc 0 4 735 19 ArcEmitter::set_arc 0 1 32 217
////////////////////////////////////////////////////////////////////
//    Function : set_arc
//      Access : public
// Description : arc sweep set
////////////////////////////////////////////////////////////////////
66
inline void ArcEmitter::set_arc(float startAngle, float endAngle);

436 15 get_start_angle 0 4 735 27 ArcEmitter::get_start_angle 0 1 33 227
////////////////////////////////////////////////////////////////////
//    Function : get_start_angle
//      Access : public
// Description : get start angle
////////////////////////////////////////////////////////////////////
47
inline float ArcEmitter::get_start_angle(void);

437 13 get_end_angle 0 4 735 25 ArcEmitter::get_end_angle 0 1 34 223
////////////////////////////////////////////////////////////////////
//    Function : get_end_angle
//      Access : public
// Description : get end angle
////////////////////////////////////////////////////////////////////
45
inline float ArcEmitter::get_end_angle(void);

438 17 set_lifespan_base 0 4 736 38 BaseParticleFactory::set_lifespan_base 0 1 35 693
// Filename: baseParticleFactory.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
61
inline void BaseParticleFactory::set_lifespan_base(float lb);

439 19 set_lifespan_spread 0 4 736 40 BaseParticleFactory::set_lifespan_spread 0 1 36 198
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
63
inline void BaseParticleFactory::set_lifespan_spread(float ls);

440 13 set_mass_base 0 4 736 34 BaseParticleFactory::set_mass_base 0 1 37 192
////////////////////////////////////////////////////////////////////
//    Function : set_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
57
inline void BaseParticleFactory::set_mass_base(float mb);

441 15 set_mass_spread 0 4 736 36 BaseParticleFactory::set_mass_spread 0 1 38 194
////////////////////////////////////////////////////////////////////
//    Function : set_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleFactory::set_mass_spread(float ms);

442 26 set_terminal_velocity_base 0 4 736 47 BaseParticleFactory::set_terminal_velocity_base 0 1 39 205
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleFactory::set_terminal_velocity_base(float tvb);

443 28 set_terminal_velocity_spread 0 4 736 49 BaseParticleFactory::set_terminal_velocity_spread 0 1 40 207
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
73
inline void BaseParticleFactory::set_terminal_velocity_spread(float tvs);

444 17 get_lifespan_base 0 4 736 38 BaseParticleFactory::get_lifespan_base 0 1 41 196
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
64
inline float BaseParticleFactory::get_lifespan_base(void) const;

445 19 get_lifespan_spread 0 4 736 40 BaseParticleFactory::get_lifespan_spread 0 1 42 198
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
66
inline float BaseParticleFactory::get_lifespan_spread(void) const;

446 13 get_mass_base 0 4 736 34 BaseParticleFactory::get_mass_base 0 1 43 192
////////////////////////////////////////////////////////////////////
//    Function : get_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleFactory::get_mass_base(void) const;

447 15 get_mass_spread 0 4 736 36 BaseParticleFactory::get_mass_spread 0 1 44 194
////////////////////////////////////////////////////////////////////
//    Function : get_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleFactory::get_mass_spread(void) const;

448 26 get_terminal_velocity_base 0 4 736 47 BaseParticleFactory::get_terminal_velocity_base 0 1 45 205
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
73
inline float BaseParticleFactory::get_terminal_velocity_base(void) const;

449 28 get_terminal_velocity_spread 0 4 736 49 BaseParticleFactory::get_terminal_velocity_spread 0 1 46 207
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
75
inline float BaseParticleFactory::get_terminal_velocity_spread(void) const;

450 14 alloc_particle 0 4 736 35 BaseParticleFactory::alloc_particle 0 1 47 0
74
virtual BaseParticle *BaseParticleFactory::alloc_particle(void) const = 0;

451 17 populate_particle 0 4 736 38 BaseParticleFactory::populate_particle 0 1 48 192
////////////////////////////////////////////////////////////////////
//    Function : make_particle
// Description : public
////////////////////////////////////////////////////////////////////
62
void BaseParticleFactory::populate_particle(BaseParticle *bp);

452 6 output 0 4 736 27 BaseParticleFactory::output 0 1 49 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleFactory::output(ostream &out) const;

453 5 write 0 4 736 26 BaseParticleFactory::write 0 2 50 51 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleFactory::write(ostream &out, int indent = (0)) const;

454 15 get_render_node 0 4 737 37 BaseParticleRenderer::get_render_node 0 1 52 759
// Filename: baseParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node
//       Class : Published
// Description : Query the geomnode pointer
////////////////////////////////////////////////////////////////////
67
inline GeomNode *BaseParticleRenderer::get_render_node(void) const;

455 20 get_render_node_path 0 4 737 42 BaseParticleRenderer::get_render_node_path 0 1 53 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node_path
//       Class : Published
// Description : Query the geomnode pointer
////////////////////////////////////////////////////////////////////
71
inline NodePath BaseParticleRenderer::get_render_node_path(void) const;

456 14 set_alpha_mode 0 4 737 36 BaseParticleRenderer::set_alpha_mode 0 1 54 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
101
inline void BaseParticleRenderer::set_alpha_mode(BaseParticleRenderer::ParticleRendererAlphaMode am);

457 14 get_alpha_mode 0 4 737 36 BaseParticleRenderer::get_alpha_mode 0 1 55 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
104
inline BaseParticleRenderer::ParticleRendererAlphaMode BaseParticleRenderer::get_alpha_mode(void) const;

458 14 set_user_alpha 0 4 737 36 BaseParticleRenderer::set_user_alpha 0 1 56 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_user_alpha
//      Access : Published
// Description : sets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleRenderer::set_user_alpha(float ua);

459 14 get_user_alpha 0 4 737 36 BaseParticleRenderer::get_user_alpha 0 1 57 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_user_alpha
//      Access : Published
// Description : gets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleRenderer::get_user_alpha(void) const;

460 20 set_color_blend_mode 0 4 737 42 BaseParticleRenderer::set_color_blend_mode 0 3 58 59 60 285
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
////////////////////////////////////////////////////////////////////
164
inline void BaseParticleRenderer::set_color_blend_mode(ColorBlendAttrib::Mode bm, ColorBlendAttrib::Operand oa = (O_zero), ColorBlendAttrib::Operand ob = (O_zero));

461 16 set_ignore_scale 0 4 737 38 BaseParticleRenderer::set_ignore_scale 0 1 61 740
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_ignore_scale
//      Access : Published
// Description : Sets the "ignore scale" flag.  When this is true,
//               particles will be drawn as if they had no scale,
//               regardless of whatever scale might be inherited from
//               above the render node in the scene graph.
//
//               This flag is mainly useful to support legacy code
//               that was written for a very early version of Panda,
//               whose sprite particle renderer had a bug that
//               incorrectly ignored the inherited scale.
////////////////////////////////////////////////////////////////////
63
void BaseParticleRenderer::set_ignore_scale(bool ignore_scale);

462 16 get_ignore_scale 0 4 737 38 BaseParticleRenderer::get_ignore_scale 0 1 62 310
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_ignore_scale
//      Access : Published
// Description : Returns the "ignore scale" flag.  See
//               set_ignore_scale().
////////////////////////////////////////////////////////////////////
63
inline bool BaseParticleRenderer::get_ignore_scale(void) const;

463 6 output 0 4 737 28 BaseParticleRenderer::output 0 1 63 303
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
62
virtual void BaseParticleRenderer::output(ostream &out) const;

464 5 write 0 4 737 27 BaseParticleRenderer::write 0 2 64 65 302
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
79
virtual void BaseParticleRenderer::write(ostream &out, int indent = (0)) const;

465 10 BoxEmitter 0 4 740 22 BoxEmitter::BoxEmitter 0 2 66 67 443
////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
77
BoxEmitter::BoxEmitter(void);
BoxEmitter::BoxEmitter(BoxEmitter const &copy);

466 13 set_min_bound 0 4 740 25 BoxEmitter::set_min_bound 0 1 68 717
// Filename: boxEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_min_bound(LPoint3f const &vmin);

467 13 set_max_bound 0 4 740 25 BoxEmitter::set_max_bound 0 1 69 229
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_max_bound(LPoint3f const &vmax);

468 13 get_min_bound 0 4 740 25 BoxEmitter::get_min_bound 0 1 70 227
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_min_bound(void) const;

469 13 get_max_bound 0 4 740 25 BoxEmitter::get_max_bound 0 1 71 227
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_max_bound(void) const;

470 11 get_color_a 0 4 741 47 ColorInterpolationFunctionConstant::get_color_a 0 1 72 861
// Filename: colorInterpolationManager.I
// Created by:  joswilso (02Jun05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::get_color_a
//      Access : public
// Description : Returns the primary color of the function.
////////////////////////////////////////////////////////////////////
78
inline LVecBase4f ColorInterpolationFunctionConstant::get_color_a(void) const;

471 11 set_color_a 0 4 741 47 ColorInterpolationFunctionConstant::set_color_a 0 1 73 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::set_color_a
//      Access : public
// Description : Sets the primary color of the function.
////////////////////////////////////////////////////////////////////
81
inline void ColorInterpolationFunctionConstant::set_color_a(LVecBase4f const &c);

472 14 get_class_type 0 4 741 50 ColorInterpolationFunctionConstant::get_class_type 0 1 74 0
75
static TypeHandle ColorInterpolationFunctionConstant::get_class_type(void);

473 35 ~ColorInterpolationFunctionConstant 0 4 741 71 ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant 0 0 0
78
ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant(void);

474 11 get_color_b 0 4 743 45 ColorInterpolationFunctionLinear::get_color_b 0 1 75 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::get_color_b
//      Access : public
// Description : Returns the secondary color of the function.
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f ColorInterpolationFunctionLinear::get_color_b(void) const;

475 11 set_color_b 0 4 743 45 ColorInterpolationFunctionLinear::set_color_b 0 1 76 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::set_color_b
//      Access : public
// Description : Sets the secondary color of the function.
////////////////////////////////////////////////////////////////////
79
inline void ColorInterpolationFunctionLinear::set_color_b(LVecBase4f const &c);

476 14 get_class_type 0 4 743 48 ColorInterpolationFunctionLinear::get_class_type 0 1 77 0
73
static TypeHandle ColorInterpolationFunctionLinear::get_class_type(void);

477 33 ~ColorInterpolationFunctionLinear 0 4 743 67 ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear 0 0 0
74
ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear(void);

478 11 get_width_a 0 4 744 47 ColorInterpolationFunctionStepwave::get_width_a 0 1 78 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_a
//      Access : public
// Description : Returns the primary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_a(void) const;

479 11 get_width_b 0 4 744 47 ColorInterpolationFunctionStepwave::get_width_b 0 1 79 288
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_b
//      Access : public
// Description : Returns the secondary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_b(void) const;

480 11 set_width_a 0 4 744 47 ColorInterpolationFunctionStepwave::set_width_a 0 1 80 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_a
//      Access : public
// Description : Sets the primary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_a(float const w);

481 11 set_width_b 0 4 744 47 ColorInterpolationFunctionStepwave::set_width_b 0 1 81 285
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_b
//      Access : public
// Description : Sets the secondary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_b(float const w);

482 14 get_class_type 0 4 744 50 ColorInterpolationFunctionStepwave::get_class_type 0 1 82 0
75
static TypeHandle ColorInterpolationFunctionStepwave::get_class_type(void);

483 35 ~ColorInterpolationFunctionStepwave 0 4 744 71 ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave 0 0 0
78
ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave(void);

484 10 get_period 0 4 745 46 ColorInterpolationFunctionSinusoid::get_period 0 1 83 324
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::get_period
//      Access : public
// Description : Returns the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
72
inline float ColorInterpolationFunctionSinusoid::get_period(void) const;

485 10 set_period 0 4 745 46 ColorInterpolationFunctionSinusoid::set_period 0 1 84 321
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::set_period
//      Access : public
// Description : Sets the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
74
inline void ColorInterpolationFunctionSinusoid::set_period(float const p);

486 14 get_class_type 0 4 745 50 ColorInterpolationFunctionSinusoid::get_class_type 0 1 85 0
75
static TypeHandle ColorInterpolationFunctionSinusoid::get_class_type(void);

487 35 ~ColorInterpolationFunctionSinusoid 0 4 745 71 ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid 0 0 0
78
ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid(void);

488 25 ColorInterpolationSegment 0 4 746 52 ColorInterpolationSegment::ColorInterpolationSegment 0 2 86 87 527
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
268
ColorInterpolationSegment::ColorInterpolationSegment(ColorInterpolationFunction *function, float const &time_begin, float const &time_end, bool const is_modulated, int const id);
ColorInterpolationSegment::ColorInterpolationSegment(ColorInterpolationSegment const &s);

489 12 get_function 0 4 746 39 ColorInterpolationSegment::get_function 0 1 88 389
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_function
//      Access : public
// Description : Returns a reference to the function object 
//               corresponding to this segment.
////////////////////////////////////////////////////////////////////
80
inline TypedReferenceCount *ColorInterpolationSegment::get_function(void) const;

490 14 get_time_begin 0 4 746 41 ColorInterpolationSegment::get_time_begin 0 1 89 468
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_begin
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
67
inline float ColorInterpolationSegment::get_time_begin(void) const;

491 12 get_time_end 0 4 746 39 ColorInterpolationSegment::get_time_end 0 1 90 401
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_end
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment's effect stops.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
65
inline float ColorInterpolationSegment::get_time_end(void) const;

492 12 is_modulated 0 4 746 39 ColorInterpolationSegment::is_modulated 0 1 91 290
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_modulated
//      Access : public
// Description : Returns whether the function is additive or modulated.
////////////////////////////////////////////////////////////////////
64
inline bool ColorInterpolationSegment::is_modulated(void) const;

493 6 get_id 0 4 746 33 ColorInterpolationSegment::get_id 0 1 92 318
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_id
//      Access : public
// Description : Returns the id assigned to this segment by the
//               manager that created it.
////////////////////////////////////////////////////////////////////
57
inline int ColorInterpolationSegment::get_id(void) const;

494 10 is_enabled 0 4 746 37 ColorInterpolationSegment::is_enabled 0 1 93 291
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_enabled()
//      Access : public
// Description : Returns whether the segments effects are being applied.
////////////////////////////////////////////////////////////////////
62
inline bool ColorInterpolationSegment::is_enabled(void) const;

495 12 set_function 0 4 746 39 ColorInterpolationSegment::set_function 0 1 94 333
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_function
//      Access : public
// Description : Sets the function that the segment will use for 
//               its interpolation calculations.
////////////////////////////////////////////////////////////////////
90
inline void ColorInterpolationSegment::set_function(ColorInterpolationFunction *function);

496 14 set_time_begin 0 4 746 41 ColorInterpolationSegment::set_time_begin 0 1 95 403
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_begin
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
72
inline void ColorInterpolationSegment::set_time_begin(float const time);

497 12 set_time_end 0 4 746 39 ColorInterpolationSegment::set_time_end 0 1 96 397
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_end
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment's effect ends.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
70
inline void ColorInterpolationSegment::set_time_end(float const time);

498 16 set_is_modulated 0 4 746 43 ColorInterpolationSegment::set_is_modulated 0 1 97 414
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_is_modulated
//      Access : public
// Description : Sets how the function is applied to the final color.
//               If true, the value is multiplied. If false, the value
//               is simply added. Default is true.
////////////////////////////////////////////////////////////////////
73
inline void ColorInterpolationSegment::set_is_modulated(bool const flag);

499 11 set_enabled 0 4 746 38 ColorInterpolationSegment::set_enabled 0 1 98 289
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_enabled()
//      Access : public
// Description : Sets whether the segments effects should be applied.
////////////////////////////////////////////////////////////////////
71
inline void ColorInterpolationSegment::set_enabled(bool const enabled);

500 25 ColorInterpolationManager 0 4 747 52 ColorInterpolationManager::ColorInterpolationManager 0 3 99 100 101 797
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
227
ColorInterpolationManager::ColorInterpolationManager(void);
ColorInterpolationManager::ColorInterpolationManager(LVecBase4f const &c);
ColorInterpolationManager::ColorInterpolationManager(ColorInterpolationManager const &copy);

501 12 add_constant 0 4 747 39 ColorInterpolationManager::add_constant 0 5 102 103 104 105 106 385
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
////////////////////////////////////////////////////////////////////
184
int ColorInterpolationManager::add_constant(float const time_begin = (0), float const time_end = (1), LVecBase4f const &color = ((LColorf(1, 1, 1, 1))), bool const is_modulated = (1));

502 10 add_linear 0 4 747 37 ColorInterpolationManager::add_linear 0 6 107 108 109 110 111 112 361
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
237
int ColorInterpolationManager::add_linear(float const time_begin = (0), float const time_end = (1), LVecBase4f const &color_a = ((LColorf(1, 0, 0, 1))), LVecBase4f const &color_b = ((LColorf(0, 1, 0, 1))), bool const is_modulated = (1));

503 12 add_stepwave 0 4 747 39 ColorInterpolationManager::add_stepwave 0 8 113 114 115 116 117 118 119 120 360
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
297
int ColorInterpolationManager::add_stepwave(float const time_begin = (0), float const time_end = (1), LVecBase4f const &color_a = ((LColorf(1, 0, 0, 1))), LVecBase4f const &color_b = ((LColorf(0, 1, 0, 1))), float const width_a = (0.5), float const width_b = (0.5), bool const is_modulated = (1));

504 12 add_sinusoid 0 4 747 39 ColorInterpolationManager::add_sinusoid 0 7 121 122 123 124 125 126 127 400
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
////////////////////////////////////////////////////////////////////
265
int ColorInterpolationManager::add_sinusoid(float const time_begin = (0), float const time_end = (1), LVecBase4f const &color_a = ((LColorf(1, 0, 0, 1))), LVecBase4f const &color_b = ((LColorf(0, 1, 0, 1))), float const period = (1), bool const is_modulated = (1));

505 17 set_default_color 0 4 747 44 ColorInterpolationManager::set_default_color 0 1 128 290
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::set_default_color
//      Access : public
// Description : Sets the color to used if no segments are present
////////////////////////////////////////////////////////////////////
78
inline void ColorInterpolationManager::set_default_color(LVecBase4f const &c);

506 11 get_segment 0 4 747 38 ColorInterpolationManager::get_segment 0 1 129 284
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment
//      Access : public
// Description : Returns the segment that corresponds to 'seg_id'.
////////////////////////////////////////////////////////////////////
91
inline ColorInterpolationSegment *ColorInterpolationManager::get_segment(int const seg_id);

507 19 get_segment_id_list 0 4 747 46 ColorInterpolationManager::get_segment_id_list 0 1 130 336
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment_id_list
//      Access : public
// Description : Returns a space delimited list of all of the ids
//               in the manager at the time.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > ColorInterpolationManager::get_segment_id_list(void);

508 13 clear_segment 0 4 747 40 ColorInterpolationManager::clear_segment 0 1 131 282
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_segment
//      Access : public
// Description : Removes the segment of 'id' from the manager.
////////////////////////////////////////////////////////////////////
64
void ColorInterpolationManager::clear_segment(int const seg_id);

509 16 clear_to_initial 0 4 747 43 ColorInterpolationManager::clear_to_initial 0 1 132 278
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_to_initial
//      Access : public
// Description : Removes all segments from the manager.
////////////////////////////////////////////////////////////////////
55
void ColorInterpolationManager::clear_to_initial(void);

510 11 DiscEmitter 0 4 748 24 DiscEmitter::DiscEmitter 0 2 133 134 471
////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
82
DiscEmitter::DiscEmitter(void);
DiscEmitter::DiscEmitter(DiscEmitter const &copy);

511 10 set_radius 0 4 748 23 DiscEmitter::set_radius 0 1 135 713
// Filename: discEmitter.I
// Created by:  charles (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : radius assignment
////////////////////////////////////////////////////////////////////
45
inline void DiscEmitter::set_radius(float r);

512 15 set_outer_angle 0 4 748 28 DiscEmitter::set_outer_angle 0 1 136 227
////////////////////////////////////////////////////////////////////
//    Function : set_outer_angle
//      Access : Public
// Description : aoe assignement
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_outer_angle(float o_angle);

513 15 set_inner_angle 0 4 748 28 DiscEmitter::set_inner_angle 0 1 137 226
////////////////////////////////////////////////////////////////////
//    Function : set_inner_angle
//      Access : Public
// Description : aoe assignment
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_inner_angle(float i_angle);

514 19 set_outer_magnitude 0 4 748 32 DiscEmitter::set_outer_magnitude 0 1 138 230
////////////////////////////////////////////////////////////////////
//    Function : set_outer_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_outer_magnitude(float o_mag);

515 19 set_inner_magnitude 0 4 748 32 DiscEmitter::set_inner_magnitude 0 1 139 230
////////////////////////////////////////////////////////////////////
//    Function : set_inner_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_inner_magnitude(float i_mag);

516 17 set_cubic_lerping 0 4 748 30 DiscEmitter::set_cubic_lerping 0 1 140 224
////////////////////////////////////////////////////////////////////
//    Function : set_cubic_lerping
//      Access : public
// Description : clerp flag
////////////////////////////////////////////////////////////////////
55
inline void DiscEmitter::set_cubic_lerping(bool clerp);

517 10 get_radius 0 4 748 23 DiscEmitter::get_radius 0 1 141 222
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : Public
// Description : radius accessor
////////////////////////////////////////////////////////////////////
49
inline float DiscEmitter::get_radius(void) const;

518 15 get_outer_angle 0 4 748 28 DiscEmitter::get_outer_angle 0 1 142 224
////////////////////////////////////////////////////////////////////
//    Function : get_outer_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_outer_angle(void) const;

519 15 get_inner_angle 0 4 748 28 DiscEmitter::get_inner_angle 0 1 143 224
////////////////////////////////////////////////////////////////////
//    Function : get_inner_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_inner_angle(void) const;

520 19 get_outer_magnitude 0 4 748 32 DiscEmitter::get_outer_magnitude 0 1 144 228
////////////////////////////////////////////////////////////////////
//    Function : get_outer_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_outer_magnitude(void) const;

521 19 get_inner_magnitude 0 4 748 32 DiscEmitter::get_inner_magnitude 0 1 145 228
////////////////////////////////////////////////////////////////////
//    Function : get_inner_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_inner_magnitude(void) const;

522 17 get_cubic_lerping 0 4 748 30 DiscEmitter::get_cubic_lerping 0 1 146 233
////////////////////////////////////////////////////////////////////
//    Function : get_cubic_lerping
//      Access : public
// Description : clerp flag accessor
////////////////////////////////////////////////////////////////////
55
inline bool DiscEmitter::get_cubic_lerping(void) const;

523 20 GeomParticleRenderer 0 4 749 42 GeomParticleRenderer::GeomParticleRenderer 0 4 147 148 149 150 463
////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
244
GeomParticleRenderer::GeomParticleRenderer(BaseParticleRenderer::ParticleRendererAlphaMode am = (PR_ALPHA_NONE), PandaNode *geom_node = ((PandaNode *)((void *)(0))));
GeomParticleRenderer::GeomParticleRenderer(GeomParticleRenderer const &copy);

524 13 set_geom_node 0 4 749 35 GeomParticleRenderer::set_geom_node 0 1 151 893
// Filename: geomParticleRenderer.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
// we're forcing a pool resize to remove every node in the vector.
// this is because nodes are reference-counted, and we have to
// explicitly remove them from the node they were previously parented
// to.
65
inline void GeomParticleRenderer::set_geom_node(PandaNode *node);

525 13 get_geom_node 0 4 749 35 GeomParticleRenderer::get_geom_node 0 1 152 188
////////////////////////////////////////////////////////////////////
//  Function : get_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
60
inline PandaNode *GeomParticleRenderer::get_geom_node(void);

526 31 get_color_interpolation_manager 0 4 749 53 GeomParticleRenderer::get_color_interpolation_manager 0 1 153 206
////////////////////////////////////////////////////////////////////
//  Function : get_color_interpolation_manager
//    Access : public
////////////////////////////////////////////////////////////////////
100
inline ColorInterpolationManager *GeomParticleRenderer::get_color_interpolation_manager(void) const;

527 16 set_x_scale_flag 0 4 749 38 GeomParticleRenderer::set_x_scale_flag 0 1 154 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_x_scale_flag(bool animate_x_ratio);

528 16 set_y_scale_flag 0 4 749 38 GeomParticleRenderer::set_y_scale_flag 0 1 155 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_y_scale_flag(bool animate_y_ratio);

529 16 set_z_scale_flag 0 4 749 38 GeomParticleRenderer::set_z_scale_flag 0 1 156 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_z_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_z_scale_flag(bool animate_z_ratio);

530 19 set_initial_x_scale 0 4 749 41 GeomParticleRenderer::set_initial_x_scale 0 1 157 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_x_scale(float initial_x_scale);

531 17 set_final_x_scale 0 4 749 39 GeomParticleRenderer::set_final_x_scale 0 1 158 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_x_scale(float final_x_scale);

532 19 set_initial_y_scale 0 4 749 41 GeomParticleRenderer::set_initial_y_scale 0 1 159 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_y_scale(float initial_y_scale);

533 17 set_final_y_scale 0 4 749 39 GeomParticleRenderer::set_final_y_scale 0 1 160 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_y_scale(float final_y_scale);

534 19 set_initial_z_scale 0 4 749 41 GeomParticleRenderer::set_initial_z_scale 0 1 161 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_z_scale(float initial_z_scale);

535 17 set_final_z_scale 0 4 749 39 GeomParticleRenderer::set_final_z_scale 0 1 162 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_z_scale(float final_z_scale);

536 16 get_x_scale_flag 0 4 749 38 GeomParticleRenderer::get_x_scale_flag 0 1 163 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_x_scale_flag(void) const;

537 16 get_y_scale_flag 0 4 749 38 GeomParticleRenderer::get_y_scale_flag 0 1 164 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_y_scale_flag(void) const;

538 16 get_z_scale_flag 0 4 749 38 GeomParticleRenderer::get_z_scale_flag 0 1 165 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_z_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_z_scale_flag(void) const;

539 19 get_initial_x_scale 0 4 749 41 GeomParticleRenderer::get_initial_x_scale 0 1 166 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_x_scale(void) const;

540 17 get_final_x_scale 0 4 749 39 GeomParticleRenderer::get_final_x_scale 0 1 167 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_x_scale(void) const;

541 19 get_initial_y_scale 0 4 749 41 GeomParticleRenderer::get_initial_y_scale 0 1 168 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_y_scale(void) const;

542 17 get_final_y_scale 0 4 749 39 GeomParticleRenderer::get_final_y_scale 0 1 169 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_y_scale(void) const;

543 19 get_initial_z_scale 0 4 749 41 GeomParticleRenderer::get_initial_z_scale 0 1 170 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_z_scale(void) const;

544 17 get_final_z_scale 0 4 749 39 GeomParticleRenderer::get_final_z_scale 0 1 171 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_z_scale(void) const;

545 11 LineEmitter 0 4 750 24 LineEmitter::LineEmitter 0 2 172 173 440
////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////
82
LineEmitter::LineEmitter(void);
LineEmitter::LineEmitter(LineEmitter const &copy);

546 13 set_endpoint1 0 4 750 26 LineEmitter::set_endpoint1 0 1 174 718
// Filename: lineEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint1
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint1(LPoint3f const &point);

547 13 set_endpoint2 0 4 750 26 LineEmitter::set_endpoint2 0 1 175 229
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint2
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint2(LPoint3f const &point);

548 13 get_endpoint1 0 4 750 26 LineEmitter::get_endpoint1 0 1 176 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint1
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint1(void) const;

549 13 get_endpoint2 0 4 750 26 LineEmitter::get_endpoint2 0 1 177 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint2
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint2(void) const;

550 20 LineParticleRenderer 0 4 751 42 LineParticleRenderer::LineParticleRenderer 0 3 178 179 180 701
////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
279
LineParticleRenderer::LineParticleRenderer(void);
LineParticleRenderer::LineParticleRenderer(LineParticleRenderer const &copy);
LineParticleRenderer::LineParticleRenderer(LVecBase4f const &head, LVecBase4f const &tail, BaseParticleRenderer::ParticleRendererAlphaMode alpha_mode);

551 14 set_head_color 0 4 751 36 LineParticleRenderer::set_head_color 0 1 181 690
// Filename: lineParticleRenderer.I
// Created by:  darren (06Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_head_color(LVecBase4f const &c);

552 14 set_tail_color 0 4 751 36 LineParticleRenderer::set_tail_color 0 1 182 193
////////////////////////////////////////////////////////////////////
//    Function : set_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_tail_color(LVecBase4f const &c);

553 14 get_head_color 0 4 751 36 LineParticleRenderer::get_head_color 0 1 183 193
////////////////////////////////////////////////////////////////////
//    Function : get_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_head_color(void) const;

554 14 get_tail_color 0 4 751 36 LineParticleRenderer::get_tail_color 0 1 184 193
////////////////////////////////////////////////////////////////////
//    Function : get_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_tail_color(void) const;

555 21 set_line_scale_factor 0 4 751 43 LineParticleRenderer::set_line_scale_factor 0 1 185 202
////////////////////////////////////////////////////////////////////
//    Function : set_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
66
inline void LineParticleRenderer::set_line_scale_factor(float sf);

556 21 get_line_scale_factor 0 4 751 43 LineParticleRenderer::get_line_scale_factor 0 1 186 202
////////////////////////////////////////////////////////////////////
//    Function : get_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
69
inline float LineParticleRenderer::get_line_scale_factor(void) const;

557 14 ParticleSystem 0 4 752 30 ParticleSystem::ParticleSystem 0 3 187 188 189 488
// constructor/destructor

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Copy Constructor.
////////////////////////////////////////////////////////////////////
112
ParticleSystem::ParticleSystem(int pool_size = (0));
ParticleSystem::ParticleSystem(ParticleSystem const &copy);

558 13 set_pool_size 0 4 752 29 ParticleSystem::set_pool_size 0 1 190 430
// access/queries

////             ///////////////////////////////////////////////////////
//// SET METHODS ///////////////////////////////////////////////////////
////             ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline void ParticleSystem::set_pool_size(int size);

559 14 set_birth_rate 0 4 752 30 ParticleSystem::set_birth_rate 0 1 191 212
// access/queries

////////////////////////////////////////////////////////////////////
//    Function : set_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline void ParticleSystem::set_birth_rate(float new_br);

560 19 set_soft_birth_rate 0 4 752 35 ParticleSystem::set_soft_birth_rate 0 1 192 198
////////////////////////////////////////////////////////////////////
//    Function : set_soft_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
62
inline void ParticleSystem::set_soft_birth_rate(float new_br);

561 15 set_litter_size 0 4 752 31 ParticleSystem::set_litter_size 0 1 193 194
////////////////////////////////////////////////////////////////////
//    Function : set_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::set_litter_size(int new_ls);

562 17 set_litter_spread 0 4 752 33 ParticleSystem::set_litter_spread 0 1 194 196
////////////////////////////////////////////////////////////////////
//    Function : set_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_litter_spread(int new_ls);

563 23 set_local_velocity_flag 0 4 752 39 ParticleSystem::set_local_velocity_flag 0 1 195 202
////////////////////////////////////////////////////////////////////
//    Function : set_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline void ParticleSystem::set_local_velocity_flag(bool lv);

564 27 set_system_grows_older_flag 0 4 752 43 ParticleSystem::set_system_grows_older_flag 0 1 196 206
////////////////////////////////////////////////////////////////////
//    Function : set_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_system_grows_older_flag(bool sgo);

565 19 set_system_lifespan 0 4 752 35 ParticleSystem::set_system_lifespan 0 1 197 198
////////////////////////////////////////////////////////////////////
//    Function : set_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_system_lifespan(float sl);

566 14 set_system_age 0 4 752 30 ParticleSystem::set_system_age 0 1 198 193
////////////////////////////////////////////////////////////////////
//    Function : set_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
54
inline void ParticleSystem::set_system_age(float age);

567 22 set_active_system_flag 0 4 752 38 ParticleSystem::set_active_system_flag 0 1 199 195
////////////////////////////////////////////////////////////////////
//    Function : set_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
59
inline void ParticleSystem::set_active_system_flag(bool a);

568 23 set_spawn_on_death_flag 0 4 752 39 ParticleSystem::set_spawn_on_death_flag 0 1 200 202
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
62
inline void ParticleSystem::set_spawn_on_death_flag(bool sod);

569 21 set_spawn_render_node 0 4 752 37 ParticleSystem::set_spawn_render_node 0 1 201 200
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::set_spawn_render_node(PandaNode *node);

570 26 set_spawn_render_node_path 0 4 752 42 ParticleSystem::set_spawn_render_node_path 0 1 202 205
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node_path
//      Access : public
////////////////////////////////////////////////////////////////////
77
inline void ParticleSystem::set_spawn_render_node_path(NodePath const &node);

571 24 set_template_system_flag 0 4 752 40 ParticleSystem::set_template_system_flag 0 1 203 203
////////////////////////////////////////////////////////////////////
//    Function : set_template_system_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline void ParticleSystem::set_template_system_flag(bool tsf);

572 17 set_render_parent 0 4 752 33 ParticleSystem::set_render_parent 0 2 204 205 394
////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
132
inline void ParticleSystem::set_render_parent(PandaNode *node);
inline void ParticleSystem::set_render_parent(NodePath const &node);

573 12 set_renderer 0 4 752 28 ParticleSystem::set_renderer 0 1 206 191
////////////////////////////////////////////////////////////////////
//    Function : set_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_renderer(BaseParticleRenderer *r);

574 11 set_emitter 0 4 752 27 ParticleSystem::set_emitter 0 1 207 190
////////////////////////////////////////////////////////////////////
//    Function : set_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_emitter(BaseParticleEmitter *e);

575 11 set_factory 0 4 752 27 ParticleSystem::set_factory 0 1 208 190
////////////////////////////////////////////////////////////////////
//    Function : set_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_factory(BaseParticleFactory *f);

576 11 set_floor_z 0 4 752 27 ParticleSystem::set_floor_z 0 1 209 190
////////////////////////////////////////////////////////////////////
//    Function : set_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
49
inline void ParticleSystem::set_floor_z(float z);

577 13 clear_floor_z 0 4 752 29 ParticleSystem::clear_floor_z 0 1 210 192
////////////////////////////////////////////////////////////////////
//    Function : clear_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
48
inline void ParticleSystem::clear_floor_z(void);

578 13 get_pool_size 0 4 752 29 ParticleSystem::get_pool_size 0 1 211 405
////             /////////////////////////////////////////////////////
//// GET METHODS /////////////////////////////////////////////////////
////             /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline int ParticleSystem::get_pool_size(void) const;

579 14 get_birth_rate 0 4 752 30 ParticleSystem::get_birth_rate 0 1 212 193
////////////////////////////////////////////////////////////////////
//    Function : get_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_birth_rate(void) const;

580 19 get_soft_birth_rate 0 4 752 35 ParticleSystem::get_soft_birth_rate 0 1 213 198
////////////////////////////////////////////////////////////////////
//    Function : get_soft_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline float ParticleSystem::get_soft_birth_rate(void) const;

581 15 get_litter_size 0 4 752 31 ParticleSystem::get_litter_size 0 1 214 194
////////////////////////////////////////////////////////////////////
//    Function : get_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
55
inline int ParticleSystem::get_litter_size(void) const;

582 17 get_litter_spread 0 4 752 33 ParticleSystem::get_litter_spread 0 1 215 196
////////////////////////////////////////////////////////////////////
//    Function : get_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline int ParticleSystem::get_litter_spread(void) const;

583 23 get_local_velocity_flag 0 4 752 39 ParticleSystem::get_local_velocity_flag 0 1 216 202
////////////////////////////////////////////////////////////////////
//    Function : get_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_local_velocity_flag(void) const;

584 27 get_system_grows_older_flag 0 4 752 43 ParticleSystem::get_system_grows_older_flag 0 1 217 206
////////////////////////////////////////////////////////////////////
//    Function : get_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline bool ParticleSystem::get_system_grows_older_flag(void) const;

585 19 get_system_lifespan 0 4 752 35 ParticleSystem::get_system_lifespan 0 1 218 198
////////////////////////////////////////////////////////////////////
//    Function : get_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline float ParticleSystem::get_system_lifespan(void) const;

586 14 get_system_age 0 4 752 30 ParticleSystem::get_system_age 0 1 219 193
////////////////////////////////////////////////////////////////////
//    Function : get_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_system_age(void) const;

587 22 get_active_system_flag 0 4 752 38 ParticleSystem::get_active_system_flag 0 1 220 195
////////////////////////////////////////////////////////////////////
//    Function : get_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_active_system_flag(void) const;

588 23 get_spawn_on_death_flag 0 4 752 39 ParticleSystem::get_spawn_on_death_flag 0 1 221 202
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_spawn_on_death_flag(void) const;

589 21 get_spawn_render_node 0 4 752 37 ParticleSystem::get_spawn_render_node 0 1 222 200
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline PandaNode *ParticleSystem::get_spawn_render_node(void) const;

590 26 get_spawn_render_node_path 0 4 752 42 ParticleSystem::get_spawn_render_node_path 0 1 223 205
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node_path
//      Access : public
////////////////////////////////////////////////////////////////////
71
inline NodePath ParticleSystem::get_spawn_render_node_path(void) const;

591 22 get_i_was_spawned_flag 0 4 752 38 ParticleSystem::get_i_was_spawned_flag 0 1 224 201
////////////////////////////////////////////////////////////////////
//    Function : get_i_was_spawned_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_i_was_spawned_flag(void) const;

592 20 get_living_particles 0 4 752 36 ParticleSystem::get_living_particles 0 1 225 199
////////////////////////////////////////////////////////////////////
//    Function : get_living_particles
//      Access : Public
////////////////////////////////////////////////////////////////////
60
inline int ParticleSystem::get_living_particles(void) const;

593 17 get_render_parent 0 4 752 33 ParticleSystem::get_render_parent 0 1 226 196
////////////////////////////////////////////////////////////////////
//    Function : get_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
62
inline NodePath ParticleSystem::get_render_parent(void) const;

594 12 get_renderer 0 4 752 28 ParticleSystem::get_renderer 0 1 227 191
////////////////////////////////////////////////////////////////////
//    Function : get_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
70
inline BaseParticleRenderer *ParticleSystem::get_renderer(void) const;

595 11 get_emitter 0 4 752 27 ParticleSystem::get_emitter 0 1 228 190
////////////////////////////////////////////////////////////////////
//    Function : get_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleEmitter *ParticleSystem::get_emitter(void) const;

596 11 get_factory 0 4 752 27 ParticleSystem::get_factory 0 1 229 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleFactory *ParticleSystem::get_factory(void) const;

597 11 get_floor_z 0 4 752 27 ParticleSystem::get_floor_z 0 1 230 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline float ParticleSystem::get_floor_z(void) const;

598 18 add_spawn_template 0 4 752 34 ParticleSystem::add_spawn_template 0 1 231 226
// particle template vector

////////////////////////////////////////////////////////////////////
//    Function : add_spawn_template
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::add_spawn_template(ParticleSystem *ps);

599 21 clear_spawn_templates 0 4 752 37 ParticleSystem::clear_spawn_templates 0 1 232 200
////////////////////////////////////////////////////////////////////
//    Function : clear_spawn_templates
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::clear_spawn_templates(void);

600 6 render 0 4 752 22 ParticleSystem::render 0 1 233 861
// methods

// Filename: particleSystem.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : render
//      Access : Public
// Description : Populates an attached GeomNode structure with the
//               particle geometry for rendering.  This is a
//               wrapper for accessability.
////////////////////////////////////////////////////////////////////
41
inline void ParticleSystem::render(void);

601 12 induce_labor 0 4 752 28 ParticleSystem::induce_labor 0 1 234 305
////////////////////////////////////////////////////////////////////
//    Function : induce_labor
//      Access : Public
// Description : Forces the birth of a particle litter this frame
//               by resetting _tics_since_birth
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystem::induce_labor(void);

602 16 clear_to_initial 0 4 752 32 ParticleSystem::clear_to_initial 0 1 235 320
////////////////////////////////////////////////////////////////////
//    Function : clear_to_initial
//      Access : Public
// Description : Resets the system to its start state by resizing to 0,
//               then resizing back to current size.
////////////////////////////////////////////////////////////////////
51
inline void ParticleSystem::clear_to_initial(void);

603 9 soft_stop 0 4 752 25 ParticleSystem::soft_stop 0 2 236 237 284
////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
////////////////////////////////////////////////////////////////////
54
inline void ParticleSystem::soft_stop(float br = (0));

604 10 soft_start 0 4 752 26 ParticleSystem::soft_start 0 2 238 239 262
////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
////////////////////////////////////////////////////////////////////
55
inline void ParticleSystem::soft_start(float br = (0));

605 6 update 0 4 752 22 ParticleSystem::update 0 1 240 0
38
void ParticleSystem::update(float dt);

606 24 write_free_particle_fifo 0 4 752 40 ParticleSystem::write_free_particle_fifo 0 2 241 242 298
////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
92
virtual void ParticleSystem::write_free_particle_fifo(ostream &out, int indent = (0)) const;

607 21 write_spawn_templates 0 4 752 37 ParticleSystem::write_spawn_templates 0 2 243 244 295
////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
89
virtual void ParticleSystem::write_spawn_templates(ostream &out, int indent = (0)) const;

608 5 write 0 4 752 21 ParticleSystem::write 0 2 245 246 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
73
virtual void ParticleSystem::write(ostream &out, int indent = (0)) const;

609 14 get_class_type 0 4 752 30 ParticleSystem::get_class_type 0 1 247 0
55
static TypeHandle ParticleSystem::get_class_type(void);

610 12 PointEmitter 0 4 754 26 PointEmitter::PointEmitter 0 2 248 249 225
////////////////////////////////////////////////////////////////////
//    Function : PointEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
87
PointEmitter::PointEmitter(void);
PointEmitter::PointEmitter(PointEmitter const &copy);

611 12 set_location 0 4 754 26 PointEmitter::set_location 0 1 250 709
// Filename: pointEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point
//      Access : public
// Description : point setting
////////////////////////////////////////////////////////////////////
58
inline void PointEmitter::set_location(LPoint3f const &p);

612 12 get_location 0 4 754 26 PointEmitter::get_location 0 1 251 0
55
inline LPoint3f PointEmitter::get_location(void) const;

613 20 PointParticleFactory 0 4 755 42 PointParticleFactory::PointParticleFactory 0 2 252 253 471
////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
PointParticleFactory::PointParticleFactory(void);
PointParticleFactory::PointParticleFactory(PointParticleFactory const &copy);

614 21 PointParticleRenderer 0 4 756 44 PointParticleRenderer::PointParticleRenderer 0 8 254 255 256 257 258 259 260 261 473
////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : special constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : Copy constructor
////////////////////////////////////////////////////////////////////
453
PointParticleRenderer::PointParticleRenderer(PointParticleRenderer const &copy);
PointParticleRenderer::PointParticleRenderer(BaseParticleRenderer::ParticleRendererAlphaMode ad = (PR_ALPHA_NONE), float point_size = (1), PointParticleRenderer::PointParticleBlendType bt = (PP_ONE_COLOR), BaseParticleRenderer::ParticleRendererBlendMethod bm = (PP_NO_BLEND), LVecBase4f const &sc = ((LColorf(1, 1, 1, 1))), LVecBase4f const &ec = ((LColorf(1, 1, 1, 1))));

615 14 set_point_size 0 4 756 37 PointParticleRenderer::set_point_size 0 1 262 692
// Filename: pointParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline void PointParticleRenderer::set_point_size(float point_size);

616 15 set_start_color 0 4 756 38 PointParticleRenderer::set_start_color 0 1 263 194
////////////////////////////////////////////////////////////////////
//    Function : set_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
73
inline void PointParticleRenderer::set_start_color(LVecBase4f const &sc);

617 13 set_end_color 0 4 756 36 PointParticleRenderer::set_end_color 0 1 264 192
////////////////////////////////////////////////////////////////////
//    Function : set_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
71
inline void PointParticleRenderer::set_end_color(LVecBase4f const &ec);

618 14 set_blend_type 0 4 756 37 PointParticleRenderer::set_blend_type 0 1 265 193
////////////////////////////////////////////////////////////////////
//    Function : set_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
100
inline void PointParticleRenderer::set_blend_type(PointParticleRenderer::PointParticleBlendType bt);

619 16 set_blend_method 0 4 756 39 PointParticleRenderer::set_blend_method 0 1 266 195
////////////////////////////////////////////////////////////////////
//    Function : set_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
106
inline void PointParticleRenderer::set_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

620 14 get_point_size 0 4 756 37 PointParticleRenderer::get_point_size 0 1 267 193
////////////////////////////////////////////////////////////////////
//    Function : get_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
63
inline float PointParticleRenderer::get_point_size(void) const;

621 15 get_start_color 0 4 756 38 PointParticleRenderer::get_start_color 0 1 268 194
////////////////////////////////////////////////////////////////////
//    Function : get_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f const &PointParticleRenderer::get_start_color(void) const;

622 13 get_end_color 0 4 756 36 PointParticleRenderer::get_end_color 0 1 269 192
////////////////////////////////////////////////////////////////////
//    Function : get_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &PointParticleRenderer::get_end_color(void) const;

623 14 get_blend_type 0 4 756 37 PointParticleRenderer::get_blend_type 0 1 270 193
////////////////////////////////////////////////////////////////////
//    Function : get_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
103
inline PointParticleRenderer::PointParticleBlendType PointParticleRenderer::get_blend_type(void) const;

624 16 get_blend_method 0 4 756 39 PointParticleRenderer::get_blend_method 0 1 271 195
////////////////////////////////////////////////////////////////////
//    Function : get_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
109
inline BaseParticleRenderer::ParticleRendererBlendMethod PointParticleRenderer::get_blend_method(void) const;

625 16 RectangleEmitter 0 4 758 34 RectangleEmitter::RectangleEmitter 0 2 272 273 229
////////////////////////////////////////////////////////////////////
//    Function : RectangleEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
107
RectangleEmitter::RectangleEmitter(void);
RectangleEmitter::RectangleEmitter(RectangleEmitter const &copy);

626 13 set_min_bound 0 4 758 31 RectangleEmitter::set_min_bound 0 1 274 716
// Filename: rectangleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_min_bound(LPoint2f const &vmin);

627 13 set_max_bound 0 4 758 31 RectangleEmitter::set_max_bound 0 1 275 222
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_max_bound(LPoint2f const &vmax);

628 13 get_min_bound 0 4 758 31 RectangleEmitter::get_min_bound 0 1 276 222
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_min_bound(void) const;

629 13 get_max_bound 0 4 758 31 RectangleEmitter::get_max_bound 0 1 277 222
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_max_bound(void) const;

630 23 SparkleParticleRenderer 0 4 759 48 SparkleParticleRenderer::SparkleParticleRenderer 0 3 278 279 280 710
////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
404
SparkleParticleRenderer::SparkleParticleRenderer(void);
SparkleParticleRenderer::SparkleParticleRenderer(SparkleParticleRenderer const &copy);
SparkleParticleRenderer::SparkleParticleRenderer(LVecBase4f const &center, LVecBase4f const &edge, float birth_radius, float death_radius, SparkleParticleRenderer::SparkleParticleLifeScale life_scale, BaseParticleRenderer::ParticleRendererAlphaMode alpha_mode);

631 16 set_center_color 0 4 759 41 SparkleParticleRenderer::set_center_color 0 1 281 696
// Filename: sparkleParticleRenderer.I
// Created by:  charles (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
75
inline void SparkleParticleRenderer::set_center_color(LVecBase4f const &c);

632 14 set_edge_color 0 4 759 39 SparkleParticleRenderer::set_edge_color 0 1 282 193
////////////////////////////////////////////////////////////////////
//    Function : set_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
73
inline void SparkleParticleRenderer::set_edge_color(LVecBase4f const &c);

633 16 set_birth_radius 0 4 759 41 SparkleParticleRenderer::set_birth_radius 0 1 283 195
////////////////////////////////////////////////////////////////////
//    Function : set_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_birth_radius(float radius);

634 16 set_death_radius 0 4 759 41 SparkleParticleRenderer::set_death_radius 0 1 284 195
////////////////////////////////////////////////////////////////////
//    Function : set_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_death_radius(float radius);

635 14 set_life_scale 0 4 759 39 SparkleParticleRenderer::set_life_scale 0 1 285 193
////////////////////////////////////////////////////////////////////
//    Function : set_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
104
inline void SparkleParticleRenderer::set_life_scale(SparkleParticleRenderer::SparkleParticleLifeScale );

636 16 get_center_color 0 4 759 41 SparkleParticleRenderer::get_center_color 0 1 286 195
////////////////////////////////////////////////////////////////////
//    Function : get_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
79
inline LVecBase4f const &SparkleParticleRenderer::get_center_color(void) const;

637 14 get_edge_color 0 4 759 39 SparkleParticleRenderer::get_edge_color 0 1 287 193
////////////////////////////////////////////////////////////////////
//    Function : get_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
77
inline LVecBase4f const &SparkleParticleRenderer::get_edge_color(void) const;

638 16 get_birth_radius 0 4 759 41 SparkleParticleRenderer::get_birth_radius 0 1 288 195
////////////////////////////////////////////////////////////////////
//    Function : get_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_birth_radius(void) const;

639 16 get_death_radius 0 4 759 41 SparkleParticleRenderer::get_death_radius 0 1 289 195
////////////////////////////////////////////////////////////////////
//    Function : get_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_death_radius(void) const;

640 14 get_life_scale 0 4 759 39 SparkleParticleRenderer::get_life_scale 0 1 290 193
////////////////////////////////////////////////////////////////////
//    Function : get_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
109
inline SparkleParticleRenderer::SparkleParticleLifeScale SparkleParticleRenderer::get_life_scale(void) const;

641 20 SphereSurfaceEmitter 0 4 761 42 SphereSurfaceEmitter::SphereSurfaceEmitter 0 2 291 292 233
////////////////////////////////////////////////////////////////////
//    Function : SphereSurfaceEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
SphereSurfaceEmitter::SphereSurfaceEmitter(void);
SphereSurfaceEmitter::SphereSurfaceEmitter(SphereSurfaceEmitter const &copy);

642 10 set_radius 0 4 761 32 SphereSurfaceEmitter::set_radius 0 1 293 217
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
54
inline void SphereSurfaceEmitter::set_radius(float r);

643 10 get_radius 0 4 761 32 SphereSurfaceEmitter::get_radius 0 1 294 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
58
inline float SphereSurfaceEmitter::get_radius(void) const;

644 19 SphereVolumeEmitter 0 4 762 40 SphereVolumeEmitter::SphereVolumeEmitter 0 2 295 296 232
////////////////////////////////////////////////////////////////////
//    Function : SphereVolumeEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
122
SphereVolumeEmitter::SphereVolumeEmitter(void);
SphereVolumeEmitter::SphereVolumeEmitter(SphereVolumeEmitter const &copy);

645 10 set_radius 0 4 762 31 SphereVolumeEmitter::set_radius 0 1 297 217
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
53
inline void SphereVolumeEmitter::set_radius(float r);

646 10 get_radius 0 4 762 31 SphereVolumeEmitter::get_radius 0 1 298 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
57
inline float SphereVolumeEmitter::get_radius(void) const;

647 15 set_source_info 0 4 763 27 SpriteAnim::set_source_info 0 2 299 300 0
169
void SpriteAnim::set_source_info(basic_string< char > const &tex);
void SpriteAnim::set_source_info(basic_string< char > const &model, basic_string< char > const &node);

648 15 get_source_type 0 4 763 27 SpriteAnim::get_source_type 0 1 301 0
63
SpriteAnim::SourceType SpriteAnim::get_source_type(void) const;

649 14 get_tex_source 0 4 763 26 SpriteAnim::get_tex_source 0 1 302 0
60
basic_string< char > SpriteAnim::get_tex_source(void) const;

650 16 get_model_source 0 4 763 28 SpriteAnim::get_model_source 0 1 303 0
62
basic_string< char > SpriteAnim::get_model_source(void) const;

651 15 get_node_source 0 4 763 27 SpriteAnim::get_node_source 0 1 304 0
61
basic_string< char > SpriteAnim::get_node_source(void) const;

652 14 get_num_frames 0 4 763 26 SpriteAnim::get_num_frames 0 1 305 0
43
int SpriteAnim::get_num_frames(void) const;

653 11 ~SpriteAnim 0 4 763 23 SpriteAnim::~SpriteAnim 0 0 0
30
SpriteAnim::~SpriteAnim(void);

654 22 SpriteParticleRenderer 0 4 765 46 SpriteParticleRenderer::SpriteParticleRenderer 0 3 306 307 308 515
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
174
SpriteParticleRenderer::SpriteParticleRenderer(Texture *tex = ((Texture *)((void *)(0))));
SpriteParticleRenderer::SpriteParticleRenderer(SpriteParticleRenderer const &copy);

655 13 set_from_node 0 4 765 37 SpriteParticleRenderer::set_from_node 0 4 309 310 311 312 2222
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
////////////////////////////////////////////////////////////////////
268
void SpriteParticleRenderer::set_from_node(NodePath const &node_path, bool size_from_texels = (0));
void SpriteParticleRenderer::set_from_node(NodePath const &node_path, basic_string< char > const &model, basic_string< char > const &node, bool size_from_texels = (0));

656 13 add_from_node 0 4 765 37 SpriteParticleRenderer::add_from_node 0 6 313 314 315 316 317 318 1450
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////
306
void SpriteParticleRenderer::add_from_node(NodePath const &node_path, bool size_from_texels = (0), bool resize = (0));
void SpriteParticleRenderer::add_from_node(NodePath const &node_path, basic_string< char > const &model, basic_string< char > const &node, bool size_from_texels = (0), bool resize = (0));

657 11 set_texture 0 4 765 35 SpriteParticleRenderer::set_texture 0 2 319 320 1089
// Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
////////////////////////////////////////////////////////////////////
91
inline void SpriteParticleRenderer::set_texture(Texture *tex, float texels_per_unit = (1));

658 11 add_texture 0 4 765 35 SpriteParticleRenderer::add_texture 0 3 321 322 323 469
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
////////////////////////////////////////////////////////////////////
110
inline void SpriteParticleRenderer::add_texture(Texture *tex, float texels_per_unit = (1), bool resize = (0));

659 16 remove_animation 0 4 765 40 SpriteParticleRenderer::remove_animation 0 1 324 291
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::remove_animation
//      Access : Published
// Description : Removes an animation texture set from the renderer.
////////////////////////////////////////////////////////////////////
66
inline void SpriteParticleRenderer::remove_animation(int const n);

660 9 set_ll_uv 0 4 765 33 SpriteParticleRenderer::set_ll_uv 0 2 325 326 956
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
172
inline void SpriteParticleRenderer::set_ll_uv(LPoint2f const &ll_uv);
inline void SpriteParticleRenderer::set_ll_uv(LPoint2f const &ll_uv, int const anim, int const frame);

661 9 set_ur_uv 0 4 765 33 SpriteParticleRenderer::set_ur_uv 0 2 327 328 958
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
172
inline void SpriteParticleRenderer::set_ur_uv(LPoint2f const &ur_uv);
inline void SpriteParticleRenderer::set_ur_uv(LPoint2f const &ur_uv, int const anim, int const frame);

662 8 set_size 0 4 765 32 SpriteParticleRenderer::set_size 0 1 329 275
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_size
//      Access : public
// Description : Sets the size of each particle in world units.
////////////////////////////////////////////////////////////////////
72
inline void SpriteParticleRenderer::set_size(float width, float height);

663 9 set_color 0 4 765 33 SpriteParticleRenderer::set_color 0 1 330 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_color
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_color(LVecBase4f const &color);

664 16 set_x_scale_flag 0 4 765 40 SpriteParticleRenderer::set_x_scale_flag 0 1 331 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_x_scale_flag(bool animate_x_ratio);

665 16 set_y_scale_flag 0 4 765 40 SpriteParticleRenderer::set_y_scale_flag 0 1 332 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_y_scale_flag(bool animate_y_ratio);

666 19 set_anim_angle_flag 0 4 765 43 SpriteParticleRenderer::set_anim_angle_flag 0 1 333 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
76
inline void SpriteParticleRenderer::set_anim_angle_flag(bool animate_theta);

667 19 set_initial_x_scale 0 4 765 43 SpriteParticleRenderer::set_initial_x_scale 0 1 334 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_x_scale(float initial_x_scale);

668 17 set_final_x_scale 0 4 765 41 SpriteParticleRenderer::set_final_x_scale 0 1 335 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_x_scale(float final_x_scale);

669 19 set_initial_y_scale 0 4 765 43 SpriteParticleRenderer::set_initial_y_scale 0 1 336 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_y_scale(float initial_y_scale);

670 17 set_final_y_scale 0 4 765 41 SpriteParticleRenderer::set_final_y_scale 0 1 337 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_y_scale(float final_y_scale);

671 21 set_nonanimated_theta 0 4 765 45 SpriteParticleRenderer::set_nonanimated_theta 0 1 338 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_nonanimated_theta(float theta);

672 22 set_alpha_blend_method 0 4 765 46 SpriteParticleRenderer::set_alpha_blend_method 0 1 339 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
113
inline void SpriteParticleRenderer::set_alpha_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

673 17 set_alpha_disable 0 4 765 41 SpriteParticleRenderer::set_alpha_disable 0 1 340 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void SpriteParticleRenderer::set_alpha_disable(bool ad);

674 25 set_animate_frames_enable 0 4 765 49 SpriteParticleRenderer::set_animate_frames_enable 0 1 341 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_animate_frames_enable(bool an);

675 23 set_animate_frames_rate 0 4 765 47 SpriteParticleRenderer::set_animate_frames_rate 0 1 342 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline void SpriteParticleRenderer::set_animate_frames_rate(float r);

676 24 set_animate_frames_index 0 4 765 48 SpriteParticleRenderer::set_animate_frames_index 0 1 343 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_index
//   Access : public
//  Purpose : Sets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
68
inline void SpriteParticleRenderer::set_animate_frames_index(int i);

677 11 get_texture 0 4 765 35 SpriteParticleRenderer::get_texture 0 2 344 345 418
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////
156
inline Texture *SpriteParticleRenderer::get_texture(void) const;
inline Texture *SpriteParticleRenderer::get_texture(int const anim, int const frame) const;

678 13 get_num_anims 0 4 765 37 SpriteParticleRenderer::get_num_anims 0 1 346 0
61
inline int SpriteParticleRenderer::get_num_anims(void) const;

679 8 get_anim 0 4 765 32 SpriteParticleRenderer::get_anim 0 1 347 0
71
inline SpriteAnim *SpriteParticleRenderer::get_anim(int const n) const;

680 13 get_last_anim 0 4 765 37 SpriteParticleRenderer::get_last_anim 0 1 348 0
69
inline SpriteAnim *SpriteParticleRenderer::get_last_anim(void) const;

681 31 get_color_interpolation_manager 0 4 765 55 SpriteParticleRenderer::get_color_interpolation_manager 0 1 349 228
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color_interpolation_manager
//   Access : public
////////////////////////////////////////////////////////////////////
102
inline ColorInterpolationManager *SpriteParticleRenderer::get_color_interpolation_manager(void) const;

682 9 get_ll_uv 0 4 765 33 SpriteParticleRenderer::get_ll_uv 0 2 350 351 632
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////
152
inline LPoint2f SpriteParticleRenderer::get_ll_uv(void) const;
inline LPoint2f SpriteParticleRenderer::get_ll_uv(int const anim, int const frame) const;

683 9 get_ur_uv 0 4 765 33 SpriteParticleRenderer::get_ur_uv 0 2 352 353 633
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the upper-right corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////
152
inline LPoint2f SpriteParticleRenderer::get_ur_uv(void) const;
inline LPoint2f SpriteParticleRenderer::get_ur_uv(int const anim, int const frame) const;

684 9 get_width 0 4 765 33 SpriteParticleRenderer::get_width 0 1 354 280
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_width
//      Access : public
// Description : Returns the width of each particle in world units.
////////////////////////////////////////////////////////////////////
59
inline float SpriteParticleRenderer::get_width(void) const;

685 10 get_height 0 4 765 34 SpriteParticleRenderer::get_height 0 1 355 282
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_height
//      Access : public
// Description : Returns the height of each particle in world units.
////////////////////////////////////////////////////////////////////
60
inline float SpriteParticleRenderer::get_height(void) const;

686 9 get_color 0 4 765 33 SpriteParticleRenderer::get_color 0 1 356 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline LVecBase4f SpriteParticleRenderer::get_color(void) const;

687 16 get_x_scale_flag 0 4 765 40 SpriteParticleRenderer::get_x_scale_flag 0 1 357 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_x_scale_flag(void) const;

688 16 get_y_scale_flag 0 4 765 40 SpriteParticleRenderer::get_y_scale_flag 0 1 358 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_y_scale_flag(void) const;

689 19 get_anim_angle_flag 0 4 765 43 SpriteParticleRenderer::get_anim_angle_flag 0 1 359 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline bool SpriteParticleRenderer::get_anim_angle_flag(void) const;

690 19 get_initial_x_scale 0 4 765 43 SpriteParticleRenderer::get_initial_x_scale 0 1 360 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_x_scale(void) const;

691 17 get_final_x_scale 0 4 765 41 SpriteParticleRenderer::get_final_x_scale 0 1 361 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_x_scale(void) const;

692 19 get_initial_y_scale 0 4 765 43 SpriteParticleRenderer::get_initial_y_scale 0 1 362 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_y_scale(void) const;

693 17 get_final_y_scale 0 4 765 41 SpriteParticleRenderer::get_final_y_scale 0 1 363 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_y_scale(void) const;

694 21 get_nonanimated_theta 0 4 765 45 SpriteParticleRenderer::get_nonanimated_theta 0 1 364 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline float SpriteParticleRenderer::get_nonanimated_theta(void) const;

695 22 get_alpha_blend_method 0 4 765 46 SpriteParticleRenderer::get_alpha_blend_method 0 1 365 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
116
inline BaseParticleRenderer::ParticleRendererBlendMethod SpriteParticleRenderer::get_alpha_blend_method(void) const;

696 17 get_alpha_disable 0 4 765 41 SpriteParticleRenderer::get_alpha_disable 0 1 366 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
66
inline bool SpriteParticleRenderer::get_alpha_disable(void) const;

697 25 get_animate_frames_enable 0 4 765 49 SpriteParticleRenderer::get_animate_frames_enable 0 1 367 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
74
inline bool SpriteParticleRenderer::get_animate_frames_enable(void) const;

698 23 get_animate_frames_rate 0 4 765 47 SpriteParticleRenderer::get_animate_frames_rate 0 1 368 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline float SpriteParticleRenderer::get_animate_frames_rate(void) const;

699 24 get_animate_frames_index 0 4 765 48 SpriteParticleRenderer::get_animate_frames_index 0 1 369 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_index
//   Access : public
//  Purpose : Gets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
72
inline int SpriteParticleRenderer::get_animate_frames_index(void) const;

700 18 TangentRingEmitter 0 4 766 38 TangentRingEmitter::TangentRingEmitter 0 2 370 371 234
////////////////////////////////////////////////////////////////////
//     Function : tangentRingEmitter
//       Access : public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
117
TangentRingEmitter::TangentRingEmitter(void);
TangentRingEmitter::TangentRingEmitter(TangentRingEmitter const &copy);

701 10 set_radius 0 4 766 30 TangentRingEmitter::set_radius 0 1 372 681
// Filename: tangentRingEmitter.I
// Created by:  charles (25Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_radius
//    Access : public
////////////////////////////////////////////////////////////////////
52
inline void TangentRingEmitter::set_radius(float r);

702 17 set_radius_spread 0 4 766 37 TangentRingEmitter::set_radius_spread 0 1 373 192
////////////////////////////////////////////////////////////////////
//  Function : set_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
64
inline void TangentRingEmitter::set_radius_spread(float spread);

703 10 get_radius 0 4 766 30 TangentRingEmitter::get_radius 0 1 374 185
////////////////////////////////////////////////////////////////////
//  Function : get_radius
//    Access : public
////////////////////////////////////////////////////////////////////
56
inline float TangentRingEmitter::get_radius(void) const;

704 17 get_radius_spread 0 4 766 37 TangentRingEmitter::get_radius_spread 0 1 375 192
////////////////////////////////////////////////////////////////////
//  Function : get_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
63
inline float TangentRingEmitter::get_radius_spread(void) const;

705 20 ZSpinParticleFactory 0 4 767 42 ZSpinParticleFactory::ZSpinParticleFactory 0 2 376 377 463
////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
ZSpinParticleFactory::ZSpinParticleFactory(void);
ZSpinParticleFactory::ZSpinParticleFactory(ZSpinParticleFactory const &copy);

706 17 set_initial_angle 0 4 767 39 ZSpinParticleFactory::set_initial_angle 0 1 378 688
// Filename: zSpinParticleFactory.I
// Created by:  charles (16Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline void ZSpinParticleFactory::set_initial_angle(float angle);

707 15 set_final_angle 0 4 767 37 ZSpinParticleFactory::set_final_angle 0 1 379 188
////////////////////////////////////////////////////////////////////
// Function : set_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void ZSpinParticleFactory::set_final_angle(float angle);

708 24 set_initial_angle_spread 0 4 767 46 ZSpinParticleFactory::set_initial_angle_spread 0 1 380 197
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void ZSpinParticleFactory::set_initial_angle_spread(float spread);

709 22 set_final_angle_spread 0 4 767 44 ZSpinParticleFactory::set_final_angle_spread 0 1 381 195
////////////////////////////////////////////////////////////////////
// Function : set_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void ZSpinParticleFactory::set_final_angle_spread(float spread);

710 17 get_initial_angle 0 4 767 39 ZSpinParticleFactory::get_initial_angle 0 1 382 190
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float ZSpinParticleFactory::get_initial_angle(void) const;

711 15 get_final_angle 0 4 767 37 ZSpinParticleFactory::get_final_angle 0 1 383 188
////////////////////////////////////////////////////////////////////
// Function : get_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float ZSpinParticleFactory::get_final_angle(void) const;

712 24 get_initial_angle_spread 0 4 767 46 ZSpinParticleFactory::get_initial_angle_spread 0 1 384 197
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
72
inline float ZSpinParticleFactory::get_initial_angle_spread(void) const;

713 22 get_final_angle_spread 0 4 767 44 ZSpinParticleFactory::get_final_angle_spread 0 1 385 195
////////////////////////////////////////////////////////////////////
// Function : get_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
70
inline float ZSpinParticleFactory::get_final_angle_spread(void) const;

714 20 set_angular_velocity 0 4 767 42 ZSpinParticleFactory::set_angular_velocity 0 1 386 0
64
inline void ZSpinParticleFactory::set_angular_velocity(float v);

715 20 get_angular_velocity 0 4 767 42 ZSpinParticleFactory::get_angular_velocity 0 1 387 193
////////////////////////////////////////////////////////////////////
// Function : get_angular_velocity
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline float ZSpinParticleFactory::get_angular_velocity(void) const;

716 27 set_angular_velocity_spread 0 4 767 49 ZSpinParticleFactory::set_angular_velocity_spread 0 1 388 0
76
inline void ZSpinParticleFactory::set_angular_velocity_spread(float spread);

717 27 get_angular_velocity_spread 0 4 767 49 ZSpinParticleFactory::get_angular_velocity_spread 0 1 389 0
75
inline float ZSpinParticleFactory::get_angular_velocity_spread(void) const;

718 23 enable_angular_velocity 0 4 767 45 ZSpinParticleFactory::enable_angular_velocity 0 1 390 0
73
inline void ZSpinParticleFactory::enable_angular_velocity(bool bEnabled);

719 28 get_angular_velocity_enabled 0 4 767 50 ZSpinParticleFactory::get_angular_velocity_enabled 0 1 391 0
75
inline bool ZSpinParticleFactory::get_angular_velocity_enabled(void) const;

720 21 ParticleSystemManager 0 4 768 44 ParticleSystemManager::ParticleSystemManager 0 2 392 393 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////
72
ParticleSystemManager::ParticleSystemManager(int every_nth_frame = (1));

721 22 ~ParticleSystemManager 0 4 768 45 ParticleSystemManager::~ParticleSystemManager 0 0 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : Public, Virtual
// Description : Destructor
////////////////////////////////////////////////////////////////////
60
virtual ParticleSystemManager::~ParticleSystemManager(void);

722 18 set_frame_stepping 0 4 768 41 ParticleSystemManager::set_frame_stepping 0 1 394 690
// Filename: particleSystemManager.I
// Created by:  charles (28Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void ParticleSystemManager::set_frame_stepping(int every_nth_frame);

723 18 get_frame_stepping 0 4 768 41 ParticleSystemManager::get_frame_stepping 0 1 395 191
////////////////////////////////////////////////////////////////////
// Function : get_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline int ParticleSystemManager::get_frame_stepping(void) const;

724 21 attach_particlesystem 0 4 768 44 ParticleSystemManager::attach_particlesystem 0 1 396 194
////////////////////////////////////////////////////////////////////
// Function : attach_particlesystem
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void ParticleSystemManager::attach_particlesystem(ParticleSystem *ps);

725 21 remove_particlesystem 0 4 768 44 ParticleSystemManager::remove_particlesystem 0 1 397 256
////////////////////////////////////////////////////////////////////
//    Function : remove_particlesystem
//      Access : public
// Description : removes a ps from the maintenance list
////////////////////////////////////////////////////////////////////
70
void ParticleSystemManager::remove_particlesystem(ParticleSystem *ps);

726 5 clear 0 4 768 28 ParticleSystemManager::clear 0 1 398 178
////////////////////////////////////////////////////////////////////
// Function : clear
//   Access : public
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystemManager::clear(void);

727 12 do_particles 0 4 768 35 ParticleSystemManager::do_particles 0 3 399 400 401 931
////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and render for each ps in the list.
//               this is probably the one you want to use.  Rendering
//               is the expensive operation, and particles REALLY
//               should at least be updated every frame, so nth_frame
//               stepping applies only to rendering.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
////////////////////////////////////////////////////////////////////
145
void ParticleSystemManager::do_particles(float dt);
void ParticleSystemManager::do_particles(float dt, ParticleSystem *ps, bool do_render = (1));

728 6 output 0 4 768 29 ParticleSystemManager::output 0 1 402 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
63
virtual void ParticleSystemManager::output(ostream &out) const;

729 13 write_ps_list 0 4 768 36 ParticleSystemManager::write_ps_list 0 2 403 404 287
////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
88
virtual void ParticleSystemManager::write_ps_list(ostream &out, int indent = (0)) const;

730 5 write 0 4 768 28 ParticleSystemManager::write 0 2 405 406 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void ParticleSystemManager::write(ostream &out, int indent = (0)) const;

406
1 14 Dtool_BxOcq9K2 0 7 4 769 0 14 Dtool_BxOcq9K2 0 1 4 this 3 769  
2 14 Dtool_BxOcQvUs 0 4 5 774 0 14 Dtool_BxOcQvUs 231 ////////////////////////////////////////////////////////////////////
//    Function : generate
//      Access : Public
// Description : parent generation function
//////////////////////////////////////////////////////////////////// 3 4 this 3 769  3 pos 1 770  3 vel 1 772  
3 14 Dtool_BxOcvAPb 0 4 6 774 0 14 Dtool_BxOcvAPb 735 // Filename: baseParticleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_emission_type
//      Access : Public
// Description : emission type assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 et 1 733  
4 14 Dtool_BxOc014P 0 4 7 774 0 14 Dtool_BxOc014P 230 ////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
// Description : amplitude assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  1 a 1 775  
5 14 Dtool_BxOcGfat 0 4 8 774 0 14 Dtool_BxOcGfat 244 ////////////////////////////////////////////////////////////////////
//    Function : set_amplitude_spread
//      Access : Public
// Description : amplitude spread assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 as 1 775  
6 14 Dtool_BxOcJolc 0 4 9 774 0 14 Dtool_BxOcJolc 231 ////////////////////////////////////////////////////////////////////
//    Function : set_offset_force
//      Access : Public
// Description : user-defined force
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 of 1 776  
7 14 Dtool_BxOc4_f_ 0 4 10 774 0 14 Dtool_BxOc4_f_ 268 ////////////////////////////////////////////////////////////////////
//    Function : set_explicit_launch_vector
//      Access : Public
// Description : assignment of explicit emission launch vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  3 elv 1 776  
8 14 Dtool_BxOcegGF 0 4 11 774 0 14 Dtool_BxOcegGF 258 ////////////////////////////////////////////////////////////////////
//    Function : set_radiate_origin
//      Access : Public
// Description : assignment of radiate emission origin point
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 ro 1 778  
9 14 Dtool_BxOc_Hj6 0 6 12 733 0 14 Dtool_BxOc_Hj6 233 ////////////////////////////////////////////////////////////////////
//    Function : get_emission_type
//      Access : Public
// Description : emission type query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
10 14 Dtool_BxOcyJT9 0 6 13 775 0 14 Dtool_BxOcyJT9 225 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
// Description : amplitude query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
11 14 Dtool_BxOc_DLN 0 6 14 775 0 14 Dtool_BxOc_DLN 239 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude_spread
//      Access : Public
// Description : amplitude spread query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
12 14 Dtool_BxOcgc7B 0 7 15 772 0 14 Dtool_BxOcgc7B 231 ////////////////////////////////////////////////////////////////////
//    Function : get_offset_force
//      Access : Public
// Description : user-defined force
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
13 14 Dtool_BxOcSHW0 0 7 16 772 0 14 Dtool_BxOcSHW0 264 ////////////////////////////////////////////////////////////////////
//    Function : get_explicit_launch_vector
//      Access : Public
// Description : query for explicit emission launch vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
14 14 Dtool_BxOcvPd8 0 7 17 770 0 14 Dtool_BxOcvPd8 256 ////////////////////////////////////////////////////////////////////
//    Function : get_radiate_origin
//      Access : Public
// Description : query for explicit emission launch vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
15 14 Dtool_BxOcKdyZ 0 4 18 774 0 14 Dtool_BxOcKdyZ 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 out 1 782  
16 14 Dtool_BxOckUM2 0 4 19 774 0 14 Dtool_BxOckUM2 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 780  3 out 1 782  6 indent 1 784  
17 14 Dtool_BxOcWxub 0 4 19 774 0 14 Dtool_BxOcWxub 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 out 1 782  
18 14 Dtool_BxOc__j2 0 7 21 785 0 14 Dtool_BxOc__j2 219 ////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_BxOchrbu 0 7 21 785 0 14 Dtool_BxOchrbu 224 ////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 786  
20 14 Dtool_BxOcHjXu 0 4 22 774 0 14 Dtool_BxOcHjXu 706 // Filename: ringEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  1 r 1 775  
21 14 Dtool_BxOc23Hl 0 4 23 774 0 14 Dtool_BxOc23Hl 228 ////////////////////////////////////////////////////////////////////
//    Function : set_angle
//      Access : public
// Description : angle of elevation set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  5 angle 1 775  
22 14 Dtool_BxOcGOEK 0 4 24 774 0 14 Dtool_BxOcGOEK 231 ////////////////////////////////////////////////////////////////////
//    Function : set_radius_spread
//      Access : public
// Description : radius_spread set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  6 spread 1 775  
23 14 Dtool_BxOc6UCL 0 4 25 774 0 14 Dtool_BxOc6UCL 252 ////////////////////////////////////////////////////////////////////
//    Function : set_uniform_emission
//      Access : public
// Description : uniform_emission set               
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  16 uniform_emission 1 784  
24 14 Dtool_BxOc32I_ 0 6 26 775 0 14 Dtool_BxOc32I_ 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
25 14 Dtool_BxOcRZ9k 0 6 27 775 0 14 Dtool_BxOcRZ9k 228 ////////////////////////////////////////////////////////////////////
//    Function : get_angle
//      Access : public
// Description : angle of elevation get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
26 14 Dtool_BxOcAgOJ 0 6 28 775 0 14 Dtool_BxOcAgOJ 231 ////////////////////////////////////////////////////////////////////
//    Function : get_radius_spread
//      Access : public
// Description : radius_spread get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
27 14 Dtool_BxOcoIQL 0 6 29 784 0 14 Dtool_BxOcoIQL 252 ////////////////////////////////////////////////////////////////////
//    Function : get_uniform_emission
//      Access : public
// Description : uniform_emission get               
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
28 14 Dtool_BxOcLfIe 0 7 31 788 0 14 Dtool_BxOcLfIe 218 ////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
29 14 Dtool_BxOcNiv1 0 7 31 788 0 14 Dtool_BxOcNiv1 223 ////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 789  
30 14 Dtool_BxOcvrI1 0 4 32 774 0 14 Dtool_BxOcvrI1 715 // Filename: arcEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_start_angle
//      Access : public
// Description : start angle set
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  5 angle 1 775  
31 14 Dtool_BxOckNlY 0 4 33 774 0 14 Dtool_BxOckNlY 223 ////////////////////////////////////////////////////////////////////
//    Function : set_end_angle
//      Access : public
// Description : end angle set
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  5 angle 1 775  
32 14 Dtool_BxOcAhqa 0 4 34 774 0 14 Dtool_BxOcAhqa 217 ////////////////////////////////////////////////////////////////////
//    Function : set_arc
//      Access : public
// Description : arc sweep set
//////////////////////////////////////////////////////////////////// 3 4 this 3 788  10 startAngle 1 775  8 endAngle 1 775  
33 14 Dtool_BxOcQ4vE 0 6 35 775 0 14 Dtool_BxOcQ4vE 227 ////////////////////////////////////////////////////////////////////
//    Function : get_start_angle
//      Access : public
// Description : get start angle
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
34 14 Dtool_BxOcRD_y 0 6 36 775 0 14 Dtool_BxOcRD_y 223 ////////////////////////////////////////////////////////////////////
//    Function : get_end_angle
//      Access : public
// Description : get end angle
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
35 14 Dtool_BxOciQuU 0 4 38 774 0 14 Dtool_BxOciQuU 693 // Filename: baseParticleFactory.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 lb 1 775  
36 14 Dtool_BxOcdQHH 0 4 39 774 0 14 Dtool_BxOcdQHH 198 ////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 ls 1 775  
37 14 Dtool_BxOcbu3l 0 4 40 774 0 14 Dtool_BxOcbu3l 192 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 mb 1 775  
38 14 Dtool_BxOcNeQM 0 4 41 774 0 14 Dtool_BxOcNeQM 194 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 ms 1 775  
39 14 Dtool_BxOcWNEZ 0 4 42 774 0 14 Dtool_BxOcWNEZ 205 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  3 tvb 1 775  
40 14 Dtool_BxOcANWX 0 4 43 774 0 14 Dtool_BxOcANWX 207 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  3 tvs 1 775  
41 14 Dtool_BxOctgu1 0 6 44 775 0 14 Dtool_BxOctgu1 196 ////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
42 14 Dtool_BxOc99k2 0 6 45 775 0 14 Dtool_BxOc99k2 198 ////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
43 14 Dtool_BxOc2EQT 0 6 46 775 0 14 Dtool_BxOc2EQT 192 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
44 14 Dtool_BxOc_lih 0 6 47 775 0 14 Dtool_BxOc_lih 194 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
45 14 Dtool_BxOcCoqe 0 6 48 775 0 14 Dtool_BxOcCoqe 205 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
46 14 Dtool_BxOcm_x2 0 6 49 775 0 14 Dtool_BxOcm_x2 207 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
47 14 Dtool_BxOcsnkF 0 6 50 794 0 14 Dtool_BxOcsnkF 0 1 4 this 3 792  
48 14 Dtool_BxOcwNK_ 0 4 51 774 0 14 Dtool_BxOcwNK_ 192 ////////////////////////////////////////////////////////////////////
//    Function : make_particle
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 bp 1 794  
49 14 Dtool_BxOcOcSl 0 4 52 774 0 14 Dtool_BxOcOcSl 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  3 out 1 782  
50 14 Dtool_BxOctDsB 0 4 53 774 0 14 Dtool_BxOctDsB 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 792  3 out 1 782  6 indent 1 784  
51 14 Dtool_BxOcFUOn 0 4 53 774 0 14 Dtool_BxOcFUOn 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  3 out 1 782  
52 14 Dtool_BxOcnoTT 0 7 57 799 0 14 Dtool_BxOcnoTT 759 // Filename: baseParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node
//       Class : Published
// Description : Query the geomnode pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
53 14 Dtool_BxOcwSZD 0 7 58 801 0 14 Dtool_BxOcwSZD 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node_path
//       Class : Published
// Description : Query the geomnode pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
54 14 Dtool_BxOc0p5w 0 4 59 774 0 14 Dtool_BxOc0p5w 216 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_alpha_mode
//      Access : Published
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 am 1 738  
55 14 Dtool_BxOccz17 0 6 60 738 0 14 Dtool_BxOccz17 216 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_alpha_mode
//      Access : Published
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
56 14 Dtool_BxOcmPHY 0 4 61 774 0 14 Dtool_BxOcmPHY 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_user_alpha
//      Access : Published
// Description : sets alpha for "user" alpha mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 ua 1 775  
57 14 Dtool_BxOck2V9 0 6 62 775 0 14 Dtool_BxOck2V9 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_user_alpha
//      Access : Published
// Description : gets alpha for "user" alpha mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
58 14 Dtool_BxOcZxa6 0 4 63 774 0 14 Dtool_BxOcZxa6 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 4 4 this 3 802  2 bm 1 803  2 oa 1 805  2 ob 1 805  
59 14 Dtool_BxOcpO_p 0 4 63 774 0 14 Dtool_BxOcpO_p 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 3 4 this 3 802  2 bm 1 803  2 oa 1 805  
60 14 Dtool_BxOctvuc 0 4 63 774 0 14 Dtool_BxOctvuc 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 bm 1 803  
61 14 Dtool_BxOcvavp 0 4 64 774 0 14 Dtool_BxOcvavp 740 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_ignore_scale
//      Access : Published
// Description : Sets the "ignore scale" flag.  When this is true,
//               particles will be drawn as if they had no scale,
//               regardless of whatever scale might be inherited from
//               above the render node in the scene graph.
//
//               This flag is mainly useful to support legacy code
//               that was written for a very early version of Panda,
//               whose sprite particle renderer had a bug that
//               incorrectly ignored the inherited scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  12 ignore_scale 1 806  
62 14 Dtool_BxOcA22s 0 6 65 806 0 14 Dtool_BxOcA22s 310 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_ignore_scale
//      Access : Published
// Description : Returns the "ignore scale" flag.  See
//               set_ignore_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
63 14 Dtool_BxOcjYBa 0 4 66 774 0 14 Dtool_BxOcjYBa 303 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 797  3 out 1 782  
64 14 Dtool_BxOcGvEn 0 4 67 774 0 14 Dtool_BxOcGvEn 302 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 797  3 out 1 782  6 indent 1 784  
65 14 Dtool_BxOcLLsX 0 4 67 774 0 14 Dtool_BxOcLLsX 302 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 797  3 out 1 782  
66 14 Dtool_BxOckwIq 0 7 69 807 0 14 Dtool_BxOckwIq 218 ////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
67 14 Dtool_BxOc42fc 0 7 69 807 0 14 Dtool_BxOc42fc 223 ////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 808  
68 14 Dtool_BxOcfUdv 0 4 70 774 0 14 Dtool_BxOcfUdv 717 // Filename: boxEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : Public
// Description : boundary assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 807  4 vmin 1 778  
69 14 Dtool_BxOchptT 0 4 71 774 0 14 Dtool_BxOchptT 229 ////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : Public
// Description : boundary assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 807  4 vmax 1 778  
70 14 Dtool_BxOctfR4 0 7 72 770 0 14 Dtool_BxOctfR4 227 ////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : Public
// Description : boundary accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 808  
71 14 Dtool_BxOcgZgc 0 7 73 770 0 14 Dtool_BxOcgZgc 227 ////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : Public
// Description : boundary accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 808  
72 14 Dtool_BxOcTq1Y 0 7 76 813 0 14 Dtool_BxOcTq1Y 861 // Filename: colorInterpolationManager.I
// Created by:  joswilso (02Jun05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::get_color_a
//      Access : public
// Description : Returns the primary color of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 811  
73 14 Dtool_BxOcmbQF 0 4 77 774 0 14 Dtool_BxOcmbQF 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::set_color_a
//      Access : public
// Description : Sets the primary color of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 814  1 c 1 815  
74 14 Dtool_BxOcQV5J 0 7 78 818 0 14 Dtool_BxOcQV5J 0 0 
75 14 Dtool_BxOc5qpK 0 7 81 813 0 14 Dtool_BxOc5qpK 286 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::get_color_b
//      Access : public
// Description : Returns the secondary color of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 819  
76 14 Dtool_BxOcrmTD 0 4 82 774 0 14 Dtool_BxOcrmTD 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::set_color_b
//      Access : public
// Description : Sets the secondary color of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 821  1 c 1 815  
77 14 Dtool_BxOcdiNh 0 7 83 818 0 14 Dtool_BxOcdiNh 0 0 
78 14 Dtool_BxOck4fw 0 6 86 775 0 14 Dtool_BxOck4fw 286 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_a
//      Access : public
// Description : Returns the primary width of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 822  
79 14 Dtool_BxOch47o 0 6 87 775 0 14 Dtool_BxOch47o 288 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_b
//      Access : public
// Description : Returns the secondary width of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 822  
80 14 Dtool_BxOcMbSc 0 4 88 774 0 14 Dtool_BxOcMbSc 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_a
//      Access : public
// Description : Sets the primary width of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  1 w 1 775  
81 14 Dtool_BxOcJbuU 0 4 89 774 0 14 Dtool_BxOcJbuU 285 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_b
//      Access : public
// Description : Sets the secondary width of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  1 w 1 775  
82 14 Dtool_BxOcfIOE 0 7 90 818 0 14 Dtool_BxOcfIOE 0 0 
83 14 Dtool_BxOc6TsB 0 6 93 775 0 14 Dtool_BxOc6TsB 324 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::get_period
//      Access : public
// Description : Returns the time to transition from A to B then back
//               to A again.
//////////////////////////////////////////////////////////////////// 1 4 this 3 825  
84 14 Dtool_BxOc_SEl 0 4 94 774 0 14 Dtool_BxOc_SEl 321 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::set_period
//      Access : public
// Description : Sets the time to transition from A to B then back
//               to A again.
//////////////////////////////////////////////////////////////////// 2 4 this 3 827  1 p 1 775  
85 14 Dtool_BxOcvz7V 0 7 95 818 0 14 Dtool_BxOcvz7V 0 0 
86 14 Dtool_BxOc_JTb 0 7 98 829 0 14 Dtool_BxOc_JTb 260 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 5 8 function 1 828  10 time_begin 1 775  8 time_end 1 775  12 is_modulated 1 806  2 id 1 784  
87 14 Dtool_BxOcwp_m 0 7 98 829 0 14 Dtool_BxOcwp_m 265 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 1 s 1 830  
88 14 Dtool_BxOc4E2r 0 7 99 833 0 14 Dtool_BxOc4E2r 327 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_function
//      Access : public
// Description : Returns a reference to the function object 
//               corresponding to this segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
89 14 Dtool_BxOcB4sN 0 6 100 775 0 14 Dtool_BxOcB4sN 406 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_begin
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
90 14 Dtool_BxOcOviy 0 6 101 775 0 14 Dtool_BxOcOviy 401 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_end
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment's effect stops.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
91 14 Dtool_BxOcJqJ6 0 6 102 806 0 14 Dtool_BxOcJqJ6 290 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_modulated
//      Access : public
// Description : Returns whether the function is additive or modulated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
92 14 Dtool_BxOc6RXy 0 6 103 784 0 14 Dtool_BxOc6RXy 318 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_id
//      Access : public
// Description : Returns the id assigned to this segment by the
//               manager that created it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
93 14 Dtool_BxOcPDxm 0 6 104 806 0 14 Dtool_BxOcPDxm 291 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_enabled()
//      Access : public
// Description : Returns whether the segments effects are being applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
94 14 Dtool_BxOcUTU7 0 4 105 774 0 14 Dtool_BxOcUTU7 333 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_function
//      Access : public
// Description : Sets the function that the segment will use for 
//               its interpolation calculations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  8 function 1 828  
95 14 Dtool_BxOctTOV 0 4 106 774 0 14 Dtool_BxOctTOV 403 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_begin
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 time 1 775  
96 14 Dtool_BxOcmmt6 0 4 107 774 0 14 Dtool_BxOcmmt6 397 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_end
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment's effect ends.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 time 1 775  
97 14 Dtool_BxOcADzd 0 4 108 774 0 14 Dtool_BxOcADzd 414 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_is_modulated
//      Access : public
// Description : Sets how the function is applied to the final color.
//               If true, the value is multiplied. If false, the value
//               is simply added. Default is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 flag 1 806  
98 14 Dtool_BxOcZRhS 0 4 109 774 0 14 Dtool_BxOcZRhS 289 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_enabled()
//      Access : public
// Description : Sets whether the segments effects should be applied.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  7 enabled 1 806  
99 14 Dtool_BxOcJ6Vn 0 7 111 834 0 14 Dtool_BxOcJ6Vn 268 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
100 14 Dtool_BxOcupdd 0 7 111 834 0 14 Dtool_BxOcupdd 265 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 835  
101 14 Dtool_BxOcsQcF 0 7 111 834 0 14 Dtool_BxOcsQcF 260 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 c 1 815  
102 14 Dtool_BxOcTDGv 0 6 112 784 0 14 Dtool_BxOcTDGv 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  5 color 1 815  12 is_modulated 1 806  
103 14 Dtool_BxOcj7Ez 0 6 112 784 0 14 Dtool_BxOcj7Ez 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  5 color 1 815  
104 14 Dtool_BxOcm4ub 0 6 112 784 0 14 Dtool_BxOcm4ub 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
105 14 Dtool_BxOc17pq 0 6 112 784 0 14 Dtool_BxOc17pq 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
106 14 Dtool_BxOcFtx4 0 6 112 784 0 14 Dtool_BxOcFtx4 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
107 14 Dtool_BxOcMADt 0 6 113 784 0 14 Dtool_BxOcMADt 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  12 is_modulated 1 806  
108 14 Dtool_BxOcF6z8 0 6 113 784 0 14 Dtool_BxOcF6z8 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
109 14 Dtool_BxOcEOQf 0 6 113 784 0 14 Dtool_BxOcEOQf 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
110 14 Dtool_BxOcyeIx 0 6 113 784 0 14 Dtool_BxOcyeIx 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
111 14 Dtool_BxOcjEI2 0 6 113 784 0 14 Dtool_BxOcjEI2 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
112 14 Dtool_BxOcdNk6 0 6 113 784 0 14 Dtool_BxOcdNk6 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
113 14 Dtool_BxOcdXMS 0 6 114 784 0 14 Dtool_BxOcdXMS 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 8 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  7 width_b 1 775  12 is_modulated 1 806  
114 14 Dtool_BxOcryND 0 6 114 784 0 14 Dtool_BxOcryND 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 7 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  7 width_b 1 775  
115 14 Dtool_BxOcMMlL 0 6 114 784 0 14 Dtool_BxOcMMlL 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  
116 14 Dtool_BxOcKBPz 0 6 114 784 0 14 Dtool_BxOcKBPz 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
117 14 Dtool_BxOca_tn 0 6 114 784 0 14 Dtool_BxOca_tn 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
118 14 Dtool_BxOc_AWQ 0 6 114 784 0 14 Dtool_BxOc_AWQ 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
119 14 Dtool_BxOcbNRf 0 6 114 784 0 14 Dtool_BxOcbNRf 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
120 14 Dtool_BxOcHbZt 0 6 114 784 0 14 Dtool_BxOcHbZt 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
121 14 Dtool_BxOc_8Bx 0 6 115 784 0 14 Dtool_BxOc_8Bx 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 7 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  6 period 1 775  12 is_modulated 1 806  
122 14 Dtool_BxOc1E_u 0 6 115 784 0 14 Dtool_BxOc1E_u 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  6 period 1 775  
123 14 Dtool_BxOcNaoW 0 6 115 784 0 14 Dtool_BxOcNaoW 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
124 14 Dtool_BxOc4pJL 0 6 115 784 0 14 Dtool_BxOc4pJL 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
125 14 Dtool_BxOckKwz 0 6 115 784 0 14 Dtool_BxOckKwz 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
126 14 Dtool_BxOcyJsC 0 6 115 784 0 14 Dtool_BxOcyJsC 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
127 14 Dtool_BxOcG00Q 0 6 115 784 0 14 Dtool_BxOcG00Q 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
128 14 Dtool_BxOcG__q 0 4 116 774 0 14 Dtool_BxOcG__q 290 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::set_default_color
//      Access : public
// Description : Sets the color to used if no segments are present
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 c 1 815  
129 14 Dtool_BxOcxZFl 0 7 117 829 0 14 Dtool_BxOcxZFl 284 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment
//      Access : public
// Description : Returns the segment that corresponds to 'seg_id'.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  6 seg_id 1 784  
130 14 Dtool_BxOcuRLg 0 6 118 837 0 14 Dtool_BxOcuRLg 336 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment_id_list
//      Access : public
// Description : Returns a space delimited list of all of the ids
//               in the manager at the time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
131 14 Dtool_BxOcW5Nf 0 4 119 774 0 14 Dtool_BxOcW5Nf 282 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_segment
//      Access : public
// Description : Removes the segment of 'id' from the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  6 seg_id 1 784  
132 14 Dtool_BxOcRYQe 0 4 120 774 0 14 Dtool_BxOcRYQe 278 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_to_initial
//      Access : public
// Description : Removes all segments from the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
133 14 Dtool_BxOcMaqQ 0 7 122 838 0 14 Dtool_BxOcMaqQ 232 ////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
134 14 Dtool_BxOcZaXE 0 7 122 838 0 14 Dtool_BxOcZaXE 237 ////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 839  
135 14 Dtool_BxOc8VPM 0 4 123 774 0 14 Dtool_BxOc8VPM 713 // Filename: discEmitter.I
// Created by:  charles (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : radius assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  1 r 1 775  
136 14 Dtool_BxOcwAyy 0 4 124 774 0 14 Dtool_BxOcwAyy 227 ////////////////////////////////////////////////////////////////////
//    Function : set_outer_angle
//      Access : Public
// Description : aoe assignement
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  7 o_angle 1 775  
137 14 Dtool_BxOc0naY 0 4 125 774 0 14 Dtool_BxOc0naY 226 ////////////////////////////////////////////////////////////////////
//    Function : set_inner_angle
//      Access : Public
// Description : aoe assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  7 i_angle 1 775  
138 14 Dtool_BxOcT8hk 0 4 126 774 0 14 Dtool_BxOcT8hk 230 ////////////////////////////////////////////////////////////////////
//    Function : set_outer_magnitude
//      Access : public
// Description : mag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 o_mag 1 775  
139 14 Dtool_BxOcx2JK 0 4 127 774 0 14 Dtool_BxOcx2JK 230 ////////////////////////////////////////////////////////////////////
//    Function : set_inner_magnitude
//      Access : public
// Description : mag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 i_mag 1 775  
140 14 Dtool_BxOcD6_D 0 4 128 774 0 14 Dtool_BxOcD6_D 224 ////////////////////////////////////////////////////////////////////
//    Function : set_cubic_lerping
//      Access : public
// Description : clerp flag
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 clerp 1 806  
141 14 Dtool_BxOcwO_c 0 6 129 775 0 14 Dtool_BxOcwO_c 222 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : Public
// Description : radius accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
142 14 Dtool_BxOcfHU_ 0 6 130 775 0 14 Dtool_BxOcfHU_ 224 ////////////////////////////////////////////////////////////////////
//    Function : get_outer_angle
//      Access : Public
// Description : aoe accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
143 14 Dtool_BxOcVl9j 0 6 131 775 0 14 Dtool_BxOcVl9j 224 ////////////////////////////////////////////////////////////////////
//    Function : get_inner_angle
//      Access : Public
// Description : aoe accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
144 14 Dtool_BxOcR43h 0 6 132 775 0 14 Dtool_BxOcR43h 228 ////////////////////////////////////////////////////////////////////
//    Function : get_outer_magnitude
//      Access : public
// Description : mag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
145 14 Dtool_BxOcrrfH 0 6 133 775 0 14 Dtool_BxOcrrfH 228 ////////////////////////////////////////////////////////////////////
//    Function : get_inner_magnitude
//      Access : public
// Description : mag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
146 14 Dtool_BxOcX_1y 0 6 134 806 0 14 Dtool_BxOcX_1y 233 ////////////////////////////////////////////////////////////////////
//    Function : get_cubic_lerping
//      Access : public
// Description : clerp flag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
147 14 Dtool_BxOcfwJz 0 7 136 843 0 14 Dtool_BxOcfwJz 0 2 2 am 1 738  9 geom_node 1 841  
148 14 Dtool_BxOcQt3X 0 7 136 843 0 14 Dtool_BxOcQt3X 0 1 2 am 1 738  
149 14 Dtool_BxOcqpfG 0 7 136 843 0 14 Dtool_BxOcqpfG 0 0 
150 14 Dtool_BxOcf5c7 0 7 136 843 0 14 Dtool_BxOcf5c7 233 ////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 844  
151 14 Dtool_BxOc2Hy2 0 4 137 774 0 14 Dtool_BxOc2Hy2 893 // Filename: geomParticleRenderer.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
// we're forcing a pool resize to remove every node in the vector.
// this is because nodes are reference-counted, and we have to
// explicitly remove them from the node they were previously parented
// to. 2 4 this 3 843  4 node 1 841  
152 14 Dtool_BxOcWLyT 0 7 138 841 0 14 Dtool_BxOcWLyT 188 ////////////////////////////////////////////////////////////////////
//  Function : get_geom_node
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 843  
153 14 Dtool_BxOceO8V 0 7 139 834 0 14 Dtool_BxOceO8V 206 ////////////////////////////////////////////////////////////////////
//  Function : get_color_interpolation_manager
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
154 14 Dtool_BxOcL_k8 0 4 140 774 0 14 Dtool_BxOcL_k8 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_x_ratio 1 806  
155 14 Dtool_BxOcKuGQ 0 4 141 774 0 14 Dtool_BxOcKuGQ 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_y_ratio 1 806  
156 14 Dtool_BxOcKeoj 0 4 142 774 0 14 Dtool_BxOcKeoj 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_z_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_z_ratio 1 806  
157 14 Dtool_BxOcExQB 0 4 143 774 0 14 Dtool_BxOcExQB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_x_scale 1 775  
158 14 Dtool_BxOcVoU5 0 4 144 774 0 14 Dtool_BxOcVoU5 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_x_scale 1 775  
159 14 Dtool_BxOco2VB 0 4 145 774 0 14 Dtool_BxOco2VB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_y_scale 1 775  
160 14 Dtool_BxOc5pEb 0 4 146 774 0 14 Dtool_BxOc5pEb 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_y_scale 1 775  
161 14 Dtool_BxOcM_aB 0 4 147 774 0 14 Dtool_BxOcM_aB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_z_scale 1 775  
162 14 Dtool_BxOcqp08 0 4 148 774 0 14 Dtool_BxOcqp08 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_z_scale 1 775  
163 14 Dtool_BxOcTAs_ 0 6 149 806 0 14 Dtool_BxOcTAs_ 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
164 14 Dtool_BxOcUwOT 0 6 150 806 0 14 Dtool_BxOcUwOT 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
165 14 Dtool_BxOcUgwm 0 6 151 806 0 14 Dtool_BxOcUgwm 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_z_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
166 14 Dtool_BxOcJ87w 0 6 152 775 0 14 Dtool_BxOcJ87w 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
167 14 Dtool_BxOcZAPZ 0 6 153 775 0 14 Dtool_BxOcZAPZ 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
168 14 Dtool_BxOc1E_w 0 6 154 775 0 14 Dtool_BxOc1E_w 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
169 14 Dtool_BxOcsA_6 0 6 155 775 0 14 Dtool_BxOcsA_6 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
170 14 Dtool_BxOcRPEx 0 6 156 775 0 14 Dtool_BxOcRPEx 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
171 14 Dtool_BxOcwAvc 0 6 157 775 0 14 Dtool_BxOcwAvc 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
172 14 Dtool_BxOcmO71 0 7 159 846 0 14 Dtool_BxOcmO71 219 ////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
173 14 Dtool_BxOcvJIy 0 7 159 846 0 14 Dtool_BxOcvJIy 219 ////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 847  
174 14 Dtool_BxOckFGJ 0 4 160 774 0 14 Dtool_BxOckFGJ 718 // Filename: lineEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint1
//      Access : Public
// Description : endpoint assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  5 point 1 778  
175 14 Dtool_BxOcEBtJ 0 4 161 774 0 14 Dtool_BxOcEBtJ 229 ////////////////////////////////////////////////////////////////////
//    Function : set_endpoint2
//      Access : Public
// Description : endpoint assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  5 point 1 778  
176 14 Dtool_BxOc6l0h 0 7 162 770 0 14 Dtool_BxOc6l0h 227 ////////////////////////////////////////////////////////////////////
//    Function : get_endpoint1
//      Access : Public
// Description : endpoint accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 847  
177 14 Dtool_BxOcaobi 0 7 163 770 0 14 Dtool_BxOcaobi 227 ////////////////////////////////////////////////////////////////////
//    Function : get_endpoint2
//      Access : Public
// Description : endpoint accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 847  
178 14 Dtool_BxOcEZz7 0 7 165 849 0 14 Dtool_BxOcEZz7 236 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
179 14 Dtool_BxOcsY3q 0 7 165 849 0 14 Dtool_BxOcsY3q 228 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 3 4 head 1 815  4 tail 1 815  10 alpha_mode 1 738  
180 14 Dtool_BxOcWkxE 0 7 165 849 0 14 Dtool_BxOcWkxE 233 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 850  
181 14 Dtool_BxOc_Gxm 0 4 166 774 0 14 Dtool_BxOc_Gxm 690 // Filename: lineParticleRenderer.I
// Created by:  darren (06Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_head_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  1 c 1 815  
182 14 Dtool_BxOcHL4t 0 4 167 774 0 14 Dtool_BxOcHL4t 193 ////////////////////////////////////////////////////////////////////
//    Function : set_tail_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  1 c 1 815  
183 14 Dtool_BxOcS8gD 0 6 168 815 0 14 Dtool_BxOcS8gD 193 ////////////////////////////////////////////////////////////////////
//    Function : get_head_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
184 14 Dtool_BxOcpyoK 0 6 169 815 0 14 Dtool_BxOcpyoK 193 ////////////////////////////////////////////////////////////////////
//    Function : get_tail_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
185 14 Dtool_BxOc3NfU 0 4 170 774 0 14 Dtool_BxOc3NfU 202 ////////////////////////////////////////////////////////////////////
//    Function : set_line_scale_factor
// Description : accessor
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  2 sf 1 775  
186 14 Dtool_BxOcybib 0 6 171 775 0 14 Dtool_BxOcybib 202 ////////////////////////////////////////////////////////////////////
//    Function : get_line_scale_factor
// Description : accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
187 14 Dtool_BxOc07Eu 0 7 174 854 0 14 Dtool_BxOc07Eu 228 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Copy Constructor.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 852  
188 14 Dtool_BxOc_wz4 0 7 174 854 0 14 Dtool_BxOc_wz4 231 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
//////////////////////////////////////////////////////////////////// 1 9 pool_size 1 784  
189 14 Dtool_BxOclHaR 0 7 174 854 0 14 Dtool_BxOclHaR 231 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_BxOcpvqS 0 4 175 774 0 14 Dtool_BxOcpvqS 411 ////             ///////////////////////////////////////////////////////
//// SET METHODS ///////////////////////////////////////////////////////
////             ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_pool_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 size 1 784  
191 14 Dtool_BxOcBtuQ 0 4 176 774 0 14 Dtool_BxOcBtuQ 193 ////////////////////////////////////////////////////////////////////
//    Function : set_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_br 1 775  
192 14 Dtool_BxOcx6vw 0 4 177 774 0 14 Dtool_BxOcx6vw 198 ////////////////////////////////////////////////////////////////////
//    Function : set_soft_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_br 1 775  
193 14 Dtool_BxOcURZZ 0 4 178 774 0 14 Dtool_BxOcURZZ 194 ////////////////////////////////////////////////////////////////////
//    Function : set_litter_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_ls 1 784  
194 14 Dtool_BxOcHkGy 0 4 179 774 0 14 Dtool_BxOcHkGy 196 ////////////////////////////////////////////////////////////////////
//    Function : set_litter_spread
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_ls 1 784  
195 14 Dtool_BxOcSAZN 0 4 180 774 0 14 Dtool_BxOcSAZN 202 ////////////////////////////////////////////////////////////////////
//    Function : set_local_velocity_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 lv 1 806  
196 14 Dtool_BxOcBOU3 0 4 181 774 0 14 Dtool_BxOcBOU3 206 ////////////////////////////////////////////////////////////////////
//    Function : set_system_grows_older_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 sgo 1 806  
197 14 Dtool_BxOc_Iib 0 4 182 774 0 14 Dtool_BxOc_Iib 198 ////////////////////////////////////////////////////////////////////
//    Function : set_system_lifespan
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 sl 1 775  
198 14 Dtool_BxOc4GAU 0 4 183 774 0 14 Dtool_BxOc4GAU 193 ////////////////////////////////////////////////////////////////////
//    Function : set_system_age
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 age 1 775  
199 14 Dtool_BxOclTf6 0 4 184 774 0 14 Dtool_BxOclTf6 195 ////////////////////////////////////////////////////////////////////
//    Function : set_active_state
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 a 1 806  
200 14 Dtool_BxOc3lKx 0 4 185 774 0 14 Dtool_BxOc3lKx 202 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_on_death_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 sod 1 806  
201 14 Dtool_BxOcTlYr 0 4 186 774 0 14 Dtool_BxOcTlYr 200 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 841  
202 14 Dtool_BxOcICv8 0 4 187 774 0 14 Dtool_BxOcICv8 205 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node_path
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 855  
203 14 Dtool_BxOcDbaK 0 4 188 774 0 14 Dtool_BxOcDbaK 203 ////////////////////////////////////////////////////////////////////
//    Function : set_template_system_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 tsf 1 806  
204 14 Dtool_BxOchkLH 0 4 189 774 0 14 Dtool_BxOchkLH 196 ////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 855  
205 14 Dtool_BxOcoYFU 0 4 189 774 0 14 Dtool_BxOcoYFU 196 ////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 841  
206 14 Dtool_BxOc_bAc 0 4 190 774 0 14 Dtool_BxOc_bAc 191 ////////////////////////////////////////////////////////////////////
//    Function : set_renderer
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 r 1 802  
207 14 Dtool_BxOcP6z6 0 4 191 774 0 14 Dtool_BxOcP6z6 190 ////////////////////////////////////////////////////////////////////
//    Function : set_emitter
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 e 1 769  
208 14 Dtool_BxOca_iU 0 4 192 774 0 14 Dtool_BxOca_iU 190 ////////////////////////////////////////////////////////////////////
//    Function : set_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 f 1 791  
209 14 Dtool_BxOc7S5e 0 4 193 774 0 14 Dtool_BxOc7S5e 190 ////////////////////////////////////////////////////////////////////
//    Function : set_floor_z
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 z 1 775  
210 14 Dtool_BxOc1_VC 0 4 194 774 0 14 Dtool_BxOc1_VC 192 ////////////////////////////////////////////////////////////////////
//    Function : clear_floor_z
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
211 14 Dtool_BxOcXT57 0 6 195 784 0 14 Dtool_BxOcXT57 405 ////             /////////////////////////////////////////////////////
//// GET METHODS /////////////////////////////////////////////////////
////             /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_pool_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
212 14 Dtool_BxOcq_T_ 0 6 196 775 0 14 Dtool_BxOcq_T_ 193 ////////////////////////////////////////////////////////////////////
//    Function : get_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
213 14 Dtool_BxOckXfI 0 6 197 775 0 14 Dtool_BxOckXfI 198 ////////////////////////////////////////////////////////////////////
//    Function : get_soft_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
214 14 Dtool_BxOcY2Tr 0 6 198 784 0 14 Dtool_BxOcY2Tr 194 ////////////////////////////////////////////////////////////////////
//    Function : get_litter_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
215 14 Dtool_BxOc31vh 0 6 199 784 0 14 Dtool_BxOc31vh 196 ////////////////////////////////////////////////////////////////////
//    Function : get_litter_spread
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
216 14 Dtool_BxOcvd6d 0 6 200 806 0 14 Dtool_BxOcvd6d 202 ////////////////////////////////////////////////////////////////////
//    Function : get_local_velocity_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
217 14 Dtool_BxOcmbbN 0 6 201 806 0 14 Dtool_BxOcmbbN 206 ////////////////////////////////////////////////////////////////////
//    Function : get_system_grows_older_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
218 14 Dtool_BxOcPFTz 0 6 202 775 0 14 Dtool_BxOcPFTz 198 ////////////////////////////////////////////////////////////////////
//    Function : get_system_lifespan
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
219 14 Dtool_BxOcSLlC 0 6 203 775 0 14 Dtool_BxOcSLlC 193 ////////////////////////////////////////////////////////////////////
//    Function : get_system_age
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
220 14 Dtool_BxOc7pRo 0 6 204 806 0 14 Dtool_BxOc7pRo 195 ////////////////////////////////////////////////////////////////////
//    Function : get_active_state
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
221 14 Dtool_BxOcysrB 0 6 205 806 0 14 Dtool_BxOcysrB 202 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_on_death_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
222 14 Dtool_BxOc3D5l 0 7 206 841 0 14 Dtool_BxOc3D5l 200 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
223 14 Dtool_BxOct18V 0 7 207 801 0 14 Dtool_BxOct18V 205 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node_path
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
224 14 Dtool_BxOc4RPW 0 6 208 806 0 14 Dtool_BxOc4RPW 201 ////////////////////////////////////////////////////////////////////
//    Function : get_i_was_spawned_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
225 14 Dtool_BxOcAtRp 0 6 209 784 0 14 Dtool_BxOcAtRp 199 ////////////////////////////////////////////////////////////////////
//    Function : get_living_particles
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
226 14 Dtool_BxOcQX9q 0 7 210 801 0 14 Dtool_BxOcQX9q 196 ////////////////////////////////////////////////////////////////////
//    Function : get_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
227 14 Dtool_BxOcWWmZ 0 7 211 802 0 14 Dtool_BxOcWWmZ 191 ////////////////////////////////////////////////////////////////////
//    Function : get_renderer
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
228 14 Dtool_BxOcgwSc 0 7 212 769 0 14 Dtool_BxOcgwSc 190 ////////////////////////////////////////////////////////////////////
//    Function : get_emitter
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
229 14 Dtool_BxOcW2Vl 0 7 213 791 0 14 Dtool_BxOcW2Vl 190 ////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
230 14 Dtool_BxOcw7_3 0 6 214 775 0 14 Dtool_BxOcw7_3 190 ////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
231 14 Dtool_BxOcL_37 0 4 215 774 0 14 Dtool_BxOcL_37 197 ////////////////////////////////////////////////////////////////////
//    Function : add_spawn_template
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 ps 1 854  
232 14 Dtool_BxOcf6XZ 0 4 216 774 0 14 Dtool_BxOcf6XZ 200 ////////////////////////////////////////////////////////////////////
//    Function : clear_spawn_templates
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
233 14 Dtool_BxOczbqe 0 4 217 774 0 14 Dtool_BxOczbqe 849 // Filename: particleSystem.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : render
//      Access : Public
// Description : Populates an attached GeomNode structure with the
//               particle geometry for rendering.  This is a
//               wrapper for accessability.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
234 14 Dtool_BxOc3z9v 0 4 218 774 0 14 Dtool_BxOc3z9v 305 ////////////////////////////////////////////////////////////////////
//    Function : induce_labor
//      Access : Public
// Description : Forces the birth of a particle litter this frame
//               by resetting _tics_since_birth
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
235 14 Dtool_BxOcp19v 0 4 219 774 0 14 Dtool_BxOcp19v 320 ////////////////////////////////////////////////////////////////////
//    Function : clear_to_initial
//      Access : Public
// Description : Resets the system to its start state by resizing to 0,
//               then resizing back to current size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
236 14 Dtool_BxOcnhka 0 4 220 774 0 14 Dtool_BxOcnhka 284 ////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 br 1 775  
237 14 Dtool_BxOcImQe 0 4 220 774 0 14 Dtool_BxOcImQe 284 ////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
238 14 Dtool_BxOch7PT 0 4 221 774 0 14 Dtool_BxOch7PT 262 ////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 br 1 775  
239 14 Dtool_BxOcAwCJ 0 4 221 774 0 14 Dtool_BxOcAwCJ 262 ////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
240 14 Dtool_BxOc2i2m 0 4 222 774 0 14 Dtool_BxOc2i2m 0 2 4 this 3 854  2 dt 1 775  
241 14 Dtool_BxOc_rSe 0 4 223 774 0 14 Dtool_BxOc_rSe 298 ////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
242 14 Dtool_BxOc0ytn 0 4 223 774 0 14 Dtool_BxOc0ytn 298 ////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
243 14 Dtool_BxOcgE38 0 4 224 774 0 14 Dtool_BxOcgE38 295 ////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
244 14 Dtool_BxOcpNQ_ 0 4 224 774 0 14 Dtool_BxOcpNQ_ 295 ////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
245 14 Dtool_BxOcLxhQ 0 4 225 774 0 14 Dtool_BxOcLxhQ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
246 14 Dtool_BxOcY_Tj 0 4 225 774 0 14 Dtool_BxOcY_Tj 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
247 14 Dtool_BxOczk95 0 7 226 818 0 14 Dtool_BxOczk95 0 0 
248 14 Dtool_BxOcsVW_ 0 7 228 857 0 14 Dtool_BxOcsVW_ 0 0 
249 14 Dtool_BxOchKUT 0 7 228 857 0 14 Dtool_BxOchKUT 225 ////////////////////////////////////////////////////////////////////
//    Function : PointEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 858  
250 14 Dtool_BxOcLDeR 0 4 229 774 0 14 Dtool_BxOcLDeR 709 // Filename: pointEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point
//      Access : public
// Description : point setting
//////////////////////////////////////////////////////////////////// 2 4 this 3 857  1 p 1 778  
251 14 Dtool_BxOcHUJU 0 7 230 770 0 14 Dtool_BxOcHUJU 0 1 4 this 3 858  
252 14 Dtool_BxOczdmT 0 7 232 860 0 14 Dtool_BxOczdmT 236 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
253 14 Dtool_BxOcxQLp 0 7 232 860 0 14 Dtool_BxOcxQLp 233 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 861  
254 14 Dtool_BxOcJ8x3 0 7 235 863 0 14 Dtool_BxOcJ8x3 0 6 2 ad 1 738  10 point_size 1 775  2 bt 1 757  2 bm 1 739  2 sc 1 815  2 ec 1 815  
255 14 Dtool_BxOcOmML 0 7 235 863 0 14 Dtool_BxOcOmML 0 5 2 ad 1 738  10 point_size 1 775  2 bt 1 757  2 bm 1 739  2 sc 1 815  
256 14 Dtool_BxOc0kEa 0 7 235 863 0 14 Dtool_BxOc0kEa 0 4 2 ad 1 738  10 point_size 1 775  2 bt 1 757  2 bm 1 739  
257 14 Dtool_BxOcW_vy 0 7 235 863 0 14 Dtool_BxOcW_vy 0 3 2 ad 1 738  10 point_size 1 775  2 bt 1 757  
258 14 Dtool_BxOcLWut 0 7 235 863 0 14 Dtool_BxOcLWut 0 2 2 ad 1 738  10 point_size 1 775  
259 14 Dtool_BxOcg3Ul 0 7 235 863 0 14 Dtool_BxOcg3Ul 0 1 2 ad 1 738  
260 14 Dtool_BxOcIwvl 0 7 235 863 0 14 Dtool_BxOcIwvl 0 0 
261 14 Dtool_BxOcC0H3 0 7 235 863 0 14 Dtool_BxOcC0H3 234 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : Copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 864  
262 14 Dtool_BxOcn3gj 0 4 236 774 0 14 Dtool_BxOcn3gj 692 // Filename: pointParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  10 point_size 1 775  
263 14 Dtool_BxOcdFkn 0 4 237 774 0 14 Dtool_BxOcdFkn 194 ////////////////////////////////////////////////////////////////////
//    Function : set_start_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  2 sc 1 815  
264 14 Dtool_BxOcEzEQ 0 4 238 774 0 14 Dtool_BxOcEzEQ 192 ////////////////////////////////////////////////////////////////////
//    Function : set_end_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  2 ec 1 815  
265 14 Dtool_BxOcsUyU 0 4 239 774 0 14 Dtool_BxOcsUyU 193 ////////////////////////////////////////////////////////////////////
//    Function : set_blend_type
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  2 bt 1 757  
266 14 Dtool_BxOcHTEJ 0 4 240 774 0 14 Dtool_BxOcHTEJ 195 ////////////////////////////////////////////////////////////////////
//    Function : set_blend_method
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  2 bm 1 739  
267 14 Dtool_BxOcd9NK 0 6 241 775 0 14 Dtool_BxOcd9NK 193 ////////////////////////////////////////////////////////////////////
//    Function : get_point_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
268 14 Dtool_BxOcBJrm 0 6 242 815 0 14 Dtool_BxOcBJrm 194 ////////////////////////////////////////////////////////////////////
//    Function : get_start_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
269 14 Dtool_BxOcaeEq 0 6 243 815 0 14 Dtool_BxOcaeEq 192 ////////////////////////////////////////////////////////////////////
//    Function : get_end_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
270 14 Dtool_BxOcR8v5 0 6 244 757 0 14 Dtool_BxOcR8v5 193 ////////////////////////////////////////////////////////////////////
//    Function : get_blend_type
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
271 14 Dtool_BxOcNfkE 0 6 245 739 0 14 Dtool_BxOcNfkE 195 ////////////////////////////////////////////////////////////////////
//    Function : get_blend_method
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
272 14 Dtool_BxOcqyrE 0 7 247 866 0 14 Dtool_BxOcqyrE 0 0 
273 14 Dtool_BxOcjSSt 0 7 247 866 0 14 Dtool_BxOcjSSt 229 ////////////////////////////////////////////////////////////////////
//    Function : RectangleEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 867  
274 14 Dtool_BxOc__w9 0 4 248 774 0 14 Dtool_BxOc__w9 716 // Filename: rectangleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : public
// Description : boundary set
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  4 vmin 1 869  
275 14 Dtool_BxOcE18N 0 4 249 774 0 14 Dtool_BxOcE18N 222 ////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : public
// Description : boundary set
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  4 vmax 1 869  
276 14 Dtool_BxOcNaOf 0 7 250 872 0 14 Dtool_BxOcNaOf 222 ////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : public
// Description : boundary get
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
277 14 Dtool_BxOcVbav 0 7 251 872 0 14 Dtool_BxOcVbav 222 ////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : public
// Description : boundary get
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
278 14 Dtool_BxOc_QFL 0 7 254 873 0 14 Dtool_BxOc_QFL 239 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
279 14 Dtool_BxOcHOzb 0 7 254 873 0 14 Dtool_BxOcHOzb 231 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 6 6 center 1 815  4 edge 1 815  12 birth_radius 1 775  12 death_radius 1 775  10 life_scale 1 760  10 alpha_mode 1 738  
280 14 Dtool_BxOcOidn 0 7 254 873 0 14 Dtool_BxOcOidn 236 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 874  
281 14 Dtool_BxOcNoZ9 0 4 255 774 0 14 Dtool_BxOcNoZ9 696 // Filename: sparkleParticleRenderer.I
// Created by:  charles (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_center_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  1 c 1 815  
282 14 Dtool_BxOcf_5c 0 4 256 774 0 14 Dtool_BxOcf_5c 193 ////////////////////////////////////////////////////////////////////
//    Function : set_edge_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  1 c 1 815  
283 14 Dtool_BxOcgpfV 0 4 257 774 0 14 Dtool_BxOcgpfV 195 ////////////////////////////////////////////////////////////////////
//    Function : set_birth_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  6 radius 1 775  
284 14 Dtool_BxOcJkw4 0 4 258 774 0 14 Dtool_BxOcJkw4 195 ////////////////////////////////////////////////////////////////////
//    Function : set_death_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  6 radius 1 775  
285 14 Dtool_BxOc_A96 0 4 259 774 0 14 Dtool_BxOc_A96 193 ////////////////////////////////////////////////////////////////////
//    Function : set_life_scale
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  6 param0 0 760  
286 14 Dtool_BxOcGLA6 0 6 260 815 0 14 Dtool_BxOcGLA6 195 ////////////////////////////////////////////////////////////////////
//    Function : get_center_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
287 14 Dtool_BxOcSRs4 0 6 261 815 0 14 Dtool_BxOcSRs4 193 ////////////////////////////////////////////////////////////////////
//    Function : get_edge_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
288 14 Dtool_BxOcgIEj 0 6 262 775 0 14 Dtool_BxOcgIEj 195 ////////////////////////////////////////////////////////////////////
//    Function : get_birth_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
289 14 Dtool_BxOceMVG 0 6 263 775 0 14 Dtool_BxOceMVG 195 ////////////////////////////////////////////////////////////////////
//    Function : get_death_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
290 14 Dtool_BxOcgMLm 0 6 264 760 0 14 Dtool_BxOcgMLm 193 ////////////////////////////////////////////////////////////////////
//    Function : get_life_scale
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
291 14 Dtool_BxOcZ_XN 0 7 266 876 0 14 Dtool_BxOcZ_XN 0 0 
292 14 Dtool_BxOca66a 0 7 266 876 0 14 Dtool_BxOca66a 233 ////////////////////////////////////////////////////////////////////
//    Function : SphereSurfaceEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 877  
293 14 Dtool_BxOcD2aF 0 4 267 774 0 14 Dtool_BxOcD2aF 217 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  1 r 1 775  
294 14 Dtool_BxOcjRgH 0 6 268 775 0 14 Dtool_BxOcjRgH 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
295 14 Dtool_BxOcwu67 0 7 270 879 0 14 Dtool_BxOcwu67 0 0 
296 14 Dtool_BxOc4FjC 0 7 270 879 0 14 Dtool_BxOc4FjC 232 ////////////////////////////////////////////////////////////////////
//    Function : SphereVolumeEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 880  
297 14 Dtool_BxOckvji 0 4 271 774 0 14 Dtool_BxOckvji 217 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 879  1 r 1 775  
298 14 Dtool_BxOcCKpS 0 6 272 775 0 14 Dtool_BxOcCKpS 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 880  
299 14 Dtool_BxOcYa22 0 4 275 774 0 14 Dtool_BxOcYa22 0 2 4 this 3 882  3 tex 1 837  
300 14 Dtool_BxOcQDkb 0 4 275 774 0 14 Dtool_BxOcQDkb 0 3 4 this 3 882  5 model 1 837  4 node 1 837  
301 14 Dtool_BxOcSnfH 0 6 276 764 0 14 Dtool_BxOcSnfH 0 1 4 this 3 883  
302 14 Dtool_BxOczuxT 0 6 277 837 0 14 Dtool_BxOczuxT 0 1 4 this 3 883  
303 14 Dtool_BxOcL_Lg 0 6 278 837 0 14 Dtool_BxOcL_Lg 0 1 4 this 3 883  
304 14 Dtool_BxOcX3Xs 0 6 279 837 0 14 Dtool_BxOcX3Xs 0 1 4 this 3 883  
305 14 Dtool_BxOc2oIg 0 6 280 784 0 14 Dtool_BxOc2oIg 0 1 4 this 3 883  
306 14 Dtool_BxOcTL04 0 7 283 887 0 14 Dtool_BxOcTL04 259 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 885  
307 14 Dtool_BxOcd0Mb 0 7 283 887 0 14 Dtool_BxOcd0Mb 254 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 3 tex 1 888  
308 14 Dtool_BxOcCqZT 0 7 283 887 0 14 Dtool_BxOcCqZT 254 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
309 14 Dtool_BxOcLV8z 0 4 284 774 0 14 Dtool_BxOcLV8z 549 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
//////////////////////////////////////////////////////////////////// 5 4 this 3 887  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  
310 14 Dtool_BxOc47kj 0 4 284 774 0 14 Dtool_BxOc47kj 549 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  9 node_path 1 855  5 model 1 837  4 node 1 837  
311 14 Dtool_BxOcXPBQ 0 4 284 774 0 14 Dtool_BxOcXPBQ 1671 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
//////////////////////////////////////////////////////////////////// 3 4 this 3 887  9 node_path 1 855  16 size_from_texels 1 806  
312 14 Dtool_BxOc_bAP 0 4 284 774 0 14 Dtool_BxOc_bAP 1671 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  9 node_path 1 855  
313 14 Dtool_BxOci1NT 0 4 285 774 0 14 Dtool_BxOci1NT 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 6 4 this 3 887  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  6 resize 1 806  
314 14 Dtool_BxOcmXj6 0 4 285 774 0 14 Dtool_BxOcmXj6 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 5 4 this 3 887  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  
315 14 Dtool_BxOcfFKq 0 4 285 774 0 14 Dtool_BxOcfFKq 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  9 node_path 1 855  5 model 1 837  4 node 1 837  
316 14 Dtool_BxOc8PJY 0 4 285 774 0 14 Dtool_BxOc8PJY 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  9 node_path 1 855  16 size_from_texels 1 806  6 resize 1 806  
317 14 Dtool_BxOc4QoW 0 4 285 774 0 14 Dtool_BxOc4QoW 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 3 4 this 3 887  9 node_path 1 855  16 size_from_texels 1 806  
318 14 Dtool_BxOcaZnV 0 4 285 774 0 14 Dtool_BxOcaZnV 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  9 node_path 1 855  
319 14 Dtool_BxOctzOm 0 4 286 774 0 14 Dtool_BxOctzOm 1089 // Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 887  3 tex 1 888  15 texels_per_unit 1 775  
320 14 Dtool_BxOcsbbZ 0 4 286 774 0 14 Dtool_BxOcsbbZ 1089 // Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  3 tex 1 888  
321 14 Dtool_BxOcYIZu 0 4 287 774 0 14 Dtool_BxOcYIZu 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  3 tex 1 888  15 texels_per_unit 1 775  6 resize 1 806  
322 14 Dtool_BxOcEs3s 0 4 287 774 0 14 Dtool_BxOcEs3s 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 3 4 this 3 887  3 tex 1 888  15 texels_per_unit 1 775  
323 14 Dtool_BxOctaAg 0 4 287 774 0 14 Dtool_BxOctaAg 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  3 tex 1 888  
324 14 Dtool_BxOc9ji9 0 4 288 774 0 14 Dtool_BxOc9ji9 291 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::remove_animation
//      Access : Published
// Description : Removes an animation texture set from the renderer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  1 n 1 784  
325 14 Dtool_BxOcg2Qj 0 4 289 774 0 14 Dtool_BxOcg2Qj 477 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  5 ll_uv 1 869  
326 14 Dtool_BxOc3fm3 0 4 289 774 0 14 Dtool_BxOc3fm3 477 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  5 ll_uv 1 869  4 anim 1 784  5 frame 1 784  
327 14 Dtool_BxOcKsff 0 4 290 774 0 14 Dtool_BxOcKsff 478 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  5 ur_uv 1 869  
328 14 Dtool_BxOcHq3z 0 4 290 774 0 14 Dtool_BxOcHq3z 478 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 4 4 this 3 887  5 ur_uv 1 869  4 anim 1 784  5 frame 1 784  
329 14 Dtool_BxOcMuoG 0 4 291 774 0 14 Dtool_BxOcMuoG 275 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_size
//      Access : public
// Description : Sets the size of each particle in world units.
//////////////////////////////////////////////////////////////////// 3 4 this 3 887  5 width 1 775  6 height 1 775  
330 14 Dtool_BxOcQJ7q 0 4 292 774 0 14 Dtool_BxOcQJ7q 206 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_color
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  5 color 1 815  
331 14 Dtool_BxOc0uOC 0 4 293 774 0 14 Dtool_BxOc0uOC 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  15 animate_x_ratio 1 806  
332 14 Dtool_BxOcMpOe 0 4 294 774 0 14 Dtool_BxOcMpOe 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  15 animate_y_ratio 1 806  
333 14 Dtool_BxOcDpse 0 4 295 774 0 14 Dtool_BxOcDpse 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_anim_angle_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  13 animate_theta 1 806  
334 14 Dtool_BxOcFv64 0 4 296 774 0 14 Dtool_BxOcFv64 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  15 initial_x_scale 1 775  
335 14 Dtool_BxOc6PRG 0 4 297 774 0 14 Dtool_BxOc6PRG 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  13 final_x_scale 1 775  
336 14 Dtool_BxOcLvDH 0 4 298 774 0 14 Dtool_BxOcLvDH 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  15 initial_y_scale 1 775  
337 14 Dtool_BxOce3VG 0 4 299 774 0 14 Dtool_BxOce3VG 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  13 final_y_scale 1 775  
338 14 Dtool_BxOcRm_e 0 4 300 774 0 14 Dtool_BxOcRm_e 218 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_nonanimated_theta
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  5 theta 1 775  
339 14 Dtool_BxOcvlsQ 0 4 301 774 0 14 Dtool_BxOcvlsQ 219 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_blend_method
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  2 bm 1 739  
340 14 Dtool_BxOc4EbD 0 4 302 774 0 14 Dtool_BxOc4EbD 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_disable
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  2 ad 1 806  
341 14 Dtool_BxOcogMu 0 4 303 774 0 14 Dtool_BxOcogMu 222 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_enable
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  2 an 1 806  
342 14 Dtool_BxOcfktH 0 4 304 774 0 14 Dtool_BxOcfktH 220 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_rate
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  1 r 1 775  
343 14 Dtool_BxOctvzD 0 4 305 774 0 14 Dtool_BxOctvzD 289 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_index
//   Access : public
//  Purpose : Sets the frame to be used when animation is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 887  1 i 1 784  
344 14 Dtool_BxOccWud 0 7 306 888 0 14 Dtool_BxOccWud 208 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
345 14 Dtool_BxOchmHw 0 7 306 888 0 14 Dtool_BxOchmHw 208 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
//////////////////////////////////////////////////////////////////// 3 4 this 3 885  4 anim 1 784  5 frame 1 784  
346 14 Dtool_BxOcnaIS 0 6 307 784 0 14 Dtool_BxOcnaIS 0 1 4 this 3 885  
347 14 Dtool_BxOc7Ce7 0 7 308 882 653 14 Dtool_BxOc7Ce7 0 2 4 this 3 885  1 n 1 784  
348 14 Dtool_BxOc0HRb 0 7 309 882 653 14 Dtool_BxOc0HRb 0 1 4 this 3 885  
349 14 Dtool_BxOc8qOw 0 7 310 834 0 14 Dtool_BxOc8qOw 228 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color_interpolation_manager
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
350 14 Dtool_BxOcnEn7 0 7 311 872 0 14 Dtool_BxOcnEn7 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
351 14 Dtool_BxOcQndl 0 7 311 872 0 14 Dtool_BxOcQndl 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
//////////////////////////////////////////////////////////////////// 3 4 this 3 885  4 anim 1 784  5 frame 1 784  
352 14 Dtool_BxOccR23 0 7 312 872 0 14 Dtool_BxOccR23 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ur_uv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
353 14 Dtool_BxOc_Jsh 0 7 312 872 0 14 Dtool_BxOc_Jsh 316 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the upper-right corner;
//               see set_ur_uv().
//////////////////////////////////////////////////////////////////// 3 4 this 3 885  4 anim 1 784  5 frame 1 784  
354 14 Dtool_BxOc_2E2 0 6 313 775 0 14 Dtool_BxOc_2E2 280 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_width
//      Access : public
// Description : Returns the width of each particle in world units.
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
355 14 Dtool_BxOcvZvq 0 6 314 775 0 14 Dtool_BxOcvZvq 282 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_height
//      Access : public
// Description : Returns the height of each particle in world units.
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
356 14 Dtool_BxOcTSQe 0 7 315 813 0 14 Dtool_BxOcTSQe 206 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
357 14 Dtool_BxOcFsYl 0 6 316 806 0 14 Dtool_BxOcFsYl 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
358 14 Dtool_BxOcChYB 0 6 317 806 0 14 Dtool_BxOcChYB 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
359 14 Dtool_BxOcS3Kv 0 6 318 806 0 14 Dtool_BxOcS3Kv 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_anim_angle_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
360 14 Dtool_BxOc9dBl 0 6 319 775 0 14 Dtool_BxOc9dBl 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
361 14 Dtool_BxOcyH8a 0 6 320 775 0 14 Dtool_BxOcyH8a 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
362 14 Dtool_BxOc_dIz 0 6 321 775 0 14 Dtool_BxOc_dIz 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
363 14 Dtool_BxOcePBb 0 6 322 775 0 14 Dtool_BxOcePBb 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
364 14 Dtool_BxOcqpFo 0 6 323 775 0 14 Dtool_BxOcqpFo 218 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_nonanimated_theta
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
365 14 Dtool_BxOcpCjT 0 6 324 739 0 14 Dtool_BxOcpCjT 219 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_blend_method
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
366 14 Dtool_BxOcb0hv 0 6 325 806 0 14 Dtool_BxOcb0hv 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_disable
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
367 14 Dtool_BxOcQSZa 0 6 326 806 0 14 Dtool_BxOcQSZa 222 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_enable
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
368 14 Dtool_BxOcZ9OC 0 6 327 775 0 14 Dtool_BxOcZ9OC 220 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_rate
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
369 14 Dtool_BxOcy_fV 0 6 328 784 0 14 Dtool_BxOcy_fV 289 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_index
//   Access : public
//  Purpose : Gets the frame to be used when animation is disabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 885  
370 14 Dtool_BxOcH572 0 7 330 890 0 14 Dtool_BxOcH572 0 0 
371 14 Dtool_BxOcgJHT 0 7 330 890 0 14 Dtool_BxOcgJHT 234 ////////////////////////////////////////////////////////////////////
//     Function : tangentRingEmitter
//       Access : public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 891  
372 14 Dtool_BxOcT__C 0 4 331 774 0 14 Dtool_BxOcT__C 681 // Filename: tangentRingEmitter.I
// Created by:  charles (25Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_radius
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  1 r 1 775  
373 14 Dtool_BxOcoxqb 0 4 332 774 0 14 Dtool_BxOcoxqb 192 ////////////////////////////////////////////////////////////////////
//  Function : set_radius_spread
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  6 spread 1 775  
374 14 Dtool_BxOc72eo 0 6 333 775 0 14 Dtool_BxOc72eo 185 ////////////////////////////////////////////////////////////////////
//  Function : get_radius
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
375 14 Dtool_BxOcg_tm 0 6 334 775 0 14 Dtool_BxOcg_tm 192 ////////////////////////////////////////////////////////////////////
//  Function : get_radius_spread
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
376 14 Dtool_BxOcCYSj 0 7 336 893 0 14 Dtool_BxOcCYSj 228 ////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
377 14 Dtool_BxOc_nkG 0 7 336 893 0 14 Dtool_BxOc_nkG 233 ////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 894  
378 14 Dtool_BxOcJQKd 0 4 337 774 0 14 Dtool_BxOcJQKd 688 // Filename: zSpinParticleFactory.I
// Created by:  charles (16Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  5 angle 1 775  
379 14 Dtool_BxOc_A2T 0 4 338 774 0 14 Dtool_BxOc_A2T 188 ////////////////////////////////////////////////////////////////////
// Function : set_final_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  5 angle 1 775  
380 14 Dtool_BxOcZoPY 0 4 339 774 0 14 Dtool_BxOcZoPY 197 ////////////////////////////////////////////////////////////////////
// Function : set_initial_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  6 spread 1 775  
381 14 Dtool_BxOcAxxa 0 4 340 774 0 14 Dtool_BxOcAxxa 195 ////////////////////////////////////////////////////////////////////
// Function : set_final_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  6 spread 1 775  
382 14 Dtool_BxOcZ6E9 0 6 341 775 0 14 Dtool_BxOcZ6E9 190 ////////////////////////////////////////////////////////////////////
// Function : get_initial_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
383 14 Dtool_BxOcUZT9 0 6 342 775 0 14 Dtool_BxOcUZT9 188 ////////////////////////////////////////////////////////////////////
// Function : get_final_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
384 14 Dtool_BxOcjK1c 0 6 343 775 0 14 Dtool_BxOcjK1c 197 ////////////////////////////////////////////////////////////////////
// Function : get_initial_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
385 14 Dtool_BxOcuV0_ 0 6 344 775 0 14 Dtool_BxOcuV0_ 195 ////////////////////////////////////////////////////////////////////
// Function : get_final_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
386 14 Dtool_BxOcLOQE 0 4 345 774 0 14 Dtool_BxOcLOQE 0 2 4 this 3 893  1 v 1 775  
387 14 Dtool_BxOcS1Y8 0 6 346 775 0 14 Dtool_BxOcS1Y8 193 ////////////////////////////////////////////////////////////////////
// Function : get_angular_velocity
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
388 14 Dtool_BxOcsUGS 0 4 347 774 0 14 Dtool_BxOcsUGS 0 2 4 this 3 893  6 spread 1 775  
389 14 Dtool_BxOcLycB 0 6 348 775 0 14 Dtool_BxOcLycB 0 1 4 this 3 894  
390 14 Dtool_BxOcmOcc 0 4 349 774 0 14 Dtool_BxOcmOcc 0 2 4 this 3 893  8 bEnabled 1 806  
391 14 Dtool_BxOc2hT8 0 6 350 806 0 14 Dtool_BxOc2hT8 0 1 4 this 3 894  
392 14 Dtool_BxOcuOfO 0 7 352 896 721 14 Dtool_BxOcuOfO 237 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 1 15 every_nth_frame 1 784  
393 14 Dtool_BxOcKxoE 0 7 352 896 721 14 Dtool_BxOcKxoE 237 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
394 14 Dtool_BxOchIpF 0 4 354 774 0 14 Dtool_BxOchIpF 690 // Filename: particleSystemManager.I
// Created by:  charles (28Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_frame_stepping
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  15 every_nth_frame 1 784  
395 14 Dtool_BxOc3diP 0 6 355 784 0 14 Dtool_BxOc3diP 191 ////////////////////////////////////////////////////////////////////
// Function : get_frame_stepping
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
396 14 Dtool_BxOcmDR9 0 4 356 774 0 14 Dtool_BxOcmDR9 194 ////////////////////////////////////////////////////////////////////
// Function : attach_particlesystem
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  2 ps 1 854  
397 14 Dtool_BxOcstvE 0 4 357 774 0 14 Dtool_BxOcstvE 256 ////////////////////////////////////////////////////////////////////
//    Function : remove_particlesystem
//      Access : public
// Description : removes a ps from the maintenance list
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  2 ps 1 854  
398 14 Dtool_BxOcTEnv 0 4 358 774 0 14 Dtool_BxOcTEnv 178 ////////////////////////////////////////////////////////////////////
// Function : clear
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 896  
399 14 Dtool_BxOcnA7I 0 4 359 774 0 14 Dtool_BxOcnA7I 518 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and render for each ps in the list.
//               this is probably the one you want to use.  Rendering
//               is the expensive operation, and particles REALLY
//               should at least be updated every frame, so nth_frame
//               stepping applies only to rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  2 dt 1 775  
400 14 Dtool_BxOcUysq 0 4 359 774 0 14 Dtool_BxOcUysq 411 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
//////////////////////////////////////////////////////////////////// 4 4 this 3 896  2 dt 1 775  2 ps 1 854  9 do_render 1 806  
401 14 Dtool_BxOcz5OT 0 4 359 774 0 14 Dtool_BxOcz5OT 411 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
//////////////////////////////////////////////////////////////////// 3 4 this 3 896  2 dt 1 775  2 ps 1 854  
402 14 Dtool_BxOcWHBj 0 4 360 774 0 14 Dtool_BxOcWHBj 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 897  3 out 1 782  
403 14 Dtool_BxOcaVHd 0 4 361 774 0 14 Dtool_BxOcaVHd 287 ////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 897  3 out 1 782  6 indent 1 784  
404 14 Dtool_BxOc2VNz 0 4 361 774 0 14 Dtool_BxOc2VNz 287 ////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 897  3 out 1 782  
405 14 Dtool_BxOchS_E 0 4 362 774 0 14 Dtool_BxOchS_E 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 897  3 out 1 782  6 indent 1 784  
406 14 Dtool_BxOc85AY 0 4 362 774 0 14 Dtool_BxOc85AY 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 897  3 out 1 782  
169
731 19 BaseParticleEmitter 0 75777 19 BaseParticleEmitter 19 BaseParticleEmitter 0 0 0 0 0 0 16 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 0 0 1 0 732 0 0 0 1 733 289
////////////////////////////////////////////////////////////// //////
//       Class : BaseParticleEmitter
// Description : Describes a physical region in space in which
//               particles are randomly generated.
////////////////////////////////////////////////////////////////////

732 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

733 12 emissionType 0 794624 33 BaseParticleEmitter::emissionType 33 BaseParticleEmitter::emissionType 731 0 0 0 0 0 0 0 0 0 3 11 ET_EXPLICIT 32 BaseParticleEmitter::ET_EXPLICIT 0 10 ET_RADIATE 31 BaseParticleEmitter::ET_RADIATE 1 9 ET_CUSTOM 30 BaseParticleEmitter::ET_CUSTOM 2 0 0

734 11 RingEmitter 0 75777 11 RingEmitter 11 RingEmitter 0 0 0 1 423 0 0 8 424 425 426 427 428 429 430 431 0 0 1 0 731 0 0 0 0 0

735 10 ArcEmitter 0 75777 10 ArcEmitter 10 ArcEmitter 0 0 0 1 432 0 0 5 433 434 435 436 437 0 0 1 0 734 0 0 0 0 0

736 19 BaseParticleFactory 0 75777 19 BaseParticleFactory 19 BaseParticleFactory 0 0 0 0 0 0 16 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 0 0 1 0 732 0 0 0 0 238
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleFactory
// Description : Pure Virtual base class for creating particles
////////////////////////////////////////////////////////////////////

737 20 BaseParticleRenderer 0 75777 20 BaseParticleRenderer 20 BaseParticleRenderer 0 0 0 0 0 0 11 454 455 456 457 458 459 460 461 462 463 464 0 0 1 0 732 0 0 0 2 738 739 234
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleRenderer
// Description : Pure virtual particle renderer base class
////////////////////////////////////////////////////////////////////

738 25 ParticleRendererAlphaMode 0 794624 47 BaseParticleRenderer::ParticleRendererAlphaMode 47 BaseParticleRenderer::ParticleRendererAlphaMode 737 0 0 0 0 0 0 0 0 0 6 13 PR_ALPHA_NONE 35 BaseParticleRenderer::PR_ALPHA_NONE 0 12 PR_ALPHA_OUT 34 BaseParticleRenderer::PR_ALPHA_OUT 1 11 PR_ALPHA_IN 33 BaseParticleRenderer::PR_ALPHA_IN 2 15 PR_ALPHA_IN_OUT 37 BaseParticleRenderer::PR_ALPHA_IN_OUT 3 13 PR_ALPHA_USER 35 BaseParticleRenderer::PR_ALPHA_USER 4 22 PR_NOT_INITIALIZED_YET 44 BaseParticleRenderer::PR_NOT_INITIALIZED_YET 5 0 0

739 27 ParticleRendererBlendMethod 0 794624 49 BaseParticleRenderer::ParticleRendererBlendMethod 49 BaseParticleRenderer::ParticleRendererBlendMethod 737 0 0 0 0 0 0 0 0 0 3 11 PP_NO_BLEND 33 BaseParticleRenderer::PP_NO_BLEND 0 15 PP_BLEND_LINEAR 37 BaseParticleRenderer::PP_BLEND_LINEAR 1 14 PP_BLEND_CUBIC 36 BaseParticleRenderer::PP_BLEND_CUBIC 2 0 0

740 10 BoxEmitter 0 75777 10 BoxEmitter 10 BoxEmitter 0 0 0 1 465 0 0 4 466 467 468 469 0 0 1 0 731 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : BoxEmitter
// Description : Describes a voluminous box region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

741 34 ColorInterpolationFunctionConstant 0 141313 34 ColorInterpolationFunctionConstant 34 ColorInterpolationFunctionConstant 0 0 0 0 473 0 3 470 471 472 0 0 1 0 742 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionConstant
// Description : Defines a constant color over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

742 26 ColorInterpolationFunction 0 1050625 26 ColorInterpolationFunction 26 ColorInterpolationFunction 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunction
// Description : Abstract class from which all other functions 
//               should inherit. Defines the virtual interpolate()
//               function.
////////////////////////////////////////////////////////////////////

743 32 ColorInterpolationFunctionLinear 0 141313 32 ColorInterpolationFunctionLinear 32 ColorInterpolationFunctionLinear 0 0 0 0 477 0 3 474 475 476 0 0 1 0 741 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionLinear
// Description : Defines a linear interpolation over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

744 34 ColorInterpolationFunctionStepwave 0 141313 34 ColorInterpolationFunctionStepwave 34 ColorInterpolationFunctionStepwave 0 0 0 0 483 0 5 478 479 480 481 482 0 0 1 0 743 0 0 0 0 523
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionStepwave
// Description : Defines a discrete cyclical transition between two colors.
//               The widths describe a portion of the segment's lifetime
//               for which the corresponding color should be selected. If
//               their sum is less than 1, the function repeats until
//               the end of the segment.
////////////////////////////////////////////////////////////////////

745 34 ColorInterpolationFunctionSinusoid 0 141313 34 ColorInterpolationFunctionSinusoid 34 ColorInterpolationFunctionSinusoid 0 0 0 0 487 0 3 484 485 486 0 0 1 0 743 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionSinusoid
// Description : Defines a sinusoidal blending between two colors.
//               A period of "1" corresponds to a single transition 
//               from color_a to color_b and then back to color_a 
//               over the course of the segment's lifetime. A 
//               shorter period will result in a higher frequency
//               cycle.
////////////////////////////////////////////////////////////////////

746 25 ColorInterpolationSegment 0 75777 25 ColorInterpolationSegment 25 ColorInterpolationSegment 0 0 0 1 488 0 0 11 489 490 491 492 493 494 495 496 497 498 499 0 0 1 0 732 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationSegment
// Description : A single unit of interpolation. The begin and end
//               times are interpolated over the lifetime of the 
//               particle, thus have the range of [0,1]. Each segment
//               also has a function associated with it.
////////////////////////////////////////////////////////////////////

747 25 ColorInterpolationManager 0 75777 25 ColorInterpolationManager 25 ColorInterpolationManager 0 0 0 1 500 0 0 9 501 502 503 504 505 506 507 508 509 0 0 1 0 732 0 0 0 0 478
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationManager
// Description : High level class for color interpolation.  Segments
//               must be added to the manager in order to achieve
//               results using the "add_*****()" functions.  Access
//               to these segments is provided but not necessary
//               general use.
////////////////////////////////////////////////////////////////////

748 11 DiscEmitter 0 75777 11 DiscEmitter 11 DiscEmitter 0 0 0 1 510 0 0 12 511 512 513 514 515 516 517 518 519 520 521 522 0 0 1 0 731 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : DiscEmitter
// Description : Describes a planar disc region from which particles
//               are generated
////////////////////////////////////////////////////////////////////

749 20 GeomParticleRenderer 0 75777 20 GeomParticleRenderer 20 GeomParticleRenderer 0 0 0 1 523 0 0 21 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 0 0 1 0 737 0 0 0 0 0

750 11 LineEmitter 0 75777 11 LineEmitter 11 LineEmitter 0 0 0 1 545 0 0 4 546 547 548 549 0 0 1 0 731 0 0 0 0 260
////////////////////////////////////////////////////////////////////
//       Class : LineEmitter
// Description : Describes a linear region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

751 20 LineParticleRenderer 0 75777 20 LineParticleRenderer 20 LineParticleRenderer 0 0 0 1 550 0 0 6 551 552 553 554 555 556 0 0 1 0 737 0 0 0 0 294
////////////////////////////////////////////////////////////////////
//       Class : LineParticleRenderer
// Description : renders a line from last position to current
//               position -- good for rain, sparks, etc.
////////////////////////////////////////////////////////////////////

752 14 ParticleSystem 0 75777 14 ParticleSystem 14 ParticleSystem 0 0 0 1 557 0 0 52 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 0 0 1 0 753 0 0 0 0 226
////////////////////////////////////////////////////////////////////
//       Class : ParticleSystem
// Description : Contains and manages a particle system.
////////////////////////////////////////////////////////////////////

753 8 Physical 0 2049 8 Physical 8 Physical 0 0 0 0 0 0 0 2 900 901 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : Physical
// Description : Defines a set of physically modeled attributes.
//               If you want physics applied to your class, derive
//               it from this.
////////////////////////////////////////////////////////////////////

754 12 PointEmitter 0 75777 12 PointEmitter 12 PointEmitter 0 0 0 1 610 0 0 2 611 612 0 0 1 0 731 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : PointEmitter
// Description : Describes a planar ring region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

755 20 PointParticleFactory 0 75777 20 PointParticleFactory 20 PointParticleFactory 0 0 0 1 613 0 0 0 0 0 1 0 736 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : PointParticleFactory
// Description : Creates point particles to user specs
////////////////////////////////////////////////////////////////////

756 21 PointParticleRenderer 0 75777 21 PointParticleRenderer 21 PointParticleRenderer 0 0 0 1 614 0 0 10 615 616 617 618 619 620 621 622 623 624 0 0 1 0 737 0 0 0 1 757 334
////////////////////////////////////////////////////////////////////
//       Class : PointParticleRenderer
// Description : Simple point/point particle renderer.  Does NOT
//               handle billboards- use BillboardParticleRenderer
//               for that.
////////////////////////////////////////////////////////////////////

757 22 PointParticleBlendType 0 794624 45 PointParticleRenderer::PointParticleBlendType 45 PointParticleRenderer::PointParticleBlendType 756 0 0 0 0 0 0 0 0 0 3 12 PP_ONE_COLOR 35 PointParticleRenderer::PP_ONE_COLOR 0 13 PP_BLEND_LIFE 36 PointParticleRenderer::PP_BLEND_LIFE 1 12 PP_BLEND_VEL 35 PointParticleRenderer::PP_BLEND_VEL 2 0 0

758 16 RectangleEmitter 0 75777 16 RectangleEmitter 16 RectangleEmitter 0 0 0 1 625 0 0 4 626 627 628 629 0 0 1 0 731 0 0 0 0 272
////////////////////////////////////////////////////////////////////
//       Class : RectangleEmitter
// Description : Describes a planar square region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

759 23 SparkleParticleRenderer 0 75777 23 SparkleParticleRenderer 23 SparkleParticleRenderer 0 0 0 1 630 0 0 10 631 632 633 634 635 636 637 638 639 640 0 0 1 0 737 0 0 0 1 760 218
////////////////////////////////////////////////////////////////////
//       Class : SparkleParticleRenderer
// Description : pretty sparkly things.
////////////////////////////////////////////////////////////////////

760 24 SparkleParticleLifeScale 0 794624 49 SparkleParticleRenderer::SparkleParticleLifeScale 49 SparkleParticleRenderer::SparkleParticleLifeScale 759 0 0 0 0 0 0 0 0 0 2 11 SP_NO_SCALE 36 SparkleParticleRenderer::SP_NO_SCALE 0 8 SP_SCALE 33 SparkleParticleRenderer::SP_SCALE 1 0 0

761 20 SphereSurfaceEmitter 0 75777 20 SphereSurfaceEmitter 20 SphereSurfaceEmitter 0 0 0 1 641 0 0 2 642 643 0 0 1 0 731 0 0 0 0 268
////////////////////////////////////////////////////////////////////
//       Class : SphereSurfaceEmitter
// Description : Describes a curved space in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

762 19 SphereVolumeEmitter 0 75777 19 SphereVolumeEmitter 19 SphereVolumeEmitter 0 0 0 1 644 0 0 2 645 646 0 0 1 0 731 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : SphereVolumeEmitter
// Description : Describes a voluminous spherical region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

763 10 SpriteAnim 0 141313 10 SpriteAnim 10 SpriteAnim 0 0 0 0 653 0 6 647 648 649 650 651 652 0 0 1 0 732 0 0 0 1 764 335
////////////////////////////////////////////////////////////////////
//       Class : SpriteAnim
// Description : Helper class used by SpriteParticleRenderer to
//               keep track of its textures and their respective UVs
//               and source types.  
////////////////////////////////////////////////////////////////////

764 10 SourceType 0 794624 22 SpriteAnim::SourceType 22 SpriteAnim::SourceType 763 0 0 0 0 0 0 0 0 0 2 10 ST_texture 22 SpriteAnim::ST_texture 0 12 ST_from_node 24 SpriteAnim::ST_from_node 1 0 0

765 22 SpriteParticleRenderer 0 75777 22 SpriteParticleRenderer 22 SpriteParticleRenderer 0 0 0 1 654 0 0 45 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 1 902 0 1 0 737 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : SpriteParticleRenderer
// Description : Renders a particle system with high-speed nasty
//               trick sprites.
////////////////////////////////////////////////////////////////////

766 18 TangentRingEmitter 0 75777 18 TangentRingEmitter 18 TangentRingEmitter 0 0 0 1 700 0 0 4 701 702 703 704 0 0 1 0 731 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : TangentRingEmitter
// Description : Describes a planar ring region in which
//               tangent particles are generated, and particles
//               fly off tangential to the ring.
////////////////////////////////////////////////////////////////////

767 20 ZSpinParticleFactory 0 75777 20 ZSpinParticleFactory 20 ZSpinParticleFactory 0 0 0 1 705 0 0 14 706 707 708 709 710 711 712 713 714 715 716 717 718 719 0 0 1 0 736 0 0 0 0 192
////////////////////////////////////////////////////////////////////
//       Class : ZSpinParticleFactory
// Description :
////////////////////////////////////////////////////////////////////

768 21 ParticleSystemManager 0 26625 21 ParticleSystemManager 21 ParticleSystemManager 0 0 0 1 720 721 0 9 722 723 724 725 726 727 728 729 730 0 0 0 0 0 402
////////////////////////////////////////////////////////////////////
//       Class : ParticleSystemManager
// Description : Manages a set of individual ParticleSystem objects,
//               so that each individual one doesn't have to be
//               updated and rendered every frame
//    See Also : particleSystemManager.cxx
////////////////////////////////////////////////////////////////////

769 21 BaseParticleEmitter * 0 8576 21 BaseParticleEmitter * 21 BaseParticleEmitter * 0 0 731 0 0 0 0 0 0 0 0 0 0

770 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 771 0 0 0 0 0 0 0 0 0 0

771 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

772 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 773 0 0 0 0 0 0 0 0 0 0

773 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

774 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

775 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

776 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 777 0 0 0 0 0 0 0 0 0 0

777 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 773 0 0 0 0 0 0 0 0 0 0

778 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 779 0 0 0 0 0 0 0 0 0 0

779 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 771 0 0 0 0 0 0 0 0 0 0

780 27 BaseParticleEmitter const * 0 8576 27 BaseParticleEmitter const * 27 BaseParticleEmitter const * 0 0 781 0 0 0 0 0 0 0 0 0 0

781 25 BaseParticleEmitter const 0 8832 25 BaseParticleEmitter const 25 BaseParticleEmitter const 0 0 731 0 0 0 0 0 0 0 0 0 0

782 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 783 0 0 0 0 0 0 0 0 0 0

783 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

784 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

785 13 RingEmitter * 0 8576 13 RingEmitter * 13 RingEmitter * 0 0 734 0 0 0 0 0 0 0 0 0 0

786 19 RingEmitter const * 0 8576 19 RingEmitter const * 19 RingEmitter const * 0 0 787 0 0 0 0 0 0 0 0 0 0

787 17 RingEmitter const 0 8832 17 RingEmitter const 17 RingEmitter const 0 0 734 0 0 0 0 0 0 0 0 0 0

788 12 ArcEmitter * 0 8576 12 ArcEmitter * 12 ArcEmitter * 0 0 735 0 0 0 0 0 0 0 0 0 0

789 18 ArcEmitter const * 0 8576 18 ArcEmitter const * 18 ArcEmitter const * 0 0 790 0 0 0 0 0 0 0 0 0 0

790 16 ArcEmitter const 0 8832 16 ArcEmitter const 16 ArcEmitter const 0 0 735 0 0 0 0 0 0 0 0 0 0

791 21 BaseParticleFactory * 0 8576 21 BaseParticleFactory * 21 BaseParticleFactory * 0 0 736 0 0 0 0 0 0 0 0 0 0

792 27 BaseParticleFactory const * 0 8576 27 BaseParticleFactory const * 27 BaseParticleFactory const * 0 0 793 0 0 0 0 0 0 0 0 0 0

793 25 BaseParticleFactory const 0 8832 25 BaseParticleFactory const 25 BaseParticleFactory const 0 0 736 0 0 0 0 0 0 0 0 0 0

794 14 BaseParticle * 0 8576 14 BaseParticle * 14 BaseParticle * 0 0 795 0 0 0 0 0 0 0 0 0 0

795 12 BaseParticle 0 1050624 12 BaseParticle 12 BaseParticle 0 0 0 0 0 0 0 0 0 0 0 0 0

796 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 2 903 904 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

797 28 BaseParticleRenderer const * 0 8576 28 BaseParticleRenderer const * 28 BaseParticleRenderer const * 0 0 798 0 0 0 0 0 0 0 0 0 0

798 26 BaseParticleRenderer const 0 8832 26 BaseParticleRenderer const 26 BaseParticleRenderer const 0 0 737 0 0 0 0 0 0 0 0 0 0

799 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 796 0 0 0 0 0 0 0 0 0 0

800 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 905 906 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

801 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 800 0 0 0 0 0 0 0 0 0 0

802 22 BaseParticleRenderer * 0 8576 22 BaseParticleRenderer * 22 BaseParticleRenderer * 0 0 737 0 0 0 0 0 0 0 0 0 0

803 4 Mode 0 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 804 0 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 0 5 M_add 23 ColorBlendAttrib::M_add 1 10 M_subtract 28 ColorBlendAttrib::M_subtract 2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 3 5 M_min 23 ColorBlendAttrib::M_min 4 5 M_max 23 ColorBlendAttrib::M_max 5 0 0

804 16 ColorBlendAttrib 0 2048 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 0 0 0 0 0 0 0 0 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

805 7 Operand 0 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 804 0 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0 5 O_one 23 ColorBlendAttrib::O_one 1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 18 0 0

806 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

807 12 BoxEmitter * 0 8576 12 BoxEmitter * 12 BoxEmitter * 0 0 740 0 0 0 0 0 0 0 0 0 0

808 18 BoxEmitter const * 0 8576 18 BoxEmitter const * 18 BoxEmitter const * 0 0 809 0 0 0 0 0 0 0 0 0 0

809 16 BoxEmitter const 0 8832 16 BoxEmitter const 16 BoxEmitter const 0 0 740 0 0 0 0 0 0 0 0 0 0

810 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

811 42 ColorInterpolationFunctionConstant const * 0 8576 42 ColorInterpolationFunctionConstant const * 42 ColorInterpolationFunctionConstant const * 0 0 812 0 0 0 0 0 0 0 0 0 0

812 40 ColorInterpolationFunctionConstant const 0 8832 40 ColorInterpolationFunctionConstant const 40 ColorInterpolationFunctionConstant const 0 0 741 0 0 0 0 0 0 0 0 0 0

813 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 810 0 0 0 0 0 0 0 0 0 0

814 36 ColorInterpolationFunctionConstant * 0 8576 36 ColorInterpolationFunctionConstant * 36 ColorInterpolationFunctionConstant * 0 0 741 0 0 0 0 0 0 0 0 0 0

815 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 816 0 0 0 0 0 0 0 0 0 0

816 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 810 0 0 0 0 0 0 0 0 0 0

817 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

818 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 817 0 0 0 0 0 0 0 0 0 0

819 40 ColorInterpolationFunctionLinear const * 0 8576 40 ColorInterpolationFunctionLinear const * 40 ColorInterpolationFunctionLinear const * 0 0 820 0 0 0 0 0 0 0 0 0 0

820 38 ColorInterpolationFunctionLinear const 0 8832 38 ColorInterpolationFunctionLinear const 38 ColorInterpolationFunctionLinear const 0 0 743 0 0 0 0 0 0 0 0 0 0

821 34 ColorInterpolationFunctionLinear * 0 8576 34 ColorInterpolationFunctionLinear * 34 ColorInterpolationFunctionLinear * 0 0 743 0 0 0 0 0 0 0 0 0 0

822 42 ColorInterpolationFunctionStepwave const * 0 8576 42 ColorInterpolationFunctionStepwave const * 42 ColorInterpolationFunctionStepwave const * 0 0 823 0 0 0 0 0 0 0 0 0 0

823 40 ColorInterpolationFunctionStepwave const 0 8832 40 ColorInterpolationFunctionStepwave const 40 ColorInterpolationFunctionStepwave const 0 0 744 0 0 0 0 0 0 0 0 0 0

824 36 ColorInterpolationFunctionStepwave * 0 8576 36 ColorInterpolationFunctionStepwave * 36 ColorInterpolationFunctionStepwave * 0 0 744 0 0 0 0 0 0 0 0 0 0

825 42 ColorInterpolationFunctionSinusoid const * 0 8576 42 ColorInterpolationFunctionSinusoid const * 42 ColorInterpolationFunctionSinusoid const * 0 0 826 0 0 0 0 0 0 0 0 0 0

826 40 ColorInterpolationFunctionSinusoid const 0 8832 40 ColorInterpolationFunctionSinusoid const 40 ColorInterpolationFunctionSinusoid const 0 0 745 0 0 0 0 0 0 0 0 0 0

827 36 ColorInterpolationFunctionSinusoid * 0 8576 36 ColorInterpolationFunctionSinusoid * 36 ColorInterpolationFunctionSinusoid * 0 0 745 0 0 0 0 0 0 0 0 0 0

828 28 ColorInterpolationFunction * 0 8576 28 ColorInterpolationFunction * 28 ColorInterpolationFunction * 0 0 742 0 0 0 0 0 0 0 0 0 0

829 27 ColorInterpolationSegment * 0 8576 27 ColorInterpolationSegment * 27 ColorInterpolationSegment * 0 0 746 0 0 0 0 0 0 0 0 0 0

830 33 ColorInterpolationSegment const * 0 8576 33 ColorInterpolationSegment const * 33 ColorInterpolationSegment const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 31 ColorInterpolationSegment const 0 8832 31 ColorInterpolationSegment const 31 ColorInterpolationSegment const 0 0 746 0 0 0 0 0 0 0 0 0 0

832 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

833 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 832 0 0 0 0 0 0 0 0 0 0

834 27 ColorInterpolationManager * 0 8576 27 ColorInterpolationManager * 27 ColorInterpolationManager * 0 0 747 0 0 0 0 0 0 0 0 0 0

835 33 ColorInterpolationManager const * 0 8576 33 ColorInterpolationManager const * 33 ColorInterpolationManager const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 31 ColorInterpolationManager const 0 8832 31 ColorInterpolationManager const 31 ColorInterpolationManager const 0 0 747 0 0 0 0 0 0 0 0 0 0

837 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

838 13 DiscEmitter * 0 8576 13 DiscEmitter * 13 DiscEmitter * 0 0 748 0 0 0 0 0 0 0 0 0 0

839 19 DiscEmitter const * 0 8576 19 DiscEmitter const * 19 DiscEmitter const * 0 0 840 0 0 0 0 0 0 0 0 0 0

840 17 DiscEmitter const 0 8832 17 DiscEmitter const 17 DiscEmitter const 0 0 748 0 0 0 0 0 0 0 0 0 0

841 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

843 22 GeomParticleRenderer * 0 8576 22 GeomParticleRenderer * 22 GeomParticleRenderer * 0 0 749 0 0 0 0 0 0 0 0 0 0

844 28 GeomParticleRenderer const * 0 8576 28 GeomParticleRenderer const * 28 GeomParticleRenderer const * 0 0 845 0 0 0 0 0 0 0 0 0 0

845 26 GeomParticleRenderer const 0 8832 26 GeomParticleRenderer const 26 GeomParticleRenderer const 0 0 749 0 0 0 0 0 0 0 0 0 0

846 13 LineEmitter * 0 8576 13 LineEmitter * 13 LineEmitter * 0 0 750 0 0 0 0 0 0 0 0 0 0

847 19 LineEmitter const * 0 8576 19 LineEmitter const * 19 LineEmitter const * 0 0 848 0 0 0 0 0 0 0 0 0 0

848 17 LineEmitter const 0 8832 17 LineEmitter const 17 LineEmitter const 0 0 750 0 0 0 0 0 0 0 0 0 0

849 22 LineParticleRenderer * 0 8576 22 LineParticleRenderer * 22 LineParticleRenderer * 0 0 751 0 0 0 0 0 0 0 0 0 0

850 28 LineParticleRenderer const * 0 8576 28 LineParticleRenderer const * 28 LineParticleRenderer const * 0 0 851 0 0 0 0 0 0 0 0 0 0

851 26 LineParticleRenderer const 0 8832 26 LineParticleRenderer const 26 LineParticleRenderer const 0 0 751 0 0 0 0 0 0 0 0 0 0

852 22 ParticleSystem const * 0 8576 22 ParticleSystem const * 22 ParticleSystem const * 0 0 853 0 0 0 0 0 0 0 0 0 0

853 20 ParticleSystem const 0 8832 20 ParticleSystem const 20 ParticleSystem const 0 0 752 0 0 0 0 0 0 0 0 0 0

854 16 ParticleSystem * 0 8576 16 ParticleSystem * 16 ParticleSystem * 0 0 752 0 0 0 0 0 0 0 0 0 0

855 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 856 0 0 0 0 0 0 0 0 0 0

856 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 800 0 0 0 0 0 0 0 0 0 0

857 14 PointEmitter * 0 8576 14 PointEmitter * 14 PointEmitter * 0 0 754 0 0 0 0 0 0 0 0 0 0

858 20 PointEmitter const * 0 8576 20 PointEmitter const * 20 PointEmitter const * 0 0 859 0 0 0 0 0 0 0 0 0 0

859 18 PointEmitter const 0 8832 18 PointEmitter const 18 PointEmitter const 0 0 754 0 0 0 0 0 0 0 0 0 0

860 22 PointParticleFactory * 0 8576 22 PointParticleFactory * 22 PointParticleFactory * 0 0 755 0 0 0 0 0 0 0 0 0 0

861 28 PointParticleFactory const * 0 8576 28 PointParticleFactory const * 28 PointParticleFactory const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 26 PointParticleFactory const 0 8832 26 PointParticleFactory const 26 PointParticleFactory const 0 0 755 0 0 0 0 0 0 0 0 0 0

863 23 PointParticleRenderer * 0 8576 23 PointParticleRenderer * 23 PointParticleRenderer * 0 0 756 0 0 0 0 0 0 0 0 0 0

864 29 PointParticleRenderer const * 0 8576 29 PointParticleRenderer const * 29 PointParticleRenderer const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 27 PointParticleRenderer const 0 8832 27 PointParticleRenderer const 27 PointParticleRenderer const 0 0 756 0 0 0 0 0 0 0 0 0 0

866 18 RectangleEmitter * 0 8576 18 RectangleEmitter * 18 RectangleEmitter * 0 0 758 0 0 0 0 0 0 0 0 0 0

867 24 RectangleEmitter const * 0 8576 24 RectangleEmitter const * 24 RectangleEmitter const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 22 RectangleEmitter const 0 8832 22 RectangleEmitter const 22 RectangleEmitter const 0 0 758 0 0 0 0 0 0 0 0 0 0

869 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 871 0 0 0 0 0 0 0 0 0 0

871 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

872 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 871 0 0 0 0 0 0 0 0 0 0

873 25 SparkleParticleRenderer * 0 8576 25 SparkleParticleRenderer * 25 SparkleParticleRenderer * 0 0 759 0 0 0 0 0 0 0 0 0 0

874 31 SparkleParticleRenderer const * 0 8576 31 SparkleParticleRenderer const * 31 SparkleParticleRenderer const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 29 SparkleParticleRenderer const 0 8832 29 SparkleParticleRenderer const 29 SparkleParticleRenderer const 0 0 759 0 0 0 0 0 0 0 0 0 0

876 22 SphereSurfaceEmitter * 0 8576 22 SphereSurfaceEmitter * 22 SphereSurfaceEmitter * 0 0 761 0 0 0 0 0 0 0 0 0 0

877 28 SphereSurfaceEmitter const * 0 8576 28 SphereSurfaceEmitter const * 28 SphereSurfaceEmitter const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 26 SphereSurfaceEmitter const 0 8832 26 SphereSurfaceEmitter const 26 SphereSurfaceEmitter const 0 0 761 0 0 0 0 0 0 0 0 0 0

879 21 SphereVolumeEmitter * 0 8576 21 SphereVolumeEmitter * 21 SphereVolumeEmitter * 0 0 762 0 0 0 0 0 0 0 0 0 0

880 27 SphereVolumeEmitter const * 0 8576 27 SphereVolumeEmitter const * 27 SphereVolumeEmitter const * 0 0 881 0 0 0 0 0 0 0 0 0 0

881 25 SphereVolumeEmitter const 0 8832 25 SphereVolumeEmitter const 25 SphereVolumeEmitter const 0 0 762 0 0 0 0 0 0 0 0 0 0

882 12 SpriteAnim * 0 8576 12 SpriteAnim * 12 SpriteAnim * 0 0 763 0 0 0 0 0 0 0 0 0 0

883 18 SpriteAnim const * 0 8576 18 SpriteAnim const * 18 SpriteAnim const * 0 0 884 0 0 0 0 0 0 0 0 0 0

884 16 SpriteAnim const 0 8832 16 SpriteAnim const 16 SpriteAnim const 0 0 763 0 0 0 0 0 0 0 0 0 0

885 30 SpriteParticleRenderer const * 0 8576 30 SpriteParticleRenderer const * 30 SpriteParticleRenderer const * 0 0 886 0 0 0 0 0 0 0 0 0 0

886 28 SpriteParticleRenderer const 0 8832 28 SpriteParticleRenderer const 28 SpriteParticleRenderer const 0 0 765 0 0 0 0 0 0 0 0 0 0

887 24 SpriteParticleRenderer * 0 8576 24 SpriteParticleRenderer * 24 SpriteParticleRenderer * 0 0 765 0 0 0 0 0 0 0 0 0 0

888 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 889 0 0 0 0 0 0 0 0 0 0

889 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

890 20 TangentRingEmitter * 0 8576 20 TangentRingEmitter * 20 TangentRingEmitter * 0 0 766 0 0 0 0 0 0 0 0 0 0

891 26 TangentRingEmitter const * 0 8576 26 TangentRingEmitter const * 26 TangentRingEmitter const * 0 0 892 0 0 0 0 0 0 0 0 0 0

892 24 TangentRingEmitter const 0 8832 24 TangentRingEmitter const 24 TangentRingEmitter const 0 0 766 0 0 0 0 0 0 0 0 0 0

893 22 ZSpinParticleFactory * 0 8576 22 ZSpinParticleFactory * 22 ZSpinParticleFactory * 0 0 767 0 0 0 0 0 0 0 0 0 0

894 28 ZSpinParticleFactory const * 0 8576 28 ZSpinParticleFactory const * 28 ZSpinParticleFactory const * 0 0 895 0 0 0 0 0 0 0 0 0 0

895 26 ZSpinParticleFactory const 0 8832 26 ZSpinParticleFactory const 26 ZSpinParticleFactory const 0 0 767 0 0 0 0 0 0 0 0 0 0

896 23 ParticleSystemManager * 0 8576 23 ParticleSystemManager * 23 ParticleSystemManager * 0 0 768 0 0 0 0 0 0 0 0 0 0

897 29 ParticleSystemManager const * 0 8576 29 ParticleSystemManager const * 29 ParticleSystemManager const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 27 ParticleSystemManager const 0 8832 27 ParticleSystemManager const 27 ParticleSystemManager const 0 0 768 0 0 0 0 0 0 0 0 0 0

899 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
7
900 0 0 173 17 get_linear_forces 21 get_num_linear_forces 16 get_linear_force 
901 0 0 173 18 get_angular_forces 22 get_num_angular_forces 17 get_angular_force 
902 0 0 282 9 get_anims 13 get_num_anims 8 get_anim 
903 0 0 441 9 get_geoms 13 get_num_geoms 8 get_geom 
904 0 0 441 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
905 0 0 446 9 get_nodes 13 get_num_nodes 8 get_node 
906 0 0 446 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
