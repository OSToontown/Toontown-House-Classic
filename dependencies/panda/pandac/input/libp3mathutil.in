1365929940
2 2
13 libp3mathutil 4 LL_p 5 panda 
503
611 5 clear 0 4 1116 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 10 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

612 6 output 0 4 1116 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 11 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

613 19 ~PointerToArrayBase 0 4 1115 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

614 19 ConstPointerToArray 0 4 1114 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 2 1 2 0
214
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);

615 4 size 0 4 1114 38 ConstPointerToArray< LMatrix3d >::size 0 1 3 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3d >::size(void) const;

616 11 get_element 0 4 1114 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 4 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::get_element(unsigned int n) const;

617 11 __getitem__ 0 4 1114 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 5 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

618 8 get_data 0 4 1114 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 6 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_data(void) const;

619 11 get_subdata 0 4 1114 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 7 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

620 13 get_ref_count 0 4 1114 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 8 0
73
inline int ::ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

621 18 get_node_ref_count 0 4 1114 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 9 0
78
inline int ::ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

622 20 ~ConstPointerToArray 0 4 1114 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

623 5 clear 0 4 1120 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 21 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

624 6 output 0 4 1120 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 22 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

625 19 ~PointerToArrayBase 0 4 1119 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

626 19 ConstPointerToArray 0 4 1118 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 12 13 0
214
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

627 4 size 0 4 1118 38 ConstPointerToArray< LMatrix3f >::size 0 1 14 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3f >::size(void) const;

628 11 get_element 0 4 1118 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 15 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::get_element(unsigned int n) const;

629 11 __getitem__ 0 4 1118 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 16 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

630 8 get_data 0 4 1118 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 17 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_data(void) const;

631 11 get_subdata 0 4 1118 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 18 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

632 13 get_ref_count 0 4 1118 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 19 0
73
inline int ::ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

633 18 get_node_ref_count 0 4 1118 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 20 0
78
inline int ::ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

634 20 ~ConstPointerToArray 0 4 1118 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

635 5 clear 0 4 1123 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 32 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

636 6 output 0 4 1123 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 33 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

637 19 ~PointerToArrayBase 0 4 1122 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

638 19 ConstPointerToArray 0 4 1121 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 2 23 24 0
218
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);

639 4 size 0 4 1121 39 ConstPointerToArray< LVecBase2d >::size 0 1 25 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2d >::size(void) const;

640 11 get_element 0 4 1121 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 26 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::get_element(unsigned int n) const;

641 11 __getitem__ 0 4 1121 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 27 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

642 8 get_data 0 4 1121 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 28 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_data(void) const;

643 11 get_subdata 0 4 1121 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 29 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

644 13 get_ref_count 0 4 1121 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 30 0
74
inline int ::ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

645 18 get_node_ref_count 0 4 1121 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 31 0
79
inline int ::ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

646 20 ~ConstPointerToArray 0 4 1121 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

647 5 clear 0 4 1126 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 43 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

648 6 output 0 4 1126 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 44 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

649 19 ~PointerToArrayBase 0 4 1125 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

650 19 ConstPointerToArray 0 4 1124 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 34 35 0
218
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

651 4 size 0 4 1124 39 ConstPointerToArray< LVecBase2f >::size 0 1 36 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2f >::size(void) const;

652 11 get_element 0 4 1124 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 37 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::get_element(unsigned int n) const;

653 11 __getitem__ 0 4 1124 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 38 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

654 8 get_data 0 4 1124 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 39 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_data(void) const;

655 11 get_subdata 0 4 1124 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 40 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

656 13 get_ref_count 0 4 1124 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 41 0
74
inline int ::ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

657 18 get_node_ref_count 0 4 1124 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 42 0
79
inline int ::ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

658 20 ~ConstPointerToArray 0 4 1124 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

659 5 clear 0 4 1129 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 54 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

660 6 output 0 4 1129 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 55 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

661 19 ~PointerToArrayBase 0 4 1128 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

662 19 ConstPointerToArray 0 4 1127 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 2 45 46 0
218
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);

663 4 size 0 4 1127 39 ConstPointerToArray< LVecBase3d >::size 0 1 47 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3d >::size(void) const;

664 11 get_element 0 4 1127 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 48 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::get_element(unsigned int n) const;

665 11 __getitem__ 0 4 1127 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 49 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

666 8 get_data 0 4 1127 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 50 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_data(void) const;

667 11 get_subdata 0 4 1127 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 51 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

668 13 get_ref_count 0 4 1127 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 52 0
74
inline int ::ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

669 18 get_node_ref_count 0 4 1127 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 53 0
79
inline int ::ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

670 20 ~ConstPointerToArray 0 4 1127 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

671 5 clear 0 4 1132 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 65 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

672 6 output 0 4 1132 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 66 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

673 19 ~PointerToArrayBase 0 4 1131 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

674 19 ConstPointerToArray 0 4 1130 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 56 57 0
218
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

675 4 size 0 4 1130 39 ConstPointerToArray< LVecBase3f >::size 0 1 58 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3f >::size(void) const;

676 11 get_element 0 4 1130 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 59 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::get_element(unsigned int n) const;

677 11 __getitem__ 0 4 1130 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 60 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

678 8 get_data 0 4 1130 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 61 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_data(void) const;

679 11 get_subdata 0 4 1130 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 62 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

680 13 get_ref_count 0 4 1130 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 63 0
74
inline int ::ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

681 18 get_node_ref_count 0 4 1130 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 64 0
79
inline int ::ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

682 20 ~ConstPointerToArray 0 4 1130 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

683 5 clear 0 4 1135 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 76 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

684 6 output 0 4 1135 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 77 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

685 19 ~PointerToArrayBase 0 4 1134 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

686 19 ConstPointerToArray 0 4 1133 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 2 67 68 0
250
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);

687 4 size 0 4 1133 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 69 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

688 11 get_element 0 4 1133 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 70 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

689 11 __getitem__ 0 4 1133 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 71 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

690 8 get_data 0 4 1133 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 72 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

691 11 get_subdata 0 4 1133 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 73 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

692 13 get_ref_count 0 4 1133 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 74 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

693 18 get_node_ref_count 0 4 1133 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 75 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

694 20 ~ConstPointerToArray 0 4 1133 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

695 5 clear 0 4 1138 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 87 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

696 6 output 0 4 1138 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 88 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

697 19 ~PointerToArrayBase 0 4 1137 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

698 19 ConstPointerToArray 0 4 1136 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 2 78 79 0
250
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);

699 4 size 0 4 1136 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 80 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

700 11 get_element 0 4 1136 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 81 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

701 11 __getitem__ 0 4 1136 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 82 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

702 8 get_data 0 4 1136 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 83 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

703 11 get_subdata 0 4 1136 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 84 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

704 13 get_ref_count 0 4 1136 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 85 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

705 18 get_node_ref_count 0 4 1136 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 86 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

706 20 ~ConstPointerToArray 0 4 1136 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

707 5 clear 0 4 1141 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 98 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

708 6 output 0 4 1141 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 99 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

709 19 ~PointerToArrayBase 0 4 1140 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

710 19 ConstPointerToArray 0 4 1139 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 2 89 90 0
254
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);

711 4 size 0 4 1139 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 91 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

712 11 get_element 0 4 1139 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 92 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

713 11 __getitem__ 0 4 1139 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 93 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

714 8 get_data 0 4 1139 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 94 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

715 11 get_subdata 0 4 1139 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 95 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

716 13 get_ref_count 0 4 1139 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 96 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

717 18 get_node_ref_count 0 4 1139 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 97 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

718 20 ~ConstPointerToArray 0 4 1139 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

719 5 clear 0 4 1144 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 109 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

720 6 output 0 4 1144 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 110 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

721 19 ~PointerToArrayBase 0 4 1143 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

722 19 ConstPointerToArray 0 4 1142 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 2 100 101 0
254
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);

723 4 size 0 4 1142 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 102 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

724 11 get_element 0 4 1142 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 103 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

725 11 __getitem__ 0 4 1142 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 104 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

726 8 get_data 0 4 1142 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 105 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

727 11 get_subdata 0 4 1142 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 106 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

728 13 get_ref_count 0 4 1142 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 107 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

729 18 get_node_ref_count 0 4 1142 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 108 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

730 20 ~ConstPointerToArray 0 4 1142 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

731 14 PointerToArray 0 4 1145 43 PointerToArray< LMatrix3d >::PointerToArray 0 4 111 112 113 114 0
302
inline ::PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));
inline ::PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
::PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *sequence);

732 11 empty_array 0 4 1145 40 PointerToArray< LMatrix3d >::empty_array 0 2 115 116 0
172
static inline PointerToArray< LMatrix3d > ::PointerToArray< LMatrix3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));

733 4 size 0 4 1145 33 PointerToArray< LMatrix3d >::size 0 1 117 0
68
inline unsigned int ::PointerToArray< LMatrix3d >::size(void) const;

734 9 push_back 0 4 1145 38 PointerToArray< LMatrix3d >::push_back 0 1 118 0
73
inline void ::PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

735 8 pop_back 0 4 1145 37 PointerToArray< LMatrix3d >::pop_back 0 1 119 0
58
inline void ::PointerToArray< LMatrix3d >::pop_back(void);

736 11 get_element 0 4 1145 40 PointerToArray< LMatrix3d >::get_element 0 1 120 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::get_element(unsigned int n) const;

737 11 set_element 0 4 1145 40 PointerToArray< LMatrix3d >::set_element 0 1 121 0
95
inline void ::PointerToArray< LMatrix3d >::set_element(unsigned int n, LMatrix3d const &value);

738 11 __getitem__ 0 4 1145 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 122 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

739 11 __setitem__ 0 4 1145 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 123 0
95
inline void ::PointerToArray< LMatrix3d >::__setitem__(unsigned int n, LMatrix3d const &value);

740 8 get_data 0 4 1145 37 PointerToArray< LMatrix3d >::get_data 0 1 124 0
80
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_data(void) const;

741 8 set_data 0 4 1145 37 PointerToArray< LMatrix3d >::set_data 0 1 125 0
86
inline void ::PointerToArray< LMatrix3d >::set_data(basic_string< char > const &data);

742 11 get_subdata 0 4 1145 40 PointerToArray< LMatrix3d >::get_subdata 0 1 126 0
113
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

743 11 set_subdata 0 4 1145 40 PointerToArray< LMatrix3d >::set_subdata 0 1 127 0
125
inline void ::PointerToArray< LMatrix3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

744 13 get_ref_count 0 4 1145 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 128 0
68
inline int ::PointerToArray< LMatrix3d >::get_ref_count(void) const;

745 18 get_node_ref_count 0 4 1145 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 129 0
73
inline int ::PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

746 15 ~PointerToArray 0 4 1145 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3d >::~PointerToArray(void);

747 14 PointerToArray 0 4 1146 43 PointerToArray< LMatrix3f >::PointerToArray 0 4 130 131 132 133 0
302
inline ::PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));
inline ::PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
::PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *sequence);

748 11 empty_array 0 4 1146 40 PointerToArray< LMatrix3f >::empty_array 0 2 134 135 0
172
static inline PointerToArray< LMatrix3f > ::PointerToArray< LMatrix3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));

749 4 size 0 4 1146 33 PointerToArray< LMatrix3f >::size 0 1 136 0
68
inline unsigned int ::PointerToArray< LMatrix3f >::size(void) const;

750 9 push_back 0 4 1146 38 PointerToArray< LMatrix3f >::push_back 0 1 137 0
73
inline void ::PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

751 8 pop_back 0 4 1146 37 PointerToArray< LMatrix3f >::pop_back 0 1 138 0
58
inline void ::PointerToArray< LMatrix3f >::pop_back(void);

752 11 get_element 0 4 1146 40 PointerToArray< LMatrix3f >::get_element 0 1 139 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::get_element(unsigned int n) const;

753 11 set_element 0 4 1146 40 PointerToArray< LMatrix3f >::set_element 0 1 140 0
95
inline void ::PointerToArray< LMatrix3f >::set_element(unsigned int n, LMatrix3f const &value);

754 11 __getitem__ 0 4 1146 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 141 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

755 11 __setitem__ 0 4 1146 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 142 0
95
inline void ::PointerToArray< LMatrix3f >::__setitem__(unsigned int n, LMatrix3f const &value);

756 8 get_data 0 4 1146 37 PointerToArray< LMatrix3f >::get_data 0 1 143 0
80
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_data(void) const;

757 8 set_data 0 4 1146 37 PointerToArray< LMatrix3f >::set_data 0 1 144 0
86
inline void ::PointerToArray< LMatrix3f >::set_data(basic_string< char > const &data);

758 11 get_subdata 0 4 1146 40 PointerToArray< LMatrix3f >::get_subdata 0 1 145 0
113
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

759 11 set_subdata 0 4 1146 40 PointerToArray< LMatrix3f >::set_subdata 0 1 146 0
125
inline void ::PointerToArray< LMatrix3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

760 13 get_ref_count 0 4 1146 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 147 0
68
inline int ::PointerToArray< LMatrix3f >::get_ref_count(void) const;

761 18 get_node_ref_count 0 4 1146 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 148 0
73
inline int ::PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

762 15 ~PointerToArray 0 4 1146 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3f >::~PointerToArray(void);

763 14 PointerToArray 0 4 1147 44 PointerToArray< LVecBase2d >::PointerToArray 0 4 149 150 151 152 0
307
inline ::PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));
inline ::PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
::PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *sequence);

764 11 empty_array 0 4 1147 41 PointerToArray< LVecBase2d >::empty_array 0 2 153 154 0
175
static inline PointerToArray< LVecBase2d > ::PointerToArray< LVecBase2d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));

765 4 size 0 4 1147 34 PointerToArray< LVecBase2d >::size 0 1 155 0
69
inline unsigned int ::PointerToArray< LVecBase2d >::size(void) const;

766 9 push_back 0 4 1147 39 PointerToArray< LVecBase2d >::push_back 0 1 156 0
75
inline void ::PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

767 8 pop_back 0 4 1147 38 PointerToArray< LVecBase2d >::pop_back 0 1 157 0
59
inline void ::PointerToArray< LVecBase2d >::pop_back(void);

768 11 get_element 0 4 1147 41 PointerToArray< LVecBase2d >::get_element 0 1 158 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::get_element(unsigned int n) const;

769 11 set_element 0 4 1147 41 PointerToArray< LVecBase2d >::set_element 0 1 159 0
97
inline void ::PointerToArray< LVecBase2d >::set_element(unsigned int n, LVecBase2d const &value);

770 11 __getitem__ 0 4 1147 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 160 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

771 11 __setitem__ 0 4 1147 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 161 0
97
inline void ::PointerToArray< LVecBase2d >::__setitem__(unsigned int n, LVecBase2d const &value);

772 8 get_data 0 4 1147 38 PointerToArray< LVecBase2d >::get_data 0 1 162 0
81
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_data(void) const;

773 8 set_data 0 4 1147 38 PointerToArray< LVecBase2d >::set_data 0 1 163 0
87
inline void ::PointerToArray< LVecBase2d >::set_data(basic_string< char > const &data);

774 11 get_subdata 0 4 1147 41 PointerToArray< LVecBase2d >::get_subdata 0 1 164 0
114
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

775 11 set_subdata 0 4 1147 41 PointerToArray< LVecBase2d >::set_subdata 0 1 165 0
126
inline void ::PointerToArray< LVecBase2d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

776 13 get_ref_count 0 4 1147 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 166 0
69
inline int ::PointerToArray< LVecBase2d >::get_ref_count(void) const;

777 18 get_node_ref_count 0 4 1147 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 167 0
74
inline int ::PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

778 15 ~PointerToArray 0 4 1147 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2d >::~PointerToArray(void);

779 14 PointerToArray 0 4 1148 44 PointerToArray< LVecBase2f >::PointerToArray 0 4 168 169 170 171 0
307
inline ::PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));
inline ::PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
::PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *sequence);

780 11 empty_array 0 4 1148 41 PointerToArray< LVecBase2f >::empty_array 0 2 172 173 0
175
static inline PointerToArray< LVecBase2f > ::PointerToArray< LVecBase2f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));

781 4 size 0 4 1148 34 PointerToArray< LVecBase2f >::size 0 1 174 0
69
inline unsigned int ::PointerToArray< LVecBase2f >::size(void) const;

782 9 push_back 0 4 1148 39 PointerToArray< LVecBase2f >::push_back 0 1 175 0
75
inline void ::PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

783 8 pop_back 0 4 1148 38 PointerToArray< LVecBase2f >::pop_back 0 1 176 0
59
inline void ::PointerToArray< LVecBase2f >::pop_back(void);

784 11 get_element 0 4 1148 41 PointerToArray< LVecBase2f >::get_element 0 1 177 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::get_element(unsigned int n) const;

785 11 set_element 0 4 1148 41 PointerToArray< LVecBase2f >::set_element 0 1 178 0
97
inline void ::PointerToArray< LVecBase2f >::set_element(unsigned int n, LVecBase2f const &value);

786 11 __getitem__ 0 4 1148 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 179 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

787 11 __setitem__ 0 4 1148 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 180 0
97
inline void ::PointerToArray< LVecBase2f >::__setitem__(unsigned int n, LVecBase2f const &value);

788 8 get_data 0 4 1148 38 PointerToArray< LVecBase2f >::get_data 0 1 181 0
81
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_data(void) const;

789 8 set_data 0 4 1148 38 PointerToArray< LVecBase2f >::set_data 0 1 182 0
87
inline void ::PointerToArray< LVecBase2f >::set_data(basic_string< char > const &data);

790 11 get_subdata 0 4 1148 41 PointerToArray< LVecBase2f >::get_subdata 0 1 183 0
114
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

791 11 set_subdata 0 4 1148 41 PointerToArray< LVecBase2f >::set_subdata 0 1 184 0
126
inline void ::PointerToArray< LVecBase2f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

792 13 get_ref_count 0 4 1148 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 185 0
69
inline int ::PointerToArray< LVecBase2f >::get_ref_count(void) const;

793 18 get_node_ref_count 0 4 1148 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 186 0
74
inline int ::PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

794 15 ~PointerToArray 0 4 1148 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2f >::~PointerToArray(void);

795 14 PointerToArray 0 4 1149 44 PointerToArray< LVecBase3d >::PointerToArray 0 4 187 188 189 190 0
307
inline ::PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));
inline ::PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
::PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *sequence);

796 11 empty_array 0 4 1149 41 PointerToArray< LVecBase3d >::empty_array 0 2 191 192 0
175
static inline PointerToArray< LVecBase3d > ::PointerToArray< LVecBase3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));

797 4 size 0 4 1149 34 PointerToArray< LVecBase3d >::size 0 1 193 0
69
inline unsigned int ::PointerToArray< LVecBase3d >::size(void) const;

798 9 push_back 0 4 1149 39 PointerToArray< LVecBase3d >::push_back 0 1 194 0
75
inline void ::PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

799 8 pop_back 0 4 1149 38 PointerToArray< LVecBase3d >::pop_back 0 1 195 0
59
inline void ::PointerToArray< LVecBase3d >::pop_back(void);

800 11 get_element 0 4 1149 41 PointerToArray< LVecBase3d >::get_element 0 1 196 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::get_element(unsigned int n) const;

801 11 set_element 0 4 1149 41 PointerToArray< LVecBase3d >::set_element 0 1 197 0
97
inline void ::PointerToArray< LVecBase3d >::set_element(unsigned int n, LVecBase3d const &value);

802 11 __getitem__ 0 4 1149 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 198 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

803 11 __setitem__ 0 4 1149 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 199 0
97
inline void ::PointerToArray< LVecBase3d >::__setitem__(unsigned int n, LVecBase3d const &value);

804 8 get_data 0 4 1149 38 PointerToArray< LVecBase3d >::get_data 0 1 200 0
81
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_data(void) const;

805 8 set_data 0 4 1149 38 PointerToArray< LVecBase3d >::set_data 0 1 201 0
87
inline void ::PointerToArray< LVecBase3d >::set_data(basic_string< char > const &data);

806 11 get_subdata 0 4 1149 41 PointerToArray< LVecBase3d >::get_subdata 0 1 202 0
114
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

807 11 set_subdata 0 4 1149 41 PointerToArray< LVecBase3d >::set_subdata 0 1 203 0
126
inline void ::PointerToArray< LVecBase3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

808 13 get_ref_count 0 4 1149 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 204 0
69
inline int ::PointerToArray< LVecBase3d >::get_ref_count(void) const;

809 18 get_node_ref_count 0 4 1149 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 205 0
74
inline int ::PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

810 15 ~PointerToArray 0 4 1149 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3d >::~PointerToArray(void);

811 14 PointerToArray 0 4 1150 44 PointerToArray< LVecBase3f >::PointerToArray 0 4 206 207 208 209 0
307
inline ::PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));
inline ::PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
::PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *sequence);

812 11 empty_array 0 4 1150 41 PointerToArray< LVecBase3f >::empty_array 0 2 210 211 0
175
static inline PointerToArray< LVecBase3f > ::PointerToArray< LVecBase3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));

813 4 size 0 4 1150 34 PointerToArray< LVecBase3f >::size 0 1 212 0
69
inline unsigned int ::PointerToArray< LVecBase3f >::size(void) const;

814 9 push_back 0 4 1150 39 PointerToArray< LVecBase3f >::push_back 0 1 213 0
75
inline void ::PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

815 8 pop_back 0 4 1150 38 PointerToArray< LVecBase3f >::pop_back 0 1 214 0
59
inline void ::PointerToArray< LVecBase3f >::pop_back(void);

816 11 get_element 0 4 1150 41 PointerToArray< LVecBase3f >::get_element 0 1 215 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::get_element(unsigned int n) const;

817 11 set_element 0 4 1150 41 PointerToArray< LVecBase3f >::set_element 0 1 216 0
97
inline void ::PointerToArray< LVecBase3f >::set_element(unsigned int n, LVecBase3f const &value);

818 11 __getitem__ 0 4 1150 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 217 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

819 11 __setitem__ 0 4 1150 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 218 0
97
inline void ::PointerToArray< LVecBase3f >::__setitem__(unsigned int n, LVecBase3f const &value);

820 8 get_data 0 4 1150 38 PointerToArray< LVecBase3f >::get_data 0 1 219 0
81
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_data(void) const;

821 8 set_data 0 4 1150 38 PointerToArray< LVecBase3f >::set_data 0 1 220 0
87
inline void ::PointerToArray< LVecBase3f >::set_data(basic_string< char > const &data);

822 11 get_subdata 0 4 1150 41 PointerToArray< LVecBase3f >::get_subdata 0 1 221 0
114
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

823 11 set_subdata 0 4 1150 41 PointerToArray< LVecBase3f >::set_subdata 0 1 222 0
126
inline void ::PointerToArray< LVecBase3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

824 13 get_ref_count 0 4 1150 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 223 0
69
inline int ::PointerToArray< LVecBase3f >::get_ref_count(void) const;

825 18 get_node_ref_count 0 4 1150 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 224 0
74
inline int ::PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

826 15 ~PointerToArray 0 4 1150 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3f >::~PointerToArray(void);

827 14 PointerToArray 0 4 1151 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 4 225 226 227 228 0
347
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *sequence);

828 11 empty_array 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 2 229 230 0
199
static inline PointerToArray< UnalignedLMatrix4d > ::PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));

829 4 size 0 4 1151 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 231 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4d >::size(void) const;

830 9 push_back 0 4 1151 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 232 0
91
inline void ::PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

831 8 pop_back 0 4 1151 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 233 0
67
inline void ::PointerToArray< UnalignedLMatrix4d >::pop_back(void);

832 11 get_element 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 234 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

833 11 set_element 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 235 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::set_element(unsigned int n, UnalignedLMatrix4d const &value);

834 11 __getitem__ 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 236 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

835 11 __setitem__ 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 237 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned int n, UnalignedLMatrix4d const &value);

836 8 get_data 0 4 1151 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 238 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

837 8 set_data 0 4 1151 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 239 0
95
inline void ::PointerToArray< UnalignedLMatrix4d >::set_data(basic_string< char > const &data);

838 11 get_subdata 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 240 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

839 11 set_subdata 0 4 1151 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 241 0
134
inline void ::PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

840 13 get_ref_count 0 4 1151 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 242 0
77
inline int ::PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

841 18 get_node_ref_count 0 4 1151 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 243 0
82
inline int ::PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

842 15 ~PointerToArray 0 4 1151 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

843 14 PointerToArray 0 4 1152 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 4 244 245 246 247 0
347
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *sequence);

844 11 empty_array 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 2 248 249 0
199
static inline PointerToArray< UnalignedLMatrix4f > ::PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));

845 4 size 0 4 1152 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 250 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4f >::size(void) const;

846 9 push_back 0 4 1152 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 251 0
91
inline void ::PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

847 8 pop_back 0 4 1152 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 252 0
67
inline void ::PointerToArray< UnalignedLMatrix4f >::pop_back(void);

848 11 get_element 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 253 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

849 11 set_element 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 254 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::set_element(unsigned int n, UnalignedLMatrix4f const &value);

850 11 __getitem__ 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 255 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

851 11 __setitem__ 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 256 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned int n, UnalignedLMatrix4f const &value);

852 8 get_data 0 4 1152 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 257 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

853 8 set_data 0 4 1152 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 258 0
95
inline void ::PointerToArray< UnalignedLMatrix4f >::set_data(basic_string< char > const &data);

854 11 get_subdata 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 259 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

855 11 set_subdata 0 4 1152 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 260 0
134
inline void ::PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

856 13 get_ref_count 0 4 1152 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 261 0
77
inline int ::PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

857 18 get_node_ref_count 0 4 1152 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 262 0
82
inline int ::PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

858 15 ~PointerToArray 0 4 1152 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

859 14 PointerToArray 0 4 1153 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 4 263 264 265 266 0
352
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *sequence);

860 11 empty_array 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 2 267 268 0
202
static inline PointerToArray< UnalignedLVecBase4d > ::PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));

861 4 size 0 4 1153 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 269 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4d >::size(void) const;

862 9 push_back 0 4 1153 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 270 0
93
inline void ::PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

863 8 pop_back 0 4 1153 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 271 0
68
inline void ::PointerToArray< UnalignedLVecBase4d >::pop_back(void);

864 11 get_element 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 272 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

865 11 set_element 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 273 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::set_element(unsigned int n, UnalignedLVecBase4d const &value);

866 11 __getitem__ 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 274 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

867 11 __setitem__ 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 275 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned int n, UnalignedLVecBase4d const &value);

868 8 get_data 0 4 1153 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 276 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

869 8 set_data 0 4 1153 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 277 0
96
inline void ::PointerToArray< UnalignedLVecBase4d >::set_data(basic_string< char > const &data);

870 11 get_subdata 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 278 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

871 11 set_subdata 0 4 1153 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 279 0
135
inline void ::PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

872 13 get_ref_count 0 4 1153 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 280 0
78
inline int ::PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

873 18 get_node_ref_count 0 4 1153 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 281 0
83
inline int ::PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

874 15 ~PointerToArray 0 4 1153 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

875 14 PointerToArray 0 4 1154 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 4 282 283 284 285 0
352
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *sequence);

876 11 empty_array 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 2 286 287 0
202
static inline PointerToArray< UnalignedLVecBase4f > ::PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));

877 4 size 0 4 1154 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 288 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4f >::size(void) const;

878 9 push_back 0 4 1154 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 289 0
93
inline void ::PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

879 8 pop_back 0 4 1154 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 290 0
68
inline void ::PointerToArray< UnalignedLVecBase4f >::pop_back(void);

880 11 get_element 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 291 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

881 11 set_element 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 292 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::set_element(unsigned int n, UnalignedLVecBase4f const &value);

882 11 __getitem__ 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 293 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

883 11 __setitem__ 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 294 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned int n, UnalignedLVecBase4f const &value);

884 8 get_data 0 4 1154 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 295 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

885 8 set_data 0 4 1154 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 296 0
96
inline void ::PointerToArray< UnalignedLVecBase4f >::set_data(basic_string< char > const &data);

886 11 get_subdata 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 297 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

887 11 set_subdata 0 4 1154 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 298 0
135
inline void ::PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

888 13 get_ref_count 0 4 1154 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 299 0
78
inline int ::PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

889 18 get_node_ref_count 0 4 1154 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 300 0
83
inline int ::PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

890 15 ~PointerToArray 0 4 1154 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

891 9 make_copy 0 4 1155 25 BoundingVolume::make_copy 0 1 301 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

892 8 is_empty 0 4 1155 24 BoundingVolume::is_empty 0 1 302 525
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
////////////////////////////////////////////////////////////////////
49
inline bool BoundingVolume::is_empty(void) const;

893 11 is_infinite 0 4 1155 27 BoundingVolume::is_infinite 0 1 303 905
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
////////////////////////////////////////////////////////////////////
52
inline bool BoundingVolume::is_infinite(void) const;

894 12 set_infinite 0 4 1155 28 BoundingVolume::set_infinite 0 1 304 383
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
////////////////////////////////////////////////////////////////////
47
inline void BoundingVolume::set_infinite(void);

895 9 extend_by 0 4 1155 25 BoundingVolume::extend_by 0 1 305 303
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

896 6 around 0 4 1155 22 BoundingVolume::around 0 0 573
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::around
//       Access: Published
//  Description: Resets the volume to enclose only the volumes
//               indicated.  Returns true if successful, false if the
//               volume doesn't know how to do that or can't do that.
////////////////////////////////////////////////////////////////////
87
bool BoundingVolume::around(BoundingVolume const **first, BoundingVolume const **last);

897 8 contains 0 4 1155 24 BoundingVolume::contains 0 1 306 372
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

898 6 output 0 4 1155 22 BoundingVolume::output 0 1 307 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

899 5 write 0 4 1155 21 BoundingVolume::write 0 2 308 309 220
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void BoundingVolume::write(ostream &out, int indent_level = (0)) const;

900 14 get_class_type 0 4 1155 30 BoundingVolume::get_class_type 0 1 310 0
55
static TypeHandle BoundingVolume::get_class_type(void);

901 15 ~BoundingVolume 0 4 1155 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

902 9 extend_by 0 4 1159 34 GeometricBoundingVolume::extend_by 0 2 311 312 619
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
////////////////////////////////////////////////////////////////////
154
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3f const &point);

903 6 around 0 4 1159 31 GeometricBoundingVolume::around 0 1 313 769
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the volumes
//               indicated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
////////////////////////////////////////////////////////////////////
211
inline bool GeometricBoundingVolume::around(GeometricBoundingVolume const **first, GeometricBoundingVolume const **last);
inline bool GeometricBoundingVolume::around(LPoint3f const *first, LPoint3f const *last);

904 8 contains 0 4 1159 33 GeometricBoundingVolume::contains 0 3 314 315 316 1143
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
////////////////////////////////////////////////////////////////////
252
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &a, LPoint3f const &b) const;

905 17 get_approx_center 0 4 1159 42 GeometricBoundingVolume::get_approx_center 0 1 317 0
76
virtual LPoint3f GeometricBoundingVolume::get_approx_center(void) const = 0;

906 5 xform 0 4 1159 30 GeometricBoundingVolume::xform 0 1 318 0
70
virtual void GeometricBoundingVolume::xform(LMatrix4f const &mat) = 0;

907 14 get_class_type 0 4 1159 39 GeometricBoundingVolume::get_class_type 0 1 319 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

908 24 ~GeometricBoundingVolume 0 4 1159 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

909 7 get_min 0 4 1160 29 FiniteBoundingVolume::get_min 0 1 320 0
63
virtual LPoint3f FiniteBoundingVolume::get_min(void) const = 0;

910 7 get_max 0 4 1160 29 FiniteBoundingVolume::get_max 0 1 321 0
63
virtual LPoint3f FiniteBoundingVolume::get_max(void) const = 0;

911 10 get_volume 0 4 1160 32 FiniteBoundingVolume::get_volume 0 1 322 238
////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
59
virtual float FiniteBoundingVolume::get_volume(void) const;

912 14 get_class_type 0 4 1160 36 FiniteBoundingVolume::get_class_type 0 1 323 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

913 21 ~FiniteBoundingVolume 0 4 1160 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

914 10 LParabolaf 0 4 1161 22 LParabolaf::LParabolaf 0 3 324 325 326 1375
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

915 10 operator = 0 4 1161 22 LParabolaf::operator = 0 1 327 235
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolaf::operator =(LParabolaf const &copy);

916 11 ~LParabolaf 0 4 1161 23 LParabolaf::~LParabolaf 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolaf::~LParabolaf(void);

917 5 xform 0 4 1161 17 LParabolaf::xform 0 1 328 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolaf::xform(LMatrix4f const &mat);

918 5 get_a 0 4 1161 17 LParabolaf::get_a 0 1 329 313
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

919 5 get_b 0 4 1161 17 LParabolaf::get_b 0 1 330 318
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

920 5 get_c 0 4 1161 17 LParabolaf::get_c 0 1 331 312
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

921 10 calc_point 0 4 1161 22 LParabolaf::calc_point 0 1 332 266
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f LParabolaf::calc_point(float t) const;

922 6 output 0 4 1161 18 LParabolaf::output 0 1 333 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolaf::output(ostream &out) const;

923 5 write 0 4 1161 17 LParabolaf::write 0 2 334 335 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write(ostream &out, int indent_level = (0)) const;

924 20 write_datagram_fixed 0 4 1161 32 LParabolaf::write_datagram_fixed 0 1 336 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

925 19 read_datagram_fixed 0 4 1161 31 LParabolaf::read_datagram_fixed 0 1 337 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

926 14 write_datagram 0 4 1161 26 LParabolaf::write_datagram 0 1 338 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolaf::write_datagram(Datagram &destination) const;

927 13 read_datagram 0 4 1161 25 LParabolaf::read_datagram 0 1 339 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolaf::read_datagram(DatagramIterator &source);

928 10 LParabolad 0 4 1162 22 LParabolad::LParabolad 0 3 340 341 342 2752
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

929 10 operator = 0 4 1162 22 LParabolad::operator = 0 1 343 472
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolad::operator =(LParabolad const &copy);

930 11 ~LParabolad 0 4 1162 23 LParabolad::~LParabolad 0 0 444
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolad::~LParabolad(void);

931 5 xform 0 4 1162 17 LParabolad::xform 0 1 344 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolad::xform(LMatrix4d const &mat);

932 5 get_a 0 4 1162 17 LParabolad::get_a 0 1 345 628
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_a(void) const;

933 5 get_b 0 4 1162 17 LParabolad::get_b 0 1 346 638
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_b(void) const;

934 5 get_c 0 4 1162 17 LParabolad::get_c 0 1 347 626
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_c(void) const;

935 10 calc_point 0 4 1162 22 LParabolad::calc_point 0 1 348 534
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
55
inline LPoint3d LParabolad::calc_point(double t) const;

936 6 output 0 4 1162 18 LParabolad::output 0 1 349 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolad::output(ostream &out) const;

937 5 write 0 4 1162 17 LParabolad::write 0 2 350 351 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolad::write(ostream &out, int indent_level = (0)) const;

938 20 write_datagram_fixed 0 4 1162 32 LParabolad::write_datagram_fixed 0 1 352 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

939 19 read_datagram_fixed 0 4 1162 31 LParabolad::read_datagram_fixed 0 1 353 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

940 14 write_datagram 0 4 1162 26 LParabolad::write_datagram 0 1 354 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolad::write_datagram(Datagram &destination) const;

941 13 read_datagram 0 4 1162 25 LParabolad::read_datagram 0 1 355 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolad::read_datagram(DatagramIterator &source);

942 7 LPlanef 0 4 1163 16 LPlanef::LPlanef 0 5 356 357 358 359 360 2153
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
295
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);

943 10 operator * 0 4 1163 19 LPlanef::operator * 0 2 361 362 546
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

944 11 operator *= 0 4 1163 20 LPlanef::operator *= 0 1 363 273
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

945 5 xform 0 4 1163 14 LPlanef::xform 0 1 364 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlanef::xform(LMatrix4f const &mat);

946 10 operator - 0 68 1163 19 LPlanef::operator - 0 1 365 268
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlanef LPlanef::operator -(void) const;

947 18 get_reflection_mat 0 4 1163 27 LPlanef::get_reflection_mat 0 1 366 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

948 10 get_normal 0 4 1163 19 LPlanef::get_normal 0 1 367 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3f LPlanef::get_normal(void) const;

949 9 get_point 0 4 1163 18 LPlanef::get_point 0 1 368 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3f LPlanef::get_point(void) const;

950 13 dist_to_plane 0 4 1163 22 LPlanef::dist_to_plane 0 1 369 612
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

951 7 project 0 4 1163 16 LPlanef::project 0 1 370 307
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

952 4 flip 0 4 1163 13 LPlanef::flip 0 1 371 329
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlanef::flip(void);

953 15 intersects_line 0 4 1163 24 LPlanef::intersects_line 0 1 372 1628
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

954 16 intersects_plane 0 4 1163 25 LPlanef::intersects_plane 0 1 373 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

955 19 intersects_parabola 0 4 1163 28 LPlanef::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

956 6 output 0 4 1163 15 LPlanef::output 0 1 374 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlanef::output(ostream &out) const;

957 5 write 0 4 1163 14 LPlanef::write 0 2 375 376 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlanef::write(ostream &out, int indent_level = (0)) const;

958 8 ~LPlanef 0 4 1163 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

959 7 LPlaned 0 4 1165 16 LPlaned::LPlaned 0 5 377 378 379 380 381 4308
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////

// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
299
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);

960 10 operator * 0 4 1165 19 LPlaned::operator * 0 2 382 383 1094
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

961 11 operator *= 0 4 1165 20 LPlaned::operator *= 0 1 384 548
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

962 5 xform 0 4 1165 14 LPlaned::xform 0 1 385 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlaned::xform(LMatrix4d const &mat);

963 10 operator - 0 68 1165 19 LPlaned::operator - 0 1 386 538
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlaned LPlaned::operator -(void) const;

964 18 get_reflection_mat 0 4 1165 27 LPlaned::get_reflection_mat 0 1 387 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

965 10 get_normal 0 4 1165 19 LPlaned::get_normal 0 1 388 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3d LPlaned::get_normal(void) const;

966 9 get_point 0 4 1165 18 LPlaned::get_point 0 1 389 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3d LPlaned::get_point(void) const;

967 13 dist_to_plane 0 4 1165 22 LPlaned::dist_to_plane 0 1 390 1226
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

968 7 project 0 4 1165 16 LPlaned::project 0 1 391 616
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

969 4 flip 0 4 1165 13 LPlaned::flip 0 1 392 660
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlaned::flip(void);

970 15 intersects_line 0 4 1165 24 LPlaned::intersects_line 0 1 393 3258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

971 16 intersects_plane 0 4 1165 25 LPlaned::intersects_plane 0 1 394 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

972 19 intersects_parabola 0 4 1165 28 LPlaned::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

973 6 output 0 4 1165 15 LPlaned::output 0 1 395 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlaned::output(ostream &out) const;

974 5 write 0 4 1165 14 LPlaned::write 0 2 396 397 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlaned::write(ostream &out, int indent_level = (0)) const;

975 8 ~LPlaned 0 4 1165 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

976 11 BoundingBox 0 4 1167 24 BoundingBox::BoundingBox 0 2 398 399 1001
// Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
////////////////////////////////////////////////////////////////////
113
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3f const &min, LPoint3f const &max);

977 12 operator new 0 4 1167 25 BoundingBox::operator new 0 1 400 0
128
inline void *BoundingBox::operator new(unsigned int size);
inline void *BoundingBox::operator new(unsigned int size, void *ptr);

978 15 operator delete 0 4 1167 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

979 12 validate_ptr 0 4 1167 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

980 14 get_num_points 0 4 1167 27 BoundingBox::get_num_points 0 1 401 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_points(void) const;

981 9 get_point 0 4 1167 22 BoundingBox::get_point 0 1 402 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline LPoint3f BoundingBox::get_point(int n) const;

982 14 get_num_planes 0 4 1167 27 BoundingBox::get_num_planes 0 1 403 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_planes(void) const;

983 9 get_plane 0 4 1167 22 BoundingBox::get_plane 0 1 404 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPlanef BoundingBox::get_plane(int n) const;

984 14 get_class_type 0 4 1167 27 BoundingBox::get_class_type 0 1 405 0
52
static TypeHandle BoundingBox::get_class_type(void);

985 12 ~BoundingBox 0 4 1167 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

986 9 LFrustumf 0 4 1168 20 LFrustumf::LFrustumf 0 1 406 686
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumf::LFrustumf(void);

987 13 make_ortho_2D 0 4 1168 24 LFrustumf::make_ortho_2D 0 2 407 408 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

988 10 make_ortho 0 4 1168 21 LFrustumf::make_ortho 0 2 409 410 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

989 21 make_perspective_hfov 0 4 1168 32 LFrustumf::make_perspective_hfov 0 1 411 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

990 21 make_perspective_vfov 0 4 1168 32 LFrustumf::make_perspective_vfov 0 1 412 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

991 16 make_perspective 0 4 1168 27 LFrustumf::make_perspective 0 1 413 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

992 22 get_perspective_params 0 4 1168 33 LFrustumf::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

993 10 ~LFrustumf 0 4 1168 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

994 9 LFrustumd 0 4 1169 20 LFrustumd::LFrustumd 0 1 414 1374
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumd::LFrustumd(void);

995 13 make_ortho_2D 0 4 1169 24 LFrustumd::make_ortho_2D 0 2 415 416 1002
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

996 10 make_ortho 0 4 1169 21 LFrustumd::make_ortho 0 2 417 418 902
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

997 21 make_perspective_hfov 0 4 1169 32 LFrustumd::make_perspective_hfov 0 1 419 1158
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

998 21 make_perspective_vfov 0 4 1169 32 LFrustumd::make_perspective_vfov 0 1 420 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

999 16 make_perspective 0 4 1169 27 LFrustumd::make_perspective 0 1 421 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1000 22 get_perspective_params 0 4 1169 33 LFrustumd::get_perspective_params 0 0 850
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1001 10 ~LFrustumd 0 4 1169 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1002 18 BoundingHexahedron 0 4 1170 38 BoundingHexahedron::BoundingHexahedron 0 3 422 423 424 1188
// Filename: boundingHexahedron.I
// Created by:  drose (03Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
324
BoundingHexahedron::BoundingHexahedron(LFrustumf const &frustum, bool is_ortho, CoordinateSystem cs = (CS_default));
BoundingHexahedron::BoundingHexahedron(LPoint3f const &fll, LPoint3f const &flr, LPoint3f const &fur, LPoint3f const &ful, LPoint3f const &nll, LPoint3f const &nlr, LPoint3f const &nur, LPoint3f const &nul);

1003 14 get_num_points 0 4 1170 34 BoundingHexahedron::get_num_points 0 1 425 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_points(void) const;

1004 9 get_point 0 4 1170 29 BoundingHexahedron::get_point 0 1 426 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f BoundingHexahedron::get_point(int n) const;

1005 14 get_num_planes 0 4 1170 34 BoundingHexahedron::get_num_planes 0 1 427 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_planes(void) const;

1006 9 get_plane 0 4 1170 29 BoundingHexahedron::get_plane 0 1 428 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
////////////////////////////////////////////////////////////////////
58
inline LPlanef BoundingHexahedron::get_plane(int n) const;

1007 14 get_class_type 0 4 1170 34 BoundingHexahedron::get_class_type 0 1 429 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1008 19 ~BoundingHexahedron 0 4 1170 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1009 12 BoundingLine 0 4 1171 26 BoundingLine::BoundingLine 0 1 430 937
// Filename: boundingLine.I
// Created by:  drose (04Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline BoundingLine::BoundingLine(LPoint3f const &a, LPoint3f const &b);

1010 12 operator new 0 4 1171 26 BoundingLine::operator new 0 1 431 0
130
inline void *BoundingLine::operator new(unsigned int size);
inline void *BoundingLine::operator new(unsigned int size, void *ptr);

1011 15 operator delete 0 4 1171 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1012 12 validate_ptr 0 4 1171 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1013 11 get_point_a 0 4 1171 25 BoundingLine::get_point_a 0 1 432 271
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f const &BoundingLine::get_point_a(void) const;

1014 11 get_point_b 0 4 1171 25 BoundingLine::get_point_b 0 1 433 272
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoundingLine::get_point_b(void) const;

1015 14 get_class_type 0 4 1171 28 BoundingLine::get_class_type 0 1 434 0
53
static TypeHandle BoundingLine::get_class_type(void);

1016 13 ~BoundingLine 0 4 1171 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1017 13 BoundingPlane 0 4 1172 28 BoundingPlane::BoundingPlane 0 2 435 436 1022
// Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
101
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlanef const &plane);

1018 12 operator new 0 4 1172 27 BoundingPlane::operator new 0 1 437 0
132
inline void *BoundingPlane::operator new(unsigned int size);
inline void *BoundingPlane::operator new(unsigned int size, void *ptr);

1019 15 operator delete 0 4 1172 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1020 12 validate_ptr 0 4 1172 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1021 9 get_plane 0 4 1172 24 BoundingPlane::get_plane 0 1 438 224
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline LPlanef const &BoundingPlane::get_plane(void) const;

1022 14 get_class_type 0 4 1172 29 BoundingPlane::get_class_type 0 1 439 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1023 14 ~BoundingPlane 0 4 1172 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1024 14 BoundingSphere 0 4 1173 30 BoundingSphere::BoundingSphere 0 2 440 441 1002
// Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
////////////////////////////////////////////////////////////////////
121
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3f const &center, float radius);

1025 12 operator new 0 4 1173 28 BoundingSphere::operator new 0 1 442 0
134
inline void *BoundingSphere::operator new(unsigned int size);
inline void *BoundingSphere::operator new(unsigned int size, void *ptr);

1026 15 operator delete 0 4 1173 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1027 12 validate_ptr 0 4 1173 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1028 10 get_center 0 4 1173 26 BoundingSphere::get_center 0 1 443 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline LPoint3f BoundingSphere::get_center(void) const;

1029 10 get_radius 0 4 1173 26 BoundingSphere::get_radius 0 1 444 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline float BoundingSphere::get_radius(void) const;

1030 14 get_class_type 0 4 1173 30 BoundingSphere::get_class_type 0 1 445 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1031 15 ~BoundingSphere 0 4 1173 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1032 26 IntersectionBoundingVolume 0 4 1174 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 446 1017
// Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1033 12 operator new 0 4 1174 40 IntersectionBoundingVolume::operator new 0 1 447 0
158
inline void *IntersectionBoundingVolume::operator new(unsigned int size);
inline void *IntersectionBoundingVolume::operator new(unsigned int size, void *ptr);

1034 15 operator delete 0 4 1174 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1035 12 validate_ptr 0 4 1174 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1036 18 get_num_components 0 4 1174 46 IntersectionBoundingVolume::get_num_components 0 1 448 299
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
////////////////////////////////////////////////////////////////////
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1037 13 get_component 0 4 1174 41 IntersectionBoundingVolume::get_component 0 1 449 287
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
////////////////////////////////////////////////////////////////////
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1038 16 clear_components 0 4 1174 44 IntersectionBoundingVolume::clear_components 0 1 450 283
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
56
void IntersectionBoundingVolume::clear_components(void);

1039 13 add_component 0 4 1174 41 IntersectionBoundingVolume::add_component 0 1 451 693
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1040 14 get_class_type 0 4 1174 42 IntersectionBoundingVolume::get_class_type 0 1 452 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1041 27 ~IntersectionBoundingVolume 0 4 1174 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1042 8 heads_up 0 1 0 8 heads_up 0 24 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 1390
////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1255
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1043 7 look_at 0 1 0 7 look_at 0 24 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 1390
////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1243
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1044 8 Mersenne 0 4 1175 18 Mersenne::Mersenne 0 1 453 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1045 10 get_uint31 0 4 1175 20 Mersenne::get_uint31 0 1 454 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1046 9 ~Mersenne 0 4 1175 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1047 18 OmniBoundingVolume 0 4 1176 38 OmniBoundingVolume::OmniBoundingVolume 0 1 455 721
// Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1048 14 get_class_type 0 4 1176 34 OmniBoundingVolume::get_class_type 0 1 456 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1049 19 ~OmniBoundingVolume 0 4 1176 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1050 19 UnionBoundingVolume 0 4 1177 40 UnionBoundingVolume::UnionBoundingVolume 0 1 457 989
// Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1051 12 operator new 0 4 1177 33 UnionBoundingVolume::operator new 0 1 458 0
144
inline void *UnionBoundingVolume::operator new(unsigned int size);
inline void *UnionBoundingVolume::operator new(unsigned int size, void *ptr);

1052 15 operator delete 0 4 1177 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1053 12 validate_ptr 0 4 1177 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1054 18 get_num_components 0 4 1177 39 UnionBoundingVolume::get_num_components 0 1 459 285
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
////////////////////////////////////////////////////////////////////
63
inline int UnionBoundingVolume::get_num_components(void) const;

1055 13 get_component 0 4 1177 34 UnionBoundingVolume::get_component 0 1 460 273
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
////////////////////////////////////////////////////////////////////
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1056 16 clear_components 0 4 1177 37 UnionBoundingVolume::clear_components 0 1 461 276
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
49
void UnionBoundingVolume::clear_components(void);

1057 13 add_component 0 4 1177 34 UnionBoundingVolume::add_component 0 1 462 686
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1058 19 filter_intersection 0 4 1177 40 UnionBoundingVolume::filter_intersection 0 1 463 347
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
////////////////////////////////////////////////////////////////////
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1059 14 get_class_type 0 4 1177 35 UnionBoundingVolume::get_class_type 0 1 464 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1060 20 ~UnionBoundingVolume 0 4 1177 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1061 10 Randomizer 0 4 1178 22 Randomizer::Randomizer 0 3 465 466 467 1044
// Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
115
inline Randomizer::Randomizer(unsigned long int seed = (0));
inline Randomizer::Randomizer(Randomizer const &copy);

1062 10 operator = 0 4 1178 22 Randomizer::operator = 0 1 468 233
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void Randomizer::operator =(Randomizer const &copy);

1063 10 random_int 0 4 1178 22 Randomizer::random_int 0 1 469 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
////////////////////////////////////////////////////////////////////
45
inline int Randomizer::random_int(int range);

1064 11 random_real 0 4 1178 23 Randomizer::random_real 0 1 470 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
////////////////////////////////////////////////////////////////////
52
inline double Randomizer::random_real(double range);

1065 16 random_real_unit 0 4 1178 28 Randomizer::random_real_unit 0 1 471 274
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
////////////////////////////////////////////////////////////////////
49
inline double Randomizer::random_real_unit(void);

1066 13 get_next_seed 0 4 1178 25 Randomizer::get_next_seed 0 1 472 313
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
////////////////////////////////////////////////////////////////////
64
static inline unsigned long int Randomizer::get_next_seed(void);

1067 8 get_seed 0 4 1178 20 Randomizer::get_seed 0 1 473 363
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
52
inline unsigned long int Randomizer::get_seed(void);

1068 11 ~Randomizer 0 4 1178 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1069 8 get_seed 0 4 1179 21 PerlinNoise::get_seed 0 1 474 368
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
53
inline unsigned long int PerlinNoise::get_seed(void);

1070 12 ~PerlinNoise 0 4 1179 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1071 12 PerlinNoise2 0 4 1180 26 PerlinNoise2::PerlinNoise2 0 5 475 476 477 478 479 1633
// Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
212
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1072 10 operator = 0 4 1180 24 PerlinNoise2::operator = 0 1 480 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1073 9 set_scale 0 4 1180 23 PerlinNoise2::set_scale 0 4 481 482 483 484 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1074 5 noise 0 4 1180 19 PerlinNoise2::noise 0 3 485 486 487 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1075 11 operator () 0 4 1180 25 PerlinNoise2::operator () 0 3 488 489 490 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1076 13 ~PerlinNoise2 0 4 1180 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1077 12 PerlinNoise3 0 4 1181 26 PerlinNoise3::PerlinNoise3 0 5 491 492 493 494 495 1633
// Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
223
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1078 10 operator = 0 4 1181 24 PerlinNoise3::operator = 0 1 496 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1079 9 set_scale 0 4 1181 23 PerlinNoise3::set_scale 0 4 497 498 499 500 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1080 5 noise 0 4 1181 19 PerlinNoise3::noise 0 3 501 502 503 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1081 11 operator () 0 4 1181 25 PerlinNoise3::operator () 0 3 504 505 506 808
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1082 13 ~PerlinNoise3 0 4 1181 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1083 9 rotate_to 0 1 0 9 rotate_to 0 4 607 608 609 610 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1084 19 StackedPerlinNoise2 0 4 1182 40 StackedPerlinNoise2::StackedPerlinNoise2 0 8 507 508 509 510 511 512 513 514 1865
// Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
322
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = (2), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1085 10 operator = 0 4 1182 31 StackedPerlinNoise2::operator = 0 1 515 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1086 9 add_level 0 4 1182 30 StackedPerlinNoise2::add_level 0 2 516 517 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = (1));

1087 5 clear 0 4 1182 26 StackedPerlinNoise2::clear 0 1 518 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise2::clear(void);

1088 5 noise 0 4 1182 26 StackedPerlinNoise2::noise 0 3 519 520 521 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1089 11 operator () 0 4 1182 32 StackedPerlinNoise2::operator () 0 3 522 523 524 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1090 20 ~StackedPerlinNoise2 0 4 1182 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1091 19 StackedPerlinNoise3 0 4 1183 40 StackedPerlinNoise3::StackedPerlinNoise3 0 8 525 526 527 528 529 530 531 532 1865
// Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
333
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = (3), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1092 10 operator = 0 4 1183 31 StackedPerlinNoise3::operator = 0 1 533 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1093 9 add_level 0 4 1183 30 StackedPerlinNoise3::add_level 0 2 534 535 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = (1));

1094 5 clear 0 4 1183 26 StackedPerlinNoise3::clear 0 1 536 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise3::clear(void);

1095 5 noise 0 4 1183 26 StackedPerlinNoise3::noise 0 3 537 538 539 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1096 11 operator () 0 4 1183 32 StackedPerlinNoise3::operator () 0 3 540 541 542 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1097 20 ~StackedPerlinNoise3 0 4 1183 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1098 12 Triangulator 0 4 1184 26 Triangulator::Triangulator 0 1 543 225
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
Triangulator::Triangulator(void);

1099 5 clear 0 4 1184 19 Triangulator::clear 0 1 544 337
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
31
void Triangulator::clear(void);

1100 10 add_vertex 0 4 1184 24 Triangulator::add_vertex 0 2 545 546 1114
// Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1101 16 get_num_vertices 0 4 1184 30 Triangulator::get_num_vertices 0 1 547 545
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
54
inline int Triangulator::get_num_vertices(void) const;

1102 10 get_vertex 0 4 1184 24 Triangulator::get_vertex 0 1 548 247
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1103 13 clear_polygon 0 4 1184 27 Triangulator::clear_polygon 0 1 549 342
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
////////////////////////////////////////////////////////////////////
39
void Triangulator::clear_polygon(void);

1104 18 add_polygon_vertex 0 4 1184 32 Triangulator::add_polygon_vertex 0 1 550 645
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
////////////////////////////////////////////////////////////////////
49
void Triangulator::add_polygon_vertex(int index);

1105 15 is_left_winding 0 4 1184 29 Triangulator::is_left_winding 0 1 551 394
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
////////////////////////////////////////////////////////////////////
54
inline bool Triangulator::is_left_winding(void) const;

1106 10 begin_hole 0 4 1184 24 Triangulator::begin_hole 0 1 552 308
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
////////////////////////////////////////////////////////////////////
36
void Triangulator::begin_hole(void);

1107 15 add_hole_vertex 0 4 1184 29 Triangulator::add_hole_vertex 0 1 553 571
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
////////////////////////////////////////////////////////////////////
46
void Triangulator::add_hole_vertex(int index);

1108 11 triangulate 0 4 1184 25 Triangulator::triangulate 0 1 554 439
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
37
void Triangulator::triangulate(void);

1109 17 get_num_triangles 0 4 1184 31 Triangulator::get_num_triangles 0 1 555 328
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
////////////////////////////////////////////////////////////////////
48
int Triangulator::get_num_triangles(void) const;

1110 15 get_triangle_v0 0 4 1184 29 Triangulator::get_triangle_v0 0 1 556 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v0(int n) const;

1111 15 get_triangle_v1 0 4 1184 29 Triangulator::get_triangle_v1 0 1 557 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v1(int n) const;

1112 15 get_triangle_v2 0 4 1184 29 Triangulator::get_triangle_v2 0 1 558 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v2(int n) const;

1113 13 ~Triangulator 0 4 1184 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

610
1 14 Dtool_LL_p8UqP 0 7 8 1187 622 14 Dtool_LL_p8UqP 0 1 4 copy 1 1185  
2 14 Dtool_LL_pBbKJ 0 7 8 1187 622 14 Dtool_LL_pBbKJ 0 1 4 copy 1 1188  
3 14 Dtool_LL_pLoYb 0 6 9 1190 0 14 Dtool_LL_pLoYb 0 1 4 this 3 1185  
4 14 Dtool_LL_pdtz1 0 6 10 1191 0 14 Dtool_LL_pdtz1 0 2 4 this 3 1185  1 n 1 1190  
5 14 Dtool_LL_pyBEt 0 6 11 1191 0 14 Dtool_LL_pyBEt 0 2 4 this 3 1185  1 n 1 1190  
6 14 Dtool_LL_p4SAf 0 6 12 1194 0 14 Dtool_LL_p4SAf 0 1 4 this 3 1185  
7 14 Dtool_LL_pIPQw 0 6 13 1194 0 14 Dtool_LL_pIPQw 0 3 4 this 3 1185  1 n 1 1190  5 count 1 1190  
8 14 Dtool_LL_py8mi 0 6 14 1195 0 14 Dtool_LL_py8mi 0 1 4 this 3 1185  
9 14 Dtool_LL_pVkxg 0 6 15 1195 0 14 Dtool_LL_pVkxg 0 1 4 this 3 1185  
10 14 Dtool_LL_pPOpe 0 4 5 1197 0 14 Dtool_LL_pPOpe 0 1 4 this 3 1196  
11 14 Dtool_LL_pEcA1 0 4 6 1197 0 14 Dtool_LL_pEcA1 0 2 4 this 3 1198  3 out 1 1200  
12 14 Dtool_LL_prVxk 0 7 23 1204 634 14 Dtool_LL_prVxk 0 1 4 copy 1 1202  
13 14 Dtool_LL_ppaza 0 7 23 1204 634 14 Dtool_LL_ppaza 0 1 4 copy 1 1205  
14 14 Dtool_LL_pKofp 0 6 24 1190 0 14 Dtool_LL_pKofp 0 1 4 this 3 1202  
15 14 Dtool_LL_pft6D 0 6 25 1207 0 14 Dtool_LL_pft6D 0 2 4 this 3 1202  1 n 1 1190  
16 14 Dtool_LL_p1BL7 0 6 26 1207 0 14 Dtool_LL_p1BL7 0 2 4 this 3 1202  1 n 1 1190  
17 14 Dtool_LL_p_SHt 0 6 27 1194 0 14 Dtool_LL_p_SHt 0 1 4 this 3 1202  
18 14 Dtool_LL_pJPZ_ 0 6 28 1194 0 14 Dtool_LL_pJPZ_ 0 3 4 this 3 1202  1 n 1 1190  5 count 1 1190  
19 14 Dtool_LL_px8tw 0 6 29 1195 0 14 Dtool_LL_px8tw 0 1 4 this 3 1202  
20 14 Dtool_LL_pUk4u 0 6 30 1195 0 14 Dtool_LL_pUk4u 0 1 4 this 3 1202  
21 14 Dtool_LL_pPF3f 0 4 20 1197 0 14 Dtool_LL_pPF3f 0 1 4 this 3 1210  
22 14 Dtool_LL_pEXO2 0 4 21 1197 0 14 Dtool_LL_pEXO2 0 2 4 this 3 1211  3 out 1 1200  
23 14 Dtool_LL_p6k38 0 7 38 1215 646 14 Dtool_LL_p6k38 0 1 4 copy 1 1213  
24 14 Dtool_LL_pn6GJ 0 7 38 1215 646 14 Dtool_LL_pn6GJ 0 1 4 copy 1 1216  
25 14 Dtool_LL_pGRVp 0 6 39 1190 0 14 Dtool_LL_pGRVp 0 1 4 this 3 1213  
26 14 Dtool_LL_pcDC4 0 6 40 1218 0 14 Dtool_LL_pcDC4 0 2 4 this 3 1213  1 n 1 1190  
27 14 Dtool_LL_pCq1g 0 6 41 1218 0 14 Dtool_LL_pCq1g 0 2 4 this 3 1213  1 n 1 1190  
28 14 Dtool_LL_pIjLd 0 6 42 1194 0 14 Dtool_LL_pIjLd 0 1 4 this 3 1213  
29 14 Dtool_LL_pa_qG 0 6 43 1194 0 14 Dtool_LL_pa_qG 0 3 4 this 3 1213  1 n 1 1190  5 count 1 1190  
30 14 Dtool_LL_pzjgQ 0 6 44 1195 0 14 Dtool_LL_pzjgQ 0 1 4 this 3 1213  
31 14 Dtool_LL_pCwxW 0 6 45 1195 0 14 Dtool_LL_pCwxW 0 1 4 this 3 1213  
32 14 Dtool_LL_pnoEy 0 4 35 1197 0 14 Dtool_LL_pnoEy 0 1 4 this 3 1221  
33 14 Dtool_LL_p6Pu_ 0 4 36 1197 0 14 Dtool_LL_p6Pu_ 0 2 4 this 3 1222  3 out 1 1200  
34 14 Dtool_LL_piMrA 0 7 53 1226 658 14 Dtool_LL_piMrA 0 1 4 copy 1 1224  
35 14 Dtool_LL_p2OwM 0 7 53 1226 658 14 Dtool_LL_p2OwM 0 1 4 copy 1 1227  
36 14 Dtool_LL_phR1s 0 6 54 1190 0 14 Dtool_LL_phR1s 0 1 4 this 3 1224  
37 14 Dtool_LL_pFCi7 0 6 55 1229 0 14 Dtool_LL_pFCi7 0 2 4 this 3 1224  1 n 1 1190  
38 14 Dtool_LL_p5qVk 0 6 56 1229 0 14 Dtool_LL_p5qVk 0 2 4 this 3 1224  1 n 1 1190  
39 14 Dtool_LL_pvjrg 0 6 57 1194 0 14 Dtool_LL_pvjrg 0 1 4 this 3 1224  
40 14 Dtool_LL_pz9KK 0 6 58 1194 0 14 Dtool_LL_pz9KK 0 3 4 this 3 1224  1 n 1 1190  5 count 1 1190  
41 14 Dtool_LL_pUjAU 0 6 59 1195 0 14 Dtool_LL_pUjAU 0 1 4 this 3 1224  
42 14 Dtool_LL_plwRa 0 6 60 1195 0 14 Dtool_LL_plwRa 0 1 4 this 3 1224  
43 14 Dtool_LL_pkIIZ 0 4 50 1197 0 14 Dtool_LL_pkIIZ 0 1 4 this 3 1232  
44 14 Dtool_LL_p5vzm 0 4 51 1197 0 14 Dtool_LL_p5vzm 0 2 4 this 3 1233  3 out 1 1200  
45 14 Dtool_LL_pZ47T 0 7 68 1237 670 14 Dtool_LL_pZ47T 0 1 4 copy 1 1235  
46 14 Dtool_LL_p0kKo 0 7 68 1237 670 14 Dtool_LL_p0kKo 0 1 4 copy 1 1238  
47 14 Dtool_LL_pHxZQ 0 6 69 1190 0 14 Dtool_LL_pHxZQ 0 1 4 this 3 1235  
48 14 Dtool_LL_pfjFf 0 6 70 1240 0 14 Dtool_LL_pfjFf 0 2 4 this 3 1235  1 n 1 1190  
49 14 Dtool_LL_pDK4H 0 6 71 1240 0 14 Dtool_LL_pDK4H 0 2 4 this 3 1235  1 n 1 1190  
50 14 Dtool_LL_pJDPE 0 6 72 1194 0 14 Dtool_LL_pJDPE 0 1 4 this 3 1235  
51 14 Dtool_LL_paeut 0 6 73 1194 0 14 Dtool_LL_paeut 0 3 4 this 3 1235  1 n 1 1190  5 count 1 1190  
52 14 Dtool_LL_pzDj3 0 6 74 1195 0 14 Dtool_LL_pzDj3 0 1 4 this 3 1235  
53 14 Dtool_LL_pCQ09 0 6 75 1195 0 14 Dtool_LL_pCQ09 0 1 4 this 3 1235  
54 14 Dtool_LL_pHkry 0 4 65 1197 0 14 Dtool_LL_pHkry 0 1 4 this 3 1243  
55 14 Dtool_LL_pZTXA 0 4 66 1197 0 14 Dtool_LL_pZTXA 0 2 4 this 3 1244  3 out 1 1200  
56 14 Dtool_LL_pAfuX 0 7 83 1248 682 14 Dtool_LL_pAfuX 0 1 4 copy 1 1246  
57 14 Dtool_LL_pHUzr 0 7 83 1248 682 14 Dtool_LL_pHUzr 0 1 4 copy 1 1249  
58 14 Dtool_LL_pux5T 0 6 84 1190 0 14 Dtool_LL_pux5T 0 1 4 this 3 1246  
59 14 Dtool_LL_pEili 0 6 85 1251 0 14 Dtool_LL_pEili 0 2 4 this 3 1246  1 n 1 1190  
60 14 Dtool_LL_p6KYL 0 6 86 1251 0 14 Dtool_LL_p6KYL 0 2 4 this 3 1246  1 n 1 1190  
61 14 Dtool_LL_pgDvH 0 6 87 1194 0 14 Dtool_LL_pgDvH 0 1 4 this 3 1246  
62 14 Dtool_LL_pzdOx 0 6 88 1194 0 14 Dtool_LL_pzdOx 0 3 4 this 3 1246  1 n 1 1190  5 count 1 1190  
63 14 Dtool_LL_pUDD7 0 6 89 1195 0 14 Dtool_LL_pUDD7 0 1 4 this 3 1246  
64 14 Dtool_LL_pqQUB 0 6 90 1195 0 14 Dtool_LL_pqQUB 0 1 4 this 3 1246  
65 14 Dtool_LL_pEEvZ 0 4 80 1197 0 14 Dtool_LL_pEEvZ 0 1 4 this 3 1254  
66 14 Dtool_LL_pZzYn 0 4 81 1197 0 14 Dtool_LL_pZzYn 0 2 4 this 3 1255  3 out 1 1200  
67 14 Dtool_LL_pIjZj 0 7 98 1259 694 14 Dtool_LL_pIjZj 0 1 4 copy 1 1257  
68 14 Dtool_LL_p0fsj 0 7 98 1259 694 14 Dtool_LL_p0fsj 0 1 4 copy 1 1260  
69 14 Dtool_LL_p45Pf 0 6 99 1190 0 14 Dtool_LL_p45Pf 0 1 4 this 3 1257  
70 14 Dtool_LL_pp7fi 0 6 100 1262 0 14 Dtool_LL_pp7fi 0 2 4 this 3 1257  1 n 1 1190  
71 14 Dtool_LL_pXMaR 0 6 101 1262 0 14 Dtool_LL_pXMaR 0 2 4 this 3 1257  1 n 1 1190  
72 14 Dtool_LL_poMr_ 0 6 102 1194 0 14 Dtool_LL_poMr_ 0 1 4 this 3 1257  
73 14 Dtool_LL_pPquB 0 6 103 1194 0 14 Dtool_LL_pPquB 0 3 4 this 3 1257  1 n 1 1190  5 count 1 1190  
74 14 Dtool_LL_pCJFo 0 6 104 1195 0 14 Dtool_LL_pCJFo 0 1 4 this 3 1257  
75 14 Dtool_LL_psO2H 0 6 105 1195 0 14 Dtool_LL_psO2H 0 1 4 this 3 1257  
76 14 Dtool_LL_pYk24 0 4 95 1197 0 14 Dtool_LL_pYk24 0 1 4 this 3 1265  
77 14 Dtool_LL_pIEmL 0 4 96 1197 0 14 Dtool_LL_pIEmL 0 2 4 this 3 1266  3 out 1 1200  
78 14 Dtool_LL_pL7R7 0 7 113 1270 706 14 Dtool_LL_pL7R7 0 1 4 copy 1 1268  
79 14 Dtool_LL_p13gU 0 7 113 1270 706 14 Dtool_LL_p13gU 0 1 4 copy 1 1271  
80 14 Dtool_LL_p4xAp 0 6 114 1190 0 14 Dtool_LL_p4xAp 0 1 4 this 3 1268  
81 14 Dtool_LL_ppzOs 0 6 115 1273 0 14 Dtool_LL_ppzOs 0 2 4 this 3 1268  1 n 1 1190  
82 14 Dtool_LL_pXELb 0 6 116 1273 0 14 Dtool_LL_pXELb 0 2 4 this 3 1268  1 n 1 1190  
83 14 Dtool_LL_ppUcJ 0 6 117 1194 0 14 Dtool_LL_ppUcJ 0 1 4 this 3 1268  
84 14 Dtool_LL_pPifL 0 6 118 1194 0 14 Dtool_LL_pPifL 0 3 4 this 3 1268  1 n 1 1190  5 count 1 1190  
85 14 Dtool_LL_pCB2x 0 6 119 1195 0 14 Dtool_LL_pCB2x 0 1 4 this 3 1268  
86 14 Dtool_LL_psGnR 0 6 120 1195 0 14 Dtool_LL_psGnR 0 1 4 this 3 1268  
87 14 Dtool_LL_pQX_4 0 4 110 1197 0 14 Dtool_LL_pQX_4 0 1 4 this 3 1276  
88 14 Dtool_LL_pAXwL 0 4 111 1197 0 14 Dtool_LL_pAXwL 0 2 4 this 3 1277  3 out 1 1200  
89 14 Dtool_LL_png8j 0 7 128 1281 718 14 Dtool_LL_png8j 0 1 4 copy 1 1279  
90 14 Dtool_LL_pBa_J 0 7 128 1281 718 14 Dtool_LL_pBa_J 0 1 4 copy 1 1282  
91 14 Dtool_LL_p6gkS 0 6 129 1190 0 14 Dtool_LL_p6gkS 0 1 4 this 3 1279  
92 14 Dtool_LL_pQ6W8 0 6 130 1284 0 14 Dtool_LL_pQ6W8 0 2 4 this 3 1279  1 n 1 1190  
93 14 Dtool_LL_pZ7dZ 0 6 131 1284 0 14 Dtool_LL_pZ7dZ 0 2 4 this 3 1279  1 n 1 1190  
94 14 Dtool_LL_pV8Dh 0 6 132 1194 0 14 Dtool_LL_pV8Dh 0 1 4 this 3 1279  
95 14 Dtool_LL_pksLm 0 6 133 1194 0 14 Dtool_LL_pksLm 0 3 4 this 3 1279  1 n 1 1190  5 count 1 1190  
96 14 Dtool_LL_prjbv 0 6 134 1195 0 14 Dtool_LL_prjbv 0 1 4 this 3 1279  
97 14 Dtool_LL_pIPMo 0 6 135 1195 0 14 Dtool_LL_pIPMo 0 1 4 this 3 1279  
98 14 Dtool_LL_pG_a7 0 4 125 1197 0 14 Dtool_LL_pG_a7 0 1 4 this 3 1287  
99 14 Dtool_LL_pC1FV 0 4 126 1197 0 14 Dtool_LL_pC1FV 0 2 4 this 3 1288  3 out 1 1200  
100 14 Dtool_LL_p_UYM 0 7 143 1292 730 14 Dtool_LL_p_UYM 0 1 4 copy 1 1290  
101 14 Dtool_LL_pzea6 0 7 143 1292 730 14 Dtool_LL_pzea6 0 1 4 copy 1 1293  
102 14 Dtool_LL_pxgAL 0 6 144 1190 0 14 Dtool_LL_pxgAL 0 1 4 this 3 1290  
103 14 Dtool_LL_pN6y0 0 6 145 1295 0 14 Dtool_LL_pN6y0 0 2 4 this 3 1290  1 n 1 1190  
104 14 Dtool_LL_pc75R 0 6 146 1295 0 14 Dtool_LL_pc75R 0 2 4 this 3 1290  1 n 1 1190  
105 14 Dtool_LL_pS8fZ 0 6 147 1194 0 14 Dtool_LL_pS8fZ 0 1 4 this 3 1290  
106 14 Dtool_LL_pvsne 0 6 148 1194 0 14 Dtool_LL_pvsne 0 3 4 this 3 1290  1 n 1 1190  5 count 1 1190  
107 14 Dtool_LL_puj3n 0 6 149 1195 0 14 Dtool_LL_puj3n 0 1 4 this 3 1290  
108 14 Dtool_LL_p1Mog 0 6 150 1195 0 14 Dtool_LL_p1Mog 0 1 4 this 3 1290  
109 14 Dtool_LL_pHbVA 0 4 140 1197 0 14 Dtool_LL_pHbVA 0 1 4 this 3 1298  
110 14 Dtool_LL_pCp9Z 0 4 141 1197 0 14 Dtool_LL_pCp9Z 0 2 4 this 3 1299  3 out 1 1200  
111 14 Dtool_LL_pJ_k_ 0 7 153 1301 746 14 Dtool_LL_pJ_k_ 0 1 4 copy 1 1188  
112 14 Dtool_LL_p_zBg 0 7 153 1301 746 14 Dtool_LL_p_zBg 0 2 4 self 1 1302  8 sequence 1 1302  
113 14 Dtool_LL_p_KQr 0 7 153 1301 746 14 Dtool_LL_p_KQr 0 1 11 type_handle 1 1304  
114 14 Dtool_LL_pSpwv 0 7 153 1301 746 14 Dtool_LL_pSpwv 0 0 
115 14 Dtool_LL_pW6ft 0 7 154 1301 746 14 Dtool_LL_pW6ft 0 2 1 n 1 1190  11 type_handle 1 1304  
116 14 Dtool_LL_p81AE 0 7 154 1301 746 14 Dtool_LL_p81AE 0 1 1 n 1 1190  
117 14 Dtool_LL_pBZGM 0 6 155 1190 0 14 Dtool_LL_pBZGM 0 1 4 this 3 1188  
118 14 Dtool_LL_pKwOw 0 4 156 1197 0 14 Dtool_LL_pKwOw 0 2 4 this 3 1301  1 x 1 1191  
119 14 Dtool_LL_pdUXK 0 4 157 1197 0 14 Dtool_LL_pdUXK 0 1 4 this 3 1301  
120 14 Dtool_LL_pKjSZ 0 6 158 1191 0 14 Dtool_LL_pKjSZ 0 2 4 this 3 1188  1 n 1 1190  
121 14 Dtool_LL_pXaeg 0 4 159 1197 0 14 Dtool_LL_pXaeg 0 3 4 this 3 1301  1 n 1 1190  5 value 1 1191  
122 14 Dtool_LL_pbf7U 0 6 160 1191 0 14 Dtool_LL_pbf7U 0 2 4 this 3 1188  1 n 1 1190  
123 14 Dtool_LL_pt0fn 0 4 161 1197 0 14 Dtool_LL_pt0fn 0 3 4 this 3 1301  1 n 1 1190  5 value 1 1191  
124 14 Dtool_LL_p_t5N 0 6 162 1194 0 14 Dtool_LL_p_t5N 0 1 4 this 3 1188  
125 14 Dtool_LL_pyib6 0 4 163 1197 0 14 Dtool_LL_pyib6 0 2 4 this 3 1301  4 data 1 1194  
126 14 Dtool_LL_pLHeW 0 6 164 1194 0 14 Dtool_LL_pLHeW 0 3 4 this 3 1188  1 n 1 1190  5 count 1 1190  
127 14 Dtool_LL_pmg3K 0 4 165 1197 0 14 Dtool_LL_pmg3K 0 4 4 this 3 1301  1 n 1 1190  5 count 1 1190  4 data 1 1194  
128 14 Dtool_LL_p4bsv 0 6 166 1195 0 14 Dtool_LL_p4bsv 0 1 4 this 3 1188  
129 14 Dtool_LL_pJWyu 0 6 167 1195 0 14 Dtool_LL_pJWyu 0 1 4 this 3 1188  
130 14 Dtool_LL_p8egW 0 7 170 1306 762 14 Dtool_LL_p8egW 0 1 4 copy 1 1205  
131 14 Dtool_LL_p9TFH 0 7 170 1306 762 14 Dtool_LL_p9TFH 0 2 4 self 1 1302  8 sequence 1 1302  
132 14 Dtool_LL_p_qVS 0 7 170 1306 762 14 Dtool_LL_p_qVS 0 1 11 type_handle 1 1304  
133 14 Dtool_LL_pTJ0W 0 7 170 1306 762 14 Dtool_LL_pTJ0W 0 0 
134 14 Dtool_LL_pVaiU 0 7 171 1306 762 14 Dtool_LL_pVaiU 0 2 1 n 1 1190  11 type_handle 1 1304  
135 14 Dtool_LL_p8VEr 0 7 171 1306 762 14 Dtool_LL_p8VEr 0 1 1 n 1 1190  
136 14 Dtool_LL_pB5Kz 0 6 172 1190 0 14 Dtool_LL_pB5Kz 0 1 4 this 3 1205  
137 14 Dtool_LL_pLXgY 0 4 173 1197 0 14 Dtool_LL_pLXgY 0 2 4 this 3 1306  1 x 1 1207  
138 14 Dtool_LL_pd0Yx 0 4 174 1197 0 14 Dtool_LL_pd0Yx 0 1 4 this 3 1306  
139 14 Dtool_LL_pJDVA 0 6 175 1207 0 14 Dtool_LL_pJDVA 0 2 4 this 3 1205  1 n 1 1190  
140 14 Dtool_LL_pc6__ 0 4 176 1197 0 14 Dtool_LL_pc6__ 0 3 4 this 3 1306  1 n 1 1190  5 value 1 1207  
141 14 Dtool_LL_pb_87 0 6 177 1207 0 14 Dtool_LL_pb_87 0 2 4 this 3 1205  1 n 1 1190  
142 14 Dtool_LL_pnU_G 0 4 178 1197 0 14 Dtool_LL_pnU_G 0 3 4 this 3 1306  1 n 1 1190  5 value 1 1207  
143 14 Dtool_LL_p_N90 0 6 179 1194 0 14 Dtool_LL_p_N90 0 1 4 this 3 1205  
144 14 Dtool_LL_pzCeh 0 4 180 1197 0 14 Dtool_LL_pzCeh 0 2 4 this 3 1306  4 data 1 1194  
145 14 Dtool_LL_pLnj9 0 6 181 1194 0 14 Dtool_LL_pLnj9 0 3 4 this 3 1205  1 n 1 1190  5 count 1 1190  
146 14 Dtool_LL_pmA7x 0 4 182 1197 0 14 Dtool_LL_pmA7x 0 4 4 this 3 1306  1 n 1 1190  5 count 1 1190  4 data 1 1194  
147 14 Dtool_LL_pn7wW 0 6 183 1195 0 14 Dtool_LL_pn7wW 0 1 4 this 3 1205  
148 14 Dtool_LL_pI21V 0 6 184 1195 0 14 Dtool_LL_pI21V 0 1 4 this 3 1205  
149 14 Dtool_LL_ptlCd 0 7 187 1307 778 14 Dtool_LL_ptlCd 0 1 4 copy 1 1216  
150 14 Dtool_LL_poVny 0 7 187 1307 778 14 Dtool_LL_poVny 0 2 4 self 1 1302  8 sequence 1 1302  
151 14 Dtool_LL_peJpZ 0 7 187 1307 778 14 Dtool_LL_peJpZ 0 1 11 type_handle 1 1304  
152 14 Dtool_LL_pFfmo 0 7 187 1307 778 14 Dtool_LL_pFfmo 0 0 
153 14 Dtool_LL_pAaph 0 7 188 1307 778 14 Dtool_LL_pAaph 0 2 1 n 1 1190  11 type_handle 1 1304  
154 14 Dtool_LL_pLmTx 0 7 188 1307 778 14 Dtool_LL_pLmTx 0 1 1 n 1 1190  
155 14 Dtool_LL_pZRHz 0 6 189 1190 0 14 Dtool_LL_pZRHz 0 1 4 this 3 1216  
156 14 Dtool_LL_pZRc8 0 4 190 1197 0 14 Dtool_LL_pZRc8 0 2 4 this 3 1307  1 x 1 1218  
157 14 Dtool_LL_p9uf6 0 4 191 1197 0 14 Dtool_LL_p9uf6 0 1 4 this 3 1307  
158 14 Dtool_LL_pn3ba 0 6 192 1218 0 14 Dtool_LL_pn3ba 0 2 4 this 3 1216  1 n 1 1190  
159 14 Dtool_LL_pkHcM 0 4 193 1197 0 14 Dtool_LL_pkHcM 0 3 4 this 3 1307  1 n 1 1190  5 value 1 1218  
160 14 Dtool_LL_p4N1O 0 6 194 1218 0 14 Dtool_LL_p4N1O 0 2 4 this 3 1216  1 n 1 1190  
161 14 Dtool_LL_pM8xs 0 4 195 1197 0 14 Dtool_LL_pM8xs 0 3 4 this 3 1307  1 n 1 1190  5 value 1 1218  
162 14 Dtool_LL_pf3_s 0 6 196 1194 0 14 Dtool_LL_pf3_s 0 1 4 this 3 1216  
163 14 Dtool_LL_pXLP_ 0 4 197 1197 0 14 Dtool_LL_pXLP_ 0 2 4 this 3 1307  4 data 1 1194  
164 14 Dtool_LL_p2suB 0 6 198 1194 0 14 Dtool_LL_p2suB 0 3 4 this 3 1216  1 n 1 1190  5 count 1 1190  
165 14 Dtool_LL_pKkrQ 0 4 199 1197 0 14 Dtool_LL_pKkrQ 0 4 4 this 3 1307  1 n 1 1190  5 count 1 1190  4 data 1 1194  
166 14 Dtool_LL_pViqm 0 6 200 1195 0 14 Dtool_LL_pViqm 0 1 4 this 3 1216  
167 14 Dtool_LL_pFUyJ 0 6 201 1195 0 14 Dtool_LL_pFUyJ 0 1 4 this 3 1216  
168 14 Dtool_LL_poJ1_ 0 7 204 1308 794 14 Dtool_LL_poJ1_ 0 1 4 copy 1 1227  
169 14 Dtool_LL_p8VXU 0 7 204 1308 794 14 Dtool_LL_p8VXU 0 2 4 self 1 1302  8 sequence 1 1302  
170 14 Dtool_LL_prOZ7 0 7 204 1308 794 14 Dtool_LL_prOZ7 0 1 11 type_handle 1 1304  
171 14 Dtool_LL_pRfWK 0 7 204 1308 794 14 Dtool_LL_pRfWK 0 0 
172 14 Dtool_LL_psbZD 0 7 205 1308 794 14 Dtool_LL_psbZD 0 2 1 n 1 1190  11 type_handle 1 1304  
173 14 Dtool_LL_pnlDT 0 7 205 1308 794 14 Dtool_LL_pnlDT 0 1 1 n 1 1190  
174 14 Dtool_LL_plS3U 0 6 206 1190 0 14 Dtool_LL_plS3U 0 1 4 this 3 1227  
175 14 Dtool_LL_pgR8_ 0 4 207 1197 0 14 Dtool_LL_pgR8_ 0 2 4 this 3 1308  1 x 1 1229  
176 14 Dtool_LL_pBuPc 0 4 208 1197 0 14 Dtool_LL_pBuPc 0 1 4 this 3 1308  
177 14 Dtool_LL_pI3L8 0 6 209 1229 0 14 Dtool_LL_pI3L8 0 2 4 this 3 1227  1 n 1 1190  
178 14 Dtool_LL_pw5Nu 0 4 210 1197 0 14 Dtool_LL_pw5Nu 0 3 4 this 3 1308  1 n 1 1190  5 value 1 1229  
179 14 Dtool_LL_pPNlw 0 6 211 1229 0 14 Dtool_LL_pPNlw 0 2 4 this 3 1227  1 n 1 1190  
180 14 Dtool_LL_pJOjO 0 4 212 1197 0 14 Dtool_LL_pJOjO 0 3 4 this 3 1308  1 n 1 1190  5 value 1 1229  
181 14 Dtool_LL_pz3uO 0 6 213 1194 0 14 Dtool_LL_pz3uO 0 1 4 this 3 1227  
182 14 Dtool_LL_p7L_g 0 4 214 1197 0 14 Dtool_LL_p7L_g 0 2 4 this 3 1308  4 data 1 1194  
183 14 Dtool_LL_pjsej 0 6 215 1194 0 14 Dtool_LL_pjsej 0 3 4 this 3 1227  1 n 1 1190  5 count 1 1190  
184 14 Dtool_LL_pnlby 0 4 216 1197 0 14 Dtool_LL_pnlby 0 4 4 this 3 1308  1 n 1 1190  5 count 1 1190  4 data 1 1194  
185 14 Dtool_LL_phiaI 0 6 217 1195 0 14 Dtool_LL_phiaI 0 1 4 this 3 1227  
186 14 Dtool_LL_pwXir 0 6 218 1195 0 14 Dtool_LL_pwXir 0 1 4 this 3 1227  
187 14 Dtool_LL_pxLk_ 0 7 221 1309 810 14 Dtool_LL_pxLk_ 0 1 4 copy 1 1238  
188 14 Dtool_LL_ppFJG 0 7 221 1309 810 14 Dtool_LL_ppFJG 0 2 4 self 1 1302  8 sequence 1 1302  
189 14 Dtool_LL_pe5Kt 0 7 221 1309 810 14 Dtool_LL_pe5Kt 0 1 11 type_handle 1 1304  
190 14 Dtool_LL_pFPI8 0 7 221 1309 810 14 Dtool_LL_pFPI8 0 0 
191 14 Dtool_LL_pAqK1 0 7 222 1309 810 14 Dtool_LL_pAqK1 0 2 1 n 1 1190  11 type_handle 1 1304  
192 14 Dtool_LL_pIW1E 0 7 222 1309 810 14 Dtool_LL_pIW1E 0 1 1 n 1 1190  
193 14 Dtool_LL_pWBpG 0 6 223 1190 0 14 Dtool_LL_pWBpG 0 1 4 this 3 1238  
194 14 Dtool_LL_paxgj 0 4 224 1197 0 14 Dtool_LL_paxgj 0 2 4 this 3 1309  1 x 1 1240  
195 14 Dtool_LL_p8_BO 0 4 225 1197 0 14 Dtool_LL_p8_BO 0 1 4 this 3 1309  
196 14 Dtool_LL_pnn9t 0 6 226 1240 0 14 Dtool_LL_pnn9t 0 2 4 this 3 1238  1 n 1 1190  
197 14 Dtool_LL_pyo_m 0 4 227 1197 0 14 Dtool_LL_pyo_m 0 3 4 this 3 1309  1 n 1 1190  5 value 1 1240  
198 14 Dtool_LL_p4dXi 0 6 228 1240 0 14 Dtool_LL_p4dXi 0 2 4 this 3 1238  1 n 1 1190  
199 14 Dtool_LL_p9rTH 0 4 229 1197 0 14 Dtool_LL_p9rTH 0 3 4 this 3 1309  1 n 1 1190  5 value 1 1240  
200 14 Dtool_LL_pengA 0 6 230 1194 0 14 Dtool_LL_pengA 0 1 4 this 3 1238  
201 14 Dtool_LL_pU7xS 0 4 231 1197 0 14 Dtool_LL_pU7xS 0 2 4 this 3 1309  4 data 1 1194  
202 14 Dtool_LL_p2cPV 0 6 232 1194 0 14 Dtool_LL_p2cPV 0 3 4 this 3 1238  1 n 1 1190  5 count 1 1190  
203 14 Dtool_LL_pKUMk 0 4 233 1197 0 14 Dtool_LL_pKUMk 0 4 4 this 3 1309  1 n 1 1190  5 count 1 1190  4 data 1 1194  
204 14 Dtool_LL_pVSM6 0 6 234 1195 0 14 Dtool_LL_pVSM6 0 1 4 this 3 1238  
205 14 Dtool_LL_pFkUd 0 6 235 1195 0 14 Dtool_LL_pFkUd 0 1 4 this 3 1238  
206 14 Dtool_LL_pPnWg 0 7 238 1310 826 14 Dtool_LL_pPnWg 0 1 4 copy 1 1249  
207 14 Dtool_LL_p8F5n 0 7 238 1310 826 14 Dtool_LL_p8F5n 0 2 4 self 1 1302  8 sequence 1 1302  
208 14 Dtool_LL_pq_6O 0 7 238 1310 826 14 Dtool_LL_pq_6O 0 1 11 type_handle 1 1304  
209 14 Dtool_LL_pRP4d 0 7 238 1310 826 14 Dtool_LL_pRP4d 0 0 
210 14 Dtool_LL_psr6W 0 7 239 1310 826 14 Dtool_LL_psr6W 0 2 1 n 1 1190  11 type_handle 1 1304  
211 14 Dtool_LL_pnVlm 0 7 239 1310 826 14 Dtool_LL_pnVlm 0 1 1 n 1 1190  
212 14 Dtool_LL_plCZo 0 6 240 1190 0 14 Dtool_LL_plCZo 0 1 4 this 3 1249  
213 14 Dtool_LL_phxAn 0 4 241 1197 0 14 Dtool_LL_phxAn 0 2 4 this 3 1310  1 x 1 1251  
214 14 Dtool_LL_pB_xv 0 4 242 1197 0 14 Dtool_LL_pB_xv 0 1 4 this 3 1310  
215 14 Dtool_LL_pLntP 0 6 243 1251 0 14 Dtool_LL_pLntP 0 2 4 this 3 1249  1 n 1 1190  
216 14 Dtool_LL_pB2vI 0 4 244 1197 0 14 Dtool_LL_pB2vI 0 3 4 this 3 1310  1 n 1 1190  5 value 1 1251  
217 14 Dtool_LL_pMdHE 0 6 245 1251 0 14 Dtool_LL_pMdHE 0 2 4 this 3 1249  1 n 1 1190  
218 14 Dtool_LL_pX5Cp 0 4 246 1197 0 14 Dtool_LL_pX5Cp 0 3 4 this 3 1310  1 n 1 1190  5 value 1 1251  
219 14 Dtool_LL_pznQi 0 6 247 1194 0 14 Dtool_LL_pznQi 0 1 4 this 3 1249  
220 14 Dtool_LL_p77h0 0 4 248 1197 0 14 Dtool_LL_p77h0 0 2 4 this 3 1310  4 data 1 1194  
221 14 Dtool_LL_pjc_2 0 6 249 1194 0 14 Dtool_LL_pjc_2 0 3 4 this 3 1249  1 n 1 1190  5 count 1 1190  
222 14 Dtool_LL_pmV8F 0 4 250 1197 0 14 Dtool_LL_pmV8F 0 4 4 this 3 1310  1 n 1 1190  5 count 1 1190  4 data 1 1194  
223 14 Dtool_LL_phS8b 0 6 251 1195 0 14 Dtool_LL_phS8b 0 1 4 this 3 1249  
224 14 Dtool_LL_pwnE_ 0 6 252 1195 0 14 Dtool_LL_pwnE_ 0 1 4 this 3 1249  
225 14 Dtool_LL_p457Z 0 7 255 1311 842 14 Dtool_LL_p457Z 0 1 4 copy 1 1260  
226 14 Dtool_LL_p0LdI 0 7 255 1311 842 14 Dtool_LL_p0LdI 0 2 4 self 1 1302  8 sequence 1 1302  
227 14 Dtool_LL_pOf6R 0 7 255 1311 842 14 Dtool_LL_pOf6R 0 1 11 type_handle 1 1304  
228 14 Dtool_LL_p6Cf6 0 7 255 1311 842 14 Dtool_LL_p6Cf6 0 0 
229 14 Dtool_LL_pOyIK 0 7 256 1311 842 14 Dtool_LL_pOyIK 0 2 1 n 1 1190  11 type_handle 1 1304  
230 14 Dtool_LL_p4r_c 0 7 256 1311 842 14 Dtool_LL_p4r_c 0 1 1 n 1 1190  
231 14 Dtool_LL_pGoCu 0 6 257 1190 0 14 Dtool_LL_pGoCu 0 1 4 this 3 1260  
232 14 Dtool_LL_p3j_h 0 4 258 1197 0 14 Dtool_LL_p3j_h 0 2 4 this 3 1311  1 x 1 1262  
233 14 Dtool_LL_p5m0V 0 4 259 1197 0 14 Dtool_LL_p5m0V 0 1 4 this 3 1311  
234 14 Dtool_LL_pIOmv 0 6 260 1262 0 14 Dtool_LL_pIOmv 0 2 4 this 3 1260  1 n 1 1190  
235 14 Dtool_LL_pzc56 0 4 261 1197 0 14 Dtool_LL_pzc56 0 3 4 this 3 1311  1 n 1 1190  5 value 1 1262  
236 14 Dtool_LL_pVWEn 0 6 262 1262 0 14 Dtool_LL_pVWEn 0 2 4 this 3 1260  1 n 1 1190  
237 14 Dtool_LL_p7RxL 0 4 263 1197 0 14 Dtool_LL_p7RxL 0 3 4 this 3 1311  1 n 1 1190  5 value 1 1262  
238 14 Dtool_LL_pyCPe 0 6 264 1194 0 14 Dtool_LL_pyCPe 0 1 4 this 3 1260  
239 14 Dtool_LL_pYKyj 0 4 265 1197 0 14 Dtool_LL_pYKyj 0 2 4 this 3 1311  4 data 1 1194  
240 14 Dtool_LL_pyaOf 0 6 266 1194 0 14 Dtool_LL_pyaOf 0 3 4 this 3 1260  1 n 1 1190  5 count 1 1190  
241 14 Dtool_LL_pPeuN 0 4 267 1197 0 14 Dtool_LL_pPeuN 0 4 4 this 3 1311  1 n 1 1190  5 count 1 1190  4 data 1 1194  
242 14 Dtool_LL_pvZcS 0 6 268 1195 0 14 Dtool_LL_pvZcS 0 1 4 this 3 1260  
243 14 Dtool_LL_prlTC 0 6 269 1195 0 14 Dtool_LL_prlTC 0 1 4 this 3 1260  
244 14 Dtool_LL_p4Nlo 0 7 272 1312 858 14 Dtool_LL_p4Nlo 0 1 4 copy 1 1271  
245 14 Dtool_LL_p0vWN 0 7 272 1312 858 14 Dtool_LL_p0vWN 0 2 4 self 1 1302  8 sequence 1 1302  
246 14 Dtool_LL_pOzyW 0 7 272 1312 858 14 Dtool_LL_pOzyW 0 1 11 type_handle 1 1304  
247 14 Dtool_LL_p6mY_ 0 7 272 1312 858 14 Dtool_LL_p6mY_ 0 0 
248 14 Dtool_LL_pOOBP 0 7 273 1312 858 14 Dtool_LL_pOOBP 0 2 1 n 1 1190  11 type_handle 1 1304  
249 14 Dtool_LL_p4X3h 0 7 273 1312 858 14 Dtool_LL_p4X3h 0 1 1 n 1 1190  
250 14 Dtool_LL_pGM6y 0 6 274 1190 0 14 Dtool_LL_pGM6y 0 1 4 this 3 1271  
251 14 Dtool_LL_p8N5m 0 4 275 1197 0 14 Dtool_LL_p8N5m 0 2 4 this 3 1312  1 x 1 1273  
252 14 Dtool_LL_p5asa 0 4 276 1197 0 14 Dtool_LL_p5asa 0 1 4 this 3 1312  
253 14 Dtool_LL_pIie0 0 6 277 1273 0 14 Dtool_LL_pIie0 0 2 4 this 3 1271  1 n 1 1190  
254 14 Dtool_LL_pykqE 0 4 278 1197 0 14 Dtool_LL_pykqE 0 3 4 this 3 1312  1 n 1 1190  5 value 1 1273  
255 14 Dtool_LL_pVq9r 0 6 279 1273 0 14 Dtool_LL_pVq9r 0 2 4 this 3 1271  1 n 1 1190  
256 14 Dtool_LL_p7ZiV 0 4 280 1197 0 14 Dtool_LL_p7ZiV 0 3 4 this 3 1312  1 n 1 1190  5 value 1 1273  
257 14 Dtool_LL_py_Ij 0 6 281 1194 0 14 Dtool_LL_py_Ij 0 1 4 this 3 1271  
258 14 Dtool_LL_pY2qo 0 4 282 1197 0 14 Dtool_LL_pY2qo 0 2 4 this 3 1312  4 data 1 1194  
259 14 Dtool_LL_py2Gk 0 6 283 1194 0 14 Dtool_LL_py2Gk 0 3 4 this 3 1271  1 n 1 1190  5 count 1 1190  
260 14 Dtool_LL_pP6mS 0 4 284 1197 0 14 Dtool_LL_pP6mS 0 4 4 this 3 1312  1 n 1 1190  5 count 1 1190  4 data 1 1194  
261 14 Dtool_LL_pv9UX 0 6 285 1195 0 14 Dtool_LL_pv9UX 0 1 4 this 3 1271  
262 14 Dtool_LL_prZMH 0 6 286 1195 0 14 Dtool_LL_prZMH 0 1 4 this 3 1271  
263 14 Dtool_LL_pWYux 0 7 289 1313 874 14 Dtool_LL_pWYux 0 1 4 copy 1 1282  
264 14 Dtool_LL_pacm3 0 7 289 1313 874 14 Dtool_LL_pacm3 0 2 4 self 1 1302  8 sequence 1 1302  
265 14 Dtool_LL_pmafk 0 7 289 1313 874 14 Dtool_LL_pmafk 0 1 11 type_handle 1 1304  
266 14 Dtool_LL_pIfZ2 0 7 289 1313 874 14 Dtool_LL_pIfZ2 0 0 
267 14 Dtool_LL_pyhft 0 7 290 1313 874 14 Dtool_LL_pyhft 0 2 1 n 1 1190  11 type_handle 1 1304  
268 14 Dtool_LL_pL6dH 0 7 290 1313 874 14 Dtool_LL_pL6dH 0 1 1 n 1 1190  
269 14 Dtool_LL_pouvn 0 6 291 1190 0 14 Dtool_LL_pouvn 0 1 4 this 3 1282  
270 14 Dtool_LL_pkzRx 0 4 292 1197 0 14 Dtool_LL_pkzRx 0 2 4 this 3 1313  1 x 1 1284  
271 14 Dtool_LL_pY_qg 0 4 293 1197 0 14 Dtool_LL_pY_qg 0 1 4 this 3 1313  
272 14 Dtool_LL_pF1lc 0 6 294 1284 0 14 Dtool_LL_pF1lc 0 2 4 this 3 1282  1 n 1 1190  
273 14 Dtool_LL_pDiPw 0 4 295 1197 0 14 Dtool_LL_pDiPw 0 3 4 this 3 1313  1 n 1 1190  5 value 1 1284  
274 14 Dtool_LL_pk0HL 0 6 296 1284 0 14 Dtool_LL_pk0HL 0 2 4 this 3 1282  1 n 1 1190  
275 14 Dtool_LL_ph9QM 0 4 297 1197 0 14 Dtool_LL_ph9QM 0 3 4 this 3 1313  1 n 1 1190  5 value 1 1284  
276 14 Dtool_LL_pd49u 0 6 298 1194 0 14 Dtool_LL_pd49u 0 1 4 this 3 1282  
277 14 Dtool_LL_pmWMh 0 4 299 1197 0 14 Dtool_LL_pmWMh 0 2 4 this 3 1313  4 data 1 1194  
278 14 Dtool_LL_p_5dR 0 6 300 1194 0 14 Dtool_LL_p_5dR 0 3 4 this 3 1282  1 n 1 1190  5 count 1 1190  
279 14 Dtool_LL_pWBSj 0 4 301 1197 0 14 Dtool_LL_pWBSj 0 4 4 this 3 1313  1 n 1 1190  5 count 1 1190  4 data 1 1194  
280 14 Dtool_LL_ppiI2 0 6 302 1195 0 14 Dtool_LL_ppiI2 0 1 4 this 3 1282  
281 14 Dtool_LL_p_Tgy 0 6 303 1195 0 14 Dtool_LL_p_Tgy 0 1 4 this 3 1282  
282 14 Dtool_LL_p3n8b 0 7 306 1314 890 14 Dtool_LL_p3n8b 0 1 4 copy 1 1293  
283 14 Dtool_LL_pZc0T 0 7 306 1314 890 14 Dtool_LL_pZc0T 0 2 4 self 1 1302  8 sequence 1 1302  
284 14 Dtool_LL_platA 0 7 306 1314 890 14 Dtool_LL_platA 0 1 11 type_handle 1 1304  
285 14 Dtool_LL_pLfnS 0 7 306 1314 890 14 Dtool_LL_pLfnS 0 0 
286 14 Dtool_LL_p1htJ 0 7 307 1314 890 14 Dtool_LL_p1htJ 0 2 1 n 1 1190  11 type_handle 1 1304  
287 14 Dtool_LL_pV6rj 0 7 307 1314 890 14 Dtool_LL_pV6rj 0 1 1 n 1 1190  
288 14 Dtool_LL_pru9D 0 6 308 1190 0 14 Dtool_LL_pru9D 0 1 4 this 3 1293  
289 14 Dtool_LL_pnDAh 0 4 309 1197 0 14 Dtool_LL_pnDAh 0 2 4 this 3 1314  1 x 1 1295  
290 14 Dtool_LL_pW_48 0 4 310 1197 0 14 Dtool_LL_pW_48 0 1 4 this 3 1314  
291 14 Dtool_LL_pH1z4 0 6 311 1295 0 14 Dtool_LL_pH1z4 0 2 4 this 3 1293  1 n 1 1190  
292 14 Dtool_LL_pQtdT 0 4 312 1197 0 14 Dtool_LL_pQtdT 0 3 4 this 3 1314  1 n 1 1190  5 value 1 1295  
293 14 Dtool_LL_pq0Vn 0 6 313 1295 0 14 Dtool_LL_pq0Vn 0 2 4 this 3 1293  1 n 1 1190  
294 14 Dtool_LL_px_ev 0 4 314 1197 0 14 Dtool_LL_px_ev 0 3 4 this 3 1314  1 n 1 1190  5 value 1 1295  
295 14 Dtool_LL_pA4LL 0 6 315 1194 0 14 Dtool_LL_pA4LL 0 1 4 this 3 1293  
296 14 Dtool_LL_pkWa9 0 4 316 1197 0 14 Dtool_LL_pkWa9 0 2 4 this 3 1314  4 data 1 1194  
297 14 Dtool_LL_p55rt 0 6 317 1194 0 14 Dtool_LL_p55rt 0 3 4 this 3 1293  1 n 1 1190  5 count 1 1190  
298 14 Dtool_LL_pQBg_ 0 4 318 1197 0 14 Dtool_LL_pQBg_ 0 4 4 this 3 1314  1 n 1 1190  5 count 1 1190  4 data 1 1194  
299 14 Dtool_LL_psiWS 0 6 319 1195 0 14 Dtool_LL_psiWS 0 1 4 this 3 1293  
300 14 Dtool_LL_phTuO 0 6 320 1195 0 14 Dtool_LL_phTuO 0 1 4 this 3 1293  
301 14 Dtool_LL_pi4zP 0 7 324 1317 901 14 Dtool_LL_pi4zP 0 1 4 this 3 1315  
302 14 Dtool_LL_pVfqL 0 6 325 1318 0 14 Dtool_LL_pVfqL 525 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
303 14 Dtool_LL_pFsFC 0 6 326 1318 0 14 Dtool_LL_pFsFC 905 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
304 14 Dtool_LL_pD2hm 0 4 327 1197 0 14 Dtool_LL_pD2hm 383 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1317  
305 14 Dtool_LL_pARix 0 6 328 1318 0 14 Dtool_LL_pARix 303 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1317  3 vol 1 1315  
306 14 Dtool_LL_pdpPR 0 6 331 1195 0 14 Dtool_LL_pdpPR 372 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  3 vol 1 1315  
307 14 Dtool_LL_pQbvQ 0 4 332 1197 0 14 Dtool_LL_pQbvQ 0 2 4 this 3 1315  3 out 1 1200  
308 14 Dtool_LL_pJz6_ 0 4 333 1197 0 14 Dtool_LL_pJz6_ 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1315  3 out 1 1200  12 indent_level 1 1195  
309 14 Dtool_LL_pZ2qR 0 4 333 1197 0 14 Dtool_LL_pZ2qR 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  3 out 1 1200  
310 14 Dtool_LL_prfVo 0 7 335 1304 0 14 Dtool_LL_prfVo 0 0 
311 14 Dtool_LL_pzZa3 0 6 338 1318 0 14 Dtool_LL_pzZa3 309 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1319  3 vol 1 1320  
312 14 Dtool_LL_p5ZtT 0 6 338 1318 0 14 Dtool_LL_p5ZtT 308 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1319  5 point 1 1322  
313 14 Dtool_LL_pdv6k 0 6 339 1318 0 14 Dtool_LL_pdv6k 300 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1319  5 first 1 1322  4 last 1 1322  
314 14 Dtool_LL_pB8A3 0 6 340 1195 0 14 Dtool_LL_pB8A3 378 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1320  3 vol 1 1320  
315 14 Dtool_LL_pEncR 0 6 340 1195 0 14 Dtool_LL_pEncR 377 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1320  5 point 1 1322  
316 14 Dtool_LL_p0SwX 0 6 340 1195 0 14 Dtool_LL_p0SwX 384 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1320  1 a 1 1322  1 b 1 1322  
317 14 Dtool_LL_pGh7m 0 7 341 1325 0 14 Dtool_LL_pGh7m 0 1 4 this 3 1320  
318 14 Dtool_LL_pIb98 0 4 342 1197 0 14 Dtool_LL_pIb98 0 2 4 this 3 1319  3 mat 1 1326  
319 14 Dtool_LL_pB1fo 0 7 343 1304 0 14 Dtool_LL_pB1fo 0 0 
320 14 Dtool_LL_phQ34 0 7 346 1325 0 14 Dtool_LL_phQ34 0 1 4 this 3 1329  
321 14 Dtool_LL_paM3J 0 7 347 1325 0 14 Dtool_LL_paM3J 0 1 4 this 3 1329  
322 14 Dtool_LL_p6P0K 0 6 348 1331 0 14 Dtool_LL_p6P0K 238 ////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1329  
323 14 Dtool_LL_pITxA 0 7 349 1304 0 14 Dtool_LL_pITxA 0 0 
324 14 Dtool_LL_poFk1 0 7 352 1332 916 14 Dtool_LL_poFk1 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
325 14 Dtool_LL_pGkWK 0 7 352 1332 916 14 Dtool_LL_pGkWK 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1333  
326 14 Dtool_LL_p3msS 0 7 352 1332 916 14 Dtool_LL_p3msS 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1251  1 b 1 1251  1 c 1 1251  
327 14 Dtool_LL_pEaDA 0 6 353 1332 0 14 Dtool_LL_pEaDA 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1332  4 copy 1 1333  
328 14 Dtool_LL_phT0m 0 4 355 1197 0 14 Dtool_LL_phT0m 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1332  3 mat 1 1326  
329 14 Dtool_LL_pbQJP 0 6 356 1251 0 14 Dtool_LL_pbQJP 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1333  
330 14 Dtool_LL_pbMBU 0 6 357 1251 0 14 Dtool_LL_pbMBU 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1333  
331 14 Dtool_LL_pbo6Y 0 6 358 1251 0 14 Dtool_LL_pbo6Y 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1333  
332 14 Dtool_LL_peihv 0 7 359 1325 0 14 Dtool_LL_peihv 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1333  1 t 1 1331  
333 14 Dtool_LL_pD9H1 0 4 360 1197 0 14 Dtool_LL_pD9H1 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1333  3 out 1 1200  
334 14 Dtool_LL_pH6YY 0 4 361 1197 0 14 Dtool_LL_pH6YY 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1333  3 out 1 1200  12 indent_level 1 1195  
335 14 Dtool_LL_pcjiE 0 4 361 1197 0 14 Dtool_LL_pcjiE 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1333  3 out 1 1200  
336 14 Dtool_LL_pfMsi 0 4 362 1197 0 14 Dtool_LL_pfMsi 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1333  11 destination 1 1335  
337 14 Dtool_LL_pfdOf 0 4 363 1197 0 14 Dtool_LL_pfdOf 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1332  6 source 1 1337  
338 14 Dtool_LL_p5xmf 0 4 364 1197 0 14 Dtool_LL_p5xmf 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1333  11 destination 1 1335  
339 14 Dtool_LL_p5pnx 0 4 365 1197 0 14 Dtool_LL_p5pnx 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1332  6 source 1 1337  
340 14 Dtool_LL_pK6Cy 0 7 367 1339 930 14 Dtool_LL_pK6Cy 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
341 14 Dtool_LL_pNAVD 0 7 367 1339 930 14 Dtool_LL_pNAVD 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1340  
342 14 Dtool_LL_pHAjH 0 7 367 1339 930 14 Dtool_LL_pHAjH 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1240  1 b 1 1240  1 c 1 1240  
343 14 Dtool_LL_pL2jM 0 6 368 1339 0 14 Dtool_LL_pL2jM 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1339  4 copy 1 1340  
344 14 Dtool_LL_pE2xP 0 4 370 1197 0 14 Dtool_LL_pE2xP 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1339  3 mat 1 1342  
345 14 Dtool_LL_pF8Jf 0 6 371 1240 0 14 Dtool_LL_pF8Jf 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
346 14 Dtool_LL_pFgBk 0 6 372 1240 0 14 Dtool_LL_pFgBk 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
347 14 Dtool_LL_pFE6o 0 6 373 1240 0 14 Dtool_LL_pFE6o 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
348 14 Dtool_LL_phQkC 0 7 374 1347 0 14 Dtool_LL_phQkC 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  1 t 1 1346  
349 14 Dtool_LL_pipHF 0 4 375 1197 0 14 Dtool_LL_pipHF 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  3 out 1 1200  
350 14 Dtool_LL_p68Zo 0 4 376 1197 0 14 Dtool_LL_p68Zo 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1340  3 out 1 1200  12 indent_level 1 1195  
351 14 Dtool_LL_p5diU 0 4 376 1197 0 14 Dtool_LL_p5diU 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  3 out 1 1200  
352 14 Dtool_LL_pBYsy 0 4 377 1197 0 14 Dtool_LL_pBYsy 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  11 destination 1 1335  
353 14 Dtool_LL_p9JOv 0 4 378 1197 0 14 Dtool_LL_p9JOv 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1339  6 source 1 1337  
354 14 Dtool_LL_pbsmv 0 4 379 1197 0 14 Dtool_LL_pbsmv 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  11 destination 1 1335  
355 14 Dtool_LL_pY9nB 0 4 380 1197 0 14 Dtool_LL_pY9nB 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1339  6 source 1 1337  
356 14 Dtool_LL_p8HBL 0 7 383 1348 958 14 Dtool_LL_p8HBL 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
357 14 Dtool_LL_poS5k 0 7 383 1348 958 14 Dtool_LL_poS5k 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1322  1 b 1 1322  1 c 1 1322  
358 14 Dtool_LL_pkFDu 0 7 383 1348 958 14 Dtool_LL_pkFDu 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1349  
359 14 Dtool_LL_pKn6W 0 7 383 1348 958 14 Dtool_LL_pKn6W 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1351  5 point 1 1322  
360 14 Dtool_LL_p_VoQ 0 7 383 1348 958 14 Dtool_LL_p_VoQ 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1331  1 b 1 1331  1 c 1 1331  1 d 1 1331  
361 14 Dtool_LL_pmVHz 0 7 384 1348 958 14 Dtool_LL_pmVHz 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  3 mat 1 1207  
362 14 Dtool_LL_pwV_j 0 7 384 1348 958 14 Dtool_LL_pwV_j 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  3 mat 1 1326  
363 14 Dtool_LL_palO9 0 6 385 1348 0 14 Dtool_LL_palO9 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  3 mat 1 1326  
364 14 Dtool_LL_pXLe5 0 4 386 1197 0 14 Dtool_LL_pXLe5 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  3 mat 1 1326  
365 14 Dtool_LL_p9crq 0 7 387 1348 958 14 Dtool_LL_p9crq 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1354  
366 14 Dtool_LL_p18X3 0 7 388 1356 0 14 Dtool_LL_p18X3 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1354  
367 14 Dtool_LL_pnRGL 0 7 389 1357 0 14 Dtool_LL_pnRGL 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1354  
368 14 Dtool_LL_pnb87 0 7 390 1325 0 14 Dtool_LL_pnb87 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1354  
369 14 Dtool_LL_pDsvK 0 6 391 1331 0 14 Dtool_LL_pDsvK 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  5 point 1 1322  
370 14 Dtool_LL_pqGnr 0 7 392 1325 0 14 Dtool_LL_pqGnr 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  5 point 1 1322  
371 14 Dtool_LL_py_b8 0 4 393 1197 0 14 Dtool_LL_py_b8 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
372 14 Dtool_LL_p2XGL 0 6 394 1318 0 14 Dtool_LL_p2XGL 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1354  18 intersection_point 1 1325  2 p1 1 1322  2 p2 1 1322  
373 14 Dtool_LL_p4dcr 0 6 395 1318 0 14 Dtool_LL_p4dcr 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1354  4 from 1 1325  5 delta 1 1357  5 other 1 1354  
374 14 Dtool_LL_p6d8d 0 4 397 1197 0 14 Dtool_LL_p6d8d 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  3 out 1 1200  
375 14 Dtool_LL_pvP_l 0 4 398 1197 0 14 Dtool_LL_pvP_l 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1354  3 out 1 1200  12 indent_level 1 1195  
376 14 Dtool_LL_pHDHy 0 4 398 1197 0 14 Dtool_LL_pHDHy 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1354  3 out 1 1200  
377 14 Dtool_LL_psXRI 0 7 402 1358 975 14 Dtool_LL_psXRI 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
378 14 Dtool_LL_pySWh 0 7 402 1358 975 14 Dtool_LL_pySWh 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1359  1 b 1 1359  1 c 1 1359  
379 14 Dtool_LL_p01QE 0 7 402 1358 975 14 Dtool_LL_p01QE 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1361  
380 14 Dtool_LL_pa0EO 0 7 402 1358 975 14 Dtool_LL_pa0EO 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1363  5 point 1 1359  
381 14 Dtool_LL_pc0U2 0 7 402 1358 975 14 Dtool_LL_pc0U2 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1346  1 b 1 1346  1 c 1 1346  1 d 1 1346  
382 14 Dtool_LL_pMPq4 0 7 403 1358 975 14 Dtool_LL_pMPq4 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  3 mat 1 1191  
383 14 Dtool_LL_pGPip 0 7 403 1358 975 14 Dtool_LL_pGPip 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  3 mat 1 1342  
384 14 Dtool_LL_pmvt6 0 6 404 1358 0 14 Dtool_LL_pmvt6 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1358  3 mat 1 1342  
385 14 Dtool_LL_pfeCb 0 4 405 1197 0 14 Dtool_LL_pfeCb 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1358  3 mat 1 1342  
386 14 Dtool_LL_p9uOo 0 7 406 1358 975 14 Dtool_LL_p9uOo 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
387 14 Dtool_LL_p1q70 0 7 407 1368 0 14 Dtool_LL_p1q70 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
388 14 Dtool_LL_pnDqI 0 7 408 1369 0 14 Dtool_LL_pnDqI 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
389 14 Dtool_LL_pnJg5 0 7 409 1347 0 14 Dtool_LL_pnJg5 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
390 14 Dtool_LL_pDA3F 0 6 410 1346 0 14 Dtool_LL_pDA3F 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  5 point 1 1359  
391 14 Dtool_LL_p4sJp 0 7 411 1347 0 14 Dtool_LL_p4sJp 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  5 point 1 1359  
392 14 Dtool_LL_pyM_5 0 4 412 1197 0 14 Dtool_LL_pyM_5 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1358  
393 14 Dtool_LL_p53GC 0 6 413 1318 0 14 Dtool_LL_p53GC 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1366  18 intersection_point 1 1347  2 p1 1 1359  2 p2 1 1359  
394 14 Dtool_LL_pymJY 0 6 414 1318 0 14 Dtool_LL_pymJY 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1366  4 from 1 1347  5 delta 1 1369  5 other 1 1366  
395 14 Dtool_LL_p6Tgb 0 4 416 1197 0 14 Dtool_LL_p6Tgb 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  3 out 1 1200  
396 14 Dtool_LL_pvBij 0 4 417 1197 0 14 Dtool_LL_pvBij 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1366  3 out 1 1200  12 indent_level 1 1195  
397 14 Dtool_LL_pHRrv 0 4 417 1197 0 14 Dtool_LL_pHRrv 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  3 out 1 1200  
398 14 Dtool_LL_pC_T2 0 7 420 1370 985 14 Dtool_LL_pC_T2 742 // Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
//////////////////////////////////////////////////////////////////// 0 
399 14 Dtool_LL_pUDkp 0 7 420 1370 985 14 Dtool_LL_pUDkp 257 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
//////////////////////////////////////////////////////////////////// 2 3 min 1 1322  3 max 1 1322  
400 14 Dtool_LL_p3R23 0 4 421 1197 0 14 Dtool_LL_p3R23 0 2 4 this 3 1370  4 size 1 1190  
401 14 Dtool_LL_pCqx3 0 6 424 1195 0 14 Dtool_LL_pCqx3 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1371  
402 14 Dtool_LL_poi08 0 7 425 1325 0 14 Dtool_LL_poi08 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1371  1 n 1 1195  
403 14 Dtool_LL_pyaSV 0 6 426 1195 0 14 Dtool_LL_pyaSV 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1371  
404 14 Dtool_LL_pjuTV 0 7 427 1348 958 14 Dtool_LL_pjuTV 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1371  1 n 1 1195  
405 14 Dtool_LL_pAHSK 0 7 428 1304 0 14 Dtool_LL_pAHSK 0 0 
406 14 Dtool_LL_pnyr_ 0 7 431 1373 993 14 Dtool_LL_pnyr_ 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
407 14 Dtool_LL_paWHx 0 4 432 1197 0 14 Dtool_LL_paWHx 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1373  
408 14 Dtool_LL_p5EUb 0 4 432 1197 0 14 Dtool_LL_p5EUb 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1373  1 l 1 1331  1 r 1 1331  1 t 1 1331  1 b 1 1331  
409 14 Dtool_LL_pQfBG 0 4 433 1197 0 14 Dtool_LL_pQfBG 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1373  5 fnear 1 1331  4 ffar 1 1331  
410 14 Dtool_LL_pR5m5 0 4 433 1197 0 14 Dtool_LL_pR5m5 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1373  5 fnear 1 1331  4 ffar 1 1331  1 l 1 1331  1 r 1 1331  1 t 1 1331  1 b 1 1331  
411 14 Dtool_LL_pnUSt 0 4 434 1197 0 14 Dtool_LL_pnUSt 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1373  4 xfov 1 1331  6 aspect 1 1331  5 fnear 1 1331  4 ffar 1 1331  
412 14 Dtool_LL_pxcU1 0 4 435 1197 0 14 Dtool_LL_pxcU1 0 5 4 this 3 1373  4 yfov 1 1331  6 aspect 1 1331  5 fnear 1 1331  4 ffar 1 1331  
413 14 Dtool_LL_pH1Ii 0 4 436 1197 0 14 Dtool_LL_pH1Ii 0 5 4 this 3 1373  4 xfov 1 1331  4 yfov 1 1331  5 fnear 1 1331  4 ffar 1 1331  
414 14 Dtool_LL_p8tL7 0 7 440 1374 1001 14 Dtool_LL_p8tL7 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
415 14 Dtool_LL_pzWnt 0 4 441 1197 0 14 Dtool_LL_pzWnt 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1374  
416 14 Dtool_LL_pm4tc 0 4 441 1197 0 14 Dtool_LL_pm4tc 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1374  1 l 1 1346  1 r 1 1346  1 t 1 1346  1 b 1 1346  
417 14 Dtool_LL_pOWs2 0 4 442 1197 0 14 Dtool_LL_pOWs2 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1374  5 fnear 1 1346  4 ffar 1 1346  
418 14 Dtool_LL_pylfV 0 4 442 1197 0 14 Dtool_LL_pylfV 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1374  5 fnear 1 1346  4 ffar 1 1346  1 l 1 1346  1 r 1 1346  1 t 1 1346  1 b 1 1346  
419 14 Dtool_LL_prCzZ 0 4 443 1197 0 14 Dtool_LL_prCzZ 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1374  4 xfov 1 1346  6 aspect 1 1346  5 fnear 1 1346  4 ffar 1 1346  
420 14 Dtool_LL_pxe0h 0 4 444 1197 0 14 Dtool_LL_pxe0h 0 5 4 this 3 1374  4 yfov 1 1346  6 aspect 1 1346  5 fnear 1 1346  4 ffar 1 1346  
421 14 Dtool_LL_pUNoW 0 4 445 1197 0 14 Dtool_LL_pUNoW 0 5 4 this 3 1374  4 xfov 1 1346  4 yfov 1 1346  5 fnear 1 1346  4 ffar 1 1346  
422 14 Dtool_LL_pXsrR 0 7 449 1378 1008 14 Dtool_LL_pXsrR 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 7 frustum 1 1375  8 is_ortho 1 1318  2 cs 1 1377  
423 14 Dtool_LL_pG6CF 0 7 449 1378 1008 14 Dtool_LL_pG6CF 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 7 frustum 1 1375  8 is_ortho 1 1318  
424 14 Dtool_LL_praJQ 0 7 449 1378 1008 14 Dtool_LL_praJQ 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 3 fll 1 1322  3 flr 1 1322  3 fur 1 1322  3 ful 1 1322  3 nll 1 1322  3 nlr 1 1322  3 nur 1 1322  3 nul 1 1322  
425 14 Dtool_LL_pjxzO 0 6 450 1195 0 14 Dtool_LL_pjxzO 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
426 14 Dtool_LL_pI7ir 0 7 451 1325 0 14 Dtool_LL_pI7ir 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  1 n 1 1195  
427 14 Dtool_LL_pcorK 0 6 452 1195 0 14 Dtool_LL_pcorK 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
428 14 Dtool_LL_pSYfp 0 7 453 1348 958 14 Dtool_LL_pSYfp 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  1 n 1 1195  
429 14 Dtool_LL_p6Mjt 0 7 454 1304 0 14 Dtool_LL_p6Mjt 0 0 
430 14 Dtool_LL_pAR_R 0 7 457 1381 1016 14 Dtool_LL_pAR_R 225 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 1 a 1 1322  1 b 1 1322  
431 14 Dtool_LL_ptKOi 0 4 458 1197 0 14 Dtool_LL_ptKOi 0 2 4 this 3 1381  4 size 1 1190  
432 14 Dtool_LL_pRIF_ 0 6 461 1322 0 14 Dtool_LL_pRIF_ 271 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1382  
433 14 Dtool_LL_pI2G_ 0 7 462 1325 0 14 Dtool_LL_pI2G_ 272 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1382  
434 14 Dtool_LL_pmcUv 0 7 463 1304 0 14 Dtool_LL_pmcUv 0 0 
435 14 Dtool_LL_pwCTi 0 7 466 1384 1023 14 Dtool_LL_pwCTi 794 // Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
//////////////////////////////////////////////////////////////////// 0 
436 14 Dtool_LL_pjRVc 0 7 466 1384 1023 14 Dtool_LL_pjRVc 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1354  
437 14 Dtool_LL_p7Vwa 0 4 467 1197 0 14 Dtool_LL_p7Vwa 0 2 4 this 3 1384  4 size 1 1190  
438 14 Dtool_LL_pMOJy 0 6 470 1354 0 14 Dtool_LL_pMOJy 224 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1385  
439 14 Dtool_LL_pPW_8 0 7 471 1304 0 14 Dtool_LL_pPW_8 0 0 
440 14 Dtool_LL_pqeoF 0 7 474 1387 1031 14 Dtool_LL_pqeoF 744 // Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
//////////////////////////////////////////////////////////////////// 0 
441 14 Dtool_LL_pX3ZH 0 7 474 1387 1031 14 Dtool_LL_pX3ZH 256 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
//////////////////////////////////////////////////////////////////// 2 6 center 1 1322  6 radius 1 1331  
442 14 Dtool_LL_pXC2T 0 4 475 1197 0 14 Dtool_LL_pXC2T 0 2 4 this 3 1387  4 size 1 1190  
443 14 Dtool_LL_pzKph 0 7 478 1325 0 14 Dtool_LL_pzKph 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1388  
444 14 Dtool_LL_pyYsx 0 6 479 1331 0 14 Dtool_LL_pyYsx 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1388  
445 14 Dtool_LL_pwySa 0 7 480 1304 0 14 Dtool_LL_pwySa 0 0 
446 14 Dtool_LL_paiLm 0 7 483 1390 1041 14 Dtool_LL_paiLm 774 // Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
//////////////////////////////////////////////////////////////////// 0 
447 14 Dtool_LL_pHGaj 0 4 484 1197 0 14 Dtool_LL_pHGaj 0 2 4 this 3 1390  4 size 1 1190  
448 14 Dtool_LL_pxGye 0 6 487 1195 0 14 Dtool_LL_pxGye 299 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1391  
449 14 Dtool_LL_pmAog 0 7 488 1320 0 14 Dtool_LL_pmAog 287 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1391  1 n 1 1195  
450 14 Dtool_LL_pCAAK 0 4 489 1197 0 14 Dtool_LL_pCAAK 283 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
451 14 Dtool_LL_p_v4Q 0 4 490 1197 0 14 Dtool_LL_p_v4Q 693 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1390  9 component 1 1320  
452 14 Dtool_LL_pfzt2 0 7 491 1304 0 14 Dtool_LL_pfzt2 0 0 
453 14 Dtool_LL_pllv3 0 7 496 1394 1046 14 Dtool_LL_pllv3 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1393  
454 14 Dtool_LL_pBSDv 0 6 497 1393 0 14 Dtool_LL_pBSDv 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1394  
455 14 Dtool_LL_pRdBj 0 7 500 1395 1049 14 Dtool_LL_pRdBj 721 // Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
456 14 Dtool_LL_pbPVO 0 7 501 1304 0 14 Dtool_LL_pbPVO 0 0 
457 14 Dtool_LL_pQPnm 0 7 504 1396 1060 14 Dtool_LL_pQPnm 753 // Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
//////////////////////////////////////////////////////////////////// 0 
458 14 Dtool_LL_piBQE 0 4 505 1197 0 14 Dtool_LL_piBQE 0 2 4 this 3 1396  4 size 1 1190  
459 14 Dtool_LL_pjE8H 0 6 508 1195 0 14 Dtool_LL_pjE8H 285 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1397  
460 14 Dtool_LL_pSxAQ 0 7 509 1320 0 14 Dtool_LL_pSxAQ 273 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1397  1 n 1 1195  
461 14 Dtool_LL_pWCpg 0 4 510 1197 0 14 Dtool_LL_pWCpg 276 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1396  
462 14 Dtool_LL_pTdHH 0 4 511 1197 0 14 Dtool_LL_pTdHH 686 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1396  9 component 1 1320  
463 14 Dtool_LL_pWSy_ 0 4 512 1197 0 14 Dtool_LL_pWSy_ 347 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1396  6 volume 1 1315  
464 14 Dtool_LL_pkuIR 0 7 513 1304 0 14 Dtool_LL_pkuIR 0 0 
465 14 Dtool_LL_pOl4j 0 7 516 1401 1068 14 Dtool_LL_pOl4j 225 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1399  
466 14 Dtool_LL_p_45c 0 7 516 1401 1068 14 Dtool_LL_p_45c 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 1 4 seed 1 1393  
467 14 Dtool_LL_pYb6h 0 7 516 1401 1068 14 Dtool_LL_pYb6h 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 0 
468 14 Dtool_LL_pMMRU 0 6 517 1401 0 14 Dtool_LL_pMMRU 233 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  4 copy 1 1399  
469 14 Dtool_LL_puMD_ 0 6 518 1195 0 14 Dtool_LL_puMD_ 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  5 range 1 1195  
470 14 Dtool_LL_pbxNX 0 6 519 1346 0 14 Dtool_LL_pbxNX 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  5 range 1 1346  
471 14 Dtool_LL_pod85 0 6 520 1346 0 14 Dtool_LL_pod85 274 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
472 14 Dtool_LL_ps5Z3 0 6 521 1393 0 14 Dtool_LL_ps5Z3 313 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
//////////////////////////////////////////////////////////////////// 0 
473 14 Dtool_LL_p3bLi 0 6 522 1393 0 14 Dtool_LL_p3bLi 363 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
474 14 Dtool_LL_pB_ig 0 6 525 1393 0 14 Dtool_LL_pB_ig 368 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1402  
475 14 Dtool_LL_pv6cm 0 7 528 1403 1076 14 Dtool_LL_pv6cm 872 // Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
476 14 Dtool_LL_psfkp 0 7 528 1403 1076 14 Dtool_LL_psfkp 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1404  
477 14 Dtool_LL_pGeIA 0 7 528 1403 1076 14 Dtool_LL_pGeIA 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1346  2 sy 1 1346  10 table_size 1 1195  4 seed 1 1393  
478 14 Dtool_LL_p9P5z 0 7 528 1403 1076 14 Dtool_LL_p9P5z 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1346  2 sy 1 1346  10 table_size 1 1195  
479 14 Dtool_LL_pCOIG 0 7 528 1403 1076 14 Dtool_LL_pCOIG 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1346  2 sy 1 1346  
480 14 Dtool_LL_pM_IZ 0 6 529 1403 0 14 Dtool_LL_pM_IZ 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  4 copy 1 1404  
481 14 Dtool_LL_pg7Cf 0 4 530 1197 0 14 Dtool_LL_pg7Cf 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 scale 1 1218  
482 14 Dtool_LL_pGuCP 0 4 530 1197 0 14 Dtool_LL_pGuCP 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 scale 1 1229  
483 14 Dtool_LL_pBSzQ 0 4 530 1197 0 14 Dtool_LL_pBSzQ 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 scale 1 1346  
484 14 Dtool_LL_pgNGr 0 4 530 1197 0 14 Dtool_LL_pgNGr 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1403  2 sx 1 1346  2 sy 1 1346  
485 14 Dtool_LL_p5PlC 0 6 531 1346 0 14 Dtool_LL_p5PlC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  5 value 1 1218  
486 14 Dtool_LL_pdIqC 0 6 531 1331 0 14 Dtool_LL_pdIqC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  5 value 1 1229  
487 14 Dtool_LL_pPCI3 0 6 531 1346 0 14 Dtool_LL_pPCI3 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1404  1 x 1 1346  1 y 1 1346  
488 14 Dtool_LL_pJm1a 0 6 532 1346 0 14 Dtool_LL_pJm1a 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  5 value 1 1218  
489 14 Dtool_LL_pJCuf 0 6 532 1331 0 14 Dtool_LL_pJCuf 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  5 value 1 1229  
490 14 Dtool_LL_pEAH_ 0 6 532 1346 0 14 Dtool_LL_pEAH_ 270 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1404  1 x 1 1346  1 y 1 1346  
491 14 Dtool_LL_pPLfp 0 7 535 1406 1082 14 Dtool_LL_pPLfp 872 // Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
492 14 Dtool_LL_pukoc 0 7 535 1406 1082 14 Dtool_LL_pukoc 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1407  
493 14 Dtool_LL_p58i2 0 7 535 1406 1082 14 Dtool_LL_p58i2 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 table_size 1 1195  4 seed 1 1393  
494 14 Dtool_LL_pXjDy 0 7 535 1406 1082 14 Dtool_LL_pXjDy 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 table_size 1 1195  
495 14 Dtool_LL_pBU40 0 7 535 1406 1082 14 Dtool_LL_pBU40 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  
496 14 Dtool_LL_pNxrp 0 6 536 1406 0 14 Dtool_LL_pNxrp 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1406  4 copy 1 1407  
497 14 Dtool_LL_p0JOD 0 4 537 1197 0 14 Dtool_LL_p0JOD 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1406  5 scale 1 1240  
498 14 Dtool_LL_prdOz 0 4 537 1197 0 14 Dtool_LL_prdOz 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1406  5 scale 1 1251  
499 14 Dtool_LL_pBcPT 0 4 537 1197 0 14 Dtool_LL_pBcPT 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1406  5 scale 1 1346  
500 14 Dtool_LL_pTM4f 0 4 537 1197 0 14 Dtool_LL_pTM4f 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1406  2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  
501 14 Dtool_LL_pxYBh 0 6 538 1346 0 14 Dtool_LL_pxYBh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1407  5 value 1 1240  
502 14 Dtool_LL_pVTGh 0 6 538 1331 0 14 Dtool_LL_pVTGh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1407  5 value 1 1251  
503 14 Dtool_LL_psWEW 0 6 538 1346 0 14 Dtool_LL_psWEW 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1407  1 x 1 1346  1 y 1 1346  1 z 1 1346  
504 14 Dtool_LL_p18Wd 0 6 539 1346 0 14 Dtool_LL_p18Wd 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1407  5 value 1 1240  
505 14 Dtool_LL_p1YPi 0 6 539 1331 0 14 Dtool_LL_p1YPi 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1407  5 value 1 1251  
506 14 Dtool_LL_p_joi 0 6 539 1346 0 14 Dtool_LL_p_joi 272 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1407  1 x 1 1346  1 y 1 1346  1 z 1 1346  
507 14 Dtool_LL_pATvG 0 7 543 1409 1090 14 Dtool_LL_pATvG 876 // Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
508 14 Dtool_LL_pOBoG 0 7 543 1409 1090 14 Dtool_LL_pOBoG 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1410  
509 14 Dtool_LL_pJSRe 0 7 543 1409 1090 14 Dtool_LL_pJSRe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1346  2 sy 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  10 table_size 1 1195  4 seed 1 1393  
510 14 Dtool_LL_p1q92 0 7 543 1409 1090 14 Dtool_LL_p1q92 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1346  2 sy 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  10 table_size 1 1195  
511 14 Dtool_LL_ppveW 0 7 543 1409 1090 14 Dtool_LL_ppveW 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1346  2 sy 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  
512 14 Dtool_LL_pJ86_ 0 7 543 1409 1090 14 Dtool_LL_pJ86_ 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1346  2 sy 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  
513 14 Dtool_LL_p9SEq 0 7 543 1409 1090 14 Dtool_LL_p9SEq 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1346  2 sy 1 1346  10 num_levels 1 1195  
514 14 Dtool_LL_p8Mpe 0 7 543 1409 1090 14 Dtool_LL_p8Mpe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1346  2 sy 1 1346  
515 14 Dtool_LL_puaKK 0 6 544 1409 0 14 Dtool_LL_puaKK 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  4 copy 1 1410  
516 14 Dtool_LL_pjEp3 0 4 545 1197 0 14 Dtool_LL_pjEp3 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1409  5 level 1 1404  3 amp 1 1346  
517 14 Dtool_LL_p_n9S 0 4 545 1197 0 14 Dtool_LL_p_n9S 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 level 1 1404  
518 14 Dtool_LL_pc8sO 0 4 546 1197 0 14 Dtool_LL_pc8sO 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
519 14 Dtool_LL_pZyC_ 0 6 547 1346 0 14 Dtool_LL_pZyC_ 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 value 1 1218  
520 14 Dtool_LL_pcyQb 0 6 547 1331 0 14 Dtool_LL_pcyQb 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 value 1 1229  
521 14 Dtool_LL_p1thz 0 6 547 1346 0 14 Dtool_LL_p1thz 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1409  1 x 1 1346  1 y 1 1346  
522 14 Dtool_LL_pgny9 0 6 548 1346 0 14 Dtool_LL_pgny9 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 value 1 1218  
523 14 Dtool_LL_pHqyL 0 6 548 1331 0 14 Dtool_LL_pHqyL 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 value 1 1229  
524 14 Dtool_LL_p0TSf 0 6 548 1346 0 14 Dtool_LL_p0TSf 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1409  1 x 1 1346  1 y 1 1346  
525 14 Dtool_LL_p_B5N 0 7 551 1412 1097 14 Dtool_LL_p_B5N 876 // Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
526 14 Dtool_LL_pkcOQ 0 7 551 1412 1097 14 Dtool_LL_pkcOQ 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1413  
527 14 Dtool_LL_pqAFA 0 7 551 1412 1097 14 Dtool_LL_pqAFA 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 8 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  10 table_size 1 1195  4 seed 1 1393  
528 14 Dtool_LL_pJa_5 0 7 551 1412 1097 14 Dtool_LL_pJa_5 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  10 table_size 1 1195  
529 14 Dtool_LL_pbcHj 0 7 551 1412 1097 14 Dtool_LL_pbcHj 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  9 amp_scale 1 1346  
530 14 Dtool_LL_pD8iG 0 7 551 1412 1097 14 Dtool_LL_pD8iG 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 num_levels 1 1195  12 scale_factor 1 1346  
531 14 Dtool_LL_pfg_v 0 7 551 1412 1097 14 Dtool_LL_pfg_v 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  10 num_levels 1 1195  
532 14 Dtool_LL_pV0sw 0 7 551 1412 1097 14 Dtool_LL_pV0sw 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1346  2 sy 1 1346  2 sz 1 1346  
533 14 Dtool_LL_p8rsk 0 6 552 1412 0 14 Dtool_LL_p8rsk 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  4 copy 1 1413  
534 14 Dtool_LL_pOHpF 0 4 553 1197 0 14 Dtool_LL_pOHpF 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1412  5 level 1 1407  3 amp 1 1346  
535 14 Dtool_LL_pbp9g 0 4 553 1197 0 14 Dtool_LL_pbp9g 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  5 level 1 1407  
536 14 Dtool_LL_pu9sV 0 4 554 1197 0 14 Dtool_LL_pu9sV 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1412  
537 14 Dtool_LL_pIjeI 0 6 555 1346 0 14 Dtool_LL_pIjeI 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  5 value 1 1240  
538 14 Dtool_LL_pKjsk 0 6 555 1331 0 14 Dtool_LL_pKjsk 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  5 value 1 1251  
539 14 Dtool_LL_p9XOm 0 6 555 1346 0 14 Dtool_LL_p9XOm 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1412  1 x 1 1346  1 y 1 1346  1 z 1 1346  
540 14 Dtool_LL_pTpAh 0 6 556 1346 0 14 Dtool_LL_pTpAh 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  5 value 1 1240  
541 14 Dtool_LL_p3rAv 0 6 556 1331 0 14 Dtool_LL_p3rAv 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1412  5 value 1 1251  
542 14 Dtool_LL_przlU 0 6 556 1346 0 14 Dtool_LL_przlU 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1412  1 x 1 1346  1 y 1 1346  1 z 1 1346  
543 14 Dtool_LL_pFBK1 0 7 559 1415 1113 14 Dtool_LL_pFBK1 225 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
544 14 Dtool_LL_pVJYT 0 4 560 1197 0 14 Dtool_LL_pVJYT 337 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1415  
545 14 Dtool_LL_pgPrY 0 6 561 1195 0 14 Dtool_LL_pgPrY 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1415  5 point 1 1416  
546 14 Dtool_LL_p7U2X 0 6 561 1195 0 14 Dtool_LL_p7U2X 800 // Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1415  1 x 1 1346  1 y 1 1346  
547 14 Dtool_LL_pihH8 0 6 562 1195 0 14 Dtool_LL_pihH8 545 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1419  
548 14 Dtool_LL_pcI6X 0 6 563 1416 0 14 Dtool_LL_pcI6X 247 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1419  1 n 1 1195  
549 14 Dtool_LL_pyAY7 0 4 564 1197 0 14 Dtool_LL_pyAY7 342 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1415  
550 14 Dtool_LL_plJzv 0 4 565 1197 0 14 Dtool_LL_plJzv 645 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1415  5 index 1 1195  
551 14 Dtool_LL_pyuMa 0 6 566 1318 0 14 Dtool_LL_pyuMa 394 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1419  
552 14 Dtool_LL_pcIaQ 0 4 567 1197 0 14 Dtool_LL_pcIaQ 308 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1415  
553 14 Dtool_LL_pK0o5 0 4 568 1197 0 14 Dtool_LL_pK0o5 571 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1415  5 index 1 1195  
554 14 Dtool_LL_pDWnH 0 4 569 1197 0 14 Dtool_LL_pDWnH 439 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1415  
555 14 Dtool_LL_pH7LS 0 6 570 1195 0 14 Dtool_LL_pH7LS 328 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1419  
556 14 Dtool_LL_p6J8i 0 6 571 1195 0 14 Dtool_LL_p6J8i 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1419  1 n 1 1195  
557 14 Dtool_LL_pyO8_ 0 6 572 1195 0 14 Dtool_LL_pyO8_ 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1419  1 n 1 1195  
558 14 Dtool_LL_prD8a 0 6 573 1195 0 14 Dtool_LL_prD8a 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1419  1 n 1 1195  
559 14 Dtool_LL_pyYd4 0 4 493 1197 0 14 Dtool_LL_pyYd4 0 3 3 mat 1 1421  3 fwd 1 1363  2 cs 1 1377  
560 14 Dtool_LL_pmjSo 0 4 493 1197 0 14 Dtool_LL_pmjSo 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1421  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
561 14 Dtool_LL_pv5m2 0 4 493 1197 0 14 Dtool_LL_pv5m2 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1421  3 fwd 1 1363  2 up 1 1363  
562 14 Dtool_LL_pTJmh 0 4 493 1197 0 14 Dtool_LL_pTJmh 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1421  3 fwd 1 1363  
563 14 Dtool_LL_p5qVz 0 4 493 1197 0 14 Dtool_LL_p5qVz 0 3 3 mat 1 1422  3 fwd 1 1351  2 cs 1 1377  
564 14 Dtool_LL_pstmb 0 4 493 1197 0 14 Dtool_LL_pstmb 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1422  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
565 14 Dtool_LL_p5P9p 0 4 493 1197 0 14 Dtool_LL_p5P9p 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1422  3 fwd 1 1351  2 up 1 1351  
566 14 Dtool_LL_pucec 0 4 493 1197 0 14 Dtool_LL_pucec 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1422  3 fwd 1 1351  
567 14 Dtool_LL_py0V9 0 4 493 1197 0 14 Dtool_LL_py0V9 0 3 3 mat 1 1368  3 fwd 1 1363  2 cs 1 1377  
568 14 Dtool_LL_pm_Kt 0 4 493 1197 0 14 Dtool_LL_pm_Kt 0 4 3 mat 1 1368  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
569 14 Dtool_LL_pvdh7 0 4 493 1197 0 14 Dtool_LL_pvdh7 0 3 3 mat 1 1368  3 fwd 1 1363  2 up 1 1363  
570 14 Dtool_LL_pTtem 0 4 493 1197 0 14 Dtool_LL_pTtem 0 2 3 mat 1 1368  3 fwd 1 1363  
571 14 Dtool_LL_p5GM4 0 4 493 1197 0 14 Dtool_LL_p5GM4 0 3 3 mat 1 1356  3 fwd 1 1351  2 cs 1 1377  
572 14 Dtool_LL_psJfg 0 4 493 1197 0 14 Dtool_LL_psJfg 0 4 3 mat 1 1356  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
573 14 Dtool_LL_p5j1u 0 4 493 1197 0 14 Dtool_LL_p5j1u 0 3 3 mat 1 1356  3 fwd 1 1351  2 up 1 1351  
574 14 Dtool_LL_puwWh 0 4 493 1197 0 14 Dtool_LL_puwWh 0 2 3 mat 1 1356  3 fwd 1 1351  
575 14 Dtool_LL_pTxQm 0 4 493 1197 0 14 Dtool_LL_pTxQm 0 3 4 quat 1 1423  3 fwd 1 1363  2 cs 1 1377  
576 14 Dtool_LL_pd9Wi 0 4 493 1197 0 14 Dtool_LL_pd9Wi 0 4 4 quat 1 1423  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
577 14 Dtool_LL_piZq8 0 4 493 1197 0 14 Dtool_LL_piZq8 0 3 4 quat 1 1423  3 fwd 1 1363  2 up 1 1363  
578 14 Dtool_LL_p3Jjx 0 4 493 1197 0 14 Dtool_LL_p3Jjx 0 2 4 quat 1 1423  3 fwd 1 1363  
579 14 Dtool_LL_pRh3W 0 4 493 1197 0 14 Dtool_LL_pRh3W 0 3 4 quat 1 1425  3 fwd 1 1351  2 cs 1 1377  
580 14 Dtool_LL_pjnkT 0 4 493 1197 0 14 Dtool_LL_pjnkT 0 4 4 quat 1 1425  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
581 14 Dtool_LL_pHl5t 0 4 493 1197 0 14 Dtool_LL_pHl5t 0 3 4 quat 1 1425  3 fwd 1 1351  2 up 1 1351  
582 14 Dtool_LL_p1YKi 0 4 493 1197 0 14 Dtool_LL_p1YKi 0 2 4 quat 1 1425  3 fwd 1 1351  
583 14 Dtool_LL_p2iJ6 0 4 494 1197 0 14 Dtool_LL_p2iJ6 0 3 3 mat 1 1421  3 fwd 1 1363  2 cs 1 1377  
584 14 Dtool_LL_pe3n7 0 4 494 1197 0 14 Dtool_LL_pe3n7 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1421  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
585 14 Dtool_LL_pYQHg 0 4 494 1197 0 14 Dtool_LL_pYQHg 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1421  3 fwd 1 1363  2 up 1 1363  
586 14 Dtool_LL_phTgt 0 4 494 1197 0 14 Dtool_LL_phTgt 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1421  3 fwd 1 1363  
587 14 Dtool_LL_pTR_D 0 4 494 1197 0 14 Dtool_LL_pTR_D 0 3 3 mat 1 1422  3 fwd 1 1351  2 cs 1 1377  
588 14 Dtool_LL_pzsOP 0 4 494 1197 0 14 Dtool_LL_pzsOP 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1422  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
589 14 Dtool_LL_p04uz 0 4 494 1197 0 14 Dtool_LL_p04uz 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1422  3 fwd 1 1351  2 up 1 1351  
590 14 Dtool_LL_pNDW3 0 4 494 1197 0 14 Dtool_LL_pNDW3 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1422  3 fwd 1 1351  
591 14 Dtool_LL_p_RT6 0 4 494 1197 0 14 Dtool_LL_p_RT6 0 3 3 mat 1 1368  3 fwd 1 1363  2 cs 1 1377  
592 14 Dtool_LL_pWkx7 0 4 494 1197 0 14 Dtool_LL_pWkx7 0 4 3 mat 1 1368  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
593 14 Dtool_LL_pQhRg 0 4 494 1197 0 14 Dtool_LL_pQhRg 0 3 3 mat 1 1368  3 fwd 1 1363  2 up 1 1363  
594 14 Dtool_LL_ppCqt 0 4 494 1197 0 14 Dtool_LL_ppCqt 0 2 3 mat 1 1368  3 fwd 1 1363  
595 14 Dtool_LL_pbAJE 0 4 494 1197 0 14 Dtool_LL_pbAJE 0 3 3 mat 1 1356  3 fwd 1 1351  2 cs 1 1377  
596 14 Dtool_LL_pLcXP 0 4 494 1197 0 14 Dtool_LL_pLcXP 0 4 3 mat 1 1356  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
597 14 Dtool_LL_pMJ3z 0 4 494 1197 0 14 Dtool_LL_pMJ3z 0 3 3 mat 1 1356  3 fwd 1 1351  2 up 1 1351  
598 14 Dtool_LL_p1yf3 0 4 494 1197 0 14 Dtool_LL_p1yf3 0 2 3 mat 1 1356  3 fwd 1 1351  
599 14 Dtool_LL_pdgkh 0 4 494 1197 0 14 Dtool_LL_pdgkh 0 3 4 quat 1 1423  3 fwd 1 1363  2 cs 1 1377  
600 14 Dtool_LL_pq4at 0 4 494 1197 0 14 Dtool_LL_pq4at 0 4 4 quat 1 1423  3 fwd 1 1363  2 up 1 1363  2 cs 1 1377  
601 14 Dtool_LL_p6OSa 0 4 494 1197 0 14 Dtool_LL_p6OSa 0 3 4 quat 1 1423  3 fwd 1 1363  2 up 1 1363  
602 14 Dtool_LL_pmF_T 0 4 494 1197 0 14 Dtool_LL_pmF_T 0 2 4 quat 1 1423  3 fwd 1 1363  
603 14 Dtool_LL_pPvHl 0 4 494 1197 0 14 Dtool_LL_pPvHl 0 3 4 quat 1 1425  3 fwd 1 1351  2 cs 1 1377  
604 14 Dtool_LL_p_f8w 0 4 494 1197 0 14 Dtool_LL_p_f8w 0 4 4 quat 1 1425  3 fwd 1 1351  2 up 1 1351  2 cs 1 1377  
605 14 Dtool_LL_pxh1d 0 4 494 1197 0 14 Dtool_LL_pxh1d 0 3 4 quat 1 1425  3 fwd 1 1351  2 up 1 1351  
606 14 Dtool_LL_pGIgX 0 4 494 1197 0 14 Dtool_LL_pGIgX 0 2 4 quat 1 1425  3 fwd 1 1351  
607 14 Dtool_LL_p8zF6 0 4 541 1197 0 14 Dtool_LL_p8zF6 0 3 3 mat 1 1421  1 a 1 1363  1 b 1 1363  
608 14 Dtool_LL_p6uMk 0 4 541 1197 0 14 Dtool_LL_p6uMk 0 3 3 mat 1 1422  1 a 1 1351  1 b 1 1351  
609 14 Dtool_LL_pxzTW 0 4 541 1197 0 14 Dtool_LL_pxzTW 0 3 3 mat 1 1368  1 a 1 1363  1 b 1 1363  
610 14 Dtool_LL_p_uaA 0 4 541 1197 0 14 Dtool_LL_p_uaA 0 3 3 mat 1 1356  1 a 1 1351  1 b 1 1351  
313
1114 14 CPTA_LMatrix3d 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 614 622 0 7 615 616 617 618 619 620 621 0 0 1 0 1115 0 0 0 0 0

1115 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 613 0 0 0 0 1 0 1116 0 0 0 0 0

1116 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 611 612 0 0 1 0 1117 0 0 0 0 0

1117 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1118 14 CPTA_LMatrix3f 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 626 634 0 7 627 628 629 630 631 632 633 0 0 1 0 1119 0 0 0 0 0

1119 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 625 0 0 0 0 1 0 1120 0 0 0 0 0

1120 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 623 624 0 0 1 0 1117 0 0 0 0 0

1121 15 CPTA_LVecBase2d 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 638 646 0 7 639 640 641 642 643 644 645 0 0 1 0 1122 0 0 0 0 0

1122 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 637 0 0 0 0 1 0 1123 0 0 0 0 0

1123 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 635 636 0 0 1 0 1117 0 0 0 0 0

1124 15 CPTA_LVecBase2f 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 650 658 0 7 651 652 653 654 655 656 657 0 0 1 0 1125 0 0 0 0 0

1125 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 649 0 0 0 0 1 0 1126 0 0 0 0 0

1126 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 647 648 0 0 1 0 1117 0 0 0 0 0

1127 15 CPTA_LVecBase3d 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 662 670 0 7 663 664 665 666 667 668 669 0 0 1 0 1128 0 0 0 0 0

1128 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 661 0 0 0 0 1 0 1129 0 0 0 0 0

1129 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 659 660 0 0 1 0 1117 0 0 0 0 0

1130 15 CPTA_LVecBase3f 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 674 682 0 7 675 676 677 678 679 680 681 0 0 1 0 1131 0 0 0 0 0

1131 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 673 0 0 0 0 1 0 1132 0 0 0 0 0

1132 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 671 672 0 0 1 0 1117 0 0 0 0 0

1133 14 CPTA_LMatrix4d 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 686 694 0 7 687 688 689 690 691 692 693 0 0 1 0 1134 0 0 0 0 0

1134 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 685 0 0 0 0 1 0 1135 0 0 0 0 0

1135 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 683 684 0 0 1 0 1117 0 0 0 0 0

1136 14 CPTA_LMatrix4f 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 698 706 0 7 699 700 701 702 703 704 705 0 0 1 0 1137 0 0 0 0 0

1137 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 697 0 0 0 0 1 0 1138 0 0 0 0 0

1138 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 695 696 0 0 1 0 1117 0 0 0 0 0

1139 15 CPTA_LVecBase4d 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 710 718 0 7 711 712 713 714 715 716 717 0 0 1 0 1140 0 0 0 0 0

1140 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 709 0 0 0 0 1 0 1141 0 0 0 0 0

1141 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 707 708 0 0 1 0 1117 0 0 0 0 0

1142 15 CPTA_LVecBase4f 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 722 730 0 7 723 724 725 726 727 728 729 0 0 1 0 1143 0 0 0 0 0

1143 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 721 0 0 0 0 1 0 1144 0 0 0 0 0

1144 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 719 720 0 0 1 0 1117 0 0 0 0 0

1145 13 PTA_LMatrix3d 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 731 746 0 14 732 733 734 735 736 737 738 739 740 741 742 743 744 745 0 0 1 0 1115 0 0 0 0 0

1146 13 PTA_LMatrix3f 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 747 762 0 14 748 749 750 751 752 753 754 755 756 757 758 759 760 761 0 0 1 0 1119 0 0 0 0 0

1147 14 PTA_LVecBase2d 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 763 778 0 14 764 765 766 767 768 769 770 771 772 773 774 775 776 777 0 0 1 0 1122 0 0 0 0 0

1148 14 PTA_LVecBase2f 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 779 794 0 14 780 781 782 783 784 785 786 787 788 789 790 791 792 793 0 0 1 0 1125 0 0 0 0 0

1149 14 PTA_LVecBase3d 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 795 810 0 14 796 797 798 799 800 801 802 803 804 805 806 807 808 809 0 0 1 0 1128 0 0 0 0 0

1150 14 PTA_LVecBase3f 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 811 826 0 14 812 813 814 815 816 817 818 819 820 821 822 823 824 825 0 0 1 0 1131 0 0 0 0 0

1151 13 PTA_LMatrix4d 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 827 842 0 14 828 829 830 831 832 833 834 835 836 837 838 839 840 841 0 0 1 0 1134 0 0 0 0 0

1152 13 PTA_LMatrix4f 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 843 858 0 14 844 845 846 847 848 849 850 851 852 853 854 855 856 857 0 0 1 0 1137 0 0 0 0 0

1153 14 PTA_LVecBase4d 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 859 874 0 14 860 861 862 863 864 865 866 867 868 869 870 871 872 873 0 0 1 0 1140 0 0 0 0 0

1154 14 PTA_LVecBase4f 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 875 890 0 14 876 877 878 879 880 881 882 883 884 885 886 887 888 889 0 0 1 0 1143 0 0 0 0 0

1155 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 901 0 10 891 892 893 894 895 896 897 898 899 900 0 0 1 0 1156 0 0 0 2 1157 1158 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

1156 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1157 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1155 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 0 11 IF_possible 27 BoundingVolume::IF_possible 1 7 IF_some 23 BoundingVolume::IF_some 2 6 IF_all 22 BoundingVolume::IF_all 4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 8 0 77
// The contains() functions return the union of one or more of these
// bits.

1158 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1155 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1159 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 908 0 6 902 903 904 905 906 907 0 0 1 0 1155 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

1160 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 913 0 4 909 910 911 912 0 0 1 0 1159 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : FiniteBoundingVolume
// Description : A special kind of GeometricBoundingVolume that is
//               known to be finite.  It is possible to query this
//               kind of volume for its minimum and maximum extents.
////////////////////////////////////////////////////////////////////

1161 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 914 916 0 12 915 917 918 919 920 921 922 923 924 925 926 927 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1162 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 928 930 0 12 929 931 932 933 934 935 936 937 938 939 940 941 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1163 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 942 958 0 15 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 0 0 1 0 1164 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1164 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1165 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 959 975 0 15 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 0 0 1 0 1166 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1166 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1167 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 976 985 0 8 977 978 979 980 981 982 983 984 2 1427 1428 0 1 0 1160 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : BoundingBox
// Description : An axis-aligned bounding box; that is, a minimum and
//               maximum coordinate triple.
//
//               This box is always axis-aligned.  If you need a more
//               general bounding box, try BoundingHexahedron.
////////////////////////////////////////////////////////////////////

1168 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 986 993 0 6 987 988 989 990 991 992 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1169 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 994 1001 0 6 995 996 997 998 999 1000 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1170 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1002 1008 0 5 1003 1004 1005 1006 1007 2 1429 1430 0 1 0 1160 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

1171 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1009 1016 0 6 1010 1011 1012 1013 1014 1015 0 0 1 0 1159 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : BoundingLine
// Description : This funny bounding volume is an infinite line with
//               no thickness and extending to infinity in both
//               directions.
//
//               Note that it *always* extends in both directions,
//               despite the fact that you specify two points to the
//               constructor.  These are not endpoints, they are two
//               arbitrary points on the line.
////////////////////////////////////////////////////////////////////

1172 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1017 1023 0 5 1018 1019 1020 1021 1022 0 0 1 0 1159 0 0 0 0 482
////////////////////////////////////////////////////////////////////
//       Class : BoundingPlane
// Description : This funny bounding volume is an infinite plane that
//               divides space into two regions: the part behind the
//               normal, which is "inside" the bounding volume, and
//               the part in front of the normal, which is "outside"
//               the bounding volume.
////////////////////////////////////////////////////////////////////

1173 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1024 1031 0 6 1025 1026 1027 1028 1029 1030 0 0 1 0 1160 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BoundingSphere
// Description : This defines a bounding sphere, consisting of a
//               center and a radius.  It is always a sphere, and
//               never an ellipsoid or other quadric.
////////////////////////////////////////////////////////////////////

1174 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1032 1041 0 8 1033 1034 1035 1036 1037 1038 1039 1040 1 1431 0 1 0 1159 0 0 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : IntersectionBoundingVolume
// Description : This special bounding volume is the intersection of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within an
//               IntersectionBoundingVolume if it is within all of its
//               component bounding volumes.
////////////////////////////////////////////////////////////////////

1175 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1044 1046 0 1 1045 0 0 0 0 0 0

1176 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1047 1049 0 1 1048 0 0 1 0 1159 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : OmniBoundingVolume
// Description : This is a special kind of GeometricBoundingVolume
//               that fills all of space.
////////////////////////////////////////////////////////////////////

1177 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1050 1060 0 9 1051 1052 1053 1054 1055 1056 1057 1058 1059 1 1432 0 1 0 1159 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : UnionBoundingVolume
// Description : This special bounding volume is the union of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within a UnionBoundingVolume
//               if it is within any one or more of its component
//               bounding volumes.
////////////////////////////////////////////////////////////////////

1178 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1061 1068 0 6 1062 1063 1064 1065 1066 1067 0 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : Randomizer
// Description : A handy class to return random numbers.
////////////////////////////////////////////////////////////////////

1179 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1070 0 1 1069 0 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise
// Description : This is the base class for PerlinNoise2 and
//               PerlinNoise3, different dimensions of Perlin noise
//               implementation.  The base class just collects the
//               common functionality.
////////////////////////////////////////////////////////////////////

1180 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1071 1076 0 4 1072 1073 1074 1075 0 0 1 0 1179 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise2
// Description : This class provides an implementation of Perlin noise
//               for 2 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1181 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1077 1082 0 4 1078 1079 1080 1081 0 0 1 0 1179 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise3
// Description : This class provides an implementation of Perlin noise
//               for 3 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1182 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1084 1090 0 5 1085 1086 1087 1088 1089 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1183 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1091 1097 0 5 1092 1093 1094 1095 1096 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise3
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1184 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1098 1113 0 14 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1 1433 0 0 0 0 733
////////////////////////////////////////////////////////////////////
//       Class : Triangulator
// Description : This class can triangulate a convex or concave
//               polygon, even one with holes.  It is adapted from an
//               algorithm published as:
//
//               Narkhede A. and Manocha D., Fast polygon
//               triangulation algorithm based on Seidel's Algorithm,
//               UNC-CH, 1994.
//
//               http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
//
//               It works strictly on 2-d points.  You'll have to
//               convert your polygon into a plane if you have 3-d
//               points.
////////////////////////////////////////////////////////////////////

1185 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1186 0 0 0 0 0 0 0 0 0 0

1186 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1114 0 0 0 0 0 0 0 0 0 0

1187 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1114 0 0 0 0 0 0 0 0 0 0

1188 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1189 0 0 0 0 0 0 0 0 0 0

1189 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1145 0 0 0 0 0 0 0 0 0 0

1190 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1191 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1192 0 0 0 0 0 0 0 0 0 0

1192 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1193 0 0 0 0 0 0 0 0 0 0

1193 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 1434 1435 1436 1437 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1194 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1195 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1196 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1116 0 0 0 0 0 0 0 0 0 0

1197 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1198 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1199 0 0 0 0 0 0 0 0 0 0

1199 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1116 0 0 0 0 0 0 0 0 0 0

1200 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1201 0 0 0 0 0 0 0 0 0 0

1201 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1202 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1203 0 0 0 0 0 0 0 0 0 0

1203 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1118 0 0 0 0 0 0 0 0 0 0

1204 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1118 0 0 0 0 0 0 0 0 0 0

1205 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1206 0 0 0 0 0 0 0 0 0 0

1206 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1146 0 0 0 0 0 0 0 0 0 0

1207 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1208 0 0 0 0 0 0 0 0 0 0

1208 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1209 0 0 0 0 0 0 0 0 0 0

1209 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1438 1439 1440 1441 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1210 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1120 0 0 0 0 0 0 0 0 0 0

1211 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1212 0 0 0 0 0 0 0 0 0 0

1212 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1120 0 0 0 0 0 0 0 0 0 0

1213 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1214 0 0 0 0 0 0 0 0 0 0

1214 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1121 0 0 0 0 0 0 0 0 0 0

1215 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1121 0 0 0 0 0 0 0 0 0 0

1216 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1217 0 0 0 0 0 0 0 0 0 0

1217 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1147 0 0 0 0 0 0 0 0 0 0

1218 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1219 0 0 0 0 0 0 0 0 0 0

1219 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1220 0 0 0 0 0 0 0 0 0 0

1220 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1221 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1123 0 0 0 0 0 0 0 0 0 0

1222 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1223 0 0 0 0 0 0 0 0 0 0

1223 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1123 0 0 0 0 0 0 0 0 0 0

1224 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1225 0 0 0 0 0 0 0 0 0 0

1225 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1124 0 0 0 0 0 0 0 0 0 0

1226 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1227 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1228 0 0 0 0 0 0 0 0 0 0

1228 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1148 0 0 0 0 0 0 0 0 0 0

1229 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1230 0 0 0 0 0 0 0 0 0 0

1230 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1231 0 0 0 0 0 0 0 0 0 0

1231 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1232 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1126 0 0 0 0 0 0 0 0 0 0

1233 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1234 0 0 0 0 0 0 0 0 0 0

1234 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1126 0 0 0 0 0 0 0 0 0 0

1235 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1236 0 0 0 0 0 0 0 0 0 0

1236 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1127 0 0 0 0 0 0 0 0 0 0

1237 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1127 0 0 0 0 0 0 0 0 0 0

1238 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1239 0 0 0 0 0 0 0 0 0 0

1239 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1149 0 0 0 0 0 0 0 0 0 0

1240 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1241 0 0 0 0 0 0 0 0 0 0

1241 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1242 0 0 0 0 0 0 0 0 0 0

1242 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1243 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1129 0 0 0 0 0 0 0 0 0 0

1244 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1245 0 0 0 0 0 0 0 0 0 0

1245 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1129 0 0 0 0 0 0 0 0 0 0

1246 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1247 0 0 0 0 0 0 0 0 0 0

1247 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1130 0 0 0 0 0 0 0 0 0 0

1248 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1130 0 0 0 0 0 0 0 0 0 0

1249 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1250 0 0 0 0 0 0 0 0 0 0

1250 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1150 0 0 0 0 0 0 0 0 0 0

1251 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1252 0 0 0 0 0 0 0 0 0 0

1252 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1253 0 0 0 0 0 0 0 0 0 0

1253 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1254 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1132 0 0 0 0 0 0 0 0 0 0

1255 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1256 0 0 0 0 0 0 0 0 0 0

1256 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1132 0 0 0 0 0 0 0 0 0 0

1257 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1258 0 0 0 0 0 0 0 0 0 0

1258 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1133 0 0 0 0 0 0 0 0 0 0

1259 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1133 0 0 0 0 0 0 0 0 0 0

1260 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1261 0 0 0 0 0 0 0 0 0 0

1261 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1151 0 0 0 0 0 0 0 0 0 0

1262 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1263 0 0 0 0 0 0 0 0 0 0

1263 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1264 0 0 0 0 0 0 0 0 0 0

1264 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1265 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1135 0 0 0 0 0 0 0 0 0 0

1266 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1267 0 0 0 0 0 0 0 0 0 0

1267 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1135 0 0 0 0 0 0 0 0 0 0

1268 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1269 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1136 0 0 0 0 0 0 0 0 0 0

1270 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1136 0 0 0 0 0 0 0 0 0 0

1271 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1272 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1152 0 0 0 0 0 0 0 0 0 0

1273 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1274 0 0 0 0 0 0 0 0 0 0

1274 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1275 0 0 0 0 0 0 0 0 0 0

1275 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1276 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1138 0 0 0 0 0 0 0 0 0 0

1277 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1278 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1138 0 0 0 0 0 0 0 0 0 0

1279 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1280 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1139 0 0 0 0 0 0 0 0 0 0

1281 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1139 0 0 0 0 0 0 0 0 0 0

1282 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1283 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1153 0 0 0 0 0 0 0 0 0 0

1284 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1285 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1286 0 0 0 0 0 0 0 0 0 0

1286 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1287 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1141 0 0 0 0 0 0 0 0 0 0

1288 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1289 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1141 0 0 0 0 0 0 0 0 0 0

1290 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1291 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1142 0 0 0 0 0 0 0 0 0 0

1292 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1142 0 0 0 0 0 0 0 0 0 0

1293 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1294 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1154 0 0 0 0 0 0 0 0 0 0

1295 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1296 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1297 0 0 0 0 0 0 0 0 0 0

1297 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1298 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1144 0 0 0 0 0 0 0 0 0 0

1299 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1300 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1144 0 0 0 0 0 0 0 0 0 0

1301 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1145 0 0 0 0 0 0 0 0 0 0

1302 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1303 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1304 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1305 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1306 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1146 0 0 0 0 0 0 0 0 0 0

1307 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1147 0 0 0 0 0 0 0 0 0 0

1308 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1148 0 0 0 0 0 0 0 0 0 0

1309 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1149 0 0 0 0 0 0 0 0 0 0

1310 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1150 0 0 0 0 0 0 0 0 0 0

1311 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1151 0 0 0 0 0 0 0 0 0 0

1312 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1152 0 0 0 0 0 0 0 0 0 0

1313 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1153 0 0 0 0 0 0 0 0 0 0

1314 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1154 0 0 0 0 0 0 0 0 0 0

1315 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1316 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1155 0 0 0 0 0 0 0 0 0 0

1317 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1155 0 0 0 0 0 0 0 0 0 0

1318 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1319 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1159 0 0 0 0 0 0 0 0 0 0

1320 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1321 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1159 0 0 0 0 0 0 0 0 0 0

1322 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1323 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1324 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1325 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1326 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1327 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1328 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 1442 1443 1444 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1329 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1330 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1160 0 0 0 0 0 0 0 0 0 0

1331 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1332 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1161 0 0 0 0 0 0 0 0 0 0

1333 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1334 0 0 0 0 0 0 0 0 0 0

1334 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1161 0 0 0 0 0 0 0 0 0 0

1335 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1336 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

1337 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

1339 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1162 0 0 0 0 0 0 0 0 0 0

1340 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1162 0 0 0 0 0 0 0 0 0 0

1342 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1343 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1344 0 0 0 0 0 0 0 0 0 0

1344 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 1445 1446 1447 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1345 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1346 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1347 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1348 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1163 0 0 0 0 0 0 0 0 0 0

1349 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1350 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1164 0 0 0 0 0 0 0 0 0 0

1351 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1352 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1354 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1355 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1163 0 0 0 0 0 0 0 0 0 0

1356 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1357 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1353 0 0 0 0 0 0 0 0 0 0

1358 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1165 0 0 0 0 0 0 0 0 0 0

1359 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1360 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1345 0 0 0 0 0 0 0 0 0 0

1361 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1362 0 0 0 0 0 0 0 0 0 0

1362 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1166 0 0 0 0 0 0 0 0 0 0

1363 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1364 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1365 0 0 0 0 0 0 0 0 0 0

1365 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1366 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1165 0 0 0 0 0 0 0 0 0 0

1368 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1344 0 0 0 0 0 0 0 0 0 0

1369 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1370 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1167 0 0 0 0 0 0 0 0 0 0

1371 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1167 0 0 0 0 0 0 0 0 0 0

1373 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1168 0 0 0 0 0 0 0 0 0 0

1374 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1169 0 0 0 0 0 0 0 0 0 0

1375 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1168 0 0 0 0 0 0 0 0 0 0

1377 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1378 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1170 0 0 0 0 0 0 0 0 0 0

1379 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1170 0 0 0 0 0 0 0 0 0 0

1381 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1171 0 0 0 0 0 0 0 0 0 0

1382 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1171 0 0 0 0 0 0 0 0 0 0

1384 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1172 0 0 0 0 0 0 0 0 0 0

1385 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1172 0 0 0 0 0 0 0 0 0 0

1387 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1173 0 0 0 0 0 0 0 0 0 0

1388 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1389 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1173 0 0 0 0 0 0 0 0 0 0

1390 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1174 0 0 0 0 0 0 0 0 0 0

1391 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1392 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1174 0 0 0 0 0 0 0 0 0 0

1393 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1394 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1175 0 0 0 0 0 0 0 0 0 0

1395 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1176 0 0 0 0 0 0 0 0 0 0

1396 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1177 0 0 0 0 0 0 0 0 0 0

1397 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1398 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1177 0 0 0 0 0 0 0 0 0 0

1399 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1178 0 0 0 0 0 0 0 0 0 0

1401 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1178 0 0 0 0 0 0 0 0 0 0

1402 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1179 0 0 0 0 0 0 0 0 0 0

1403 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1180 0 0 0 0 0 0 0 0 0 0

1404 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1180 0 0 0 0 0 0 0 0 0 0

1406 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1181 0 0 0 0 0 0 0 0 0 0

1407 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1181 0 0 0 0 0 0 0 0 0 0

1409 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1182 0 0 0 0 0 0 0 0 0 0

1410 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1182 0 0 0 0 0 0 0 0 0 0

1412 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1183 0 0 0 0 0 0 0 0 0 0

1413 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1414 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1183 0 0 0 0 0 0 0 0 0 0

1415 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1184 0 0 0 0 0 0 0 0 0 0

1416 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1417 0 0 0 0 0 0 0 0 0 0

1417 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1419 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1420 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1184 0 0 0 0 0 0 0 0 0 0

1421 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1193 0 0 0 0 0 0 0 0 0 0

1422 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1209 0 0 0 0 0 0 0 0 0 0

1423 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1425 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1426 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

0
0
21
1427 0 0 419 10 get_points 14 get_num_points 9 get_point 
1428 0 0 419 10 get_planes 14 get_num_planes 9 get_plane 
1429 0 0 448 10 get_points 14 get_num_points 9 get_point 
1430 0 0 448 10 get_planes 14 get_num_planes 9 get_plane 
1431 0 0 482 14 get_components 18 get_num_components 13 get_component 
1432 0 0 503 14 get_components 18 get_num_components 13 get_component 
1433 0 0 558 12 get_vertices 16 get_num_vertices 10 get_vertex 
1434 0 0 587 8 get_rows 4 size 7 get_row 
1435 0 0 587 8 get_cols 4 size 7 get_col 
1436 0 0 587 9 get_col2s 4 size 8 get_col2 
1437 0 0 587 9 get_row2s 4 size 8 get_row2 
1438 0 0 614 8 get_rows 4 size 7 get_row 
1439 0 0 614 8 get_cols 4 size 7 get_col 
1440 0 0 614 9 get_col2s 4 size 8 get_col2 
1441 0 0 614 9 get_row2s 4 size 8 get_row2 
1442 0 0 1036 8 get_rows 4 size 7 get_row 
1443 0 0 1036 8 get_cols 4 size 7 get_col 
1444 0 0 1036 9 get_row3s 4 size 8 get_row3 
1445 0 0 1078 8 get_rows 4 size 7 get_row 
1446 0 0 1078 8 get_cols 4 size 7 get_col 
1447 0 0 1078 9 get_row3s 4 size 8 get_row3 
